!function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(r,o,function(t){return e[t]}.bind(null,o));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=152)}([function(e,t,n){"use strict";e.exports=n(107)},function(e,t,n){"use strict";function r(){return(r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}n.d(t,"a",(function(){return r}))},function(e,t,n){"use strict";n.d(t,"a",(function(){return o}));var r=n(11);function o(e,t){if(null==e)return{};var n,o,a=Object(r.a)(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}},function(e,t,n){"use strict";function r(e){var t,n,o="";if("string"==typeof e||"number"==typeof e)o+=e;else if("object"==typeof e)if(Array.isArray(e))for(t=0;t<e.length;t++)e[t]&&(n=r(e[t]))&&(o&&(o+=" "),o+=n);else for(t in e)e[t]&&(o&&(o+=" "),o+=t);return o}t.a=function(){for(var e,t,n=0,o="";n<arguments.length;)(e=arguments[n++])&&(t=r(e))&&(o&&(o+=" "),o+=t);return o}},function(e,t,n){e.exports=n(111)()},function(e,t,n){"use strict";var r=n(1),o=n(2),a=n(0),i=n.n(a),l=(n(4),n(21)),c=n.n(l),u=n(187),s=n(186),d=n(188),f=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return function(n){var a=t.defaultTheme,l=t.withTheme,f=void 0!==l&&l,p=t.name,m=Object(o.a)(t,["defaultTheme","withTheme","name"]);var h=p,v=Object(u.a)(e,Object(r.a)({defaultTheme:a,Component:n,name:p||n.displayName,classNamePrefix:h},m)),b=i.a.forwardRef((function(e,t){e.classes;var l,c=e.innerRef,u=Object(o.a)(e,["classes","innerRef"]),m=v(Object(r.a)(Object(r.a)({},n.defaultProps),e)),h=u;return("string"==typeof p||f)&&(l=Object(d.a)()||a,p&&(h=Object(s.a)({theme:l,name:p,props:u})),f&&!h.theme&&(h.theme=l)),i.a.createElement(n,Object(r.a)({ref:c||t,classes:m},h))}));return c()(b,n),b}},p=n(30);t.a=function(e,t){return f(e,Object(r.a)({defaultTheme:p.a},t))}},function(e,t,n){"use strict";n.d(t,"a",(function(){return o}));var r=n(93);function o(e){if("string"!=typeof e)throw new Error(Object(r.a)(7));return e.charAt(0).toUpperCase()+e.slice(1)}},function(e,t,n){"use strict";function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}n.d(t,"a",(function(){return r}))},function(e,t,n){"use strict";n.d(t,"d",(function(){return l})),n.d(t,"b",(function(){return u})),n.d(t,"c",(function(){return s})),n.d(t,"a",(function(){return d})),n.d(t,"e",(function(){return f}));var r=n(93);function o(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:1;return Math.min(Math.max(t,e),n)}function a(e){if(e.type)return e;if("#"===e.charAt(0))return a(function(e){e=e.substr(1);var t=new RegExp(".{1,".concat(e.length>=6?2:1,"}"),"g"),n=e.match(t);return n&&1===n[0].length&&(n=n.map((function(e){return e+e}))),n?"rgb".concat(4===n.length?"a":"","(").concat(n.map((function(e,t){return t<3?parseInt(e,16):Math.round(parseInt(e,16)/255*1e3)/1e3})).join(", "),")"):""}(e));var t=e.indexOf("("),n=e.substring(0,t);if(-1===["rgb","rgba","hsl","hsla"].indexOf(n))throw new Error(Object(r.a)(3,e));var o=e.substring(t+1,e.length-1).split(",");return{type:n,values:o=o.map((function(e){return parseFloat(e)}))}}function i(e){var t=e.type,n=e.values;return-1!==t.indexOf("rgb")?n=n.map((function(e,t){return t<3?parseInt(e,10):e})):-1!==t.indexOf("hsl")&&(n[1]="".concat(n[1],"%"),n[2]="".concat(n[2],"%")),"".concat(t,"(").concat(n.join(", "),")")}function l(e,t){var n=c(e),r=c(t);return(Math.max(n,r)+.05)/(Math.min(n,r)+.05)}function c(e){var t="hsl"===(e=a(e)).type?a(function(e){var t=(e=a(e)).values,n=t[0],r=t[1]/100,o=t[2]/100,l=r*Math.min(o,1-o),c=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:(e+n/30)%12;return o-l*Math.max(Math.min(t-3,9-t,1),-1)},u="rgb",s=[Math.round(255*c(0)),Math.round(255*c(8)),Math.round(255*c(4))];return"hsla"===e.type&&(u+="a",s.push(t[3])),i({type:u,values:s})}(e)).values:e.values;return t=t.map((function(e){return(e/=255)<=.03928?e/12.92:Math.pow((e+.055)/1.055,2.4)})),Number((.2126*t[0]+.7152*t[1]+.0722*t[2]).toFixed(3))}function u(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:.15;return c(e)>.5?d(e,t):f(e,t)}function s(e,t){return e=a(e),t=o(t),"rgb"!==e.type&&"hsl"!==e.type||(e.type+="a"),e.values[3]=t,i(e)}function d(e,t){if(e=a(e),t=o(t),-1!==e.type.indexOf("hsl"))e.values[2]*=1-t;else if(-1!==e.type.indexOf("rgb"))for(var n=0;n<3;n+=1)e.values[n]*=1-t;return i(e)}function f(e,t){if(e=a(e),t=o(t),-1!==e.type.indexOf("hsl"))e.values[2]+=(100-e.values[2])*t;else if(-1!==e.type.indexOf("rgb"))for(var n=0;n<3;n+=1)e.values[n]+=(255-e.values[n])*t;return i(e)}},,function(e,t,n){"use strict";!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE){0;try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}}(),e.exports=n(108)},function(e,t,n){"use strict";function r(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}n.d(t,"a",(function(){return r}))},function(e,t,n){"use strict";function r(e,t){e.prototype=Object.create(t.prototype),e.prototype.constructor=e,e.__proto__=t}n.d(t,"a",(function(){return r}))},function(e,t){e.exports=function(e){return e&&e.__esModule?e:{default:e}}},function(e,t,n){"use strict";n.d(t,"b",(function(){return a}));var r=n(2),o={easeInOut:"cubic-bezier(0.4, 0, 0.2, 1)",easeOut:"cubic-bezier(0.0, 0, 0.2, 1)",easeIn:"cubic-bezier(0.4, 0, 1, 1)",sharp:"cubic-bezier(0.4, 0, 0.6, 1)"},a={shortest:150,shorter:200,short:250,standard:300,complex:375,enteringScreen:225,leavingScreen:195};function i(e){return"".concat(Math.round(e),"ms")}t.a={easing:o,duration:a,create:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:["all"],t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=t.duration,l=void 0===n?a.standard:n,c=t.easing,u=void 0===c?o.easeInOut:c,s=t.delay,d=void 0===s?0:s;Object(r.a)(t,["duration","easing","delay"]);return(Array.isArray(e)?e:[e]).map((function(e){return"".concat(e," ").concat("string"==typeof l?l:i(l)," ").concat(u," ").concat("string"==typeof d?d:i(d))})).join(",")},getAutoHeightDuration:function(e){if(!e)return 0;var t=e/36;return Math.round(10*(4+15*Math.pow(t,.25)+t/5))}}},,function(e,t,n){"use strict";var r=n(13);Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){var n=a.default.memo(a.default.forwardRef((function(t,n){return a.default.createElement(i.default,(0,o.default)({ref:n},t),e)})));0;return n.muiName=i.default.muiName,n};var o=r(n(115)),a=r(n(0)),i=r(n(69))},function(e,t,n){"use strict";n.d(t,"a",(function(){return i}));var r=n(77);var o=n(46),a=n(78);function i(e,t){return Object(r.a)(e)||function(e,t){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(e)){var n=[],r=!0,o=!1,a=void 0;try{for(var i,l=e[Symbol.iterator]();!(r=(i=l.next()).done)&&(n.push(i.value),!t||n.length!==t);r=!0);}catch(e){o=!0,a=e}finally{try{r||null==l.return||l.return()}finally{if(o)throw a}}return n}}(e,t)||Object(o.a)(e,t)||Object(a.a)()}},,function(e,t){e.exports=function(){throw new Error("define cannot be used indirect")}},function(e,t,n){"use strict";n.r(t),n.d(t,"__DO_NOT_USE__ActionTypes",(function(){return a})),n.d(t,"applyMiddleware",(function(){return v})),n.d(t,"bindActionCreators",(function(){return d})),n.d(t,"combineReducers",(function(){return u})),n.d(t,"compose",(function(){return h})),n.d(t,"createStore",(function(){return l}));var r=n(58),o=function(){return Math.random().toString(36).substring(7).split("").join(".")},a={INIT:"@@redux/INIT"+o(),REPLACE:"@@redux/REPLACE"+o(),PROBE_UNKNOWN_ACTION:function(){return"@@redux/PROBE_UNKNOWN_ACTION"+o()}};function i(e){if("object"!=typeof e||null===e)return!1;for(var t=e;null!==Object.getPrototypeOf(t);)t=Object.getPrototypeOf(t);return Object.getPrototypeOf(e)===t}function l(e,t,n){var o;if("function"==typeof t&&"function"==typeof n||"function"==typeof n&&"function"==typeof arguments[3])throw new Error("It looks like you are passing several store enhancers to createStore(). This is not supported. Instead, compose them together to a single function.");if("function"==typeof t&&void 0===n&&(n=t,t=void 0),void 0!==n){if("function"!=typeof n)throw new Error("Expected the enhancer to be a function.");return n(l)(e,t)}if("function"!=typeof e)throw new Error("Expected the reducer to be a function.");var c=e,u=t,s=[],d=s,f=!1;function p(){d===s&&(d=s.slice())}function m(){if(f)throw new Error("You may not call store.getState() while the reducer is executing. The reducer has already received the state as an argument. Pass it down from the top reducer instead of reading it from the store.");return u}function h(e){if("function"!=typeof e)throw new Error("Expected the listener to be a function.");if(f)throw new Error("You may not call store.subscribe() while the reducer is executing. If you would like to be notified after the store has been updated, subscribe from a component and invoke store.getState() in the callback to access the latest state. See https://redux.js.org/api-reference/store#subscribelistener for more details.");var t=!0;return p(),d.push(e),function(){if(t){if(f)throw new Error("You may not unsubscribe from a store listener while the reducer is executing. See https://redux.js.org/api-reference/store#subscribelistener for more details.");t=!1,p();var n=d.indexOf(e);d.splice(n,1),s=null}}}function v(e){if(!i(e))throw new Error("Actions must be plain objects. Use custom middleware for async actions.");if(void 0===e.type)throw new Error('Actions may not have an undefined "type" property. Have you misspelled a constant?');if(f)throw new Error("Reducers may not dispatch actions.");try{f=!0,u=c(u,e)}finally{f=!1}for(var t=s=d,n=0;n<t.length;n++){(0,t[n])()}return e}function b(e){if("function"!=typeof e)throw new Error("Expected the nextReducer to be a function.");c=e,v({type:a.REPLACE})}function g(){var e,t=h;return(e={subscribe:function(e){if("object"!=typeof e||null===e)throw new TypeError("Expected the observer to be an object.");function n(){e.next&&e.next(m())}return n(),{unsubscribe:t(n)}}})[r.a]=function(){return this},e}return v({type:a.INIT}),(o={dispatch:v,subscribe:h,getState:m,replaceReducer:b})[r.a]=g,o}function c(e,t){var n=t&&t.type;return"Given "+(n&&'action "'+String(n)+'"'||"an action")+', reducer "'+e+'" returned undefined. To ignore an action, you must explicitly return the previous state. If you want this reducer to hold no value, you can return null instead of undefined.'}function u(e){for(var t=Object.keys(e),n={},r=0;r<t.length;r++){var o=t[r];0,"function"==typeof e[o]&&(n[o]=e[o])}var i,l=Object.keys(n);try{!function(e){Object.keys(e).forEach((function(t){var n=e[t];if(void 0===n(void 0,{type:a.INIT}))throw new Error('Reducer "'+t+"\" returned undefined during initialization. If the state passed to the reducer is undefined, you must explicitly return the initial state. The initial state may not be undefined. If you don't want to set a value for this reducer, you can use null instead of undefined.");if(void 0===n(void 0,{type:a.PROBE_UNKNOWN_ACTION()}))throw new Error('Reducer "'+t+"\" returned undefined when probed with a random type. Don't try to handle "+a.INIT+' or other actions in "redux/*" namespace. They are considered private. Instead, you must return the current state for any unknown actions, unless it is undefined, in which case you must return the initial state, regardless of the action type. The initial state may not be undefined, but can be null.')}))}(n)}catch(e){i=e}return function(e,t){if(void 0===e&&(e={}),i)throw i;for(var r=!1,o={},a=0;a<l.length;a++){var u=l[a],s=n[u],d=e[u],f=s(d,t);if(void 0===f){var p=c(u,t);throw new Error(p)}o[u]=f,r=r||f!==d}return(r=r||l.length!==Object.keys(e).length)?o:e}}function s(e,t){return function(){return t(e.apply(this,arguments))}}function d(e,t){if("function"==typeof e)return s(e,t);if("object"!=typeof e||null===e)throw new Error("bindActionCreators expected an object or a function, instead received "+(null===e?"null":typeof e)+'. Did you write "import ActionCreators from" instead of "import * as ActionCreators from"?');var n={};for(var r in e){var o=e[r];"function"==typeof o&&(n[r]=s(o,t))}return n}function f(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function p(e,t){var n=Object.keys(e);return Object.getOwnPropertySymbols&&n.push.apply(n,Object.getOwnPropertySymbols(e)),t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n}function m(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?p(n,!0).forEach((function(t){f(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):p(n).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function h(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return 0===t.length?function(e){return e}:1===t.length?t[0]:t.reduce((function(e,t){return function(){return e(t.apply(void 0,arguments))}}))}function v(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return function(e){return function(){var n=e.apply(void 0,arguments),r=function(){throw new Error("Dispatching while constructing your middleware is not allowed. Other middleware would not be applied to this dispatch.")},o={getState:n.getState,dispatch:function(){return r.apply(void 0,arguments)}},a=t.map((function(e){return e(o)}));return m({},n,{dispatch:r=h.apply(void 0,a)(n.dispatch)})}}}},function(e,t,n){"use strict";var r=n(27),o={childContextTypes:!0,contextType:!0,contextTypes:!0,defaultProps:!0,displayName:!0,getDefaultProps:!0,getDerivedStateFromError:!0,getDerivedStateFromProps:!0,mixins:!0,propTypes:!0,type:!0},a={name:!0,length:!0,prototype:!0,caller:!0,callee:!0,arguments:!0,arity:!0},i={$$typeof:!0,compare:!0,defaultProps:!0,displayName:!0,propTypes:!0,type:!0},l={};function c(e){return r.isMemo(e)?i:l[e.$$typeof]||o}l[r.ForwardRef]={$$typeof:!0,render:!0,defaultProps:!0,displayName:!0,propTypes:!0},l[r.Memo]=i;var u=Object.defineProperty,s=Object.getOwnPropertyNames,d=Object.getOwnPropertySymbols,f=Object.getOwnPropertyDescriptor,p=Object.getPrototypeOf,m=Object.prototype;e.exports=function e(t,n,r){if("string"!=typeof n){if(m){var o=p(n);o&&o!==m&&e(t,o,r)}var i=s(n);d&&(i=i.concat(d(n)));for(var l=c(t),h=c(n),v=0;v<i.length;++v){var b=i[v];if(!(a[b]||r&&r[b]||h&&h[b]||l&&l[b])){var g=f(n,b);try{u(t,b,g)}catch(e){}}}}return t}},function(e,t,n){"use strict";n.d(t,"b",(function(){return a})),n.d(t,"a",(function(){return i}));var r=n(1),o=n(2),a=["xs","sm","md","lg","xl"];function i(e){var t=e.values,n=void 0===t?{xs:0,sm:600,md:960,lg:1280,xl:1920}:t,i=e.unit,l=void 0===i?"px":i,c=e.step,u=void 0===c?5:c,s=Object(o.a)(e,["values","unit","step"]);function d(e){var t="number"==typeof n[e]?n[e]:e;return"@media (min-width:".concat(t).concat(l,")")}function f(e,t){var r=a.indexOf(t);return r===a.length-1?d(e):"@media (min-width:".concat("number"==typeof n[e]?n[e]:e).concat(l,") and ")+"(max-width:".concat((-1!==r&&"number"==typeof n[a[r+1]]?n[a[r+1]]:t)-u/100).concat(l,")")}return Object(r.a)({keys:a,values:n,up:d,down:function(e){var t=a.indexOf(e)+1,r=n[a[t]];return t===a.length?d("xs"):"@media (max-width:".concat(("number"==typeof r&&t>0?r:e)-u/100).concat(l,")")},between:f,only:function(e){return f(e,e)},width:function(e){return n[e]}},s)}},,function(e,t,n){"use strict";n.d(t,"a",(function(){return i}));var r=n(40);var o=n(76),a=n(46);function i(e){return function(e){if(Array.isArray(e))return Object(r.a)(e)}(e)||Object(o.a)(e)||Object(a.a)(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}},,function(e,t,n){"use strict";t.a=function(e,t){}},function(e,t,n){"use strict";e.exports=n(113)},function(e,t,n){"use strict";function r(e){return(r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}n.d(t,"a",(function(){return r}))},function(e,t,n){"use strict";var r=n(153);t.a=function(e,t){return t?Object(r.a)(e,t,{clone:!1}):e}},function(e,t,n){"use strict";var r=n(7),o=n(2),a=n(153),i=n(22),l=n(1);function c(e,t,n){var o;return Object(l.a)({gutters:function(){var n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return Object(l.a)({paddingLeft:t(2),paddingRight:t(2)},n,Object(r.a)({},e.up("sm"),Object(l.a)({paddingLeft:t(3),paddingRight:t(3)},n[e.up("sm")])))},toolbar:(o={minHeight:56},Object(r.a)(o,"".concat(e.up("xs")," and (orientation: landscape)"),{minHeight:48}),Object(r.a)(o,e.up("sm"),{minHeight:64}),o)},n)}var u=n(93),s={black:"#000",white:"#fff"},d={50:"#fafafa",100:"#f5f5f5",200:"#eeeeee",300:"#e0e0e0",400:"#bdbdbd",500:"#9e9e9e",600:"#757575",700:"#616161",800:"#424242",900:"#212121",A100:"#d5d5d5",A200:"#aaaaaa",A400:"#303030",A700:"#616161"},f={50:"#e8eaf6",100:"#c5cae9",200:"#9fa8da",300:"#7986cb",400:"#5c6bc0",500:"#3f51b5",600:"#3949ab",700:"#303f9f",800:"#283593",900:"#1a237e",A100:"#8c9eff",A200:"#536dfe",A400:"#3d5afe",A700:"#304ffe"},p={50:"#fce4ec",100:"#f8bbd0",200:"#f48fb1",300:"#f06292",400:"#ec407a",500:"#e91e63",600:"#d81b60",700:"#c2185b",800:"#ad1457",900:"#880e4f",A100:"#ff80ab",A200:"#ff4081",A400:"#f50057",A700:"#c51162"},m={50:"#ffebee",100:"#ffcdd2",200:"#ef9a9a",300:"#e57373",400:"#ef5350",500:"#f44336",600:"#e53935",700:"#d32f2f",800:"#c62828",900:"#b71c1c",A100:"#ff8a80",A200:"#ff5252",A400:"#ff1744",A700:"#d50000"},h={50:"#fff3e0",100:"#ffe0b2",200:"#ffcc80",300:"#ffb74d",400:"#ffa726",500:"#ff9800",600:"#fb8c00",700:"#f57c00",800:"#ef6c00",900:"#e65100",A100:"#ffd180",A200:"#ffab40",A400:"#ff9100",A700:"#ff6d00"},v={50:"#e3f2fd",100:"#bbdefb",200:"#90caf9",300:"#64b5f6",400:"#42a5f5",500:"#2196f3",600:"#1e88e5",700:"#1976d2",800:"#1565c0",900:"#0d47a1",A100:"#82b1ff",A200:"#448aff",A400:"#2979ff",A700:"#2962ff"},b=n(55),g=n(8),y={text:{primary:"rgba(0, 0, 0, 0.87)",secondary:"rgba(0, 0, 0, 0.54)",disabled:"rgba(0, 0, 0, 0.38)",hint:"rgba(0, 0, 0, 0.38)"},divider:"rgba(0, 0, 0, 0.12)",background:{paper:s.white,default:d[50]},action:{active:"rgba(0, 0, 0, 0.54)",hover:"rgba(0, 0, 0, 0.04)",hoverOpacity:.04,selected:"rgba(0, 0, 0, 0.08)",selectedOpacity:.08,disabled:"rgba(0, 0, 0, 0.26)",disabledBackground:"rgba(0, 0, 0, 0.12)",disabledOpacity:.38,focus:"rgba(0, 0, 0, 0.12)",focusOpacity:.12,activatedOpacity:.12}},x={text:{primary:s.white,secondary:"rgba(255, 255, 255, 0.7)",disabled:"rgba(255, 255, 255, 0.5)",hint:"rgba(255, 255, 255, 0.5)",icon:"rgba(255, 255, 255, 0.5)"},divider:"rgba(255, 255, 255, 0.12)",background:{paper:d[800],default:"#303030"},action:{active:s.white,hover:"rgba(255, 255, 255, 0.08)",hoverOpacity:.08,selected:"rgba(255, 255, 255, 0.16)",selectedOpacity:.16,disabled:"rgba(255, 255, 255, 0.3)",disabledBackground:"rgba(255, 255, 255, 0.12)",disabledOpacity:.38,focus:"rgba(255, 255, 255, 0.12)",focusOpacity:.12,activatedOpacity:.24}};function w(e,t,n,r){var o=r.light||r,a=r.dark||1.5*r;e[t]||(e.hasOwnProperty(n)?e[t]=e[n]:"light"===t?e.light=Object(g.e)(e.main,o):"dark"===t&&(e.dark=Object(g.a)(e.main,a)))}function O(e){var t=e.primary,n=void 0===t?{light:f[300],main:f[500],dark:f[700]}:t,r=e.secondary,i=void 0===r?{light:p.A200,main:p.A400,dark:p.A700}:r,c=e.error,O=void 0===c?{light:m[300],main:m[500],dark:m[700]}:c,E=e.warning,S=void 0===E?{light:h[300],main:h[500],dark:h[700]}:E,k=e.info,j=void 0===k?{light:v[300],main:v[500],dark:v[700]}:k,C=e.success,P=void 0===C?{light:b.a[300],main:b.a[500],dark:b.a[700]}:C,T=e.type,N=void 0===T?"light":T,R=e.contrastThreshold,M=void 0===R?3:R,D=e.tonalOffset,A=void 0===D?.2:D,I=Object(o.a)(e,["primary","secondary","error","warning","info","success","type","contrastThreshold","tonalOffset"]);function L(e){return Object(g.d)(e,x.text.primary)>=M?x.text.primary:y.text.primary}var _=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:500,n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:300,r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:700;if(!(e=Object(l.a)({},e)).main&&e[t]&&(e.main=e[t]),!e.main)throw new Error(Object(u.a)(4,t));if("string"!=typeof e.main)throw new Error(Object(u.a)(5,JSON.stringify(e.main)));return w(e,"light",n,A),w(e,"dark",r,A),e.contrastText||(e.contrastText=L(e.main)),e},z={dark:x,light:y};return Object(a.a)(Object(l.a)({common:s,type:N,primary:_(n),secondary:_(i,"A400","A200","A700"),error:_(O),warning:_(S),info:_(j),success:_(P),grey:d,contrastThreshold:M,getContrastText:L,augmentColor:_,tonalOffset:A},z[N]),I)}function E(e){return Math.round(1e5*e)/1e5}var S={textTransform:"uppercase"};function k(e,t){var n="function"==typeof t?t(e):t,r=n.fontFamily,i=void 0===r?'"Roboto", "Helvetica", "Arial", sans-serif':r,c=n.fontSize,u=void 0===c?14:c,s=n.fontWeightLight,d=void 0===s?300:s,f=n.fontWeightRegular,p=void 0===f?400:f,m=n.fontWeightMedium,h=void 0===m?500:m,v=n.fontWeightBold,b=void 0===v?700:v,g=n.htmlFontSize,y=void 0===g?16:g,x=n.allVariants,w=n.pxToRem,O=Object(o.a)(n,["fontFamily","fontSize","fontWeightLight","fontWeightRegular","fontWeightMedium","fontWeightBold","htmlFontSize","allVariants","pxToRem"]);var k=u/14,j=w||function(e){return"".concat(e/y*k,"rem")},C=function(e,t,n,r,o){return Object(l.a)({fontFamily:i,fontWeight:e,fontSize:j(t),lineHeight:n},'"Roboto", "Helvetica", "Arial", sans-serif'===i?{letterSpacing:"".concat(E(r/t),"em")}:{},o,x)},P={h1:C(d,96,1.167,-1.5),h2:C(d,60,1.2,-.5),h3:C(p,48,1.167,0),h4:C(p,34,1.235,.25),h5:C(p,24,1.334,0),h6:C(h,20,1.6,.15),subtitle1:C(p,16,1.75,.15),subtitle2:C(h,14,1.57,.1),body1:C(p,16,1.5,.15),body2:C(p,14,1.43,.15),button:C(h,14,1.75,.4,S),caption:C(p,12,1.66,.4),overline:C(p,12,2.66,1,S)};return Object(a.a)(Object(l.a)({htmlFontSize:y,pxToRem:j,round:E,fontFamily:i,fontSize:u,fontWeightLight:d,fontWeightRegular:p,fontWeightMedium:h,fontWeightBold:b},P),O,{clone:!1})}function j(){return["".concat(arguments.length<=0?void 0:arguments[0],"px ").concat(arguments.length<=1?void 0:arguments[1],"px ").concat(arguments.length<=2?void 0:arguments[2],"px ").concat(arguments.length<=3?void 0:arguments[3],"px rgba(0,0,0,").concat(.2,")"),"".concat(arguments.length<=4?void 0:arguments[4],"px ").concat(arguments.length<=5?void 0:arguments[5],"px ").concat(arguments.length<=6?void 0:arguments[6],"px ").concat(arguments.length<=7?void 0:arguments[7],"px rgba(0,0,0,").concat(.14,")"),"".concat(arguments.length<=8?void 0:arguments[8],"px ").concat(arguments.length<=9?void 0:arguments[9],"px ").concat(arguments.length<=10?void 0:arguments[10],"px ").concat(arguments.length<=11?void 0:arguments[11],"px rgba(0,0,0,").concat(.12,")")].join(",")}var C=["none",j(0,2,1,-1,0,1,1,0,0,1,3,0),j(0,3,1,-2,0,2,2,0,0,1,5,0),j(0,3,3,-2,0,3,4,0,0,1,8,0),j(0,2,4,-1,0,4,5,0,0,1,10,0),j(0,3,5,-1,0,5,8,0,0,1,14,0),j(0,3,5,-1,0,6,10,0,0,1,18,0),j(0,4,5,-2,0,7,10,1,0,2,16,1),j(0,5,5,-3,0,8,10,1,0,3,14,2),j(0,5,6,-3,0,9,12,1,0,3,16,2),j(0,6,6,-3,0,10,14,1,0,4,18,3),j(0,6,7,-4,0,11,15,1,0,4,20,3),j(0,7,8,-4,0,12,17,2,0,5,22,4),j(0,7,8,-4,0,13,19,2,0,5,24,4),j(0,7,9,-4,0,14,21,2,0,5,26,4),j(0,8,9,-5,0,15,22,2,0,6,28,5),j(0,8,10,-5,0,16,24,2,0,6,30,5),j(0,8,11,-5,0,17,26,2,0,6,32,5),j(0,9,11,-5,0,18,28,2,0,7,34,6),j(0,9,12,-6,0,19,29,2,0,7,36,6),j(0,10,13,-6,0,20,31,3,0,8,38,7),j(0,10,13,-6,0,21,33,3,0,8,40,7),j(0,10,14,-6,0,22,35,3,0,8,42,7),j(0,11,14,-7,0,23,36,3,0,9,44,8),j(0,11,15,-7,0,24,38,3,0,9,46,8)],P={borderRadius:4},T=n(189);function N(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:8;if(e.mui)return e;var t=Object(T.a)({spacing:e}),n=function(){for(var e=arguments.length,n=new Array(e),r=0;r<e;r++)n[r]=arguments[r];return 0===n.length?t(1):1===n.length?t(n[0]):n.map((function(e){if("string"==typeof e)return e;var n=t(e);return"number"==typeof n?"".concat(n,"px"):n})).join(" ")};return Object.defineProperty(n,"unit",{get:function(){return e}}),n.mui=!0,n}var R=n(14),M=n(48);var D=function(){for(var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e.breakpoints,n=void 0===t?{}:t,r=e.mixins,l=void 0===r?{}:r,u=e.palette,s=void 0===u?{}:u,d=e.spacing,f=e.typography,p=void 0===f?{}:f,m=Object(o.a)(e,["breakpoints","mixins","palette","spacing","typography"]),h=O(s),v=Object(i.a)(n),b=N(d),g=Object(a.a)({breakpoints:v,direction:"ltr",mixins:c(v,b,l),overrides:{},palette:h,props:{},shadows:C,typography:k(h,p),spacing:b,shape:P,transitions:R.a,zIndex:M.a},m),y=arguments.length,x=new Array(y>1?y-1:0),w=1;w<y;w++)x[w-1]=arguments[w];return g=x.reduce((function(e,t){return Object(a.a)(e,t)}),g)}();t.a=D},,,function(e,t){e.exports=function(e){return e.webpackPolyfill||(e.deprecate=function(){},e.paths=[],e.children||(e.children=[]),Object.defineProperty(e,"loaded",{enumerable:!0,get:function(){return e.l}}),Object.defineProperty(e,"id",{enumerable:!0,get:function(){return e.i}}),e.webpackPolyfill=1),e}},function(e,t){(function(t){e.exports=t}).call(this,{})},function(e,t,n){"use strict";var r=n(13);Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var o=r(n(0)),a=(0,r(n(16)).default)(o.default.createElement("path",{d:"M6 19c0 1.1.9 2 2 2h8c1.1 0 2-.9 2-2V7H6v12zM19 4h-3.5l-1-1h-5l-1 1H5v2h14V4z"}),"Delete");t.default=a},function(e,t,n){"use strict";var r=n(13);Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var o=r(n(0)),a=(0,r(n(16)).default)(o.default.createElement("path",{d:"M3 17.25V21h3.75L17.81 9.94l-3.75-3.75L3 17.25zM20.71 7.04c.39-.39.39-1.02 0-1.41l-2.34-2.34a.9959.9959 0 00-1.41 0l-1.83 1.83 3.75 3.75 1.83-1.83z"}),"Create");t.default=a},function(e,t,n){"use strict";function r(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function o(e,t,n){return t&&r(e.prototype,t),n&&r(e,n),e}n.d(t,"a",(function(){return o}))},,function(e,t,n){"use strict";function r(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}n.d(t,"a",(function(){return r}))},function(e,t,n){"use strict";function r(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}n.d(t,"a",(function(){return r}))},function(e,t,n){"use strict";var r=n(13);Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var o=r(n(0)),a=(0,r(n(16)).default)(o.default.createElement("path",{d:"M7 18c-1.1 0-1.99.9-1.99 2S5.9 22 7 22s2-.9 2-2-.9-2-2-2zM1 2v2h2l3.6 7.59-1.35 2.45c-.16.28-.25.61-.25.96 0 1.1.9 2 2 2h12v-2H7.42c-.14 0-.25-.11-.25-.25l.03-.12.9-1.63h7.45c.75 0 1.41-.41 1.75-1.03l3.58-6.49c.08-.14.12-.31.12-.48 0-.55-.45-1-1-1H5.21l-.94-2H1zm16 16c-1.1 0-1.99.9-1.99 2s.89 2 1.99 2 2-.9 2-2-.9-2-2-2z"}),"ShoppingCart");t.default=a},,function(e,t){var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(e){"object"==typeof window&&(n=window)}e.exports=n},function(e,t){e.exports=function(e){return e&&e.__esModule?e:{default:e}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.findInArray=function(e,t){for(var n=0,r=e.length;n<r;n++)if(t.apply(t,[e[n],n,e]))return e[n]},t.isFunction=function(e){return"function"==typeof e||"[object Function]"===Object.prototype.toString.call(e)},t.isNum=function(e){return"number"==typeof e&&!isNaN(e)},t.int=function(e){return parseInt(e,10)},t.dontSetMe=function(e,t,n){if(e[t])return new Error("Invalid prop ".concat(t," passed to ").concat(n," - do not set this, set it on the child."))}},function(e,t,n){"use strict";n.d(t,"a",(function(){return o}));var r=n(40);function o(e,t){if(e){if("string"==typeof e)return Object(r.a)(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Object(r.a)(e,t):void 0}}},function(e,t,n){"use strict";n.d(t,"a",(function(){return i}));n(24),n(1);var r=n(28),o=(n(4),n(29),{xs:0,sm:600,md:960,lg:1280,xl:1920}),a={keys:["xs","sm","md","lg","xl"],up:function(e){return"@media (min-width:".concat(o[e],"px)")}};function i(e,t,n){if(Array.isArray(t)){var o=e.theme.breakpoints||a;return t.reduce((function(e,r,a){return e[o.up(o.keys[a])]=n(t[a]),e}),{})}if("object"===Object(r.a)(t)){var i=e.theme.breakpoints||a;return Object.keys(t).reduce((function(e,r){return e[i.up(r)]=n(t[r]),e}),{})}return n(t)}},function(e,t,n){"use strict";t.a={mobileStepper:1e3,speedDial:1050,appBar:1100,drawer:1200,modal:1300,snackbar:1400,tooltip:1500}},function(e,t,n){"use strict";var r=n(13);Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var o=r(n(0)),a=(0,r(n(16)).default)(o.default.createElement("path",{d:"M9 16.2L4.8 12l-1.4 1.4L9 19 21 7l-1.4-1.4L9 16.2z"}),"Done");t.default=a},function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.AvatarGenerator=void 0;var o=r(n(116)),a=function(){function e(){}return e.prototype.generateRandomAvatar=function(e){var t=new Array;t.push("NoHair","Eyepatch","Hat","Hijab","Turban","WinterHat1","WinterHat2","WinterHat3","WinterHat4","LongHairBigHair","LongHairBob","LongHairBun","LongHairCurly","LongHairCurvy","LongHairDreads","LongHairFrida","LongHairFro","LongHairFroBand","LongHairNotTooLong","LongHairShavedSides","LongHairMiaWallace","LongHairStraight","LongHairStraight2","LongHairStraightStrand","ShortHairDreads01","ShortHairDreads02","ShortHairFrizzle","ShortHairShaggyMullet","ShortHairShortCurly","ShortHairShortFlat","ShortHairShortRound","ShortHairShortWaved","ShortHairSides","ShortHairTheCaesar","ShortHairTheCaesarSidePart");var n=new Array;n.push("Blank","Kurt","Prescription01","Prescription02","Round","Sunglasses","Wayfarers");var r=new Array;r.push("Blank","BeardMedium","BeardLight","BeardMagestic","MoustacheFancy","MoustacheMagnum");var a=new Array;a.push("Auburn","Black","Blonde","BlondeGolden","Brown","BrownDark","Platinum","Red");var i=new Array;i.push("BlazerShirt","BlazerSweater","CollarSweater","GraphicShirt","Hoodie","Overall","ShirtCrewNeck","ShirtScoopNeck","ShirtVNeck");var l=new Array;l.push("Close","Cry","Default","Dizzy","EyeRoll","Happy","Hearts","Side","Squint","Surprised","Wink","WinkWacky");var c=new Array;c.push("Angry","AngryNatural","Default","DefaultNatural","FlatNatural","RaisedExcited","RaisedExcitedNatural","SadConcerned","SadConcernedNatural","UnibrowNatural","UpDown","UpDownNatural");var u=new Array;u.push("Concerned","Default","Disbelief","Eating","Grimace","Sad","ScreamOpen","Serious","Smile","Tongue","Twinkle","Vomit");var s=new Array;s.push("Tanned","Yellow","Pale","Light","Brown","DarkBrown","Black");var d=new Array;d.push("Auburn","Black","Blonde","BlondeGolden","Brown","BrownDark","PastelPink","Platinum","Red","SilverGray");var f=new Array;f.push("Black","Blue01","Blue02","Blue03","Gray01","Gray02","Heather","PastelBlue","PastelGreen","PastelOrange","PastelRed","PastelYellow","Pink","Red","White");var p=new Array;p.push("Black","Blue01","Blue02","Blue03","Gray01","Gray02","Heather","PastelBlue","PastelGreen","PastelOrange","PastelRed","PastelYellow","Pink","Red","White");var m=e?o.default(e):o.default();return"https://avataaars.io/?accessoriesType="+n[Math.floor(m()*n.length)]+"&avatarStyle=Circle&clotheColor="+p[Math.floor(m()*p.length)]+"&clotheType="+i[Math.floor(m()*i.length)]+"&eyeType="+l[Math.floor(m()*l.length)]+"&eyebrowType="+c[Math.floor(m()*c.length)]+"&facialHairColor="+a[Math.floor(m()*a.length)]+"&facialHairType="+r[Math.floor(m()*r.length)]+"&hairColor="+d[Math.floor(m()*d.length)]+"&hatColor="+f[Math.floor(m()*f.length)]+"&mouthType="+u[Math.floor(m()*u.length)]+"&skinColor="+s[Math.floor(m()*s.length)]+"&topType="+t[Math.floor(m()*t.length)]},e}();t.AvatarGenerator=a},function(e,t,n){"use strict";var r=n(13);Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var o=r(n(0)),a=(0,r(n(16)).default)(o.default.createElement(o.default.Fragment,null,o.default.createElement("path",{d:"M21 5c-1.11-.35-2.33-.5-3.5-.5-1.95 0-4.05.4-5.5 1.5-1.45-1.1-3.55-1.5-5.5-1.5S2.45 4.9 1 6v14.65c0 .25.25.5.5.5.1 0 .15-.05.25-.05C3.1 20.45 5.05 20 6.5 20c1.95 0 4.05.4 5.5 1.5 1.35-.85 3.8-1.5 5.5-1.5 1.65 0 3.35.3 4.75 1.05.1.05.15.05.25.05.25 0 .5-.25.5-.5V6c-.6-.45-1.25-.75-2-1zm0 13.5c-1.1-.35-2.3-.5-3.5-.5-1.7 0-4.15.65-5.5 1.5V8c1.35-.85 3.8-1.5 5.5-1.5 1.2 0 2.4.15 3.5.5v11.5z"}),o.default.createElement("path",{d:"M17.5 10.5c.88 0 1.73.09 2.5.26V9.24c-.79-.15-1.64-.24-2.5-.24-1.7 0-3.24.29-4.5.83v1.66c1.13-.64 2.7-.99 4.5-.99zM13 12.49v1.66c1.13-.64 2.7-.99 4.5-.99.88 0 1.73.09 2.5.26V11.9c-.79-.15-1.64-.24-2.5-.24-1.7 0-3.24.3-4.5.83zM17.5 14.33c-1.7 0-3.24.29-4.5.83v1.66c1.13-.64 2.7-.99 4.5-.99.88 0 1.73.09 2.5.26v-1.52c-.79-.16-1.64-.24-2.5-.24z"})),"MenuBookOutlined");t.default=a},function(e,t,n){"use strict";var r=n(13);Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var o=r(n(0)),a=(0,r(n(16)).default)(o.default.createElement("path",{d:"M4 6H2v14c0 1.1.9 2 2 2h14v-2H4V6zm16-4H8c-1.1 0-2 .9-2 2v12c0 1.1.9 2 2 2h12c1.1 0 2-.9 2-2V4c0-1.1-.9-2-2-2zm-3 2v5l-1-.75L15 9V4h2zm3 12H8V4h5v9l3-2.25L19 13V4h1v12z"}),"CollectionsBookmarkOutlined");t.default=a},function(e,t,n){"use strict";var r=n(70);Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var o=r(n(125)).default;t.default=o},function(e,t,n){"use strict";var r=n(13);Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var o=r(n(0)),a=(0,r(n(16)).default)(o.default.createElement("path",{d:"M2.01 21L23 12 2.01 3 2 10l15 2-15 2z"}),"Send");t.default=a},function(e,t,n){"use strict";t.a={50:"#e8f5e9",100:"#c8e6c9",200:"#a5d6a7",300:"#81c784",400:"#66bb6a",500:"#4caf50",600:"#43a047",700:"#388e3c",800:"#2e7d32",900:"#1b5e20",A100:"#b9f6ca",A200:"#69f0ae",A400:"#00e676",A700:"#00c853"}},function(e,t,n){"use strict";function r(e){return(r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}Object.defineProperty(t,"__esModule",{value:!0}),t.matchesSelector=d,t.matchesSelectorAndParentsTo=function(e,t,n){var r=e;do{if(d(r,t))return!0;if(r===n)return!1;r=r.parentNode}while(r);return!1},t.addEvent=function(e,t,n,r){if(!e)return;var o=c({capture:!0},r);e.addEventListener?e.addEventListener(t,n,o):e.attachEvent?e.attachEvent("on"+t,n):e["on"+t]=n},t.removeEvent=function(e,t,n,r){if(!e)return;var o=c({capture:!0},r);e.removeEventListener?e.removeEventListener(t,n,o):e.detachEvent?e.detachEvent("on"+t,n):e["on"+t]=null},t.outerHeight=function(e){var t=e.clientHeight,n=e.ownerDocument.defaultView.getComputedStyle(e);return t+=(0,o.int)(n.borderTopWidth),t+=(0,o.int)(n.borderBottomWidth)},t.outerWidth=function(e){var t=e.clientWidth,n=e.ownerDocument.defaultView.getComputedStyle(e);return t+=(0,o.int)(n.borderLeftWidth),t+=(0,o.int)(n.borderRightWidth)},t.innerHeight=function(e){var t=e.clientHeight,n=e.ownerDocument.defaultView.getComputedStyle(e);return t-=(0,o.int)(n.paddingTop),t-=(0,o.int)(n.paddingBottom)},t.innerWidth=function(e){var t=e.clientWidth,n=e.ownerDocument.defaultView.getComputedStyle(e);return t-=(0,o.int)(n.paddingLeft),t-=(0,o.int)(n.paddingRight)},t.offsetXYFromParent=function(e,t,n){var r=t===t.ownerDocument.body?{left:0,top:0}:t.getBoundingClientRect(),o=(e.clientX+t.scrollLeft-r.left)/n,a=(e.clientY+t.scrollTop-r.top)/n;return{x:o,y:a}},t.createCSSTransform=function(e,t){var n=f(e,t,"px");return u({},(0,a.browserPrefixToKey)("transform",a.default),n)},t.createSVGTransform=function(e,t){return f(e,t,"")},t.getTranslation=f,t.getTouch=function(e,t){return e.targetTouches&&(0,o.findInArray)(e.targetTouches,(function(e){return t===e.identifier}))||e.changedTouches&&(0,o.findInArray)(e.changedTouches,(function(e){return t===e.identifier}))},t.getTouchIdentifier=function(e){if(e.targetTouches&&e.targetTouches[0])return e.targetTouches[0].identifier;if(e.changedTouches&&e.changedTouches[0])return e.changedTouches[0].identifier},t.addUserSelectStyles=function(e){if(!e)return;var t=e.getElementById("react-draggable-style-el");t||((t=e.createElement("style")).type="text/css",t.id="react-draggable-style-el",t.innerHTML=".react-draggable-transparent-selection *::-moz-selection {all: inherit;}\n",t.innerHTML+=".react-draggable-transparent-selection *::selection {all: inherit;}\n",e.getElementsByTagName("head")[0].appendChild(t));e.body&&p(e.body,"react-draggable-transparent-selection")},t.removeUserSelectStyles=function(e){if(!e)return;try{if(e.body&&m(e.body,"react-draggable-transparent-selection"),e.selection)e.selection.empty();else{var t=(e.defaultView||window).getSelection();t&&"Caret"!==t.type&&t.removeAllRanges()}}catch(e){}},t.addClassName=p,t.removeClassName=m;var o=n(45),a=function(e){if(e&&e.__esModule)return e;if(null===e||"object"!==r(e)&&"function"!=typeof e)return{default:e};var t=i();if(t&&t.has(e))return t.get(e);var n={},o=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var a in e)if(Object.prototype.hasOwnProperty.call(e,a)){var l=o?Object.getOwnPropertyDescriptor(e,a):null;l&&(l.get||l.set)?Object.defineProperty(n,a,l):n[a]=e[a]}n.default=e,t&&t.set(e,n);return n}(n(144));function i(){if("function"!=typeof WeakMap)return null;var e=new WeakMap;return i=function(){return e},e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){u(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function u(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var s="";function d(e,t){return s||(s=(0,o.findInArray)(["matches","webkitMatchesSelector","mozMatchesSelector","msMatchesSelector","oMatchesSelector"],(function(t){return(0,o.isFunction)(e[t])}))),!!(0,o.isFunction)(e[s])&&e[s](t)}function f(e,t,n){var r=e.x,o=e.y,a="translate(".concat(r).concat(n,",").concat(o).concat(n,")");if(t){var i="".concat("string"==typeof t.x?t.x:t.x+n),l="".concat("string"==typeof t.y?t.y:t.y+n);a="translate(".concat(i,", ").concat(l,")")+a}return a}function p(e,t){e.classList?e.classList.add(t):e.className.match(new RegExp("(?:^|\\s)".concat(t,"(?!\\S)")))||(e.className+=" ".concat(t))}function m(e,t){e.classList?e.classList.remove(t):e.className=e.className.replace(new RegExp("(?:^|\\s)".concat(t,"(?!\\S)"),"g"),"")}},function(e,t,n){"use strict";var r=n(13);Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var o=r(n(0)),a=(0,r(n(16)).default)(o.default.createElement("path",{d:"M3 18h18v-2H3v2zm0-5h18v-2H3v2zm0-7v2h18V6H3z"}),"Menu");t.default=a},function(e,t,n){"use strict";(function(e,r){var o,a=n(75);o="undefined"!=typeof self?self:"undefined"!=typeof window?window:void 0!==e?e:r;var i=Object(a.a)(o);t.a=i}).call(this,n(43),n(114)(e))},function(e,t,n){"use strict";(function(e){var r=n(0),o=n.n(r),a=n(12),i=n(4),l=n.n(i),c="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof window?window:void 0!==e?e:{};function u(e){var t=[];return{on:function(e){t.push(e)},off:function(e){t=t.filter((function(t){return t!==e}))},get:function(){return e},set:function(n,r){e=n,t.forEach((function(t){return t(e,r)}))}}}var s=o.a.createContext||function(e,t){var n,o,i,s="__create-react-context-"+((c[i="__global_unique_id__"]=(c[i]||0)+1)+"__"),d=function(e){function n(){var t;return(t=e.apply(this,arguments)||this).emitter=u(t.props.value),t}Object(a.a)(n,e);var r=n.prototype;return r.getChildContext=function(){var e;return(e={})[s]=this.emitter,e},r.componentWillReceiveProps=function(e){if(this.props.value!==e.value){var n,r=this.props.value,o=e.value;((a=r)===(i=o)?0!==a||1/a==1/i:a!=a&&i!=i)?n=0:(n="function"==typeof t?t(r,o):1073741823,0!==(n|=0)&&this.emitter.set(e.value,n))}var a,i},r.render=function(){return this.props.children},n}(r.Component);d.childContextTypes=((n={})[s]=l.a.object.isRequired,n);var f=function(t){function n(){var e;return(e=t.apply(this,arguments)||this).state={value:e.getValue()},e.onUpdate=function(t,n){0!=((0|e.observedBits)&n)&&e.setState({value:e.getValue()})},e}Object(a.a)(n,t);var r=n.prototype;return r.componentWillReceiveProps=function(e){var t=e.observedBits;this.observedBits=null==t?1073741823:t},r.componentDidMount=function(){this.context[s]&&this.context[s].on(this.onUpdate);var e=this.props.observedBits;this.observedBits=null==e?1073741823:e},r.componentWillUnmount=function(){this.context[s]&&this.context[s].off(this.onUpdate)},r.getValue=function(){return this.context[s]?this.context[s].get():e},r.render=function(){return(e=this.props.children,Array.isArray(e)?e[0]:e)(this.state.value);var e},n}(r.Component);return f.contextTypes=((o={})[s]=l.a.object,o),{Provider:d,Consumer:f}};t.a=s}).call(this,n(43))},function(e,t,n){var r=n(146);e.exports=p,e.exports.parse=a,e.exports.compile=function(e,t){return l(a(e,t),t)},e.exports.tokensToFunction=l,e.exports.tokensToRegExp=f;var o=new RegExp(["(\\\\.)","([\\/.])?(?:(?:\\:(\\w+)(?:\\(((?:\\\\.|[^\\\\()])+)\\))?|\\(((?:\\\\.|[^\\\\()])+)\\))([+*?])?|(\\*))"].join("|"),"g");function a(e,t){for(var n,r=[],a=0,i=0,l="",s=t&&t.delimiter||"/";null!=(n=o.exec(e));){var d=n[0],f=n[1],p=n.index;if(l+=e.slice(i,p),i=p+d.length,f)l+=f[1];else{var m=e[i],h=n[2],v=n[3],b=n[4],g=n[5],y=n[6],x=n[7];l&&(r.push(l),l="");var w=null!=h&&null!=m&&m!==h,O="+"===y||"*"===y,E="?"===y||"*"===y,S=n[2]||s,k=b||g;r.push({name:v||a++,prefix:h||"",delimiter:S,optional:E,repeat:O,partial:w,asterisk:!!x,pattern:k?u(k):x?".*":"[^"+c(S)+"]+?"})}}return i<e.length&&(l+=e.substr(i)),l&&r.push(l),r}function i(e){return encodeURI(e).replace(/[\/?#]/g,(function(e){return"%"+e.charCodeAt(0).toString(16).toUpperCase()}))}function l(e,t){for(var n=new Array(e.length),o=0;o<e.length;o++)"object"==typeof e[o]&&(n[o]=new RegExp("^(?:"+e[o].pattern+")$",d(t)));return function(t,o){for(var a="",l=t||{},c=(o||{}).pretty?i:encodeURIComponent,u=0;u<e.length;u++){var s=e[u];if("string"!=typeof s){var d,f=l[s.name];if(null==f){if(s.optional){s.partial&&(a+=s.prefix);continue}throw new TypeError('Expected "'+s.name+'" to be defined')}if(r(f)){if(!s.repeat)throw new TypeError('Expected "'+s.name+'" to not repeat, but received `'+JSON.stringify(f)+"`");if(0===f.length){if(s.optional)continue;throw new TypeError('Expected "'+s.name+'" to not be empty')}for(var p=0;p<f.length;p++){if(d=c(f[p]),!n[u].test(d))throw new TypeError('Expected all "'+s.name+'" to match "'+s.pattern+'", but received `'+JSON.stringify(d)+"`");a+=(0===p?s.prefix:s.delimiter)+d}}else{if(d=s.asterisk?encodeURI(f).replace(/[?#]/g,(function(e){return"%"+e.charCodeAt(0).toString(16).toUpperCase()})):c(f),!n[u].test(d))throw new TypeError('Expected "'+s.name+'" to match "'+s.pattern+'", but received "'+d+'"');a+=s.prefix+d}}else a+=s}return a}}function c(e){return e.replace(/([.+*?=^!:${}()[\]|\/\\])/g,"\\$1")}function u(e){return e.replace(/([=!:$\/()])/g,"\\$1")}function s(e,t){return e.keys=t,e}function d(e){return e&&e.sensitive?"":"i"}function f(e,t,n){r(t)||(n=t||n,t=[]);for(var o=(n=n||{}).strict,a=!1!==n.end,i="",l=0;l<e.length;l++){var u=e[l];if("string"==typeof u)i+=c(u);else{var f=c(u.prefix),p="(?:"+u.pattern+")";t.push(u),u.repeat&&(p+="(?:"+f+p+")*"),i+=p=u.optional?u.partial?f+"("+p+")?":"(?:"+f+"("+p+"))?":f+"("+p+")"}}var m=c(n.delimiter||"/"),h=i.slice(-m.length)===m;return o||(i=(h?i.slice(0,-m.length):i)+"(?:"+m+"(?=$))?"),i+=a?"$":o&&h?"":"(?="+m+"|$)",s(new RegExp("^"+i,d(n)),t)}function p(e,t,n){return r(t)||(n=t||n,t=[]),n=n||{},e instanceof RegExp?function(e,t){var n=e.source.match(/\((?!\?)/g);if(n)for(var r=0;r<n.length;r++)t.push({name:r,prefix:null,delimiter:null,optional:!1,repeat:!1,partial:!1,asterisk:!1,pattern:null});return s(e,t)}(e,t):r(e)?function(e,t,n){for(var r=[],o=0;o<e.length;o++)r.push(p(e[o],t,n).source);return s(new RegExp("(?:"+r.join("|")+")",d(n)),t)}(e,t,n):function(e,t,n){return f(a(e,n),t,n)}(e,t,n)}},function(e,t,n){"use strict";var r=n(13);Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var o=r(n(0)),a=(0,r(n(16)).default)(o.default.createElement("path",{d:"M20 4H4c-1.1 0-1.99.9-1.99 2L2 18c0 1.1.9 2 2 2h16c1.1 0 2-.9 2-2V6c0-1.1-.9-2-2-2zm0 4l-8 5-8-5V6l8 5 8-5v2z"}),"Mail");t.default=a},function(e,t,n){"use strict";var r=n(13);Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var o=r(n(0)),a=(0,r(n(16)).default)(o.default.createElement("path",{d:"M12 22c1.1 0 2-.9 2-2h-4c0 1.1.89 2 2 2zm6-6v-5c0-3.07-1.64-5.64-4.5-6.32V4c0-.83-.67-1.5-1.5-1.5s-1.5.67-1.5 1.5v.68C7.63 5.36 6 7.92 6 11v5l-2 2v1h16v-1l-2-2z"}),"Notifications");t.default=a},,,,,function(e,t,n){"use strict";
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/var r=Object.getOwnPropertySymbols,o=Object.prototype.hasOwnProperty,a=Object.prototype.propertyIsEnumerable;function i(e){if(null==e)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(e)}e.exports=function(){try{if(!Object.assign)return!1;var e=new String("abc");if(e[5]="de","5"===Object.getOwnPropertyNames(e)[0])return!1;for(var t={},n=0;n<10;n++)t["_"+String.fromCharCode(n)]=n;if("0123456789"!==Object.getOwnPropertyNames(t).map((function(e){return t[e]})).join(""))return!1;var r={};return"abcdefghijklmnopqrst".split("").forEach((function(e){r[e]=e})),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},r)).join("")}catch(e){return!1}}()?Object.assign:function(e,t){for(var n,l,c=i(e),u=1;u<arguments.length;u++){for(var s in n=Object(arguments[u]))o.call(n,s)&&(c[s]=n[s]);if(r){l=r(n);for(var d=0;d<l.length;d++)a.call(n,l[d])&&(c[l[d]]=n[l[d]])}}return c}},function(e,t,n){"use strict";var r=n(1),o=n(2),a=n(0),i=(n(4),n(3)),l=n(5),c=n(6),u=a.forwardRef((function(e,t){var n=e.children,l=e.classes,u=e.className,s=e.color,d=void 0===s?"inherit":s,f=e.component,p=void 0===f?"svg":f,m=e.fontSize,h=void 0===m?"default":m,v=e.htmlColor,b=e.titleAccess,g=e.viewBox,y=void 0===g?"0 0 24 24":g,x=Object(o.a)(e,["children","classes","className","color","component","fontSize","htmlColor","titleAccess","viewBox"]);return a.createElement(p,Object(r.a)({className:Object(i.a)(l.root,u,"inherit"!==d&&l["color".concat(Object(c.a)(d))],"default"!==h&&l["fontSize".concat(Object(c.a)(h))]),focusable:"false",viewBox:y,color:v,"aria-hidden":!b||void 0,role:b?"img":void 0,ref:t},x),n,b?a.createElement("title",null,b):null)}));u.muiName="SvgIcon",t.a=Object(l.a)((function(e){return{root:{userSelect:"none",width:"1em",height:"1em",display:"inline-block",fill:"currentColor",flexShrink:0,fontSize:e.typography.pxToRem(24),transition:e.transitions.create("fill",{duration:e.transitions.duration.shorter})},colorPrimary:{color:e.palette.primary.main},colorSecondary:{color:e.palette.secondary.main},colorAction:{color:e.palette.action.active},colorError:{color:e.palette.error.main},colorDisabled:{color:e.palette.action.disabled},fontSizeInherit:{fontSize:"inherit"},fontSizeSmall:{fontSize:e.typography.pxToRem(20)},fontSizeLarge:{fontSize:e.typography.pxToRem(35)}}}),{name:"MuiSvgIcon"})(u)},function(e,t,n){"use strict";n.r(t);var r=n(68);n.d(t,"default",(function(){return r.a}))},function(e,t){e.exports=function(e){return e&&e.__esModule?e:{default:e}}},function(e,t,n){"use strict";var r=function(){};e.exports=r},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;t.default={RESISTANCE_COEF:.6,UNCERTAINTY_THRESHOLD:3}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.getBoundPosition=function(e,t,n){if(!e.props.bounds)return[t,n];var i=e.props.bounds;i="string"==typeof i?i:function(e){return{left:e.left,top:e.top,right:e.right,bottom:e.bottom}}(i);var l=a(e);if("string"==typeof i){var c,u=l.ownerDocument,s=u.defaultView;if(!((c="parent"===i?l.parentNode:u.querySelector(i))instanceof s.HTMLElement))throw new Error('Bounds selector "'+i+'" could not find an element.');var d=s.getComputedStyle(l),f=s.getComputedStyle(c);i={left:-l.offsetLeft+(0,r.int)(f.paddingLeft)+(0,r.int)(d.marginLeft),top:-l.offsetTop+(0,r.int)(f.paddingTop)+(0,r.int)(d.marginTop),right:(0,o.innerWidth)(c)-(0,o.outerWidth)(l)-l.offsetLeft+(0,r.int)(f.paddingRight)-(0,r.int)(d.marginRight),bottom:(0,o.innerHeight)(c)-(0,o.outerHeight)(l)-l.offsetTop+(0,r.int)(f.paddingBottom)-(0,r.int)(d.marginBottom)}}(0,r.isNum)(i.right)&&(t=Math.min(t,i.right));(0,r.isNum)(i.bottom)&&(n=Math.min(n,i.bottom));(0,r.isNum)(i.left)&&(t=Math.max(t,i.left));(0,r.isNum)(i.top)&&(n=Math.max(n,i.top));return[t,n]},t.snapToGrid=function(e,t,n){var r=Math.round(t/e[0])*e[0],o=Math.round(n/e[1])*e[1];return[r,o]},t.canDragX=function(e){return"both"===e.props.axis||"x"===e.props.axis},t.canDragY=function(e){return"both"===e.props.axis||"y"===e.props.axis},t.getControlPosition=function(e,t,n){var r="number"==typeof t?(0,o.getTouch)(e,t):null;if("number"==typeof t&&!r)return null;var i=a(n),l=n.props.offsetParent||i.offsetParent||i.ownerDocument.body;return(0,o.offsetXYFromParent)(r||e,l,n.props.scale)},t.createCoreData=function(e,t,n){var o=e.state,i=!(0,r.isNum)(o.lastX),l=a(e);return i?{node:l,deltaX:0,deltaY:0,lastX:t,lastY:n,x:t,y:n}:{node:l,deltaX:t-o.lastX,deltaY:n-o.lastY,lastX:o.lastX,lastY:o.lastY,x:t,y:n}},t.createDraggableData=function(e,t){var n=e.props.scale;return{node:t.node,x:e.state.x+t.deltaX/n,y:e.state.y+t.deltaY/n,deltaX:t.deltaX/n,deltaY:t.deltaY/n,lastX:e.state.x,lastY:e.state.y}};var r=n(45),o=n(56);function a(e){var t=e.findDOMNode();if(!t)throw new Error("<DraggableCore>: Unmounted during event!");return t}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(){void 0}},function(e,t,n){"use strict";function r(e){var t,n=e.Symbol;return"function"==typeof n?n.observable?t=n.observable:(t=n("observable"),n.observable=t):t="@@observable",t}n.d(t,"a",(function(){return r}))},function(e,t,n){"use strict";function r(e){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(e))return Array.from(e)}n.d(t,"a",(function(){return r}))},function(e,t,n){"use strict";function r(e){if(Array.isArray(e))return e}n.d(t,"a",(function(){return r}))},function(e,t,n){"use strict";function r(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}n.d(t,"a",(function(){return r}))},function(e,t,n){"use strict";(function(e){
/**!
 * @fileOverview Kickass library to create and place poppers near their reference elements.
 * @version 1.16.1-lts
 * @license
 * Copyright (c) 2016 Federico Zivolo and contributors
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
var n="undefined"!=typeof window&&"undefined"!=typeof document&&"undefined"!=typeof navigator,r=function(){for(var e=["Edge","Trident","Firefox"],t=0;t<e.length;t+=1)if(n&&navigator.userAgent.indexOf(e[t])>=0)return 1;return 0}();var o=n&&window.Promise?function(e){var t=!1;return function(){t||(t=!0,window.Promise.resolve().then((function(){t=!1,e()})))}}:function(e){var t=!1;return function(){t||(t=!0,setTimeout((function(){t=!1,e()}),r))}};function a(e){return e&&"[object Function]"==={}.toString.call(e)}function i(e,t){if(1!==e.nodeType)return[];var n=e.ownerDocument.defaultView.getComputedStyle(e,null);return t?n[t]:n}function l(e){return"HTML"===e.nodeName?e:e.parentNode||e.host}function c(e){if(!e)return document.body;switch(e.nodeName){case"HTML":case"BODY":return e.ownerDocument.body;case"#document":return e.body}var t=i(e),n=t.overflow,r=t.overflowX,o=t.overflowY;return/(auto|scroll|overlay)/.test(n+o+r)?e:c(l(e))}function u(e){return e&&e.referenceNode?e.referenceNode:e}var s=n&&!(!window.MSInputMethodContext||!document.documentMode),d=n&&/MSIE 10/.test(navigator.userAgent);function f(e){return 11===e?s:10===e?d:s||d}function p(e){if(!e)return document.documentElement;for(var t=f(10)?document.body:null,n=e.offsetParent||null;n===t&&e.nextElementSibling;)n=(e=e.nextElementSibling).offsetParent;var r=n&&n.nodeName;return r&&"BODY"!==r&&"HTML"!==r?-1!==["TH","TD","TABLE"].indexOf(n.nodeName)&&"static"===i(n,"position")?p(n):n:e?e.ownerDocument.documentElement:document.documentElement}function m(e){return null!==e.parentNode?m(e.parentNode):e}function h(e,t){if(!(e&&e.nodeType&&t&&t.nodeType))return document.documentElement;var n=e.compareDocumentPosition(t)&Node.DOCUMENT_POSITION_FOLLOWING,r=n?e:t,o=n?t:e,a=document.createRange();a.setStart(r,0),a.setEnd(o,0);var i,l,c=a.commonAncestorContainer;if(e!==c&&t!==c||r.contains(o))return"BODY"===(l=(i=c).nodeName)||"HTML"!==l&&p(i.firstElementChild)!==i?p(c):c;var u=m(e);return u.host?h(u.host,t):h(e,m(t).host)}function v(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"top",n="top"===t?"scrollTop":"scrollLeft",r=e.nodeName;if("BODY"===r||"HTML"===r){var o=e.ownerDocument.documentElement,a=e.ownerDocument.scrollingElement||o;return a[n]}return e[n]}function b(e,t){var n=arguments.length>2&&void 0!==arguments[2]&&arguments[2],r=v(t,"top"),o=v(t,"left"),a=n?-1:1;return e.top+=r*a,e.bottom+=r*a,e.left+=o*a,e.right+=o*a,e}function g(e,t){var n="x"===t?"Left":"Top",r="Left"===n?"Right":"Bottom";return parseFloat(e["border"+n+"Width"])+parseFloat(e["border"+r+"Width"])}function y(e,t,n,r){return Math.max(t["offset"+e],t["scroll"+e],n["client"+e],n["offset"+e],n["scroll"+e],f(10)?parseInt(n["offset"+e])+parseInt(r["margin"+("Height"===e?"Top":"Left")])+parseInt(r["margin"+("Height"===e?"Bottom":"Right")]):0)}function x(e){var t=e.body,n=e.documentElement,r=f(10)&&getComputedStyle(n);return{height:y("Height",t,n,r),width:y("Width",t,n,r)}}var w=function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")},O=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),E=function(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e},S=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e};function k(e){return S({},e,{right:e.left+e.width,bottom:e.top+e.height})}function j(e){var t={};try{if(f(10)){t=e.getBoundingClientRect();var n=v(e,"top"),r=v(e,"left");t.top+=n,t.left+=r,t.bottom+=n,t.right+=r}else t=e.getBoundingClientRect()}catch(e){}var o={left:t.left,top:t.top,width:t.right-t.left,height:t.bottom-t.top},a="HTML"===e.nodeName?x(e.ownerDocument):{},l=a.width||e.clientWidth||o.width,c=a.height||e.clientHeight||o.height,u=e.offsetWidth-l,s=e.offsetHeight-c;if(u||s){var d=i(e);u-=g(d,"x"),s-=g(d,"y"),o.width-=u,o.height-=s}return k(o)}function C(e,t){var n=arguments.length>2&&void 0!==arguments[2]&&arguments[2],r=f(10),o="HTML"===t.nodeName,a=j(e),l=j(t),u=c(e),s=i(t),d=parseFloat(s.borderTopWidth),p=parseFloat(s.borderLeftWidth);n&&o&&(l.top=Math.max(l.top,0),l.left=Math.max(l.left,0));var m=k({top:a.top-l.top-d,left:a.left-l.left-p,width:a.width,height:a.height});if(m.marginTop=0,m.marginLeft=0,!r&&o){var h=parseFloat(s.marginTop),v=parseFloat(s.marginLeft);m.top-=d-h,m.bottom-=d-h,m.left-=p-v,m.right-=p-v,m.marginTop=h,m.marginLeft=v}return(r&&!n?t.contains(u):t===u&&"BODY"!==u.nodeName)&&(m=b(m,t)),m}function P(e){var t=arguments.length>1&&void 0!==arguments[1]&&arguments[1],n=e.ownerDocument.documentElement,r=C(e,n),o=Math.max(n.clientWidth,window.innerWidth||0),a=Math.max(n.clientHeight,window.innerHeight||0),i=t?0:v(n),l=t?0:v(n,"left"),c={top:i-r.top+r.marginTop,left:l-r.left+r.marginLeft,width:o,height:a};return k(c)}function T(e){var t=e.nodeName;if("BODY"===t||"HTML"===t)return!1;if("fixed"===i(e,"position"))return!0;var n=l(e);return!!n&&T(n)}function N(e){if(!e||!e.parentElement||f())return document.documentElement;for(var t=e.parentElement;t&&"none"===i(t,"transform");)t=t.parentElement;return t||document.documentElement}function R(e,t,n,r){var o=arguments.length>4&&void 0!==arguments[4]&&arguments[4],a={top:0,left:0},i=o?N(e):h(e,u(t));if("viewport"===r)a=P(i,o);else{var s=void 0;"scrollParent"===r?"BODY"===(s=c(l(t))).nodeName&&(s=e.ownerDocument.documentElement):s="window"===r?e.ownerDocument.documentElement:r;var d=C(s,i,o);if("HTML"!==s.nodeName||T(i))a=d;else{var f=x(e.ownerDocument),p=f.height,m=f.width;a.top+=d.top-d.marginTop,a.bottom=p+d.top,a.left+=d.left-d.marginLeft,a.right=m+d.left}}var v="number"==typeof(n=n||0);return a.left+=v?n:n.left||0,a.top+=v?n:n.top||0,a.right-=v?n:n.right||0,a.bottom-=v?n:n.bottom||0,a}function M(e){return e.width*e.height}function D(e,t,n,r,o){var a=arguments.length>5&&void 0!==arguments[5]?arguments[5]:0;if(-1===e.indexOf("auto"))return e;var i=R(n,r,a,o),l={top:{width:i.width,height:t.top-i.top},right:{width:i.right-t.right,height:i.height},bottom:{width:i.width,height:i.bottom-t.bottom},left:{width:t.left-i.left,height:i.height}},c=Object.keys(l).map((function(e){return S({key:e},l[e],{area:M(l[e])})})).sort((function(e,t){return t.area-e.area})),u=c.filter((function(e){var t=e.width,r=e.height;return t>=n.clientWidth&&r>=n.clientHeight})),s=u.length>0?u[0].key:c[0].key,d=e.split("-")[1];return s+(d?"-"+d:"")}function A(e,t,n){var r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:null,o=r?N(t):h(t,u(n));return C(n,o,r)}function I(e){var t=e.ownerDocument.defaultView.getComputedStyle(e),n=parseFloat(t.marginTop||0)+parseFloat(t.marginBottom||0),r=parseFloat(t.marginLeft||0)+parseFloat(t.marginRight||0);return{width:e.offsetWidth+r,height:e.offsetHeight+n}}function L(e){var t={left:"right",right:"left",bottom:"top",top:"bottom"};return e.replace(/left|right|bottom|top/g,(function(e){return t[e]}))}function _(e,t,n){n=n.split("-")[0];var r=I(e),o={width:r.width,height:r.height},a=-1!==["right","left"].indexOf(n),i=a?"top":"left",l=a?"left":"top",c=a?"height":"width",u=a?"width":"height";return o[i]=t[i]+t[c]/2-r[c]/2,o[l]=n===l?t[l]-r[u]:t[L(l)],o}function z(e,t){return Array.prototype.find?e.find(t):e.filter(t)[0]}function F(e,t,n){return(void 0===n?e:e.slice(0,function(e,t,n){if(Array.prototype.findIndex)return e.findIndex((function(e){return e[t]===n}));var r=z(e,(function(e){return e[t]===n}));return e.indexOf(r)}(e,"name",n))).forEach((function(e){e.function&&console.warn("`modifier.function` is deprecated, use `modifier.fn`!");var n=e.function||e.fn;e.enabled&&a(n)&&(t.offsets.popper=k(t.offsets.popper),t.offsets.reference=k(t.offsets.reference),t=n(t,e))})),t}function W(){if(!this.state.isDestroyed){var e={instance:this,styles:{},arrowStyles:{},attributes:{},flipped:!1,offsets:{}};e.offsets.reference=A(this.state,this.popper,this.reference,this.options.positionFixed),e.placement=D(this.options.placement,e.offsets.reference,this.popper,this.reference,this.options.modifiers.flip.boundariesElement,this.options.modifiers.flip.padding),e.originalPlacement=e.placement,e.positionFixed=this.options.positionFixed,e.offsets.popper=_(this.popper,e.offsets.reference,e.placement),e.offsets.popper.position=this.options.positionFixed?"fixed":"absolute",e=F(this.modifiers,e),this.state.isCreated?this.options.onUpdate(e):(this.state.isCreated=!0,this.options.onCreate(e))}}function B(e,t){return e.some((function(e){var n=e.name;return e.enabled&&n===t}))}function H(e){for(var t=[!1,"ms","Webkit","Moz","O"],n=e.charAt(0).toUpperCase()+e.slice(1),r=0;r<t.length;r++){var o=t[r],a=o?""+o+n:e;if(void 0!==document.body.style[a])return a}return null}function U(){return this.state.isDestroyed=!0,B(this.modifiers,"applyStyle")&&(this.popper.removeAttribute("x-placement"),this.popper.style.position="",this.popper.style.top="",this.popper.style.left="",this.popper.style.right="",this.popper.style.bottom="",this.popper.style.willChange="",this.popper.style[H("transform")]=""),this.disableEventListeners(),this.options.removeOnDestroy&&this.popper.parentNode.removeChild(this.popper),this}function $(e){var t=e.ownerDocument;return t?t.defaultView:window}function V(e,t,n,r){n.updateBound=r,$(e).addEventListener("resize",n.updateBound,{passive:!0});var o=c(e);return function e(t,n,r,o){var a="BODY"===t.nodeName,i=a?t.ownerDocument.defaultView:t;i.addEventListener(n,r,{passive:!0}),a||e(c(i.parentNode),n,r,o),o.push(i)}(o,"scroll",n.updateBound,n.scrollParents),n.scrollElement=o,n.eventsEnabled=!0,n}function q(){this.state.eventsEnabled||(this.state=V(this.reference,this.options,this.state,this.scheduleUpdate))}function X(){var e,t;this.state.eventsEnabled&&(cancelAnimationFrame(this.scheduleUpdate),this.state=(e=this.reference,t=this.state,$(e).removeEventListener("resize",t.updateBound),t.scrollParents.forEach((function(e){e.removeEventListener("scroll",t.updateBound)})),t.updateBound=null,t.scrollParents=[],t.scrollElement=null,t.eventsEnabled=!1,t))}function K(e){return""!==e&&!isNaN(parseFloat(e))&&isFinite(e)}function Y(e,t){Object.keys(t).forEach((function(n){var r="";-1!==["width","height","top","right","bottom","left"].indexOf(n)&&K(t[n])&&(r="px"),e.style[n]=t[n]+r}))}var G=n&&/Firefox/i.test(navigator.userAgent);function Q(e,t,n){var r=z(e,(function(e){return e.name===t})),o=!!r&&e.some((function(e){return e.name===n&&e.enabled&&e.order<r.order}));if(!o){var a="`"+t+"`",i="`"+n+"`";console.warn(i+" modifier is required by "+a+" modifier in order to work, be sure to include it before "+a+"!")}return o}var J=["auto-start","auto","auto-end","top-start","top","top-end","right-start","right","right-end","bottom-end","bottom","bottom-start","left-end","left","left-start"],Z=J.slice(3);function ee(e){var t=arguments.length>1&&void 0!==arguments[1]&&arguments[1],n=Z.indexOf(e),r=Z.slice(n+1).concat(Z.slice(0,n));return t?r.reverse():r}var te="flip",ne="clockwise",re="counterclockwise";function oe(e,t,n,r){var o=[0,0],a=-1!==["right","left"].indexOf(r),i=e.split(/(\+|\-)/).map((function(e){return e.trim()})),l=i.indexOf(z(i,(function(e){return-1!==e.search(/,|\s/)})));i[l]&&-1===i[l].indexOf(",")&&console.warn("Offsets separated by white space(s) are deprecated, use a comma (,) instead.");var c=/\s*,\s*|\s+/,u=-1!==l?[i.slice(0,l).concat([i[l].split(c)[0]]),[i[l].split(c)[1]].concat(i.slice(l+1))]:[i];return(u=u.map((function(e,r){var o=(1===r?!a:a)?"height":"width",i=!1;return e.reduce((function(e,t){return""===e[e.length-1]&&-1!==["+","-"].indexOf(t)?(e[e.length-1]=t,i=!0,e):i?(e[e.length-1]+=t,i=!1,e):e.concat(t)}),[]).map((function(e){return function(e,t,n,r){var o=e.match(/((?:\-|\+)?\d*\.?\d*)(.*)/),a=+o[1],i=o[2];if(!a)return e;if(0===i.indexOf("%")){var l=void 0;switch(i){case"%p":l=n;break;case"%":case"%r":default:l=r}return k(l)[t]/100*a}if("vh"===i||"vw"===i){return("vh"===i?Math.max(document.documentElement.clientHeight,window.innerHeight||0):Math.max(document.documentElement.clientWidth,window.innerWidth||0))/100*a}return a}(e,o,t,n)}))}))).forEach((function(e,t){e.forEach((function(n,r){K(n)&&(o[t]+=n*("-"===e[r-1]?-1:1))}))})),o}var ae={placement:"bottom",positionFixed:!1,eventsEnabled:!0,removeOnDestroy:!1,onCreate:function(){},onUpdate:function(){},modifiers:{shift:{order:100,enabled:!0,fn:function(e){var t=e.placement,n=t.split("-")[0],r=t.split("-")[1];if(r){var o=e.offsets,a=o.reference,i=o.popper,l=-1!==["bottom","top"].indexOf(n),c=l?"left":"top",u=l?"width":"height",s={start:E({},c,a[c]),end:E({},c,a[c]+a[u]-i[u])};e.offsets.popper=S({},i,s[r])}return e}},offset:{order:200,enabled:!0,fn:function(e,t){var n=t.offset,r=e.placement,o=e.offsets,a=o.popper,i=o.reference,l=r.split("-")[0],c=void 0;return c=K(+n)?[+n,0]:oe(n,a,i,l),"left"===l?(a.top+=c[0],a.left-=c[1]):"right"===l?(a.top+=c[0],a.left+=c[1]):"top"===l?(a.left+=c[0],a.top-=c[1]):"bottom"===l&&(a.left+=c[0],a.top+=c[1]),e.popper=a,e},offset:0},preventOverflow:{order:300,enabled:!0,fn:function(e,t){var n=t.boundariesElement||p(e.instance.popper);e.instance.reference===n&&(n=p(n));var r=H("transform"),o=e.instance.popper.style,a=o.top,i=o.left,l=o[r];o.top="",o.left="",o[r]="";var c=R(e.instance.popper,e.instance.reference,t.padding,n,e.positionFixed);o.top=a,o.left=i,o[r]=l,t.boundaries=c;var u=t.priority,s=e.offsets.popper,d={primary:function(e){var n=s[e];return s[e]<c[e]&&!t.escapeWithReference&&(n=Math.max(s[e],c[e])),E({},e,n)},secondary:function(e){var n="right"===e?"left":"top",r=s[n];return s[e]>c[e]&&!t.escapeWithReference&&(r=Math.min(s[n],c[e]-("right"===e?s.width:s.height))),E({},n,r)}};return u.forEach((function(e){var t=-1!==["left","top"].indexOf(e)?"primary":"secondary";s=S({},s,d[t](e))})),e.offsets.popper=s,e},priority:["left","right","top","bottom"],padding:5,boundariesElement:"scrollParent"},keepTogether:{order:400,enabled:!0,fn:function(e){var t=e.offsets,n=t.popper,r=t.reference,o=e.placement.split("-")[0],a=Math.floor,i=-1!==["top","bottom"].indexOf(o),l=i?"right":"bottom",c=i?"left":"top",u=i?"width":"height";return n[l]<a(r[c])&&(e.offsets.popper[c]=a(r[c])-n[u]),n[c]>a(r[l])&&(e.offsets.popper[c]=a(r[l])),e}},arrow:{order:500,enabled:!0,fn:function(e,t){var n;if(!Q(e.instance.modifiers,"arrow","keepTogether"))return e;var r=t.element;if("string"==typeof r){if(!(r=e.instance.popper.querySelector(r)))return e}else if(!e.instance.popper.contains(r))return console.warn("WARNING: `arrow.element` must be child of its popper element!"),e;var o=e.placement.split("-")[0],a=e.offsets,l=a.popper,c=a.reference,u=-1!==["left","right"].indexOf(o),s=u?"height":"width",d=u?"Top":"Left",f=d.toLowerCase(),p=u?"left":"top",m=u?"bottom":"right",h=I(r)[s];c[m]-h<l[f]&&(e.offsets.popper[f]-=l[f]-(c[m]-h)),c[f]+h>l[m]&&(e.offsets.popper[f]+=c[f]+h-l[m]),e.offsets.popper=k(e.offsets.popper);var v=c[f]+c[s]/2-h/2,b=i(e.instance.popper),g=parseFloat(b["margin"+d]),y=parseFloat(b["border"+d+"Width"]),x=v-e.offsets.popper[f]-g-y;return x=Math.max(Math.min(l[s]-h,x),0),e.arrowElement=r,e.offsets.arrow=(E(n={},f,Math.round(x)),E(n,p,""),n),e},element:"[x-arrow]"},flip:{order:600,enabled:!0,fn:function(e,t){if(B(e.instance.modifiers,"inner"))return e;if(e.flipped&&e.placement===e.originalPlacement)return e;var n=R(e.instance.popper,e.instance.reference,t.padding,t.boundariesElement,e.positionFixed),r=e.placement.split("-")[0],o=L(r),a=e.placement.split("-")[1]||"",i=[];switch(t.behavior){case te:i=[r,o];break;case ne:i=ee(r);break;case re:i=ee(r,!0);break;default:i=t.behavior}return i.forEach((function(l,c){if(r!==l||i.length===c+1)return e;r=e.placement.split("-")[0],o=L(r);var u=e.offsets.popper,s=e.offsets.reference,d=Math.floor,f="left"===r&&d(u.right)>d(s.left)||"right"===r&&d(u.left)<d(s.right)||"top"===r&&d(u.bottom)>d(s.top)||"bottom"===r&&d(u.top)<d(s.bottom),p=d(u.left)<d(n.left),m=d(u.right)>d(n.right),h=d(u.top)<d(n.top),v=d(u.bottom)>d(n.bottom),b="left"===r&&p||"right"===r&&m||"top"===r&&h||"bottom"===r&&v,g=-1!==["top","bottom"].indexOf(r),y=!!t.flipVariations&&(g&&"start"===a&&p||g&&"end"===a&&m||!g&&"start"===a&&h||!g&&"end"===a&&v),x=!!t.flipVariationsByContent&&(g&&"start"===a&&m||g&&"end"===a&&p||!g&&"start"===a&&v||!g&&"end"===a&&h),w=y||x;(f||b||w)&&(e.flipped=!0,(f||b)&&(r=i[c+1]),w&&(a=function(e){return"end"===e?"start":"start"===e?"end":e}(a)),e.placement=r+(a?"-"+a:""),e.offsets.popper=S({},e.offsets.popper,_(e.instance.popper,e.offsets.reference,e.placement)),e=F(e.instance.modifiers,e,"flip"))})),e},behavior:"flip",padding:5,boundariesElement:"viewport",flipVariations:!1,flipVariationsByContent:!1},inner:{order:700,enabled:!1,fn:function(e){var t=e.placement,n=t.split("-")[0],r=e.offsets,o=r.popper,a=r.reference,i=-1!==["left","right"].indexOf(n),l=-1===["top","left"].indexOf(n);return o[i?"left":"top"]=a[n]-(l?o[i?"width":"height"]:0),e.placement=L(t),e.offsets.popper=k(o),e}},hide:{order:800,enabled:!0,fn:function(e){if(!Q(e.instance.modifiers,"hide","preventOverflow"))return e;var t=e.offsets.reference,n=z(e.instance.modifiers,(function(e){return"preventOverflow"===e.name})).boundaries;if(t.bottom<n.top||t.left>n.right||t.top>n.bottom||t.right<n.left){if(!0===e.hide)return e;e.hide=!0,e.attributes["x-out-of-boundaries"]=""}else{if(!1===e.hide)return e;e.hide=!1,e.attributes["x-out-of-boundaries"]=!1}return e}},computeStyle:{order:850,enabled:!0,fn:function(e,t){var n=t.x,r=t.y,o=e.offsets.popper,a=z(e.instance.modifiers,(function(e){return"applyStyle"===e.name})).gpuAcceleration;void 0!==a&&console.warn("WARNING: `gpuAcceleration` option moved to `computeStyle` modifier and will not be supported in future versions of Popper.js!");var i=void 0!==a?a:t.gpuAcceleration,l=p(e.instance.popper),c=j(l),u={position:o.position},s=function(e,t){var n=e.offsets,r=n.popper,o=n.reference,a=Math.round,i=Math.floor,l=function(e){return e},c=a(o.width),u=a(r.width),s=-1!==["left","right"].indexOf(e.placement),d=-1!==e.placement.indexOf("-"),f=t?s||d||c%2==u%2?a:i:l,p=t?a:l;return{left:f(c%2==1&&u%2==1&&!d&&t?r.left-1:r.left),top:p(r.top),bottom:p(r.bottom),right:f(r.right)}}(e,window.devicePixelRatio<2||!G),d="bottom"===n?"top":"bottom",f="right"===r?"left":"right",m=H("transform"),h=void 0,v=void 0;if(v="bottom"===d?"HTML"===l.nodeName?-l.clientHeight+s.bottom:-c.height+s.bottom:s.top,h="right"===f?"HTML"===l.nodeName?-l.clientWidth+s.right:-c.width+s.right:s.left,i&&m)u[m]="translate3d("+h+"px, "+v+"px, 0)",u[d]=0,u[f]=0,u.willChange="transform";else{var b="bottom"===d?-1:1,g="right"===f?-1:1;u[d]=v*b,u[f]=h*g,u.willChange=d+", "+f}var y={"x-placement":e.placement};return e.attributes=S({},y,e.attributes),e.styles=S({},u,e.styles),e.arrowStyles=S({},e.offsets.arrow,e.arrowStyles),e},gpuAcceleration:!0,x:"bottom",y:"right"},applyStyle:{order:900,enabled:!0,fn:function(e){var t,n;return Y(e.instance.popper,e.styles),t=e.instance.popper,n=e.attributes,Object.keys(n).forEach((function(e){!1!==n[e]?t.setAttribute(e,n[e]):t.removeAttribute(e)})),e.arrowElement&&Object.keys(e.arrowStyles).length&&Y(e.arrowElement,e.arrowStyles),e},onLoad:function(e,t,n,r,o){var a=A(o,t,e,n.positionFixed),i=D(n.placement,a,t,e,n.modifiers.flip.boundariesElement,n.modifiers.flip.padding);return t.setAttribute("x-placement",i),Y(t,{position:n.positionFixed?"fixed":"absolute"}),n},gpuAcceleration:void 0}}},ie=function(){function e(t,n){var r=this,i=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};w(this,e),this.scheduleUpdate=function(){return requestAnimationFrame(r.update)},this.update=o(this.update.bind(this)),this.options=S({},e.Defaults,i),this.state={isDestroyed:!1,isCreated:!1,scrollParents:[]},this.reference=t&&t.jquery?t[0]:t,this.popper=n&&n.jquery?n[0]:n,this.options.modifiers={},Object.keys(S({},e.Defaults.modifiers,i.modifiers)).forEach((function(t){r.options.modifiers[t]=S({},e.Defaults.modifiers[t]||{},i.modifiers?i.modifiers[t]:{})})),this.modifiers=Object.keys(this.options.modifiers).map((function(e){return S({name:e},r.options.modifiers[e])})).sort((function(e,t){return e.order-t.order})),this.modifiers.forEach((function(e){e.enabled&&a(e.onLoad)&&e.onLoad(r.reference,r.popper,r.options,e,r.state)})),this.update();var l=this.options.eventsEnabled;l&&this.enableEventListeners(),this.state.eventsEnabled=l}return O(e,[{key:"update",value:function(){return W.call(this)}},{key:"destroy",value:function(){return U.call(this)}},{key:"enableEventListeners",value:function(){return q.call(this)}},{key:"disableEventListeners",value:function(){return X.call(this)}}]),e}();ie.Utils=("undefined"!=typeof window?window:e).PopperUtils,ie.placements=J,ie.Defaults=ae,t.a=ie}).call(this,n(43))},function(e,t,n){"use strict";var r=n(13);Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var o=r(n(0)),a=(0,r(n(16)).default)(o.default.createElement("path",{d:"M19 13h-6v6h-2v-6H5v-2h6V5h2v6h6v2z"}),"Add");t.default=a},function(e,t,n){"use strict";var r=n(13);Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var o=r(n(0)),a=(0,r(n(16)).default)(o.default.createElement("path",{d:"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 3c1.66 0 3 1.34 3 3s-1.34 3-3 3-3-1.34-3-3 1.34-3 3-3zm0 14.2c-2.5 0-4.71-1.28-6-3.22.03-1.99 4-3.08 6-3.08 1.99 0 5.97 1.09 6 3.08-1.29 1.94-3.5 3.22-6 3.22z"}),"AccountCircle");t.default=a},function(e,t,n){"use strict";var r=n(13);Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var o=r(n(0)),a=(0,r(n(16)).default)(o.default.createElement(o.default.Fragment,null,o.default.createElement("circle",{cx:"12",cy:"12",r:"3.2"}),o.default.createElement("path",{d:"M9 2L7.17 4H4c-1.1 0-2 .9-2 2v12c0 1.1.9 2 2 2h16c1.1 0 2-.9 2-2V6c0-1.1-.9-2-2-2h-3.17L15 2H9zm3 15c-2.76 0-5-2.24-5-5s2.24-5 5-5 5 2.24 5 5-2.24 5-5 5z"})),"PhotoCamera");t.default=a},function(e,t,n){"use strict";var r=n(13);Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var o=r(n(0)),a=(0,r(n(16)).default)(o.default.createElement("path",{d:"M10 20v-6h4v6h5v-8h3L12 3 2 12h3v8z"}),"Home");t.default=a},function(e,t,n){"use strict";var r=n(13);Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var o=r(n(0)),a=(0,r(n(16)).default)(o.default.createElement("path",{d:"M12 12c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4zm0 2c-2.67 0-8 1.34-8 4v2h16v-2c0-2.66-5.33-4-8-4z"}),"Person");t.default=a},function(e,t,n){"use strict";var r=n(13);Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var o=r(n(0)),a=(0,r(n(16)).default)(o.default.createElement("path",{d:"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm1 15h-2v-6h2v6zm0-8h-2V7h2v2z"}),"Info");t.default=a},function(e,t,n){"use strict";var r=n(142),o=r.default,a=r.DraggableCore;e.exports=o,e.exports.default=o,e.exports.DraggableCore=a},function(e,t,n){"use strict";var r=n(13);Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var o=r(n(0)),a=(0,r(n(16)).default)(o.default.createElement("path",{d:"M12 8c1.1 0 2-.9 2-2s-.9-2-2-2-2 .9-2 2 .9 2 2 2zm0 2c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zm0 6c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2z"}),"MoreVert");t.default=a},function(e,t,n){"use strict";var r=n(13);Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var o=r(n(0)),a=(0,r(n(16)).default)(o.default.createElement("path",{d:"M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z"}),"Close");t.default=a},function(e,t,n){"use strict";var r=n(20).compose;t.__esModule=!0,t.composeWithDevTools="undefined"!=typeof window&&window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__?window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__:function(){if(0!==arguments.length)return"object"==typeof arguments[0]?r:r.apply(null,arguments)},t.devToolsEnhancer="undefined"!=typeof window&&window.__REDUX_DEVTOOLS_EXTENSION__?window.__REDUX_DEVTOOLS_EXTENSION__:function(){return function(e){return e}}},function(e,t,n){(function(e){!function(t){"use strict";function n(e,t){e.super_=t,e.prototype=Object.create(t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}})}function r(e,t){Object.defineProperty(this,"kind",{value:e,enumerable:!0}),t&&t.length&&Object.defineProperty(this,"path",{value:t,enumerable:!0})}function o(e,t,n){o.super_.call(this,"E",e),Object.defineProperty(this,"lhs",{value:t,enumerable:!0}),Object.defineProperty(this,"rhs",{value:n,enumerable:!0})}function a(e,t){a.super_.call(this,"N",e),Object.defineProperty(this,"rhs",{value:t,enumerable:!0})}function i(e,t){i.super_.call(this,"D",e),Object.defineProperty(this,"lhs",{value:t,enumerable:!0})}function l(e,t,n){l.super_.call(this,"A",e),Object.defineProperty(this,"index",{value:t,enumerable:!0}),Object.defineProperty(this,"item",{value:n,enumerable:!0})}function c(e,t,n){var r=e.slice((n||t)+1||e.length);return e.length=t<0?e.length+t:t,e.push.apply(e,r),e}function u(e){var t=void 0===e?"undefined":E(e);return"object"!==t?t:e===Math?"math":null===e?"null":Array.isArray(e)?"array":"[object Date]"===Object.prototype.toString.call(e)?"date":"function"==typeof e.toString&&/^\/.*\//.test(e.toString())?"regexp":"object"}function s(e,t,n,r,d,f,p){p=p||[];var m=(d=d||[]).slice(0);if(void 0!==f){if(r){if("function"==typeof r&&r(m,f))return;if("object"===(void 0===r?"undefined":E(r))){if(r.prefilter&&r.prefilter(m,f))return;if(r.normalize){var h=r.normalize(m,f,e,t);h&&(e=h[0],t=h[1])}}}m.push(f)}"regexp"===u(e)&&"regexp"===u(t)&&(e=e.toString(),t=t.toString());var v=void 0===e?"undefined":E(e),b=void 0===t?"undefined":E(t),g="undefined"!==v||p&&p[p.length-1].lhs&&p[p.length-1].lhs.hasOwnProperty(f),y="undefined"!==b||p&&p[p.length-1].rhs&&p[p.length-1].rhs.hasOwnProperty(f);if(!g&&y)n(new a(m,t));else if(!y&&g)n(new i(m,e));else if(u(e)!==u(t))n(new o(m,e,t));else if("date"===u(e)&&e-t!=0)n(new o(m,e,t));else if("object"===v&&null!==e&&null!==t)if(p.filter((function(t){return t.lhs===e})).length)e!==t&&n(new o(m,e,t));else{if(p.push({lhs:e,rhs:t}),Array.isArray(e)){var x;for(e.length,x=0;x<e.length;x++)x>=t.length?n(new l(m,x,new i(void 0,e[x]))):s(e[x],t[x],n,r,m,x,p);for(;x<t.length;)n(new l(m,x,new a(void 0,t[x++])))}else{var w=Object.keys(e),O=Object.keys(t);w.forEach((function(o,a){var i=O.indexOf(o);i>=0?(s(e[o],t[o],n,r,m,o,p),O=c(O,i)):s(e[o],void 0,n,r,m,o,p)})),O.forEach((function(e){s(void 0,t[e],n,r,m,e,p)}))}p.length=p.length-1}else e!==t&&("number"===v&&isNaN(e)&&isNaN(t)||n(new o(m,e,t)))}function d(e,t,n,r){return r=r||[],s(e,t,(function(e){e&&r.push(e)}),n),r.length?r:void 0}function f(e,t,n){if(e&&t&&n&&n.kind){for(var r=e,o=-1,a=n.path?n.path.length-1:0;++o<a;)void 0===r[n.path[o]]&&(r[n.path[o]]="number"==typeof n.path[o]?[]:{}),r=r[n.path[o]];switch(n.kind){case"A":!function e(t,n,r){if(r.path&&r.path.length){var o,a=t[n],i=r.path.length-1;for(o=0;o<i;o++)a=a[r.path[o]];switch(r.kind){case"A":e(a[r.path[o]],r.index,r.item);break;case"D":delete a[r.path[o]];break;case"E":case"N":a[r.path[o]]=r.rhs}}else switch(r.kind){case"A":e(t[n],r.index,r.item);break;case"D":t=c(t,n);break;case"E":case"N":t[n]=r.rhs}return t}(n.path?r[n.path[o]]:r,n.index,n.item);break;case"D":delete r[n.path[o]];break;case"E":case"N":r[n.path[o]]=n.rhs}}}function p(e){return"color: "+j[e].color+"; font-weight: bold"}function m(e,t,n,r){var o=d(e,t);try{r?n.groupCollapsed("diff"):n.group("diff")}catch(e){n.log("diff")}o?o.forEach((function(e){var t=e.kind,r=function(e){var t=e.kind,n=e.path,r=e.lhs,o=e.rhs,a=e.index,i=e.item;switch(t){case"E":return[n.join("."),r,"→",o];case"N":return[n.join("."),o];case"D":return[n.join(".")];case"A":return[n.join(".")+"["+a+"]",i];default:return[]}}(e);n.log.apply(n,["%c "+j[t].text,p(t)].concat(S(r)))})):n.log("—— no diff ——");try{n.groupEnd()}catch(e){n.log("—— diff end —— ")}}function h(e,t,n,r){switch(void 0===e?"undefined":E(e)){case"object":return"function"==typeof e[r]?e[r].apply(e,S(n)):e[r];case"function":return e(t);default:return e}}function v(e,t){var n=t.logger,r=t.actionTransformer,o=t.titleFormatter,a=void 0===o?function(e){var t=e.timestamp,n=e.duration;return function(e,r,o){var a=["action"];return a.push("%c"+String(e.type)),t&&a.push("%c@ "+r),n&&a.push("%c(in "+o.toFixed(2)+" ms)"),a.join(" ")}}(t):o,i=t.collapsed,l=t.colors,c=t.level,u=t.diff,s=void 0===t.titleFormatter;e.forEach((function(o,d){var f=o.started,p=o.startedTime,v=o.action,b=o.prevState,g=o.error,y=o.took,x=o.nextState,O=e[d+1];O&&(x=O.prevState,y=O.started-f);var E=r(v),S="function"==typeof i?i((function(){return x}),v,o):i,k=w(p),j=l.title?"color: "+l.title(E)+";":"",C=["color: gray; font-weight: lighter;"];C.push(j),t.timestamp&&C.push("color: gray; font-weight: lighter;"),t.duration&&C.push("color: gray; font-weight: lighter;");var P=a(E,k,y);try{S?l.title&&s?n.groupCollapsed.apply(n,["%c "+P].concat(C)):n.groupCollapsed(P):l.title&&s?n.group.apply(n,["%c "+P].concat(C)):n.group(P)}catch(e){n.log(P)}var T=h(c,E,[b],"prevState"),N=h(c,E,[E],"action"),R=h(c,E,[g,b],"error"),M=h(c,E,[x],"nextState");if(T)if(l.prevState){var D="color: "+l.prevState(b)+"; font-weight: bold";n[T]("%c prev state",D,b)}else n[T]("prev state",b);if(N)if(l.action){var A="color: "+l.action(E)+"; font-weight: bold";n[N]("%c action    ",A,E)}else n[N]("action    ",E);if(g&&R)if(l.error){var I="color: "+l.error(g,b)+"; font-weight: bold;";n[R]("%c error     ",I,g)}else n[R]("error     ",g);if(M)if(l.nextState){var L="color: "+l.nextState(x)+"; font-weight: bold";n[M]("%c next state",L,x)}else n[M]("next state",x);u&&m(b,x,n,S);try{n.groupEnd()}catch(e){n.log("—— log end ——")}}))}function b(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=Object.assign({},C,e),n=t.logger,r=t.stateTransformer,o=t.errorTransformer,a=t.predicate,i=t.logErrors,l=t.diffPredicate;if(void 0===n)return function(){return function(e){return function(t){return e(t)}}};if(e.getState&&e.dispatch)return console.error("[redux-logger] redux-logger not installed. Make sure to pass logger instance as middleware:\n// Logger with default options\nimport { logger } from 'redux-logger'\nconst store = createStore(\n  reducer,\n  applyMiddleware(logger)\n)\n// Or you can create your own logger with custom options http://bit.ly/redux-logger-options\nimport createLogger from 'redux-logger'\nconst logger = createLogger({\n  // ...options\n});\nconst store = createStore(\n  reducer,\n  applyMiddleware(logger)\n)\n"),function(){return function(e){return function(t){return e(t)}}};var c=[];return function(e){var n=e.getState;return function(e){return function(u){if("function"==typeof a&&!a(n,u))return e(u);var s={};c.push(s),s.started=O.now(),s.startedTime=new Date,s.prevState=r(n()),s.action=u;var d=void 0;if(i)try{d=e(u)}catch(e){s.error=o(e)}else d=e(u);s.took=O.now()-s.started,s.nextState=r(n());var f=t.diff&&"function"==typeof l?l(n,u):t.diff;if(v(c,Object.assign({},t,{diff:f})),c.length=0,s.error)throw s.error;return d}}}}var g,y,x=function(e,t){return function(e,t){return new Array(t+1).join(e)}("0",t-e.toString().length)+e},w=function(e){return x(e.getHours(),2)+":"+x(e.getMinutes(),2)+":"+x(e.getSeconds(),2)+"."+x(e.getMilliseconds(),3)},O="undefined"!=typeof performance&&null!==performance&&"function"==typeof performance.now?performance:Date,E="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},S=function(e){if(Array.isArray(e)){for(var t=0,n=Array(e.length);t<e.length;t++)n[t]=e[t];return n}return Array.from(e)},k=[];g="object"===(void 0===e?"undefined":E(e))&&e?e:"undefined"!=typeof window?window:{},(y=g.DeepDiff)&&k.push((function(){void 0!==y&&g.DeepDiff===d&&(g.DeepDiff=y,y=void 0)})),n(o,r),n(a,r),n(i,r),n(l,r),Object.defineProperties(d,{diff:{value:d,enumerable:!0},observableDiff:{value:s,enumerable:!0},applyDiff:{value:function(e,t,n){e&&t&&s(e,t,(function(r){n&&!n(e,t,r)||f(e,t,r)}))},enumerable:!0},applyChange:{value:f,enumerable:!0},revertChange:{value:function(e,t,n){if(e&&t&&n&&n.kind){var r,o,a=e;for(o=n.path.length-1,r=0;r<o;r++)void 0===a[n.path[r]]&&(a[n.path[r]]={}),a=a[n.path[r]];switch(n.kind){case"A":!function e(t,n,r){if(r.path&&r.path.length){var o,a=t[n],i=r.path.length-1;for(o=0;o<i;o++)a=a[r.path[o]];switch(r.kind){case"A":e(a[r.path[o]],r.index,r.item);break;case"D":case"E":a[r.path[o]]=r.lhs;break;case"N":delete a[r.path[o]]}}else switch(r.kind){case"A":e(t[n],r.index,r.item);break;case"D":case"E":t[n]=r.lhs;break;case"N":t=c(t,n)}return t}(a[n.path[r]],n.index,n.item);break;case"D":case"E":a[n.path[r]]=n.lhs;break;case"N":delete a[n.path[r]]}}},enumerable:!0},isConflict:{value:function(){return void 0!==y},enumerable:!0},noConflict:{value:function(){return k&&(k.forEach((function(e){e()})),k=null),d},enumerable:!0}});var j={E:{color:"#2196F3",text:"CHANGED:"},N:{color:"#4CAF50",text:"ADDED:"},D:{color:"#F44336",text:"DELETED:"},A:{color:"#2196F3",text:"ARRAY:"}},C={level:"log",logger:console,logErrors:!0,collapsed:void 0,predicate:void 0,duration:!1,timestamp:!0,stateTransformer:function(e){return e},actionTransformer:function(e){return e},errorTransformer:function(e){return e},colors:{title:function(){return"inherit"},prevState:function(){return"#9E9E9E"},action:function(){return"#03A9F4"},nextState:function(){return"#4CAF50"},error:function(){return"#F20404"}},diff:!1,diffPredicate:void 0,transformer:void 0},P=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e.dispatch,n=e.getState;return"function"==typeof t||"function"==typeof n?b()({dispatch:t,getState:n}):void console.error("\n[redux-logger v3] BREAKING CHANGE\n[redux-logger v3] Since 3.0.0 redux-logger exports by default logger with default settings.\n[redux-logger v3] Change\n[redux-logger v3] import createLogger from 'redux-logger'\n[redux-logger v3] to\n[redux-logger v3] import { createLogger } from 'redux-logger'\n")};t.defaults=C,t.createLogger=b,t.logger=P,t.default=P,Object.defineProperty(t,"__esModule",{value:!0})}(t)}).call(this,n(43))},function(e,t,n){"use strict";var r;t.__esModule=!0,t.default=void 0;var o=(0,((r=n(147))&&r.__esModule?r:{default:r}).default)("local");t.default=o},function(e,t,n){"use strict";e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n=function(e,t){var n=e[1]||"",r=e[3];if(!r)return n;if(t&&"function"==typeof btoa){var o=(i=r,l=btoa(unescape(encodeURIComponent(JSON.stringify(i)))),c="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(l),"/*# ".concat(c," */")),a=r.sources.map((function(e){return"/*# sourceURL=".concat(r.sourceRoot||"").concat(e," */")}));return[n].concat(a).concat([o]).join("\n")}var i,l,c;return[n].join("\n")}(t,e);return t[2]?"@media ".concat(t[2]," {").concat(n,"}"):n})).join("")},t.i=function(e,n,r){"string"==typeof e&&(e=[[null,e,""]]);var o={};if(r)for(var a=0;a<this.length;a++){var i=this[a][0];null!=i&&(o[i]=!0)}for(var l=0;l<e.length;l++){var c=[].concat(e[l]);r&&o[c[0]]||(n&&(c[2]?c[2]="".concat(n," and ").concat(c[2]):c[2]=n),t.push(c))}},t}},function(e,t,n){"use strict";function r(e){for(var t="https://material-ui.com/production-error/?code="+e,n=1;n<arguments.length;n+=1)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified Material-UI error #"+e+"; visit "+t+" for the full message."}n.d(t,"a",(function(){return r}))},,,,,,,,,,,,,,function(e,t,n){"use strict";
/** @license React v16.13.1
 * react.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r=n(67),o="function"==typeof Symbol&&Symbol.for,a=o?Symbol.for("react.element"):60103,i=o?Symbol.for("react.portal"):60106,l=o?Symbol.for("react.fragment"):60107,c=o?Symbol.for("react.strict_mode"):60108,u=o?Symbol.for("react.profiler"):60114,s=o?Symbol.for("react.provider"):60109,d=o?Symbol.for("react.context"):60110,f=o?Symbol.for("react.forward_ref"):60112,p=o?Symbol.for("react.suspense"):60113,m=o?Symbol.for("react.memo"):60115,h=o?Symbol.for("react.lazy"):60116,v="function"==typeof Symbol&&Symbol.iterator;function b(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var g={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},y={};function x(e,t,n){this.props=e,this.context=t,this.refs=y,this.updater=n||g}function w(){}function O(e,t,n){this.props=e,this.context=t,this.refs=y,this.updater=n||g}x.prototype.isReactComponent={},x.prototype.setState=function(e,t){if("object"!=typeof e&&"function"!=typeof e&&null!=e)throw Error(b(85));this.updater.enqueueSetState(this,e,t,"setState")},x.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},w.prototype=x.prototype;var E=O.prototype=new w;E.constructor=O,r(E,x.prototype),E.isPureReactComponent=!0;var S={current:null},k=Object.prototype.hasOwnProperty,j={key:!0,ref:!0,__self:!0,__source:!0};function C(e,t,n){var r,o={},i=null,l=null;if(null!=t)for(r in void 0!==t.ref&&(l=t.ref),void 0!==t.key&&(i=""+t.key),t)k.call(t,r)&&!j.hasOwnProperty(r)&&(o[r]=t[r]);var c=arguments.length-2;if(1===c)o.children=n;else if(1<c){for(var u=Array(c),s=0;s<c;s++)u[s]=arguments[s+2];o.children=u}if(e&&e.defaultProps)for(r in c=e.defaultProps)void 0===o[r]&&(o[r]=c[r]);return{$$typeof:a,type:e,key:i,ref:l,props:o,_owner:S.current}}function P(e){return"object"==typeof e&&null!==e&&e.$$typeof===a}var T=/\/+/g,N=[];function R(e,t,n,r){if(N.length){var o=N.pop();return o.result=e,o.keyPrefix=t,o.func=n,o.context=r,o.count=0,o}return{result:e,keyPrefix:t,func:n,context:r,count:0}}function M(e){e.result=null,e.keyPrefix=null,e.func=null,e.context=null,e.count=0,10>N.length&&N.push(e)}function D(e,t,n){return null==e?0:function e(t,n,r,o){var l=typeof t;"undefined"!==l&&"boolean"!==l||(t=null);var c=!1;if(null===t)c=!0;else switch(l){case"string":case"number":c=!0;break;case"object":switch(t.$$typeof){case a:case i:c=!0}}if(c)return r(o,t,""===n?"."+A(t,0):n),1;if(c=0,n=""===n?".":n+":",Array.isArray(t))for(var u=0;u<t.length;u++){var s=n+A(l=t[u],u);c+=e(l,s,r,o)}else if(null===t||"object"!=typeof t?s=null:s="function"==typeof(s=v&&t[v]||t["@@iterator"])?s:null,"function"==typeof s)for(t=s.call(t),u=0;!(l=t.next()).done;)c+=e(l=l.value,s=n+A(l,u++),r,o);else if("object"===l)throw r=""+t,Error(b(31,"[object Object]"===r?"object with keys {"+Object.keys(t).join(", ")+"}":r,""));return c}(e,"",t,n)}function A(e,t){return"object"==typeof e&&null!==e&&null!=e.key?function(e){var t={"=":"=0",":":"=2"};return"$"+(""+e).replace(/[=:]/g,(function(e){return t[e]}))}(e.key):t.toString(36)}function I(e,t){e.func.call(e.context,t,e.count++)}function L(e,t,n){var r=e.result,o=e.keyPrefix;e=e.func.call(e.context,t,e.count++),Array.isArray(e)?_(e,r,n,(function(e){return e})):null!=e&&(P(e)&&(e=function(e,t){return{$$typeof:a,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}}(e,o+(!e.key||t&&t.key===e.key?"":(""+e.key).replace(T,"$&/")+"/")+n)),r.push(e))}function _(e,t,n,r,o){var a="";null!=n&&(a=(""+n).replace(T,"$&/")+"/"),D(e,L,t=R(t,a,r,o)),M(t)}var z={current:null};function F(){var e=z.current;if(null===e)throw Error(b(321));return e}var W={ReactCurrentDispatcher:z,ReactCurrentBatchConfig:{suspense:null},ReactCurrentOwner:S,IsSomeRendererActing:{current:!1},assign:r};t.Children={map:function(e,t,n){if(null==e)return e;var r=[];return _(e,r,null,t,n),r},forEach:function(e,t,n){if(null==e)return e;D(e,I,t=R(null,null,t,n)),M(t)},count:function(e){return D(e,(function(){return null}),null)},toArray:function(e){var t=[];return _(e,t,null,(function(e){return e})),t},only:function(e){if(!P(e))throw Error(b(143));return e}},t.Component=x,t.Fragment=l,t.Profiler=u,t.PureComponent=O,t.StrictMode=c,t.Suspense=p,t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=W,t.cloneElement=function(e,t,n){if(null==e)throw Error(b(267,e));var o=r({},e.props),i=e.key,l=e.ref,c=e._owner;if(null!=t){if(void 0!==t.ref&&(l=t.ref,c=S.current),void 0!==t.key&&(i=""+t.key),e.type&&e.type.defaultProps)var u=e.type.defaultProps;for(s in t)k.call(t,s)&&!j.hasOwnProperty(s)&&(o[s]=void 0===t[s]&&void 0!==u?u[s]:t[s])}var s=arguments.length-2;if(1===s)o.children=n;else if(1<s){u=Array(s);for(var d=0;d<s;d++)u[d]=arguments[d+2];o.children=u}return{$$typeof:a,type:e.type,key:i,ref:l,props:o,_owner:c}},t.createContext=function(e,t){return void 0===t&&(t=null),(e={$$typeof:d,_calculateChangedBits:t,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null}).Provider={$$typeof:s,_context:e},e.Consumer=e},t.createElement=C,t.createFactory=function(e){var t=C.bind(null,e);return t.type=e,t},t.createRef=function(){return{current:null}},t.forwardRef=function(e){return{$$typeof:f,render:e}},t.isValidElement=P,t.lazy=function(e){return{$$typeof:h,_ctor:e,_status:-1,_result:null}},t.memo=function(e,t){return{$$typeof:m,type:e,compare:void 0===t?null:t}},t.useCallback=function(e,t){return F().useCallback(e,t)},t.useContext=function(e,t){return F().useContext(e,t)},t.useDebugValue=function(){},t.useEffect=function(e,t){return F().useEffect(e,t)},t.useImperativeHandle=function(e,t,n){return F().useImperativeHandle(e,t,n)},t.useLayoutEffect=function(e,t){return F().useLayoutEffect(e,t)},t.useMemo=function(e,t){return F().useMemo(e,t)},t.useReducer=function(e,t,n){return F().useReducer(e,t,n)},t.useRef=function(e){return F().useRef(e)},t.useState=function(e){return F().useState(e)},t.version="16.13.1"},function(e,t,n){"use strict";
/** @license React v16.13.1
 * react-dom.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r=n(0),o=n(67),a=n(109);function i(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}if(!r)throw Error(i(227));function l(e,t,n,r,o,a,i,l,c){var u=Array.prototype.slice.call(arguments,3);try{t.apply(n,u)}catch(e){this.onError(e)}}var c=!1,u=null,s=!1,d=null,f={onError:function(e){c=!0,u=e}};function p(e,t,n,r,o,a,i,s,d){c=!1,u=null,l.apply(f,arguments)}var m=null,h=null,v=null;function b(e,t,n){var r=e.type||"unknown-event";e.currentTarget=v(n),function(e,t,n,r,o,a,l,f,m){if(p.apply(this,arguments),c){if(!c)throw Error(i(198));var h=u;c=!1,u=null,s||(s=!0,d=h)}}(r,t,void 0,e),e.currentTarget=null}var g=null,y={};function x(){if(g)for(var e in y){var t=y[e],n=g.indexOf(e);if(!(-1<n))throw Error(i(96,e));if(!O[n]){if(!t.extractEvents)throw Error(i(97,e));for(var r in O[n]=t,n=t.eventTypes){var o=void 0,a=n[r],l=t,c=r;if(E.hasOwnProperty(c))throw Error(i(99,c));E[c]=a;var u=a.phasedRegistrationNames;if(u){for(o in u)u.hasOwnProperty(o)&&w(u[o],l,c);o=!0}else a.registrationName?(w(a.registrationName,l,c),o=!0):o=!1;if(!o)throw Error(i(98,r,e))}}}}function w(e,t,n){if(S[e])throw Error(i(100,e));S[e]=t,k[e]=t.eventTypes[n].dependencies}var O=[],E={},S={},k={};function j(e){var t,n=!1;for(t in e)if(e.hasOwnProperty(t)){var r=e[t];if(!y.hasOwnProperty(t)||y[t]!==r){if(y[t])throw Error(i(102,t));y[t]=r,n=!0}}n&&x()}var C=!("undefined"==typeof window||void 0===window.document||void 0===window.document.createElement),P=null,T=null,N=null;function R(e){if(e=h(e)){if("function"!=typeof P)throw Error(i(280));var t=e.stateNode;t&&(t=m(t),P(e.stateNode,e.type,t))}}function M(e){T?N?N.push(e):N=[e]:T=e}function D(){if(T){var e=T,t=N;if(N=T=null,R(e),t)for(e=0;e<t.length;e++)R(t[e])}}function A(e,t){return e(t)}function I(e,t,n,r,o){return e(t,n,r,o)}function L(){}var _=A,z=!1,F=!1;function W(){null===T&&null===N||(L(),D())}function B(e,t,n){if(F)return e(t,n);F=!0;try{return _(e,t,n)}finally{F=!1,W()}}var H=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,U=Object.prototype.hasOwnProperty,$={},V={};function q(e,t,n,r,o,a){this.acceptsBooleans=2===t||3===t||4===t,this.attributeName=r,this.attributeNamespace=o,this.mustUseProperty=n,this.propertyName=e,this.type=t,this.sanitizeURL=a}var X={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach((function(e){X[e]=new q(e,0,!1,e,null,!1)})),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach((function(e){var t=e[0];X[t]=new q(t,1,!1,e[1],null,!1)})),["contentEditable","draggable","spellCheck","value"].forEach((function(e){X[e]=new q(e,2,!1,e.toLowerCase(),null,!1)})),["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach((function(e){X[e]=new q(e,2,!1,e,null,!1)})),"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach((function(e){X[e]=new q(e,3,!1,e.toLowerCase(),null,!1)})),["checked","multiple","muted","selected"].forEach((function(e){X[e]=new q(e,3,!0,e,null,!1)})),["capture","download"].forEach((function(e){X[e]=new q(e,4,!1,e,null,!1)})),["cols","rows","size","span"].forEach((function(e){X[e]=new q(e,6,!1,e,null,!1)})),["rowSpan","start"].forEach((function(e){X[e]=new q(e,5,!1,e.toLowerCase(),null,!1)}));var K=/[\-:]([a-z])/g;function Y(e){return e[1].toUpperCase()}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach((function(e){var t=e.replace(K,Y);X[t]=new q(t,1,!1,e,null,!1)})),"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach((function(e){var t=e.replace(K,Y);X[t]=new q(t,1,!1,e,"http://www.w3.org/1999/xlink",!1)})),["xml:base","xml:lang","xml:space"].forEach((function(e){var t=e.replace(K,Y);X[t]=new q(t,1,!1,e,"http://www.w3.org/XML/1998/namespace",!1)})),["tabIndex","crossOrigin"].forEach((function(e){X[e]=new q(e,1,!1,e.toLowerCase(),null,!1)})),X.xlinkHref=new q("xlinkHref",1,!1,"xlink:href","http://www.w3.org/1999/xlink",!0),["src","href","action","formAction"].forEach((function(e){X[e]=new q(e,1,!1,e.toLowerCase(),null,!0)}));var G=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;function Q(e,t,n,r){var o=X.hasOwnProperty(t)?X[t]:null;(null!==o?0===o.type:!r&&(2<t.length&&("o"===t[0]||"O"===t[0])&&("n"===t[1]||"N"===t[1])))||(function(e,t,n,r){if(null==t||function(e,t,n,r){if(null!==n&&0===n.type)return!1;switch(typeof t){case"function":case"symbol":return!0;case"boolean":return!r&&(null!==n?!n.acceptsBooleans:"data-"!==(e=e.toLowerCase().slice(0,5))&&"aria-"!==e);default:return!1}}(e,t,n,r))return!0;if(r)return!1;if(null!==n)switch(n.type){case 3:return!t;case 4:return!1===t;case 5:return isNaN(t);case 6:return isNaN(t)||1>t}return!1}(t,n,o,r)&&(n=null),r||null===o?function(e){return!!U.call(V,e)||!U.call($,e)&&(H.test(e)?V[e]=!0:($[e]=!0,!1))}(t)&&(null===n?e.removeAttribute(t):e.setAttribute(t,""+n)):o.mustUseProperty?e[o.propertyName]=null===n?3!==o.type&&"":n:(t=o.attributeName,r=o.attributeNamespace,null===n?e.removeAttribute(t):(n=3===(o=o.type)||4===o&&!0===n?"":""+n,r?e.setAttributeNS(r,t,n):e.setAttribute(t,n))))}G.hasOwnProperty("ReactCurrentDispatcher")||(G.ReactCurrentDispatcher={current:null}),G.hasOwnProperty("ReactCurrentBatchConfig")||(G.ReactCurrentBatchConfig={suspense:null});var J=/^(.*)[\\\/]/,Z="function"==typeof Symbol&&Symbol.for,ee=Z?Symbol.for("react.element"):60103,te=Z?Symbol.for("react.portal"):60106,ne=Z?Symbol.for("react.fragment"):60107,re=Z?Symbol.for("react.strict_mode"):60108,oe=Z?Symbol.for("react.profiler"):60114,ae=Z?Symbol.for("react.provider"):60109,ie=Z?Symbol.for("react.context"):60110,le=Z?Symbol.for("react.concurrent_mode"):60111,ce=Z?Symbol.for("react.forward_ref"):60112,ue=Z?Symbol.for("react.suspense"):60113,se=Z?Symbol.for("react.suspense_list"):60120,de=Z?Symbol.for("react.memo"):60115,fe=Z?Symbol.for("react.lazy"):60116,pe=Z?Symbol.for("react.block"):60121,me="function"==typeof Symbol&&Symbol.iterator;function he(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=me&&e[me]||e["@@iterator"])?e:null}function ve(e){if(null==e)return null;if("function"==typeof e)return e.displayName||e.name||null;if("string"==typeof e)return e;switch(e){case ne:return"Fragment";case te:return"Portal";case oe:return"Profiler";case re:return"StrictMode";case ue:return"Suspense";case se:return"SuspenseList"}if("object"==typeof e)switch(e.$$typeof){case ie:return"Context.Consumer";case ae:return"Context.Provider";case ce:var t=e.render;return t=t.displayName||t.name||"",e.displayName||(""!==t?"ForwardRef("+t+")":"ForwardRef");case de:return ve(e.type);case pe:return ve(e.render);case fe:if(e=1===e._status?e._result:null)return ve(e)}return null}function be(e){var t="";do{e:switch(e.tag){case 3:case 4:case 6:case 7:case 10:case 9:var n="";break e;default:var r=e._debugOwner,o=e._debugSource,a=ve(e.type);n=null,r&&(n=ve(r.type)),r=a,a="",o?a=" (at "+o.fileName.replace(J,"")+":"+o.lineNumber+")":n&&(a=" (created by "+n+")"),n="\n    in "+(r||"Unknown")+a}t+=n,e=e.return}while(e);return t}function ge(e){switch(typeof e){case"boolean":case"number":case"object":case"string":case"undefined":return e;default:return""}}function ye(e){var t=e.type;return(e=e.nodeName)&&"input"===e.toLowerCase()&&("checkbox"===t||"radio"===t)}function xe(e){e._valueTracker||(e._valueTracker=function(e){var t=ye(e)?"checked":"value",n=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),r=""+e[t];if(!e.hasOwnProperty(t)&&void 0!==n&&"function"==typeof n.get&&"function"==typeof n.set){var o=n.get,a=n.set;return Object.defineProperty(e,t,{configurable:!0,get:function(){return o.call(this)},set:function(e){r=""+e,a.call(this,e)}}),Object.defineProperty(e,t,{enumerable:n.enumerable}),{getValue:function(){return r},setValue:function(e){r=""+e},stopTracking:function(){e._valueTracker=null,delete e[t]}}}}(e))}function we(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var n=t.getValue(),r="";return e&&(r=ye(e)?e.checked?"true":"false":e.value),(e=r)!==n&&(t.setValue(e),!0)}function Oe(e,t){var n=t.checked;return o({},t,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=n?n:e._wrapperState.initialChecked})}function Ee(e,t){var n=null==t.defaultValue?"":t.defaultValue,r=null!=t.checked?t.checked:t.defaultChecked;n=ge(null!=t.value?t.value:n),e._wrapperState={initialChecked:r,initialValue:n,controlled:"checkbox"===t.type||"radio"===t.type?null!=t.checked:null!=t.value}}function Se(e,t){null!=(t=t.checked)&&Q(e,"checked",t,!1)}function ke(e,t){Se(e,t);var n=ge(t.value),r=t.type;if(null!=n)"number"===r?(0===n&&""===e.value||e.value!=n)&&(e.value=""+n):e.value!==""+n&&(e.value=""+n);else if("submit"===r||"reset"===r)return void e.removeAttribute("value");t.hasOwnProperty("value")?Ce(e,t.type,n):t.hasOwnProperty("defaultValue")&&Ce(e,t.type,ge(t.defaultValue)),null==t.checked&&null!=t.defaultChecked&&(e.defaultChecked=!!t.defaultChecked)}function je(e,t,n){if(t.hasOwnProperty("value")||t.hasOwnProperty("defaultValue")){var r=t.type;if(!("submit"!==r&&"reset"!==r||void 0!==t.value&&null!==t.value))return;t=""+e._wrapperState.initialValue,n||t===e.value||(e.value=t),e.defaultValue=t}""!==(n=e.name)&&(e.name=""),e.defaultChecked=!!e._wrapperState.initialChecked,""!==n&&(e.name=n)}function Ce(e,t,n){"number"===t&&e.ownerDocument.activeElement===e||(null==n?e.defaultValue=""+e._wrapperState.initialValue:e.defaultValue!==""+n&&(e.defaultValue=""+n))}function Pe(e,t){return e=o({children:void 0},t),(t=function(e){var t="";return r.Children.forEach(e,(function(e){null!=e&&(t+=e)})),t}(t.children))&&(e.children=t),e}function Te(e,t,n,r){if(e=e.options,t){t={};for(var o=0;o<n.length;o++)t["$"+n[o]]=!0;for(n=0;n<e.length;n++)o=t.hasOwnProperty("$"+e[n].value),e[n].selected!==o&&(e[n].selected=o),o&&r&&(e[n].defaultSelected=!0)}else{for(n=""+ge(n),t=null,o=0;o<e.length;o++){if(e[o].value===n)return e[o].selected=!0,void(r&&(e[o].defaultSelected=!0));null!==t||e[o].disabled||(t=e[o])}null!==t&&(t.selected=!0)}}function Ne(e,t){if(null!=t.dangerouslySetInnerHTML)throw Error(i(91));return o({},t,{value:void 0,defaultValue:void 0,children:""+e._wrapperState.initialValue})}function Re(e,t){var n=t.value;if(null==n){if(n=t.children,t=t.defaultValue,null!=n){if(null!=t)throw Error(i(92));if(Array.isArray(n)){if(!(1>=n.length))throw Error(i(93));n=n[0]}t=n}null==t&&(t=""),n=t}e._wrapperState={initialValue:ge(n)}}function Me(e,t){var n=ge(t.value),r=ge(t.defaultValue);null!=n&&((n=""+n)!==e.value&&(e.value=n),null==t.defaultValue&&e.defaultValue!==n&&(e.defaultValue=n)),null!=r&&(e.defaultValue=""+r)}function De(e){var t=e.textContent;t===e._wrapperState.initialValue&&""!==t&&null!==t&&(e.value=t)}var Ae="http://www.w3.org/1999/xhtml",Ie="http://www.w3.org/2000/svg";function Le(e){switch(e){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function _e(e,t){return null==e||"http://www.w3.org/1999/xhtml"===e?Le(t):"http://www.w3.org/2000/svg"===e&&"foreignObject"===t?"http://www.w3.org/1999/xhtml":e}var ze,Fe=function(e){return"undefined"!=typeof MSApp&&MSApp.execUnsafeLocalFunction?function(t,n,r,o){MSApp.execUnsafeLocalFunction((function(){return e(t,n)}))}:e}((function(e,t){if(e.namespaceURI!==Ie||"innerHTML"in e)e.innerHTML=t;else{for((ze=ze||document.createElement("div")).innerHTML="<svg>"+t.valueOf().toString()+"</svg>",t=ze.firstChild;e.firstChild;)e.removeChild(e.firstChild);for(;t.firstChild;)e.appendChild(t.firstChild)}}));function We(e,t){if(t){var n=e.firstChild;if(n&&n===e.lastChild&&3===n.nodeType)return void(n.nodeValue=t)}e.textContent=t}function Be(e,t){var n={};return n[e.toLowerCase()]=t.toLowerCase(),n["Webkit"+e]="webkit"+t,n["Moz"+e]="moz"+t,n}var He={animationend:Be("Animation","AnimationEnd"),animationiteration:Be("Animation","AnimationIteration"),animationstart:Be("Animation","AnimationStart"),transitionend:Be("Transition","TransitionEnd")},Ue={},$e={};function Ve(e){if(Ue[e])return Ue[e];if(!He[e])return e;var t,n=He[e];for(t in n)if(n.hasOwnProperty(t)&&t in $e)return Ue[e]=n[t];return e}C&&($e=document.createElement("div").style,"AnimationEvent"in window||(delete He.animationend.animation,delete He.animationiteration.animation,delete He.animationstart.animation),"TransitionEvent"in window||delete He.transitionend.transition);var qe=Ve("animationend"),Xe=Ve("animationiteration"),Ke=Ve("animationstart"),Ye=Ve("transitionend"),Ge="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),Qe=new("function"==typeof WeakMap?WeakMap:Map);function Je(e){var t=Qe.get(e);return void 0===t&&(t=new Map,Qe.set(e,t)),t}function Ze(e){var t=e,n=e;if(e.alternate)for(;t.return;)t=t.return;else{e=t;do{0!=(1026&(t=e).effectTag)&&(n=t.return),e=t.return}while(e)}return 3===t.tag?n:null}function et(e){if(13===e.tag){var t=e.memoizedState;if(null===t&&(null!==(e=e.alternate)&&(t=e.memoizedState)),null!==t)return t.dehydrated}return null}function tt(e){if(Ze(e)!==e)throw Error(i(188))}function nt(e){if(!(e=function(e){var t=e.alternate;if(!t){if(null===(t=Ze(e)))throw Error(i(188));return t!==e?null:e}for(var n=e,r=t;;){var o=n.return;if(null===o)break;var a=o.alternate;if(null===a){if(null!==(r=o.return)){n=r;continue}break}if(o.child===a.child){for(a=o.child;a;){if(a===n)return tt(o),e;if(a===r)return tt(o),t;a=a.sibling}throw Error(i(188))}if(n.return!==r.return)n=o,r=a;else{for(var l=!1,c=o.child;c;){if(c===n){l=!0,n=o,r=a;break}if(c===r){l=!0,r=o,n=a;break}c=c.sibling}if(!l){for(c=a.child;c;){if(c===n){l=!0,n=a,r=o;break}if(c===r){l=!0,r=a,n=o;break}c=c.sibling}if(!l)throw Error(i(189))}}if(n.alternate!==r)throw Error(i(190))}if(3!==n.tag)throw Error(i(188));return n.stateNode.current===n?e:t}(e)))return null;for(var t=e;;){if(5===t.tag||6===t.tag)return t;if(t.child)t.child.return=t,t=t.child;else{if(t===e)break;for(;!t.sibling;){if(!t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}}return null}function rt(e,t){if(null==t)throw Error(i(30));return null==e?t:Array.isArray(e)?Array.isArray(t)?(e.push.apply(e,t),e):(e.push(t),e):Array.isArray(t)?[e].concat(t):[e,t]}function ot(e,t,n){Array.isArray(e)?e.forEach(t,n):e&&t.call(n,e)}var at=null;function it(e){if(e){var t=e._dispatchListeners,n=e._dispatchInstances;if(Array.isArray(t))for(var r=0;r<t.length&&!e.isPropagationStopped();r++)b(e,t[r],n[r]);else t&&b(e,t,n);e._dispatchListeners=null,e._dispatchInstances=null,e.isPersistent()||e.constructor.release(e)}}function lt(e){if(null!==e&&(at=rt(at,e)),e=at,at=null,e){if(ot(e,it),at)throw Error(i(95));if(s)throw e=d,s=!1,d=null,e}}function ct(e){return(e=e.target||e.srcElement||window).correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}function ut(e){if(!C)return!1;var t=(e="on"+e)in document;return t||((t=document.createElement("div")).setAttribute(e,"return;"),t="function"==typeof t[e]),t}var st=[];function dt(e){e.topLevelType=null,e.nativeEvent=null,e.targetInst=null,e.ancestors.length=0,10>st.length&&st.push(e)}function ft(e,t,n,r){if(st.length){var o=st.pop();return o.topLevelType=e,o.eventSystemFlags=r,o.nativeEvent=t,o.targetInst=n,o}return{topLevelType:e,eventSystemFlags:r,nativeEvent:t,targetInst:n,ancestors:[]}}function pt(e){var t=e.targetInst,n=t;do{if(!n){e.ancestors.push(n);break}var r=n;if(3===r.tag)r=r.stateNode.containerInfo;else{for(;r.return;)r=r.return;r=3!==r.tag?null:r.stateNode.containerInfo}if(!r)break;5!==(t=n.tag)&&6!==t||e.ancestors.push(n),n=Cn(r)}while(n);for(n=0;n<e.ancestors.length;n++){t=e.ancestors[n];var o=ct(e.nativeEvent);r=e.topLevelType;var a=e.nativeEvent,i=e.eventSystemFlags;0===n&&(i|=64);for(var l=null,c=0;c<O.length;c++){var u=O[c];u&&(u=u.extractEvents(r,t,a,o,i))&&(l=rt(l,u))}lt(l)}}function mt(e,t,n){if(!n.has(e)){switch(e){case"scroll":Kt(t,"scroll",!0);break;case"focus":case"blur":Kt(t,"focus",!0),Kt(t,"blur",!0),n.set("blur",null),n.set("focus",null);break;case"cancel":case"close":ut(e)&&Kt(t,e,!0);break;case"invalid":case"submit":case"reset":break;default:-1===Ge.indexOf(e)&&Xt(e,t)}n.set(e,null)}}var ht,vt,bt,gt=!1,yt=[],xt=null,wt=null,Ot=null,Et=new Map,St=new Map,kt=[],jt="mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput close cancel copy cut paste click change contextmenu reset submit".split(" "),Ct="focus blur dragenter dragleave mouseover mouseout pointerover pointerout gotpointercapture lostpointercapture".split(" ");function Pt(e,t,n,r,o){return{blockedOn:e,topLevelType:t,eventSystemFlags:32|n,nativeEvent:o,container:r}}function Tt(e,t){switch(e){case"focus":case"blur":xt=null;break;case"dragenter":case"dragleave":wt=null;break;case"mouseover":case"mouseout":Ot=null;break;case"pointerover":case"pointerout":Et.delete(t.pointerId);break;case"gotpointercapture":case"lostpointercapture":St.delete(t.pointerId)}}function Nt(e,t,n,r,o,a){return null===e||e.nativeEvent!==a?(e=Pt(t,n,r,o,a),null!==t&&(null!==(t=Pn(t))&&vt(t)),e):(e.eventSystemFlags|=r,e)}function Rt(e){var t=Cn(e.target);if(null!==t){var n=Ze(t);if(null!==n)if(13===(t=n.tag)){if(null!==(t=et(n)))return e.blockedOn=t,void a.unstable_runWithPriority(e.priority,(function(){bt(n)}))}else if(3===t&&n.stateNode.hydrate)return void(e.blockedOn=3===n.tag?n.stateNode.containerInfo:null)}e.blockedOn=null}function Mt(e){if(null!==e.blockedOn)return!1;var t=Jt(e.topLevelType,e.eventSystemFlags,e.container,e.nativeEvent);if(null!==t){var n=Pn(t);return null!==n&&vt(n),e.blockedOn=t,!1}return!0}function Dt(e,t,n){Mt(e)&&n.delete(t)}function At(){for(gt=!1;0<yt.length;){var e=yt[0];if(null!==e.blockedOn){null!==(e=Pn(e.blockedOn))&&ht(e);break}var t=Jt(e.topLevelType,e.eventSystemFlags,e.container,e.nativeEvent);null!==t?e.blockedOn=t:yt.shift()}null!==xt&&Mt(xt)&&(xt=null),null!==wt&&Mt(wt)&&(wt=null),null!==Ot&&Mt(Ot)&&(Ot=null),Et.forEach(Dt),St.forEach(Dt)}function It(e,t){e.blockedOn===t&&(e.blockedOn=null,gt||(gt=!0,a.unstable_scheduleCallback(a.unstable_NormalPriority,At)))}function Lt(e){function t(t){return It(t,e)}if(0<yt.length){It(yt[0],e);for(var n=1;n<yt.length;n++){var r=yt[n];r.blockedOn===e&&(r.blockedOn=null)}}for(null!==xt&&It(xt,e),null!==wt&&It(wt,e),null!==Ot&&It(Ot,e),Et.forEach(t),St.forEach(t),n=0;n<kt.length;n++)(r=kt[n]).blockedOn===e&&(r.blockedOn=null);for(;0<kt.length&&null===(n=kt[0]).blockedOn;)Rt(n),null===n.blockedOn&&kt.shift()}var _t={},zt=new Map,Ft=new Map,Wt=["abort","abort",qe,"animationEnd",Xe,"animationIteration",Ke,"animationStart","canplay","canPlay","canplaythrough","canPlayThrough","durationchange","durationChange","emptied","emptied","encrypted","encrypted","ended","ended","error","error","gotpointercapture","gotPointerCapture","load","load","loadeddata","loadedData","loadedmetadata","loadedMetadata","loadstart","loadStart","lostpointercapture","lostPointerCapture","playing","playing","progress","progress","seeking","seeking","stalled","stalled","suspend","suspend","timeupdate","timeUpdate",Ye,"transitionEnd","waiting","waiting"];function Bt(e,t){for(var n=0;n<e.length;n+=2){var r=e[n],o=e[n+1],a="on"+(o[0].toUpperCase()+o.slice(1));a={phasedRegistrationNames:{bubbled:a,captured:a+"Capture"},dependencies:[r],eventPriority:t},Ft.set(r,t),zt.set(r,a),_t[o]=a}}Bt("blur blur cancel cancel click click close close contextmenu contextMenu copy copy cut cut auxclick auxClick dblclick doubleClick dragend dragEnd dragstart dragStart drop drop focus focus input input invalid invalid keydown keyDown keypress keyPress keyup keyUp mousedown mouseDown mouseup mouseUp paste paste pause pause play play pointercancel pointerCancel pointerdown pointerDown pointerup pointerUp ratechange rateChange reset reset seeked seeked submit submit touchcancel touchCancel touchend touchEnd touchstart touchStart volumechange volumeChange".split(" "),0),Bt("drag drag dragenter dragEnter dragexit dragExit dragleave dragLeave dragover dragOver mousemove mouseMove mouseout mouseOut mouseover mouseOver pointermove pointerMove pointerout pointerOut pointerover pointerOver scroll scroll toggle toggle touchmove touchMove wheel wheel".split(" "),1),Bt(Wt,2);for(var Ht="change selectionchange textInput compositionstart compositionend compositionupdate".split(" "),Ut=0;Ut<Ht.length;Ut++)Ft.set(Ht[Ut],0);var $t=a.unstable_UserBlockingPriority,Vt=a.unstable_runWithPriority,qt=!0;function Xt(e,t){Kt(t,e,!1)}function Kt(e,t,n){var r=Ft.get(t);switch(void 0===r?2:r){case 0:r=Yt.bind(null,t,1,e);break;case 1:r=Gt.bind(null,t,1,e);break;default:r=Qt.bind(null,t,1,e)}n?e.addEventListener(t,r,!0):e.addEventListener(t,r,!1)}function Yt(e,t,n,r){z||L();var o=Qt,a=z;z=!0;try{I(o,e,t,n,r)}finally{(z=a)||W()}}function Gt(e,t,n,r){Vt($t,Qt.bind(null,e,t,n,r))}function Qt(e,t,n,r){if(qt)if(0<yt.length&&-1<jt.indexOf(e))e=Pt(null,e,t,n,r),yt.push(e);else{var o=Jt(e,t,n,r);if(null===o)Tt(e,r);else if(-1<jt.indexOf(e))e=Pt(o,e,t,n,r),yt.push(e);else if(!function(e,t,n,r,o){switch(t){case"focus":return xt=Nt(xt,e,t,n,r,o),!0;case"dragenter":return wt=Nt(wt,e,t,n,r,o),!0;case"mouseover":return Ot=Nt(Ot,e,t,n,r,o),!0;case"pointerover":var a=o.pointerId;return Et.set(a,Nt(Et.get(a)||null,e,t,n,r,o)),!0;case"gotpointercapture":return a=o.pointerId,St.set(a,Nt(St.get(a)||null,e,t,n,r,o)),!0}return!1}(o,e,t,n,r)){Tt(e,r),e=ft(e,r,null,t);try{B(pt,e)}finally{dt(e)}}}}function Jt(e,t,n,r){if(null!==(n=Cn(n=ct(r)))){var o=Ze(n);if(null===o)n=null;else{var a=o.tag;if(13===a){if(null!==(n=et(o)))return n;n=null}else if(3===a){if(o.stateNode.hydrate)return 3===o.tag?o.stateNode.containerInfo:null;n=null}else o!==n&&(n=null)}}e=ft(e,r,n,t);try{B(pt,e)}finally{dt(e)}return null}var Zt={animationIterationCount:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},en=["Webkit","ms","Moz","O"];function tn(e,t,n){return null==t||"boolean"==typeof t||""===t?"":n||"number"!=typeof t||0===t||Zt.hasOwnProperty(e)&&Zt[e]?(""+t).trim():t+"px"}function nn(e,t){for(var n in e=e.style,t)if(t.hasOwnProperty(n)){var r=0===n.indexOf("--"),o=tn(n,t[n],r);"float"===n&&(n="cssFloat"),r?e.setProperty(n,o):e[n]=o}}Object.keys(Zt).forEach((function(e){en.forEach((function(t){t=t+e.charAt(0).toUpperCase()+e.substring(1),Zt[t]=Zt[e]}))}));var rn=o({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function on(e,t){if(t){if(rn[e]&&(null!=t.children||null!=t.dangerouslySetInnerHTML))throw Error(i(137,e,""));if(null!=t.dangerouslySetInnerHTML){if(null!=t.children)throw Error(i(60));if("object"!=typeof t.dangerouslySetInnerHTML||!("__html"in t.dangerouslySetInnerHTML))throw Error(i(61))}if(null!=t.style&&"object"!=typeof t.style)throw Error(i(62,""))}}function an(e,t){if(-1===e.indexOf("-"))return"string"==typeof t.is;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}var ln=Ae;function cn(e,t){var n=Je(e=9===e.nodeType||11===e.nodeType?e:e.ownerDocument);t=k[t];for(var r=0;r<t.length;r++)mt(t[r],e,n)}function un(){}function sn(e){if(void 0===(e=e||("undefined"!=typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(t){return e.body}}function dn(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function fn(e,t){var n,r=dn(e);for(e=0;r;){if(3===r.nodeType){if(n=e+r.textContent.length,e<=t&&n>=t)return{node:r,offset:t-e};e=n}e:{for(;r;){if(r.nextSibling){r=r.nextSibling;break e}r=r.parentNode}r=void 0}r=dn(r)}}function pn(){for(var e=window,t=sn();t instanceof e.HTMLIFrameElement;){try{var n="string"==typeof t.contentWindow.location.href}catch(e){n=!1}if(!n)break;t=sn((e=t.contentWindow).document)}return t}function mn(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&("input"===t&&("text"===e.type||"search"===e.type||"tel"===e.type||"url"===e.type||"password"===e.type)||"textarea"===t||"true"===e.contentEditable)}var hn=null,vn=null;function bn(e,t){switch(e){case"button":case"input":case"select":case"textarea":return!!t.autoFocus}return!1}function gn(e,t){return"textarea"===e||"option"===e||"noscript"===e||"string"==typeof t.children||"number"==typeof t.children||"object"==typeof t.dangerouslySetInnerHTML&&null!==t.dangerouslySetInnerHTML&&null!=t.dangerouslySetInnerHTML.__html}var yn="function"==typeof setTimeout?setTimeout:void 0,xn="function"==typeof clearTimeout?clearTimeout:void 0;function wn(e){for(;null!=e;e=e.nextSibling){var t=e.nodeType;if(1===t||3===t)break}return e}function On(e){e=e.previousSibling;for(var t=0;e;){if(8===e.nodeType){var n=e.data;if("$"===n||"$!"===n||"$?"===n){if(0===t)return e;t--}else"/$"===n&&t++}e=e.previousSibling}return null}var En=Math.random().toString(36).slice(2),Sn="__reactInternalInstance$"+En,kn="__reactEventHandlers$"+En,jn="__reactContainere$"+En;function Cn(e){var t=e[Sn];if(t)return t;for(var n=e.parentNode;n;){if(t=n[jn]||n[Sn]){if(n=t.alternate,null!==t.child||null!==n&&null!==n.child)for(e=On(e);null!==e;){if(n=e[Sn])return n;e=On(e)}return t}n=(e=n).parentNode}return null}function Pn(e){return!(e=e[Sn]||e[jn])||5!==e.tag&&6!==e.tag&&13!==e.tag&&3!==e.tag?null:e}function Tn(e){if(5===e.tag||6===e.tag)return e.stateNode;throw Error(i(33))}function Nn(e){return e[kn]||null}function Rn(e){do{e=e.return}while(e&&5!==e.tag);return e||null}function Mn(e,t){var n=e.stateNode;if(!n)return null;var r=m(n);if(!r)return null;n=r[t];e:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":case"onMouseEnter":(r=!r.disabled)||(r=!("button"===(e=e.type)||"input"===e||"select"===e||"textarea"===e)),e=!r;break e;default:e=!1}if(e)return null;if(n&&"function"!=typeof n)throw Error(i(231,t,typeof n));return n}function Dn(e,t,n){(t=Mn(e,n.dispatchConfig.phasedRegistrationNames[t]))&&(n._dispatchListeners=rt(n._dispatchListeners,t),n._dispatchInstances=rt(n._dispatchInstances,e))}function An(e){if(e&&e.dispatchConfig.phasedRegistrationNames){for(var t=e._targetInst,n=[];t;)n.push(t),t=Rn(t);for(t=n.length;0<t--;)Dn(n[t],"captured",e);for(t=0;t<n.length;t++)Dn(n[t],"bubbled",e)}}function In(e,t,n){e&&n&&n.dispatchConfig.registrationName&&(t=Mn(e,n.dispatchConfig.registrationName))&&(n._dispatchListeners=rt(n._dispatchListeners,t),n._dispatchInstances=rt(n._dispatchInstances,e))}function Ln(e){e&&e.dispatchConfig.registrationName&&In(e._targetInst,null,e)}function _n(e){ot(e,An)}var zn=null,Fn=null,Wn=null;function Bn(){if(Wn)return Wn;var e,t,n=Fn,r=n.length,o="value"in zn?zn.value:zn.textContent,a=o.length;for(e=0;e<r&&n[e]===o[e];e++);var i=r-e;for(t=1;t<=i&&n[r-t]===o[a-t];t++);return Wn=o.slice(e,1<t?1-t:void 0)}function Hn(){return!0}function Un(){return!1}function $n(e,t,n,r){for(var o in this.dispatchConfig=e,this._targetInst=t,this.nativeEvent=n,e=this.constructor.Interface)e.hasOwnProperty(o)&&((t=e[o])?this[o]=t(n):"target"===o?this.target=r:this[o]=n[o]);return this.isDefaultPrevented=(null!=n.defaultPrevented?n.defaultPrevented:!1===n.returnValue)?Hn:Un,this.isPropagationStopped=Un,this}function Vn(e,t,n,r){if(this.eventPool.length){var o=this.eventPool.pop();return this.call(o,e,t,n,r),o}return new this(e,t,n,r)}function qn(e){if(!(e instanceof this))throw Error(i(279));e.destructor(),10>this.eventPool.length&&this.eventPool.push(e)}function Xn(e){e.eventPool=[],e.getPooled=Vn,e.release=qn}o($n.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=Hn)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=Hn)},persist:function(){this.isPersistent=Hn},isPersistent:Un,destructor:function(){var e,t=this.constructor.Interface;for(e in t)this[e]=null;this.nativeEvent=this._targetInst=this.dispatchConfig=null,this.isPropagationStopped=this.isDefaultPrevented=Un,this._dispatchInstances=this._dispatchListeners=null}}),$n.Interface={type:null,target:null,currentTarget:function(){return null},eventPhase:null,bubbles:null,cancelable:null,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:null,isTrusted:null},$n.extend=function(e){function t(){}function n(){return r.apply(this,arguments)}var r=this;t.prototype=r.prototype;var a=new t;return o(a,n.prototype),n.prototype=a,n.prototype.constructor=n,n.Interface=o({},r.Interface,e),n.extend=r.extend,Xn(n),n},Xn($n);var Kn=$n.extend({data:null}),Yn=$n.extend({data:null}),Gn=[9,13,27,32],Qn=C&&"CompositionEvent"in window,Jn=null;C&&"documentMode"in document&&(Jn=document.documentMode);var Zn=C&&"TextEvent"in window&&!Jn,er=C&&(!Qn||Jn&&8<Jn&&11>=Jn),tr=String.fromCharCode(32),nr={beforeInput:{phasedRegistrationNames:{bubbled:"onBeforeInput",captured:"onBeforeInputCapture"},dependencies:["compositionend","keypress","textInput","paste"]},compositionEnd:{phasedRegistrationNames:{bubbled:"onCompositionEnd",captured:"onCompositionEndCapture"},dependencies:"blur compositionend keydown keypress keyup mousedown".split(" ")},compositionStart:{phasedRegistrationNames:{bubbled:"onCompositionStart",captured:"onCompositionStartCapture"},dependencies:"blur compositionstart keydown keypress keyup mousedown".split(" ")},compositionUpdate:{phasedRegistrationNames:{bubbled:"onCompositionUpdate",captured:"onCompositionUpdateCapture"},dependencies:"blur compositionupdate keydown keypress keyup mousedown".split(" ")}},rr=!1;function or(e,t){switch(e){case"keyup":return-1!==Gn.indexOf(t.keyCode);case"keydown":return 229!==t.keyCode;case"keypress":case"mousedown":case"blur":return!0;default:return!1}}function ar(e){return"object"==typeof(e=e.detail)&&"data"in e?e.data:null}var ir=!1;var lr={eventTypes:nr,extractEvents:function(e,t,n,r){var o;if(Qn)e:{switch(e){case"compositionstart":var a=nr.compositionStart;break e;case"compositionend":a=nr.compositionEnd;break e;case"compositionupdate":a=nr.compositionUpdate;break e}a=void 0}else ir?or(e,n)&&(a=nr.compositionEnd):"keydown"===e&&229===n.keyCode&&(a=nr.compositionStart);return a?(er&&"ko"!==n.locale&&(ir||a!==nr.compositionStart?a===nr.compositionEnd&&ir&&(o=Bn()):(Fn="value"in(zn=r)?zn.value:zn.textContent,ir=!0)),a=Kn.getPooled(a,t,n,r),o?a.data=o:null!==(o=ar(n))&&(a.data=o),_n(a),o=a):o=null,(e=Zn?function(e,t){switch(e){case"compositionend":return ar(t);case"keypress":return 32!==t.which?null:(rr=!0,tr);case"textInput":return(e=t.data)===tr&&rr?null:e;default:return null}}(e,n):function(e,t){if(ir)return"compositionend"===e||!Qn&&or(e,t)?(e=Bn(),Wn=Fn=zn=null,ir=!1,e):null;switch(e){case"paste":return null;case"keypress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"compositionend":return er&&"ko"!==t.locale?null:t.data;default:return null}}(e,n))?((t=Yn.getPooled(nr.beforeInput,t,n,r)).data=e,_n(t)):t=null,null===o?t:null===t?o:[o,t]}},cr={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function ur(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===t?!!cr[e.type]:"textarea"===t}var sr={change:{phasedRegistrationNames:{bubbled:"onChange",captured:"onChangeCapture"},dependencies:"blur change click focus input keydown keyup selectionchange".split(" ")}};function dr(e,t,n){return(e=$n.getPooled(sr.change,e,t,n)).type="change",M(n),_n(e),e}var fr=null,pr=null;function mr(e){lt(e)}function hr(e){if(we(Tn(e)))return e}function vr(e,t){if("change"===e)return t}var br=!1;function gr(){fr&&(fr.detachEvent("onpropertychange",yr),pr=fr=null)}function yr(e){if("value"===e.propertyName&&hr(pr))if(e=dr(pr,e,ct(e)),z)lt(e);else{z=!0;try{A(mr,e)}finally{z=!1,W()}}}function xr(e,t,n){"focus"===e?(gr(),pr=n,(fr=t).attachEvent("onpropertychange",yr)):"blur"===e&&gr()}function wr(e){if("selectionchange"===e||"keyup"===e||"keydown"===e)return hr(pr)}function Or(e,t){if("click"===e)return hr(t)}function Er(e,t){if("input"===e||"change"===e)return hr(t)}C&&(br=ut("input")&&(!document.documentMode||9<document.documentMode));var Sr={eventTypes:sr,_isInputEventSupported:br,extractEvents:function(e,t,n,r){var o=t?Tn(t):window,a=o.nodeName&&o.nodeName.toLowerCase();if("select"===a||"input"===a&&"file"===o.type)var i=vr;else if(ur(o))if(br)i=Er;else{i=wr;var l=xr}else(a=o.nodeName)&&"input"===a.toLowerCase()&&("checkbox"===o.type||"radio"===o.type)&&(i=Or);if(i&&(i=i(e,t)))return dr(i,n,r);l&&l(e,o,t),"blur"===e&&(e=o._wrapperState)&&e.controlled&&"number"===o.type&&Ce(o,"number",o.value)}},kr=$n.extend({view:null,detail:null}),jr={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function Cr(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):!!(e=jr[e])&&!!t[e]}function Pr(){return Cr}var Tr=0,Nr=0,Rr=!1,Mr=!1,Dr=kr.extend({screenX:null,screenY:null,clientX:null,clientY:null,pageX:null,pageY:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,getModifierState:Pr,button:null,buttons:null,relatedTarget:function(e){return e.relatedTarget||(e.fromElement===e.srcElement?e.toElement:e.fromElement)},movementX:function(e){if("movementX"in e)return e.movementX;var t=Tr;return Tr=e.screenX,Rr?"mousemove"===e.type?e.screenX-t:0:(Rr=!0,0)},movementY:function(e){if("movementY"in e)return e.movementY;var t=Nr;return Nr=e.screenY,Mr?"mousemove"===e.type?e.screenY-t:0:(Mr=!0,0)}}),Ar=Dr.extend({pointerId:null,width:null,height:null,pressure:null,tangentialPressure:null,tiltX:null,tiltY:null,twist:null,pointerType:null,isPrimary:null}),Ir={mouseEnter:{registrationName:"onMouseEnter",dependencies:["mouseout","mouseover"]},mouseLeave:{registrationName:"onMouseLeave",dependencies:["mouseout","mouseover"]},pointerEnter:{registrationName:"onPointerEnter",dependencies:["pointerout","pointerover"]},pointerLeave:{registrationName:"onPointerLeave",dependencies:["pointerout","pointerover"]}},Lr={eventTypes:Ir,extractEvents:function(e,t,n,r,o){var a="mouseover"===e||"pointerover"===e,i="mouseout"===e||"pointerout"===e;if(a&&0==(32&o)&&(n.relatedTarget||n.fromElement)||!i&&!a)return null;(a=r.window===r?r:(a=r.ownerDocument)?a.defaultView||a.parentWindow:window,i)?(i=t,null!==(t=(t=n.relatedTarget||n.toElement)?Cn(t):null)&&(t!==Ze(t)||5!==t.tag&&6!==t.tag)&&(t=null)):i=null;if(i===t)return null;if("mouseout"===e||"mouseover"===e)var l=Dr,c=Ir.mouseLeave,u=Ir.mouseEnter,s="mouse";else"pointerout"!==e&&"pointerover"!==e||(l=Ar,c=Ir.pointerLeave,u=Ir.pointerEnter,s="pointer");if(e=null==i?a:Tn(i),a=null==t?a:Tn(t),(c=l.getPooled(c,i,n,r)).type=s+"leave",c.target=e,c.relatedTarget=a,(n=l.getPooled(u,t,n,r)).type=s+"enter",n.target=a,n.relatedTarget=e,s=t,(r=i)&&s)e:{for(u=s,i=0,e=l=r;e;e=Rn(e))i++;for(e=0,t=u;t;t=Rn(t))e++;for(;0<i-e;)l=Rn(l),i--;for(;0<e-i;)u=Rn(u),e--;for(;i--;){if(l===u||l===u.alternate)break e;l=Rn(l),u=Rn(u)}l=null}else l=null;for(u=l,l=[];r&&r!==u&&(null===(i=r.alternate)||i!==u);)l.push(r),r=Rn(r);for(r=[];s&&s!==u&&(null===(i=s.alternate)||i!==u);)r.push(s),s=Rn(s);for(s=0;s<l.length;s++)In(l[s],"bubbled",c);for(s=r.length;0<s--;)In(r[s],"captured",n);return 0==(64&o)?[c]:[c,n]}};var _r="function"==typeof Object.is?Object.is:function(e,t){return e===t&&(0!==e||1/e==1/t)||e!=e&&t!=t},zr=Object.prototype.hasOwnProperty;function Fr(e,t){if(_r(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(r=0;r<n.length;r++)if(!zr.call(t,n[r])||!_r(e[n[r]],t[n[r]]))return!1;return!0}var Wr=C&&"documentMode"in document&&11>=document.documentMode,Br={select:{phasedRegistrationNames:{bubbled:"onSelect",captured:"onSelectCapture"},dependencies:"blur contextmenu dragend focus keydown keyup mousedown mouseup selectionchange".split(" ")}},Hr=null,Ur=null,$r=null,Vr=!1;function qr(e,t){var n=t.window===t?t.document:9===t.nodeType?t:t.ownerDocument;return Vr||null==Hr||Hr!==sn(n)?null:("selectionStart"in(n=Hr)&&mn(n)?n={start:n.selectionStart,end:n.selectionEnd}:n={anchorNode:(n=(n.ownerDocument&&n.ownerDocument.defaultView||window).getSelection()).anchorNode,anchorOffset:n.anchorOffset,focusNode:n.focusNode,focusOffset:n.focusOffset},$r&&Fr($r,n)?null:($r=n,(e=$n.getPooled(Br.select,Ur,e,t)).type="select",e.target=Hr,_n(e),e))}var Xr={eventTypes:Br,extractEvents:function(e,t,n,r,o,a){if(!(a=!(o=a||(r.window===r?r.document:9===r.nodeType?r:r.ownerDocument)))){e:{o=Je(o),a=k.onSelect;for(var i=0;i<a.length;i++)if(!o.has(a[i])){o=!1;break e}o=!0}a=!o}if(a)return null;switch(o=t?Tn(t):window,e){case"focus":(ur(o)||"true"===o.contentEditable)&&(Hr=o,Ur=t,$r=null);break;case"blur":$r=Ur=Hr=null;break;case"mousedown":Vr=!0;break;case"contextmenu":case"mouseup":case"dragend":return Vr=!1,qr(n,r);case"selectionchange":if(Wr)break;case"keydown":case"keyup":return qr(n,r)}return null}},Kr=$n.extend({animationName:null,elapsedTime:null,pseudoElement:null}),Yr=$n.extend({clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}}),Gr=kr.extend({relatedTarget:null});function Qr(e){var t=e.keyCode;return"charCode"in e?0===(e=e.charCode)&&13===t&&(e=13):e=t,10===e&&(e=13),32<=e||13===e?e:0}var Jr={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},Zr={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},eo=kr.extend({key:function(e){if(e.key){var t=Jr[e.key]||e.key;if("Unidentified"!==t)return t}return"keypress"===e.type?13===(e=Qr(e))?"Enter":String.fromCharCode(e):"keydown"===e.type||"keyup"===e.type?Zr[e.keyCode]||"Unidentified":""},location:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,repeat:null,locale:null,getModifierState:Pr,charCode:function(e){return"keypress"===e.type?Qr(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?Qr(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}}),to=Dr.extend({dataTransfer:null}),no=kr.extend({touches:null,targetTouches:null,changedTouches:null,altKey:null,metaKey:null,ctrlKey:null,shiftKey:null,getModifierState:Pr}),ro=$n.extend({propertyName:null,elapsedTime:null,pseudoElement:null}),oo=Dr.extend({deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:null,deltaMode:null}),ao={eventTypes:_t,extractEvents:function(e,t,n,r){var o=zt.get(e);if(!o)return null;switch(e){case"keypress":if(0===Qr(n))return null;case"keydown":case"keyup":e=eo;break;case"blur":case"focus":e=Gr;break;case"click":if(2===n.button)return null;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":e=Dr;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":e=to;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":e=no;break;case qe:case Xe:case Ke:e=Kr;break;case Ye:e=ro;break;case"scroll":e=kr;break;case"wheel":e=oo;break;case"copy":case"cut":case"paste":e=Yr;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":e=Ar;break;default:e=$n}return _n(t=e.getPooled(o,t,n,r)),t}};if(g)throw Error(i(101));g=Array.prototype.slice.call("ResponderEventPlugin SimpleEventPlugin EnterLeaveEventPlugin ChangeEventPlugin SelectEventPlugin BeforeInputEventPlugin".split(" ")),x(),m=Nn,h=Pn,v=Tn,j({SimpleEventPlugin:ao,EnterLeaveEventPlugin:Lr,ChangeEventPlugin:Sr,SelectEventPlugin:Xr,BeforeInputEventPlugin:lr});var io=[],lo=-1;function co(e){0>lo||(e.current=io[lo],io[lo]=null,lo--)}function uo(e,t){lo++,io[lo]=e.current,e.current=t}var so={},fo={current:so},po={current:!1},mo=so;function ho(e,t){var n=e.type.contextTypes;if(!n)return so;var r=e.stateNode;if(r&&r.__reactInternalMemoizedUnmaskedChildContext===t)return r.__reactInternalMemoizedMaskedChildContext;var o,a={};for(o in n)a[o]=t[o];return r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=t,e.__reactInternalMemoizedMaskedChildContext=a),a}function vo(e){return null!=(e=e.childContextTypes)}function bo(){co(po),co(fo)}function go(e,t,n){if(fo.current!==so)throw Error(i(168));uo(fo,t),uo(po,n)}function yo(e,t,n){var r=e.stateNode;if(e=t.childContextTypes,"function"!=typeof r.getChildContext)return n;for(var a in r=r.getChildContext())if(!(a in e))throw Error(i(108,ve(t)||"Unknown",a));return o({},n,{},r)}function xo(e){return e=(e=e.stateNode)&&e.__reactInternalMemoizedMergedChildContext||so,mo=fo.current,uo(fo,e),uo(po,po.current),!0}function wo(e,t,n){var r=e.stateNode;if(!r)throw Error(i(169));n?(e=yo(e,t,mo),r.__reactInternalMemoizedMergedChildContext=e,co(po),co(fo),uo(fo,e)):co(po),uo(po,n)}var Oo=a.unstable_runWithPriority,Eo=a.unstable_scheduleCallback,So=a.unstable_cancelCallback,ko=a.unstable_requestPaint,jo=a.unstable_now,Co=a.unstable_getCurrentPriorityLevel,Po=a.unstable_ImmediatePriority,To=a.unstable_UserBlockingPriority,No=a.unstable_NormalPriority,Ro=a.unstable_LowPriority,Mo=a.unstable_IdlePriority,Do={},Ao=a.unstable_shouldYield,Io=void 0!==ko?ko:function(){},Lo=null,_o=null,zo=!1,Fo=jo(),Wo=1e4>Fo?jo:function(){return jo()-Fo};function Bo(){switch(Co()){case Po:return 99;case To:return 98;case No:return 97;case Ro:return 96;case Mo:return 95;default:throw Error(i(332))}}function Ho(e){switch(e){case 99:return Po;case 98:return To;case 97:return No;case 96:return Ro;case 95:return Mo;default:throw Error(i(332))}}function Uo(e,t){return e=Ho(e),Oo(e,t)}function $o(e,t,n){return e=Ho(e),Eo(e,t,n)}function Vo(e){return null===Lo?(Lo=[e],_o=Eo(Po,Xo)):Lo.push(e),Do}function qo(){if(null!==_o){var e=_o;_o=null,So(e)}Xo()}function Xo(){if(!zo&&null!==Lo){zo=!0;var e=0;try{var t=Lo;Uo(99,(function(){for(;e<t.length;e++){var n=t[e];do{n=n(!0)}while(null!==n)}})),Lo=null}catch(t){throw null!==Lo&&(Lo=Lo.slice(e+1)),Eo(Po,qo),t}finally{zo=!1}}}function Ko(e,t,n){return 1073741821-(1+((1073741821-e+t/10)/(n/=10)|0))*n}function Yo(e,t){if(e&&e.defaultProps)for(var n in t=o({},t),e=e.defaultProps)void 0===t[n]&&(t[n]=e[n]);return t}var Go={current:null},Qo=null,Jo=null,Zo=null;function ea(){Zo=Jo=Qo=null}function ta(e){var t=Go.current;co(Go),e.type._context._currentValue=t}function na(e,t){for(;null!==e;){var n=e.alternate;if(e.childExpirationTime<t)e.childExpirationTime=t,null!==n&&n.childExpirationTime<t&&(n.childExpirationTime=t);else{if(!(null!==n&&n.childExpirationTime<t))break;n.childExpirationTime=t}e=e.return}}function ra(e,t){Qo=e,Zo=Jo=null,null!==(e=e.dependencies)&&null!==e.firstContext&&(e.expirationTime>=t&&(Ni=!0),e.firstContext=null)}function oa(e,t){if(Zo!==e&&!1!==t&&0!==t)if("number"==typeof t&&1073741823!==t||(Zo=e,t=1073741823),t={context:e,observedBits:t,next:null},null===Jo){if(null===Qo)throw Error(i(308));Jo=t,Qo.dependencies={expirationTime:0,firstContext:t,responders:null}}else Jo=Jo.next=t;return e._currentValue}var aa=!1;function ia(e){e.updateQueue={baseState:e.memoizedState,baseQueue:null,shared:{pending:null},effects:null}}function la(e,t){e=e.updateQueue,t.updateQueue===e&&(t.updateQueue={baseState:e.baseState,baseQueue:e.baseQueue,shared:e.shared,effects:e.effects})}function ca(e,t){return(e={expirationTime:e,suspenseConfig:t,tag:0,payload:null,callback:null,next:null}).next=e}function ua(e,t){if(null!==(e=e.updateQueue)){var n=(e=e.shared).pending;null===n?t.next=t:(t.next=n.next,n.next=t),e.pending=t}}function sa(e,t){var n=e.alternate;null!==n&&la(n,e),null===(n=(e=e.updateQueue).baseQueue)?(e.baseQueue=t.next=t,t.next=t):(t.next=n.next,n.next=t)}function da(e,t,n,r){var a=e.updateQueue;aa=!1;var i=a.baseQueue,l=a.shared.pending;if(null!==l){if(null!==i){var c=i.next;i.next=l.next,l.next=c}i=l,a.shared.pending=null,null!==(c=e.alternate)&&(null!==(c=c.updateQueue)&&(c.baseQueue=l))}if(null!==i){c=i.next;var u=a.baseState,s=0,d=null,f=null,p=null;if(null!==c)for(var m=c;;){if((l=m.expirationTime)<r){var h={expirationTime:m.expirationTime,suspenseConfig:m.suspenseConfig,tag:m.tag,payload:m.payload,callback:m.callback,next:null};null===p?(f=p=h,d=u):p=p.next=h,l>s&&(s=l)}else{null!==p&&(p=p.next={expirationTime:1073741823,suspenseConfig:m.suspenseConfig,tag:m.tag,payload:m.payload,callback:m.callback,next:null}),ac(l,m.suspenseConfig);e:{var v=e,b=m;switch(l=t,h=n,b.tag){case 1:if("function"==typeof(v=b.payload)){u=v.call(h,u,l);break e}u=v;break e;case 3:v.effectTag=-4097&v.effectTag|64;case 0:if(null==(l="function"==typeof(v=b.payload)?v.call(h,u,l):v))break e;u=o({},u,l);break e;case 2:aa=!0}}null!==m.callback&&(e.effectTag|=32,null===(l=a.effects)?a.effects=[m]:l.push(m))}if(null===(m=m.next)||m===c){if(null===(l=a.shared.pending))break;m=i.next=l.next,l.next=c,a.baseQueue=i=l,a.shared.pending=null}}null===p?d=u:p.next=f,a.baseState=d,a.baseQueue=p,ic(s),e.expirationTime=s,e.memoizedState=u}}function fa(e,t,n){if(e=t.effects,t.effects=null,null!==e)for(t=0;t<e.length;t++){var r=e[t],o=r.callback;if(null!==o){if(r.callback=null,r=o,o=n,"function"!=typeof r)throw Error(i(191,r));r.call(o)}}}var pa=G.ReactCurrentBatchConfig,ma=(new r.Component).refs;function ha(e,t,n,r){n=null==(n=n(r,t=e.memoizedState))?t:o({},t,n),e.memoizedState=n,0===e.expirationTime&&(e.updateQueue.baseState=n)}var va={isMounted:function(e){return!!(e=e._reactInternalFiber)&&Ze(e)===e},enqueueSetState:function(e,t,n){e=e._reactInternalFiber;var r=ql(),o=pa.suspense;(o=ca(r=Xl(r,e,o),o)).payload=t,null!=n&&(o.callback=n),ua(e,o),Kl(e,r)},enqueueReplaceState:function(e,t,n){e=e._reactInternalFiber;var r=ql(),o=pa.suspense;(o=ca(r=Xl(r,e,o),o)).tag=1,o.payload=t,null!=n&&(o.callback=n),ua(e,o),Kl(e,r)},enqueueForceUpdate:function(e,t){e=e._reactInternalFiber;var n=ql(),r=pa.suspense;(r=ca(n=Xl(n,e,r),r)).tag=2,null!=t&&(r.callback=t),ua(e,r),Kl(e,n)}};function ba(e,t,n,r,o,a,i){return"function"==typeof(e=e.stateNode).shouldComponentUpdate?e.shouldComponentUpdate(r,a,i):!t.prototype||!t.prototype.isPureReactComponent||(!Fr(n,r)||!Fr(o,a))}function ga(e,t,n){var r=!1,o=so,a=t.contextType;return"object"==typeof a&&null!==a?a=oa(a):(o=vo(t)?mo:fo.current,a=(r=null!=(r=t.contextTypes))?ho(e,o):so),t=new t(n,a),e.memoizedState=null!==t.state&&void 0!==t.state?t.state:null,t.updater=va,e.stateNode=t,t._reactInternalFiber=e,r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=o,e.__reactInternalMemoizedMaskedChildContext=a),t}function ya(e,t,n,r){e=t.state,"function"==typeof t.componentWillReceiveProps&&t.componentWillReceiveProps(n,r),"function"==typeof t.UNSAFE_componentWillReceiveProps&&t.UNSAFE_componentWillReceiveProps(n,r),t.state!==e&&va.enqueueReplaceState(t,t.state,null)}function xa(e,t,n,r){var o=e.stateNode;o.props=n,o.state=e.memoizedState,o.refs=ma,ia(e);var a=t.contextType;"object"==typeof a&&null!==a?o.context=oa(a):(a=vo(t)?mo:fo.current,o.context=ho(e,a)),da(e,n,o,r),o.state=e.memoizedState,"function"==typeof(a=t.getDerivedStateFromProps)&&(ha(e,t,a,n),o.state=e.memoizedState),"function"==typeof t.getDerivedStateFromProps||"function"==typeof o.getSnapshotBeforeUpdate||"function"!=typeof o.UNSAFE_componentWillMount&&"function"!=typeof o.componentWillMount||(t=o.state,"function"==typeof o.componentWillMount&&o.componentWillMount(),"function"==typeof o.UNSAFE_componentWillMount&&o.UNSAFE_componentWillMount(),t!==o.state&&va.enqueueReplaceState(o,o.state,null),da(e,n,o,r),o.state=e.memoizedState),"function"==typeof o.componentDidMount&&(e.effectTag|=4)}var wa=Array.isArray;function Oa(e,t,n){if(null!==(e=n.ref)&&"function"!=typeof e&&"object"!=typeof e){if(n._owner){if(n=n._owner){if(1!==n.tag)throw Error(i(309));var r=n.stateNode}if(!r)throw Error(i(147,e));var o=""+e;return null!==t&&null!==t.ref&&"function"==typeof t.ref&&t.ref._stringRef===o?t.ref:((t=function(e){var t=r.refs;t===ma&&(t=r.refs={}),null===e?delete t[o]:t[o]=e})._stringRef=o,t)}if("string"!=typeof e)throw Error(i(284));if(!n._owner)throw Error(i(290,e))}return e}function Ea(e,t){if("textarea"!==e.type)throw Error(i(31,"[object Object]"===Object.prototype.toString.call(t)?"object with keys {"+Object.keys(t).join(", ")+"}":t,""))}function Sa(e){function t(t,n){if(e){var r=t.lastEffect;null!==r?(r.nextEffect=n,t.lastEffect=n):t.firstEffect=t.lastEffect=n,n.nextEffect=null,n.effectTag=8}}function n(n,r){if(!e)return null;for(;null!==r;)t(n,r),r=r.sibling;return null}function r(e,t){for(e=new Map;null!==t;)null!==t.key?e.set(t.key,t):e.set(t.index,t),t=t.sibling;return e}function o(e,t){return(e=jc(e,t)).index=0,e.sibling=null,e}function a(t,n,r){return t.index=r,e?null!==(r=t.alternate)?(r=r.index)<n?(t.effectTag=2,n):r:(t.effectTag=2,n):n}function l(t){return e&&null===t.alternate&&(t.effectTag=2),t}function c(e,t,n,r){return null===t||6!==t.tag?((t=Tc(n,e.mode,r)).return=e,t):((t=o(t,n)).return=e,t)}function u(e,t,n,r){return null!==t&&t.elementType===n.type?((r=o(t,n.props)).ref=Oa(e,t,n),r.return=e,r):((r=Cc(n.type,n.key,n.props,null,e.mode,r)).ref=Oa(e,t,n),r.return=e,r)}function s(e,t,n,r){return null===t||4!==t.tag||t.stateNode.containerInfo!==n.containerInfo||t.stateNode.implementation!==n.implementation?((t=Nc(n,e.mode,r)).return=e,t):((t=o(t,n.children||[])).return=e,t)}function d(e,t,n,r,a){return null===t||7!==t.tag?((t=Pc(n,e.mode,r,a)).return=e,t):((t=o(t,n)).return=e,t)}function f(e,t,n){if("string"==typeof t||"number"==typeof t)return(t=Tc(""+t,e.mode,n)).return=e,t;if("object"==typeof t&&null!==t){switch(t.$$typeof){case ee:return(n=Cc(t.type,t.key,t.props,null,e.mode,n)).ref=Oa(e,null,t),n.return=e,n;case te:return(t=Nc(t,e.mode,n)).return=e,t}if(wa(t)||he(t))return(t=Pc(t,e.mode,n,null)).return=e,t;Ea(e,t)}return null}function p(e,t,n,r){var o=null!==t?t.key:null;if("string"==typeof n||"number"==typeof n)return null!==o?null:c(e,t,""+n,r);if("object"==typeof n&&null!==n){switch(n.$$typeof){case ee:return n.key===o?n.type===ne?d(e,t,n.props.children,r,o):u(e,t,n,r):null;case te:return n.key===o?s(e,t,n,r):null}if(wa(n)||he(n))return null!==o?null:d(e,t,n,r,null);Ea(e,n)}return null}function m(e,t,n,r,o){if("string"==typeof r||"number"==typeof r)return c(t,e=e.get(n)||null,""+r,o);if("object"==typeof r&&null!==r){switch(r.$$typeof){case ee:return e=e.get(null===r.key?n:r.key)||null,r.type===ne?d(t,e,r.props.children,o,r.key):u(t,e,r,o);case te:return s(t,e=e.get(null===r.key?n:r.key)||null,r,o)}if(wa(r)||he(r))return d(t,e=e.get(n)||null,r,o,null);Ea(t,r)}return null}function h(o,i,l,c){for(var u=null,s=null,d=i,h=i=0,v=null;null!==d&&h<l.length;h++){d.index>h?(v=d,d=null):v=d.sibling;var b=p(o,d,l[h],c);if(null===b){null===d&&(d=v);break}e&&d&&null===b.alternate&&t(o,d),i=a(b,i,h),null===s?u=b:s.sibling=b,s=b,d=v}if(h===l.length)return n(o,d),u;if(null===d){for(;h<l.length;h++)null!==(d=f(o,l[h],c))&&(i=a(d,i,h),null===s?u=d:s.sibling=d,s=d);return u}for(d=r(o,d);h<l.length;h++)null!==(v=m(d,o,h,l[h],c))&&(e&&null!==v.alternate&&d.delete(null===v.key?h:v.key),i=a(v,i,h),null===s?u=v:s.sibling=v,s=v);return e&&d.forEach((function(e){return t(o,e)})),u}function v(o,l,c,u){var s=he(c);if("function"!=typeof s)throw Error(i(150));if(null==(c=s.call(c)))throw Error(i(151));for(var d=s=null,h=l,v=l=0,b=null,g=c.next();null!==h&&!g.done;v++,g=c.next()){h.index>v?(b=h,h=null):b=h.sibling;var y=p(o,h,g.value,u);if(null===y){null===h&&(h=b);break}e&&h&&null===y.alternate&&t(o,h),l=a(y,l,v),null===d?s=y:d.sibling=y,d=y,h=b}if(g.done)return n(o,h),s;if(null===h){for(;!g.done;v++,g=c.next())null!==(g=f(o,g.value,u))&&(l=a(g,l,v),null===d?s=g:d.sibling=g,d=g);return s}for(h=r(o,h);!g.done;v++,g=c.next())null!==(g=m(h,o,v,g.value,u))&&(e&&null!==g.alternate&&h.delete(null===g.key?v:g.key),l=a(g,l,v),null===d?s=g:d.sibling=g,d=g);return e&&h.forEach((function(e){return t(o,e)})),s}return function(e,r,a,c){var u="object"==typeof a&&null!==a&&a.type===ne&&null===a.key;u&&(a=a.props.children);var s="object"==typeof a&&null!==a;if(s)switch(a.$$typeof){case ee:e:{for(s=a.key,u=r;null!==u;){if(u.key===s){switch(u.tag){case 7:if(a.type===ne){n(e,u.sibling),(r=o(u,a.props.children)).return=e,e=r;break e}break;default:if(u.elementType===a.type){n(e,u.sibling),(r=o(u,a.props)).ref=Oa(e,u,a),r.return=e,e=r;break e}}n(e,u);break}t(e,u),u=u.sibling}a.type===ne?((r=Pc(a.props.children,e.mode,c,a.key)).return=e,e=r):((c=Cc(a.type,a.key,a.props,null,e.mode,c)).ref=Oa(e,r,a),c.return=e,e=c)}return l(e);case te:e:{for(u=a.key;null!==r;){if(r.key===u){if(4===r.tag&&r.stateNode.containerInfo===a.containerInfo&&r.stateNode.implementation===a.implementation){n(e,r.sibling),(r=o(r,a.children||[])).return=e,e=r;break e}n(e,r);break}t(e,r),r=r.sibling}(r=Nc(a,e.mode,c)).return=e,e=r}return l(e)}if("string"==typeof a||"number"==typeof a)return a=""+a,null!==r&&6===r.tag?(n(e,r.sibling),(r=o(r,a)).return=e,e=r):(n(e,r),(r=Tc(a,e.mode,c)).return=e,e=r),l(e);if(wa(a))return h(e,r,a,c);if(he(a))return v(e,r,a,c);if(s&&Ea(e,a),void 0===a&&!u)switch(e.tag){case 1:case 0:throw e=e.type,Error(i(152,e.displayName||e.name||"Component"))}return n(e,r)}}var ka=Sa(!0),ja=Sa(!1),Ca={},Pa={current:Ca},Ta={current:Ca},Na={current:Ca};function Ra(e){if(e===Ca)throw Error(i(174));return e}function Ma(e,t){switch(uo(Na,t),uo(Ta,e),uo(Pa,Ca),e=t.nodeType){case 9:case 11:t=(t=t.documentElement)?t.namespaceURI:_e(null,"");break;default:t=_e(t=(e=8===e?t.parentNode:t).namespaceURI||null,e=e.tagName)}co(Pa),uo(Pa,t)}function Da(){co(Pa),co(Ta),co(Na)}function Aa(e){Ra(Na.current);var t=Ra(Pa.current),n=_e(t,e.type);t!==n&&(uo(Ta,e),uo(Pa,n))}function Ia(e){Ta.current===e&&(co(Pa),co(Ta))}var La={current:0};function _a(e){for(var t=e;null!==t;){if(13===t.tag){var n=t.memoizedState;if(null!==n&&(null===(n=n.dehydrated)||"$?"===n.data||"$!"===n.data))return t}else if(19===t.tag&&void 0!==t.memoizedProps.revealOrder){if(0!=(64&t.effectTag))return t}else if(null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}return null}function za(e,t){return{responder:e,props:t}}var Fa=G.ReactCurrentDispatcher,Wa=G.ReactCurrentBatchConfig,Ba=0,Ha=null,Ua=null,$a=null,Va=!1;function qa(){throw Error(i(321))}function Xa(e,t){if(null===t)return!1;for(var n=0;n<t.length&&n<e.length;n++)if(!_r(e[n],t[n]))return!1;return!0}function Ka(e,t,n,r,o,a){if(Ba=a,Ha=t,t.memoizedState=null,t.updateQueue=null,t.expirationTime=0,Fa.current=null===e||null===e.memoizedState?bi:gi,e=n(r,o),t.expirationTime===Ba){a=0;do{if(t.expirationTime=0,!(25>a))throw Error(i(301));a+=1,$a=Ua=null,t.updateQueue=null,Fa.current=yi,e=n(r,o)}while(t.expirationTime===Ba)}if(Fa.current=vi,t=null!==Ua&&null!==Ua.next,Ba=0,$a=Ua=Ha=null,Va=!1,t)throw Error(i(300));return e}function Ya(){var e={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};return null===$a?Ha.memoizedState=$a=e:$a=$a.next=e,$a}function Ga(){if(null===Ua){var e=Ha.alternate;e=null!==e?e.memoizedState:null}else e=Ua.next;var t=null===$a?Ha.memoizedState:$a.next;if(null!==t)$a=t,Ua=e;else{if(null===e)throw Error(i(310));e={memoizedState:(Ua=e).memoizedState,baseState:Ua.baseState,baseQueue:Ua.baseQueue,queue:Ua.queue,next:null},null===$a?Ha.memoizedState=$a=e:$a=$a.next=e}return $a}function Qa(e,t){return"function"==typeof t?t(e):t}function Ja(e){var t=Ga(),n=t.queue;if(null===n)throw Error(i(311));n.lastRenderedReducer=e;var r=Ua,o=r.baseQueue,a=n.pending;if(null!==a){if(null!==o){var l=o.next;o.next=a.next,a.next=l}r.baseQueue=o=a,n.pending=null}if(null!==o){o=o.next,r=r.baseState;var c=l=a=null,u=o;do{var s=u.expirationTime;if(s<Ba){var d={expirationTime:u.expirationTime,suspenseConfig:u.suspenseConfig,action:u.action,eagerReducer:u.eagerReducer,eagerState:u.eagerState,next:null};null===c?(l=c=d,a=r):c=c.next=d,s>Ha.expirationTime&&(Ha.expirationTime=s,ic(s))}else null!==c&&(c=c.next={expirationTime:1073741823,suspenseConfig:u.suspenseConfig,action:u.action,eagerReducer:u.eagerReducer,eagerState:u.eagerState,next:null}),ac(s,u.suspenseConfig),r=u.eagerReducer===e?u.eagerState:e(r,u.action);u=u.next}while(null!==u&&u!==o);null===c?a=r:c.next=l,_r(r,t.memoizedState)||(Ni=!0),t.memoizedState=r,t.baseState=a,t.baseQueue=c,n.lastRenderedState=r}return[t.memoizedState,n.dispatch]}function Za(e){var t=Ga(),n=t.queue;if(null===n)throw Error(i(311));n.lastRenderedReducer=e;var r=n.dispatch,o=n.pending,a=t.memoizedState;if(null!==o){n.pending=null;var l=o=o.next;do{a=e(a,l.action),l=l.next}while(l!==o);_r(a,t.memoizedState)||(Ni=!0),t.memoizedState=a,null===t.baseQueue&&(t.baseState=a),n.lastRenderedState=a}return[a,r]}function ei(e){var t=Ya();return"function"==typeof e&&(e=e()),t.memoizedState=t.baseState=e,e=(e=t.queue={pending:null,dispatch:null,lastRenderedReducer:Qa,lastRenderedState:e}).dispatch=hi.bind(null,Ha,e),[t.memoizedState,e]}function ti(e,t,n,r){return e={tag:e,create:t,destroy:n,deps:r,next:null},null===(t=Ha.updateQueue)?(t={lastEffect:null},Ha.updateQueue=t,t.lastEffect=e.next=e):null===(n=t.lastEffect)?t.lastEffect=e.next=e:(r=n.next,n.next=e,e.next=r,t.lastEffect=e),e}function ni(){return Ga().memoizedState}function ri(e,t,n,r){var o=Ya();Ha.effectTag|=e,o.memoizedState=ti(1|t,n,void 0,void 0===r?null:r)}function oi(e,t,n,r){var o=Ga();r=void 0===r?null:r;var a=void 0;if(null!==Ua){var i=Ua.memoizedState;if(a=i.destroy,null!==r&&Xa(r,i.deps))return void ti(t,n,a,r)}Ha.effectTag|=e,o.memoizedState=ti(1|t,n,a,r)}function ai(e,t){return ri(516,4,e,t)}function ii(e,t){return oi(516,4,e,t)}function li(e,t){return oi(4,2,e,t)}function ci(e,t){return"function"==typeof t?(e=e(),t(e),function(){t(null)}):null!=t?(e=e(),t.current=e,function(){t.current=null}):void 0}function ui(e,t,n){return n=null!=n?n.concat([e]):null,oi(4,2,ci.bind(null,t,e),n)}function si(){}function di(e,t){return Ya().memoizedState=[e,void 0===t?null:t],e}function fi(e,t){var n=Ga();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&Xa(t,r[1])?r[0]:(n.memoizedState=[e,t],e)}function pi(e,t){var n=Ga();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&Xa(t,r[1])?r[0]:(e=e(),n.memoizedState=[e,t],e)}function mi(e,t,n){var r=Bo();Uo(98>r?98:r,(function(){e(!0)})),Uo(97<r?97:r,(function(){var r=Wa.suspense;Wa.suspense=void 0===t?null:t;try{e(!1),n()}finally{Wa.suspense=r}}))}function hi(e,t,n){var r=ql(),o=pa.suspense;o={expirationTime:r=Xl(r,e,o),suspenseConfig:o,action:n,eagerReducer:null,eagerState:null,next:null};var a=t.pending;if(null===a?o.next=o:(o.next=a.next,a.next=o),t.pending=o,a=e.alternate,e===Ha||null!==a&&a===Ha)Va=!0,o.expirationTime=Ba,Ha.expirationTime=Ba;else{if(0===e.expirationTime&&(null===a||0===a.expirationTime)&&null!==(a=t.lastRenderedReducer))try{var i=t.lastRenderedState,l=a(i,n);if(o.eagerReducer=a,o.eagerState=l,_r(l,i))return}catch(e){}Kl(e,r)}}var vi={readContext:oa,useCallback:qa,useContext:qa,useEffect:qa,useImperativeHandle:qa,useLayoutEffect:qa,useMemo:qa,useReducer:qa,useRef:qa,useState:qa,useDebugValue:qa,useResponder:qa,useDeferredValue:qa,useTransition:qa},bi={readContext:oa,useCallback:di,useContext:oa,useEffect:ai,useImperativeHandle:function(e,t,n){return n=null!=n?n.concat([e]):null,ri(4,2,ci.bind(null,t,e),n)},useLayoutEffect:function(e,t){return ri(4,2,e,t)},useMemo:function(e,t){var n=Ya();return t=void 0===t?null:t,e=e(),n.memoizedState=[e,t],e},useReducer:function(e,t,n){var r=Ya();return t=void 0!==n?n(t):t,r.memoizedState=r.baseState=t,e=(e=r.queue={pending:null,dispatch:null,lastRenderedReducer:e,lastRenderedState:t}).dispatch=hi.bind(null,Ha,e),[r.memoizedState,e]},useRef:function(e){return e={current:e},Ya().memoizedState=e},useState:ei,useDebugValue:si,useResponder:za,useDeferredValue:function(e,t){var n=ei(e),r=n[0],o=n[1];return ai((function(){var n=Wa.suspense;Wa.suspense=void 0===t?null:t;try{o(e)}finally{Wa.suspense=n}}),[e,t]),r},useTransition:function(e){var t=ei(!1),n=t[0];return t=t[1],[di(mi.bind(null,t,e),[t,e]),n]}},gi={readContext:oa,useCallback:fi,useContext:oa,useEffect:ii,useImperativeHandle:ui,useLayoutEffect:li,useMemo:pi,useReducer:Ja,useRef:ni,useState:function(){return Ja(Qa)},useDebugValue:si,useResponder:za,useDeferredValue:function(e,t){var n=Ja(Qa),r=n[0],o=n[1];return ii((function(){var n=Wa.suspense;Wa.suspense=void 0===t?null:t;try{o(e)}finally{Wa.suspense=n}}),[e,t]),r},useTransition:function(e){var t=Ja(Qa),n=t[0];return t=t[1],[fi(mi.bind(null,t,e),[t,e]),n]}},yi={readContext:oa,useCallback:fi,useContext:oa,useEffect:ii,useImperativeHandle:ui,useLayoutEffect:li,useMemo:pi,useReducer:Za,useRef:ni,useState:function(){return Za(Qa)},useDebugValue:si,useResponder:za,useDeferredValue:function(e,t){var n=Za(Qa),r=n[0],o=n[1];return ii((function(){var n=Wa.suspense;Wa.suspense=void 0===t?null:t;try{o(e)}finally{Wa.suspense=n}}),[e,t]),r},useTransition:function(e){var t=Za(Qa),n=t[0];return t=t[1],[fi(mi.bind(null,t,e),[t,e]),n]}},xi=null,wi=null,Oi=!1;function Ei(e,t){var n=Sc(5,null,null,0);n.elementType="DELETED",n.type="DELETED",n.stateNode=t,n.return=e,n.effectTag=8,null!==e.lastEffect?(e.lastEffect.nextEffect=n,e.lastEffect=n):e.firstEffect=e.lastEffect=n}function Si(e,t){switch(e.tag){case 5:var n=e.type;return null!==(t=1!==t.nodeType||n.toLowerCase()!==t.nodeName.toLowerCase()?null:t)&&(e.stateNode=t,!0);case 6:return null!==(t=""===e.pendingProps||3!==t.nodeType?null:t)&&(e.stateNode=t,!0);case 13:default:return!1}}function ki(e){if(Oi){var t=wi;if(t){var n=t;if(!Si(e,t)){if(!(t=wn(n.nextSibling))||!Si(e,t))return e.effectTag=-1025&e.effectTag|2,Oi=!1,void(xi=e);Ei(xi,n)}xi=e,wi=wn(t.firstChild)}else e.effectTag=-1025&e.effectTag|2,Oi=!1,xi=e}}function ji(e){for(e=e.return;null!==e&&5!==e.tag&&3!==e.tag&&13!==e.tag;)e=e.return;xi=e}function Ci(e){if(e!==xi)return!1;if(!Oi)return ji(e),Oi=!0,!1;var t=e.type;if(5!==e.tag||"head"!==t&&"body"!==t&&!gn(t,e.memoizedProps))for(t=wi;t;)Ei(e,t),t=wn(t.nextSibling);if(ji(e),13===e.tag){if(!(e=null!==(e=e.memoizedState)?e.dehydrated:null))throw Error(i(317));e:{for(e=e.nextSibling,t=0;e;){if(8===e.nodeType){var n=e.data;if("/$"===n){if(0===t){wi=wn(e.nextSibling);break e}t--}else"$"!==n&&"$!"!==n&&"$?"!==n||t++}e=e.nextSibling}wi=null}}else wi=xi?wn(e.stateNode.nextSibling):null;return!0}function Pi(){wi=xi=null,Oi=!1}var Ti=G.ReactCurrentOwner,Ni=!1;function Ri(e,t,n,r){t.child=null===e?ja(t,null,n,r):ka(t,e.child,n,r)}function Mi(e,t,n,r,o){n=n.render;var a=t.ref;return ra(t,o),r=Ka(e,t,n,r,a,o),null===e||Ni?(t.effectTag|=1,Ri(e,t,r,o),t.child):(t.updateQueue=e.updateQueue,t.effectTag&=-517,e.expirationTime<=o&&(e.expirationTime=0),Ki(e,t,o))}function Di(e,t,n,r,o,a){if(null===e){var i=n.type;return"function"!=typeof i||kc(i)||void 0!==i.defaultProps||null!==n.compare||void 0!==n.defaultProps?((e=Cc(n.type,null,r,null,t.mode,a)).ref=t.ref,e.return=t,t.child=e):(t.tag=15,t.type=i,Ai(e,t,i,r,o,a))}return i=e.child,o<a&&(o=i.memoizedProps,(n=null!==(n=n.compare)?n:Fr)(o,r)&&e.ref===t.ref)?Ki(e,t,a):(t.effectTag|=1,(e=jc(i,r)).ref=t.ref,e.return=t,t.child=e)}function Ai(e,t,n,r,o,a){return null!==e&&Fr(e.memoizedProps,r)&&e.ref===t.ref&&(Ni=!1,o<a)?(t.expirationTime=e.expirationTime,Ki(e,t,a)):Li(e,t,n,r,a)}function Ii(e,t){var n=t.ref;(null===e&&null!==n||null!==e&&e.ref!==n)&&(t.effectTag|=128)}function Li(e,t,n,r,o){var a=vo(n)?mo:fo.current;return a=ho(t,a),ra(t,o),n=Ka(e,t,n,r,a,o),null===e||Ni?(t.effectTag|=1,Ri(e,t,n,o),t.child):(t.updateQueue=e.updateQueue,t.effectTag&=-517,e.expirationTime<=o&&(e.expirationTime=0),Ki(e,t,o))}function _i(e,t,n,r,o){if(vo(n)){var a=!0;xo(t)}else a=!1;if(ra(t,o),null===t.stateNode)null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),ga(t,n,r),xa(t,n,r,o),r=!0;else if(null===e){var i=t.stateNode,l=t.memoizedProps;i.props=l;var c=i.context,u=n.contextType;"object"==typeof u&&null!==u?u=oa(u):u=ho(t,u=vo(n)?mo:fo.current);var s=n.getDerivedStateFromProps,d="function"==typeof s||"function"==typeof i.getSnapshotBeforeUpdate;d||"function"!=typeof i.UNSAFE_componentWillReceiveProps&&"function"!=typeof i.componentWillReceiveProps||(l!==r||c!==u)&&ya(t,i,r,u),aa=!1;var f=t.memoizedState;i.state=f,da(t,r,i,o),c=t.memoizedState,l!==r||f!==c||po.current||aa?("function"==typeof s&&(ha(t,n,s,r),c=t.memoizedState),(l=aa||ba(t,n,l,r,f,c,u))?(d||"function"!=typeof i.UNSAFE_componentWillMount&&"function"!=typeof i.componentWillMount||("function"==typeof i.componentWillMount&&i.componentWillMount(),"function"==typeof i.UNSAFE_componentWillMount&&i.UNSAFE_componentWillMount()),"function"==typeof i.componentDidMount&&(t.effectTag|=4)):("function"==typeof i.componentDidMount&&(t.effectTag|=4),t.memoizedProps=r,t.memoizedState=c),i.props=r,i.state=c,i.context=u,r=l):("function"==typeof i.componentDidMount&&(t.effectTag|=4),r=!1)}else i=t.stateNode,la(e,t),l=t.memoizedProps,i.props=t.type===t.elementType?l:Yo(t.type,l),c=i.context,"object"==typeof(u=n.contextType)&&null!==u?u=oa(u):u=ho(t,u=vo(n)?mo:fo.current),(d="function"==typeof(s=n.getDerivedStateFromProps)||"function"==typeof i.getSnapshotBeforeUpdate)||"function"!=typeof i.UNSAFE_componentWillReceiveProps&&"function"!=typeof i.componentWillReceiveProps||(l!==r||c!==u)&&ya(t,i,r,u),aa=!1,c=t.memoizedState,i.state=c,da(t,r,i,o),f=t.memoizedState,l!==r||c!==f||po.current||aa?("function"==typeof s&&(ha(t,n,s,r),f=t.memoizedState),(s=aa||ba(t,n,l,r,c,f,u))?(d||"function"!=typeof i.UNSAFE_componentWillUpdate&&"function"!=typeof i.componentWillUpdate||("function"==typeof i.componentWillUpdate&&i.componentWillUpdate(r,f,u),"function"==typeof i.UNSAFE_componentWillUpdate&&i.UNSAFE_componentWillUpdate(r,f,u)),"function"==typeof i.componentDidUpdate&&(t.effectTag|=4),"function"==typeof i.getSnapshotBeforeUpdate&&(t.effectTag|=256)):("function"!=typeof i.componentDidUpdate||l===e.memoizedProps&&c===e.memoizedState||(t.effectTag|=4),"function"!=typeof i.getSnapshotBeforeUpdate||l===e.memoizedProps&&c===e.memoizedState||(t.effectTag|=256),t.memoizedProps=r,t.memoizedState=f),i.props=r,i.state=f,i.context=u,r=s):("function"!=typeof i.componentDidUpdate||l===e.memoizedProps&&c===e.memoizedState||(t.effectTag|=4),"function"!=typeof i.getSnapshotBeforeUpdate||l===e.memoizedProps&&c===e.memoizedState||(t.effectTag|=256),r=!1);return zi(e,t,n,r,a,o)}function zi(e,t,n,r,o,a){Ii(e,t);var i=0!=(64&t.effectTag);if(!r&&!i)return o&&wo(t,n,!1),Ki(e,t,a);r=t.stateNode,Ti.current=t;var l=i&&"function"!=typeof n.getDerivedStateFromError?null:r.render();return t.effectTag|=1,null!==e&&i?(t.child=ka(t,e.child,null,a),t.child=ka(t,null,l,a)):Ri(e,t,l,a),t.memoizedState=r.state,o&&wo(t,n,!0),t.child}function Fi(e){var t=e.stateNode;t.pendingContext?go(0,t.pendingContext,t.pendingContext!==t.context):t.context&&go(0,t.context,!1),Ma(e,t.containerInfo)}var Wi,Bi,Hi,Ui={dehydrated:null,retryTime:0};function $i(e,t,n){var r,o=t.mode,a=t.pendingProps,i=La.current,l=!1;if((r=0!=(64&t.effectTag))||(r=0!=(2&i)&&(null===e||null!==e.memoizedState)),r?(l=!0,t.effectTag&=-65):null!==e&&null===e.memoizedState||void 0===a.fallback||!0===a.unstable_avoidThisFallback||(i|=1),uo(La,1&i),null===e){if(void 0!==a.fallback&&ki(t),l){if(l=a.fallback,(a=Pc(null,o,0,null)).return=t,0==(2&t.mode))for(e=null!==t.memoizedState?t.child.child:t.child,a.child=e;null!==e;)e.return=a,e=e.sibling;return(n=Pc(l,o,n,null)).return=t,a.sibling=n,t.memoizedState=Ui,t.child=a,n}return o=a.children,t.memoizedState=null,t.child=ja(t,null,o,n)}if(null!==e.memoizedState){if(o=(e=e.child).sibling,l){if(a=a.fallback,(n=jc(e,e.pendingProps)).return=t,0==(2&t.mode)&&(l=null!==t.memoizedState?t.child.child:t.child)!==e.child)for(n.child=l;null!==l;)l.return=n,l=l.sibling;return(o=jc(o,a)).return=t,n.sibling=o,n.childExpirationTime=0,t.memoizedState=Ui,t.child=n,o}return n=ka(t,e.child,a.children,n),t.memoizedState=null,t.child=n}if(e=e.child,l){if(l=a.fallback,(a=Pc(null,o,0,null)).return=t,a.child=e,null!==e&&(e.return=a),0==(2&t.mode))for(e=null!==t.memoizedState?t.child.child:t.child,a.child=e;null!==e;)e.return=a,e=e.sibling;return(n=Pc(l,o,n,null)).return=t,a.sibling=n,n.effectTag|=2,a.childExpirationTime=0,t.memoizedState=Ui,t.child=a,n}return t.memoizedState=null,t.child=ka(t,e,a.children,n)}function Vi(e,t){e.expirationTime<t&&(e.expirationTime=t);var n=e.alternate;null!==n&&n.expirationTime<t&&(n.expirationTime=t),na(e.return,t)}function qi(e,t,n,r,o,a){var i=e.memoizedState;null===i?e.memoizedState={isBackwards:t,rendering:null,renderingStartTime:0,last:r,tail:n,tailExpiration:0,tailMode:o,lastEffect:a}:(i.isBackwards=t,i.rendering=null,i.renderingStartTime=0,i.last=r,i.tail=n,i.tailExpiration=0,i.tailMode=o,i.lastEffect=a)}function Xi(e,t,n){var r=t.pendingProps,o=r.revealOrder,a=r.tail;if(Ri(e,t,r.children,n),0!=(2&(r=La.current)))r=1&r|2,t.effectTag|=64;else{if(null!==e&&0!=(64&e.effectTag))e:for(e=t.child;null!==e;){if(13===e.tag)null!==e.memoizedState&&Vi(e,n);else if(19===e.tag)Vi(e,n);else if(null!==e.child){e.child.return=e,e=e.child;continue}if(e===t)break e;for(;null===e.sibling;){if(null===e.return||e.return===t)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}r&=1}if(uo(La,r),0==(2&t.mode))t.memoizedState=null;else switch(o){case"forwards":for(n=t.child,o=null;null!==n;)null!==(e=n.alternate)&&null===_a(e)&&(o=n),n=n.sibling;null===(n=o)?(o=t.child,t.child=null):(o=n.sibling,n.sibling=null),qi(t,!1,o,n,a,t.lastEffect);break;case"backwards":for(n=null,o=t.child,t.child=null;null!==o;){if(null!==(e=o.alternate)&&null===_a(e)){t.child=o;break}e=o.sibling,o.sibling=n,n=o,o=e}qi(t,!0,n,null,a,t.lastEffect);break;case"together":qi(t,!1,null,null,void 0,t.lastEffect);break;default:t.memoizedState=null}return t.child}function Ki(e,t,n){null!==e&&(t.dependencies=e.dependencies);var r=t.expirationTime;if(0!==r&&ic(r),t.childExpirationTime<n)return null;if(null!==e&&t.child!==e.child)throw Error(i(153));if(null!==t.child){for(n=jc(e=t.child,e.pendingProps),t.child=n,n.return=t;null!==e.sibling;)e=e.sibling,(n=n.sibling=jc(e,e.pendingProps)).return=t;n.sibling=null}return t.child}function Yi(e,t){switch(e.tailMode){case"hidden":t=e.tail;for(var n=null;null!==t;)null!==t.alternate&&(n=t),t=t.sibling;null===n?e.tail=null:n.sibling=null;break;case"collapsed":n=e.tail;for(var r=null;null!==n;)null!==n.alternate&&(r=n),n=n.sibling;null===r?t||null===e.tail?e.tail=null:e.tail.sibling=null:r.sibling=null}}function Gi(e,t,n){var r=t.pendingProps;switch(t.tag){case 2:case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:return null;case 1:return vo(t.type)&&bo(),null;case 3:return Da(),co(po),co(fo),(n=t.stateNode).pendingContext&&(n.context=n.pendingContext,n.pendingContext=null),null!==e&&null!==e.child||!Ci(t)||(t.effectTag|=4),null;case 5:Ia(t),n=Ra(Na.current);var a=t.type;if(null!==e&&null!=t.stateNode)Bi(e,t,a,r,n),e.ref!==t.ref&&(t.effectTag|=128);else{if(!r){if(null===t.stateNode)throw Error(i(166));return null}if(e=Ra(Pa.current),Ci(t)){r=t.stateNode,a=t.type;var l=t.memoizedProps;switch(r[Sn]=t,r[kn]=l,a){case"iframe":case"object":case"embed":Xt("load",r);break;case"video":case"audio":for(e=0;e<Ge.length;e++)Xt(Ge[e],r);break;case"source":Xt("error",r);break;case"img":case"image":case"link":Xt("error",r),Xt("load",r);break;case"form":Xt("reset",r),Xt("submit",r);break;case"details":Xt("toggle",r);break;case"input":Ee(r,l),Xt("invalid",r),cn(n,"onChange");break;case"select":r._wrapperState={wasMultiple:!!l.multiple},Xt("invalid",r),cn(n,"onChange");break;case"textarea":Re(r,l),Xt("invalid",r),cn(n,"onChange")}for(var c in on(a,l),e=null,l)if(l.hasOwnProperty(c)){var u=l[c];"children"===c?"string"==typeof u?r.textContent!==u&&(e=["children",u]):"number"==typeof u&&r.textContent!==""+u&&(e=["children",""+u]):S.hasOwnProperty(c)&&null!=u&&cn(n,c)}switch(a){case"input":xe(r),je(r,l,!0);break;case"textarea":xe(r),De(r);break;case"select":case"option":break;default:"function"==typeof l.onClick&&(r.onclick=un)}n=e,t.updateQueue=n,null!==n&&(t.effectTag|=4)}else{switch(c=9===n.nodeType?n:n.ownerDocument,e===ln&&(e=Le(a)),e===ln?"script"===a?((e=c.createElement("div")).innerHTML="<script><\/script>",e=e.removeChild(e.firstChild)):"string"==typeof r.is?e=c.createElement(a,{is:r.is}):(e=c.createElement(a),"select"===a&&(c=e,r.multiple?c.multiple=!0:r.size&&(c.size=r.size))):e=c.createElementNS(e,a),e[Sn]=t,e[kn]=r,Wi(e,t),t.stateNode=e,c=an(a,r),a){case"iframe":case"object":case"embed":Xt("load",e),u=r;break;case"video":case"audio":for(u=0;u<Ge.length;u++)Xt(Ge[u],e);u=r;break;case"source":Xt("error",e),u=r;break;case"img":case"image":case"link":Xt("error",e),Xt("load",e),u=r;break;case"form":Xt("reset",e),Xt("submit",e),u=r;break;case"details":Xt("toggle",e),u=r;break;case"input":Ee(e,r),u=Oe(e,r),Xt("invalid",e),cn(n,"onChange");break;case"option":u=Pe(e,r);break;case"select":e._wrapperState={wasMultiple:!!r.multiple},u=o({},r,{value:void 0}),Xt("invalid",e),cn(n,"onChange");break;case"textarea":Re(e,r),u=Ne(e,r),Xt("invalid",e),cn(n,"onChange");break;default:u=r}on(a,u);var s=u;for(l in s)if(s.hasOwnProperty(l)){var d=s[l];"style"===l?nn(e,d):"dangerouslySetInnerHTML"===l?null!=(d=d?d.__html:void 0)&&Fe(e,d):"children"===l?"string"==typeof d?("textarea"!==a||""!==d)&&We(e,d):"number"==typeof d&&We(e,""+d):"suppressContentEditableWarning"!==l&&"suppressHydrationWarning"!==l&&"autoFocus"!==l&&(S.hasOwnProperty(l)?null!=d&&cn(n,l):null!=d&&Q(e,l,d,c))}switch(a){case"input":xe(e),je(e,r,!1);break;case"textarea":xe(e),De(e);break;case"option":null!=r.value&&e.setAttribute("value",""+ge(r.value));break;case"select":e.multiple=!!r.multiple,null!=(n=r.value)?Te(e,!!r.multiple,n,!1):null!=r.defaultValue&&Te(e,!!r.multiple,r.defaultValue,!0);break;default:"function"==typeof u.onClick&&(e.onclick=un)}bn(a,r)&&(t.effectTag|=4)}null!==t.ref&&(t.effectTag|=128)}return null;case 6:if(e&&null!=t.stateNode)Hi(0,t,e.memoizedProps,r);else{if("string"!=typeof r&&null===t.stateNode)throw Error(i(166));n=Ra(Na.current),Ra(Pa.current),Ci(t)?(n=t.stateNode,r=t.memoizedProps,n[Sn]=t,n.nodeValue!==r&&(t.effectTag|=4)):((n=(9===n.nodeType?n:n.ownerDocument).createTextNode(r))[Sn]=t,t.stateNode=n)}return null;case 13:return co(La),r=t.memoizedState,0!=(64&t.effectTag)?(t.expirationTime=n,t):(n=null!==r,r=!1,null===e?void 0!==t.memoizedProps.fallback&&Ci(t):(r=null!==(a=e.memoizedState),n||null===a||null!==(a=e.child.sibling)&&(null!==(l=t.firstEffect)?(t.firstEffect=a,a.nextEffect=l):(t.firstEffect=t.lastEffect=a,a.nextEffect=null),a.effectTag=8)),n&&!r&&0!=(2&t.mode)&&(null===e&&!0!==t.memoizedProps.unstable_avoidThisFallback||0!=(1&La.current)?Cl===xl&&(Cl=wl):(Cl!==xl&&Cl!==wl||(Cl=Ol),0!==Ml&&null!==Sl&&(Dc(Sl,jl),Ac(Sl,Ml)))),(n||r)&&(t.effectTag|=4),null);case 4:return Da(),null;case 10:return ta(t),null;case 17:return vo(t.type)&&bo(),null;case 19:if(co(La),null===(r=t.memoizedState))return null;if(a=0!=(64&t.effectTag),null===(l=r.rendering)){if(a)Yi(r,!1);else if(Cl!==xl||null!==e&&0!=(64&e.effectTag))for(l=t.child;null!==l;){if(null!==(e=_a(l))){for(t.effectTag|=64,Yi(r,!1),null!==(a=e.updateQueue)&&(t.updateQueue=a,t.effectTag|=4),null===r.lastEffect&&(t.firstEffect=null),t.lastEffect=r.lastEffect,r=t.child;null!==r;)l=n,(a=r).effectTag&=2,a.nextEffect=null,a.firstEffect=null,a.lastEffect=null,null===(e=a.alternate)?(a.childExpirationTime=0,a.expirationTime=l,a.child=null,a.memoizedProps=null,a.memoizedState=null,a.updateQueue=null,a.dependencies=null):(a.childExpirationTime=e.childExpirationTime,a.expirationTime=e.expirationTime,a.child=e.child,a.memoizedProps=e.memoizedProps,a.memoizedState=e.memoizedState,a.updateQueue=e.updateQueue,l=e.dependencies,a.dependencies=null===l?null:{expirationTime:l.expirationTime,firstContext:l.firstContext,responders:l.responders}),r=r.sibling;return uo(La,1&La.current|2),t.child}l=l.sibling}}else{if(!a)if(null!==(e=_a(l))){if(t.effectTag|=64,a=!0,null!==(n=e.updateQueue)&&(t.updateQueue=n,t.effectTag|=4),Yi(r,!0),null===r.tail&&"hidden"===r.tailMode&&!l.alternate)return null!==(t=t.lastEffect=r.lastEffect)&&(t.nextEffect=null),null}else 2*Wo()-r.renderingStartTime>r.tailExpiration&&1<n&&(t.effectTag|=64,a=!0,Yi(r,!1),t.expirationTime=t.childExpirationTime=n-1);r.isBackwards?(l.sibling=t.child,t.child=l):(null!==(n=r.last)?n.sibling=l:t.child=l,r.last=l)}return null!==r.tail?(0===r.tailExpiration&&(r.tailExpiration=Wo()+500),n=r.tail,r.rendering=n,r.tail=n.sibling,r.lastEffect=t.lastEffect,r.renderingStartTime=Wo(),n.sibling=null,t=La.current,uo(La,a?1&t|2:1&t),n):null}throw Error(i(156,t.tag))}function Qi(e){switch(e.tag){case 1:vo(e.type)&&bo();var t=e.effectTag;return 4096&t?(e.effectTag=-4097&t|64,e):null;case 3:if(Da(),co(po),co(fo),0!=(64&(t=e.effectTag)))throw Error(i(285));return e.effectTag=-4097&t|64,e;case 5:return Ia(e),null;case 13:return co(La),4096&(t=e.effectTag)?(e.effectTag=-4097&t|64,e):null;case 19:return co(La),null;case 4:return Da(),null;case 10:return ta(e),null;default:return null}}function Ji(e,t){return{value:e,source:t,stack:be(t)}}Wi=function(e,t){for(var n=t.child;null!==n;){if(5===n.tag||6===n.tag)e.appendChild(n.stateNode);else if(4!==n.tag&&null!==n.child){n.child.return=n,n=n.child;continue}if(n===t)break;for(;null===n.sibling;){if(null===n.return||n.return===t)return;n=n.return}n.sibling.return=n.return,n=n.sibling}},Bi=function(e,t,n,r,a){var i=e.memoizedProps;if(i!==r){var l,c,u=t.stateNode;switch(Ra(Pa.current),e=null,n){case"input":i=Oe(u,i),r=Oe(u,r),e=[];break;case"option":i=Pe(u,i),r=Pe(u,r),e=[];break;case"select":i=o({},i,{value:void 0}),r=o({},r,{value:void 0}),e=[];break;case"textarea":i=Ne(u,i),r=Ne(u,r),e=[];break;default:"function"!=typeof i.onClick&&"function"==typeof r.onClick&&(u.onclick=un)}for(l in on(n,r),n=null,i)if(!r.hasOwnProperty(l)&&i.hasOwnProperty(l)&&null!=i[l])if("style"===l)for(c in u=i[l])u.hasOwnProperty(c)&&(n||(n={}),n[c]="");else"dangerouslySetInnerHTML"!==l&&"children"!==l&&"suppressContentEditableWarning"!==l&&"suppressHydrationWarning"!==l&&"autoFocus"!==l&&(S.hasOwnProperty(l)?e||(e=[]):(e=e||[]).push(l,null));for(l in r){var s=r[l];if(u=null!=i?i[l]:void 0,r.hasOwnProperty(l)&&s!==u&&(null!=s||null!=u))if("style"===l)if(u){for(c in u)!u.hasOwnProperty(c)||s&&s.hasOwnProperty(c)||(n||(n={}),n[c]="");for(c in s)s.hasOwnProperty(c)&&u[c]!==s[c]&&(n||(n={}),n[c]=s[c])}else n||(e||(e=[]),e.push(l,n)),n=s;else"dangerouslySetInnerHTML"===l?(s=s?s.__html:void 0,u=u?u.__html:void 0,null!=s&&u!==s&&(e=e||[]).push(l,s)):"children"===l?u===s||"string"!=typeof s&&"number"!=typeof s||(e=e||[]).push(l,""+s):"suppressContentEditableWarning"!==l&&"suppressHydrationWarning"!==l&&(S.hasOwnProperty(l)?(null!=s&&cn(a,l),e||u===s||(e=[])):(e=e||[]).push(l,s))}n&&(e=e||[]).push("style",n),a=e,(t.updateQueue=a)&&(t.effectTag|=4)}},Hi=function(e,t,n,r){n!==r&&(t.effectTag|=4)};var Zi="function"==typeof WeakSet?WeakSet:Set;function el(e,t){var n=t.source,r=t.stack;null===r&&null!==n&&(r=be(n)),null!==n&&ve(n.type),t=t.value,null!==e&&1===e.tag&&ve(e.type);try{console.error(t)}catch(e){setTimeout((function(){throw e}))}}function tl(e){var t=e.ref;if(null!==t)if("function"==typeof t)try{t(null)}catch(t){gc(e,t)}else t.current=null}function nl(e,t){switch(t.tag){case 0:case 11:case 15:case 22:return;case 1:if(256&t.effectTag&&null!==e){var n=e.memoizedProps,r=e.memoizedState;t=(e=t.stateNode).getSnapshotBeforeUpdate(t.elementType===t.type?n:Yo(t.type,n),r),e.__reactInternalSnapshotBeforeUpdate=t}return;case 3:case 5:case 6:case 4:case 17:return}throw Error(i(163))}function rl(e,t){if(null!==(t=null!==(t=t.updateQueue)?t.lastEffect:null)){var n=t=t.next;do{if((n.tag&e)===e){var r=n.destroy;n.destroy=void 0,void 0!==r&&r()}n=n.next}while(n!==t)}}function ol(e,t){if(null!==(t=null!==(t=t.updateQueue)?t.lastEffect:null)){var n=t=t.next;do{if((n.tag&e)===e){var r=n.create;n.destroy=r()}n=n.next}while(n!==t)}}function al(e,t,n){switch(n.tag){case 0:case 11:case 15:case 22:return void ol(3,n);case 1:if(e=n.stateNode,4&n.effectTag)if(null===t)e.componentDidMount();else{var r=n.elementType===n.type?t.memoizedProps:Yo(n.type,t.memoizedProps);e.componentDidUpdate(r,t.memoizedState,e.__reactInternalSnapshotBeforeUpdate)}return void(null!==(t=n.updateQueue)&&fa(n,t,e));case 3:if(null!==(t=n.updateQueue)){if(e=null,null!==n.child)switch(n.child.tag){case 5:e=n.child.stateNode;break;case 1:e=n.child.stateNode}fa(n,t,e)}return;case 5:return e=n.stateNode,void(null===t&&4&n.effectTag&&bn(n.type,n.memoizedProps)&&e.focus());case 6:case 4:case 12:return;case 13:return void(null===n.memoizedState&&(n=n.alternate,null!==n&&(n=n.memoizedState,null!==n&&(n=n.dehydrated,null!==n&&Lt(n)))));case 19:case 17:case 20:case 21:return}throw Error(i(163))}function il(e,t,n){switch("function"==typeof Oc&&Oc(t),t.tag){case 0:case 11:case 14:case 15:case 22:if(null!==(e=t.updateQueue)&&null!==(e=e.lastEffect)){var r=e.next;Uo(97<n?97:n,(function(){var e=r;do{var n=e.destroy;if(void 0!==n){var o=t;try{n()}catch(e){gc(o,e)}}e=e.next}while(e!==r)}))}break;case 1:tl(t),"function"==typeof(n=t.stateNode).componentWillUnmount&&function(e,t){try{t.props=e.memoizedProps,t.state=e.memoizedState,t.componentWillUnmount()}catch(t){gc(e,t)}}(t,n);break;case 5:tl(t);break;case 4:sl(e,t,n)}}function ll(e){var t=e.alternate;e.return=null,e.child=null,e.memoizedState=null,e.updateQueue=null,e.dependencies=null,e.alternate=null,e.firstEffect=null,e.lastEffect=null,e.pendingProps=null,e.memoizedProps=null,e.stateNode=null,null!==t&&ll(t)}function cl(e){return 5===e.tag||3===e.tag||4===e.tag}function ul(e){e:{for(var t=e.return;null!==t;){if(cl(t)){var n=t;break e}t=t.return}throw Error(i(160))}switch(t=n.stateNode,n.tag){case 5:var r=!1;break;case 3:case 4:t=t.containerInfo,r=!0;break;default:throw Error(i(161))}16&n.effectTag&&(We(t,""),n.effectTag&=-17);e:t:for(n=e;;){for(;null===n.sibling;){if(null===n.return||cl(n.return)){n=null;break e}n=n.return}for(n.sibling.return=n.return,n=n.sibling;5!==n.tag&&6!==n.tag&&18!==n.tag;){if(2&n.effectTag)continue t;if(null===n.child||4===n.tag)continue t;n.child.return=n,n=n.child}if(!(2&n.effectTag)){n=n.stateNode;break e}}r?function e(t,n,r){var o=t.tag,a=5===o||6===o;if(a)t=a?t.stateNode:t.stateNode.instance,n?8===r.nodeType?r.parentNode.insertBefore(t,n):r.insertBefore(t,n):(8===r.nodeType?(n=r.parentNode).insertBefore(t,r):(n=r).appendChild(t),null!==(r=r._reactRootContainer)&&void 0!==r||null!==n.onclick||(n.onclick=un));else if(4!==o&&null!==(t=t.child))for(e(t,n,r),t=t.sibling;null!==t;)e(t,n,r),t=t.sibling}(e,n,t):function e(t,n,r){var o=t.tag,a=5===o||6===o;if(a)t=a?t.stateNode:t.stateNode.instance,n?r.insertBefore(t,n):r.appendChild(t);else if(4!==o&&null!==(t=t.child))for(e(t,n,r),t=t.sibling;null!==t;)e(t,n,r),t=t.sibling}(e,n,t)}function sl(e,t,n){for(var r,o,a=t,l=!1;;){if(!l){l=a.return;e:for(;;){if(null===l)throw Error(i(160));switch(r=l.stateNode,l.tag){case 5:o=!1;break e;case 3:case 4:r=r.containerInfo,o=!0;break e}l=l.return}l=!0}if(5===a.tag||6===a.tag){e:for(var c=e,u=a,s=n,d=u;;)if(il(c,d,s),null!==d.child&&4!==d.tag)d.child.return=d,d=d.child;else{if(d===u)break e;for(;null===d.sibling;){if(null===d.return||d.return===u)break e;d=d.return}d.sibling.return=d.return,d=d.sibling}o?(c=r,u=a.stateNode,8===c.nodeType?c.parentNode.removeChild(u):c.removeChild(u)):r.removeChild(a.stateNode)}else if(4===a.tag){if(null!==a.child){r=a.stateNode.containerInfo,o=!0,a.child.return=a,a=a.child;continue}}else if(il(e,a,n),null!==a.child){a.child.return=a,a=a.child;continue}if(a===t)break;for(;null===a.sibling;){if(null===a.return||a.return===t)return;4===(a=a.return).tag&&(l=!1)}a.sibling.return=a.return,a=a.sibling}}function dl(e,t){switch(t.tag){case 0:case 11:case 14:case 15:case 22:return void rl(3,t);case 1:return;case 5:var n=t.stateNode;if(null!=n){var r=t.memoizedProps,o=null!==e?e.memoizedProps:r;e=t.type;var a=t.updateQueue;if(t.updateQueue=null,null!==a){for(n[kn]=r,"input"===e&&"radio"===r.type&&null!=r.name&&Se(n,r),an(e,o),t=an(e,r),o=0;o<a.length;o+=2){var l=a[o],c=a[o+1];"style"===l?nn(n,c):"dangerouslySetInnerHTML"===l?Fe(n,c):"children"===l?We(n,c):Q(n,l,c,t)}switch(e){case"input":ke(n,r);break;case"textarea":Me(n,r);break;case"select":t=n._wrapperState.wasMultiple,n._wrapperState.wasMultiple=!!r.multiple,null!=(e=r.value)?Te(n,!!r.multiple,e,!1):t!==!!r.multiple&&(null!=r.defaultValue?Te(n,!!r.multiple,r.defaultValue,!0):Te(n,!!r.multiple,r.multiple?[]:"",!1))}}}return;case 6:if(null===t.stateNode)throw Error(i(162));return void(t.stateNode.nodeValue=t.memoizedProps);case 3:return void((t=t.stateNode).hydrate&&(t.hydrate=!1,Lt(t.containerInfo)));case 12:return;case 13:if(n=t,null===t.memoizedState?r=!1:(r=!0,n=t.child,Al=Wo()),null!==n)e:for(e=n;;){if(5===e.tag)a=e.stateNode,r?"function"==typeof(a=a.style).setProperty?a.setProperty("display","none","important"):a.display="none":(a=e.stateNode,o=null!=(o=e.memoizedProps.style)&&o.hasOwnProperty("display")?o.display:null,a.style.display=tn("display",o));else if(6===e.tag)e.stateNode.nodeValue=r?"":e.memoizedProps;else{if(13===e.tag&&null!==e.memoizedState&&null===e.memoizedState.dehydrated){(a=e.child.sibling).return=e,e=a;continue}if(null!==e.child){e.child.return=e,e=e.child;continue}}if(e===n)break;for(;null===e.sibling;){if(null===e.return||e.return===n)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}return void fl(t);case 19:return void fl(t);case 17:return}throw Error(i(163))}function fl(e){var t=e.updateQueue;if(null!==t){e.updateQueue=null;var n=e.stateNode;null===n&&(n=e.stateNode=new Zi),t.forEach((function(t){var r=xc.bind(null,e,t);n.has(t)||(n.add(t),t.then(r,r))}))}}var pl="function"==typeof WeakMap?WeakMap:Map;function ml(e,t,n){(n=ca(n,null)).tag=3,n.payload={element:null};var r=t.value;return n.callback=function(){Ll||(Ll=!0,_l=r),el(e,t)},n}function hl(e,t,n){(n=ca(n,null)).tag=3;var r=e.type.getDerivedStateFromError;if("function"==typeof r){var o=t.value;n.payload=function(){return el(e,t),r(o)}}var a=e.stateNode;return null!==a&&"function"==typeof a.componentDidCatch&&(n.callback=function(){"function"!=typeof r&&(null===zl?zl=new Set([this]):zl.add(this),el(e,t));var n=t.stack;this.componentDidCatch(t.value,{componentStack:null!==n?n:""})}),n}var vl,bl=Math.ceil,gl=G.ReactCurrentDispatcher,yl=G.ReactCurrentOwner,xl=0,wl=3,Ol=4,El=0,Sl=null,kl=null,jl=0,Cl=xl,Pl=null,Tl=1073741823,Nl=1073741823,Rl=null,Ml=0,Dl=!1,Al=0,Il=null,Ll=!1,_l=null,zl=null,Fl=!1,Wl=null,Bl=90,Hl=null,Ul=0,$l=null,Vl=0;function ql(){return 0!=(48&El)?1073741821-(Wo()/10|0):0!==Vl?Vl:Vl=1073741821-(Wo()/10|0)}function Xl(e,t,n){if(0==(2&(t=t.mode)))return 1073741823;var r=Bo();if(0==(4&t))return 99===r?1073741823:1073741822;if(0!=(16&El))return jl;if(null!==n)e=Ko(e,0|n.timeoutMs||5e3,250);else switch(r){case 99:e=1073741823;break;case 98:e=Ko(e,150,100);break;case 97:case 96:e=Ko(e,5e3,250);break;case 95:e=2;break;default:throw Error(i(326))}return null!==Sl&&e===jl&&--e,e}function Kl(e,t){if(50<Ul)throw Ul=0,$l=null,Error(i(185));if(null!==(e=Yl(e,t))){var n=Bo();1073741823===t?0!=(8&El)&&0==(48&El)?Zl(e):(Ql(e),0===El&&qo()):Ql(e),0==(4&El)||98!==n&&99!==n||(null===Hl?Hl=new Map([[e,t]]):(void 0===(n=Hl.get(e))||n>t)&&Hl.set(e,t))}}function Yl(e,t){e.expirationTime<t&&(e.expirationTime=t);var n=e.alternate;null!==n&&n.expirationTime<t&&(n.expirationTime=t);var r=e.return,o=null;if(null===r&&3===e.tag)o=e.stateNode;else for(;null!==r;){if(n=r.alternate,r.childExpirationTime<t&&(r.childExpirationTime=t),null!==n&&n.childExpirationTime<t&&(n.childExpirationTime=t),null===r.return&&3===r.tag){o=r.stateNode;break}r=r.return}return null!==o&&(Sl===o&&(ic(t),Cl===Ol&&Dc(o,jl)),Ac(o,t)),o}function Gl(e){var t=e.lastExpiredTime;if(0!==t)return t;if(!Mc(e,t=e.firstPendingTime))return t;var n=e.lastPingedTime;return 2>=(e=n>(e=e.nextKnownPendingLevel)?n:e)&&t!==e?0:e}function Ql(e){if(0!==e.lastExpiredTime)e.callbackExpirationTime=1073741823,e.callbackPriority=99,e.callbackNode=Vo(Zl.bind(null,e));else{var t=Gl(e),n=e.callbackNode;if(0===t)null!==n&&(e.callbackNode=null,e.callbackExpirationTime=0,e.callbackPriority=90);else{var r=ql();if(1073741823===t?r=99:1===t||2===t?r=95:r=0>=(r=10*(1073741821-t)-10*(1073741821-r))?99:250>=r?98:5250>=r?97:95,null!==n){var o=e.callbackPriority;if(e.callbackExpirationTime===t&&o>=r)return;n!==Do&&So(n)}e.callbackExpirationTime=t,e.callbackPriority=r,t=1073741823===t?Vo(Zl.bind(null,e)):$o(r,Jl.bind(null,e),{timeout:10*(1073741821-t)-Wo()}),e.callbackNode=t}}}function Jl(e,t){if(Vl=0,t)return Ic(e,t=ql()),Ql(e),null;var n=Gl(e);if(0!==n){if(t=e.callbackNode,0!=(48&El))throw Error(i(327));if(hc(),e===Sl&&n===jl||nc(e,n),null!==kl){var r=El;El|=16;for(var o=oc();;)try{cc();break}catch(t){rc(e,t)}if(ea(),El=r,gl.current=o,1===Cl)throw t=Pl,nc(e,n),Dc(e,n),Ql(e),t;if(null===kl)switch(o=e.finishedWork=e.current.alternate,e.finishedExpirationTime=n,r=Cl,Sl=null,r){case xl:case 1:throw Error(i(345));case 2:Ic(e,2<n?2:n);break;case wl:if(Dc(e,n),n===(r=e.lastSuspendedTime)&&(e.nextKnownPendingLevel=dc(o)),1073741823===Tl&&10<(o=Al+500-Wo())){if(Dl){var a=e.lastPingedTime;if(0===a||a>=n){e.lastPingedTime=n,nc(e,n);break}}if(0!==(a=Gl(e))&&a!==n)break;if(0!==r&&r!==n){e.lastPingedTime=r;break}e.timeoutHandle=yn(fc.bind(null,e),o);break}fc(e);break;case Ol:if(Dc(e,n),n===(r=e.lastSuspendedTime)&&(e.nextKnownPendingLevel=dc(o)),Dl&&(0===(o=e.lastPingedTime)||o>=n)){e.lastPingedTime=n,nc(e,n);break}if(0!==(o=Gl(e))&&o!==n)break;if(0!==r&&r!==n){e.lastPingedTime=r;break}if(1073741823!==Nl?r=10*(1073741821-Nl)-Wo():1073741823===Tl?r=0:(r=10*(1073741821-Tl)-5e3,0>(r=(o=Wo())-r)&&(r=0),(n=10*(1073741821-n)-o)<(r=(120>r?120:480>r?480:1080>r?1080:1920>r?1920:3e3>r?3e3:4320>r?4320:1960*bl(r/1960))-r)&&(r=n)),10<r){e.timeoutHandle=yn(fc.bind(null,e),r);break}fc(e);break;case 5:if(1073741823!==Tl&&null!==Rl){a=Tl;var l=Rl;if(0>=(r=0|l.busyMinDurationMs)?r=0:(o=0|l.busyDelayMs,r=(a=Wo()-(10*(1073741821-a)-(0|l.timeoutMs||5e3)))<=o?0:o+r-a),10<r){Dc(e,n),e.timeoutHandle=yn(fc.bind(null,e),r);break}}fc(e);break;default:throw Error(i(329))}if(Ql(e),e.callbackNode===t)return Jl.bind(null,e)}}return null}function Zl(e){var t=e.lastExpiredTime;if(t=0!==t?t:1073741823,0!=(48&El))throw Error(i(327));if(hc(),e===Sl&&t===jl||nc(e,t),null!==kl){var n=El;El|=16;for(var r=oc();;)try{lc();break}catch(t){rc(e,t)}if(ea(),El=n,gl.current=r,1===Cl)throw n=Pl,nc(e,t),Dc(e,t),Ql(e),n;if(null!==kl)throw Error(i(261));e.finishedWork=e.current.alternate,e.finishedExpirationTime=t,Sl=null,fc(e),Ql(e)}return null}function ec(e,t){var n=El;El|=1;try{return e(t)}finally{0===(El=n)&&qo()}}function tc(e,t){var n=El;El&=-2,El|=8;try{return e(t)}finally{0===(El=n)&&qo()}}function nc(e,t){e.finishedWork=null,e.finishedExpirationTime=0;var n=e.timeoutHandle;if(-1!==n&&(e.timeoutHandle=-1,xn(n)),null!==kl)for(n=kl.return;null!==n;){var r=n;switch(r.tag){case 1:null!=(r=r.type.childContextTypes)&&bo();break;case 3:Da(),co(po),co(fo);break;case 5:Ia(r);break;case 4:Da();break;case 13:case 19:co(La);break;case 10:ta(r)}n=n.return}Sl=e,kl=jc(e.current,null),jl=t,Cl=xl,Pl=null,Nl=Tl=1073741823,Rl=null,Ml=0,Dl=!1}function rc(e,t){for(;;){try{if(ea(),Fa.current=vi,Va)for(var n=Ha.memoizedState;null!==n;){var r=n.queue;null!==r&&(r.pending=null),n=n.next}if(Ba=0,$a=Ua=Ha=null,Va=!1,null===kl||null===kl.return)return Cl=1,Pl=t,kl=null;e:{var o=e,a=kl.return,i=kl,l=t;if(t=jl,i.effectTag|=2048,i.firstEffect=i.lastEffect=null,null!==l&&"object"==typeof l&&"function"==typeof l.then){var c=l;if(0==(2&i.mode)){var u=i.alternate;u?(i.updateQueue=u.updateQueue,i.memoizedState=u.memoizedState,i.expirationTime=u.expirationTime):(i.updateQueue=null,i.memoizedState=null)}var s=0!=(1&La.current),d=a;do{var f;if(f=13===d.tag){var p=d.memoizedState;if(null!==p)f=null!==p.dehydrated;else{var m=d.memoizedProps;f=void 0!==m.fallback&&(!0!==m.unstable_avoidThisFallback||!s)}}if(f){var h=d.updateQueue;if(null===h){var v=new Set;v.add(c),d.updateQueue=v}else h.add(c);if(0==(2&d.mode)){if(d.effectTag|=64,i.effectTag&=-2981,1===i.tag)if(null===i.alternate)i.tag=17;else{var b=ca(1073741823,null);b.tag=2,ua(i,b)}i.expirationTime=1073741823;break e}l=void 0,i=t;var g=o.pingCache;if(null===g?(g=o.pingCache=new pl,l=new Set,g.set(c,l)):void 0===(l=g.get(c))&&(l=new Set,g.set(c,l)),!l.has(i)){l.add(i);var y=yc.bind(null,o,c,i);c.then(y,y)}d.effectTag|=4096,d.expirationTime=t;break e}d=d.return}while(null!==d);l=Error((ve(i.type)||"A React component")+" suspended while rendering, but no fallback UI was specified.\n\nAdd a <Suspense fallback=...> component higher in the tree to provide a loading indicator or placeholder to display."+be(i))}5!==Cl&&(Cl=2),l=Ji(l,i),d=a;do{switch(d.tag){case 3:c=l,d.effectTag|=4096,d.expirationTime=t,sa(d,ml(d,c,t));break e;case 1:c=l;var x=d.type,w=d.stateNode;if(0==(64&d.effectTag)&&("function"==typeof x.getDerivedStateFromError||null!==w&&"function"==typeof w.componentDidCatch&&(null===zl||!zl.has(w)))){d.effectTag|=4096,d.expirationTime=t,sa(d,hl(d,c,t));break e}}d=d.return}while(null!==d)}kl=sc(kl)}catch(e){t=e;continue}break}}function oc(){var e=gl.current;return gl.current=vi,null===e?vi:e}function ac(e,t){e<Tl&&2<e&&(Tl=e),null!==t&&e<Nl&&2<e&&(Nl=e,Rl=t)}function ic(e){e>Ml&&(Ml=e)}function lc(){for(;null!==kl;)kl=uc(kl)}function cc(){for(;null!==kl&&!Ao();)kl=uc(kl)}function uc(e){var t=vl(e.alternate,e,jl);return e.memoizedProps=e.pendingProps,null===t&&(t=sc(e)),yl.current=null,t}function sc(e){kl=e;do{var t=kl.alternate;if(e=kl.return,0==(2048&kl.effectTag)){if(t=Gi(t,kl,jl),1===jl||1!==kl.childExpirationTime){for(var n=0,r=kl.child;null!==r;){var o=r.expirationTime,a=r.childExpirationTime;o>n&&(n=o),a>n&&(n=a),r=r.sibling}kl.childExpirationTime=n}if(null!==t)return t;null!==e&&0==(2048&e.effectTag)&&(null===e.firstEffect&&(e.firstEffect=kl.firstEffect),null!==kl.lastEffect&&(null!==e.lastEffect&&(e.lastEffect.nextEffect=kl.firstEffect),e.lastEffect=kl.lastEffect),1<kl.effectTag&&(null!==e.lastEffect?e.lastEffect.nextEffect=kl:e.firstEffect=kl,e.lastEffect=kl))}else{if(null!==(t=Qi(kl)))return t.effectTag&=2047,t;null!==e&&(e.firstEffect=e.lastEffect=null,e.effectTag|=2048)}if(null!==(t=kl.sibling))return t;kl=e}while(null!==kl);return Cl===xl&&(Cl=5),null}function dc(e){var t=e.expirationTime;return t>(e=e.childExpirationTime)?t:e}function fc(e){var t=Bo();return Uo(99,pc.bind(null,e,t)),null}function pc(e,t){do{hc()}while(null!==Wl);if(0!=(48&El))throw Error(i(327));var n=e.finishedWork,r=e.finishedExpirationTime;if(null===n)return null;if(e.finishedWork=null,e.finishedExpirationTime=0,n===e.current)throw Error(i(177));e.callbackNode=null,e.callbackExpirationTime=0,e.callbackPriority=90,e.nextKnownPendingLevel=0;var o=dc(n);if(e.firstPendingTime=o,r<=e.lastSuspendedTime?e.firstSuspendedTime=e.lastSuspendedTime=e.nextKnownPendingLevel=0:r<=e.firstSuspendedTime&&(e.firstSuspendedTime=r-1),r<=e.lastPingedTime&&(e.lastPingedTime=0),r<=e.lastExpiredTime&&(e.lastExpiredTime=0),e===Sl&&(kl=Sl=null,jl=0),1<n.effectTag?null!==n.lastEffect?(n.lastEffect.nextEffect=n,o=n.firstEffect):o=n:o=n.firstEffect,null!==o){var a=El;El|=32,yl.current=null,hn=qt;var l=pn();if(mn(l)){if("selectionStart"in l)var c={start:l.selectionStart,end:l.selectionEnd};else e:{var u=(c=(c=l.ownerDocument)&&c.defaultView||window).getSelection&&c.getSelection();if(u&&0!==u.rangeCount){c=u.anchorNode;var s=u.anchorOffset,d=u.focusNode;u=u.focusOffset;try{c.nodeType,d.nodeType}catch(e){c=null;break e}var f=0,p=-1,m=-1,h=0,v=0,b=l,g=null;t:for(;;){for(var y;b!==c||0!==s&&3!==b.nodeType||(p=f+s),b!==d||0!==u&&3!==b.nodeType||(m=f+u),3===b.nodeType&&(f+=b.nodeValue.length),null!==(y=b.firstChild);)g=b,b=y;for(;;){if(b===l)break t;if(g===c&&++h===s&&(p=f),g===d&&++v===u&&(m=f),null!==(y=b.nextSibling))break;g=(b=g).parentNode}b=y}c=-1===p||-1===m?null:{start:p,end:m}}else c=null}c=c||{start:0,end:0}}else c=null;vn={activeElementDetached:null,focusedElem:l,selectionRange:c},qt=!1,Il=o;do{try{mc()}catch(e){if(null===Il)throw Error(i(330));gc(Il,e),Il=Il.nextEffect}}while(null!==Il);Il=o;do{try{for(l=e,c=t;null!==Il;){var x=Il.effectTag;if(16&x&&We(Il.stateNode,""),128&x){var w=Il.alternate;if(null!==w){var O=w.ref;null!==O&&("function"==typeof O?O(null):O.current=null)}}switch(1038&x){case 2:ul(Il),Il.effectTag&=-3;break;case 6:ul(Il),Il.effectTag&=-3,dl(Il.alternate,Il);break;case 1024:Il.effectTag&=-1025;break;case 1028:Il.effectTag&=-1025,dl(Il.alternate,Il);break;case 4:dl(Il.alternate,Il);break;case 8:sl(l,s=Il,c),ll(s)}Il=Il.nextEffect}}catch(e){if(null===Il)throw Error(i(330));gc(Il,e),Il=Il.nextEffect}}while(null!==Il);if(O=vn,w=pn(),x=O.focusedElem,c=O.selectionRange,w!==x&&x&&x.ownerDocument&&function e(t,n){return!(!t||!n)&&(t===n||(!t||3!==t.nodeType)&&(n&&3===n.nodeType?e(t,n.parentNode):"contains"in t?t.contains(n):!!t.compareDocumentPosition&&!!(16&t.compareDocumentPosition(n))))}(x.ownerDocument.documentElement,x)){null!==c&&mn(x)&&(w=c.start,void 0===(O=c.end)&&(O=w),"selectionStart"in x?(x.selectionStart=w,x.selectionEnd=Math.min(O,x.value.length)):(O=(w=x.ownerDocument||document)&&w.defaultView||window).getSelection&&(O=O.getSelection(),s=x.textContent.length,l=Math.min(c.start,s),c=void 0===c.end?l:Math.min(c.end,s),!O.extend&&l>c&&(s=c,c=l,l=s),s=fn(x,l),d=fn(x,c),s&&d&&(1!==O.rangeCount||O.anchorNode!==s.node||O.anchorOffset!==s.offset||O.focusNode!==d.node||O.focusOffset!==d.offset)&&((w=w.createRange()).setStart(s.node,s.offset),O.removeAllRanges(),l>c?(O.addRange(w),O.extend(d.node,d.offset)):(w.setEnd(d.node,d.offset),O.addRange(w))))),w=[];for(O=x;O=O.parentNode;)1===O.nodeType&&w.push({element:O,left:O.scrollLeft,top:O.scrollTop});for("function"==typeof x.focus&&x.focus(),x=0;x<w.length;x++)(O=w[x]).element.scrollLeft=O.left,O.element.scrollTop=O.top}qt=!!hn,vn=hn=null,e.current=n,Il=o;do{try{for(x=e;null!==Il;){var E=Il.effectTag;if(36&E&&al(x,Il.alternate,Il),128&E){w=void 0;var S=Il.ref;if(null!==S){var k=Il.stateNode;switch(Il.tag){case 5:w=k;break;default:w=k}"function"==typeof S?S(w):S.current=w}}Il=Il.nextEffect}}catch(e){if(null===Il)throw Error(i(330));gc(Il,e),Il=Il.nextEffect}}while(null!==Il);Il=null,Io(),El=a}else e.current=n;if(Fl)Fl=!1,Wl=e,Bl=t;else for(Il=o;null!==Il;)t=Il.nextEffect,Il.nextEffect=null,Il=t;if(0===(t=e.firstPendingTime)&&(zl=null),1073741823===t?e===$l?Ul++:(Ul=0,$l=e):Ul=0,"function"==typeof wc&&wc(n.stateNode,r),Ql(e),Ll)throw Ll=!1,e=_l,_l=null,e;return 0!=(8&El)||qo(),null}function mc(){for(;null!==Il;){var e=Il.effectTag;0!=(256&e)&&nl(Il.alternate,Il),0==(512&e)||Fl||(Fl=!0,$o(97,(function(){return hc(),null}))),Il=Il.nextEffect}}function hc(){if(90!==Bl){var e=97<Bl?97:Bl;return Bl=90,Uo(e,vc)}}function vc(){if(null===Wl)return!1;var e=Wl;if(Wl=null,0!=(48&El))throw Error(i(331));var t=El;for(El|=32,e=e.current.firstEffect;null!==e;){try{var n=e;if(0!=(512&n.effectTag))switch(n.tag){case 0:case 11:case 15:case 22:rl(5,n),ol(5,n)}}catch(t){if(null===e)throw Error(i(330));gc(e,t)}n=e.nextEffect,e.nextEffect=null,e=n}return El=t,qo(),!0}function bc(e,t,n){ua(e,t=ml(e,t=Ji(n,t),1073741823)),null!==(e=Yl(e,1073741823))&&Ql(e)}function gc(e,t){if(3===e.tag)bc(e,e,t);else for(var n=e.return;null!==n;){if(3===n.tag){bc(n,e,t);break}if(1===n.tag){var r=n.stateNode;if("function"==typeof n.type.getDerivedStateFromError||"function"==typeof r.componentDidCatch&&(null===zl||!zl.has(r))){ua(n,e=hl(n,e=Ji(t,e),1073741823)),null!==(n=Yl(n,1073741823))&&Ql(n);break}}n=n.return}}function yc(e,t,n){var r=e.pingCache;null!==r&&r.delete(t),Sl===e&&jl===n?Cl===Ol||Cl===wl&&1073741823===Tl&&Wo()-Al<500?nc(e,jl):Dl=!0:Mc(e,n)&&(0!==(t=e.lastPingedTime)&&t<n||(e.lastPingedTime=n,Ql(e)))}function xc(e,t){var n=e.stateNode;null!==n&&n.delete(t),0===(t=0)&&(t=Xl(t=ql(),e,null)),null!==(e=Yl(e,t))&&Ql(e)}vl=function(e,t,n){var r=t.expirationTime;if(null!==e){var o=t.pendingProps;if(e.memoizedProps!==o||po.current)Ni=!0;else{if(r<n){switch(Ni=!1,t.tag){case 3:Fi(t),Pi();break;case 5:if(Aa(t),4&t.mode&&1!==n&&o.hidden)return t.expirationTime=t.childExpirationTime=1,null;break;case 1:vo(t.type)&&xo(t);break;case 4:Ma(t,t.stateNode.containerInfo);break;case 10:r=t.memoizedProps.value,o=t.type._context,uo(Go,o._currentValue),o._currentValue=r;break;case 13:if(null!==t.memoizedState)return 0!==(r=t.child.childExpirationTime)&&r>=n?$i(e,t,n):(uo(La,1&La.current),null!==(t=Ki(e,t,n))?t.sibling:null);uo(La,1&La.current);break;case 19:if(r=t.childExpirationTime>=n,0!=(64&e.effectTag)){if(r)return Xi(e,t,n);t.effectTag|=64}if(null!==(o=t.memoizedState)&&(o.rendering=null,o.tail=null),uo(La,La.current),!r)return null}return Ki(e,t,n)}Ni=!1}}else Ni=!1;switch(t.expirationTime=0,t.tag){case 2:if(r=t.type,null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),e=t.pendingProps,o=ho(t,fo.current),ra(t,n),o=Ka(null,t,r,e,o,n),t.effectTag|=1,"object"==typeof o&&null!==o&&"function"==typeof o.render&&void 0===o.$$typeof){if(t.tag=1,t.memoizedState=null,t.updateQueue=null,vo(r)){var a=!0;xo(t)}else a=!1;t.memoizedState=null!==o.state&&void 0!==o.state?o.state:null,ia(t);var l=r.getDerivedStateFromProps;"function"==typeof l&&ha(t,r,l,e),o.updater=va,t.stateNode=o,o._reactInternalFiber=t,xa(t,r,e,n),t=zi(null,t,r,!0,a,n)}else t.tag=0,Ri(null,t,o,n),t=t.child;return t;case 16:e:{if(o=t.elementType,null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),e=t.pendingProps,function(e){if(-1===e._status){e._status=0;var t=e._ctor;t=t(),e._result=t,t.then((function(t){0===e._status&&(t=t.default,e._status=1,e._result=t)}),(function(t){0===e._status&&(e._status=2,e._result=t)}))}}(o),1!==o._status)throw o._result;switch(o=o._result,t.type=o,a=t.tag=function(e){if("function"==typeof e)return kc(e)?1:0;if(null!=e){if((e=e.$$typeof)===ce)return 11;if(e===de)return 14}return 2}(o),e=Yo(o,e),a){case 0:t=Li(null,t,o,e,n);break e;case 1:t=_i(null,t,o,e,n);break e;case 11:t=Mi(null,t,o,e,n);break e;case 14:t=Di(null,t,o,Yo(o.type,e),r,n);break e}throw Error(i(306,o,""))}return t;case 0:return r=t.type,o=t.pendingProps,Li(e,t,r,o=t.elementType===r?o:Yo(r,o),n);case 1:return r=t.type,o=t.pendingProps,_i(e,t,r,o=t.elementType===r?o:Yo(r,o),n);case 3:if(Fi(t),r=t.updateQueue,null===e||null===r)throw Error(i(282));if(r=t.pendingProps,o=null!==(o=t.memoizedState)?o.element:null,la(e,t),da(t,r,null,n),(r=t.memoizedState.element)===o)Pi(),t=Ki(e,t,n);else{if((o=t.stateNode.hydrate)&&(wi=wn(t.stateNode.containerInfo.firstChild),xi=t,o=Oi=!0),o)for(n=ja(t,null,r,n),t.child=n;n;)n.effectTag=-3&n.effectTag|1024,n=n.sibling;else Ri(e,t,r,n),Pi();t=t.child}return t;case 5:return Aa(t),null===e&&ki(t),r=t.type,o=t.pendingProps,a=null!==e?e.memoizedProps:null,l=o.children,gn(r,o)?l=null:null!==a&&gn(r,a)&&(t.effectTag|=16),Ii(e,t),4&t.mode&&1!==n&&o.hidden?(t.expirationTime=t.childExpirationTime=1,t=null):(Ri(e,t,l,n),t=t.child),t;case 6:return null===e&&ki(t),null;case 13:return $i(e,t,n);case 4:return Ma(t,t.stateNode.containerInfo),r=t.pendingProps,null===e?t.child=ka(t,null,r,n):Ri(e,t,r,n),t.child;case 11:return r=t.type,o=t.pendingProps,Mi(e,t,r,o=t.elementType===r?o:Yo(r,o),n);case 7:return Ri(e,t,t.pendingProps,n),t.child;case 8:case 12:return Ri(e,t,t.pendingProps.children,n),t.child;case 10:e:{r=t.type._context,o=t.pendingProps,l=t.memoizedProps,a=o.value;var c=t.type._context;if(uo(Go,c._currentValue),c._currentValue=a,null!==l)if(c=l.value,0===(a=_r(c,a)?0:0|("function"==typeof r._calculateChangedBits?r._calculateChangedBits(c,a):1073741823))){if(l.children===o.children&&!po.current){t=Ki(e,t,n);break e}}else for(null!==(c=t.child)&&(c.return=t);null!==c;){var u=c.dependencies;if(null!==u){l=c.child;for(var s=u.firstContext;null!==s;){if(s.context===r&&0!=(s.observedBits&a)){1===c.tag&&((s=ca(n,null)).tag=2,ua(c,s)),c.expirationTime<n&&(c.expirationTime=n),null!==(s=c.alternate)&&s.expirationTime<n&&(s.expirationTime=n),na(c.return,n),u.expirationTime<n&&(u.expirationTime=n);break}s=s.next}}else l=10===c.tag&&c.type===t.type?null:c.child;if(null!==l)l.return=c;else for(l=c;null!==l;){if(l===t){l=null;break}if(null!==(c=l.sibling)){c.return=l.return,l=c;break}l=l.return}c=l}Ri(e,t,o.children,n),t=t.child}return t;case 9:return o=t.type,r=(a=t.pendingProps).children,ra(t,n),r=r(o=oa(o,a.unstable_observedBits)),t.effectTag|=1,Ri(e,t,r,n),t.child;case 14:return a=Yo(o=t.type,t.pendingProps),Di(e,t,o,a=Yo(o.type,a),r,n);case 15:return Ai(e,t,t.type,t.pendingProps,r,n);case 17:return r=t.type,o=t.pendingProps,o=t.elementType===r?o:Yo(r,o),null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),t.tag=1,vo(r)?(e=!0,xo(t)):e=!1,ra(t,n),ga(t,r,o),xa(t,r,o,n),zi(null,t,r,!0,e,n);case 19:return Xi(e,t,n)}throw Error(i(156,t.tag))};var wc=null,Oc=null;function Ec(e,t,n,r){this.tag=e,this.key=n,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.ref=null,this.pendingProps=t,this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=r,this.effectTag=0,this.lastEffect=this.firstEffect=this.nextEffect=null,this.childExpirationTime=this.expirationTime=0,this.alternate=null}function Sc(e,t,n,r){return new Ec(e,t,n,r)}function kc(e){return!(!(e=e.prototype)||!e.isReactComponent)}function jc(e,t){var n=e.alternate;return null===n?((n=Sc(e.tag,t,e.key,e.mode)).elementType=e.elementType,n.type=e.type,n.stateNode=e.stateNode,n.alternate=e,e.alternate=n):(n.pendingProps=t,n.effectTag=0,n.nextEffect=null,n.firstEffect=null,n.lastEffect=null),n.childExpirationTime=e.childExpirationTime,n.expirationTime=e.expirationTime,n.child=e.child,n.memoizedProps=e.memoizedProps,n.memoizedState=e.memoizedState,n.updateQueue=e.updateQueue,t=e.dependencies,n.dependencies=null===t?null:{expirationTime:t.expirationTime,firstContext:t.firstContext,responders:t.responders},n.sibling=e.sibling,n.index=e.index,n.ref=e.ref,n}function Cc(e,t,n,r,o,a){var l=2;if(r=e,"function"==typeof e)kc(e)&&(l=1);else if("string"==typeof e)l=5;else e:switch(e){case ne:return Pc(n.children,o,a,t);case le:l=8,o|=7;break;case re:l=8,o|=1;break;case oe:return(e=Sc(12,n,t,8|o)).elementType=oe,e.type=oe,e.expirationTime=a,e;case ue:return(e=Sc(13,n,t,o)).type=ue,e.elementType=ue,e.expirationTime=a,e;case se:return(e=Sc(19,n,t,o)).elementType=se,e.expirationTime=a,e;default:if("object"==typeof e&&null!==e)switch(e.$$typeof){case ae:l=10;break e;case ie:l=9;break e;case ce:l=11;break e;case de:l=14;break e;case fe:l=16,r=null;break e;case pe:l=22;break e}throw Error(i(130,null==e?e:typeof e,""))}return(t=Sc(l,n,t,o)).elementType=e,t.type=r,t.expirationTime=a,t}function Pc(e,t,n,r){return(e=Sc(7,e,r,t)).expirationTime=n,e}function Tc(e,t,n){return(e=Sc(6,e,null,t)).expirationTime=n,e}function Nc(e,t,n){return(t=Sc(4,null!==e.children?e.children:[],e.key,t)).expirationTime=n,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}function Rc(e,t,n){this.tag=t,this.current=null,this.containerInfo=e,this.pingCache=this.pendingChildren=null,this.finishedExpirationTime=0,this.finishedWork=null,this.timeoutHandle=-1,this.pendingContext=this.context=null,this.hydrate=n,this.callbackNode=null,this.callbackPriority=90,this.lastExpiredTime=this.lastPingedTime=this.nextKnownPendingLevel=this.lastSuspendedTime=this.firstSuspendedTime=this.firstPendingTime=0}function Mc(e,t){var n=e.firstSuspendedTime;return e=e.lastSuspendedTime,0!==n&&n>=t&&e<=t}function Dc(e,t){var n=e.firstSuspendedTime,r=e.lastSuspendedTime;n<t&&(e.firstSuspendedTime=t),(r>t||0===n)&&(e.lastSuspendedTime=t),t<=e.lastPingedTime&&(e.lastPingedTime=0),t<=e.lastExpiredTime&&(e.lastExpiredTime=0)}function Ac(e,t){t>e.firstPendingTime&&(e.firstPendingTime=t);var n=e.firstSuspendedTime;0!==n&&(t>=n?e.firstSuspendedTime=e.lastSuspendedTime=e.nextKnownPendingLevel=0:t>=e.lastSuspendedTime&&(e.lastSuspendedTime=t+1),t>e.nextKnownPendingLevel&&(e.nextKnownPendingLevel=t))}function Ic(e,t){var n=e.lastExpiredTime;(0===n||n>t)&&(e.lastExpiredTime=t)}function Lc(e,t,n,r){var o=t.current,a=ql(),l=pa.suspense;a=Xl(a,o,l);e:if(n){t:{if(Ze(n=n._reactInternalFiber)!==n||1!==n.tag)throw Error(i(170));var c=n;do{switch(c.tag){case 3:c=c.stateNode.context;break t;case 1:if(vo(c.type)){c=c.stateNode.__reactInternalMemoizedMergedChildContext;break t}}c=c.return}while(null!==c);throw Error(i(171))}if(1===n.tag){var u=n.type;if(vo(u)){n=yo(n,u,c);break e}}n=c}else n=so;return null===t.context?t.context=n:t.pendingContext=n,(t=ca(a,l)).payload={element:e},null!==(r=void 0===r?null:r)&&(t.callback=r),ua(o,t),Kl(o,a),a}function _c(e){if(!(e=e.current).child)return null;switch(e.child.tag){case 5:default:return e.child.stateNode}}function zc(e,t){null!==(e=e.memoizedState)&&null!==e.dehydrated&&e.retryTime<t&&(e.retryTime=t)}function Fc(e,t){zc(e,t),(e=e.alternate)&&zc(e,t)}function Wc(e,t,n){var r=new Rc(e,t,n=null!=n&&!0===n.hydrate),o=Sc(3,null,null,2===t?7:1===t?3:0);r.current=o,o.stateNode=r,ia(o),e[jn]=r.current,n&&0!==t&&function(e,t){var n=Je(t);jt.forEach((function(e){mt(e,t,n)})),Ct.forEach((function(e){mt(e,t,n)}))}(0,9===e.nodeType?e:e.ownerDocument),this._internalRoot=r}function Bc(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType&&(8!==e.nodeType||" react-mount-point-unstable "!==e.nodeValue))}function Hc(e,t,n,r,o){var a=n._reactRootContainer;if(a){var i=a._internalRoot;if("function"==typeof o){var l=o;o=function(){var e=_c(i);l.call(e)}}Lc(t,i,e,o)}else{if(a=n._reactRootContainer=function(e,t){if(t||(t=!(!(t=e?9===e.nodeType?e.documentElement:e.firstChild:null)||1!==t.nodeType||!t.hasAttribute("data-reactroot"))),!t)for(var n;n=e.lastChild;)e.removeChild(n);return new Wc(e,0,t?{hydrate:!0}:void 0)}(n,r),i=a._internalRoot,"function"==typeof o){var c=o;o=function(){var e=_c(i);c.call(e)}}tc((function(){Lc(t,i,e,o)}))}return _c(i)}function Uc(e,t,n){var r=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:te,key:null==r?null:""+r,children:e,containerInfo:t,implementation:n}}function $c(e,t){var n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;if(!Bc(t))throw Error(i(200));return Uc(e,t,null,n)}Wc.prototype.render=function(e){Lc(e,this._internalRoot,null,null)},Wc.prototype.unmount=function(){var e=this._internalRoot,t=e.containerInfo;Lc(null,e,null,(function(){t[jn]=null}))},ht=function(e){if(13===e.tag){var t=Ko(ql(),150,100);Kl(e,t),Fc(e,t)}},vt=function(e){13===e.tag&&(Kl(e,3),Fc(e,3))},bt=function(e){if(13===e.tag){var t=ql();Kl(e,t=Xl(t,e,null)),Fc(e,t)}},P=function(e,t,n){switch(t){case"input":if(ke(e,n),t=n.name,"radio"===n.type&&null!=t){for(n=e;n.parentNode;)n=n.parentNode;for(n=n.querySelectorAll("input[name="+JSON.stringify(""+t)+'][type="radio"]'),t=0;t<n.length;t++){var r=n[t];if(r!==e&&r.form===e.form){var o=Nn(r);if(!o)throw Error(i(90));we(r),ke(r,o)}}}break;case"textarea":Me(e,n);break;case"select":null!=(t=n.value)&&Te(e,!!n.multiple,t,!1)}},A=ec,I=function(e,t,n,r,o){var a=El;El|=4;try{return Uo(98,e.bind(null,t,n,r,o))}finally{0===(El=a)&&qo()}},L=function(){0==(49&El)&&(function(){if(null!==Hl){var e=Hl;Hl=null,e.forEach((function(e,t){Ic(t,e),Ql(t)})),qo()}}(),hc())},_=function(e,t){var n=El;El|=2;try{return e(t)}finally{0===(El=n)&&qo()}};var Vc,qc,Xc={Events:[Pn,Tn,Nn,j,E,_n,function(e){ot(e,Ln)},M,D,Qt,lt,hc,{current:!1}]};qc=(Vc={findFiberByHostInstance:Cn,bundleType:0,version:"16.13.1",rendererPackageName:"react-dom"}).findFiberByHostInstance,function(e){if("undefined"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__)return!1;var t=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(t.isDisabled||!t.supportsFiber)return!0;try{var n=t.inject(e);wc=function(e){try{t.onCommitFiberRoot(n,e,void 0,64==(64&e.current.effectTag))}catch(e){}},Oc=function(e){try{t.onCommitFiberUnmount(n,e)}catch(e){}}}catch(e){}}(o({},Vc,{overrideHookState:null,overrideProps:null,setSuspenseHandler:null,scheduleUpdate:null,currentDispatcherRef:G.ReactCurrentDispatcher,findHostInstanceByFiber:function(e){return null===(e=nt(e))?null:e.stateNode},findFiberByHostInstance:function(e){return qc?qc(e):null},findHostInstancesForRefresh:null,scheduleRefresh:null,scheduleRoot:null,setRefreshHandler:null,getCurrentFiber:null})),t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=Xc,t.createPortal=$c,t.findDOMNode=function(e){if(null==e)return null;if(1===e.nodeType)return e;var t=e._reactInternalFiber;if(void 0===t){if("function"==typeof e.render)throw Error(i(188));throw Error(i(268,Object.keys(e)))}return e=null===(e=nt(t))?null:e.stateNode},t.flushSync=function(e,t){if(0!=(48&El))throw Error(i(187));var n=El;El|=1;try{return Uo(99,e.bind(null,t))}finally{El=n,qo()}},t.hydrate=function(e,t,n){if(!Bc(t))throw Error(i(200));return Hc(null,e,t,!0,n)},t.render=function(e,t,n){if(!Bc(t))throw Error(i(200));return Hc(null,e,t,!1,n)},t.unmountComponentAtNode=function(e){if(!Bc(e))throw Error(i(40));return!!e._reactRootContainer&&(tc((function(){Hc(null,null,e,!1,(function(){e._reactRootContainer=null,e[jn]=null}))})),!0)},t.unstable_batchedUpdates=ec,t.unstable_createPortal=function(e,t){return $c(e,t,2<arguments.length&&void 0!==arguments[2]?arguments[2]:null)},t.unstable_renderSubtreeIntoContainer=function(e,t,n,r){if(!Bc(n))throw Error(i(200));if(null==e||void 0===e._reactInternalFiber)throw Error(i(38));return Hc(e,t,n,!1,r)},t.version="16.13.1"},function(e,t,n){"use strict";e.exports=n(110)},function(e,t,n){"use strict";
/** @license React v0.19.1
 * scheduler.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r,o,a,i,l;if("undefined"==typeof window||"function"!=typeof MessageChannel){var c=null,u=null,s=function(){if(null!==c)try{var e=t.unstable_now();c(!0,e),c=null}catch(e){throw setTimeout(s,0),e}},d=Date.now();t.unstable_now=function(){return Date.now()-d},r=function(e){null!==c?setTimeout(r,0,e):(c=e,setTimeout(s,0))},o=function(e,t){u=setTimeout(e,t)},a=function(){clearTimeout(u)},i=function(){return!1},l=t.unstable_forceFrameRate=function(){}}else{var f=window.performance,p=window.Date,m=window.setTimeout,h=window.clearTimeout;if("undefined"!=typeof console){var v=window.cancelAnimationFrame;"function"!=typeof window.requestAnimationFrame&&console.error("This browser doesn't support requestAnimationFrame. Make sure that you load a polyfill in older browsers. https://fb.me/react-polyfills"),"function"!=typeof v&&console.error("This browser doesn't support cancelAnimationFrame. Make sure that you load a polyfill in older browsers. https://fb.me/react-polyfills")}if("object"==typeof f&&"function"==typeof f.now)t.unstable_now=function(){return f.now()};else{var b=p.now();t.unstable_now=function(){return p.now()-b}}var g=!1,y=null,x=-1,w=5,O=0;i=function(){return t.unstable_now()>=O},l=function(){},t.unstable_forceFrameRate=function(e){0>e||125<e?console.error("forceFrameRate takes a positive int between 0 and 125, forcing framerates higher than 125 fps is not unsupported"):w=0<e?Math.floor(1e3/e):5};var E=new MessageChannel,S=E.port2;E.port1.onmessage=function(){if(null!==y){var e=t.unstable_now();O=e+w;try{y(!0,e)?S.postMessage(null):(g=!1,y=null)}catch(e){throw S.postMessage(null),e}}else g=!1},r=function(e){y=e,g||(g=!0,S.postMessage(null))},o=function(e,n){x=m((function(){e(t.unstable_now())}),n)},a=function(){h(x),x=-1}}function k(e,t){var n=e.length;e.push(t);e:for(;;){var r=n-1>>>1,o=e[r];if(!(void 0!==o&&0<P(o,t)))break e;e[r]=t,e[n]=o,n=r}}function j(e){return void 0===(e=e[0])?null:e}function C(e){var t=e[0];if(void 0!==t){var n=e.pop();if(n!==t){e[0]=n;e:for(var r=0,o=e.length;r<o;){var a=2*(r+1)-1,i=e[a],l=a+1,c=e[l];if(void 0!==i&&0>P(i,n))void 0!==c&&0>P(c,i)?(e[r]=c,e[l]=n,r=l):(e[r]=i,e[a]=n,r=a);else{if(!(void 0!==c&&0>P(c,n)))break e;e[r]=c,e[l]=n,r=l}}}return t}return null}function P(e,t){var n=e.sortIndex-t.sortIndex;return 0!==n?n:e.id-t.id}var T=[],N=[],R=1,M=null,D=3,A=!1,I=!1,L=!1;function _(e){for(var t=j(N);null!==t;){if(null===t.callback)C(N);else{if(!(t.startTime<=e))break;C(N),t.sortIndex=t.expirationTime,k(T,t)}t=j(N)}}function z(e){if(L=!1,_(e),!I)if(null!==j(T))I=!0,r(F);else{var t=j(N);null!==t&&o(z,t.startTime-e)}}function F(e,n){I=!1,L&&(L=!1,a()),A=!0;var r=D;try{for(_(n),M=j(T);null!==M&&(!(M.expirationTime>n)||e&&!i());){var l=M.callback;if(null!==l){M.callback=null,D=M.priorityLevel;var c=l(M.expirationTime<=n);n=t.unstable_now(),"function"==typeof c?M.callback=c:M===j(T)&&C(T),_(n)}else C(T);M=j(T)}if(null!==M)var u=!0;else{var s=j(N);null!==s&&o(z,s.startTime-n),u=!1}return u}finally{M=null,D=r,A=!1}}function W(e){switch(e){case 1:return-1;case 2:return 250;case 5:return 1073741823;case 4:return 1e4;default:return 5e3}}var B=l;t.unstable_IdlePriority=5,t.unstable_ImmediatePriority=1,t.unstable_LowPriority=4,t.unstable_NormalPriority=3,t.unstable_Profiling=null,t.unstable_UserBlockingPriority=2,t.unstable_cancelCallback=function(e){e.callback=null},t.unstable_continueExecution=function(){I||A||(I=!0,r(F))},t.unstable_getCurrentPriorityLevel=function(){return D},t.unstable_getFirstCallbackNode=function(){return j(T)},t.unstable_next=function(e){switch(D){case 1:case 2:case 3:var t=3;break;default:t=D}var n=D;D=t;try{return e()}finally{D=n}},t.unstable_pauseExecution=function(){},t.unstable_requestPaint=B,t.unstable_runWithPriority=function(e,t){switch(e){case 1:case 2:case 3:case 4:case 5:break;default:e=3}var n=D;D=e;try{return t()}finally{D=n}},t.unstable_scheduleCallback=function(e,n,i){var l=t.unstable_now();if("object"==typeof i&&null!==i){var c=i.delay;c="number"==typeof c&&0<c?l+c:l,i="number"==typeof i.timeout?i.timeout:W(e)}else i=W(e),c=l;return e={id:R++,callback:n,priorityLevel:e,startTime:c,expirationTime:i=c+i,sortIndex:-1},c>l?(e.sortIndex=c,k(N,e),null===j(T)&&e===j(N)&&(L?a():L=!0,o(z,c-l))):(e.sortIndex=i,k(T,e),I||A||(I=!0,r(F))),e},t.unstable_shouldYield=function(){var e=t.unstable_now();_(e);var n=j(T);return n!==M&&null!==M&&null!==n&&null!==n.callback&&n.startTime<=e&&n.expirationTime<M.expirationTime||i()},t.unstable_wrapCallback=function(e){var t=D;return function(){var n=D;D=t;try{return e.apply(this,arguments)}finally{D=n}}}},function(e,t,n){"use strict";var r=n(112);function o(){}function a(){}a.resetWarningCache=o,e.exports=function(){function e(e,t,n,o,a,i){if(i!==r){var l=new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types");throw l.name="Invariant Violation",l}}function t(){return e}e.isRequired=e;var n={array:e,bool:e,func:e,number:e,object:e,string:e,symbol:e,any:e,arrayOf:t,element:e,elementType:e,instanceOf:t,node:e,objectOf:t,oneOf:t,oneOfType:t,shape:t,exact:t,checkPropTypes:a,resetWarningCache:o};return n.PropTypes=n,n}},function(e,t,n){"use strict";e.exports="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"},function(e,t,n){"use strict";
/** @license React v16.13.1
 * react-is.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r="function"==typeof Symbol&&Symbol.for,o=r?Symbol.for("react.element"):60103,a=r?Symbol.for("react.portal"):60106,i=r?Symbol.for("react.fragment"):60107,l=r?Symbol.for("react.strict_mode"):60108,c=r?Symbol.for("react.profiler"):60114,u=r?Symbol.for("react.provider"):60109,s=r?Symbol.for("react.context"):60110,d=r?Symbol.for("react.async_mode"):60111,f=r?Symbol.for("react.concurrent_mode"):60111,p=r?Symbol.for("react.forward_ref"):60112,m=r?Symbol.for("react.suspense"):60113,h=r?Symbol.for("react.suspense_list"):60120,v=r?Symbol.for("react.memo"):60115,b=r?Symbol.for("react.lazy"):60116,g=r?Symbol.for("react.block"):60121,y=r?Symbol.for("react.fundamental"):60117,x=r?Symbol.for("react.responder"):60118,w=r?Symbol.for("react.scope"):60119;function O(e){if("object"==typeof e&&null!==e){var t=e.$$typeof;switch(t){case o:switch(e=e.type){case d:case f:case i:case c:case l:case m:return e;default:switch(e=e&&e.$$typeof){case s:case p:case b:case v:case u:return e;default:return t}}case a:return t}}}function E(e){return O(e)===f}t.AsyncMode=d,t.ConcurrentMode=f,t.ContextConsumer=s,t.ContextProvider=u,t.Element=o,t.ForwardRef=p,t.Fragment=i,t.Lazy=b,t.Memo=v,t.Portal=a,t.Profiler=c,t.StrictMode=l,t.Suspense=m,t.isAsyncMode=function(e){return E(e)||O(e)===d},t.isConcurrentMode=E,t.isContextConsumer=function(e){return O(e)===s},t.isContextProvider=function(e){return O(e)===u},t.isElement=function(e){return"object"==typeof e&&null!==e&&e.$$typeof===o},t.isForwardRef=function(e){return O(e)===p},t.isFragment=function(e){return O(e)===i},t.isLazy=function(e){return O(e)===b},t.isMemo=function(e){return O(e)===v},t.isPortal=function(e){return O(e)===a},t.isProfiler=function(e){return O(e)===c},t.isStrictMode=function(e){return O(e)===l},t.isSuspense=function(e){return O(e)===m},t.isValidElementType=function(e){return"string"==typeof e||"function"==typeof e||e===i||e===f||e===c||e===l||e===m||e===h||"object"==typeof e&&null!==e&&(e.$$typeof===b||e.$$typeof===v||e.$$typeof===u||e.$$typeof===s||e.$$typeof===p||e.$$typeof===y||e.$$typeof===x||e.$$typeof===w||e.$$typeof===g)},t.typeOf=O},function(e,t){e.exports=function(e){if(!e.webpackPolyfill){var t=Object.create(e);t.children||(t.children=[]),Object.defineProperty(t,"loaded",{enumerable:!0,get:function(){return t.l}}),Object.defineProperty(t,"id",{enumerable:!0,get:function(){return t.i}}),Object.defineProperty(t,"exports",{enumerable:!0}),t.webpackPolyfill=1}return t}},function(e,t){function n(){return e.exports=n=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},n.apply(this,arguments)}e.exports=n},function(e,t,n){var r=n(117),o=n(118),a=n(119),i=n(120),l=n(121),c=n(122),u=n(123);u.alea=r,u.xor128=o,u.xorwow=a,u.xorshift7=i,u.xor4096=l,u.tychei=c,e.exports=u},function(e,t,n){(function(e){var r;!function(e,o,a){function i(e){var t,n=this,r=(t=4022871197,function(e){e=String(e);for(var n=0;n<e.length;n++){var r=.02519603282416938*(t+=e.charCodeAt(n));r-=t=r>>>0,t=(r*=t)>>>0,t+=4294967296*(r-=t)}return 2.3283064365386963e-10*(t>>>0)});n.next=function(){var e=2091639*n.s0+2.3283064365386963e-10*n.c;return n.s0=n.s1,n.s1=n.s2,n.s2=e-(n.c=0|e)},n.c=1,n.s0=r(" "),n.s1=r(" "),n.s2=r(" "),n.s0-=r(e),n.s0<0&&(n.s0+=1),n.s1-=r(e),n.s1<0&&(n.s1+=1),n.s2-=r(e),n.s2<0&&(n.s2+=1),r=null}function l(e,t){return t.c=e.c,t.s0=e.s0,t.s1=e.s1,t.s2=e.s2,t}function c(e,t){var n=new i(e),r=t&&t.state,o=n.next;return o.int32=function(){return 4294967296*n.next()|0},o.double=function(){return o()+11102230246251565e-32*(2097152*o()|0)},o.quick=o,r&&("object"==typeof r&&l(r,n),o.state=function(){return l(n,{})}),o}o&&o.exports?o.exports=c:n(19)&&n(34)?void 0===(r=function(){return c}.call(t,n,t,o))||(o.exports=r):this.alea=c}(0,e,n(19))}).call(this,n(33)(e))},function(e,t,n){(function(e){var r;!function(e,o,a){function i(e){var t=this,n="";t.x=0,t.y=0,t.z=0,t.w=0,t.next=function(){var e=t.x^t.x<<11;return t.x=t.y,t.y=t.z,t.z=t.w,t.w^=t.w>>>19^e^e>>>8},e===(0|e)?t.x=e:n+=e;for(var r=0;r<n.length+64;r++)t.x^=0|n.charCodeAt(r),t.next()}function l(e,t){return t.x=e.x,t.y=e.y,t.z=e.z,t.w=e.w,t}function c(e,t){var n=new i(e),r=t&&t.state,o=function(){return(n.next()>>>0)/4294967296};return o.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===e);return e},o.int32=n.next,o.quick=o,r&&("object"==typeof r&&l(r,n),o.state=function(){return l(n,{})}),o}o&&o.exports?o.exports=c:n(19)&&n(34)?void 0===(r=function(){return c}.call(t,n,t,o))||(o.exports=r):this.xor128=c}(0,e,n(19))}).call(this,n(33)(e))},function(e,t,n){(function(e){var r;!function(e,o,a){function i(e){var t=this,n="";t.next=function(){var e=t.x^t.x>>>2;return t.x=t.y,t.y=t.z,t.z=t.w,t.w=t.v,(t.d=t.d+362437|0)+(t.v=t.v^t.v<<4^e^e<<1)|0},t.x=0,t.y=0,t.z=0,t.w=0,t.v=0,e===(0|e)?t.x=e:n+=e;for(var r=0;r<n.length+64;r++)t.x^=0|n.charCodeAt(r),r==n.length&&(t.d=t.x<<10^t.x>>>4),t.next()}function l(e,t){return t.x=e.x,t.y=e.y,t.z=e.z,t.w=e.w,t.v=e.v,t.d=e.d,t}function c(e,t){var n=new i(e),r=t&&t.state,o=function(){return(n.next()>>>0)/4294967296};return o.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===e);return e},o.int32=n.next,o.quick=o,r&&("object"==typeof r&&l(r,n),o.state=function(){return l(n,{})}),o}o&&o.exports?o.exports=c:n(19)&&n(34)?void 0===(r=function(){return c}.call(t,n,t,o))||(o.exports=r):this.xorwow=c}(0,e,n(19))}).call(this,n(33)(e))},function(e,t,n){(function(e){var r;!function(e,o,a){function i(e){var t=this;t.next=function(){var e,n,r=t.x,o=t.i;return e=r[o],n=(e^=e>>>7)^e<<24,n^=(e=r[o+1&7])^e>>>10,n^=(e=r[o+3&7])^e>>>3,n^=(e=r[o+4&7])^e<<7,e=r[o+7&7],n^=(e^=e<<13)^e<<9,r[o]=n,t.i=o+1&7,n},function(e,t){var n,r=[];if(t===(0|t))r[0]=t;else for(t=""+t,n=0;n<t.length;++n)r[7&n]=r[7&n]<<15^t.charCodeAt(n)+r[n+1&7]<<13;for(;r.length<8;)r.push(0);for(n=0;n<8&&0===r[n];++n);for(8==n?r[7]=-1:r[n],e.x=r,e.i=0,n=256;n>0;--n)e.next()}(t,e)}function l(e,t){return t.x=e.x.slice(),t.i=e.i,t}function c(e,t){null==e&&(e=+new Date);var n=new i(e),r=t&&t.state,o=function(){return(n.next()>>>0)/4294967296};return o.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===e);return e},o.int32=n.next,o.quick=o,r&&(r.x&&l(r,n),o.state=function(){return l(n,{})}),o}o&&o.exports?o.exports=c:n(19)&&n(34)?void 0===(r=function(){return c}.call(t,n,t,o))||(o.exports=r):this.xorshift7=c}(0,e,n(19))}).call(this,n(33)(e))},function(e,t,n){(function(e){var r;!function(e,o,a){function i(e){var t=this;t.next=function(){var e,n,r=t.w,o=t.X,a=t.i;return t.w=r=r+1640531527|0,n=o[a+34&127],e=o[a=a+1&127],n^=n<<13,e^=e<<17,n^=n>>>15,e^=e>>>12,n=o[a]=n^e,t.i=a,n+(r^r>>>16)|0},function(e,t){var n,r,o,a,i,l=[],c=128;for(t===(0|t)?(r=t,t=null):(t+="\0",r=0,c=Math.max(c,t.length)),o=0,a=-32;a<c;++a)t&&(r^=t.charCodeAt((a+32)%t.length)),0===a&&(i=r),r^=r<<10,r^=r>>>15,r^=r<<4,r^=r>>>13,a>=0&&(i=i+1640531527|0,o=0==(n=l[127&a]^=r+i)?o+1:0);for(o>=128&&(l[127&(t&&t.length||0)]=-1),o=127,a=512;a>0;--a)r=l[o+34&127],n=l[o=o+1&127],r^=r<<13,n^=n<<17,r^=r>>>15,n^=n>>>12,l[o]=r^n;e.w=i,e.X=l,e.i=o}(t,e)}function l(e,t){return t.i=e.i,t.w=e.w,t.X=e.X.slice(),t}function c(e,t){null==e&&(e=+new Date);var n=new i(e),r=t&&t.state,o=function(){return(n.next()>>>0)/4294967296};return o.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===e);return e},o.int32=n.next,o.quick=o,r&&(r.X&&l(r,n),o.state=function(){return l(n,{})}),o}o&&o.exports?o.exports=c:n(19)&&n(34)?void 0===(r=function(){return c}.call(t,n,t,o))||(o.exports=r):this.xor4096=c}(0,e,n(19))}).call(this,n(33)(e))},function(e,t,n){(function(e){var r;!function(e,o,a){function i(e){var t=this,n="";t.next=function(){var e=t.b,n=t.c,r=t.d,o=t.a;return e=e<<25^e>>>7^n,n=n-r|0,r=r<<24^r>>>8^o,o=o-e|0,t.b=e=e<<20^e>>>12^n,t.c=n=n-r|0,t.d=r<<16^n>>>16^o,t.a=o-e|0},t.a=0,t.b=0,t.c=-1640531527,t.d=1367130551,e===Math.floor(e)?(t.a=e/4294967296|0,t.b=0|e):n+=e;for(var r=0;r<n.length+20;r++)t.b^=0|n.charCodeAt(r),t.next()}function l(e,t){return t.a=e.a,t.b=e.b,t.c=e.c,t.d=e.d,t}function c(e,t){var n=new i(e),r=t&&t.state,o=function(){return(n.next()>>>0)/4294967296};return o.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===e);return e},o.int32=n.next,o.quick=o,r&&("object"==typeof r&&l(r,n),o.state=function(){return l(n,{})}),o}o&&o.exports?o.exports=c:n(19)&&n(34)?void 0===(r=function(){return c}.call(t,n,t,o))||(o.exports=r):this.tychei=c}(0,e,n(19))}).call(this,n(33)(e))},function(e,t,n){var r;!function(o,a,i){var l,c=i.pow(256,6),u=i.pow(2,52),s=2*u;function d(e,t,n){var r=[],d=m(function e(t,n){var r,o=[],a=typeof t;if(n&&"object"==a)for(r in t)try{o.push(e(t[r],n-1))}catch(e){}return o.length?o:"string"==a?t:t+"\0"}((t=1==t?{entropy:!0}:t||{}).entropy?[e,h(a)]:null==e?function(){try{var e;return l&&(e=l.randomBytes)?e=e(256):(e=new Uint8Array(256),(o.crypto||o.msCrypto).getRandomValues(e)),h(e)}catch(e){var t=o.navigator,n=t&&t.plugins;return[+new Date,o,n,o.screen,h(a)]}}():e,3),r),v=new f(r),b=function(){for(var e=v.g(6),t=c,n=0;e<u;)e=256*(e+n),t*=256,n=v.g(1);for(;e>=s;)e/=2,t/=2,n>>>=1;return(e+n)/t};return b.int32=function(){return 0|v.g(4)},b.quick=function(){return v.g(4)/4294967296},b.double=b,m(h(v.S),a),(t.pass||n||function(e,t,n,r){return r&&(r.S&&p(r,v),e.state=function(){return p(v,{})}),n?(i.random=e,t):e})(b,d,"global"in t?t.global:this==i,t.state)}function f(e){var t,n=e.length,r=this,o=0,a=r.i=r.j=0,i=r.S=[];for(n||(e=[n++]);o<256;)i[o]=o++;for(o=0;o<256;o++)i[o]=i[a=255&a+e[o%n]+(t=i[o])],i[a]=t;(r.g=function(e){for(var t,n=0,o=r.i,a=r.j,i=r.S;e--;)t=i[o=255&o+1],n=256*n+i[255&(i[o]=i[a=255&a+t])+(i[a]=t)];return r.i=o,r.j=a,n})(256)}function p(e,t){return t.i=e.i,t.j=e.j,t.S=e.S.slice(),t}function m(e,t){for(var n,r=e+"",o=0;o<r.length;)t[255&o]=255&(n^=19*t[255&o])+r.charCodeAt(o++);return h(t)}function h(e){return String.fromCharCode.apply(0,e)}if(m(i.random(),a),e.exports){e.exports=d;try{l=n(124)}catch(e){}}else void 0===(r=function(){return d}.call(t,n,t,e))||(e.exports=r)}("undefined"!=typeof self?self:this,[],Math)},function(e,t){},function(e,t,n){"use strict";var r=n(70);Object.defineProperty(t,"__esModule",{value:!0}),t.getDomTreeShapes=w,t.findNativeHandler=E,t.default=void 0;var o=r(n(126)),a=r(n(127)),i=r(n(129)),l=r(n(130)),c=r(n(131)),u=r(n(134)),s=r(n(135)),d=r(n(0)),f=r(n(4)),p=(r(n(71)),n(137));function m(e,t,n,r){return e.addEventListener(t,n,r),{remove:function(){e.removeEventListener(t,n,r)}}}var h={direction:"ltr",display:"flex",willChange:"transform"},v={width:"100%",WebkitFlexShrink:0,flexShrink:0,overflow:"auto"},b={root:{x:{overflowX:"hidden"},"x-reverse":{overflowX:"hidden"},y:{overflowY:"hidden"},"y-reverse":{overflowY:"hidden"}},flexDirection:{x:"row","x-reverse":"row-reverse",y:"column","y-reverse":"column-reverse"},transform:{x:function(e){return"translate(".concat(-e,"%, 0)")},"x-reverse":function(e){return"translate(".concat(e,"%, 0)")},y:function(e){return"translate(0, ".concat(-e,"%)")},"y-reverse":function(e){return"translate(0, ".concat(e,"%)")}},length:{x:"width","x-reverse":"width",y:"height","y-reverse":"height"},rotationMatrix:{x:{x:[1,0],y:[0,1]},"x-reverse":{x:[-1,0],y:[0,1]},y:{x:[0,1],y:[1,0]},"y-reverse":{x:[0,-1],y:[1,0]}},scrollPosition:{x:"scrollLeft","x-reverse":"scrollLeft",y:"scrollTop","y-reverse":"scrollTop"},scrollLength:{x:"scrollWidth","x-reverse":"scrollWidth",y:"scrollHeight","y-reverse":"scrollHeight"},clientLength:{x:"clientWidth","x-reverse":"clientWidth",y:"clientHeight","y-reverse":"clientHeight"}};function g(e,t){var n=t.duration,r=t.easeFunction,o=t.delay;return"".concat(e," ").concat(n," ").concat(r," ").concat(o)}function y(e,t){var n=b.rotationMatrix[t];return{pageX:n.x[0]*e.pageX+n.x[1]*e.pageY,pageY:n.y[0]*e.pageX+n.y[1]*e.pageY}}function x(e){return e.touches=[{pageX:e.pageX,pageY:e.pageY}],e}function w(e,t){for(var n=[];e&&e!==t&&!e.hasAttribute("data-swipeable");){var r=window.getComputedStyle(e);"absolute"===r.getPropertyValue("position")||"hidden"===r.getPropertyValue("overflow-x")?n=[]:(e.clientWidth>0&&e.scrollWidth>e.clientWidth||e.clientHeight>0&&e.scrollHeight>e.clientHeight)&&n.push({element:e,scrollWidth:e.scrollWidth,scrollHeight:e.scrollHeight,clientWidth:e.clientWidth,clientHeight:e.clientHeight,scrollLeft:e.scrollLeft,scrollTop:e.scrollTop}),e=e.parentNode}return n}var O=null;function E(e){var t=e.domTreeShapes,n=e.pageX,r=e.startX,o=e.axis;return t.some((function(e){var t=n>=r;"x"!==o&&"y"!==o||(t=!t);var a=e[b.scrollPosition[o]],i=a>0,l=a+e[b.clientLength[o]]<e[b.scrollLength[o]];return!!(t&&l||!t&&i)&&(O=e.element,!0)}))}var S=function(e){function t(e){var n;return(0,i.default)(this,t),(n=(0,c.default)(this,(0,u.default)(t).call(this,e))).rootNode=null,n.containerNode=null,n.ignoreNextScrollEvents=!1,n.viewLength=0,n.startX=0,n.lastX=0,n.vx=0,n.startY=0,n.isSwiping=void 0,n.started=!1,n.startIndex=0,n.transitionListener=null,n.touchMoveListener=null,n.activeSlide=null,n.indexCurrent=null,n.firstRenderTimeout=null,n.setRootNode=function(e){n.rootNode=e},n.setContainerNode=function(e){n.containerNode=e},n.setActiveSlide=function(e){n.activeSlide=e,n.updateHeight()},n.handleSwipeStart=function(e){var t=n.props.axis,r=y(e.touches[0],t);n.viewLength=n.rootNode.getBoundingClientRect()[b.length[t]],n.startX=r.pageX,n.lastX=r.pageX,n.vx=0,n.startY=r.pageY,n.isSwiping=void 0,n.started=!0;var o=window.getComputedStyle(n.containerNode),a=o.getPropertyValue("-webkit-transform")||o.getPropertyValue("transform");if(a&&"none"!==a){var i=a.split("(")[1].split(")")[0].split(","),l=window.getComputedStyle(n.rootNode),c=y({pageX:parseInt(i[4],10),pageY:parseInt(i[5],10)},t);n.startIndex=-c.pageX/(n.viewLength-parseInt(l.paddingLeft,10)-parseInt(l.paddingRight,10))||0}},n.handleSwipeMove=function(e){if(n.started){if(null===O||O===n.rootNode){var t=n.props,r=t.axis,o=t.children,a=t.ignoreNativeScroll,i=t.onSwitching,l=t.resistance,c=y(e.touches[0],r);if(void 0===n.isSwiping){var u=Math.abs(c.pageX-n.startX),s=Math.abs(c.pageY-n.startY),f=u>s&&u>p.constant.UNCERTAINTY_THRESHOLD;if(!l&&("y"===r||"y-reverse"===r)&&(0===n.indexCurrent&&n.startX<c.pageX||n.indexCurrent===d.default.Children.count(n.props.children)-1&&n.startX>c.pageX))return void(n.isSwiping=!1);if(u>s&&e.preventDefault(),!0===f||s>p.constant.UNCERTAINTY_THRESHOLD)return n.isSwiping=f,void(n.startX=c.pageX)}if(!0===n.isSwiping){e.preventDefault(),n.vx=.5*n.vx+.5*(c.pageX-n.lastX),n.lastX=c.pageX;var m=(0,p.computeIndex)({children:o,resistance:l,pageX:c.pageX,startIndex:n.startIndex,startX:n.startX,viewLength:n.viewLength}),h=m.index,v=m.startX;if(null===O&&!a)if(E({domTreeShapes:w(e.target,n.rootNode),startX:n.startX,pageX:c.pageX,axis:r}))return;v?n.startX=v:null===O&&(O=n.rootNode),n.setIndexCurrent(h);var b=function(){i&&i(h,"move")};!n.state.displaySameSlide&&n.state.isDragging||n.setState({displaySameSlide:!1,isDragging:!0},b),b()}}}else n.handleTouchStart(e)},n.handleSwipeEnd=function(){if(O=null,n.started&&(n.started=!1,!0===n.isSwiping)){var e,t=n.state.indexLatest,r=n.indexCurrent,o=t-r;e=Math.abs(n.vx)>n.props.threshold?n.vx>0?Math.floor(r):Math.ceil(r):Math.abs(o)>n.props.hysteresis?o>0?Math.floor(r):Math.ceil(r):t;var a=d.default.Children.count(n.props.children)-1;e<0?e=0:e>a&&(e=a),n.setIndexCurrent(e),n.setState({indexLatest:e,isDragging:!1},(function(){n.props.onSwitching&&n.props.onSwitching(e,"end"),n.props.onChangeIndex&&e!==t&&n.props.onChangeIndex(e,t,{reason:"swipe"}),r===t&&n.handleTransitionEnd()}))}},n.handleTouchStart=function(e){n.props.onTouchStart&&n.props.onTouchStart(e),n.handleSwipeStart(e)},n.handleTouchEnd=function(e){n.props.onTouchEnd&&n.props.onTouchEnd(e),n.handleSwipeEnd(e)},n.handleMouseDown=function(e){n.props.onMouseDown&&n.props.onMouseDown(e),e.persist(),n.handleSwipeStart(x(e))},n.handleMouseUp=function(e){n.props.onMouseUp&&n.props.onMouseUp(e),n.handleSwipeEnd(x(e))},n.handleMouseLeave=function(e){n.props.onMouseLeave&&n.props.onMouseLeave(e),n.started&&n.handleSwipeEnd(x(e))},n.handleMouseMove=function(e){n.props.onMouseMove&&n.props.onMouseMove(e),n.started&&n.handleSwipeMove(x(e))},n.handleScroll=function(e){if(n.props.onScroll&&n.props.onScroll(e),e.target===n.rootNode)if(n.ignoreNextScrollEvents)n.ignoreNextScrollEvents=!1;else{var t=n.state.indexLatest,r=Math.ceil(e.target.scrollLeft/e.target.clientWidth)+t;n.ignoreNextScrollEvents=!0,e.target.scrollLeft=0,n.props.onChangeIndex&&r!==t&&n.props.onChangeIndex(r,t,{reason:"focus"})}},n.updateHeight=function(){if(null!==n.activeSlide){var e=n.activeSlide.children[0];void 0!==e&&void 0!==e.offsetHeight&&n.state.heightLatest!==e.offsetHeight&&n.setState({heightLatest:e.offsetHeight})}},n.state={indexLatest:e.index,isDragging:!1,renderOnlyActive:!e.disableLazyLoading,heightLatest:0,displaySameSlide:!0},n.setIndexCurrent(e.index),n}return(0,s.default)(t,e),(0,l.default)(t,[{key:"getChildContext",value:function(){var e=this;return{swipeableViews:{slideUpdateHeight:function(){e.updateHeight()}}}}},{key:"componentDidMount",value:function(){var e=this;this.transitionListener=m(this.containerNode,"transitionend",(function(t){t.target===e.containerNode&&e.handleTransitionEnd()})),this.touchMoveListener=m(this.rootNode,"touchmove",(function(t){e.props.disabled||e.handleSwipeMove(t)}),{passive:!1}),this.props.disableLazyLoading||(this.firstRenderTimeout=setTimeout((function(){e.setState({renderOnlyActive:!1})}),0)),this.props.action&&this.props.action({updateHeight:this.updateHeight})}},{key:"componentWillReceiveProps",value:function(e){var t=e.index;"number"==typeof t&&t!==this.props.index&&(this.setIndexCurrent(t),this.setState({displaySameSlide:(0,p.getDisplaySameSlide)(this.props,e),indexLatest:t}))}},{key:"componentWillUnmount",value:function(){this.transitionListener.remove(),this.touchMoveListener.remove(),clearTimeout(this.firstRenderTimeout)}},{key:"setIndexCurrent",value:function(e){if(this.props.animateTransitions||this.indexCurrent===e||this.handleTransitionEnd(),this.indexCurrent=e,this.containerNode){var t=this.props.axis,n=b.transform[t](100*e);this.containerNode.style.WebkitTransform=n,this.containerNode.style.transform=n}}},{key:"handleTransitionEnd",value:function(){this.props.onTransitionEnd&&(this.state.displaySameSlide||this.state.isDragging||this.props.onTransitionEnd())}},{key:"render",value:function(){var e,t,n=this,r=this.props,i=(r.action,r.animateHeight),l=r.animateTransitions,c=r.axis,u=r.children,s=r.containerStyle,f=r.disabled,p=(r.disableLazyLoading,r.enableMouseEvents),m=(r.hysteresis,r.ignoreNativeScroll,r.index,r.onChangeIndex,r.onSwitching,r.onTransitionEnd,r.resistance,r.slideStyle),y=r.slideClassName,x=r.springConfig,w=r.style,O=(r.threshold,(0,a.default)(r,["action","animateHeight","animateTransitions","axis","children","containerStyle","disabled","disableLazyLoading","enableMouseEvents","hysteresis","ignoreNativeScroll","index","onChangeIndex","onSwitching","onTransitionEnd","resistance","slideStyle","slideClassName","springConfig","style","threshold"])),E=this.state,S=E.displaySameSlide,k=E.heightLatest,j=E.indexLatest,C=E.isDragging,P=E.renderOnlyActive,T=f?{}:{onTouchStart:this.handleTouchStart,onTouchEnd:this.handleTouchEnd},N=!f&&p?{onMouseDown:this.handleMouseDown,onMouseUp:this.handleMouseUp,onMouseLeave:this.handleMouseLeave,onMouseMove:this.handleMouseMove}:{},R=(0,o.default)({},v,m);if(C||!l||S)e="all 0s ease 0s",t="all 0s ease 0s";else if(e=g("transform",x),t=g("-webkit-transform",x),0!==k){var M=", ".concat(g("height",x));e+=M,t+=M}var D={height:null,WebkitFlexDirection:b.flexDirection[c],flexDirection:b.flexDirection[c],WebkitTransition:t,transition:e};if(!P){var A=b.transform[c](100*this.indexCurrent);D.WebkitTransform=A,D.transform=A}return i&&(D.height=k),d.default.createElement("div",(0,o.default)({ref:this.setRootNode,style:(0,o.default)({},b.root[c],w)},O,T,N,{onScroll:this.handleScroll}),d.default.createElement("div",{ref:this.setContainerNode,style:(0,o.default)({},D,h,s),className:"react-swipeable-view-container"},d.default.Children.map(u,(function(e,t){if(P&&t!==j)return null;var r,o=!0;return t===j&&(o=!1,i&&(r=n.setActiveSlide,R.overflowY="hidden")),d.default.createElement("div",{ref:r,style:R,className:y,"aria-hidden":o,"data-swipeable":"true"},e)}))))}}]),t}(d.default.Component);S.displayName="ReactSwipableView",S.propTypes={},S.defaultProps={animateHeight:!1,animateTransitions:!0,axis:"x",disabled:!1,disableLazyLoading:!1,enableMouseEvents:!1,hysteresis:.6,ignoreNativeScroll:!1,index:0,threshold:5,springConfig:{duration:"0.35s",easeFunction:"cubic-bezier(0.15, 0.3, 0.25, 1)",delay:"0s"},resistance:!1},S.childContextTypes={swipeableViews:f.default.shape({slideUpdateHeight:f.default.func})};var k=S;t.default=k},function(e,t){function n(){return e.exports=n=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},n.apply(this,arguments)}e.exports=n},function(e,t,n){var r=n(128);e.exports=function(e,t){if(null==e)return{};var n,o,a=r(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}},function(e,t){e.exports=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}},function(e,t){e.exports=function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}},function(e,t){function n(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}e.exports=function(e,t,r){return t&&n(e.prototype,t),r&&n(e,r),e}},function(e,t,n){var r=n(132),o=n(133);e.exports=function(e,t){return!t||"object"!==r(t)&&"function"!=typeof t?o(e):t}},function(e,t){function n(e){return(n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function r(t){return"function"==typeof Symbol&&"symbol"===n(Symbol.iterator)?e.exports=r=function(e){return n(e)}:e.exports=r=function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":n(e)},r(t)}e.exports=r},function(e,t){e.exports=function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}},function(e,t){function n(t){return e.exports=n=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)},n(t)}e.exports=n},function(e,t,n){var r=n(136);e.exports=function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&r(e,t)}},function(e,t){function n(t,r){return e.exports=n=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e},n(t,r)}e.exports=n},function(e,t,n){"use strict";var r=n(44);Object.defineProperty(t,"__esModule",{value:!0}),Object.defineProperty(t,"checkIndexBounds",{enumerable:!0,get:function(){return o.default}}),Object.defineProperty(t,"computeIndex",{enumerable:!0,get:function(){return a.default}}),Object.defineProperty(t,"constant",{enumerable:!0,get:function(){return i.default}}),Object.defineProperty(t,"getDisplaySameSlide",{enumerable:!0,get:function(){return l.default}}),Object.defineProperty(t,"mod",{enumerable:!0,get:function(){return c.default}});var o=r(n(138)),a=r(n(139)),i=r(n(72)),l=r(n(140)),c=r(n(141))},function(e,t,n){"use strict";var r=n(44);Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var o=r(n(0)),a=(r(n(71)),function(e){e.index;var t=e.children;o.default.Children.count(t)});t.default=a},function(e,t,n){"use strict";var r=n(44);Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){var t,n=e.children,r=e.startIndex,i=e.startX,l=e.pageX,c=e.viewLength,u=e.resistance,s=o.default.Children.count(n)-1,d=r+(i-l)/c;u?d<0?d=Math.exp(d*a.default.RESISTANCE_COEF)-1:d>s&&(d=s+1-Math.exp((s-d)*a.default.RESISTANCE_COEF)):d<0?t=((d=0)-r)*c+l:d>s&&(t=((d=s)-r)*c+l);return{index:d,startX:t}};var o=r(n(0)),a=r(n(72))},function(e,t,n){"use strict";var r=n(44);Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var o=r(n(0)),a=function(e,t){var n=!1,r=function(e){return e?e.key:"empty"};if(e.children.length&&t.children.length){var a=o.default.Children.map(e.children,r)[e.index];if(null!=a)a===o.default.Children.map(t.children,r)[t.index]&&(n=!0)}return n};t.default=a},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r=function(e,t){var n=e%t;return n<0?n+t:n};t.default=r},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),Object.defineProperty(t,"DraggableCore",{enumerable:!0,get:function(){return s.default}}),t.default=void 0;var r=function(e){if(e&&e.__esModule)return e;if(null===e||"object"!==m(e)&&"function"!=typeof e)return{default:e};var t=p();if(t&&t.has(e))return t.get(e);var n={},r=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var o in e)if(Object.prototype.hasOwnProperty.call(e,o)){var a=r?Object.getOwnPropertyDescriptor(e,o):null;a&&(a.get||a.set)?Object.defineProperty(n,o,a):n[o]=e[o]}n.default=e,t&&t.set(e,n);return n}(n(0)),o=f(n(4)),a=f(n(10)),i=f(n(143)),l=n(56),c=n(73),u=n(45),s=f(n(145)),d=f(n(74));function f(e){return e&&e.__esModule?e:{default:e}}function p(){if("function"!=typeof WeakMap)return null;var e=new WeakMap;return p=function(){return e},e}function m(e){return(m="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function h(){return(h=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function v(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}function b(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(e)))return;var n=[],r=!0,o=!1,a=void 0;try{for(var i,l=e[Symbol.iterator]();!(r=(i=l.next()).done)&&(n.push(i.value),!t||n.length!==t);r=!0);}catch(e){o=!0,a=e}finally{try{r||null==l.return||l.return()}finally{if(o)throw a}}return n}(e,t)||function(e,t){if(!e)return;if("string"==typeof e)return g(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return g(e,t)}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function g(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function y(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function x(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?y(Object(n),!0).forEach((function(t){P(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):y(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function w(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function O(e,t,n){return t&&w(e.prototype,t),n&&w(e,n),e}function E(e,t){return(E=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function S(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=C(e);if(t){var o=C(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return k(this,n)}}function k(e,t){return!t||"object"!==m(t)&&"function"!=typeof t?j(e):t}function j(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function C(e){return(C=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function P(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var T=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&E(e,t)}(n,e);var t=S(n);function n(e){var r;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,n),P(j(r=t.call(this,e)),"onDragStart",(function(e,t){if((0,d.default)("Draggable: onDragStart: %j",t),!1===r.props.onStart(e,(0,c.createDraggableData)(j(r),t)))return!1;r.setState({dragging:!0,dragged:!0})})),P(j(r),"onDrag",(function(e,t){if(!r.state.dragging)return!1;(0,d.default)("Draggable: onDrag: %j",t);var n=(0,c.createDraggableData)(j(r),t),o={x:n.x,y:n.y};if(r.props.bounds){var a=o.x,i=o.y;o.x+=r.state.slackX,o.y+=r.state.slackY;var l=b((0,c.getBoundPosition)(j(r),o.x,o.y),2),u=l[0],s=l[1];o.x=u,o.y=s,o.slackX=r.state.slackX+(a-o.x),o.slackY=r.state.slackY+(i-o.y),n.x=o.x,n.y=o.y,n.deltaX=o.x-r.state.x,n.deltaY=o.y-r.state.y}if(!1===r.props.onDrag(e,n))return!1;r.setState(o)})),P(j(r),"onDragStop",(function(e,t){if(!r.state.dragging)return!1;if(!1===r.props.onStop(e,(0,c.createDraggableData)(j(r),t)))return!1;(0,d.default)("Draggable: onDragStop: %j",t);var n={dragging:!1,slackX:0,slackY:0};if(Boolean(r.props.position)){var o=r.props.position,a=o.x,i=o.y;n.x=a,n.y=i}r.setState(n)})),r.state={dragging:!1,dragged:!1,x:e.position?e.position.x:e.defaultPosition.x,y:e.position?e.position.y:e.defaultPosition.y,prevPropsPosition:x({},e.position),slackX:0,slackY:0,isElementSVG:!1},!e.position||e.onDrag||e.onStop||console.warn("A `position` was applied to this <Draggable>, without drag handlers. This will make this component effectively undraggable. Please attach `onDrag` or `onStop` handlers so you can adjust the `position` of this element."),r}return O(n,null,[{key:"getDerivedStateFromProps",value:function(e,t){var n=e.position,r=t.prevPropsPosition;return!n||r&&n.x===r.x&&n.y===r.y?null:((0,d.default)("Draggable: getDerivedStateFromProps %j",{position:n,prevPropsPosition:r}),{x:n.x,y:n.y,prevPropsPosition:x({},n)})}}]),O(n,[{key:"componentDidMount",value:function(){void 0!==window.SVGElement&&this.findDOMNode()instanceof window.SVGElement&&this.setState({isElementSVG:!0})}},{key:"componentWillUnmount",value:function(){this.setState({dragging:!1})}},{key:"findDOMNode",value:function(){return this.props.nodeRef?this.props.nodeRef.current:a.default.findDOMNode(this)}},{key:"render",value:function(){var e,t=this.props,n=(t.axis,t.bounds,t.children),o=t.defaultPosition,a=t.defaultClassName,u=t.defaultClassNameDragging,d=t.defaultClassNameDragged,f=t.position,p=t.positionOffset,m=(t.scale,v(t,["axis","bounds","children","defaultPosition","defaultClassName","defaultClassNameDragging","defaultClassNameDragged","position","positionOffset","scale"])),b={},g=null,y=!Boolean(f)||this.state.dragging,w=f||o,O={x:(0,c.canDragX)(this)&&y?this.state.x:w.x,y:(0,c.canDragY)(this)&&y?this.state.y:w.y};this.state.isElementSVG?g=(0,l.createSVGTransform)(O,p):b=(0,l.createCSSTransform)(O,p);var E=(0,i.default)(n.props.className||"",a,(P(e={},u,this.state.dragging),P(e,d,this.state.dragged),e));return r.createElement(s.default,h({},m,{onStart:this.onDragStart,onDrag:this.onDrag,onStop:this.onDragStop}),r.cloneElement(r.Children.only(n),{className:E,style:x(x({},n.props.style),b),transform:g}))}}]),n}(r.Component);t.default=T,P(T,"displayName","Draggable"),P(T,"propTypes",x(x({},s.default.propTypes),{},{axis:o.default.oneOf(["both","x","y","none"]),bounds:o.default.oneOfType([o.default.shape({left:o.default.number,right:o.default.number,top:o.default.number,bottom:o.default.number}),o.default.string,o.default.oneOf([!1])]),defaultClassName:o.default.string,defaultClassNameDragging:o.default.string,defaultClassNameDragged:o.default.string,defaultPosition:o.default.shape({x:o.default.number,y:o.default.number}),positionOffset:o.default.shape({x:o.default.oneOfType([o.default.number,o.default.string]),y:o.default.oneOfType([o.default.number,o.default.string])}),position:o.default.shape({x:o.default.number,y:o.default.number}),className:u.dontSetMe,style:u.dontSetMe,transform:u.dontSetMe})),P(T,"defaultProps",x(x({},s.default.defaultProps),{},{axis:"both",bounds:!1,defaultClassName:"react-draggable",defaultClassNameDragging:"react-draggable-dragging",defaultClassNameDragged:"react-draggable-dragged",defaultPosition:{x:0,y:0},position:null,scale:1}))},function(e,t,n){var r;
/*!
  Copyright (c) 2017 Jed Watson.
  Licensed under the MIT License (MIT), see
  http://jedwatson.github.io/classnames
*/!function(){"use strict";var n={}.hasOwnProperty;function o(){for(var e=[],t=0;t<arguments.length;t++){var r=arguments[t];if(r){var a=typeof r;if("string"===a||"number"===a)e.push(r);else if(Array.isArray(r)&&r.length){var i=o.apply(null,r);i&&e.push(i)}else if("object"===a)for(var l in r)n.call(r,l)&&r[l]&&e.push(l)}}return e.join(" ")}e.exports?(o.default=o,e.exports=o):void 0===(r=function(){return o}.apply(t,[]))||(e.exports=r)}()},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.getPrefix=o,t.browserPrefixToKey=a,t.browserPrefixToStyle=function(e,t){return t?"-".concat(t.toLowerCase(),"-").concat(e):e},t.default=void 0;var r=["Moz","Webkit","O","ms"];function o(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"transform";if("undefined"==typeof window||void 0===window.document)return"";var t=window.document.documentElement.style;if(e in t)return"";for(var n=0;n<r.length;n++)if(a(e,r[n])in t)return r[n];return""}function a(e,t){return t?"".concat(t).concat(function(e){for(var t="",n=!0,r=0;r<e.length;r++)n?(t+=e[r].toUpperCase(),n=!1):"-"===e[r]?n=!0:t+=e[r];return t}(e)):e}var i=o();t.default=i},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r=function(e){if(e&&e.__esModule)return e;if(null===e||"object"!==f(e)&&"function"!=typeof e)return{default:e};var t=d();if(t&&t.has(e))return t.get(e);var n={},r=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var o in e)if(Object.prototype.hasOwnProperty.call(e,o)){var a=r?Object.getOwnPropertyDescriptor(e,o):null;a&&(a.get||a.set)?Object.defineProperty(n,o,a):n[o]=e[o]}n.default=e,t&&t.set(e,n);return n}(n(0)),o=s(n(4)),a=s(n(10)),i=n(56),l=n(73),c=n(45),u=s(n(74));function s(e){return e&&e.__esModule?e:{default:e}}function d(){if("function"!=typeof WeakMap)return null;var e=new WeakMap;return d=function(){return e},e}function f(e){return(f="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function p(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(e)))return;var n=[],r=!0,o=!1,a=void 0;try{for(var i,l=e[Symbol.iterator]();!(r=(i=l.next()).done)&&(n.push(i.value),!t||n.length!==t);r=!0);}catch(e){o=!0,a=e}finally{try{r||null==l.return||l.return()}finally{if(o)throw a}}return n}(e,t)||function(e,t){if(!e)return;if("string"==typeof e)return m(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return m(e,t)}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function m(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function h(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function v(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function b(e,t){return(b=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function g(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=w(e);if(t){var o=w(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return y(this,n)}}function y(e,t){return!t||"object"!==f(t)&&"function"!=typeof t?x(e):t}function x(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function w(e){return(w=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function O(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var E={start:"touchstart",move:"touchmove",stop:"touchend"},S={start:"mousedown",move:"mousemove",stop:"mouseup"},k=S,j=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&b(e,t)}(s,e);var t,n,o,c=g(s);function s(){var e;h(this,s);for(var t=arguments.length,n=new Array(t),r=0;r<t;r++)n[r]=arguments[r];return O(x(e=c.call.apply(c,[this].concat(n))),"state",{dragging:!1,lastX:NaN,lastY:NaN,touchIdentifier:null}),O(x(e),"mounted",!1),O(x(e),"handleDragStart",(function(t){if(e.props.onMouseDown(t),!e.props.allowAnyClick&&"number"==typeof t.button&&0!==t.button)return!1;var n=e.findDOMNode();if(!n||!n.ownerDocument||!n.ownerDocument.body)throw new Error("<DraggableCore> not mounted on DragStart!");var r=n.ownerDocument;if(!(e.props.disabled||!(t.target instanceof r.defaultView.Node)||e.props.handle&&!(0,i.matchesSelectorAndParentsTo)(t.target,e.props.handle,n)||e.props.cancel&&(0,i.matchesSelectorAndParentsTo)(t.target,e.props.cancel,n))){"touchstart"===t.type&&t.preventDefault();var o=(0,i.getTouchIdentifier)(t);e.setState({touchIdentifier:o});var a=(0,l.getControlPosition)(t,o,x(e));if(null!=a){var c=a.x,s=a.y,d=(0,l.createCoreData)(x(e),c,s);(0,u.default)("DraggableCore: handleDragStart: %j",d),(0,u.default)("calling",e.props.onStart),!1!==e.props.onStart(t,d)&&!1!==e.mounted&&(e.props.enableUserSelectHack&&(0,i.addUserSelectStyles)(r),e.setState({dragging:!0,lastX:c,lastY:s}),(0,i.addEvent)(r,k.move,e.handleDrag),(0,i.addEvent)(r,k.stop,e.handleDragStop))}}})),O(x(e),"handleDrag",(function(t){var n=(0,l.getControlPosition)(t,e.state.touchIdentifier,x(e));if(null!=n){var r=n.x,o=n.y;if(Array.isArray(e.props.grid)){var a=r-e.state.lastX,i=o-e.state.lastY,c=p((0,l.snapToGrid)(e.props.grid,a,i),2);if(a=c[0],i=c[1],!a&&!i)return;r=e.state.lastX+a,o=e.state.lastY+i}var s=(0,l.createCoreData)(x(e),r,o);if((0,u.default)("DraggableCore: handleDrag: %j",s),!1!==e.props.onDrag(t,s)&&!1!==e.mounted)e.setState({lastX:r,lastY:o});else try{e.handleDragStop(new MouseEvent("mouseup"))}catch(t){var d=document.createEvent("MouseEvents");d.initMouseEvent("mouseup",!0,!0,window,0,0,0,0,0,!1,!1,!1,!1,0,null),e.handleDragStop(d)}}})),O(x(e),"handleDragStop",(function(t){if(e.state.dragging){var n=(0,l.getControlPosition)(t,e.state.touchIdentifier,x(e));if(null!=n){var r=n.x,o=n.y,a=(0,l.createCoreData)(x(e),r,o);if(!1===e.props.onStop(t,a)||!1===e.mounted)return!1;var c=e.findDOMNode();c&&e.props.enableUserSelectHack&&(0,i.removeUserSelectStyles)(c.ownerDocument),(0,u.default)("DraggableCore: handleDragStop: %j",a),e.setState({dragging:!1,lastX:NaN,lastY:NaN}),c&&((0,u.default)("DraggableCore: Removing handlers"),(0,i.removeEvent)(c.ownerDocument,k.move,e.handleDrag),(0,i.removeEvent)(c.ownerDocument,k.stop,e.handleDragStop))}}})),O(x(e),"onMouseDown",(function(t){return k=S,e.handleDragStart(t)})),O(x(e),"onMouseUp",(function(t){return k=S,e.handleDragStop(t)})),O(x(e),"onTouchStart",(function(t){return k=E,e.handleDragStart(t)})),O(x(e),"onTouchEnd",(function(t){return k=E,e.handleDragStop(t)})),e}return t=s,(n=[{key:"componentDidMount",value:function(){this.mounted=!0;var e=this.findDOMNode();e&&(0,i.addEvent)(e,E.start,this.onTouchStart,{passive:!1})}},{key:"componentWillUnmount",value:function(){this.mounted=!1;var e=this.findDOMNode();if(e){var t=e.ownerDocument;(0,i.removeEvent)(t,S.move,this.handleDrag),(0,i.removeEvent)(t,E.move,this.handleDrag),(0,i.removeEvent)(t,S.stop,this.handleDragStop),(0,i.removeEvent)(t,E.stop,this.handleDragStop),(0,i.removeEvent)(e,E.start,this.onTouchStart,{passive:!1}),this.props.enableUserSelectHack&&(0,i.removeUserSelectStyles)(t)}}},{key:"findDOMNode",value:function(){return this.props.nodeRef?this.props.nodeRef.current:a.default.findDOMNode(this)}},{key:"render",value:function(){return r.cloneElement(r.Children.only(this.props.children),{onMouseDown:this.onMouseDown,onMouseUp:this.onMouseUp,onTouchEnd:this.onTouchEnd})}}])&&v(t.prototype,n),o&&v(t,o),s}(r.Component);t.default=j,O(j,"displayName","DraggableCore"),O(j,"propTypes",{allowAnyClick:o.default.bool,disabled:o.default.bool,enableUserSelectHack:o.default.bool,offsetParent:function(e,t){if(e[t]&&1!==e[t].nodeType)throw new Error("Draggable's offsetParent must be a DOM Node.")},grid:o.default.arrayOf(o.default.number),handle:o.default.string,cancel:o.default.string,nodeRef:o.default.object,onStart:o.default.func,onDrag:o.default.func,onStop:o.default.func,onMouseDown:o.default.func,scale:o.default.number,className:c.dontSetMe,style:c.dontSetMe,transform:c.dontSetMe}),O(j,"defaultProps",{allowAnyClick:!1,cancel:null,disabled:!1,enableUserSelectHack:!0,offsetParent:null,handle:null,grid:null,transform:null,onStart:function(){},onDrag:function(){},onStop:function(){},onMouseDown:function(){},scale:1})},function(e,t){e.exports=Array.isArray||function(e){return"[object Array]"==Object.prototype.toString.call(e)}},function(e,t,n){"use strict";t.__esModule=!0,t.default=function(e){var t=(0,o.default)(e);return{getItem:function(e){return new Promise((function(n,r){n(t.getItem(e))}))},setItem:function(e,n){return new Promise((function(r,o){r(t.setItem(e,n))}))},removeItem:function(e){return new Promise((function(n,r){n(t.removeItem(e))}))}}};var r,o=(r=n(148))&&r.__esModule?r:{default:r}},function(e,t,n){"use strict";function r(e){return(r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function o(){}t.__esModule=!0,t.default=function(e){var t="".concat(e,"Storage");return function(e){if("object"!==("undefined"==typeof self?"undefined":r(self))||!(e in self))return!1;try{var t=self[e],n="redux-persist ".concat(e," test");t.setItem(n,"test"),t.getItem(n),t.removeItem(n)}catch(e){return!1}return!0}(t)?self[t]:a};var a={getItem:o,setItem:o,removeItem:o}},function(e,t,n){var r=n(150),o=n(151);"string"==typeof(o=o.__esModule?o.default:o)&&(o=[[e.i,o,""]]);var a={insert:"head",singleton:!1};r(o,a);e.exports=o.locals||{}},function(e,t,n){"use strict";var r,o=function(){return void 0===r&&(r=Boolean(window&&document&&document.all&&!window.atob)),r},a=function(){var e={};return function(t){if(void 0===e[t]){var n=document.querySelector(t);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}e[t]=n}return e[t]}}(),i=[];function l(e){for(var t=-1,n=0;n<i.length;n++)if(i[n].identifier===e){t=n;break}return t}function c(e,t){for(var n={},r=[],o=0;o<e.length;o++){var a=e[o],c=t.base?a[0]+t.base:a[0],u=n[c]||0,s="".concat(c," ").concat(u);n[c]=u+1;var d=l(s),f={css:a[1],media:a[2],sourceMap:a[3]};-1!==d?(i[d].references++,i[d].updater(f)):i.push({identifier:s,updater:v(f,t),references:1}),r.push(s)}return r}function u(e){var t=document.createElement("style"),r=e.attributes||{};if(void 0===r.nonce){var o=n.nc;o&&(r.nonce=o)}if(Object.keys(r).forEach((function(e){t.setAttribute(e,r[e])})),"function"==typeof e.insert)e.insert(t);else{var i=a(e.insert||"head");if(!i)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");i.appendChild(t)}return t}var s,d=(s=[],function(e,t){return s[e]=t,s.filter(Boolean).join("\n")});function f(e,t,n,r){var o=n?"":r.media?"@media ".concat(r.media," {").concat(r.css,"}"):r.css;if(e.styleSheet)e.styleSheet.cssText=d(t,o);else{var a=document.createTextNode(o),i=e.childNodes;i[t]&&e.removeChild(i[t]),i.length?e.insertBefore(a,i[t]):e.appendChild(a)}}function p(e,t,n){var r=n.css,o=n.media,a=n.sourceMap;if(o?e.setAttribute("media",o):e.removeAttribute("media"),a&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),e.styleSheet)e.styleSheet.cssText=r;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(r))}}var m=null,h=0;function v(e,t){var n,r,o;if(t.singleton){var a=h++;n=m||(m=u(t)),r=f.bind(null,n,a,!1),o=f.bind(null,n,a,!0)}else n=u(t),r=p.bind(null,n,t),o=function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)};return r(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;r(e=t)}else o()}}e.exports=function(e,t){(t=t||{}).singleton||"boolean"==typeof t.singleton||(t.singleton=o());var n=c(e=e||[],t);return function(e){if(e=e||[],"[object Array]"===Object.prototype.toString.call(e)){for(var r=0;r<n.length;r++){var o=l(n[r]);i[o].references--}for(var a=c(e,t),u=0;u<n.length;u++){var s=l(n[u]);0===i[s].references&&(i[s].updater(),i.splice(s,1))}n=a}}}},function(e,t,n){"use strict";n.r(t);var r=n(92),o=n.n(r)()(!0);o.push([e.i,"body {\r\n    margin: 0 auto;\r\n}\r\n","",{version:3,sources:["webpack://resources/src/layout/css/style.css"],names:[],mappings:"AAAA;IACI,cAAc;AAClB",sourcesContent:["body {\r\n    margin: 0 auto;\r\n}\r\n"],sourceRoot:""}]),t.default=o},function(e,t,n){"use strict";n.r(t);var r=n(0),o=n.n(r),a=n(10),i=n.n(a),l=n(4),c=n.n(l),u=o.a.createContext(null);var s=function(e){e()},d={notify:function(){}};function f(){var e=s,t=null,n=null;return{clear:function(){t=null,n=null},notify:function(){e((function(){for(var e=t;e;)e.callback(),e=e.next}))},get:function(){for(var e=[],n=t;n;)e.push(n),n=n.next;return e},subscribe:function(e){var r=!0,o=n={callback:e,next:null,prev:n};return o.prev?o.prev.next=o:t=o,function(){r&&null!==t&&(r=!1,o.next?o.next.prev=o.prev:n=o.prev,o.prev?o.prev.next=o.next:t=o.next)}}}}var p=function(){function e(e,t){this.store=e,this.parentSub=t,this.unsubscribe=null,this.listeners=d,this.handleChangeWrapper=this.handleChangeWrapper.bind(this)}var t=e.prototype;return t.addNestedSub=function(e){return this.trySubscribe(),this.listeners.subscribe(e)},t.notifyNestedSubs=function(){this.listeners.notify()},t.handleChangeWrapper=function(){this.onStateChange&&this.onStateChange()},t.isSubscribed=function(){return Boolean(this.unsubscribe)},t.trySubscribe=function(){this.unsubscribe||(this.unsubscribe=this.parentSub?this.parentSub.addNestedSub(this.handleChangeWrapper):this.store.subscribe(this.handleChangeWrapper),this.listeners=f())},t.tryUnsubscribe=function(){this.unsubscribe&&(this.unsubscribe(),this.unsubscribe=null,this.listeners.clear(),this.listeners=d)},e}();var m=function(e){var t=e.store,n=e.context,a=e.children,i=Object(r.useMemo)((function(){var e=new p(t);return e.onStateChange=e.notifyNestedSubs,{store:t,subscription:e}}),[t]),l=Object(r.useMemo)((function(){return t.getState()}),[t]);Object(r.useEffect)((function(){var e=i.subscription;return e.trySubscribe(),l!==t.getState()&&e.notifyNestedSubs(),function(){e.tryUnsubscribe(),e.onStateChange=null}}),[i,l]);var c=n||u;return o.a.createElement(c.Provider,{value:i},a)},h=n(1),v=n(11),b=n(21),g=n.n(b),y=n(27),x="undefined"!=typeof window&&void 0!==window.document&&void 0!==window.document.createElement?r.useLayoutEffect:r.useEffect,w=[],O=[null,null];function E(e,t){var n=e[1];return[t.payload,n+1]}function S(e,t,n){x((function(){return e.apply(void 0,t)}),n)}function k(e,t,n,r,o,a,i){e.current=r,t.current=o,n.current=!1,a.current&&(a.current=null,i())}function j(e,t,n,r,o,a,i,l,c,u){if(e){var s=!1,d=null,f=function(){if(!s){var e,n,f=t.getState();try{e=r(f,o.current)}catch(e){n=e,d=e}n||(d=null),e===a.current?i.current||c():(a.current=e,l.current=e,i.current=!0,u({type:"STORE_UPDATED",payload:{error:n}}))}};n.onStateChange=f,n.trySubscribe(),f();return function(){if(s=!0,n.tryUnsubscribe(),n.onStateChange=null,d)throw d}}}var C=function(){return[null,0]};function P(e,t){void 0===t&&(t={});var n=t,a=n.getDisplayName,i=void 0===a?function(e){return"ConnectAdvanced("+e+")"}:a,l=n.methodName,c=void 0===l?"connectAdvanced":l,s=n.renderCountProp,d=void 0===s?void 0:s,f=n.shouldHandleStateChanges,m=void 0===f||f,b=n.storeKey,x=void 0===b?"store":b,P=(n.withRef,n.forwardRef),T=void 0!==P&&P,N=n.context,R=void 0===N?u:N,M=Object(v.a)(n,["getDisplayName","methodName","renderCountProp","shouldHandleStateChanges","storeKey","withRef","forwardRef","context"]),D=R;return function(t){var n=t.displayName||t.name||"Component",a=i(n),l=Object(h.a)({},M,{getDisplayName:i,methodName:c,renderCountProp:d,shouldHandleStateChanges:m,storeKey:x,displayName:a,wrappedComponentName:n,WrappedComponent:t}),u=M.pure;var s=u?r.useMemo:function(e){return e()};function f(n){var a=Object(r.useMemo)((function(){var e=n.reactReduxForwardedRef,t=Object(v.a)(n,["reactReduxForwardedRef"]);return[n.context,e,t]}),[n]),i=a[0],c=a[1],u=a[2],d=Object(r.useMemo)((function(){return i&&i.Consumer&&Object(y.isContextConsumer)(o.a.createElement(i.Consumer,null))?i:D}),[i,D]),f=Object(r.useContext)(d),b=Boolean(n.store)&&Boolean(n.store.getState)&&Boolean(n.store.dispatch);Boolean(f)&&Boolean(f.store);var g=b?n.store:f.store,x=Object(r.useMemo)((function(){return function(t){return e(t.dispatch,l)}(g)}),[g]),P=Object(r.useMemo)((function(){if(!m)return O;var e=new p(g,b?null:f.subscription),t=e.notifyNestedSubs.bind(e);return[e,t]}),[g,b,f]),T=P[0],N=P[1],R=Object(r.useMemo)((function(){return b?f:Object(h.a)({},f,{subscription:T})}),[b,f,T]),M=Object(r.useReducer)(E,w,C),A=M[0][0],I=M[1];if(A&&A.error)throw A.error;var L=Object(r.useRef)(),_=Object(r.useRef)(u),z=Object(r.useRef)(),F=Object(r.useRef)(!1),W=s((function(){return z.current&&u===_.current?z.current:x(g.getState(),u)}),[g,A,u]);S(k,[_,L,F,u,W,z,N]),S(j,[m,g,T,x,_,L,F,z,N,I],[g,T,x]);var B=Object(r.useMemo)((function(){return o.a.createElement(t,Object(h.a)({},W,{ref:c}))}),[c,t,W]);return Object(r.useMemo)((function(){return m?o.a.createElement(d.Provider,{value:R},B):B}),[d,B,R])}var b=u?o.a.memo(f):f;if(b.WrappedComponent=t,b.displayName=a,T){var P=o.a.forwardRef((function(e,t){return o.a.createElement(b,Object(h.a)({},e,{reactReduxForwardedRef:t}))}));return P.displayName=a,P.WrappedComponent=t,g()(P,t)}return g()(b,t)}}function T(e,t){return e===t?0!==e||0!==t||1/e==1/t:e!=e&&t!=t}function N(e,t){if(T(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(var o=0;o<n.length;o++)if(!Object.prototype.hasOwnProperty.call(t,n[o])||!T(e[n[o]],t[n[o]]))return!1;return!0}var R=n(20);function M(e){return function(t,n){var r=e(t,n);function o(){return r}return o.dependsOnOwnProps=!1,o}}function D(e){return null!==e.dependsOnOwnProps&&void 0!==e.dependsOnOwnProps?Boolean(e.dependsOnOwnProps):1!==e.length}function A(e,t){return function(t,n){n.displayName;var r=function(e,t){return r.dependsOnOwnProps?r.mapToProps(e,t):r.mapToProps(e)};return r.dependsOnOwnProps=!0,r.mapToProps=function(t,n){r.mapToProps=e,r.dependsOnOwnProps=D(e);var o=r(t,n);return"function"==typeof o&&(r.mapToProps=o,r.dependsOnOwnProps=D(o),o=r(t,n)),o},r}}var I=[function(e){return"function"==typeof e?A(e):void 0},function(e){return e?void 0:M((function(e){return{dispatch:e}}))},function(e){return e&&"object"==typeof e?M((function(t){return Object(R.bindActionCreators)(e,t)})):void 0}];var L=[function(e){return"function"==typeof e?A(e):void 0},function(e){return e?void 0:M((function(){return{}}))}];function _(e,t,n){return Object(h.a)({},n,{},e,{},t)}var z=[function(e){return"function"==typeof e?function(e){return function(t,n){n.displayName;var r,o=n.pure,a=n.areMergedPropsEqual,i=!1;return function(t,n,l){var c=e(t,n,l);return i?o&&a(c,r)||(r=c):(i=!0,r=c),r}}}(e):void 0},function(e){return e?void 0:function(){return _}}];function F(e,t,n,r){return function(o,a){return n(e(o,a),t(r,a),a)}}function W(e,t,n,r,o){var a,i,l,c,u,s=o.areStatesEqual,d=o.areOwnPropsEqual,f=o.areStatePropsEqual,p=!1;function m(o,p){var m,h,v=!d(p,i),b=!s(o,a);return a=o,i=p,v&&b?(l=e(a,i),t.dependsOnOwnProps&&(c=t(r,i)),u=n(l,c,i)):v?(e.dependsOnOwnProps&&(l=e(a,i)),t.dependsOnOwnProps&&(c=t(r,i)),u=n(l,c,i)):b?(m=e(a,i),h=!f(m,l),l=m,h&&(u=n(l,c,i)),u):u}return function(o,s){return p?m(o,s):(l=e(a=o,i=s),c=t(r,i),u=n(l,c,i),p=!0,u)}}function B(e,t){var n=t.initMapStateToProps,r=t.initMapDispatchToProps,o=t.initMergeProps,a=Object(v.a)(t,["initMapStateToProps","initMapDispatchToProps","initMergeProps"]),i=n(e,a),l=r(e,a),c=o(e,a);return(a.pure?W:F)(i,l,c,e,a)}function H(e,t,n){for(var r=t.length-1;r>=0;r--){var o=t[r](e);if(o)return o}return function(t,r){throw new Error("Invalid value of type "+typeof e+" for "+n+" argument when connecting component "+r.wrappedComponentName+".")}}function U(e,t){return e===t}function $(e){var t=void 0===e?{}:e,n=t.connectHOC,r=void 0===n?P:n,o=t.mapStateToPropsFactories,a=void 0===o?L:o,i=t.mapDispatchToPropsFactories,l=void 0===i?I:i,c=t.mergePropsFactories,u=void 0===c?z:c,s=t.selectorFactory,d=void 0===s?B:s;return function(e,t,n,o){void 0===o&&(o={});var i=o,c=i.pure,s=void 0===c||c,f=i.areStatesEqual,p=void 0===f?U:f,m=i.areOwnPropsEqual,b=void 0===m?N:m,g=i.areStatePropsEqual,y=void 0===g?N:g,x=i.areMergedPropsEqual,w=void 0===x?N:x,O=Object(v.a)(i,["pure","areStatesEqual","areOwnPropsEqual","areStatePropsEqual","areMergedPropsEqual"]),E=H(e,a,"mapStateToProps"),S=H(t,l,"mapDispatchToProps"),k=H(n,u,"mergeProps");return r(d,Object(h.a)({methodName:"connect",getDisplayName:function(e){return"Connect("+e+")"},shouldHandleStateChanges:Boolean(e),initMapStateToProps:E,initMapDispatchToProps:S,initMergeProps:k,pure:s,areStatesEqual:p,areOwnPropsEqual:b,areStatePropsEqual:y,areMergedPropsEqual:w},O))}}var V=$();var q;q=a.unstable_batchedUpdates,s=q;var X="@@router/LOCATION_CHANGE",K=function(e){return function(){for(var t=arguments.length,n=new Array(t),r=0;r<t;r++)n[r]=arguments[r];return{type:"@@router/CALL_HISTORY_METHOD",payload:{method:e,args:n}}}},Y=K("push"),G=(K("replace"),K("go"),K("goBack"),K("goForward"),n(12));function Q(e){return"/"===e.charAt(0)}function J(e,t){for(var n=t,r=n+1,o=e.length;r<o;n+=1,r+=1)e[n]=e[r];e.pop()}var Z=function(e,t){void 0===t&&(t="");var n,r=e&&e.split("/")||[],o=t&&t.split("/")||[],a=e&&Q(e),i=t&&Q(t),l=a||i;if(e&&Q(e)?o=r:r.length&&(o.pop(),o=o.concat(r)),!o.length)return"/";if(o.length){var c=o[o.length-1];n="."===c||".."===c||""===c}else n=!1;for(var u=0,s=o.length;s>=0;s--){var d=o[s];"."===d?J(o,s):".."===d?(J(o,s),u++):u&&(J(o,s),u--)}if(!l)for(;u--;u)o.unshift("..");!l||""===o[0]||o[0]&&Q(o[0])||o.unshift("");var f=o.join("/");return n&&"/"!==f.substr(-1)&&(f+="/"),f};var ee=function(e,t){if(!e)throw new Error("Invariant failed")};function te(e){return"/"===e.charAt(0)?e:"/"+e}function ne(e){return"/"===e.charAt(0)?e.substr(1):e}function re(e,t){return function(e,t){return 0===e.toLowerCase().indexOf(t.toLowerCase())&&-1!=="/?#".indexOf(e.charAt(t.length))}(e,t)?e.substr(t.length):e}function oe(e){return"/"===e.charAt(e.length-1)?e.slice(0,-1):e}function ae(e){var t=e.pathname,n=e.search,r=e.hash,o=t||"/";return n&&"?"!==n&&(o+="?"===n.charAt(0)?n:"?"+n),r&&"#"!==r&&(o+="#"===r.charAt(0)?r:"#"+r),o}function ie(e,t,n,r){var o;"string"==typeof e?(o=function(e){var t=e||"/",n="",r="",o=t.indexOf("#");-1!==o&&(r=t.substr(o),t=t.substr(0,o));var a=t.indexOf("?");return-1!==a&&(n=t.substr(a),t=t.substr(0,a)),{pathname:t,search:"?"===n?"":n,hash:"#"===r?"":r}}(e)).state=t:(void 0===(o=Object(h.a)({},e)).pathname&&(o.pathname=""),o.search?"?"!==o.search.charAt(0)&&(o.search="?"+o.search):o.search="",o.hash?"#"!==o.hash.charAt(0)&&(o.hash="#"+o.hash):o.hash="",void 0!==t&&void 0===o.state&&(o.state=t));try{o.pathname=decodeURI(o.pathname)}catch(e){throw e instanceof URIError?new URIError('Pathname "'+o.pathname+'" could not be decoded. This is likely caused by an invalid percent-encoding.'):e}return n&&(o.key=n),r?o.pathname?"/"!==o.pathname.charAt(0)&&(o.pathname=Z(o.pathname,r.pathname)):o.pathname=r.pathname:o.pathname||(o.pathname="/"),o}function le(){var e=null;var t=[];return{setPrompt:function(t){return e=t,function(){e===t&&(e=null)}},confirmTransitionTo:function(t,n,r,o){if(null!=e){var a="function"==typeof e?e(t,n):e;"string"==typeof a?"function"==typeof r?r(a,o):o(!0):o(!1!==a)}else o(!0)},appendListener:function(e){var n=!0;function r(){n&&e.apply(void 0,arguments)}return t.push(r),function(){n=!1,t=t.filter((function(e){return e!==r}))}},notifyListeners:function(){for(var e=arguments.length,n=new Array(e),r=0;r<e;r++)n[r]=arguments[r];t.forEach((function(e){return e.apply(void 0,n)}))}}}var ce=!("undefined"==typeof window||!window.document||!window.document.createElement);function ue(e,t){t(window.confirm(e))}function se(){try{return window.history.state||{}}catch(e){return{}}}function de(e){void 0===e&&(e={}),ce||ee(!1);var t,n=window.history,r=(-1===(t=window.navigator.userAgent).indexOf("Android 2.")&&-1===t.indexOf("Android 4.0")||-1===t.indexOf("Mobile Safari")||-1!==t.indexOf("Chrome")||-1!==t.indexOf("Windows Phone"))&&window.history&&"pushState"in window.history,o=!(-1===window.navigator.userAgent.indexOf("Trident")),a=e,i=a.forceRefresh,l=void 0!==i&&i,c=a.getUserConfirmation,u=void 0===c?ue:c,s=a.keyLength,d=void 0===s?6:s,f=e.basename?oe(te(e.basename)):"";function p(e){var t=e||{},n=t.key,r=t.state,o=window.location,a=o.pathname+o.search+o.hash;return f&&(a=re(a,f)),ie(a,r,n)}function m(){return Math.random().toString(36).substr(2,d)}var v=le();function b(e){Object(h.a)(T,e),T.length=n.length,v.notifyListeners(T.location,T.action)}function g(e){(function(e){return void 0===e.state&&-1===navigator.userAgent.indexOf("CriOS")})(e)||w(p(e.state))}function y(){w(p(se()))}var x=!1;function w(e){if(x)x=!1,b();else{v.confirmTransitionTo(e,"POP",u,(function(t){t?b({action:"POP",location:e}):function(e){var t=T.location,n=E.indexOf(t.key);-1===n&&(n=0);var r=E.indexOf(e.key);-1===r&&(r=0);var o=n-r;o&&(x=!0,k(o))}(e)}))}}var O=p(se()),E=[O.key];function S(e){return f+ae(e)}function k(e){n.go(e)}var j=0;function C(e){1===(j+=e)&&1===e?(window.addEventListener("popstate",g),o&&window.addEventListener("hashchange",y)):0===j&&(window.removeEventListener("popstate",g),o&&window.removeEventListener("hashchange",y))}var P=!1;var T={length:n.length,action:"POP",location:O,createHref:S,push:function(e,t){var o=ie(e,t,m(),T.location);v.confirmTransitionTo(o,"PUSH",u,(function(e){if(e){var t=S(o),a=o.key,i=o.state;if(r)if(n.pushState({key:a,state:i},null,t),l)window.location.href=t;else{var c=E.indexOf(T.location.key),u=E.slice(0,c+1);u.push(o.key),E=u,b({action:"PUSH",location:o})}else window.location.href=t}}))},replace:function(e,t){var o=ie(e,t,m(),T.location);v.confirmTransitionTo(o,"REPLACE",u,(function(e){if(e){var t=S(o),a=o.key,i=o.state;if(r)if(n.replaceState({key:a,state:i},null,t),l)window.location.replace(t);else{var c=E.indexOf(T.location.key);-1!==c&&(E[c]=o.key),b({action:"REPLACE",location:o})}else window.location.replace(t)}}))},go:k,goBack:function(){k(-1)},goForward:function(){k(1)},block:function(e){void 0===e&&(e=!1);var t=v.setPrompt(e);return P||(C(1),P=!0),function(){return P&&(P=!1,C(-1)),t()}},listen:function(e){var t=v.appendListener(e);return C(1),function(){C(-1),t()}}};return T}var fe={hashbang:{encodePath:function(e){return"!"===e.charAt(0)?e:"!/"+ne(e)},decodePath:function(e){return"!"===e.charAt(0)?e.substr(1):e}},noslash:{encodePath:ne,decodePath:te},slash:{encodePath:te,decodePath:te}};function pe(e){var t=e.indexOf("#");return-1===t?e:e.slice(0,t)}function me(){var e=window.location.href,t=e.indexOf("#");return-1===t?"":e.substring(t+1)}function he(e){window.location.replace(pe(window.location.href)+"#"+e)}function ve(e){void 0===e&&(e={}),ce||ee(!1);var t=window.history,n=(window.navigator.userAgent.indexOf("Firefox"),e),r=n.getUserConfirmation,o=void 0===r?ue:r,a=n.hashType,i=void 0===a?"slash":a,l=e.basename?oe(te(e.basename)):"",c=fe[i],u=c.encodePath,s=c.decodePath;function d(){var e=s(me());return l&&(e=re(e,l)),ie(e)}var f=le();function p(e){Object(h.a)(j,e),j.length=t.length,f.notifyListeners(j.location,j.action)}var m=!1,v=null;function b(){var e,t,n=me(),r=u(n);if(n!==r)he(r);else{var a=d(),i=j.location;if(!m&&(t=a,(e=i).pathname===t.pathname&&e.search===t.search&&e.hash===t.hash))return;if(v===ae(a))return;v=null,function(e){if(m)m=!1,p();else{f.confirmTransitionTo(e,"POP",o,(function(t){t?p({action:"POP",location:e}):function(e){var t=j.location,n=w.lastIndexOf(ae(t));-1===n&&(n=0);var r=w.lastIndexOf(ae(e));-1===r&&(r=0);var o=n-r;o&&(m=!0,O(o))}(e)}))}}(a)}}var g=me(),y=u(g);g!==y&&he(y);var x=d(),w=[ae(x)];function O(e){t.go(e)}var E=0;function S(e){1===(E+=e)&&1===e?window.addEventListener("hashchange",b):0===E&&window.removeEventListener("hashchange",b)}var k=!1;var j={length:t.length,action:"POP",location:x,createHref:function(e){var t=document.querySelector("base"),n="";return t&&t.getAttribute("href")&&(n=pe(window.location.href)),n+"#"+u(l+ae(e))},push:function(e,t){var n=ie(e,void 0,void 0,j.location);f.confirmTransitionTo(n,"PUSH",o,(function(e){if(e){var t=ae(n),r=u(l+t);if(me()!==r){v=t,function(e){window.location.hash=e}(r);var o=w.lastIndexOf(ae(j.location)),a=w.slice(0,o+1);a.push(t),w=a,p({action:"PUSH",location:n})}else p()}}))},replace:function(e,t){var n=ie(e,void 0,void 0,j.location);f.confirmTransitionTo(n,"REPLACE",o,(function(e){if(e){var t=ae(n),r=u(l+t);me()!==r&&(v=t,he(r));var o=w.indexOf(ae(j.location));-1!==o&&(w[o]=t),p({action:"REPLACE",location:n})}}))},go:O,goBack:function(){O(-1)},goForward:function(){O(1)},block:function(e){void 0===e&&(e=!1);var t=f.setPrompt(e);return k||(S(1),k=!0),function(){return k&&(k=!1,S(-1)),t()}},listen:function(e){var t=f.appendListener(e);return S(1),function(){S(-1),t()}}};return j}function be(e,t,n){return Math.min(Math.max(e,t),n)}function ge(e){void 0===e&&(e={});var t=e,n=t.getUserConfirmation,r=t.initialEntries,o=void 0===r?["/"]:r,a=t.initialIndex,i=void 0===a?0:a,l=t.keyLength,c=void 0===l?6:l,u=le();function s(e){Object(h.a)(b,e),b.length=b.entries.length,u.notifyListeners(b.location,b.action)}function d(){return Math.random().toString(36).substr(2,c)}var f=be(i,0,o.length-1),p=o.map((function(e){return ie(e,void 0,"string"==typeof e?d():e.key||d())})),m=ae;function v(e){var t=be(b.index+e,0,b.entries.length-1),r=b.entries[t];u.confirmTransitionTo(r,"POP",n,(function(e){e?s({action:"POP",location:r,index:t}):s()}))}var b={length:p.length,action:"POP",location:p[f],index:f,entries:p,createHref:m,push:function(e,t){var r=ie(e,t,d(),b.location);u.confirmTransitionTo(r,"PUSH",n,(function(e){if(e){var t=b.index+1,n=b.entries.slice(0);n.length>t?n.splice(t,n.length-t,r):n.push(r),s({action:"PUSH",location:r,index:t,entries:n})}}))},replace:function(e,t){var r=ie(e,t,d(),b.location);u.confirmTransitionTo(r,"REPLACE",n,(function(e){e&&(b.entries[b.index]=r,s({action:"REPLACE",location:r}))}))},go:v,goBack:function(){v(-1)},goForward:function(){v(1)},canGo:function(e){var t=b.index+e;return t>=0&&t<b.entries.length},block:function(e){return void 0===e&&(e=!1),u.setPrompt(e)},listen:function(e){return u.appendListener(e)}};return b}var ye=n(59),xe=n(60),we=n.n(xe),Oe=function(e){var t=Object(ye.a)();return t.displayName=e,t}("Router-History"),Ee=function(e){var t=Object(ye.a)();return t.displayName=e,t}("Router"),Se=function(e){function t(t){var n;return(n=e.call(this,t)||this).state={location:t.history.location},n._isMounted=!1,n._pendingLocation=null,t.staticContext||(n.unlisten=t.history.listen((function(e){n._isMounted?n.setState({location:e}):n._pendingLocation=e}))),n}Object(G.a)(t,e),t.computeRootMatch=function(e){return{path:"/",url:"/",params:{},isExact:"/"===e}};var n=t.prototype;return n.componentDidMount=function(){this._isMounted=!0,this._pendingLocation&&this.setState({location:this._pendingLocation})},n.componentWillUnmount=function(){this.unlisten&&this.unlisten()},n.render=function(){return o.a.createElement(Ee.Provider,{value:{history:this.props.history,location:this.state.location,match:t.computeRootMatch(this.state.location.pathname),staticContext:this.props.staticContext}},o.a.createElement(Oe.Provider,{children:this.props.children||null,value:this.props.history}))},t}(o.a.Component);o.a.Component;o.a.Component;var ke={},je=0;function Ce(e,t){void 0===t&&(t={}),("string"==typeof t||Array.isArray(t))&&(t={path:t});var n=t,r=n.path,o=n.exact,a=void 0!==o&&o,i=n.strict,l=void 0!==i&&i,c=n.sensitive,u=void 0!==c&&c;return[].concat(r).reduce((function(t,n){if(!n&&""!==n)return null;if(t)return t;var r=function(e,t){var n=""+t.end+t.strict+t.sensitive,r=ke[n]||(ke[n]={});if(r[e])return r[e];var o=[],a={regexp:we()(e,o,t),keys:o};return je<1e4&&(r[e]=a,je++),a}(n,{end:a,strict:l,sensitive:u}),o=r.regexp,i=r.keys,c=o.exec(e);if(!c)return null;var s=c[0],d=c.slice(1),f=e===s;return a&&!f?null:{path:n,url:"/"===n&&""===s?"/":s,isExact:f,params:i.reduce((function(e,t,n){return e[t.name]=d[n],e}),{})}}),null)}var Pe=function(e){function t(){return e.apply(this,arguments)||this}return Object(G.a)(t,e),t.prototype.render=function(){var e=this;return o.a.createElement(Ee.Consumer,null,(function(t){t||ee(!1);var n=e.props.location||t.location,r=e.props.computedMatch?e.props.computedMatch:e.props.path?Ce(n.pathname,e.props):t.match,a=Object(h.a)({},t,{location:n,match:r}),i=e.props,l=i.children,c=i.component,u=i.render;return Array.isArray(l)&&0===l.length&&(l=null),o.a.createElement(Ee.Provider,{value:a},a.match?l?"function"==typeof l?l(a):l:c?o.a.createElement(c,a):u?u(a):null:"function"==typeof l?l(a):null)}))},t}(o.a.Component);function Te(e){return"/"===e.charAt(0)?e:"/"+e}function Ne(e,t){if(!e)return t;var n=Te(e);return 0!==t.pathname.indexOf(n)?t:Object(h.a)({},t,{pathname:t.pathname.substr(n.length)})}function Re(e){return"string"==typeof e?e:ae(e)}function Me(e){return function(){ee(!1)}}function De(){}o.a.Component;var Ae=function(e){function t(){return e.apply(this,arguments)||this}return Object(G.a)(t,e),t.prototype.render=function(){var e=this;return o.a.createElement(Ee.Consumer,null,(function(t){t||ee(!1);var n,r,a=e.props.location||t.location;return o.a.Children.forEach(e.props.children,(function(e){if(null==r&&o.a.isValidElement(e)){n=e;var i=e.props.path||e.props.from;r=i?Ce(a.pathname,Object(h.a)({},e.props,{path:i})):t.match}})),r?o.a.cloneElement(n,{location:a,computedMatch:r}):null}))},t}(o.a.Component);o.a.useContext;var Ie=n(187),Le=n(30);var _e=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return Object(Ie.a)(e,Object(h.a)({defaultTheme:Le.a},t))},ze=n(2),Fe=n(3),We=n(5),Be=[0,1,2,3,4,5,6,7,8,9,10],He=["auto",!0,1,2,3,4,5,6,7,8,9,10,11,12];function Ue(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:1,n=parseFloat(e);return"".concat(n/t).concat(String(e).replace(String(n),"")||"px")}var $e=r.forwardRef((function(e,t){var n=e.alignContent,o=void 0===n?"stretch":n,a=e.alignItems,i=void 0===a?"stretch":a,l=e.classes,c=e.className,u=e.component,s=void 0===u?"div":u,d=e.container,f=void 0!==d&&d,p=e.direction,m=void 0===p?"row":p,v=e.item,b=void 0!==v&&v,g=e.justify,y=void 0===g?"flex-start":g,x=e.lg,w=void 0!==x&&x,O=e.md,E=void 0!==O&&O,S=e.sm,k=void 0!==S&&S,j=e.spacing,C=void 0===j?0:j,P=e.wrap,T=void 0===P?"wrap":P,N=e.xl,R=void 0!==N&&N,M=e.xs,D=void 0!==M&&M,A=e.zeroMinWidth,I=void 0!==A&&A,L=Object(ze.a)(e,["alignContent","alignItems","classes","className","component","container","direction","item","justify","lg","md","sm","spacing","wrap","xl","xs","zeroMinWidth"]),_=Object(Fe.a)(l.root,c,f&&[l.container,0!==C&&l["spacing-xs-".concat(String(C))]],b&&l.item,I&&l.zeroMinWidth,"row"!==m&&l["direction-xs-".concat(String(m))],"wrap"!==T&&l["wrap-xs-".concat(String(T))],"stretch"!==i&&l["align-items-xs-".concat(String(i))],"stretch"!==o&&l["align-content-xs-".concat(String(o))],"flex-start"!==y&&l["justify-xs-".concat(String(y))],!1!==D&&l["grid-xs-".concat(String(D))],!1!==k&&l["grid-sm-".concat(String(k))],!1!==E&&l["grid-md-".concat(String(E))],!1!==w&&l["grid-lg-".concat(String(w))],!1!==R&&l["grid-xl-".concat(String(R))]);return r.createElement(s,Object(h.a)({className:_,ref:t},L))})),Ve=Object(We.a)((function(e){return Object(h.a)({root:{},container:{boxSizing:"border-box",display:"flex",flexWrap:"wrap",width:"100%"},item:{boxSizing:"border-box",margin:"0"},zeroMinWidth:{minWidth:0},"direction-xs-column":{flexDirection:"column"},"direction-xs-column-reverse":{flexDirection:"column-reverse"},"direction-xs-row-reverse":{flexDirection:"row-reverse"},"wrap-xs-nowrap":{flexWrap:"nowrap"},"wrap-xs-wrap-reverse":{flexWrap:"wrap-reverse"},"align-items-xs-center":{alignItems:"center"},"align-items-xs-flex-start":{alignItems:"flex-start"},"align-items-xs-flex-end":{alignItems:"flex-end"},"align-items-xs-baseline":{alignItems:"baseline"},"align-content-xs-center":{alignContent:"center"},"align-content-xs-flex-start":{alignContent:"flex-start"},"align-content-xs-flex-end":{alignContent:"flex-end"},"align-content-xs-space-between":{alignContent:"space-between"},"align-content-xs-space-around":{alignContent:"space-around"},"justify-xs-center":{justifyContent:"center"},"justify-xs-flex-end":{justifyContent:"flex-end"},"justify-xs-space-between":{justifyContent:"space-between"},"justify-xs-space-around":{justifyContent:"space-around"},"justify-xs-space-evenly":{justifyContent:"space-evenly"}},function(e,t){var n={};return Be.forEach((function(r){var o=e.spacing(r);0!==o&&(n["spacing-".concat(t,"-").concat(r)]={margin:"-".concat(Ue(o,2)),width:"calc(100% + ".concat(Ue(o),")"),"& > $item":{padding:Ue(o,2)}})})),n}(e,"xs"),e.breakpoints.keys.reduce((function(t,n){return function(e,t,n){var r={};He.forEach((function(e){var t="grid-".concat(n,"-").concat(e);if(!0!==e)if("auto"!==e){var o="".concat(Math.round(e/12*1e8)/1e6,"%");r[t]={flexBasis:o,flexGrow:0,maxWidth:o}}else r[t]={flexBasis:"auto",flexGrow:0,maxWidth:"none"};else r[t]={flexBasis:0,flexGrow:1,maxWidth:"100%"}})),"xs"===n?Object(h.a)(e,r):e[t.breakpoints.up(n)]=r}(t,e,n),t}),{}))}),{name:"MuiGrid"})($e),qe=n(6),Xe={h1:"h1",h2:"h2",h3:"h3",h4:"h4",h5:"h5",h6:"h6",subtitle1:"h6",subtitle2:"h6",body1:"p",body2:"p"},Ke=r.forwardRef((function(e,t){var n=e.align,o=void 0===n?"inherit":n,a=e.classes,i=e.className,l=e.color,c=void 0===l?"initial":l,u=e.component,s=e.display,d=void 0===s?"initial":s,f=e.gutterBottom,p=void 0!==f&&f,m=e.noWrap,v=void 0!==m&&m,b=e.paragraph,g=void 0!==b&&b,y=e.variant,x=void 0===y?"body1":y,w=e.variantMapping,O=void 0===w?Xe:w,E=Object(ze.a)(e,["align","classes","className","color","component","display","gutterBottom","noWrap","paragraph","variant","variantMapping"]),S=u||(g?"p":O[x]||Xe[x])||"span";return r.createElement(S,Object(h.a)({className:Object(Fe.a)(a.root,i,"inherit"!==x&&a[x],"initial"!==c&&a["color".concat(Object(qe.a)(c))],v&&a.noWrap,p&&a.gutterBottom,g&&a.paragraph,"inherit"!==o&&a["align".concat(Object(qe.a)(o))],"initial"!==d&&a["display".concat(Object(qe.a)(d))]),ref:t},E))})),Ye=Object(We.a)((function(e){return{root:{margin:0},body2:e.typography.body2,body1:e.typography.body1,caption:e.typography.caption,button:e.typography.button,h1:e.typography.h1,h2:e.typography.h2,h3:e.typography.h3,h4:e.typography.h4,h5:e.typography.h5,h6:e.typography.h6,subtitle1:e.typography.subtitle1,subtitle2:e.typography.subtitle2,overline:e.typography.overline,srOnly:{position:"absolute",height:1,width:1,overflow:"hidden"},alignLeft:{textAlign:"left"},alignCenter:{textAlign:"center"},alignRight:{textAlign:"right"},alignJustify:{textAlign:"justify"},noWrap:{overflow:"hidden",textOverflow:"ellipsis",whiteSpace:"nowrap"},gutterBottom:{marginBottom:"0.35em"},paragraph:{marginBottom:16},colorInherit:{color:"inherit"},colorPrimary:{color:e.palette.primary.main},colorSecondary:{color:e.palette.secondary.main},colorTextPrimary:{color:e.palette.text.primary},colorTextSecondary:{color:e.palette.text.secondary},colorError:{color:e.palette.error.main},displayInline:{display:"inline"},displayBlock:{display:"block"}}}),{name:"MuiTypography"})(Ke),Ge=n(8),Qe=r.forwardRef((function(e,t){var n=e.absolute,o=void 0!==n&&n,a=e.classes,i=e.className,l=e.component,c=void 0===l?"hr":l,u=e.flexItem,s=void 0!==u&&u,d=e.light,f=void 0!==d&&d,p=e.orientation,m=void 0===p?"horizontal":p,v=e.role,b=void 0===v?"hr"!==c?"separator":void 0:v,g=e.variant,y=void 0===g?"fullWidth":g,x=Object(ze.a)(e,["absolute","classes","className","component","flexItem","light","orientation","role","variant"]);return r.createElement(c,Object(h.a)({className:Object(Fe.a)(a.root,i,"fullWidth"!==y&&a[y],o&&a.absolute,s&&a.flexItem,f&&a.light,"vertical"===m&&a.vertical),role:b,ref:t},x))})),Je=Object(We.a)((function(e){return{root:{height:1,margin:0,border:"none",flexShrink:0,backgroundColor:e.palette.divider},absolute:{position:"absolute",bottom:0,left:0,width:"100%"},inset:{marginLeft:72},light:{backgroundColor:Object(Ge.c)(e.palette.divider,.08)},middle:{marginLeft:e.spacing(2),marginRight:e.spacing(2)},vertical:{height:"100%",width:1},flexItem:{alignSelf:"stretch",height:"auto"}}}),{name:"MuiDivider"})(Qe),Ze=n(93);function et(e){var t=e.props,n=e.states,r=e.muiFormControl;return n.reduce((function(e,n){return e[n]=t[n],r&&void 0===t[n]&&(e[n]=r[n]),e}),{})}var tt=r.createContext();function nt(){return r.useContext(tt)}var rt=tt;function ot(e,t){"function"==typeof e?e(t):e&&(e.current=t)}function at(e,t){return r.useMemo((function(){return null==e&&null==t?null:function(n){ot(e,n),ot(t,n)}}),[e,t])}function it(e){var t,n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:166;function r(){for(var r=arguments.length,o=new Array(r),a=0;a<r;a++)o[a]=arguments[a];var i=this,l=function(){e.apply(i,o)};clearTimeout(t),t=setTimeout(l,n)}return r.clear=function(){clearTimeout(t)},r}function lt(e,t){return parseInt(e[t],10)||0}var ct="undefined"!=typeof window?r.useLayoutEffect:r.useEffect,ut={visibility:"hidden",position:"absolute",overflow:"hidden",height:0,top:0,left:0,transform:"translateZ(0)"},st=r.forwardRef((function(e,t){var n=e.onChange,o=e.rows,a=e.rowsMax,i=e.rowsMin,l=void 0===i?1:i,c=e.style,u=e.value,s=Object(ze.a)(e,["onChange","rows","rowsMax","rowsMin","style","value"]),d=o||l,f=r.useRef(null!=u).current,p=r.useRef(null),m=at(t,p),v=r.useRef(null),b=r.useRef(0),g=r.useState({}),y=g[0],x=g[1],w=r.useCallback((function(){var t=p.current,n=window.getComputedStyle(t),r=v.current;r.style.width=n.width,r.value=t.value||e.placeholder||"x","\n"===r.value.slice(-1)&&(r.value+=" ");var o=n["box-sizing"],i=lt(n,"padding-bottom")+lt(n,"padding-top"),l=lt(n,"border-bottom-width")+lt(n,"border-top-width"),c=r.scrollHeight-i;r.value="x";var u=r.scrollHeight-i,s=c;d&&(s=Math.max(Number(d)*u,s)),a&&(s=Math.min(Number(a)*u,s));var f=(s=Math.max(s,u))+("border-box"===o?i+l:0),m=Math.abs(s-c)<=1;x((function(e){return b.current<20&&(f>0&&Math.abs((e.outerHeightStyle||0)-f)>1||e.overflow!==m)?(b.current+=1,{overflow:m,outerHeightStyle:f}):e}))}),[a,d,e.placeholder]);r.useEffect((function(){var e=it((function(){b.current=0,w()}));return window.addEventListener("resize",e),function(){e.clear(),window.removeEventListener("resize",e)}}),[w]),ct((function(){w()})),r.useEffect((function(){b.current=0}),[u]);return r.createElement(r.Fragment,null,r.createElement("textarea",Object(h.a)({value:u,onChange:function(e){b.current=0,f||w(),n&&n(e)},ref:m,rows:d,style:Object(h.a)({height:y.outerHeightStyle,overflow:y.overflow?"hidden":null},c)},s)),r.createElement("textarea",{"aria-hidden":!0,className:e.className,readOnly:!0,ref:v,tabIndex:-1,style:Object(h.a)({},ut,c)}))}));function dt(e){return null!=e&&!(Array.isArray(e)&&0===e.length)}function ft(e){var t=arguments.length>1&&void 0!==arguments[1]&&arguments[1];return e&&(dt(e.value)&&""!==e.value||t&&dt(e.defaultValue)&&""!==e.defaultValue)}var pt="undefined"==typeof window?r.useEffect:r.useLayoutEffect,mt=r.forwardRef((function(e,t){var n=e["aria-describedby"],o=e.autoComplete,a=e.autoFocus,i=e.classes,l=e.className,c=(e.color,e.defaultValue),u=e.disabled,s=e.endAdornment,d=(e.error,e.fullWidth),f=void 0!==d&&d,p=e.id,m=e.inputComponent,v=void 0===m?"input":m,b=e.inputProps,g=void 0===b?{}:b,y=e.inputRef,x=(e.margin,e.multiline),w=void 0!==x&&x,O=e.name,E=e.onBlur,S=e.onChange,k=e.onClick,j=e.onFocus,C=e.onKeyDown,P=e.onKeyUp,T=e.placeholder,N=e.readOnly,R=e.renderSuffix,M=e.rows,D=e.rowsMax,A=e.rowsMin,I=e.startAdornment,L=e.type,_=void 0===L?"text":L,z=e.value,F=Object(ze.a)(e,["aria-describedby","autoComplete","autoFocus","classes","className","color","defaultValue","disabled","endAdornment","error","fullWidth","id","inputComponent","inputProps","inputRef","margin","multiline","name","onBlur","onChange","onClick","onFocus","onKeyDown","onKeyUp","placeholder","readOnly","renderSuffix","rows","rowsMax","rowsMin","startAdornment","type","value"]),W=null!=g.value?g.value:z,B=r.useRef(null!=W).current,H=r.useRef(),U=r.useCallback((function(e){0}),[]),$=at(g.ref,U),V=at(y,$),q=at(H,V),X=r.useState(!1),K=X[0],Y=X[1],G=nt();var Q=et({props:e,muiFormControl:G,states:["color","disabled","error","hiddenLabel","margin","required","filled"]});Q.focused=G?G.focused:K,r.useEffect((function(){!G&&u&&K&&(Y(!1),E&&E())}),[G,u,K,E]);var J=G&&G.onFilled,Z=G&&G.onEmpty,ee=r.useCallback((function(e){ft(e)?J&&J():Z&&Z()}),[J,Z]);pt((function(){B&&ee({value:W})}),[W,ee,B]);r.useEffect((function(){ee(H.current)}),[]);var te=v,ne=Object(h.a)({},g,{ref:q});"string"!=typeof te?ne=Object(h.a)({inputRef:q,type:_},ne,{ref:null}):w?!M||D||A?(ne=Object(h.a)({rows:M,rowsMax:D},ne),te=st):te="textarea":ne=Object(h.a)({type:_},ne);return r.useEffect((function(){G&&G.setAdornedStart(Boolean(I))}),[G,I]),r.createElement("div",Object(h.a)({className:Object(Fe.a)(i.root,i["color".concat(Object(qe.a)(Q.color||"primary"))],l,Q.disabled&&i.disabled,Q.error&&i.error,f&&i.fullWidth,Q.focused&&i.focused,G&&i.formControl,w&&i.multiline,I&&i.adornedStart,s&&i.adornedEnd,"dense"===Q.margin&&i.marginDense),onClick:function(e){H.current&&e.currentTarget===e.target&&H.current.focus(),k&&k(e)},ref:t},F),I,r.createElement(rt.Provider,{value:null},r.createElement(te,Object(h.a)({"aria-invalid":Q.error,"aria-describedby":n,autoComplete:o,autoFocus:a,defaultValue:c,disabled:Q.disabled,id:p,onAnimationStart:function(e){ee("mui-auto-fill-cancel"===e.animationName?H.current:{value:"x"})},name:O,placeholder:T,readOnly:N,required:Q.required,rows:M,value:W,onKeyDown:C,onKeyUp:P},ne,{className:Object(Fe.a)(i.input,g.className,Q.disabled&&i.disabled,w&&i.inputMultiline,Q.hiddenLabel&&i.inputHiddenLabel,I&&i.inputAdornedStart,s&&i.inputAdornedEnd,"search"===_&&i.inputTypeSearch,"dense"===Q.margin&&i.inputMarginDense),onBlur:function(e){E&&E(e),g.onBlur&&g.onBlur(e),G&&G.onBlur?G.onBlur(e):Y(!1)},onChange:function(e){if(!B){var t=e.target||H.current;if(null==t)throw new Error(Object(Ze.a)(1));ee({value:t.value})}for(var n=arguments.length,r=new Array(n>1?n-1:0),o=1;o<n;o++)r[o-1]=arguments[o];g.onChange&&g.onChange.apply(g,[e].concat(r)),S&&S.apply(void 0,[e].concat(r))},onFocus:function(e){Q.disabled?e.stopPropagation():(j&&j(e),g.onFocus&&g.onFocus(e),G&&G.onFocus?G.onFocus(e):Y(!0))}}))),s,R?R(Object(h.a)({},Q,{startAdornment:I})):null)})),ht=Object(We.a)((function(e){var t="light"===e.palette.type,n={color:"currentColor",opacity:t?.42:.5,transition:e.transitions.create("opacity",{duration:e.transitions.duration.shorter})},r={opacity:"0 !important"},o={opacity:t?.42:.5};return{"@global":{"@keyframes mui-auto-fill":{},"@keyframes mui-auto-fill-cancel":{}},root:Object(h.a)({},e.typography.body1,{color:e.palette.text.primary,lineHeight:"1.1876em",boxSizing:"border-box",position:"relative",cursor:"text",display:"inline-flex",alignItems:"center","&$disabled":{color:e.palette.text.disabled,cursor:"default"}}),formControl:{},focused:{},disabled:{},adornedStart:{},adornedEnd:{},error:{},marginDense:{},multiline:{padding:"".concat(6,"px 0 ").concat(7,"px"),"&$marginDense":{paddingTop:3}},colorSecondary:{},fullWidth:{width:"100%"},input:{font:"inherit",letterSpacing:"inherit",color:"currentColor",padding:"".concat(6,"px 0 ").concat(7,"px"),border:0,boxSizing:"content-box",background:"none",height:"1.1876em",margin:0,WebkitTapHighlightColor:"transparent",display:"block",minWidth:0,width:"100%",animationName:"mui-auto-fill-cancel",animationDuration:"10ms","&::-webkit-input-placeholder":n,"&::-moz-placeholder":n,"&:-ms-input-placeholder":n,"&::-ms-input-placeholder":n,"&:focus":{outline:0},"&:invalid":{boxShadow:"none"},"&::-webkit-search-decoration":{"-webkit-appearance":"none"},"label[data-shrink=false] + $formControl &":{"&::-webkit-input-placeholder":r,"&::-moz-placeholder":r,"&:-ms-input-placeholder":r,"&::-ms-input-placeholder":r,"&:focus::-webkit-input-placeholder":o,"&:focus::-moz-placeholder":o,"&:focus:-ms-input-placeholder":o,"&:focus::-ms-input-placeholder":o},"&$disabled":{opacity:1},"&:-webkit-autofill":{animationDuration:"5000s",animationName:"mui-auto-fill"}},inputMarginDense:{paddingTop:3},inputMultiline:{height:"auto",resize:"none",padding:0},inputTypeSearch:{"-moz-appearance":"textfield","-webkit-appearance":"textfield"},inputAdornedStart:{},inputAdornedEnd:{},inputHiddenLabel:{}}}),{name:"MuiInputBase"})(mt),vt=r.forwardRef((function(e,t){var n=e.disableUnderline,o=e.classes,a=e.fullWidth,i=void 0!==a&&a,l=e.inputComponent,c=void 0===l?"input":l,u=e.multiline,s=void 0!==u&&u,d=e.type,f=void 0===d?"text":d,p=Object(ze.a)(e,["disableUnderline","classes","fullWidth","inputComponent","multiline","type"]);return r.createElement(ht,Object(h.a)({classes:Object(h.a)({},o,{root:Object(Fe.a)(o.root,!n&&o.underline),underline:null}),fullWidth:i,inputComponent:c,multiline:s,ref:t,type:f},p))}));vt.muiName="Input";var bt=Object(We.a)((function(e){var t="light"===e.palette.type?"rgba(0, 0, 0, 0.42)":"rgba(255, 255, 255, 0.7)";return{root:{position:"relative"},formControl:{"label + &":{marginTop:16}},focused:{},disabled:{},colorSecondary:{"&$underline:after":{borderBottomColor:e.palette.secondary.main}},underline:{"&:after":{borderBottom:"2px solid ".concat(e.palette.primary.main),left:0,bottom:0,content:'""',position:"absolute",right:0,transform:"scaleX(0)",transition:e.transitions.create("transform",{duration:e.transitions.duration.shorter,easing:e.transitions.easing.easeOut}),pointerEvents:"none"},"&$focused:after":{transform:"scaleX(1)"},"&$error:after":{borderBottomColor:e.palette.error.main,transform:"scaleX(1)"},"&:before":{borderBottom:"1px solid ".concat(t),left:0,bottom:0,content:'"\\00a0"',position:"absolute",right:0,transition:e.transitions.create("border-bottom-color",{duration:e.transitions.duration.shorter}),pointerEvents:"none"},"&:hover:not($disabled):before":{borderBottom:"2px solid ".concat(e.palette.text.primary),"@media (hover: none)":{borderBottom:"1px solid ".concat(t)}},"&$disabled:before":{borderBottomStyle:"dotted"}},error:{},marginDense:{},multiline:{},fullWidth:{},input:{},inputMarginDense:{},inputMultiline:{},inputTypeSearch:{}}}),{name:"MuiInput"})(vt),gt=r.forwardRef((function(e,t){var n=e.disableUnderline,o=e.classes,a=e.fullWidth,i=void 0!==a&&a,l=e.inputComponent,c=void 0===l?"input":l,u=e.multiline,s=void 0!==u&&u,d=e.type,f=void 0===d?"text":d,p=Object(ze.a)(e,["disableUnderline","classes","fullWidth","inputComponent","multiline","type"]);return r.createElement(ht,Object(h.a)({classes:Object(h.a)({},o,{root:Object(Fe.a)(o.root,!n&&o.underline),underline:null}),fullWidth:i,inputComponent:c,multiline:s,ref:t,type:f},p))}));gt.muiName="Input";var yt=Object(We.a)((function(e){var t="light"===e.palette.type,n=t?"rgba(0, 0, 0, 0.42)":"rgba(255, 255, 255, 0.7)",r=t?"rgba(0, 0, 0, 0.09)":"rgba(255, 255, 255, 0.09)";return{root:{position:"relative",backgroundColor:r,borderTopLeftRadius:e.shape.borderRadius,borderTopRightRadius:e.shape.borderRadius,transition:e.transitions.create("background-color",{duration:e.transitions.duration.shorter,easing:e.transitions.easing.easeOut}),"&:hover":{backgroundColor:t?"rgba(0, 0, 0, 0.13)":"rgba(255, 255, 255, 0.13)","@media (hover: none)":{backgroundColor:r}},"&$focused":{backgroundColor:t?"rgba(0, 0, 0, 0.09)":"rgba(255, 255, 255, 0.09)"},"&$disabled":{backgroundColor:t?"rgba(0, 0, 0, 0.12)":"rgba(255, 255, 255, 0.12)"}},colorSecondary:{"&$underline:after":{borderBottomColor:e.palette.secondary.main}},underline:{"&:after":{borderBottom:"2px solid ".concat(e.palette.primary.main),left:0,bottom:0,content:'""',position:"absolute",right:0,transform:"scaleX(0)",transition:e.transitions.create("transform",{duration:e.transitions.duration.shorter,easing:e.transitions.easing.easeOut}),pointerEvents:"none"},"&$focused:after":{transform:"scaleX(1)"},"&$error:after":{borderBottomColor:e.palette.error.main,transform:"scaleX(1)"},"&:before":{borderBottom:"1px solid ".concat(n),left:0,bottom:0,content:'"\\00a0"',position:"absolute",right:0,transition:e.transitions.create("border-bottom-color",{duration:e.transitions.duration.shorter}),pointerEvents:"none"},"&:hover:before":{borderBottom:"1px solid ".concat(e.palette.text.primary)},"&$disabled:before":{borderBottomStyle:"dotted"}},focused:{},disabled:{},adornedStart:{paddingLeft:12},adornedEnd:{paddingRight:12},error:{},marginDense:{},multiline:{padding:"27px 12px 10px","&$marginDense":{paddingTop:23,paddingBottom:6}},input:{padding:"27px 12px 10px","&:-webkit-autofill":{WebkitBoxShadow:"light"===e.palette.type?null:"0 0 0 100px #266798 inset",WebkitTextFillColor:"light"===e.palette.type?null:"#fff",caretColor:"light"===e.palette.type?null:"#fff",borderTopLeftRadius:"inherit",borderTopRightRadius:"inherit"}},inputMarginDense:{paddingTop:23,paddingBottom:6},inputHiddenLabel:{paddingTop:18,paddingBottom:19,"&$inputMarginDense":{paddingTop:10,paddingBottom:11}},inputMultiline:{padding:0},inputAdornedStart:{paddingLeft:0},inputAdornedEnd:{paddingRight:0}}}),{name:"MuiFilledInput"})(gt),xt=n(7),wt=n(188);function Ot(){return Object(wt.a)()||Le.a}var Et=r.forwardRef((function(e,t){e.children;var n=e.classes,o=e.className,a=e.label,i=e.labelWidth,l=e.notched,c=e.style,u=Object(ze.a)(e,["children","classes","className","label","labelWidth","notched","style"]),s="rtl"===Ot().direction?"right":"left";if(void 0!==a)return r.createElement("fieldset",Object(h.a)({"aria-hidden":!0,className:Object(Fe.a)(n.root,o),ref:t,style:c},u),r.createElement("legend",{className:Object(Fe.a)(n.legendLabelled,l&&n.legendNotched)},a?r.createElement("span",null,a):r.createElement("span",{dangerouslySetInnerHTML:{__html:"&#8203;"}})));var d=i>0?.75*i+8:.01;return r.createElement("fieldset",Object(h.a)({"aria-hidden":!0,style:Object(h.a)(Object(xt.a)({},"padding".concat(Object(qe.a)(s)),8),c),className:Object(Fe.a)(n.root,o),ref:t},u),r.createElement("legend",{className:n.legend,style:{width:l?d:.01}},r.createElement("span",{dangerouslySetInnerHTML:{__html:"&#8203;"}})))})),St=Object(We.a)((function(e){return{root:{position:"absolute",bottom:0,right:0,top:-5,left:0,margin:0,padding:"0 8px",pointerEvents:"none",borderRadius:"inherit",borderStyle:"solid",borderWidth:1,overflow:"hidden"},legend:{textAlign:"left",padding:0,lineHeight:"11px",transition:e.transitions.create("width",{duration:150,easing:e.transitions.easing.easeOut})},legendLabelled:{display:"block",width:"auto",textAlign:"left",padding:0,height:11,fontSize:"0.75em",visibility:"hidden",maxWidth:.01,transition:e.transitions.create("max-width",{duration:50,easing:e.transitions.easing.easeOut}),"& > span":{paddingLeft:5,paddingRight:5,display:"inline-block"}},legendNotched:{maxWidth:1e3,transition:e.transitions.create("max-width",{duration:100,easing:e.transitions.easing.easeOut,delay:50})}}}),{name:"PrivateNotchedOutline"})(Et),kt=r.forwardRef((function(e,t){var n=e.classes,o=e.fullWidth,a=void 0!==o&&o,i=e.inputComponent,l=void 0===i?"input":i,c=e.label,u=e.labelWidth,s=void 0===u?0:u,d=e.multiline,f=void 0!==d&&d,p=e.notched,m=e.type,v=void 0===m?"text":m,b=Object(ze.a)(e,["classes","fullWidth","inputComponent","label","labelWidth","multiline","notched","type"]);return r.createElement(ht,Object(h.a)({renderSuffix:function(e){return r.createElement(St,{className:n.notchedOutline,label:c,labelWidth:s,notched:void 0!==p?p:Boolean(e.startAdornment||e.filled||e.focused)})},classes:Object(h.a)({},n,{root:Object(Fe.a)(n.root,n.underline),notchedOutline:null}),fullWidth:a,inputComponent:l,multiline:f,ref:t,type:v},b))}));kt.muiName="Input";var jt=Object(We.a)((function(e){var t="light"===e.palette.type?"rgba(0, 0, 0, 0.23)":"rgba(255, 255, 255, 0.23)";return{root:{position:"relative",borderRadius:e.shape.borderRadius,"&:hover $notchedOutline":{borderColor:e.palette.text.primary},"@media (hover: none)":{"&:hover $notchedOutline":{borderColor:t}},"&$focused $notchedOutline":{borderColor:e.palette.primary.main,borderWidth:2},"&$error $notchedOutline":{borderColor:e.palette.error.main},"&$disabled $notchedOutline":{borderColor:e.palette.action.disabled}},colorSecondary:{"&$focused $notchedOutline":{borderColor:e.palette.secondary.main}},focused:{},disabled:{},adornedStart:{paddingLeft:14},adornedEnd:{paddingRight:14},error:{},marginDense:{},multiline:{padding:"18.5px 14px","&$marginDense":{paddingTop:10.5,paddingBottom:10.5}},notchedOutline:{borderColor:t},input:{padding:"18.5px 14px","&:-webkit-autofill":{WebkitBoxShadow:"light"===e.palette.type?null:"0 0 0 100px #266798 inset",WebkitTextFillColor:"light"===e.palette.type?null:"#fff",caretColor:"light"===e.palette.type?null:"#fff",borderRadius:"inherit"}},inputMarginDense:{paddingTop:10.5,paddingBottom:10.5},inputMultiline:{padding:0},inputAdornedStart:{paddingLeft:0},inputAdornedEnd:{paddingRight:0}}}),{name:"MuiOutlinedInput"})(kt);function Ct(){return r.useContext(rt)}var Pt=r.forwardRef((function(e,t){var n=e.children,o=e.classes,a=e.className,i=(e.color,e.component),l=void 0===i?"label":i,c=(e.disabled,e.error,e.filled,e.focused,e.required,Object(ze.a)(e,["children","classes","className","color","component","disabled","error","filled","focused","required"])),u=et({props:e,muiFormControl:Ct(),states:["color","required","focused","disabled","error","filled"]});return r.createElement(l,Object(h.a)({className:Object(Fe.a)(o.root,o["color".concat(Object(qe.a)(u.color||"primary"))],a,u.disabled&&o.disabled,u.error&&o.error,u.filled&&o.filled,u.focused&&o.focused,u.required&&o.required),ref:t},c),n,u.required&&r.createElement("span",{"aria-hidden":!0,className:Object(Fe.a)(o.asterisk,u.error&&o.error)}," ","*"))})),Tt=Object(We.a)((function(e){return{root:Object(h.a)({color:e.palette.text.secondary},e.typography.body1,{lineHeight:1,padding:0,"&$focused":{color:e.palette.primary.main},"&$disabled":{color:e.palette.text.disabled},"&$error":{color:e.palette.error.main}}),colorSecondary:{"&$focused":{color:e.palette.secondary.main}},focused:{},disabled:{},error:{},filled:{},required:{},asterisk:{"&$error":{color:e.palette.error.main}}}}),{name:"MuiFormLabel"})(Pt),Nt=r.forwardRef((function(e,t){var n=e.classes,o=e.className,a=e.disableAnimation,i=void 0!==a&&a,l=(e.margin,e.shrink),c=(e.variant,Object(ze.a)(e,["classes","className","disableAnimation","margin","shrink","variant"])),u=Ct(),s=l;void 0===s&&u&&(s=u.filled||u.focused||u.adornedStart);var d=et({props:e,muiFormControl:u,states:["margin","variant"]});return r.createElement(Tt,Object(h.a)({"data-shrink":s,className:Object(Fe.a)(n.root,o,u&&n.formControl,!i&&n.animated,s&&n.shrink,"dense"===d.margin&&n.marginDense,{filled:n.filled,outlined:n.outlined}[d.variant]),classes:{focused:n.focused,disabled:n.disabled,error:n.error,required:n.required,asterisk:n.asterisk},ref:t},c))})),Rt=Object(We.a)((function(e){return{root:{display:"block",transformOrigin:"top left"},focused:{},disabled:{},error:{},required:{},asterisk:{},formControl:{position:"absolute",left:0,top:0,transform:"translate(0, 24px) scale(1)"},marginDense:{transform:"translate(0, 21px) scale(1)"},shrink:{transform:"translate(0, 1.5px) scale(0.75)",transformOrigin:"top left"},animated:{transition:e.transitions.create(["color","transform"],{duration:e.transitions.duration.shorter,easing:e.transitions.easing.easeOut})},filled:{zIndex:1,pointerEvents:"none",transform:"translate(12px, 20px) scale(1)","&$marginDense":{transform:"translate(12px, 17px) scale(1)"},"&$shrink":{transform:"translate(12px, 10px) scale(0.75)","&$marginDense":{transform:"translate(12px, 7px) scale(0.75)"}}},outlined:{zIndex:1,pointerEvents:"none",transform:"translate(14px, 20px) scale(1)","&$marginDense":{transform:"translate(14px, 12px) scale(1)"},"&$shrink":{transform:"translate(14px, -6px) scale(0.75)"}}}}),{name:"MuiInputLabel"})(Nt);function Mt(e,t){return r.isValidElement(e)&&-1!==t.indexOf(e.type.muiName)}var Dt=r.forwardRef((function(e,t){var n=e.children,o=e.classes,a=e.className,i=e.color,l=void 0===i?"primary":i,c=e.component,u=void 0===c?"div":c,s=e.disabled,d=void 0!==s&&s,f=e.error,p=void 0!==f&&f,m=e.fullWidth,v=void 0!==m&&m,b=e.focused,g=e.hiddenLabel,y=void 0!==g&&g,x=e.margin,w=void 0===x?"none":x,O=e.required,E=void 0!==O&&O,S=e.size,k=e.variant,j=void 0===k?"standard":k,C=Object(ze.a)(e,["children","classes","className","color","component","disabled","error","fullWidth","focused","hiddenLabel","margin","required","size","variant"]),P=r.useState((function(){var e=!1;return n&&r.Children.forEach(n,(function(t){if(Mt(t,["Input","Select"])){var n=Mt(t,["Select"])?t.props.input:t;n&&n.props.startAdornment&&(e=!0)}})),e})),T=P[0],N=P[1],R=r.useState((function(){var e=!1;return n&&r.Children.forEach(n,(function(t){Mt(t,["Input","Select"])&&ft(t.props,!0)&&(e=!0)})),e})),M=R[0],D=R[1],A=r.useState(!1),I=A[0],L=A[1],_=void 0!==b?b:I;d&&_&&L(!1);var z=r.useCallback((function(){D(!0)}),[]),F={adornedStart:T,setAdornedStart:N,color:l,disabled:d,error:p,filled:M,focused:_,fullWidth:v,hiddenLabel:y,margin:("small"===S?"dense":void 0)||w,onBlur:function(){L(!1)},onEmpty:r.useCallback((function(){D(!1)}),[]),onFilled:z,onFocus:function(){L(!0)},registerEffect:void 0,required:E,variant:j};return r.createElement(rt.Provider,{value:F},r.createElement(u,Object(h.a)({className:Object(Fe.a)(o.root,a,"none"!==w&&o["margin".concat(Object(qe.a)(w))],v&&o.fullWidth),ref:t},C),n))})),At=Object(We.a)({root:{display:"inline-flex",flexDirection:"column",position:"relative",minWidth:0,padding:0,margin:0,border:0,verticalAlign:"top"},marginNormal:{marginTop:16,marginBottom:8},marginDense:{marginTop:8,marginBottom:4},fullWidth:{width:"100%"}},{name:"MuiFormControl"})(Dt),It=r.forwardRef((function(e,t){var n=e.children,o=e.classes,a=e.className,i=e.component,l=void 0===i?"p":i,c=(e.disabled,e.error,e.filled,e.focused,e.margin,e.required,e.variant,Object(ze.a)(e,["children","classes","className","component","disabled","error","filled","focused","margin","required","variant"])),u=et({props:e,muiFormControl:Ct(),states:["variant","margin","disabled","error","filled","focused","required"]});return r.createElement(l,Object(h.a)({className:Object(Fe.a)(o.root,("filled"===u.variant||"outlined"===u.variant)&&o.contained,a,u.disabled&&o.disabled,u.error&&o.error,u.filled&&o.filled,u.focused&&o.focused,u.required&&o.required,"dense"===u.margin&&o.marginDense),ref:t},c)," "===n?r.createElement("span",{dangerouslySetInnerHTML:{__html:"&#8203;"}}):n)})),Lt=Object(We.a)((function(e){return{root:Object(h.a)({color:e.palette.text.secondary},e.typography.caption,{textAlign:"left",marginTop:3,margin:0,"&$disabled":{color:e.palette.text.disabled},"&$error":{color:e.palette.error.main}}),error:{},disabled:{},marginDense:{marginTop:4},contained:{marginLeft:14,marginRight:14},focused:{},filled:{},required:{}}}),{name:"MuiFormHelperText"})(It),_t=n(185),zt=n(17),Ft=n(28);function Wt(e){return e&&e.ownerDocument||document}function Bt(e){return Wt(e).defaultView||window}function Ht(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return t.reduce((function(e,t){return null==t?e:function(){for(var n=arguments.length,r=new Array(n),o=0;o<n;o++)r[o]=arguments[o];e.apply(this,r),t.apply(this,r)}}),(function(){}))}var Ut=n(186);var $t="undefined"!=typeof window?r.useLayoutEffect:r.useEffect;var Vt=r.forwardRef((function(e,t){var n=e.children,o=e.container,i=e.disablePortal,l=void 0!==i&&i,c=e.onRendered,u=r.useState(null),s=u[0],d=u[1],f=at(r.isValidElement(n)?n.ref:null,t);return $t((function(){l||d(function(e){return e="function"==typeof e?e():e,a.findDOMNode(e)}(o)||document.body)}),[o,l]),$t((function(){if(s&&!l)return ot(t,s),function(){ot(t,null)}}),[t,s,l]),$t((function(){c&&(s||l)&&c()}),[c,s,l]),l?r.isValidElement(n)?r.cloneElement(n,{ref:f}):n:s?a.createPortal(n,s):s})),qt="undefined"!=typeof window?r.useLayoutEffect:r.useEffect;function Xt(e){var t=r.useRef(e);return qt((function(){t.current=e})),r.useCallback((function(){return t.current.apply(void 0,arguments)}),[])}var Kt=n(48);var Yt=n(37),Gt=n(24);function Qt(){var e=document.createElement("div");e.style.width="99px",e.style.height="99px",e.style.position="absolute",e.style.top="-9999px",e.style.overflow="scroll",document.body.appendChild(e);var t=e.offsetWidth-e.clientWidth;return document.body.removeChild(e),t}function Jt(e,t){t?e.setAttribute("aria-hidden","true"):e.removeAttribute("aria-hidden")}function Zt(e){return parseInt(window.getComputedStyle(e)["padding-right"],10)||0}function en(e,t,n){var r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:[],o=arguments.length>4?arguments[4]:void 0,a=[t,n].concat(Object(Gt.a)(r)),i=["TEMPLATE","SCRIPT","STYLE"];[].forEach.call(e.children,(function(e){1===e.nodeType&&-1===a.indexOf(e)&&-1===i.indexOf(e.tagName)&&Jt(e,o)}))}function tn(e,t){var n=-1;return e.some((function(e,r){return!!t(e)&&(n=r,!0)})),n}function nn(e,t){var n,r=[],o=[],a=e.container;if(!t.disableScrollLock){if(function(e){var t=Wt(e);return t.body===e?Bt(t).innerWidth>t.documentElement.clientWidth:e.scrollHeight>e.clientHeight}(a)){var i=Qt();r.push({value:a.style.paddingRight,key:"padding-right",el:a}),a.style["padding-right"]="".concat(Zt(a)+i,"px"),n=Wt(a).querySelectorAll(".mui-fixed"),[].forEach.call(n,(function(e){o.push(e.style.paddingRight),e.style.paddingRight="".concat(Zt(e)+i,"px")}))}var l=a.parentElement,c="HTML"===l.nodeName&&"scroll"===window.getComputedStyle(l)["overflow-y"]?l:a;r.push({value:c.style.overflow,key:"overflow",el:c}),c.style.overflow="hidden"}return function(){n&&[].forEach.call(n,(function(e,t){o[t]?e.style.paddingRight=o[t]:e.style.removeProperty("padding-right")})),r.forEach((function(e){var t=e.value,n=e.el,r=e.key;t?n.style.setProperty(r,t):n.style.removeProperty(r)}))}}var rn=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.modals=[],this.containers=[]}return Object(Yt.a)(e,[{key:"add",value:function(e,t){var n=this.modals.indexOf(e);if(-1!==n)return n;n=this.modals.length,this.modals.push(e),e.modalRef&&Jt(e.modalRef,!1);var r=function(e){var t=[];return[].forEach.call(e.children,(function(e){e.getAttribute&&"true"===e.getAttribute("aria-hidden")&&t.push(e)})),t}(t);en(t,e.mountNode,e.modalRef,r,!0);var o=tn(this.containers,(function(e){return e.container===t}));return-1!==o?(this.containers[o].modals.push(e),n):(this.containers.push({modals:[e],container:t,restore:null,hiddenSiblingNodes:r}),n)}},{key:"mount",value:function(e,t){var n=tn(this.containers,(function(t){return-1!==t.modals.indexOf(e)})),r=this.containers[n];r.restore||(r.restore=nn(r,t))}},{key:"remove",value:function(e){var t=this.modals.indexOf(e);if(-1===t)return t;var n=tn(this.containers,(function(t){return-1!==t.modals.indexOf(e)})),r=this.containers[n];if(r.modals.splice(r.modals.indexOf(e),1),this.modals.splice(t,1),0===r.modals.length)r.restore&&r.restore(),e.modalRef&&Jt(e.modalRef,!0),en(r.container,e.mountNode,e.modalRef,r.hiddenSiblingNodes,!1),this.containers.splice(n,1);else{var o=r.modals[r.modals.length-1];o.modalRef&&Jt(o.modalRef,!1)}return t}},{key:"isTopModal",value:function(e){return this.modals.length>0&&this.modals[this.modals.length-1]===e}}]),e}();var on=function(e){var t=e.children,n=e.disableAutoFocus,o=void 0!==n&&n,i=e.disableEnforceFocus,l=void 0!==i&&i,c=e.disableRestoreFocus,u=void 0!==c&&c,s=e.getDoc,d=e.isEnabled,f=e.open,p=r.useRef(),m=r.useRef(null),h=r.useRef(null),v=r.useRef(),b=r.useRef(null),g=r.useCallback((function(e){b.current=a.findDOMNode(e)}),[]),y=at(t.ref,g),x=r.useRef();return r.useEffect((function(){x.current=f}),[f]),!x.current&&f&&"undefined"!=typeof window&&(v.current=s().activeElement),r.useEffect((function(){if(f){var e=Wt(b.current);o||!b.current||b.current.contains(e.activeElement)||(b.current.hasAttribute("tabIndex")||b.current.setAttribute("tabIndex",-1),b.current.focus());var t=function(){e.hasFocus()&&!l&&d()&&!p.current?b.current&&!b.current.contains(e.activeElement)&&b.current.focus():p.current=!1},n=function(t){!l&&d()&&9===t.keyCode&&e.activeElement===b.current&&(p.current=!0,t.shiftKey?h.current.focus():m.current.focus())};e.addEventListener("focus",t,!0),e.addEventListener("keydown",n,!0);var r=setInterval((function(){t()}),50);return function(){clearInterval(r),e.removeEventListener("focus",t,!0),e.removeEventListener("keydown",n,!0),u||(v.current&&v.current.focus&&v.current.focus(),v.current=null)}}}),[o,l,u,d,f]),r.createElement(r.Fragment,null,r.createElement("div",{tabIndex:0,ref:m,"data-test":"sentinelStart"}),r.cloneElement(t,{ref:y}),r.createElement("div",{tabIndex:0,ref:h,"data-test":"sentinelEnd"}))},an={root:{zIndex:-1,position:"fixed",right:0,bottom:0,top:0,left:0,backgroundColor:"rgba(0, 0, 0, 0.5)",WebkitTapHighlightColor:"transparent"},invisible:{backgroundColor:"transparent"}},ln=r.forwardRef((function(e,t){var n=e.invisible,o=void 0!==n&&n,a=e.open,i=Object(ze.a)(e,["invisible","open"]);return a?r.createElement("div",Object(h.a)({"aria-hidden":!0,ref:t},i,{style:Object(h.a)({},an.root,o?an.invisible:{},i.style)})):null}));var cn=new rn,un=r.forwardRef((function(e,t){var n=Object(wt.a)(),o=Object(Ut.a)({name:"MuiModal",props:Object(h.a)({},e),theme:n}),i=o.BackdropComponent,l=void 0===i?ln:i,c=o.BackdropProps,u=o.children,s=o.closeAfterTransition,d=void 0!==s&&s,f=o.container,p=o.disableAutoFocus,m=void 0!==p&&p,v=o.disableBackdropClick,b=void 0!==v&&v,g=o.disableEnforceFocus,y=void 0!==g&&g,x=o.disableEscapeKeyDown,w=void 0!==x&&x,O=o.disablePortal,E=void 0!==O&&O,S=o.disableRestoreFocus,k=void 0!==S&&S,j=o.disableScrollLock,C=void 0!==j&&j,P=o.hideBackdrop,T=void 0!==P&&P,N=o.keepMounted,R=void 0!==N&&N,M=o.manager,D=void 0===M?cn:M,A=o.onBackdropClick,I=o.onClose,L=o.onEscapeKeyDown,_=o.onRendered,z=o.open,F=Object(ze.a)(o,["BackdropComponent","BackdropProps","children","closeAfterTransition","container","disableAutoFocus","disableBackdropClick","disableEnforceFocus","disableEscapeKeyDown","disablePortal","disableRestoreFocus","disableScrollLock","hideBackdrop","keepMounted","manager","onBackdropClick","onClose","onEscapeKeyDown","onRendered","open"]),W=r.useState(!0),B=W[0],H=W[1],U=r.useRef({}),$=r.useRef(null),V=r.useRef(null),q=at(V,t),X=function(e){return!!e.children&&e.children.props.hasOwnProperty("in")}(o),K=function(){return Wt($.current)},Y=function(){return U.current.modalRef=V.current,U.current.mountNode=$.current,U.current},G=function(){D.mount(Y(),{disableScrollLock:C}),V.current.scrollTop=0},Q=Xt((function(){var e=function(e){return e="function"==typeof e?e():e,a.findDOMNode(e)}(f)||K().body;D.add(Y(),e),V.current&&G()})),J=r.useCallback((function(){return D.isTopModal(Y())}),[D]),Z=Xt((function(e){$.current=e,e&&(_&&_(),z&&J()?G():Jt(V.current,!0))})),ee=r.useCallback((function(){D.remove(Y())}),[D]);if(r.useEffect((function(){return function(){ee()}}),[ee]),r.useEffect((function(){z?Q():X&&d||ee()}),[z,ee,X,d,Q]),!R&&!z&&(!X||B))return null;var te=function(e){return{root:{position:"fixed",zIndex:e.zIndex.modal,right:0,bottom:0,top:0,left:0},hidden:{visibility:"hidden"}}}(n||{zIndex:Kt.a}),ne={};return void 0===u.props.tabIndex&&(ne.tabIndex=u.props.tabIndex||"-1"),X&&(ne.onEnter=Ht((function(){H(!1)}),u.props.onEnter),ne.onExited=Ht((function(){H(!0),d&&ee()}),u.props.onExited)),r.createElement(Vt,{ref:Z,container:f,disablePortal:E},r.createElement("div",Object(h.a)({ref:q,onKeyDown:function(e){"Escape"===e.key&&J()&&(L&&L(e),w||(e.stopPropagation(),I&&I(e,"escapeKeyDown")))},role:"presentation"},F,{style:Object(h.a)({},te.root,!z&&B?te.hidden:{},F.style)}),T?null:r.createElement(l,Object(h.a)({open:z,onClick:function(e){e.target===e.currentTarget&&(A&&A(e),!b&&I&&I(e,"backdropClick"))}},c)),r.createElement(on,{disableEnforceFocus:y,disableAutoFocus:m,disableRestoreFocus:k,getDoc:K,isEnabled:J,open:z},r.cloneElement(u,ne))))})),sn=!1,dn=o.a.createContext(null),fn=function(e){function t(t,n){var r;r=e.call(this,t,n)||this;var o,a=n&&!n.isMounting?t.enter:t.appear;return r.appearStatus=null,t.in?a?(o="exited",r.appearStatus="entering"):o="entered":o=t.unmountOnExit||t.mountOnEnter?"unmounted":"exited",r.state={status:o},r.nextCallback=null,r}Object(G.a)(t,e),t.getDerivedStateFromProps=function(e,t){return e.in&&"unmounted"===t.status?{status:"exited"}:null};var n=t.prototype;return n.componentDidMount=function(){this.updateStatus(!0,this.appearStatus)},n.componentDidUpdate=function(e){var t=null;if(e!==this.props){var n=this.state.status;this.props.in?"entering"!==n&&"entered"!==n&&(t="entering"):"entering"!==n&&"entered"!==n||(t="exiting")}this.updateStatus(!1,t)},n.componentWillUnmount=function(){this.cancelNextCallback()},n.getTimeouts=function(){var e,t,n,r=this.props.timeout;return e=t=n=r,null!=r&&"number"!=typeof r&&(e=r.exit,t=r.enter,n=void 0!==r.appear?r.appear:t),{exit:e,enter:t,appear:n}},n.updateStatus=function(e,t){void 0===e&&(e=!1),null!==t?(this.cancelNextCallback(),"entering"===t?this.performEnter(e):this.performExit()):this.props.unmountOnExit&&"exited"===this.state.status&&this.setState({status:"unmounted"})},n.performEnter=function(e){var t=this,n=this.props.enter,r=this.context?this.context.isMounting:e,o=this.props.nodeRef?[r]:[i.a.findDOMNode(this),r],a=o[0],l=o[1],c=this.getTimeouts(),u=r?c.appear:c.enter;!e&&!n||sn?this.safeSetState({status:"entered"},(function(){t.props.onEntered(a)})):(this.props.onEnter(a,l),this.safeSetState({status:"entering"},(function(){t.props.onEntering(a,l),t.onTransitionEnd(u,(function(){t.safeSetState({status:"entered"},(function(){t.props.onEntered(a,l)}))}))})))},n.performExit=function(){var e=this,t=this.props.exit,n=this.getTimeouts(),r=this.props.nodeRef?void 0:i.a.findDOMNode(this);t&&!sn?(this.props.onExit(r),this.safeSetState({status:"exiting"},(function(){e.props.onExiting(r),e.onTransitionEnd(n.exit,(function(){e.safeSetState({status:"exited"},(function(){e.props.onExited(r)}))}))}))):this.safeSetState({status:"exited"},(function(){e.props.onExited(r)}))},n.cancelNextCallback=function(){null!==this.nextCallback&&(this.nextCallback.cancel(),this.nextCallback=null)},n.safeSetState=function(e,t){t=this.setNextCallback(t),this.setState(e,t)},n.setNextCallback=function(e){var t=this,n=!0;return this.nextCallback=function(r){n&&(n=!1,t.nextCallback=null,e(r))},this.nextCallback.cancel=function(){n=!1},this.nextCallback},n.onTransitionEnd=function(e,t){this.setNextCallback(t);var n=this.props.nodeRef?this.props.nodeRef.current:i.a.findDOMNode(this),r=null==e&&!this.props.addEndListener;if(n&&!r){if(this.props.addEndListener){var o=this.props.nodeRef?[this.nextCallback]:[n,this.nextCallback],a=o[0],l=o[1];this.props.addEndListener(a,l)}null!=e&&setTimeout(this.nextCallback,e)}else setTimeout(this.nextCallback,0)},n.render=function(){var e=this.state.status;if("unmounted"===e)return null;var t=this.props,n=t.children,r=(t.in,t.mountOnEnter,t.unmountOnExit,t.appear,t.enter,t.exit,t.timeout,t.addEndListener,t.onEnter,t.onEntering,t.onEntered,t.onExit,t.onExiting,t.onExited,t.nodeRef,Object(v.a)(t,["children","in","mountOnEnter","unmountOnExit","appear","enter","exit","timeout","addEndListener","onEnter","onEntering","onEntered","onExit","onExiting","onExited","nodeRef"]));return o.a.createElement(dn.Provider,{value:null},"function"==typeof n?n(e,r):o.a.cloneElement(o.a.Children.only(n),r))},t}(o.a.Component);function pn(){}fn.contextType=dn,fn.propTypes={},fn.defaultProps={in:!1,mountOnEnter:!1,unmountOnExit:!1,appear:!1,enter:!0,exit:!0,onEnter:pn,onEntering:pn,onEntered:pn,onExit:pn,onExiting:pn,onExited:pn},fn.UNMOUNTED="unmounted",fn.EXITED="exited",fn.ENTERING="entering",fn.ENTERED="entered",fn.EXITING="exiting";var mn=fn,hn=function(e){return e.scrollTop};function vn(e,t){var n=e.timeout,r=e.style,o=void 0===r?{}:r;return{duration:o.transitionDuration||"number"==typeof n?n:n[t.mode]||0,delay:o.transitionDelay}}function bn(e){return"scale(".concat(e,", ").concat(Math.pow(e,2),")")}var gn={entering:{opacity:1,transform:bn(1)},entered:{opacity:1,transform:"none"}},yn=r.forwardRef((function(e,t){var n=e.children,o=e.disableStrictModeCompat,a=void 0!==o&&o,i=e.in,l=e.onEnter,c=e.onEntered,u=e.onEntering,s=e.onExit,d=e.onExited,f=e.onExiting,p=e.style,m=e.timeout,v=void 0===m?"auto":m,b=e.TransitionComponent,g=void 0===b?mn:b,y=Object(ze.a)(e,["children","disableStrictModeCompat","in","onEnter","onEntered","onEntering","onExit","onExited","onExiting","style","timeout","TransitionComponent"]),x=r.useRef(),w=r.useRef(),O=Ot(),E=O.unstable_strictMode&&!a,S=r.useRef(null),k=at(n.ref,t),j=at(E?S:void 0,k),C=function(e){return function(t,n){if(e){var r=E?[S.current,t]:[t,n],o=Object(zt.a)(r,2),a=o[0],i=o[1];void 0===i?e(a):e(a,i)}}},P=C(u),T=C((function(e,t){hn(e);var n,r=vn({style:p,timeout:v},{mode:"enter"}),o=r.duration,a=r.delay;"auto"===v?(n=O.transitions.getAutoHeightDuration(e.clientHeight),w.current=n):n=o,e.style.transition=[O.transitions.create("opacity",{duration:n,delay:a}),O.transitions.create("transform",{duration:.666*n,delay:a})].join(","),l&&l(e,t)})),N=C(c),R=C(f),M=C((function(e){var t,n=vn({style:p,timeout:v},{mode:"exit"}),r=n.duration,o=n.delay;"auto"===v?(t=O.transitions.getAutoHeightDuration(e.clientHeight),w.current=t):t=r,e.style.transition=[O.transitions.create("opacity",{duration:t,delay:o}),O.transitions.create("transform",{duration:.666*t,delay:o||.333*t})].join(","),e.style.opacity="0",e.style.transform=bn(.75),s&&s(e)})),D=C(d);return r.useEffect((function(){return function(){clearTimeout(x.current)}}),[]),r.createElement(g,Object(h.a)({appear:!0,in:i,nodeRef:E?S:void 0,onEnter:T,onEntered:N,onEntering:P,onExit:M,onExited:D,onExiting:R,addEndListener:function(e,t){var n=E?e:t;"auto"===v&&(x.current=setTimeout(n,w.current||0))},timeout:"auto"===v?null:v},y),(function(e,t){return r.cloneElement(n,Object(h.a)({style:Object(h.a)({opacity:0,transform:bn(.75),visibility:"exited"!==e||i?void 0:"hidden"},gn[e],p,n.props.style),ref:j},t))}))}));yn.muiSupportAuto=!0;var xn=yn,wn=r.forwardRef((function(e,t){var n=e.classes,o=e.className,a=e.component,i=void 0===a?"div":a,l=e.square,c=void 0!==l&&l,u=e.elevation,s=void 0===u?1:u,d=e.variant,f=void 0===d?"elevation":d,p=Object(ze.a)(e,["classes","className","component","square","elevation","variant"]);return r.createElement(i,Object(h.a)({className:Object(Fe.a)(n.root,o,"outlined"===f?n.outlined:n["elevation".concat(s)],!c&&n.rounded),ref:t},p))})),On=Object(We.a)((function(e){var t={};return e.shadows.forEach((function(e,n){t["elevation".concat(n)]={boxShadow:e}})),Object(h.a)({root:{backgroundColor:e.palette.background.paper,color:e.palette.text.primary,transition:e.transitions.create("box-shadow")},rounded:{borderRadius:e.shape.borderRadius},outlined:{border:"1px solid ".concat(e.palette.divider)}},t)}),{name:"MuiPaper"})(wn);function En(e,t){var n=0;return"number"==typeof t?n=t:"center"===t?n=e.height/2:"bottom"===t&&(n=e.height),n}function Sn(e,t){var n=0;return"number"==typeof t?n=t:"center"===t?n=e.width/2:"right"===t&&(n=e.width),n}function kn(e){return[e.horizontal,e.vertical].map((function(e){return"number"==typeof e?"".concat(e,"px"):e})).join(" ")}function jn(e){return"function"==typeof e?e():e}var Cn=r.forwardRef((function(e,t){var n=e.action,o=e.anchorEl,i=e.anchorOrigin,l=void 0===i?{vertical:"top",horizontal:"left"}:i,c=e.anchorPosition,u=e.anchorReference,s=void 0===u?"anchorEl":u,d=e.children,f=e.classes,p=e.className,m=e.container,v=e.elevation,b=void 0===v?8:v,g=e.getContentAnchorEl,y=e.marginThreshold,x=void 0===y?16:y,w=e.onEnter,O=e.onEntered,E=e.onEntering,S=e.onExit,k=e.onExited,j=e.onExiting,C=e.open,P=e.PaperProps,T=void 0===P?{}:P,N=e.transformOrigin,R=void 0===N?{vertical:"top",horizontal:"left"}:N,M=e.TransitionComponent,D=void 0===M?xn:M,A=e.transitionDuration,I=void 0===A?"auto":A,L=e.TransitionProps,_=void 0===L?{}:L,z=Object(ze.a)(e,["action","anchorEl","anchorOrigin","anchorPosition","anchorReference","children","classes","className","container","elevation","getContentAnchorEl","marginThreshold","onEnter","onEntered","onEntering","onExit","onExited","onExiting","open","PaperProps","transformOrigin","TransitionComponent","transitionDuration","TransitionProps"]),F=r.useRef(),W=r.useCallback((function(e){if("anchorPosition"===s)return c;var t=jn(o),n=(t&&1===t.nodeType?t:Wt(F.current).body).getBoundingClientRect(),r=0===e?l.vertical:"center";return{top:n.top+En(n,r),left:n.left+Sn(n,l.horizontal)}}),[o,l.horizontal,l.vertical,c,s]),B=r.useCallback((function(e){var t=0;if(g&&"anchorEl"===s){var n=g(e);if(n&&e.contains(n)){var r=function(e,t){for(var n=t,r=0;n&&n!==e;)r+=(n=n.parentElement).scrollTop;return r}(e,n);t=n.offsetTop+n.clientHeight/2-r||0}0}return t}),[l.vertical,s,g]),H=r.useCallback((function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0;return{vertical:En(e,R.vertical)+t,horizontal:Sn(e,R.horizontal)}}),[R.horizontal,R.vertical]),U=r.useCallback((function(e){var t=B(e),n={width:e.offsetWidth,height:e.offsetHeight},r=H(n,t);if("none"===s)return{top:null,left:null,transformOrigin:kn(r)};var a=W(t),i=a.top-r.vertical,l=a.left-r.horizontal,c=i+n.height,u=l+n.width,d=Bt(jn(o)),f=d.innerHeight-x,p=d.innerWidth-x;if(i<x){var m=i-x;i-=m,r.vertical+=m}else if(c>f){var h=c-f;i-=h,r.vertical+=h}if(l<x){var v=l-x;l-=v,r.horizontal+=v}else if(u>p){var b=u-p;l-=b,r.horizontal+=b}return{top:"".concat(Math.round(i),"px"),left:"".concat(Math.round(l),"px"),transformOrigin:kn(r)}}),[o,s,W,B,H,x]),$=r.useCallback((function(){var e=F.current;if(e){var t=U(e);null!==t.top&&(e.style.top=t.top),null!==t.left&&(e.style.left=t.left),e.style.transformOrigin=t.transformOrigin}}),[U]),V=r.useCallback((function(e){F.current=a.findDOMNode(e)}),[]);r.useEffect((function(){C&&$()})),r.useImperativeHandle(n,(function(){return C?{updatePosition:function(){$()}}:null}),[C,$]),r.useEffect((function(){if(C){var e=it((function(){$()}));return window.addEventListener("resize",e),function(){e.clear(),window.removeEventListener("resize",e)}}}),[C,$]);var q=I;"auto"!==I||D.muiSupportAuto||(q=void 0);var X=m||(o?Wt(jn(o)).body:void 0);return r.createElement(un,Object(h.a)({container:X,open:C,ref:t,BackdropProps:{invisible:!0},className:Object(Fe.a)(f.root,p)},z),r.createElement(D,Object(h.a)({appear:!0,in:C,onEnter:w,onEntered:O,onExit:S,onExited:k,onExiting:j,timeout:q},_,{onEntering:Ht((function(e,t){E&&E(e,t),$()}),_.onEntering)}),r.createElement(On,Object(h.a)({elevation:b,ref:V},T,{className:Object(Fe.a)(f.paper,T.className)}),d)))})),Pn=Object(We.a)({root:{},paper:{position:"absolute",overflowY:"auto",overflowX:"hidden",minWidth:16,minHeight:16,maxWidth:"calc(100% - 32px)",maxHeight:"calc(100% - 32px)",outline:0}},{name:"MuiPopover"})(Cn);var Tn=r.createContext({}),Nn=r.forwardRef((function(e,t){var n=e.children,o=e.classes,a=e.className,i=e.component,l=void 0===i?"ul":i,c=e.dense,u=void 0!==c&&c,s=e.disablePadding,d=void 0!==s&&s,f=e.subheader,p=Object(ze.a)(e,["children","classes","className","component","dense","disablePadding","subheader"]),m=r.useMemo((function(){return{dense:u}}),[u]);return r.createElement(Tn.Provider,{value:m},r.createElement(l,Object(h.a)({className:Object(Fe.a)(o.root,a,u&&o.dense,!d&&o.padding,f&&o.subheader),ref:t},p),f,n))})),Rn=Object(We.a)({root:{listStyle:"none",margin:0,padding:0,position:"relative"},padding:{paddingTop:8,paddingBottom:8},dense:{},subheader:{paddingTop:0}},{name:"MuiList"})(Nn);function Mn(e,t,n){return e===t?e.firstChild:t&&t.nextElementSibling?t.nextElementSibling:n?null:e.firstChild}function Dn(e,t,n){return e===t?n?e.firstChild:e.lastChild:t&&t.previousElementSibling?t.previousElementSibling:n?null:e.lastChild}function An(e,t){if(void 0===t)return!0;var n=e.innerText;return void 0===n&&(n=e.textContent),0!==(n=n.trim().toLowerCase()).length&&(t.repeating?n[0]===t.keys[0]:0===n.indexOf(t.keys.join("")))}function In(e,t,n,r,o,a){for(var i=!1,l=o(e,t,!!t&&n);l;){if(l===e.firstChild){if(i)return;i=!0}var c=!r&&(l.disabled||"true"===l.getAttribute("aria-disabled"));if(l.hasAttribute("tabindex")&&An(l,a)&&!c)return void l.focus();l=o(e,l,n)}}var Ln="undefined"==typeof window?r.useEffect:r.useLayoutEffect,_n=r.forwardRef((function(e,t){var n=e.actions,o=e.autoFocus,i=void 0!==o&&o,l=e.autoFocusItem,c=void 0!==l&&l,u=e.children,s=e.className,d=e.disabledItemsFocusable,f=void 0!==d&&d,p=e.disableListWrap,m=void 0!==p&&p,v=e.onKeyDown,b=e.variant,g=void 0===b?"selectedMenu":b,y=Object(ze.a)(e,["actions","autoFocus","autoFocusItem","children","className","disabledItemsFocusable","disableListWrap","onKeyDown","variant"]),x=r.useRef(null),w=r.useRef({keys:[],repeating:!0,previousKeyMatched:!0,lastTime:null});Ln((function(){i&&x.current.focus()}),[i]),r.useImperativeHandle(n,(function(){return{adjustStyleForScrollbar:function(e,t){var n=!x.current.style.width;if(e.clientHeight<x.current.clientHeight&&n){var r="".concat(Qt(),"px");x.current.style["rtl"===t.direction?"paddingLeft":"paddingRight"]=r,x.current.style.width="calc(100% + ".concat(r,")")}return x.current}}}),[]);var O=at(r.useCallback((function(e){x.current=a.findDOMNode(e)}),[]),t),E=-1;r.Children.forEach(u,(function(e,t){r.isValidElement(e)&&(e.props.disabled||("selectedMenu"===g&&e.props.selected||-1===E)&&(E=t))}));var S=r.Children.map(u,(function(e,t){if(t===E){var n={};return c&&(n.autoFocus=!0),void 0===e.props.tabIndex&&"selectedMenu"===g&&(n.tabIndex=0),r.cloneElement(e,n)}return e}));return r.createElement(Rn,Object(h.a)({role:"menu",ref:O,className:s,onKeyDown:function(e){var t=x.current,n=e.key,r=Wt(t).activeElement;if("ArrowDown"===n)e.preventDefault(),In(t,r,m,f,Mn);else if("ArrowUp"===n)e.preventDefault(),In(t,r,m,f,Dn);else if("Home"===n)e.preventDefault(),In(t,null,m,f,Mn);else if("End"===n)e.preventDefault(),In(t,null,m,f,Dn);else if(1===n.length){var o=w.current,a=n.toLowerCase(),i=performance.now();o.keys.length>0&&(i-o.lastTime>500?(o.keys=[],o.repeating=!0,o.previousKeyMatched=!0):o.repeating&&a!==o.keys[0]&&(o.repeating=!1)),o.lastTime=i,o.keys.push(a);var l=r&&!o.repeating&&An(r,o);o.previousKeyMatched&&(l||In(t,r,!1,f,Mn,o))?e.preventDefault():o.previousKeyMatched=!1}v&&v(e)},tabIndex:i?0:-1},y),S)})),zn={vertical:"top",horizontal:"right"},Fn={vertical:"top",horizontal:"left"},Wn=r.forwardRef((function(e,t){var n=e.autoFocus,o=void 0===n||n,i=e.children,l=e.classes,c=e.disableAutoFocusItem,u=void 0!==c&&c,s=e.MenuListProps,d=void 0===s?{}:s,f=e.onClose,p=e.onEntering,m=e.open,v=e.PaperProps,b=void 0===v?{}:v,g=e.PopoverClasses,y=e.transitionDuration,x=void 0===y?"auto":y,w=e.variant,O=void 0===w?"selectedMenu":w,E=Object(ze.a)(e,["autoFocus","children","classes","disableAutoFocusItem","MenuListProps","onClose","onEntering","open","PaperProps","PopoverClasses","transitionDuration","variant"]),S=Ot(),k=o&&!u&&m,j=r.useRef(null),C=r.useRef(null),P=-1;r.Children.map(i,(function(e,t){r.isValidElement(e)&&(e.props.disabled||("menu"!==O&&e.props.selected||-1===P)&&(P=t))}));var T=r.Children.map(i,(function(e,t){return t===P?r.cloneElement(e,{ref:function(t){C.current=a.findDOMNode(t),ot(e.ref,t)}}):e}));return r.createElement(Pn,Object(h.a)({getContentAnchorEl:function(){return C.current},classes:g,onClose:f,onEntering:function(e,t){j.current&&j.current.adjustStyleForScrollbar(e,S),p&&p(e,t)},anchorOrigin:"rtl"===S.direction?zn:Fn,transformOrigin:"rtl"===S.direction?zn:Fn,PaperProps:Object(h.a)({},b,{classes:Object(h.a)({},b.classes,{root:l.paper})}),open:m,ref:t,transitionDuration:x},E),r.createElement(_n,Object(h.a)({onKeyDown:function(e){"Tab"===e.key&&(e.preventDefault(),f&&f(e,"tabKeyDown"))},actions:j,autoFocus:o&&(-1===P||u),autoFocusItem:k,variant:O},d,{className:Object(Fe.a)(l.list,d.className)}),T))})),Bn=Object(We.a)({paper:{maxHeight:"calc(100% - 96px)",WebkitOverflowScrolling:"touch"},list:{outline:0}},{name:"MuiMenu"})(Wn);function Hn(e){var t=e.controlled,n=e.default,o=(e.name,e.state,r.useRef(void 0!==t).current),a=r.useState(n),i=a[0],l=a[1];return[o?t:i,r.useCallback((function(e){o||l(e)}),[])]}function Un(e,t){return"object"===Object(Ft.a)(t)&&null!==t?e===t:String(e)===String(t)}var $n=r.forwardRef((function(e,t){var n=e["aria-label"],o=e.autoFocus,a=e.autoWidth,i=e.children,l=e.classes,c=e.className,u=e.defaultValue,s=e.disabled,d=e.displayEmpty,f=e.IconComponent,p=e.inputRef,m=e.labelId,v=e.MenuProps,b=void 0===v?{}:v,g=e.multiple,y=e.name,x=e.onBlur,w=e.onChange,O=e.onClose,E=e.onFocus,S=e.onOpen,k=e.open,j=e.readOnly,C=e.renderValue,P=e.SelectDisplayProps,T=void 0===P?{}:P,N=e.tabIndex,R=(e.type,e.value),M=e.variant,D=void 0===M?"standard":M,A=Object(ze.a)(e,["aria-label","autoFocus","autoWidth","children","classes","className","defaultValue","disabled","displayEmpty","IconComponent","inputRef","labelId","MenuProps","multiple","name","onBlur","onChange","onClose","onFocus","onOpen","open","readOnly","renderValue","SelectDisplayProps","tabIndex","type","value","variant"]),I=Hn({controlled:R,default:u,name:"Select"}),L=Object(zt.a)(I,2),_=L[0],z=L[1],F=r.useRef(null),W=r.useState(null),B=W[0],H=W[1],U=r.useRef(null!=k).current,$=r.useState(),V=$[0],q=$[1],X=r.useState(!1),K=X[0],Y=X[1],G=at(t,p);r.useImperativeHandle(G,(function(){return{focus:function(){B.focus()},node:F.current,value:_}}),[B,_]),r.useEffect((function(){o&&B&&B.focus()}),[o,B]),r.useEffect((function(){if(B){var e=Wt(B).getElementById(m);if(e){var t=function(){getSelection().isCollapsed&&B.focus()};return e.addEventListener("click",t),function(){e.removeEventListener("click",t)}}}}),[m,B]);var Q,J,Z=function(e,t){e?S&&S(t):O&&O(t),U||(q(a?null:B.clientWidth),Y(e))},ee=r.Children.toArray(i),te=function(e){return function(t){var n;if(g||Z(!1,t),g){n=Array.isArray(_)?_.slice():[];var r=_.indexOf(e.props.value);-1===r?n.push(e.props.value):n.splice(r,1)}else n=e.props.value;e.props.onClick&&e.props.onClick(t),_!==n&&(z(n),w&&(t.persist(),Object.defineProperty(t,"target",{writable:!0,value:{value:n,name:y}}),w(t,e)))}},ne=null!==B&&(U?k:K);delete A["aria-invalid"];var re=[],oe=!1;(ft({value:_})||d)&&(C?Q=C(_):oe=!0);var ae=ee.map((function(e){if(!r.isValidElement(e))return null;var t;if(g){if(!Array.isArray(_))throw new Error(Object(Ze.a)(2));(t=_.some((function(t){return Un(t,e.props.value)})))&&oe&&re.push(e.props.children)}else(t=Un(_,e.props.value))&&oe&&(J=e.props.children);return t&&!0,r.cloneElement(e,{"aria-selected":t?"true":void 0,onClick:te(e),onKeyUp:function(t){" "===t.key&&t.preventDefault(),e.props.onKeyUp&&e.props.onKeyUp(t)},role:"option",selected:t,value:void 0,"data-value":e.props.value})}));oe&&(Q=g?re.join(", "):J);var ie,le=V;!a&&U&&B&&(le=B.clientWidth),ie=void 0!==N?N:s?null:0;var ce=T.id||(y?"mui-component-select-".concat(y):void 0);return r.createElement(r.Fragment,null,r.createElement("div",Object(h.a)({className:Object(Fe.a)(l.root,l.select,l.selectMenu,l[D],c,s&&l.disabled),ref:H,tabIndex:ie,role:"button","aria-disabled":s?"true":void 0,"aria-expanded":ne?"true":void 0,"aria-haspopup":"listbox","aria-label":n,"aria-labelledby":[m,ce].filter(Boolean).join(" ")||void 0,onKeyDown:function(e){if(!j){-1!==[" ","ArrowUp","ArrowDown","Enter"].indexOf(e.key)&&(e.preventDefault(),Z(!0,e))}},onMouseDown:s||j?null:function(e){0===e.button&&(e.preventDefault(),B.focus(),Z(!0,e))},onBlur:function(e){!ne&&x&&(e.persist(),Object.defineProperty(e,"target",{writable:!0,value:{value:_,name:y}}),x(e))},onFocus:E},T,{id:ce}),function(e){return null==e||"string"==typeof e&&!e.trim()}(Q)?r.createElement("span",{dangerouslySetInnerHTML:{__html:"&#8203;"}}):Q),r.createElement("input",Object(h.a)({value:Array.isArray(_)?_.join(","):_,name:y,ref:F,"aria-hidden":!0,onChange:function(e){var t=ee.map((function(e){return e.props.value})).indexOf(e.target.value);if(-1!==t){var n=ee[t];z(n.props.value),w&&w(e,n)}},tabIndex:-1,className:l.nativeInput,autoFocus:o},A)),r.createElement(f,{className:Object(Fe.a)(l.icon,l["icon".concat(Object(qe.a)(D))],ne&&l.iconOpen,s&&l.disabled)}),r.createElement(Bn,Object(h.a)({id:"menu-".concat(y||""),anchorEl:B,open:ne,onClose:function(e){Z(!1,e)}},b,{MenuListProps:Object(h.a)({"aria-labelledby":m,role:"listbox",disableListWrap:!0},b.MenuListProps),PaperProps:Object(h.a)({},b.PaperProps,{style:Object(h.a)({minWidth:le},null!=b.PaperProps?b.PaperProps.style:null)})}),ae))})),Vn=n(68);function qn(e,t){var n=function(t,n){return o.a.createElement(Vn.a,Object(h.a)({ref:n},t),e)};return n.muiName=Vn.a.muiName,o.a.memo(o.a.forwardRef(n))}var Xn=qn(r.createElement("path",{d:"M7 10l5 5 5-5z"})),Kn=r.forwardRef((function(e,t){var n=e.classes,o=e.className,a=e.disabled,i=e.IconComponent,l=e.inputRef,c=e.variant,u=void 0===c?"standard":c,s=Object(ze.a)(e,["classes","className","disabled","IconComponent","inputRef","variant"]);return r.createElement(r.Fragment,null,r.createElement("select",Object(h.a)({className:Object(Fe.a)(n.root,n.select,n[u],o,a&&n.disabled),disabled:a,ref:l||t},s)),e.multiple?null:r.createElement(i,{className:Object(Fe.a)(n.icon,n["icon".concat(Object(qe.a)(u))],a&&n.disabled)}))})),Yn=function(e){return{root:{},select:{"-moz-appearance":"none","-webkit-appearance":"none",userSelect:"none",borderRadius:0,minWidth:16,cursor:"pointer","&:focus":{backgroundColor:"light"===e.palette.type?"rgba(0, 0, 0, 0.05)":"rgba(255, 255, 255, 0.05)",borderRadius:0},"&::-ms-expand":{display:"none"},"&$disabled":{cursor:"default"},"&[multiple]":{height:"auto"},"&:not([multiple]) option, &:not([multiple]) optgroup":{backgroundColor:e.palette.background.paper},"&&":{paddingRight:24}},filled:{"&&":{paddingRight:32}},outlined:{borderRadius:e.shape.borderRadius,"&&":{paddingRight:32}},selectMenu:{height:"auto",minHeight:"1.1876em",textOverflow:"ellipsis",whiteSpace:"nowrap",overflow:"hidden"},disabled:{},icon:{position:"absolute",right:0,top:"calc(50% - 12px)",pointerEvents:"none",color:e.palette.action.active,"&$disabled":{color:e.palette.action.disabled}},iconOpen:{transform:"rotate(180deg)"},iconFilled:{right:7},iconOutlined:{right:7},nativeInput:{bottom:0,left:0,position:"absolute",opacity:0,pointerEvents:"none",width:"100%"}}},Gn=r.createElement(bt,null),Qn=r.forwardRef((function(e,t){var n=e.children,o=e.classes,a=e.IconComponent,i=void 0===a?Xn:a,l=e.input,c=void 0===l?Gn:l,u=e.inputProps,s=(e.variant,Object(ze.a)(e,["children","classes","IconComponent","input","inputProps","variant"])),d=et({props:e,muiFormControl:Ct(),states:["variant"]});return r.cloneElement(c,Object(h.a)({inputComponent:Kn,inputProps:Object(h.a)({children:n,classes:o,IconComponent:i,variant:d.variant,type:void 0},u,c?c.props.inputProps:{}),ref:t},s))}));Qn.muiName="Select";Object(We.a)(Yn,{name:"MuiNativeSelect"})(Qn);var Jn=Yn,Zn=r.createElement(bt,null),er=r.createElement(yt,null),tr=r.forwardRef((function e(t,n){var o=t.autoWidth,a=void 0!==o&&o,i=t.children,l=t.classes,c=t.displayEmpty,u=void 0!==c&&c,s=t.IconComponent,d=void 0===s?Xn:s,f=t.id,p=t.input,m=t.inputProps,v=t.label,b=t.labelId,g=t.labelWidth,y=void 0===g?0:g,x=t.MenuProps,w=t.multiple,O=void 0!==w&&w,E=t.native,S=void 0!==E&&E,k=t.onClose,j=t.onOpen,C=t.open,P=t.renderValue,T=t.SelectDisplayProps,N=t.variant,R=void 0===N?"standard":N,M=Object(ze.a)(t,["autoWidth","children","classes","displayEmpty","IconComponent","id","input","inputProps","label","labelId","labelWidth","MenuProps","multiple","native","onClose","onOpen","open","renderValue","SelectDisplayProps","variant"]),D=S?Kn:$n,A=et({props:t,muiFormControl:Ct(),states:["variant"]}).variant||R,I=p||{standard:Zn,outlined:r.createElement(jt,{label:v,labelWidth:y}),filled:er}[A];return r.cloneElement(I,Object(h.a)({inputComponent:D,inputProps:Object(h.a)({children:i,IconComponent:d,variant:A,type:void 0,multiple:O},S?{id:f}:{autoWidth:a,displayEmpty:u,labelId:b,MenuProps:x,onClose:k,onOpen:j,open:C,renderValue:P,SelectDisplayProps:Object(h.a)({id:f},T)},m,{classes:m?Object(_t.a)({baseClasses:l,newClasses:m.classes,Component:e}):l},p?p.props.inputProps:{}),ref:n},M))}));tr.muiName="Select";var nr=Object(We.a)(Jn,{name:"MuiSelect"})(tr),rr={standard:bt,filled:yt,outlined:jt},or=r.forwardRef((function(e,t){var n=e.autoComplete,o=e.autoFocus,a=void 0!==o&&o,i=e.children,l=e.classes,c=e.className,u=e.color,s=void 0===u?"primary":u,d=e.defaultValue,f=e.disabled,p=void 0!==f&&f,m=e.error,v=void 0!==m&&m,b=e.FormHelperTextProps,g=e.fullWidth,y=void 0!==g&&g,x=e.helperText,w=e.hiddenLabel,O=e.id,E=e.InputLabelProps,S=e.inputProps,k=e.InputProps,j=e.inputRef,C=e.label,P=e.multiline,T=void 0!==P&&P,N=e.name,R=e.onBlur,M=e.onChange,D=e.onFocus,A=e.placeholder,I=e.required,L=void 0!==I&&I,_=e.rows,z=e.rowsMax,F=e.select,W=void 0!==F&&F,B=e.SelectProps,H=e.type,U=e.value,$=e.variant,V=void 0===$?"standard":$,q=Object(ze.a)(e,["autoComplete","autoFocus","children","classes","className","color","defaultValue","disabled","error","FormHelperTextProps","fullWidth","helperText","hiddenLabel","id","InputLabelProps","inputProps","InputProps","inputRef","label","multiline","name","onBlur","onChange","onFocus","placeholder","required","rows","rowsMax","select","SelectProps","type","value","variant"]);var X={};if("outlined"===V&&(E&&void 0!==E.shrink&&(X.notched=E.shrink),C)){var K,Y=null!==(K=null==E?void 0:E.required)&&void 0!==K?K:L;X.label=r.createElement(r.Fragment,null,C,Y&&" *")}W&&(B&&B.native||(X.id=void 0),X["aria-describedby"]=void 0);var G=x&&O?"".concat(O,"-helper-text"):void 0,Q=C&&O?"".concat(O,"-label"):void 0,J=rr[V],Z=r.createElement(J,Object(h.a)({"aria-describedby":G,autoComplete:n,autoFocus:a,defaultValue:d,fullWidth:y,multiline:T,name:N,rows:_,rowsMax:z,type:H,value:U,id:O,inputRef:j,onBlur:R,onChange:M,onFocus:D,placeholder:A,inputProps:S},X,k));return r.createElement(At,Object(h.a)({className:Object(Fe.a)(l.root,c),disabled:p,error:v,fullWidth:y,hiddenLabel:w,ref:t,required:L,color:s,variant:V},q),C&&r.createElement(Rt,Object(h.a)({htmlFor:O,id:Q},E),C),W?r.createElement(nr,Object(h.a)({"aria-describedby":G,id:O,labelId:Q,value:U,input:Z},B),i):Z,x&&r.createElement(Lt,Object(h.a)({id:G},b),x))})),ar=Object(We.a)({root:{}},{name:"MuiTextField"})(or),ir=r.forwardRef((function(e,t){e.checked;var n=e.classes,o=e.className,a=e.control,i=e.disabled,l=(e.inputRef,e.label),c=e.labelPlacement,u=void 0===c?"end":c,s=(e.name,e.onChange,e.value,Object(ze.a)(e,["checked","classes","className","control","disabled","inputRef","label","labelPlacement","name","onChange","value"])),d=Ct(),f=i;void 0===f&&void 0!==a.props.disabled&&(f=a.props.disabled),void 0===f&&d&&(f=d.disabled);var p={disabled:f};return["checked","name","onChange","value","inputRef"].forEach((function(t){void 0===a.props[t]&&void 0!==e[t]&&(p[t]=e[t])})),r.createElement("label",Object(h.a)({className:Object(Fe.a)(n.root,o,"end"!==u&&n["labelPlacement".concat(Object(qe.a)(u))],f&&n.disabled),ref:t},s),r.cloneElement(a,p),r.createElement(Ye,{component:"span",className:Object(Fe.a)(n.label,f&&n.disabled)},l))})),lr=Object(We.a)((function(e){return{root:{display:"inline-flex",alignItems:"center",cursor:"pointer",verticalAlign:"middle",WebkitTapHighlightColor:"transparent",marginLeft:-11,marginRight:16,"&$disabled":{cursor:"default"}},labelPlacementStart:{flexDirection:"row-reverse",marginLeft:16,marginRight:-11},labelPlacementTop:{flexDirection:"column-reverse",marginLeft:16},labelPlacementBottom:{flexDirection:"column",marginLeft:16},disabled:{},label:{"&$disabled":{color:e.palette.text.disabled}}}}),{name:"MuiFormControlLabel"})(ir),cr=!0,ur=!1,sr=null,dr={text:!0,search:!0,url:!0,tel:!0,email:!0,password:!0,number:!0,date:!0,month:!0,week:!0,time:!0,datetime:!0,"datetime-local":!0};function fr(e){e.metaKey||e.altKey||e.ctrlKey||(cr=!0)}function pr(){cr=!1}function mr(){"hidden"===this.visibilityState&&ur&&(cr=!0)}function hr(e){var t,n,r,o=e.target;try{return o.matches(":focus-visible")}catch(e){}return cr||(n=(t=o).type,!("INPUT"!==(r=t.tagName)||!dr[n]||t.readOnly)||"TEXTAREA"===r&&!t.readOnly||!!t.isContentEditable)}function vr(){ur=!0,window.clearTimeout(sr),sr=window.setTimeout((function(){ur=!1}),100)}function br(){return{isFocusVisible:hr,onBlurVisible:vr,ref:r.useCallback((function(e){var t,n=a.findDOMNode(e);null!=n&&((t=n.ownerDocument).addEventListener("keydown",fr,!0),t.addEventListener("mousedown",pr,!0),t.addEventListener("pointerdown",pr,!0),t.addEventListener("touchstart",pr,!0),t.addEventListener("visibilitychange",mr,!0))}),[])}}var gr=n(39);function yr(e,t){var n=Object.create(null);return e&&r.Children.map(e,(function(e){return e})).forEach((function(e){n[e.key]=function(e){return t&&Object(r.isValidElement)(e)?t(e):e}(e)})),n}function xr(e,t,n){return null!=n[t]?n[t]:e.props[t]}function wr(e,t,n){var o=yr(e.children),a=function(e,t){function n(n){return n in t?t[n]:e[n]}e=e||{},t=t||{};var r,o=Object.create(null),a=[];for(var i in e)i in t?a.length&&(o[i]=a,a=[]):a.push(i);var l={};for(var c in t){if(o[c])for(r=0;r<o[c].length;r++){var u=o[c][r];l[o[c][r]]=n(u)}l[c]=n(c)}for(r=0;r<a.length;r++)l[a[r]]=n(a[r]);return l}(t,o);return Object.keys(a).forEach((function(i){var l=a[i];if(Object(r.isValidElement)(l)){var c=i in t,u=i in o,s=t[i],d=Object(r.isValidElement)(s)&&!s.props.in;!u||c&&!d?u||!c||d?u&&c&&Object(r.isValidElement)(s)&&(a[i]=Object(r.cloneElement)(l,{onExited:n.bind(null,l),in:s.props.in,exit:xr(l,"exit",e),enter:xr(l,"enter",e)})):a[i]=Object(r.cloneElement)(l,{in:!1}):a[i]=Object(r.cloneElement)(l,{onExited:n.bind(null,l),in:!0,exit:xr(l,"exit",e),enter:xr(l,"enter",e)})}})),a}var Or=Object.values||function(e){return Object.keys(e).map((function(t){return e[t]}))},Er=function(e){function t(t,n){var r,o=(r=e.call(this,t,n)||this).handleExited.bind(Object(gr.a)(r));return r.state={contextValue:{isMounting:!0},handleExited:o,firstRender:!0},r}Object(G.a)(t,e);var n=t.prototype;return n.componentDidMount=function(){this.mounted=!0,this.setState({contextValue:{isMounting:!1}})},n.componentWillUnmount=function(){this.mounted=!1},t.getDerivedStateFromProps=function(e,t){var n,o,a=t.children,i=t.handleExited;return{children:t.firstRender?(n=e,o=i,yr(n.children,(function(e){return Object(r.cloneElement)(e,{onExited:o.bind(null,e),in:!0,appear:xr(e,"appear",n),enter:xr(e,"enter",n),exit:xr(e,"exit",n)})}))):wr(e,a,i),firstRender:!1}},n.handleExited=function(e,t){var n=yr(this.props.children);e.key in n||(e.props.onExited&&e.props.onExited(t),this.mounted&&this.setState((function(t){var n=Object(h.a)({},t.children);return delete n[e.key],{children:n}})))},n.render=function(){var e=this.props,t=e.component,n=e.childFactory,r=Object(v.a)(e,["component","childFactory"]),a=this.state.contextValue,i=Or(this.state.children).map(n);return delete r.appear,delete r.enter,delete r.exit,null===t?o.a.createElement(dn.Provider,{value:a},i):o.a.createElement(dn.Provider,{value:a},o.a.createElement(t,r,i))},t}(o.a.Component);Er.propTypes={},Er.defaultProps={component:"div",childFactory:function(e){return e}};var Sr=Er,kr="undefined"==typeof window?r.useEffect:r.useLayoutEffect;var jr=function(e){var t=e.classes,n=e.pulsate,o=void 0!==n&&n,a=e.rippleX,i=e.rippleY,l=e.rippleSize,c=e.in,u=e.onExited,s=void 0===u?function(){}:u,d=e.timeout,f=r.useState(!1),p=f[0],m=f[1],h=Object(Fe.a)(t.ripple,t.rippleVisible,o&&t.ripplePulsate),v={width:l,height:l,top:-l/2+i,left:-l/2+a},b=Object(Fe.a)(t.child,p&&t.childLeaving,o&&t.childPulsate),g=Xt(s);return kr((function(){if(!c){m(!0);var e=setTimeout(g,d);return function(){clearTimeout(e)}}}),[g,c,d]),r.createElement("span",{className:h,style:v},r.createElement("span",{className:b}))},Cr=r.forwardRef((function(e,t){var n=e.center,o=void 0!==n&&n,a=e.classes,i=e.className,l=Object(ze.a)(e,["center","classes","className"]),c=r.useState([]),u=c[0],s=c[1],d=r.useRef(0),f=r.useRef(null);r.useEffect((function(){f.current&&(f.current(),f.current=null)}),[u]);var p=r.useRef(!1),m=r.useRef(null),v=r.useRef(null),b=r.useRef(null);r.useEffect((function(){return function(){clearTimeout(m.current)}}),[]);var g=r.useCallback((function(e){var t=e.pulsate,n=e.rippleX,o=e.rippleY,i=e.rippleSize,l=e.cb;s((function(e){return[].concat(Object(Gt.a)(e),[r.createElement(jr,{key:d.current,classes:a,timeout:550,pulsate:t,rippleX:n,rippleY:o,rippleSize:i})])})),d.current+=1,f.current=l}),[a]),y=r.useCallback((function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=arguments.length>2?arguments[2]:void 0,r=t.pulsate,a=void 0!==r&&r,i=t.center,l=void 0===i?o||t.pulsate:i,c=t.fakeElement,u=void 0!==c&&c;if("mousedown"===e.type&&p.current)p.current=!1;else{"touchstart"===e.type&&(p.current=!0);var s,d,f,h=u?null:b.current,y=h?h.getBoundingClientRect():{width:0,height:0,left:0,top:0};if(l||0===e.clientX&&0===e.clientY||!e.clientX&&!e.touches)s=Math.round(y.width/2),d=Math.round(y.height/2);else{var x=e.touches?e.touches[0]:e,w=x.clientX,O=x.clientY;s=Math.round(w-y.left),d=Math.round(O-y.top)}if(l)(f=Math.sqrt((2*Math.pow(y.width,2)+Math.pow(y.height,2))/3))%2==0&&(f+=1);else{var E=2*Math.max(Math.abs((h?h.clientWidth:0)-s),s)+2,S=2*Math.max(Math.abs((h?h.clientHeight:0)-d),d)+2;f=Math.sqrt(Math.pow(E,2)+Math.pow(S,2))}e.touches?null===v.current&&(v.current=function(){g({pulsate:a,rippleX:s,rippleY:d,rippleSize:f,cb:n})},m.current=setTimeout((function(){v.current&&(v.current(),v.current=null)}),80)):g({pulsate:a,rippleX:s,rippleY:d,rippleSize:f,cb:n})}}),[o,g]),x=r.useCallback((function(){y({},{pulsate:!0})}),[y]),w=r.useCallback((function(e,t){if(clearTimeout(m.current),"touchend"===e.type&&v.current)return e.persist(),v.current(),v.current=null,void(m.current=setTimeout((function(){w(e,t)})));v.current=null,s((function(e){return e.length>0?e.slice(1):e})),f.current=t}),[]);return r.useImperativeHandle(t,(function(){return{pulsate:x,start:y,stop:w}}),[x,y,w]),r.createElement("span",Object(h.a)({className:Object(Fe.a)(a.root,i),ref:b},l),r.createElement(Sr,{component:null,exit:!0},u))})),Pr=Object(We.a)((function(e){return{root:{overflow:"hidden",pointerEvents:"none",position:"absolute",zIndex:0,top:0,right:0,bottom:0,left:0,borderRadius:"inherit"},ripple:{opacity:0,position:"absolute"},rippleVisible:{opacity:.3,transform:"scale(1)",animation:"$enter ".concat(550,"ms ").concat(e.transitions.easing.easeInOut)},ripplePulsate:{animationDuration:"".concat(e.transitions.duration.shorter,"ms")},child:{opacity:1,display:"block",width:"100%",height:"100%",borderRadius:"50%",backgroundColor:"currentColor"},childLeaving:{opacity:0,animation:"$exit ".concat(550,"ms ").concat(e.transitions.easing.easeInOut)},childPulsate:{position:"absolute",left:0,top:0,animation:"$pulsate 2500ms ".concat(e.transitions.easing.easeInOut," 200ms infinite")},"@keyframes enter":{"0%":{transform:"scale(0)",opacity:.1},"100%":{transform:"scale(1)",opacity:.3}},"@keyframes exit":{"0%":{opacity:1},"100%":{opacity:0}},"@keyframes pulsate":{"0%":{transform:"scale(1)"},"50%":{transform:"scale(0.92)"},"100%":{transform:"scale(1)"}}}}),{flip:!1,name:"MuiTouchRipple"})(r.memo(Cr)),Tr=r.forwardRef((function(e,t){var n=e.action,o=e.buttonRef,i=e.centerRipple,l=void 0!==i&&i,c=e.children,u=e.classes,s=e.className,d=e.component,f=void 0===d?"button":d,p=e.disabled,m=void 0!==p&&p,v=e.disableRipple,b=void 0!==v&&v,g=e.disableTouchRipple,y=void 0!==g&&g,x=e.focusRipple,w=void 0!==x&&x,O=e.focusVisibleClassName,E=e.onBlur,S=e.onClick,k=e.onFocus,j=e.onFocusVisible,C=e.onKeyDown,P=e.onKeyUp,T=e.onMouseDown,N=e.onMouseLeave,R=e.onMouseUp,M=e.onTouchEnd,D=e.onTouchMove,A=e.onTouchStart,I=e.onDragLeave,L=e.tabIndex,_=void 0===L?0:L,z=e.TouchRippleProps,F=e.type,W=void 0===F?"button":F,B=Object(ze.a)(e,["action","buttonRef","centerRipple","children","classes","className","component","disabled","disableRipple","disableTouchRipple","focusRipple","focusVisibleClassName","onBlur","onClick","onFocus","onFocusVisible","onKeyDown","onKeyUp","onMouseDown","onMouseLeave","onMouseUp","onTouchEnd","onTouchMove","onTouchStart","onDragLeave","tabIndex","TouchRippleProps","type"]),H=r.useRef(null);var U=r.useRef(null),$=r.useState(!1),V=$[0],q=$[1];m&&V&&q(!1);var X=br(),K=X.isFocusVisible,Y=X.onBlurVisible,G=X.ref;function Q(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:y;return Xt((function(r){return t&&t(r),!n&&U.current&&U.current[e](r),!0}))}r.useImperativeHandle(n,(function(){return{focusVisible:function(){q(!0),H.current.focus()}}}),[]),r.useEffect((function(){V&&w&&!b&&U.current.pulsate()}),[b,w,V]);var J=Q("start",T),Z=Q("stop",I),ee=Q("stop",R),te=Q("stop",(function(e){V&&e.preventDefault(),N&&N(e)})),ne=Q("start",A),re=Q("stop",M),oe=Q("stop",D),ae=Q("stop",(function(e){V&&(Y(e),q(!1)),E&&E(e)}),!1),ie=Xt((function(e){H.current||(H.current=e.currentTarget),K(e)&&(q(!0),j&&j(e)),k&&k(e)})),le=function(){var e=a.findDOMNode(H.current);return f&&"button"!==f&&!("A"===e.tagName&&e.href)},ce=r.useRef(!1),ue=Xt((function(e){w&&!ce.current&&V&&U.current&&" "===e.key&&(ce.current=!0,e.persist(),U.current.stop(e,(function(){U.current.start(e)}))),e.target===e.currentTarget&&le()&&" "===e.key&&e.preventDefault(),C&&C(e),e.target===e.currentTarget&&le()&&"Enter"===e.key&&!m&&(e.preventDefault(),S&&S(e))})),se=Xt((function(e){w&&" "===e.key&&U.current&&V&&!e.defaultPrevented&&(ce.current=!1,e.persist(),U.current.stop(e,(function(){U.current.pulsate(e)}))),P&&P(e),S&&e.target===e.currentTarget&&le()&&" "===e.key&&!e.defaultPrevented&&S(e)})),de=f;"button"===de&&B.href&&(de="a");var fe={};"button"===de?(fe.type=W,fe.disabled=m):("a"===de&&B.href||(fe.role="button"),fe["aria-disabled"]=m);var pe=at(o,t),me=at(G,H),he=at(pe,me),ve=r.useState(!1),be=ve[0],ge=ve[1];r.useEffect((function(){ge(!0)}),[]);var ye=be&&!b&&!m;return r.createElement(de,Object(h.a)({className:Object(Fe.a)(u.root,s,V&&[u.focusVisible,O],m&&u.disabled),onBlur:ae,onClick:S,onFocus:ie,onKeyDown:ue,onKeyUp:se,onMouseDown:J,onMouseLeave:te,onMouseUp:ee,onDragLeave:Z,onTouchEnd:re,onTouchMove:oe,onTouchStart:ne,ref:he,tabIndex:m?-1:_},fe,B),c,ye?r.createElement(Pr,Object(h.a)({ref:U,center:l},z)):null)})),Nr=Object(We.a)({root:{display:"inline-flex",alignItems:"center",justifyContent:"center",position:"relative",WebkitTapHighlightColor:"transparent",backgroundColor:"transparent",outline:0,border:0,margin:0,borderRadius:0,padding:0,cursor:"pointer",userSelect:"none",verticalAlign:"middle","-moz-appearance":"none","-webkit-appearance":"none",textDecoration:"none",color:"inherit","&::-moz-focus-inner":{borderStyle:"none"},"&$disabled":{pointerEvents:"none",cursor:"default"},"@media print":{colorAdjust:"exact"}},disabled:{},focusVisible:{}},{name:"MuiButtonBase"})(Tr),Rr=r.forwardRef((function(e,t){var n=e.edge,o=void 0!==n&&n,a=e.children,i=e.classes,l=e.className,c=e.color,u=void 0===c?"default":c,s=e.disabled,d=void 0!==s&&s,f=e.disableFocusRipple,p=void 0!==f&&f,m=e.size,v=void 0===m?"medium":m,b=Object(ze.a)(e,["edge","children","classes","className","color","disabled","disableFocusRipple","size"]);return r.createElement(Nr,Object(h.a)({className:Object(Fe.a)(i.root,l,"default"!==u&&i["color".concat(Object(qe.a)(u))],d&&i.disabled,"small"===v&&i["size".concat(Object(qe.a)(v))],{start:i.edgeStart,end:i.edgeEnd}[o]),centerRipple:!0,focusRipple:!p,disabled:d,ref:t},b),r.createElement("span",{className:i.label},a))})),Mr=Object(We.a)((function(e){return{root:{textAlign:"center",flex:"0 0 auto",fontSize:e.typography.pxToRem(24),padding:12,borderRadius:"50%",overflow:"visible",color:e.palette.action.active,transition:e.transitions.create("background-color",{duration:e.transitions.duration.shortest}),"&:hover":{backgroundColor:Object(Ge.c)(e.palette.action.active,e.palette.action.hoverOpacity),"@media (hover: none)":{backgroundColor:"transparent"}},"&$disabled":{backgroundColor:"transparent",color:e.palette.action.disabled}},edgeStart:{marginLeft:-12,"$sizeSmall&":{marginLeft:-3}},edgeEnd:{marginRight:-12,"$sizeSmall&":{marginRight:-3}},colorInherit:{color:"inherit"},colorPrimary:{color:e.palette.primary.main,"&:hover":{backgroundColor:Object(Ge.c)(e.palette.primary.main,e.palette.action.hoverOpacity),"@media (hover: none)":{backgroundColor:"transparent"}}},colorSecondary:{color:e.palette.secondary.main,"&:hover":{backgroundColor:Object(Ge.c)(e.palette.secondary.main,e.palette.action.hoverOpacity),"@media (hover: none)":{backgroundColor:"transparent"}}},disabled:{},sizeSmall:{padding:3,fontSize:e.typography.pxToRem(18)},label:{width:"100%",display:"flex",alignItems:"inherit",justifyContent:"inherit"}}}),{name:"MuiIconButton"})(Rr),Dr=r.forwardRef((function(e,t){var n=e.autoFocus,o=e.checked,a=e.checkedIcon,i=e.classes,l=e.className,c=e.defaultChecked,u=e.disabled,s=e.icon,d=e.id,f=e.inputProps,p=e.inputRef,m=e.name,v=e.onBlur,b=e.onChange,g=e.onFocus,y=e.readOnly,x=e.required,w=e.tabIndex,O=e.type,E=e.value,S=Object(ze.a)(e,["autoFocus","checked","checkedIcon","classes","className","defaultChecked","disabled","icon","id","inputProps","inputRef","name","onBlur","onChange","onFocus","readOnly","required","tabIndex","type","value"]),k=Hn({controlled:o,default:Boolean(c),name:"SwitchBase",state:"checked"}),j=Object(zt.a)(k,2),C=j[0],P=j[1],T=Ct(),N=u;T&&void 0===N&&(N=T.disabled);var R="checkbox"===O||"radio"===O;return r.createElement(Mr,Object(h.a)({component:"span",className:Object(Fe.a)(i.root,l,C&&i.checked,N&&i.disabled),disabled:N,tabIndex:null,role:void 0,onFocus:function(e){g&&g(e),T&&T.onFocus&&T.onFocus(e)},onBlur:function(e){v&&v(e),T&&T.onBlur&&T.onBlur(e)},ref:t},S),r.createElement("input",Object(h.a)({autoFocus:n,checked:o,defaultChecked:c,className:i.input,disabled:N,id:R&&d,name:m,onChange:function(e){var t=e.target.checked;P(t),b&&b(e,t)},readOnly:y,ref:p,required:x,tabIndex:w,type:O,value:E},f)),C?a:s)})),Ar=Object(We.a)({root:{padding:9},checked:{},disabled:{},input:{cursor:"inherit",position:"absolute",opacity:0,width:"100%",height:"100%",top:0,left:0,margin:0,padding:0,zIndex:1}},{name:"PrivateSwitchBase"})(Dr),Ir=qn(r.createElement("path",{d:"M19 5v14H5V5h14m0-2H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2z"})),Lr=qn(r.createElement("path",{d:"M19 3H5c-1.11 0-2 .9-2 2v14c0 1.1.89 2 2 2h14c1.11 0 2-.9 2-2V5c0-1.1-.89-2-2-2zm-9 14l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z"})),_r=qn(r.createElement("path",{d:"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm-2 10H7v-2h10v2z"})),zr=r.createElement(Lr,null),Fr=r.createElement(Ir,null),Wr=r.createElement(_r,null),Br=r.forwardRef((function(e,t){var n=e.checkedIcon,o=void 0===n?zr:n,a=e.classes,i=e.color,l=void 0===i?"secondary":i,c=e.icon,u=void 0===c?Fr:c,s=e.indeterminate,d=void 0!==s&&s,f=e.indeterminateIcon,p=void 0===f?Wr:f,m=e.inputProps,v=e.size,b=void 0===v?"medium":v,g=Object(ze.a)(e,["checkedIcon","classes","color","icon","indeterminate","indeterminateIcon","inputProps","size"]),y=d?p:u,x=d?p:o;return r.createElement(Ar,Object(h.a)({type:"checkbox",classes:{root:Object(Fe.a)(a.root,a["color".concat(Object(qe.a)(l))],d&&a.indeterminate),checked:a.checked,disabled:a.disabled},color:l,inputProps:Object(h.a)({"data-indeterminate":d},m),icon:r.cloneElement(y,{fontSize:void 0===y.props.fontSize&&"small"===b?b:y.props.fontSize}),checkedIcon:r.cloneElement(x,{fontSize:void 0===x.props.fontSize&&"small"===b?b:x.props.fontSize}),ref:t},g))})),Hr=Object(We.a)((function(e){return{root:{color:e.palette.text.secondary},checked:{},disabled:{},indeterminate:{},colorPrimary:{"&$checked":{color:e.palette.primary.main,"&:hover":{backgroundColor:Object(Ge.c)(e.palette.primary.main,e.palette.action.hoverOpacity),"@media (hover: none)":{backgroundColor:"transparent"}}},"&$disabled":{color:e.palette.action.disabled}},colorSecondary:{"&$checked":{color:e.palette.secondary.main,"&:hover":{backgroundColor:Object(Ge.c)(e.palette.secondary.main,e.palette.action.hoverOpacity),"@media (hover: none)":{backgroundColor:"transparent"}}},"&$disabled":{color:e.palette.action.disabled}}}}),{name:"MuiCheckbox"})(Br),Ur=r.forwardRef((function(e,t){var n=e.children,o=e.classes,a=e.className,i=e.color,l=void 0===i?"default":i,c=e.component,u=void 0===c?"button":c,s=e.disabled,d=void 0!==s&&s,f=e.disableFocusRipple,p=void 0!==f&&f,m=e.focusVisibleClassName,v=e.size,b=void 0===v?"large":v,g=e.variant,y=void 0===g?"round":g,x=Object(ze.a)(e,["children","classes","className","color","component","disabled","disableFocusRipple","focusVisibleClassName","size","variant"]);return r.createElement(Nr,Object(h.a)({className:Object(Fe.a)(o.root,a,"round"!==y&&o.extended,"large"!==b&&o["size".concat(Object(qe.a)(b))],d&&o.disabled,{primary:o.primary,secondary:o.secondary,inherit:o.colorInherit}[l]),component:u,disabled:d,focusRipple:!p,focusVisibleClassName:Object(Fe.a)(o.focusVisible,m),ref:t},x),r.createElement("span",{className:o.label},n))})),$r=Object(We.a)((function(e){return{root:Object(h.a)({},e.typography.button,{boxSizing:"border-box",minHeight:36,transition:e.transitions.create(["background-color","box-shadow","border"],{duration:e.transitions.duration.short}),borderRadius:"50%",padding:0,minWidth:0,width:56,height:56,boxShadow:e.shadows[6],"&:active":{boxShadow:e.shadows[12]},color:e.palette.getContrastText(e.palette.grey[300]),backgroundColor:e.palette.grey[300],"&:hover":{backgroundColor:e.palette.grey.A100,"@media (hover: none)":{backgroundColor:e.palette.grey[300]},"&$disabled":{backgroundColor:e.palette.action.disabledBackground},textDecoration:"none"},"&$focusVisible":{boxShadow:e.shadows[6]},"&$disabled":{color:e.palette.action.disabled,boxShadow:e.shadows[0],backgroundColor:e.palette.action.disabledBackground}}),label:{width:"100%",display:"inherit",alignItems:"inherit",justifyContent:"inherit"},primary:{color:e.palette.primary.contrastText,backgroundColor:e.palette.primary.main,"&:hover":{backgroundColor:e.palette.primary.dark,"@media (hover: none)":{backgroundColor:e.palette.primary.main}}},secondary:{color:e.palette.secondary.contrastText,backgroundColor:e.palette.secondary.main,"&:hover":{backgroundColor:e.palette.secondary.dark,"@media (hover: none)":{backgroundColor:e.palette.secondary.main}}},extended:{borderRadius:24,padding:"0 16px",width:"auto",minHeight:"auto",minWidth:48,height:48,"&$sizeSmall":{width:"auto",padding:"0 8px",borderRadius:17,minWidth:34,height:34},"&$sizeMedium":{width:"auto",padding:"0 16px",borderRadius:20,minWidth:40,height:40}},focusVisible:{},disabled:{},colorInherit:{color:"inherit"},sizeSmall:{width:40,height:40},sizeMedium:{width:48,height:48}}}),{name:"MuiFab"})(Ur),Vr=r.forwardRef((function(e,t){var n=e.classes,o=e.className,a=e.raised,i=void 0!==a&&a,l=Object(ze.a)(e,["classes","className","raised"]);return r.createElement(On,Object(h.a)({className:Object(Fe.a)(n.root,o),elevation:i?8:1,ref:t},l))})),qr=Object(We.a)({root:{overflow:"hidden"}},{name:"MuiCard"})(Vr),Xr=qn(r.createElement("path",{d:"M12 2C6.47 2 2 6.47 2 12s4.47 10 10 10 10-4.47 10-10S17.53 2 12 2zm5 13.59L15.59 17 12 13.41 8.41 17 7 15.59 10.59 12 7 8.41 8.41 7 12 10.59 15.59 7 17 8.41 13.41 12 17 15.59z"}));function Kr(e){return"Backspace"===e.key||"Delete"===e.key}var Yr=r.forwardRef((function(e,t){var n=e.avatar,o=e.classes,a=e.className,i=e.clickable,l=e.color,c=void 0===l?"default":l,u=e.component,s=e.deleteIcon,d=e.disabled,f=void 0!==d&&d,p=e.icon,m=e.label,v=e.onClick,b=e.onDelete,g=e.onKeyDown,y=e.onKeyUp,x=e.size,w=void 0===x?"medium":x,O=e.variant,E=void 0===O?"default":O,S=Object(ze.a)(e,["avatar","classes","className","clickable","color","component","deleteIcon","disabled","icon","label","onClick","onDelete","onKeyDown","onKeyUp","size","variant"]),k=r.useRef(null),j=at(k,t),C=function(e){e.stopPropagation(),b&&b(e)},P=!(!1===i||!v)||i,T="small"===w,N=u||(P?Nr:"div"),R=N===Nr?{component:"div"}:{},M=null;if(b){var D=Object(Fe.a)("default"!==c&&("default"===E?o["deleteIconColor".concat(Object(qe.a)(c))]:o["deleteIconOutlinedColor".concat(Object(qe.a)(c))]),T&&o.deleteIconSmall);M=s&&r.isValidElement(s)?r.cloneElement(s,{className:Object(Fe.a)(s.props.className,o.deleteIcon,D),onClick:C}):r.createElement(Xr,{className:Object(Fe.a)(o.deleteIcon,D),onClick:C})}var A=null;n&&r.isValidElement(n)&&(A=r.cloneElement(n,{className:Object(Fe.a)(o.avatar,n.props.className,T&&o.avatarSmall,"default"!==c&&o["avatarColor".concat(Object(qe.a)(c))])}));var I=null;return p&&r.isValidElement(p)&&(I=r.cloneElement(p,{className:Object(Fe.a)(o.icon,p.props.className,T&&o.iconSmall,"default"!==c&&o["iconColor".concat(Object(qe.a)(c))])})),r.createElement(N,Object(h.a)({role:P||b?"button":void 0,className:Object(Fe.a)(o.root,a,"default"!==c&&[o["color".concat(Object(qe.a)(c))],P&&o["clickableColor".concat(Object(qe.a)(c))],b&&o["deletableColor".concat(Object(qe.a)(c))]],"default"!==E&&[o.outlined,{primary:o.outlinedPrimary,secondary:o.outlinedSecondary}[c]],f&&o.disabled,T&&o.sizeSmall,P&&o.clickable,b&&o.deletable),"aria-disabled":!!f||void 0,tabIndex:P||b?0:void 0,onClick:v,onKeyDown:function(e){e.currentTarget===e.target&&Kr(e)&&e.preventDefault(),g&&g(e)},onKeyUp:function(e){e.currentTarget===e.target&&(b&&Kr(e)?b(e):"Escape"===e.key&&k.current&&k.current.blur()),y&&y(e)},ref:j},R,S),A||I,r.createElement("span",{className:Object(Fe.a)(o.label,T&&o.labelSmall)},m),M)})),Gr=Object(We.a)((function(e){var t="light"===e.palette.type?e.palette.grey[300]:e.palette.grey[700],n=Object(Ge.c)(e.palette.text.primary,.26);return{root:{fontFamily:e.typography.fontFamily,fontSize:e.typography.pxToRem(13),display:"inline-flex",alignItems:"center",justifyContent:"center",height:32,color:e.palette.getContrastText(t),backgroundColor:t,borderRadius:16,whiteSpace:"nowrap",transition:e.transitions.create(["background-color","box-shadow"]),cursor:"default",outline:0,textDecoration:"none",border:"none",padding:0,verticalAlign:"middle",boxSizing:"border-box","&$disabled":{opacity:.5,pointerEvents:"none"},"& $avatar":{marginLeft:5,marginRight:-6,width:24,height:24,color:"light"===e.palette.type?e.palette.grey[700]:e.palette.grey[300],fontSize:e.typography.pxToRem(12)},"& $avatarColorPrimary":{color:e.palette.primary.contrastText,backgroundColor:e.palette.primary.dark},"& $avatarColorSecondary":{color:e.palette.secondary.contrastText,backgroundColor:e.palette.secondary.dark},"& $avatarSmall":{marginLeft:4,marginRight:-4,width:18,height:18,fontSize:e.typography.pxToRem(10)}},sizeSmall:{height:24},colorPrimary:{backgroundColor:e.palette.primary.main,color:e.palette.primary.contrastText},colorSecondary:{backgroundColor:e.palette.secondary.main,color:e.palette.secondary.contrastText},disabled:{},clickable:{userSelect:"none",WebkitTapHighlightColor:"transparent",cursor:"pointer","&:hover, &:focus":{backgroundColor:Object(Ge.b)(t,.08)},"&:active":{boxShadow:e.shadows[1]}},clickableColorPrimary:{"&:hover, &:focus":{backgroundColor:Object(Ge.b)(e.palette.primary.main,.08)}},clickableColorSecondary:{"&:hover, &:focus":{backgroundColor:Object(Ge.b)(e.palette.secondary.main,.08)}},deletable:{"&:focus":{backgroundColor:Object(Ge.b)(t,.08)}},deletableColorPrimary:{"&:focus":{backgroundColor:Object(Ge.b)(e.palette.primary.main,.2)}},deletableColorSecondary:{"&:focus":{backgroundColor:Object(Ge.b)(e.palette.secondary.main,.2)}},outlined:{backgroundColor:"transparent",border:"1px solid ".concat("light"===e.palette.type?"rgba(0, 0, 0, 0.23)":"rgba(255, 255, 255, 0.23)"),"$clickable&:hover, $clickable&:focus, $deletable&:focus":{backgroundColor:Object(Ge.c)(e.palette.text.primary,e.palette.action.hoverOpacity)},"& $avatar":{marginLeft:4},"& $avatarSmall":{marginLeft:2},"& $icon":{marginLeft:4},"& $iconSmall":{marginLeft:2},"& $deleteIcon":{marginRight:5},"& $deleteIconSmall":{marginRight:3}},outlinedPrimary:{color:e.palette.primary.main,border:"1px solid ".concat(e.palette.primary.main),"$clickable&:hover, $clickable&:focus, $deletable&:focus":{backgroundColor:Object(Ge.c)(e.palette.primary.main,e.palette.action.hoverOpacity)}},outlinedSecondary:{color:e.palette.secondary.main,border:"1px solid ".concat(e.palette.secondary.main),"$clickable&:hover, $clickable&:focus, $deletable&:focus":{backgroundColor:Object(Ge.c)(e.palette.secondary.main,e.palette.action.hoverOpacity)}},avatar:{},avatarSmall:{},avatarColorPrimary:{},avatarColorSecondary:{},icon:{color:"light"===e.palette.type?e.palette.grey[700]:e.palette.grey[300],marginLeft:5,marginRight:-6},iconSmall:{width:18,height:18,marginLeft:4,marginRight:-4},iconColorPrimary:{color:"inherit"},iconColorSecondary:{color:"inherit"},label:{overflow:"hidden",textOverflow:"ellipsis",paddingLeft:12,paddingRight:12,whiteSpace:"nowrap"},labelSmall:{paddingLeft:8,paddingRight:8},deleteIcon:{WebkitTapHighlightColor:"transparent",color:n,height:22,width:22,cursor:"pointer",margin:"0 5px 0 -6px","&:hover":{color:Object(Ge.c)(n,.4)}},deleteIconSmall:{height:16,width:16,marginRight:4,marginLeft:-4},deleteIconColorPrimary:{color:Object(Ge.c)(e.palette.primary.contrastText,.7),"&:hover, &:active":{color:e.palette.primary.contrastText}},deleteIconColorSecondary:{color:Object(Ge.c)(e.palette.secondary.contrastText,.7),"&:hover, &:active":{color:e.palette.secondary.contrastText}},deleteIconOutlinedColorPrimary:{color:Object(Ge.c)(e.palette.primary.main,.7),"&:hover, &:active":{color:e.palette.primary.main}},deleteIconOutlinedColorSecondary:{color:Object(Ge.c)(e.palette.secondary.main,.7),"&:hover, &:active":{color:e.palette.secondary.main}}}}),{name:"MuiChip"})(Yr),Qr=r.forwardRef((function(e,t){var n=e.children,o=e.classes,a=e.className,i=e.focusVisibleClassName,l=Object(ze.a)(e,["children","classes","className","focusVisibleClassName"]);return r.createElement(Nr,Object(h.a)({className:Object(Fe.a)(o.root,a),focusVisibleClassName:Object(Fe.a)(i,o.focusVisible),ref:t},l),n,r.createElement("span",{className:o.focusHighlight}))})),Jr=Object(We.a)((function(e){return{root:{display:"block",textAlign:"inherit",width:"100%","&:hover $focusHighlight":{opacity:e.palette.action.hoverOpacity},"&$focusVisible $focusHighlight":{opacity:.12}},focusVisible:{},focusHighlight:{overflow:"hidden",pointerEvents:"none",position:"absolute",top:0,right:0,bottom:0,left:0,borderRadius:"inherit",opacity:0,backgroundColor:"currentcolor",transition:e.transitions.create("opacity",{duration:e.transitions.duration.short})}}}),{name:"MuiCardActionArea"})(Qr),Zr=["video","audio","picture","iframe","img"],eo=r.forwardRef((function(e,t){var n=e.children,o=e.classes,a=e.className,i=e.component,l=void 0===i?"div":i,c=e.image,u=e.src,s=e.style,d=Object(ze.a)(e,["children","classes","className","component","image","src","style"]),f=-1!==Zr.indexOf(l),p=!f&&c?Object(h.a)({backgroundImage:'url("'.concat(c,'")')},s):s;return r.createElement(l,Object(h.a)({className:Object(Fe.a)(o.root,a,f&&o.media,-1!=="picture img".indexOf(l)&&o.img),ref:t,style:p,src:f?c||u:void 0},d),n)})),to=Object(We.a)({root:{display:"block",backgroundSize:"cover",backgroundRepeat:"no-repeat",backgroundPosition:"center"},media:{width:"100%"},img:{objectFit:"cover"}},{name:"MuiCardMedia"})(eo),no=r.forwardRef((function(e,t){var n=e.classes,o=e.className,a=e.component,i=void 0===a?"div":a,l=Object(ze.a)(e,["classes","className","component"]);return r.createElement(i,Object(h.a)({className:Object(Fe.a)(n.root,o),ref:t},l))})),ro=Object(We.a)({root:{padding:16,"&:last-child":{paddingBottom:24}}},{name:"MuiCardContent"})(no),oo=r.forwardRef((function(e,t){var n=e.action,o=e.avatar,a=e.classes,i=e.className,l=e.component,c=void 0===l?"div":l,u=e.disableTypography,s=void 0!==u&&u,d=e.subheader,f=e.subheaderTypographyProps,p=e.title,m=e.titleTypographyProps,v=Object(ze.a)(e,["action","avatar","classes","className","component","disableTypography","subheader","subheaderTypographyProps","title","titleTypographyProps"]),b=p;null==b||b.type===Ye||s||(b=r.createElement(Ye,Object(h.a)({variant:o?"body2":"h5",className:a.title,component:"span",display:"block"},m),b));var g=d;return null==g||g.type===Ye||s||(g=r.createElement(Ye,Object(h.a)({variant:o?"body2":"body1",className:a.subheader,color:"textSecondary",component:"span",display:"block"},f),g)),r.createElement(c,Object(h.a)({className:Object(Fe.a)(a.root,i),ref:t},v),o&&r.createElement("div",{className:a.avatar},o),r.createElement("div",{className:a.content},b,g),n&&r.createElement("div",{className:a.action},n))})),ao=Object(We.a)({root:{display:"flex",alignItems:"center",padding:16},avatar:{flex:"0 0 auto",marginRight:16},action:{flex:"0 0 auto",alignSelf:"flex-start",marginTop:-8,marginRight:-8},content:{flex:"1 1 auto"},title:{},subheader:{}},{name:"MuiCardHeader"})(oo),io=n(49),lo=n.n(io);function co(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(e)))return;var n=[],r=!0,o=!1,a=void 0;try{for(var i,l=e[Symbol.iterator]();!(r=(i=l.next()).done)&&(n.push(i.value),!t||n.length!==t);r=!0);}catch(e){o=!0,a=e}finally{try{r||null==l.return||l.return()}finally{if(o)throw a}}return n}(e,t)||function(e,t){if(!e)return;if("string"==typeof e)return uo(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return uo(e,t)}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function uo(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var so=_e((function(e){return{root:{maxWidth:"100%"},media:{height:150,maxWidth:"25%",width:"100%"},card:{position:"relative"},cardAction:{display:"flex",justifyContent:"space-between"},content:{flexGrow:1},button:{"&:not(:last-child)":{marginBottom:"1rem"}},chip:{position:"absolute",top:"1rem",right:".5rem"}}}));function fo(e){var t=so(),n=e.id,r=e.title,a=e.content,i=(e.category,e.price),l=e.cover,c=(e.lessonId,co(o.a.useState(!1),2)),u=(c[0],c[1],co(o.a.useState(!1),2)),s=(u[0],u[1],co(o.a.useState(!1),2)),d=s[0],f=s[1],p=co(o.a.useState(500),2),m=p[0],h=p[1];o.a.useEffect((function(){f(!0),h(100*Math.floor(5*Math.random()))}));return o.a.createElement(o.a.Fragment,null,o.a.createElement(xn,{direction:"up",timeout:m,in:d},o.a.createElement(qr,{elevation:5,key:n,className:t.card},o.a.createElement("div",{className:t.chip},o.a.createElement(Gr,{color:"primary",icon:o.a.createElement(lo.a,null),label:"В моих Уроках",variant:"outlined",size:"small"})),o.a.createElement(Jr,{onClick:function(){e.handleSelectLesson(n),e.redirect("/lesson/".concat(n))},className:t.cardAction},o.a.createElement(to,{className:t.media,image:l,title:"lesson image"}),o.a.createElement(ro,{className:t.content},o.a.createElement(ao,{title:r,subheader:a}),o.a.createElement(Ye,{variant:"body2",component:"p"}," ",a," "),o.a.createElement(Ye,{variant:"body2",color:"textSecondary",component:"p"}," ","цена: ",i))))))}var po=n(80),mo=n.n(po),ho=n(55),vo=n(79);function bo(e){return"function"==typeof e?e():e}var go="undefined"!=typeof window?r.useLayoutEffect:r.useEffect,yo={},xo=r.forwardRef((function(e,t){var n=e.anchorEl,o=e.children,a=e.container,i=e.disablePortal,l=void 0!==i&&i,c=e.keepMounted,u=void 0!==c&&c,s=e.modifiers,d=e.open,f=e.placement,p=void 0===f?"bottom":f,m=e.popperOptions,v=void 0===m?yo:m,b=e.popperRef,g=e.style,y=e.transition,x=void 0!==y&&y,w=Object(ze.a)(e,["anchorEl","children","container","disablePortal","keepMounted","modifiers","open","placement","popperOptions","popperRef","style","transition"]),O=r.useRef(null),E=at(O,t),S=r.useRef(null),k=at(S,b),j=r.useRef(k);go((function(){j.current=k}),[k]),r.useImperativeHandle(b,(function(){return S.current}),[]);var C=r.useState(!0),P=C[0],T=C[1],N=function(e,t){if("ltr"===(t&&t.direction||"ltr"))return e;switch(e){case"bottom-end":return"bottom-start";case"bottom-start":return"bottom-end";case"top-end":return"top-start";case"top-start":return"top-end";default:return e}}(p,Object(wt.a)()),R=r.useState(N),M=R[0],D=R[1];r.useEffect((function(){S.current&&S.current.update()}));var A=r.useCallback((function(){if(O.current&&n&&d){S.current&&(S.current.destroy(),j.current(null));var e=function(e){D(e.placement)},t=(bo(n),new vo.a(bo(n),O.current,Object(h.a)({placement:N},v,{modifiers:Object(h.a)({},l?{}:{preventOverflow:{boundariesElement:"window"}},s,v.modifiers),onCreate:Ht(e,v.onCreate),onUpdate:Ht(e,v.onUpdate)})));j.current(t)}}),[n,l,s,d,N,v]),I=r.useCallback((function(e){ot(E,e),A()}),[E,A]),L=function(){S.current&&(S.current.destroy(),j.current(null))};if(r.useEffect((function(){return function(){L()}}),[]),r.useEffect((function(){d||x||L()}),[d,x]),!u&&!d&&(!x||P))return null;var _={placement:M};return x&&(_.TransitionProps={in:d,onEnter:function(){T(!1)},onExited:function(){T(!0),L()}}),r.createElement(Vt,{disablePortal:l,container:a},r.createElement("div",Object(h.a)({ref:I,role:"tooltip"},w,{style:Object(h.a)({position:"fixed",top:0,left:0,display:d||!u||x?null:"none"},g)}),"function"==typeof o?o(_):o))})),wo=r.forwardRef((function(e,t){var n=e.classes,o=e.className,a=e.color,i=void 0===a?"default":a,l=e.component,c=void 0===l?"li":l,u=e.disableGutters,s=void 0!==u&&u,d=e.disableSticky,f=void 0!==d&&d,p=e.inset,m=void 0!==p&&p,v=Object(ze.a)(e,["classes","className","color","component","disableGutters","disableSticky","inset"]);return r.createElement(c,Object(h.a)({className:Object(Fe.a)(n.root,o,"default"!==i&&n["color".concat(Object(qe.a)(i))],m&&n.inset,!f&&n.sticky,!s&&n.gutters),ref:t},v))})),Oo=Object(We.a)((function(e){return{root:{boxSizing:"border-box",lineHeight:"48px",listStyle:"none",color:e.palette.text.secondary,fontFamily:e.typography.fontFamily,fontWeight:e.typography.fontWeightMedium,fontSize:e.typography.pxToRem(14)},colorPrimary:{color:e.palette.primary.main},colorInherit:{color:"inherit"},gutters:{paddingLeft:16,paddingRight:16},inset:{paddingLeft:72},sticky:{position:"sticky",top:0,zIndex:1,backgroundColor:"inherit"}}}),{name:"MuiListSubheader"})(wo),Eo=qn(r.createElement("path",{d:"M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z"})),So=qn(r.createElement("path",{d:"M7 10l5 5 5-5z"}));function ko(e){var t=r.useState(e),n=t[0],o=t[1],a=e||n;return r.useEffect((function(){null==n&&o("mui-".concat(Math.round(1e5*Math.random())))}),[n]),a}function jo(e){return void 0!==e.normalize?e.normalize("NFD").replace(/[\u0300-\u036f]/g,""):e}function Co(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e.ignoreAccents,n=void 0===t||t,r=e.ignoreCase,o=void 0===r||r,a=e.limit,i=e.matchFrom,l=void 0===i?"any":i,c=e.stringify,u=e.trim,s=void 0!==u&&u;return function(e,t){var r=t.inputValue,i=t.getOptionLabel,u=s?r.trim():r;o&&(u=u.toLowerCase()),n&&(u=jo(u));var d=e.filter((function(e){var t=(c||i)(e);return o&&(t=t.toLowerCase()),n&&(t=jo(t)),"start"===l?0===t.indexOf(u):t.indexOf(u)>-1}));return"number"==typeof a?d.slice(0,a):d}}function Po(e,t){for(var n=0;n<e.length;n+=1)if(t(e[n]))return n;return-1}var To=Co();function No(e){var t=e.autoComplete,n=void 0!==t&&t,o=e.autoHighlight,a=void 0!==o&&o,i=e.autoSelect,l=void 0!==i&&i,c=e.blurOnSelect,u=void 0!==c&&c,s=e.clearOnBlur,d=void 0===s?!e.freeSolo:s,f=e.clearOnEscape,p=void 0!==f&&f,m=e.componentName,v=void 0===m?"useAutocomplete":m,b=e.debug,g=void 0!==b&&b,y=e.defaultValue,x=void 0===y?e.multiple?[]:null:y,w=e.disableClearable,O=void 0!==w&&w,E=e.disableCloseOnSelect,S=void 0!==E&&E,k=e.disabledItemsFocusable,j=void 0!==k&&k,C=e.disableListWrap,P=void 0!==C&&C,T=e.filterOptions,N=void 0===T?To:T,R=e.filterSelectedOptions,M=void 0!==R&&R,D=e.freeSolo,A=void 0!==D&&D,I=e.getOptionDisabled,L=e.getOptionLabel,_=void 0===L?function(e){return e}:L,z=e.getOptionSelected,F=void 0===z?function(e,t){return e===t}:z,W=e.groupBy,B=e.handleHomeEndKeys,H=void 0===B?!e.freeSolo:B,U=e.id,$=e.includeInputInList,V=void 0!==$&&$,q=e.inputValue,X=e.multiple,K=void 0!==X&&X,Y=e.onChange,G=e.onClose,Q=e.onHighlightChange,J=e.onInputChange,Z=e.onOpen,ee=e.open,te=e.openOnFocus,ne=void 0!==te&&te,re=e.options,oe=e.selectOnFocus,ae=void 0===oe?!e.freeSolo:oe,ie=e.value,le=ko(U),ce=_;var ue=r.useRef(!1),se=r.useRef(!0),de=r.useRef(null),fe=r.useRef(null),pe=r.useState(null),me=pe[0],he=pe[1],ve=r.useState(-1),be=ve[0],ge=ve[1],ye=a?0:-1,xe=r.useRef(ye),we=Hn({controlled:ie,default:x,name:v}),Oe=Object(zt.a)(we,2),Ee=Oe[0],Se=Oe[1],ke=Hn({controlled:q,default:"",name:v,state:"inputValue"}),je=Object(zt.a)(ke,2),Ce=je[0],Pe=je[1],Te=r.useState(!1),Ne=Te[0],Re=Te[1],Me=Xt((function(e,t){var n;if(K)n="";else if(null==t)n="";else{var r=ce(t);n="string"==typeof r?r:""}Ce!==n&&(Pe(n),J&&J(e,n,"reset"))}));r.useEffect((function(){Me(null,Ee)}),[Ee,Me]);var De=Hn({controlled:ee,default:!1,name:v,state:"open"}),Ae=Object(zt.a)(De,2),Ie=Ae[0],Le=Ae[1],_e=!K&&null!=Ee&&Ce===ce(Ee),ze=Ie,Fe=ze?N(re.filter((function(e){return!M||!(K?Ee:[Ee]).some((function(t){return null!==t&&F(e,t)}))})),{inputValue:_e?"":Ce,getOptionLabel:ce}):[],We=Xt((function(e){-1===e?de.current.focus():me.querySelector('[data-tag-index="'.concat(e,'"]')).focus()}));r.useEffect((function(){K&&be>Ee.length-1&&(ge(-1),We(-1))}),[Ee,K,be,We]);var Be=Xt((function(e){var t=e.event,n=e.index,r=e.reason,o=void 0===r?"auto":r;if(xe.current=n,-1===n?de.current.removeAttribute("aria-activedescendant"):de.current.setAttribute("aria-activedescendant","".concat(le,"-option-").concat(n)),Q&&Q(t,-1===n?null:Fe[n],o),fe.current){var a=fe.current.querySelector("[data-focus]");a&&a.removeAttribute("data-focus");var i=fe.current.parentElement.querySelector('[role="listbox"]');if(i)if(-1!==n){var l=fe.current.querySelector('[data-option-index="'.concat(n,'"]'));if(l&&(l.setAttribute("data-focus","true"),i.scrollHeight>i.clientHeight&&"mouse"!==o)){var c=l,u=i.clientHeight+i.scrollTop,s=c.offsetTop+c.offsetHeight;s>u?i.scrollTop=s-i.clientHeight:c.offsetTop-c.offsetHeight*(W?1.3:0)<i.scrollTop&&(i.scrollTop=c.offsetTop-c.offsetHeight*(W?1.3:0))}}else i.scrollTop=0}})),He=Xt((function(e){var t=e.event,r=e.diff,o=e.direction,a=void 0===o?"next":o,i=e.reason,l=void 0===i?"auto":i;if(ze){var c=function(e,t){if(!fe.current||-1===e)return-1;for(var n=e;;){if("next"===t&&n===Fe.length||"previous"===t&&-1===n)return-1;var r=fe.current.querySelector('[data-option-index="'.concat(n,'"]')),o=!j&&(r&&(r.disabled||"true"===r.getAttribute("aria-disabled")));if(!(r&&!r.hasAttribute("tabindex")||o))return n;n+="next"===t?1:-1}}(function(){var e=Fe.length-1;if("reset"===r)return ye;if("start"===r)return 0;if("end"===r)return e;var t=xe.current+r;return t<0?-1===t&&V?-1:P&&-1!==xe.current||Math.abs(r)>1?0:e:t>e?t===e+1&&V?-1:P||Math.abs(r)>1?e:0:t}(),a);if(Be({index:c,reason:l,event:t}),n&&"reset"!==r)if(-1===c)de.current.value=Ce;else{var u=ce(Fe[c]);de.current.value=u,0===u.toLowerCase().indexOf(Ce.toLowerCase())&&Ce.length>0&&de.current.setSelectionRange(Ce.length,u.length)}}})),Ue=r.useCallback((function(){if(ze){var e=K?Ee[0]:Ee;if(0!==Fe.length&&null!=e){if(fe.current)if(M||null==e)xe.current>=Fe.length-1?Be({index:Fe.length-1}):Be({index:xe.current});else{var t=Fe[xe.current];if(K&&t&&-1!==Po(Ee,(function(e){return F(t,e)})))return;var n=Po(Fe,(function(t){return F(t,e)}));-1===n?He({diff:"reset"}):Be({index:n})}}else He({diff:"reset"})}}),[0===Fe.length,!K&&Ee,M,He,Be,ze,Ce,K]),$e=Xt((function(e){ot(fe,e),e&&Ue()}));r.useEffect((function(){Ue()}),[Ue]);var Ve=function(e){Ie||(Le(!0),Z&&Z(e))},qe=function(e,t){Ie&&(Le(!1),G&&G(e,t))},Xe=function(e,t,n,r){Ee!==t&&(Y&&Y(e,t,n,r),Se(t))},Ke=r.useRef(!1),Ye=function(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"select-option",r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:"options",o=n,a=t;if(K){var i=Po(a=Array.isArray(Ee)?Ee.slice():[],(function(e){return F(t,e)}));-1===i?a.push(t):"freeSolo"!==r&&(a.splice(i,1),o="remove-option")}Me(e,a),Xe(e,a,o,{option:t}),S||qe(e,o),(!0===u||"touch"===u&&Ke.current||"mouse"===u&&!Ke.current)&&de.current.blur()};var Ge=function(e,t){if(K){qe(e,"toggleInput");var n=be;-1===be?""===Ce&&"previous"===t&&(n=Ee.length-1):((n+="next"===t?1:-1)<0&&(n=0),n===Ee.length&&(n=-1)),n=function(e,t){if(-1===e)return-1;for(var n=e;;){if("next"===t&&n===Ee.length||"previous"===t&&-1===n)return-1;var r=me.querySelector('[data-tag-index="'.concat(n,'"]'));if(!r||r.hasAttribute("tabindex")&&!r.disabled&&"true"!==r.getAttribute("aria-disabled"))return n;n+="next"===t?1:-1}}(n,t),ge(n),We(n)}},Qe=function(e){ue.current=!0,Pe(""),J&&J(e,"","clear"),Xe(e,K?[]:null,"clear")},Je=function(e){return function(t){switch(-1!==be&&-1===["ArrowLeft","ArrowRight"].indexOf(t.key)&&(ge(-1),We(-1)),t.key){case"Home":ze&&H&&(t.preventDefault(),He({diff:"start",direction:"next",reason:"keyboard",event:t}));break;case"End":ze&&H&&(t.preventDefault(),He({diff:"end",direction:"previous",reason:"keyboard",event:t}));break;case"PageUp":t.preventDefault(),He({diff:-5,direction:"previous",reason:"keyboard",event:t}),Ve(t);break;case"PageDown":t.preventDefault(),He({diff:5,direction:"next",reason:"keyboard",event:t}),Ve(t);break;case"ArrowDown":t.preventDefault(),He({diff:1,direction:"next",reason:"keyboard",event:t}),Ve(t);break;case"ArrowUp":t.preventDefault(),He({diff:-1,direction:"previous",reason:"keyboard",event:t}),Ve(t);break;case"ArrowLeft":Ge(t,"previous");break;case"ArrowRight":Ge(t,"next");break;case"Enter":if(229===t.which)break;if(-1!==xe.current&&ze){var r=Fe[xe.current],o=!!I&&I(r);if(t.preventDefault(),o)return;Ye(t,r,"select-option"),n&&de.current.setSelectionRange(de.current.value.length,de.current.value.length)}else A&&""!==Ce&&!1===_e&&(K&&t.preventDefault(),Ye(t,Ce,"create-option","freeSolo"));break;case"Escape":ze?(t.preventDefault(),t.stopPropagation(),qe(t,"escape")):p&&(""!==Ce||K&&Ee.length>0)&&(t.preventDefault(),t.stopPropagation(),Qe(t));break;case"Backspace":if(K&&""===Ce&&Ee.length>0){var a=-1===be?Ee.length-1:be,i=Ee.slice();i.splice(a,1),Xe(t,i,"remove-option",{option:Ee[a]})}}e.onKeyDown&&e.onKeyDown(t)}},Ze=function(e){Re(!0),ne&&!ue.current&&Ve(e)},et=function(e){null===fe.current||document.activeElement!==fe.current.parentElement?(Re(!1),se.current=!0,ue.current=!1,g&&""!==Ce||(l&&-1!==xe.current&&ze?Ye(e,Fe[xe.current],"blur"):l&&A&&""!==Ce?Ye(e,Ce,"blur","freeSolo"):d&&Me(e,Ee),qe(e,"blur"))):de.current.focus()},tt=function(e){var t=e.target.value;Ce!==t&&(Pe(t),J&&J(e,t,"input")),""===t?O||K||Xe(e,null,"clear"):Ve(e)},nt=function(e){Be({event:e,index:Number(e.currentTarget.getAttribute("data-option-index")),reason:"mouse"})},rt=function(){Ke.current=!0},at=function(e){var t=Number(e.currentTarget.getAttribute("data-option-index"));Ye(e,Fe[t],"select-option"),Ke.current=!1},it=function(e){return function(t){var n=Ee.slice();n.splice(e,1),Xe(t,n,"remove-option",{option:Ee[e]})}},lt=function(e){Ie?qe(e,"toggleInput"):Ve(e)},ct=function(e){e.target.getAttribute("id")!==le&&e.preventDefault()},ut=function(){de.current.focus(),ae&&se.current&&de.current.selectionEnd-de.current.selectionStart==0&&de.current.select(),se.current=!1},st=function(e){""!==Ce&&Ie||lt(e)},dt=A&&Ce.length>0;dt=dt||(K?Ee.length>0:null!==Ee);var ft=Fe;if(W){new Map;ft=Fe.reduce((function(e,t,n){var r=W(t);return e.length>0&&e[e.length-1].group===r?e[e.length-1].options.push(t):e.push({key:n,index:n,group:r,options:[t]}),e}),[])}return{getRootProps:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return Object(h.a)({"aria-owns":ze?"".concat(le,"-popup"):null,role:"combobox","aria-expanded":ze},e,{onKeyDown:Je(e),onMouseDown:ct,onClick:ut})},getInputLabelProps:function(){return{id:"".concat(le,"-label"),htmlFor:le}},getInputProps:function(){return{id:le,value:Ce,onBlur:et,onFocus:Ze,onChange:tt,onMouseDown:st,"aria-activedescendant":ze?"":null,"aria-autocomplete":n?"both":"list","aria-controls":ze?"".concat(le,"-popup"):null,autoComplete:"off",ref:de,autoCapitalize:"none",spellCheck:"false"}},getClearProps:function(){return{tabIndex:-1,onClick:Qe}},getPopupIndicatorProps:function(){return{tabIndex:-1,onClick:lt}},getTagProps:function(e){var t=e.index;return{key:t,"data-tag-index":t,tabIndex:-1,onDelete:it(t)}},getListboxProps:function(){return{role:"listbox",id:"".concat(le,"-popup"),"aria-labelledby":"".concat(le,"-label"),ref:$e,onMouseDown:function(e){e.preventDefault()}}},getOptionProps:function(e){var t=e.index,n=e.option,r=(K?Ee:[Ee]).some((function(e){return null!=e&&F(n,e)})),o=!!I&&I(n);return{key:t,tabIndex:-1,role:"option",id:"".concat(le,"-option-").concat(t),onMouseOver:nt,onClick:at,onTouchStart:rt,"data-option-index":t,"aria-disabled":o,"aria-selected":r}},id:le,inputValue:Ce,value:Ee,dirty:dt,popupOpen:ze,focused:Ne||-1!==be,anchorEl:me,setAnchorEl:he,focusedTag:be,groupedOptions:ft}}function Ro(e){e.anchorEl,e.open;var t=Object(ze.a)(e,["anchorEl","open"]);return r.createElement("div",t)}var Mo=r.createElement(Eo,{fontSize:"small"}),Do=r.createElement(So,null),Ao=r.forwardRef((function(e,t){e.autoComplete,e.autoHighlight,e.autoSelect,e.blurOnSelect;var n,o=e.ChipProps,a=e.classes,i=e.className,l=e.clearOnBlur,c=(void 0===l&&e.freeSolo,e.clearOnEscape,e.clearText),u=void 0===c?"Clear":c,s=e.closeIcon,d=void 0===s?Mo:s,f=e.closeText,p=void 0===f?"Close":f,m=(e.debug,e.defaultValue),v=(void 0===m&&e.multiple,e.disableClearable),b=void 0!==v&&v,g=(e.disableCloseOnSelect,e.disabled),y=void 0!==g&&g,x=(e.disabledItemsFocusable,e.disableListWrap,e.disablePortal),w=void 0!==x&&x,O=(e.filterOptions,e.filterSelectedOptions,e.forcePopupIcon),E=void 0===O?"auto":O,S=e.freeSolo,k=void 0!==S&&S,j=e.fullWidth,C=void 0!==j&&j,P=e.getLimitTagsText,T=void 0===P?function(e){return"+".concat(e)}:P,N=(e.getOptionDisabled,e.getOptionLabel),R=void 0===N?function(e){return e}:N,M=(e.getOptionSelected,e.groupBy),D=e.handleHomeEndKeys,A=(void 0===D&&e.freeSolo,e.id,e.includeInputInList,e.inputValue,e.limitTags),I=void 0===A?-1:A,L=e.ListboxComponent,_=void 0===L?"ul":L,z=e.ListboxProps,F=e.loading,W=void 0!==F&&F,B=e.loadingText,H=void 0===B?"Loading…":B,U=e.multiple,$=void 0!==U&&U,V=e.noOptionsText,q=void 0===V?"No options":V,X=(e.onChange,e.onClose,e.onHighlightChange,e.onInputChange,e.onOpen,e.open,e.openOnFocus,e.openText),K=void 0===X?"Open":X,Y=(e.options,e.PaperComponent),G=void 0===Y?On:Y,Q=e.PopperComponent,J=void 0===Q?xo:Q,Z=e.popupIcon,ee=void 0===Z?Do:Z,te=e.renderGroup,ne=e.renderInput,re=e.renderOption,oe=e.renderTags,ae=e.selectOnFocus,ie=(void 0===ae&&e.freeSolo,e.size),le=void 0===ie?"medium":ie,ce=(e.value,Object(ze.a)(e,["autoComplete","autoHighlight","autoSelect","blurOnSelect","ChipProps","classes","className","clearOnBlur","clearOnEscape","clearText","closeIcon","closeText","debug","defaultValue","disableClearable","disableCloseOnSelect","disabled","disabledItemsFocusable","disableListWrap","disablePortal","filterOptions","filterSelectedOptions","forcePopupIcon","freeSolo","fullWidth","getLimitTagsText","getOptionDisabled","getOptionLabel","getOptionSelected","groupBy","handleHomeEndKeys","id","includeInputInList","inputValue","limitTags","ListboxComponent","ListboxProps","loading","loadingText","multiple","noOptionsText","onChange","onClose","onHighlightChange","onInputChange","onOpen","open","openOnFocus","openText","options","PaperComponent","PopperComponent","popupIcon","renderGroup","renderInput","renderOption","renderTags","selectOnFocus","size","value"])),ue=w?Ro:J,se=No(Object(h.a)({},e,{componentName:"Autocomplete"})),de=se.getRootProps,fe=se.getInputProps,pe=se.getInputLabelProps,me=se.getPopupIndicatorProps,he=se.getClearProps,ve=se.getTagProps,be=se.getListboxProps,ge=se.getOptionProps,ye=se.value,xe=se.dirty,we=se.id,Oe=se.popupOpen,Ee=se.focused,Se=se.focusedTag,ke=se.anchorEl,je=se.setAnchorEl,Ce=se.inputValue,Pe=se.groupedOptions;if($&&ye.length>0){var Te=function(e){return Object(h.a)({className:Object(Fe.a)(a.tag,"small"===le&&a.tagSizeSmall),disabled:y},ve(e))};n=oe?oe(ye,Te):ye.map((function(e,t){return r.createElement(Gr,Object(h.a)({label:R(e),size:le},Te({index:t}),o))}))}if(I>-1&&Array.isArray(n)){var Ne=n.length-I;!Ee&&Ne>0&&(n=n.splice(0,I)).push(r.createElement("span",{className:a.tag,key:n.length},T(Ne)))}var Re=te||function(e){return r.createElement("li",{key:e.key},r.createElement(Oo,{className:a.groupLabel,component:"div"},e.group),r.createElement("ul",{className:a.groupUl},e.children))},Me=re||R,De=function(e,t){var n=ge({option:e,index:t});return r.createElement("li",Object(h.a)({},n,{className:a.option}),Me(e,{selected:n["aria-selected"],inputValue:Ce}))},Ae=!b&&!y,Ie=(!k||!0===E)&&!1!==E;return r.createElement(r.Fragment,null,r.createElement("div",Object(h.a)({ref:t,className:Object(Fe.a)(a.root,i,Ee&&a.focused,C&&a.fullWidth,Ae&&a.hasClearIcon,Ie&&a.hasPopupIcon)},de(ce)),ne({id:we,disabled:y,fullWidth:!0,size:"small"===le?"small":void 0,InputLabelProps:pe(),InputProps:{ref:je,className:a.inputRoot,startAdornment:n,endAdornment:r.createElement("div",{className:a.endAdornment},Ae?r.createElement(Mr,Object(h.a)({},he(),{"aria-label":u,title:u,className:Object(Fe.a)(a.clearIndicator,xe&&a.clearIndicatorDirty)}),d):null,Ie?r.createElement(Mr,Object(h.a)({},me(),{disabled:y,"aria-label":Oe?p:K,title:Oe?p:K,className:Object(Fe.a)(a.popupIndicator,Oe&&a.popupIndicatorOpen)}),ee):null)},inputProps:Object(h.a)({className:Object(Fe.a)(a.input,-1===Se&&a.inputFocused),disabled:y},fe())})),Oe&&ke?r.createElement(ue,{className:Object(Fe.a)(a.popper,w&&a.popperDisablePortal),style:{width:ke?ke.clientWidth:null},role:"presentation",anchorEl:ke,open:!0},r.createElement(G,{className:a.paper},W&&0===Pe.length?r.createElement("div",{className:a.loading},H):null,0!==Pe.length||k||W?null:r.createElement("div",{className:a.noOptions},q),Pe.length>0?r.createElement(_,Object(h.a)({className:a.listbox},be(),z),Pe.map((function(e,t){return M?Re({key:e.key,group:e.group,children:e.options.map((function(t,n){return De(t,e.index+n)}))}):De(e,t)}))):null)):null)})),Io=Object(We.a)((function(e){var t;return{root:{"&$focused $clearIndicatorDirty":{visibility:"visible"},"@media (pointer: fine)":{"&:hover $clearIndicatorDirty":{visibility:"visible"}}},fullWidth:{width:"100%"},focused:{},tag:{margin:3,maxWidth:"calc(100% - 6px)"},tagSizeSmall:{margin:2,maxWidth:"calc(100% - 4px)"},hasPopupIcon:{},hasClearIcon:{},inputRoot:{flexWrap:"wrap","$hasPopupIcon &, $hasClearIcon &":{paddingRight:30},"$hasPopupIcon$hasClearIcon &":{paddingRight:56},"& $input":{width:0,minWidth:30},'&[class*="MuiInput-root"]':{paddingBottom:1,"& $input":{padding:4},"& $input:first-child":{padding:"6px 0"}},'&[class*="MuiInput-root"][class*="MuiInput-marginDense"]':{"& $input":{padding:"4px 4px 5px"},"& $input:first-child":{padding:"3px 0 6px"}},'&[class*="MuiOutlinedInput-root"]':{padding:9,"$hasPopupIcon &, $hasClearIcon &":{paddingRight:39},"$hasPopupIcon$hasClearIcon &":{paddingRight:65},"& $input":{padding:"9.5px 4px"},"& $input:first-child":{paddingLeft:6},"& $endAdornment":{right:9}},'&[class*="MuiOutlinedInput-root"][class*="MuiOutlinedInput-marginDense"]':{padding:6,"& $input":{padding:"4.5px 4px"}},'&[class*="MuiFilledInput-root"]':{paddingTop:19,paddingLeft:8,"$hasPopupIcon &, $hasClearIcon &":{paddingRight:39},"$hasPopupIcon$hasClearIcon &":{paddingRight:65},"& $input":{padding:"9px 4px"},"& $endAdornment":{right:9}},'&[class*="MuiFilledInput-root"][class*="MuiFilledInput-marginDense"]':{paddingBottom:1,"& $input":{padding:"4.5px 4px"}}},input:{flexGrow:1,textOverflow:"ellipsis",opacity:0},inputFocused:{opacity:1},endAdornment:{position:"absolute",right:0,top:"calc(50% - 14px)"},clearIndicator:{marginRight:-2,padding:4,visibility:"hidden"},clearIndicatorDirty:{},popupIndicator:{padding:2,marginRight:-2},popupIndicatorOpen:{transform:"rotate(180deg)"},popper:{zIndex:e.zIndex.modal},popperDisablePortal:{position:"absolute"},paper:Object(h.a)({},e.typography.body1,{overflow:"hidden",margin:"4px 0"}),listbox:{listStyle:"none",margin:0,padding:"8px 0",maxHeight:"40vh",overflow:"auto"},loading:{color:e.palette.text.secondary,padding:"14px 16px"},noOptions:{color:e.palette.text.secondary,padding:"14px 16px"},option:(t={minHeight:48,display:"flex",justifyContent:"flex-start",alignItems:"center",cursor:"pointer",paddingTop:6,boxSizing:"border-box",outline:"0",WebkitTapHighlightColor:"transparent",paddingBottom:6,paddingLeft:16,paddingRight:16},Object(xt.a)(t,e.breakpoints.up("sm"),{minHeight:"auto"}),Object(xt.a)(t,'&[aria-selected="true"]',{backgroundColor:e.palette.action.selected}),Object(xt.a)(t,'&[data-focus="true"]',{backgroundColor:e.palette.action.hover}),Object(xt.a)(t,"&:active",{backgroundColor:e.palette.action.selected}),Object(xt.a)(t,'&[aria-disabled="true"]',{opacity:e.palette.action.disabledOpacity,pointerEvents:"none"}),t),groupLabel:{backgroundColor:e.palette.background.paper,top:-8},groupUl:{padding:0,"& $option":{paddingLeft:24}}}}),{name:"MuiAutocomplete"})(Ao);function Lo(e){var t,n,r;return t=e,n=0,r=1,e=(Math.min(Math.max(n,t),r)-n)/(r-n),e=(e-=1)*e*e+1}var _o=r.forwardRef((function(e,t){var n,o=e.classes,a=e.className,i=e.color,l=void 0===i?"primary":i,c=e.disableShrink,u=void 0!==c&&c,s=e.size,d=void 0===s?40:s,f=e.style,p=e.thickness,m=void 0===p?3.6:p,v=e.value,b=void 0===v?0:v,g=e.variant,y=void 0===g?"indeterminate":g,x=Object(ze.a)(e,["classes","className","color","disableShrink","size","style","thickness","value","variant"]),w={},O={},E={};if("determinate"===y||"static"===y){var S=2*Math.PI*((44-m)/2);w.strokeDasharray=S.toFixed(3),E["aria-valuenow"]=Math.round(b),"static"===y?(w.strokeDashoffset="".concat(((100-b)/100*S).toFixed(3),"px"),O.transform="rotate(-90deg)"):(w.strokeDashoffset="".concat((n=(100-b)/100,n*n*S).toFixed(3),"px"),O.transform="rotate(".concat((270*Lo(b/70)).toFixed(3),"deg)"))}return r.createElement("div",Object(h.a)({className:Object(Fe.a)(o.root,a,"inherit"!==l&&o["color".concat(Object(qe.a)(l))],{indeterminate:o.indeterminate,static:o.static}[y]),style:Object(h.a)({width:d,height:d},O,f),ref:t,role:"progressbar"},E,x),r.createElement("svg",{className:o.svg,viewBox:"".concat(22," ").concat(22," ").concat(44," ").concat(44)},r.createElement("circle",{className:Object(Fe.a)(o.circle,u&&o.circleDisableShrink,{indeterminate:o.circleIndeterminate,static:o.circleStatic}[y]),style:w,cx:44,cy:44,r:(44-m)/2,fill:"none",strokeWidth:m})))})),zo=Object(We.a)((function(e){return{root:{display:"inline-block"},static:{transition:e.transitions.create("transform")},indeterminate:{animation:"$circular-rotate 1.4s linear infinite"},colorPrimary:{color:e.palette.primary.main},colorSecondary:{color:e.palette.secondary.main},svg:{display:"block"},circle:{stroke:"currentColor"},circleStatic:{transition:e.transitions.create("stroke-dashoffset")},circleIndeterminate:{animation:"$circular-dash 1.4s ease-in-out infinite",strokeDasharray:"80px, 200px",strokeDashoffset:"0px"},"@keyframes circular-rotate":{"0%":{transformOrigin:"50% 50%"},"100%":{transform:"rotate(360deg)"}},"@keyframes circular-dash":{"0%":{strokeDasharray:"1px, 200px",strokeDashoffset:"0px"},"50%":{strokeDasharray:"100px, 200px",strokeDashoffset:"-15px"},"100%":{strokeDasharray:"100px, 200px",strokeDashoffset:"-125px"}},circleDisableShrink:{animation:"none"}}}),{name:"MuiCircularProgress",flip:!1})(_o),Fo=n(50),Wo={firstName:"Иван",lastName:"Иванов",avatar:(new Fo.AvatarGenerator).generateRandomAvatar(),email:"ivanov.i@protonmail.com",age:"31",availibleLessons:[],myLessons:["tiqD0R"]};function Bo(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function Ho(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Bo(Object(n),!0).forEach((function(t){Uo(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Bo(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function Uo(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function $o(){return($o=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function Vo(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(e)))return;var n=[],r=!0,o=!1,a=void 0;try{for(var i,l=e[Symbol.iterator]();!(r=(i=l.next()).done)&&(n.push(i.value),!t||n.length!==t);r=!0);}catch(e){o=!0,a=e}finally{try{r||null==l.return||l.return()}finally{if(o)throw a}}return n}(e,t)||function(e,t){if(!e)return;if("string"==typeof e)return qo(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return qo(e,t)}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function qo(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var Xo=_e((function(e){return{root:{flexGrow:1,paddingBottom:"2rem",height:"100%"},paper:{height:140,width:100},control:{padding:e.spacing(2)},filter:{display:"flex",justifyContent:"space-between",alignItems:"center"},spacing:{margin:e.spacing(0,0,2,0)},fab:{position:"absolute",bottom:e.spacing(2),right:e.spacing(2),color:e.palette.common.white,backgroundColor:ho.a[500],"&:hover":{backgroundColor:ho.a[600]}}}}));function Ko(e){for(var t=Xo(),n=e.lessonsList,r=[],a=Vo(o.a.useState(!1),2),i=a[0],l=a[1],c=Vo(o.a.useState(null),2),u=c[0],s=c[1],d=Vo(o.a.useState(null),2),f=d[0],p=d[1],m=Vo(o.a.useState(""),2),h=m[0],v=m[1],b=Vo(o.a.useState(""),2),g=b[0],y=b[1],x=Vo(o.a.useState(!1),2),w=x[0],O=x[1],E=i&&0===r.length,S=Co({matchFrom:"any",ignoreCase:!0,limit:2,stringify:function(e){return e.title}}),k=0,j=Object.entries(n);k<j.length;k++){var C=Vo(j[k],2),P=(C[0],C[1]);r.push(P)}return o.a.createElement(o.a.Fragment,null,o.a.createElement(Ye,{className:t.spacing,component:"h2",variant:"h4"},"Список Уроков"),o.a.createElement(Je,{className:t.spacing}),o.a.createElement("div",{className:t.filter},o.a.createElement(Io,{value:u,onChange:function(e,t){s(t)},inputValue:h,onInputChange:function(e,t){v(t)},id:"caterory-search",size:"small",options:["Первая","Вторая","Третья","Четвертая","Прочее"],style:{width:300,marginBottom:"1rem"},renderInput:function(e){return o.a.createElement(ar,$o({},e,{label:"Категории",variant:"outlined"}))}}),o.a.createElement(lr,{value:"end",control:o.a.createElement(Hr,{checked:w,color:"primary",onChange:function(e){O(e.target.checked)},inputProps:{"aria-label":"primary checkbox"}}),label:"Мои уроки",labelPlacement:"end"}),o.a.createElement(Io,{freeSolo:!0,loading:!0,id:"search",value:f,onOpen:function(){l(!0)},onBlur:function(){l(!1)},onChange:function(e,t){p(t)},inputValue:g,onInputChange:function(e,t){y(t)},options:r,getOptionLabel:function(e){return e.title},style:{width:300,marginBottom:"1rem"},size:"small",filterOptions:S,renderInput:function(e){return o.a.createElement(ar,$o({},e,{label:"Поиск",variant:"outlined",InputProps:Ho(Ho({},e.InputProps),{},{endAdornment:o.a.createElement(o.a.Fragment,null,E?o.a.createElement(zo,{color:"inherit",size:20}):null,e.InputProps.endAdornment)})}))}})),o.a.createElement(Je,{className:t.spacing}),o.a.createElement(Ve,{container:!0,className:t.root,spacing:2},r.map((function(t,n){return null===f||t===f?o.a.createElement(Ve,{item:!0,xs:12,key:n},o.a.createElement(fo,$o({key:n},t,{redirect:e.redirect,lessonId:t.id,handleCartAdd:e.handleCartAdd,handleDeleteItem:e.handleDeleteItem,handleSelectLesson:e.handleSelectLesson}))):null}))),o.a.createElement($r,{className:t.fab},o.a.createElement(mo.a,null)))}var Yo=n(29);var Go=function(e){var t=function(t){var n=e(t);return t.css?Object(h.a)(Object(h.a)({},Object(Yo.a)(n,e(Object(h.a)({theme:t.theme},t.css)))),function(e,t){var n={};return Object.keys(e).forEach((function(r){-1===t.indexOf(r)&&(n[r]=e[r])})),n}(t.css,[e.filterProps])):n};return t.propTypes={},t.filterProps=["css"].concat(Object(Gt.a)(e.filterProps)),t};var Qo=function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];var r=function(e){return t.reduce((function(t,n){var r=n(e);return r?Object(Yo.a)(t,r):t}),{})};return r.propTypes={},r.filterProps=t.reduce((function(e,t){return e.concat(t.filterProps)}),[]),r},Jo=n(47);function Zo(e,t){return t&&"string"==typeof t?t.split(".").reduce((function(e,t){return e&&e[t]?e[t]:null}),e):null}var ea=function(e){var t=e.prop,n=e.cssProperty,r=void 0===n?e.prop:n,o=e.themeKey,a=e.transform,i=function(e){if(null==e[t])return null;var n=e[t],i=Zo(e.theme,o)||{};return Object(Jo.a)(e,n,(function(e){var t;return"function"==typeof i?t=i(e):Array.isArray(i)?t=i[e]||e:(t=Zo(i,e)||e,a&&(t=a(t))),!1===r?t:Object(xt.a)({},r,t)}))};return i.propTypes={},i.filterProps=[t],i};function ta(e){return"number"!=typeof e?e:"".concat(e,"px solid")}var na=Qo(ea({prop:"border",themeKey:"borders",transform:ta}),ea({prop:"borderTop",themeKey:"borders",transform:ta}),ea({prop:"borderRight",themeKey:"borders",transform:ta}),ea({prop:"borderBottom",themeKey:"borders",transform:ta}),ea({prop:"borderLeft",themeKey:"borders",transform:ta}),ea({prop:"borderColor",themeKey:"palette"}),ea({prop:"borderRadius",themeKey:"shape"})),ra=Qo(ea({prop:"displayPrint",cssProperty:!1,transform:function(e){return{"@media print":{display:e}}}}),ea({prop:"display"}),ea({prop:"overflow"}),ea({prop:"textOverflow"}),ea({prop:"visibility"}),ea({prop:"whiteSpace"})),oa=Qo(ea({prop:"flexBasis"}),ea({prop:"flexDirection"}),ea({prop:"flexWrap"}),ea({prop:"justifyContent"}),ea({prop:"alignItems"}),ea({prop:"alignContent"}),ea({prop:"order"}),ea({prop:"flex"}),ea({prop:"flexGrow"}),ea({prop:"flexShrink"}),ea({prop:"alignSelf"}),ea({prop:"justifyItems"}),ea({prop:"justifySelf"})),aa=Qo(ea({prop:"gridGap"}),ea({prop:"gridColumnGap"}),ea({prop:"gridRowGap"}),ea({prop:"gridColumn"}),ea({prop:"gridRow"}),ea({prop:"gridAutoFlow"}),ea({prop:"gridAutoColumns"}),ea({prop:"gridAutoRows"}),ea({prop:"gridTemplateColumns"}),ea({prop:"gridTemplateRows"}),ea({prop:"gridTemplateAreas"}),ea({prop:"gridArea"})),ia=Qo(ea({prop:"position"}),ea({prop:"zIndex",themeKey:"zIndex"}),ea({prop:"top"}),ea({prop:"right"}),ea({prop:"bottom"}),ea({prop:"left"})),la=Qo(ea({prop:"color",themeKey:"palette"}),ea({prop:"bgcolor",cssProperty:"backgroundColor",themeKey:"palette"})),ca=ea({prop:"boxShadow",themeKey:"shadows"});function ua(e){return e<=1?"".concat(100*e,"%"):e}var sa=ea({prop:"width",transform:ua}),da=ea({prop:"maxWidth",transform:ua}),fa=ea({prop:"minWidth",transform:ua}),pa=ea({prop:"height",transform:ua}),ma=ea({prop:"maxHeight",transform:ua}),ha=ea({prop:"minHeight",transform:ua}),va=(ea({prop:"size",cssProperty:"width",transform:ua}),ea({prop:"size",cssProperty:"height",transform:ua}),Qo(sa,da,fa,pa,ma,ha,ea({prop:"boxSizing"}))),ba=n(189),ga=Qo(ea({prop:"fontFamily",themeKey:"typography"}),ea({prop:"fontSize",themeKey:"typography"}),ea({prop:"fontStyle",themeKey:"typography"}),ea({prop:"fontWeight",themeKey:"typography"}),ea({prop:"letterSpacing"}),ea({prop:"lineHeight"}),ea({prop:"textAlign"}));function ya(e,t){var n={};return Object.keys(e).forEach((function(r){-1===t.indexOf(r)&&(n[r]=e[r])})),n}var xa=function(e){var t=function(e){return function(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},r=n.name,a=Object(ze.a)(n,["name"]);var i,l=r,c="function"==typeof t?function(e){return{root:function(n){return t(Object(h.a)({theme:e},n))}}}:{root:t},u=Object(Ie.a)(c,Object(h.a)({Component:e,name:r||e.displayName,classNamePrefix:l},a));t.filterProps&&(i=t.filterProps,delete t.filterProps),t.propTypes&&(t.propTypes,delete t.propTypes);var s=o.a.forwardRef((function(t,n){var r=t.children,a=t.className,l=t.clone,c=t.component,s=Object(ze.a)(t,["children","className","clone","component"]),d=u(t),f=Object(Fe.a)(d.root,a),p=s;if(i&&(p=ya(p,i)),l)return o.a.cloneElement(r,Object(h.a)({className:Object(Fe.a)(r.props.className,f)},p));if("function"==typeof r)return r(Object(h.a)({className:f},p));var m=c||e;return o.a.createElement(m,Object(h.a)({ref:n,className:f},p),r)}));return g()(s,e),s}}(e);return function(e,n){return t(e,Object(h.a)({defaultTheme:Le.a},n))}},wa=Go(Qo(na,ra,oa,aa,ia,la,ca,va,ba.b,ga)),Oa=xa("div")(wa,{name:"MuiBox"});function Ea(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(e)))return;var n=[],r=!0,o=!1,a=void 0;try{for(var i,l=e[Symbol.iterator]();!(r=(i=l.next()).done)&&(n.push(i.value),!t||n.length!==t);r=!0);}catch(e){o=!0,a=e}finally{try{r||null==l.return||l.return()}finally{if(o)throw a}}return n}(e,t)||function(e,t){if(!e)return;if("string"==typeof e)return Sa(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return Sa(e,t)}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Sa(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var ka=_e((function(e){return{root:{width:"100%",height:"85vh",alignItems:"center"},link:{textDecoration:"none",color:"#000"}}}));function ja(e){var t=ka(),n=Ea(o.a.useState(0),2),r=n[0],a=n[1],i=Ea(o.a.useState(!0),2),l=i[0],c=i[1];o.a.useEffect((function(){var e=setInterval((function(){a((function(e){return e>=100?c(!1):e+1}))}),30);return function(){clearInterval(e)}}),[]);var u=l?o.a.createElement(Oa,{position:"relative",display:"inline-flex"},o.a.createElement(zo,{size:150,variant:"static",value:r}),o.a.createElement(Oa,{top:0,left:0,bottom:0,right:0,position:"absolute",display:"flex",alignItems:"center",justifyContent:"center"},o.a.createElement(Ye,{variant:"h2",component:"div",color:"textSecondary"},"".concat(Math.round(r),"%")))):o.a.createElement(Ye,{component:"h2",variant:"h5",align:"center"},"Добро пожаловать");return o.a.createElement(Ve,{className:t.root,container:!0,sx:12,justify:"center",alignContent:"center",direction:"column"},u)}let Ca=(e=21)=>{let t="",n=crypto.getRandomValues(new Uint8Array(e));for(;e--;){let r=63&n[e];t+=r<36?r.toString(36):r<62?(r-26).toString(36).toUpperCase():r<63?"_":"-"}return t};var Pa=r.forwardRef((function(e,t){var n=e.children,o=e.classes,a=e.className,i=e.component,l=void 0===i?"div":i,c=e.disablePointerEvents,u=void 0!==c&&c,s=e.disableTypography,d=void 0!==s&&s,f=e.position,p=e.variant,m=Object(ze.a)(e,["children","classes","className","component","disablePointerEvents","disableTypography","position","variant"]),v=nt()||{},b=p;return p&&v.variant,v&&!b&&(b=v.variant),r.createElement(rt.Provider,{value:null},r.createElement(l,Object(h.a)({className:Object(Fe.a)(o.root,a,u&&o.disablePointerEvents,v.hiddenLabel&&o.hiddenLabel,"filled"===b&&o.filled,{start:o.positionStart,end:o.positionEnd}[f],"dense"===v.margin&&o.marginDense),ref:t},m),"string"!=typeof n||d?n:r.createElement(Ye,{color:"textSecondary"},n)))})),Ta=Object(We.a)({root:{display:"flex",height:"0.01em",maxHeight:"2em",alignItems:"center",whiteSpace:"nowrap"},filled:{"&$positionStart:not($hiddenLabel)":{marginTop:16}},positionStart:{marginRight:8},positionEnd:{marginLeft:8},disablePointerEvents:{pointerEvents:"none"},hiddenLabel:{},marginDense:{}},{name:"MuiInputAdornment"})(Pa),Na="undefined"==typeof window?r.useEffect:r.useLayoutEffect,Ra=r.forwardRef((function(e,t){var n=e.alignItems,o=void 0===n?"center":n,i=e.autoFocus,l=void 0!==i&&i,c=e.button,u=void 0!==c&&c,s=e.children,d=e.classes,f=e.className,p=e.component,m=e.ContainerComponent,v=void 0===m?"li":m,b=e.ContainerProps,g=(b=void 0===b?{}:b).className,y=Object(ze.a)(b,["className"]),x=e.dense,w=void 0!==x&&x,O=e.disabled,E=void 0!==O&&O,S=e.disableGutters,k=void 0!==S&&S,j=e.divider,C=void 0!==j&&j,P=e.focusVisibleClassName,T=e.selected,N=void 0!==T&&T,R=Object(ze.a)(e,["alignItems","autoFocus","button","children","classes","className","component","ContainerComponent","ContainerProps","dense","disabled","disableGutters","divider","focusVisibleClassName","selected"]),M=r.useContext(Tn),D={dense:w||M.dense||!1,alignItems:o},A=r.useRef(null);Na((function(){l&&A.current&&A.current.focus()}),[l]);var I=r.Children.toArray(s),L=I.length&&Mt(I[I.length-1],["ListItemSecondaryAction"]),_=at(r.useCallback((function(e){A.current=a.findDOMNode(e)}),[]),t),z=Object(h.a)({className:Object(Fe.a)(d.root,f,D.dense&&d.dense,!k&&d.gutters,C&&d.divider,E&&d.disabled,u&&d.button,"center"!==o&&d.alignItemsFlexStart,L&&d.secondaryAction,N&&d.selected),disabled:E},R),F=p||"li";return u&&(z.component=p||"div",z.focusVisibleClassName=Object(Fe.a)(d.focusVisible,P),F=Nr),L?(F=z.component||p?F:"div","li"===v&&("li"===F?F="div":"li"===z.component&&(z.component="div")),r.createElement(Tn.Provider,{value:D},r.createElement(v,Object(h.a)({className:Object(Fe.a)(d.container,g),ref:_},y),r.createElement(F,z,I),I.pop()))):r.createElement(Tn.Provider,{value:D},r.createElement(F,Object(h.a)({ref:_},z),I))})),Ma=Object(We.a)((function(e){return{root:{display:"flex",justifyContent:"flex-start",alignItems:"center",position:"relative",textDecoration:"none",width:"100%",boxSizing:"border-box",textAlign:"left",paddingTop:8,paddingBottom:8,"&$focusVisible":{backgroundColor:e.palette.action.selected},"&$selected, &$selected:hover":{backgroundColor:e.palette.action.selected},"&$disabled":{opacity:.5}},container:{position:"relative"},focusVisible:{},dense:{paddingTop:4,paddingBottom:4},alignItemsFlexStart:{alignItems:"flex-start"},disabled:{},divider:{borderBottom:"1px solid ".concat(e.palette.divider),backgroundClip:"padding-box"},gutters:{paddingLeft:16,paddingRight:16},button:{transition:e.transitions.create("background-color",{duration:e.transitions.duration.shortest}),"&:hover":{textDecoration:"none",backgroundColor:e.palette.action.hover,"@media (hover: none)":{backgroundColor:"transparent"}}},secondaryAction:{paddingRight:48},selected:{}}}),{name:"MuiListItem"})(Ra),Da=r.forwardRef((function(e,t){var n,o=e.classes,a=e.className,i=e.component,l=void 0===i?"li":i,c=e.disableGutters,u=void 0!==c&&c,s=e.ListItemClasses,d=e.role,f=void 0===d?"menuitem":d,p=e.selected,m=e.tabIndex,v=Object(ze.a)(e,["classes","className","component","disableGutters","ListItemClasses","role","selected","tabIndex"]);return e.disabled||(n=void 0!==m?m:-1),r.createElement(Ma,Object(h.a)({button:!0,role:f,tabIndex:n,component:l,selected:p,disableGutters:u,classes:Object(h.a)({dense:o.dense},s),className:Object(Fe.a)(o.root,a,p&&o.selected,!u&&o.gutters),ref:t},v))})),Aa=Object(We.a)((function(e){return{root:Object(h.a)({},e.typography.body1,Object(xt.a)({minHeight:48,paddingTop:6,paddingBottom:6,boxSizing:"border-box",width:"auto",overflow:"hidden",whiteSpace:"nowrap"},e.breakpoints.up("sm"),{minHeight:"auto"})),gutters:{},selected:{},dense:Object(h.a)({},e.typography.body2,{minHeight:"auto"})}}),{name:"MuiMenuItem"})(Da),Ia=r.forwardRef((function(e,t){var n=e.children,o=e.classes,a=e.className,i=e.color,l=void 0===i?"default":i,c=e.component,u=void 0===c?"button":c,s=e.disabled,d=void 0!==s&&s,f=e.disableElevation,p=void 0!==f&&f,m=e.disableFocusRipple,v=void 0!==m&&m,b=e.endIcon,g=e.focusVisibleClassName,y=e.fullWidth,x=void 0!==y&&y,w=e.size,O=void 0===w?"medium":w,E=e.startIcon,S=e.type,k=void 0===S?"button":S,j=e.variant,C=void 0===j?"text":j,P=Object(ze.a)(e,["children","classes","className","color","component","disabled","disableElevation","disableFocusRipple","endIcon","focusVisibleClassName","fullWidth","size","startIcon","type","variant"]),T=E&&r.createElement("span",{className:Object(Fe.a)(o.startIcon,o["iconSize".concat(Object(qe.a)(O))])},E),N=b&&r.createElement("span",{className:Object(Fe.a)(o.endIcon,o["iconSize".concat(Object(qe.a)(O))])},b);return r.createElement(Nr,Object(h.a)({className:Object(Fe.a)(o.root,o[C],a,"inherit"===l?o.colorInherit:"default"!==l&&o["".concat(C).concat(Object(qe.a)(l))],"medium"!==O&&[o["".concat(C,"Size").concat(Object(qe.a)(O))],o["size".concat(Object(qe.a)(O))]],p&&o.disableElevation,d&&o.disabled,x&&o.fullWidth),component:u,disabled:d,focusRipple:!v,focusVisibleClassName:Object(Fe.a)(o.focusVisible,g),ref:t,type:k},P),r.createElement("span",{className:o.label},T,n,N))})),La=Object(We.a)((function(e){return{root:Object(h.a)({},e.typography.button,{boxSizing:"border-box",minWidth:64,padding:"6px 16px",borderRadius:e.shape.borderRadius,color:e.palette.text.primary,transition:e.transitions.create(["background-color","box-shadow","border"],{duration:e.transitions.duration.short}),"&:hover":{textDecoration:"none",backgroundColor:Object(Ge.c)(e.palette.text.primary,e.palette.action.hoverOpacity),"@media (hover: none)":{backgroundColor:"transparent"},"&$disabled":{backgroundColor:"transparent"}},"&$disabled":{color:e.palette.action.disabled}}),label:{width:"100%",display:"inherit",alignItems:"inherit",justifyContent:"inherit"},text:{padding:"6px 8px"},textPrimary:{color:e.palette.primary.main,"&:hover":{backgroundColor:Object(Ge.c)(e.palette.primary.main,e.palette.action.hoverOpacity),"@media (hover: none)":{backgroundColor:"transparent"}}},textSecondary:{color:e.palette.secondary.main,"&:hover":{backgroundColor:Object(Ge.c)(e.palette.secondary.main,e.palette.action.hoverOpacity),"@media (hover: none)":{backgroundColor:"transparent"}}},outlined:{padding:"5px 15px",border:"1px solid ".concat("light"===e.palette.type?"rgba(0, 0, 0, 0.23)":"rgba(255, 255, 255, 0.23)"),"&$disabled":{border:"1px solid ".concat(e.palette.action.disabledBackground)}},outlinedPrimary:{color:e.palette.primary.main,border:"1px solid ".concat(Object(Ge.c)(e.palette.primary.main,.5)),"&:hover":{border:"1px solid ".concat(e.palette.primary.main),backgroundColor:Object(Ge.c)(e.palette.primary.main,e.palette.action.hoverOpacity),"@media (hover: none)":{backgroundColor:"transparent"}}},outlinedSecondary:{color:e.palette.secondary.main,border:"1px solid ".concat(Object(Ge.c)(e.palette.secondary.main,.5)),"&:hover":{border:"1px solid ".concat(e.palette.secondary.main),backgroundColor:Object(Ge.c)(e.palette.secondary.main,e.palette.action.hoverOpacity),"@media (hover: none)":{backgroundColor:"transparent"}},"&$disabled":{border:"1px solid ".concat(e.palette.action.disabled)}},contained:{color:e.palette.getContrastText(e.palette.grey[300]),backgroundColor:e.palette.grey[300],boxShadow:e.shadows[2],"&:hover":{backgroundColor:e.palette.grey.A100,boxShadow:e.shadows[4],"@media (hover: none)":{boxShadow:e.shadows[2],backgroundColor:e.palette.grey[300]},"&$disabled":{backgroundColor:e.palette.action.disabledBackground}},"&$focusVisible":{boxShadow:e.shadows[6]},"&:active":{boxShadow:e.shadows[8]},"&$disabled":{color:e.palette.action.disabled,boxShadow:e.shadows[0],backgroundColor:e.palette.action.disabledBackground}},containedPrimary:{color:e.palette.primary.contrastText,backgroundColor:e.palette.primary.main,"&:hover":{backgroundColor:e.palette.primary.dark,"@media (hover: none)":{backgroundColor:e.palette.primary.main}}},containedSecondary:{color:e.palette.secondary.contrastText,backgroundColor:e.palette.secondary.main,"&:hover":{backgroundColor:e.palette.secondary.dark,"@media (hover: none)":{backgroundColor:e.palette.secondary.main}}},disableElevation:{boxShadow:"none","&:hover":{boxShadow:"none"},"&$focusVisible":{boxShadow:"none"},"&:active":{boxShadow:"none"},"&$disabled":{boxShadow:"none"}},focusVisible:{},disabled:{},colorInherit:{color:"inherit",borderColor:"currentColor"},textSizeSmall:{padding:"4px 5px",fontSize:e.typography.pxToRem(13)},textSizeLarge:{padding:"8px 11px",fontSize:e.typography.pxToRem(15)},outlinedSizeSmall:{padding:"3px 9px",fontSize:e.typography.pxToRem(13)},outlinedSizeLarge:{padding:"7px 21px",fontSize:e.typography.pxToRem(15)},containedSizeSmall:{padding:"4px 10px",fontSize:e.typography.pxToRem(13)},containedSizeLarge:{padding:"8px 22px",fontSize:e.typography.pxToRem(15)},sizeSmall:{},sizeLarge:{},fullWidth:{width:"100%"},startIcon:{display:"inherit",marginRight:8,marginLeft:-4,"&$iconSizeSmall":{marginLeft:-2}},endIcon:{display:"inherit",marginRight:-4,marginLeft:8,"&$iconSizeSmall":{marginRight:-2}},iconSizeSmall:{"& > *:first-child":{fontSize:18}},iconSizeMedium:{"& > *:first-child":{fontSize:20}},iconSizeLarge:{"& > *:first-child":{fontSize:22}}}}),{name:"MuiButton"})(Ia),_a=n(81),za=n.n(_a),Fa=n(82),Wa=n.n(Fa);function Ba(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function Ha(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Ba(Object(n),!0).forEach((function(t){Ua(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Ba(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function Ua(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function $a(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(e)))return;var n=[],r=!0,o=!1,a=void 0;try{for(var i,l=e[Symbol.iterator]();!(r=(i=l.next()).done)&&(n.push(i.value),!t||n.length!==t);r=!0);}catch(e){o=!0,a=e}finally{try{r||null==l.return||l.return()}finally{if(o)throw a}}return n}(e,t)||function(e,t){if(!e)return;if("string"==typeof e)return Va(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return Va(e,t)}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Va(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var qa="https://icon-library.com/images/no-image-icon/no-image-icon-5.jpg",Xa=_e((function(e){return{root:{padding:e.spacing(4,4,4,4),backgroundColor:e.palette.background.paper},imageUpload:{width:"100%",display:"flex",alignItems:"center",boxSizing:"border-box",flexWrap:"wrap",justifyContent:"center","& > *":{margin:e.spacing(1)}},textFiled:{margin:e.spacing(0,0,1,0)},buttonGroup:{width:"100%",display:"flex",justifyContent:"space-between",padding:e.spacing(0,2)},input:{display:"none"},media:{height:140,width:140},button:{backgroundColor:e.palette.success.main},form:{width:"100%"},spacing:{margin:e.spacing(0,0,2,0)}}}));function Ka(e){var t=Xa(),n=$a(o.a.useState({id:null,title:"",content:"",categories:["Первая","Вторая","Третья","Четвертая"],price:"",cover:"",category:""}),2),r=n[0],a=n[1],i=r.id,l=r.title,c=r.content,u=r.categories,s=r.price,d=r.cover,f=r.category;null===i&&a(Ha(Ha({},r),{},{id:Ca(6)}));return o.a.createElement(o.a.Fragment,null,o.a.createElement(Ye,{className:t.spacing,component:"h2",variant:"h5"},"Новый урок"),o.a.createElement(Je,{className:t.spacing}),o.a.createElement(On,{elevation:10,className:t.root},o.a.createElement(Ve,{container:!0,spacing:2,justify:"space-between"},o.a.createElement(Ve,{container:!0,item:!0,xs:12,sm:8},o.a.createElement("form",{className:t.form,noValidate:!0,autoComplete:"off"},o.a.createElement(Ve,{container:!0,spacing:4},o.a.createElement(Ve,{item:!0,xs:12},o.a.createElement(ar,{className:t.textFiled,label:"Название",id:"title",fullWidth:!0,size:"small",variant:"outlined",value:l,onChange:function(e){a(Ha(Ha({},r),{},{title:e.target.value}))},helperText:"Введите название урока",required:!0})),o.a.createElement(Ve,{item:!0,xs:12,sm:6,lg:4,md:4},o.a.createElement(ar,{className:t.textFiled,label:"Цена",id:"price",size:"small",value:s,variant:"outlined",onChange:function(e){a(Ha(Ha({},r),{},{price:e.target.value}))},helperText:"Введите цену урока",InputProps:{startAdornment:o.a.createElement(Ta,{position:"start"},o.a.createElement(za.a,null))},required:!0})),o.a.createElement(Ve,{item:!0,xs:12,sm:6},o.a.createElement(ar,{className:t.textFiled,label:"Категория",fullWidth:!0,id:"category",size:"small",select:!0,variant:"outlined",value:f,onChange:function(e){a(Ha(Ha({},r),{},{category:e.target.value}))},helperText:"Выберите категорию урока",required:!0},u.map((function(e,t){return o.a.createElement(Aa,{key:t,value:e},e)})))),o.a.createElement(Ve,{container:!0,item:!0,sx:12},o.a.createElement(ar,{className:t.textFiled,label:"Описание",id:"content",size:"small",fullWidth:!0,value:c,placeholder:"Введите текст",multiline:!0,variant:"outlined",onChange:function(e){a(Ha(Ha({},r),{},{content:e.target.value}))},rows:3,helperText:"Введите содержание урока",required:!0})),o.a.createElement("div",{className:t.buttonGroup},o.a.createElement(La,{variant:"contained",color:"primary"},"Отмена"),o.a.createElement(La,{variant:"contained",color:"primary",onClick:function(){var t=""===d?qa:d;""!==l&&""!==c&&""!==s&&""!==f?(e.handleCreateLesson({id:i,title:l,cover:t,content:c,price:s,category:f,lessonId:i}),e.redirect("lesson/".concat(i))):alert("что-то не заполнено")},className:t.button},"Сохранить"))))),o.a.createElement(Ve,{container:!0,item:!0,sm:1,justify:"center"},o.a.createElement(Je,{orientation:"vertical",flexItem:!0})),o.a.createElement(Ve,{container:!0,item:!0,xs:12,sm:3,justify:"center",alignItems:"flex-start"},o.a.createElement(Ye,{component:"h4",className:t.spacing,variant:"body1",align:"center"},"Загрузка изображения"),o.a.createElement(On,{elevation:10,className:t.spacing},o.a.createElement(to,{className:t.media,image:""===d?qa:d,title:"Contemplative Reptile"})),o.a.createElement("div",{className:t.imageUpload},o.a.createElement("input",{accept:"image/*",className:t.input,id:"contained-button-file",multiple:!0,type:"file"}),o.a.createElement("label",{htmlFor:"contained-button-file"},o.a.createElement(La,{variant:"contained",color:"primary",component:"span"},"Загрузить")),o.a.createElement("input",{accept:"image/*",className:t.input,id:"icon-button-file",type:"file"}),o.a.createElement("label",{htmlFor:"icon-button-file"},o.a.createElement(Mr,{color:"primary","aria-label":"upload picture",component:"span"},o.a.createElement(Wa.a,null))))))))}var Ya=n(22);function Ga(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=Object(wt.a)(),o=Object(Ut.a)({theme:n,name:"MuiUseMediaQuery",props:{}});var a="function"==typeof e?e(n):e;a=a.replace(/^@media( ?)/m,"");var i="undefined"!=typeof window&&void 0!==window.matchMedia,l=Object(h.a)({},o,t),c=l.defaultMatches,u=void 0!==c&&c,s=l.matchMedia,d=void 0===s?i?window.matchMedia:null:s,f=l.noSsr,p=void 0!==f&&f,m=l.ssrMatchMedia,v=void 0===m?null:m,b=r.useState((function(){return p&&i?d(a).matches:v?v(a).matches:u})),g=b[0],y=b[1];return r.useEffect((function(){var e=!0;if(i){var t=d(a),n=function(){e&&y(t.matches)};return n(),t.addListener(n),function(){e=!1,t.removeListener(n)}}}),[a,d,i]),g}var Qa=function(e,t){var n=!(arguments.length>2&&void 0!==arguments[2])||arguments[2];return n?Ya.b.indexOf(e)<=Ya.b.indexOf(t):Ya.b.indexOf(e)<Ya.b.indexOf(t)},Ja=function(e,t){var n=!(arguments.length>2&&void 0!==arguments[2])||arguments[2];return n?Ya.b.indexOf(t)<=Ya.b.indexOf(e):Ya.b.indexOf(t)<Ya.b.indexOf(e)},Za="undefined"==typeof window?r.useEffect:r.useLayoutEffect,ei=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return function(t){var n=e.withTheme,o=void 0!==n&&n,a=e.noSSR,i=void 0!==a&&a,l=e.initialWidth;function c(e){var n=Ot(),a=e.theme||n,c=Object(Ut.a)({theme:a,name:"MuiWithWidth",props:Object(h.a)({},e)}),u=c.initialWidth,s=c.width,d=Object(ze.a)(c,["initialWidth","width"]),f=r.useState(!1),p=f[0],m=f[1];Za((function(){m(!0)}),[]);var v=a.breakpoints.keys.slice().reverse().reduce((function(e,t){var n=Ga(a.breakpoints.up(t));return!e&&n?t:e}),null),b=Object(h.a)({width:s||(p||i?v:void 0)||u||l},o?{theme:a}:{},d);return void 0===b.width?null:r.createElement(t,b)}return g()(c,t),c}};function ti(e){var t=e.children,n=e.only,r=e.width,o=Ot(),a=!0;if(n)if(Array.isArray(n))for(var i=0;i<n.length;i+=1){if(r===n[i]){a=!1;break}}else n&&r===n&&(a=!1);if(a)for(var l=0;l<o.breakpoints.keys.length;l+=1){var c=o.breakpoints.keys[l],u=e["".concat(c,"Up")],s=e["".concat(c,"Down")];if(u&&Qa(c,r)||s&&Ja(c,r)){a=!1;break}}return a?t:null}ti.propTypes={children:c.a.node,className:c.a.string,implementation:c.a.oneOf(["js","css"]),initialWidth:c.a.oneOf(["xs","sm","md","lg","xl"]),lgDown:c.a.bool,lgUp:c.a.bool,mdDown:c.a.bool,mdUp:c.a.bool,only:c.a.oneOfType([c.a.oneOf(["xs","sm","md","lg","xl"]),c.a.arrayOf(c.a.oneOf(["xs","sm","md","lg","xl"]))]),smDown:c.a.bool,smUp:c.a.bool,width:c.a.string.isRequired,xlDown:c.a.bool,xlUp:c.a.bool,xsDown:c.a.bool,xsUp:c.a.bool};var ni=ei()(ti);var ri=Object(We.a)((function(e){var t={display:"none"};return e.breakpoints.keys.reduce((function(n,r){return n["only".concat(Object(qe.a)(r))]=Object(xt.a)({},e.breakpoints.only(r),t),n["".concat(r,"Up")]=Object(xt.a)({},e.breakpoints.up(r),t),n["".concat(r,"Down")]=Object(xt.a)({},e.breakpoints.down(r),t),n}),{})}),{name:"PrivateHiddenCss"})((function(e){var t=e.children,n=e.classes,o=e.className,a=e.only,i=(Object(ze.a)(e,["children","classes","className","only"]),Ot()),l=[];o&&l.push(o);for(var c=0;c<i.breakpoints.keys.length;c+=1){var u=i.breakpoints.keys[c],s=e["".concat(u,"Up")],d=e["".concat(u,"Down")];s&&l.push(n["".concat(u,"Up")]),d&&l.push(n["".concat(u,"Down")])}return a&&(Array.isArray(a)?a:[a]).forEach((function(e){l.push(n["only".concat(Object(qe.a)(e))])})),r.createElement("div",{className:l.join(" ")},t)}));var oi=function(e){var t=e.implementation,n=void 0===t?"js":t,o=e.lgDown,a=void 0!==o&&o,i=e.lgUp,l=void 0!==i&&i,c=e.mdDown,u=void 0!==c&&c,s=e.mdUp,d=void 0!==s&&s,f=e.smDown,p=void 0!==f&&f,m=e.smUp,v=void 0!==m&&m,b=e.xlDown,g=void 0!==b&&b,y=e.xlUp,x=void 0!==y&&y,w=e.xsDown,O=void 0!==w&&w,E=e.xsUp,S=void 0!==E&&E,k=Object(ze.a)(e,["implementation","lgDown","lgUp","mdDown","mdUp","smDown","smUp","xlDown","xlUp","xsDown","xsUp"]);return"js"===n?r.createElement(ni,Object(h.a)({lgDown:a,lgUp:l,mdDown:u,mdUp:d,smDown:p,smUp:v,xlDown:g,xlUp:x,xsDown:O,xsUp:S},k)):r.createElement(ri,Object(h.a)({lgDown:a,lgUp:l,mdDown:u,mdUp:d,smDown:p,smUp:v,xlDown:g,xlUp:x,xsDown:O,xsUp:S},k))},ai=n(14),ii={entering:{opacity:1},entered:{opacity:1}},li={enter:ai.b.enteringScreen,exit:ai.b.leavingScreen},ci=r.forwardRef((function(e,t){var n=e.children,o=e.disableStrictModeCompat,a=void 0!==o&&o,i=e.in,l=e.onEnter,c=e.onEntered,u=e.onEntering,s=e.onExit,d=e.onExited,f=e.onExiting,p=e.style,m=e.TransitionComponent,v=void 0===m?mn:m,b=e.timeout,g=void 0===b?li:b,y=Object(ze.a)(e,["children","disableStrictModeCompat","in","onEnter","onEntered","onEntering","onExit","onExited","onExiting","style","TransitionComponent","timeout"]),x=Ot(),w=x.unstable_strictMode&&!a,O=r.useRef(null),E=at(n.ref,t),S=at(w?O:void 0,E),k=function(e){return function(t,n){if(e){var r=w?[O.current,t]:[t,n],o=Object(zt.a)(r,2),a=o[0],i=o[1];void 0===i?e(a):e(a,i)}}},j=k(u),C=k((function(e,t){hn(e);var n=vn({style:p,timeout:g},{mode:"enter"});e.style.webkitTransition=x.transitions.create("opacity",n),e.style.transition=x.transitions.create("opacity",n),l&&l(e,t)})),P=k(c),T=k(f),N=k((function(e){var t=vn({style:p,timeout:g},{mode:"exit"});e.style.webkitTransition=x.transitions.create("opacity",t),e.style.transition=x.transitions.create("opacity",t),s&&s(e)})),R=k(d);return r.createElement(v,Object(h.a)({appear:!0,in:i,nodeRef:w?O:void 0,onEnter:C,onEntered:P,onEntering:j,onExit:N,onExited:R,onExiting:T,timeout:g},y),(function(e,t){return r.cloneElement(n,Object(h.a)({style:Object(h.a)({opacity:0,visibility:"exited"!==e||i?void 0:"hidden"},ii[e],p,n.props.style),ref:S},t))}))})),ui=r.forwardRef((function(e,t){var n=e.children,o=e.classes,a=e.className,i=e.invisible,l=void 0!==i&&i,c=e.open,u=e.transitionDuration,s=e.TransitionComponent,d=void 0===s?ci:s,f=Object(ze.a)(e,["children","classes","className","invisible","open","transitionDuration","TransitionComponent"]);return r.createElement(d,Object(h.a)({in:c,timeout:u},f),r.createElement("div",{className:Object(Fe.a)(o.root,a,l&&o.invisible),"aria-hidden":!0,ref:t},n))})),si=Object(We.a)({root:{zIndex:-1,position:"fixed",display:"flex",alignItems:"center",justifyContent:"center",right:0,bottom:0,top:0,left:0,backgroundColor:"rgba(0, 0, 0, 0.5)",WebkitTapHighlightColor:"transparent"},invisible:{backgroundColor:"transparent"}},{name:"MuiBackdrop"})(ui);function di(e,t){var n=function(e,t){var n,r=t.getBoundingClientRect();if(t.fakeTransform)n=t.fakeTransform;else{var o=window.getComputedStyle(t);n=o.getPropertyValue("-webkit-transform")||o.getPropertyValue("transform")}var a=0,i=0;if(n&&"none"!==n&&"string"==typeof n){var l=n.split("(")[1].split(")")[0].split(",");a=parseInt(l[4],10),i=parseInt(l[5],10)}return"left"===e?"translateX(".concat(window.innerWidth,"px) translateX(").concat(a-r.left,"px)"):"right"===e?"translateX(-".concat(r.left+r.width-a,"px)"):"up"===e?"translateY(".concat(window.innerHeight,"px) translateY(").concat(i-r.top,"px)"):"translateY(-".concat(r.top+r.height-i,"px)")}(e,t);n&&(t.style.webkitTransform=n,t.style.transform=n)}var fi={enter:ai.b.enteringScreen,exit:ai.b.leavingScreen},pi=r.forwardRef((function(e,t){var n=e.children,o=e.direction,i=void 0===o?"down":o,l=e.in,c=e.onEnter,u=e.onEntered,s=e.onEntering,d=e.onExit,f=e.onExited,p=e.onExiting,m=e.style,v=e.timeout,b=void 0===v?fi:v,g=e.TransitionComponent,y=void 0===g?mn:g,x=Object(ze.a)(e,["children","direction","in","onEnter","onEntered","onEntering","onExit","onExited","onExiting","style","timeout","TransitionComponent"]),w=Ot(),O=r.useRef(null),E=r.useCallback((function(e){O.current=a.findDOMNode(e)}),[]),S=at(n.ref,E),k=at(S,t),j=function(e){return function(t){e&&(void 0===t?e(O.current):e(O.current,t))}},C=j((function(e,t){di(i,e),hn(e),c&&c(e,t)})),P=j((function(e,t){var n=vn({timeout:b,style:m},{mode:"enter"});e.style.webkitTransition=w.transitions.create("-webkit-transform",Object(h.a)({},n,{easing:w.transitions.easing.easeOut})),e.style.transition=w.transitions.create("transform",Object(h.a)({},n,{easing:w.transitions.easing.easeOut})),e.style.webkitTransform="none",e.style.transform="none",s&&s(e,t)})),T=j(u),N=j(p),R=j((function(e){var t=vn({timeout:b,style:m},{mode:"exit"});e.style.webkitTransition=w.transitions.create("-webkit-transform",Object(h.a)({},t,{easing:w.transitions.easing.sharp})),e.style.transition=w.transitions.create("transform",Object(h.a)({},t,{easing:w.transitions.easing.sharp})),di(i,e),d&&d(e)})),M=j((function(e){e.style.webkitTransition="",e.style.transition="",f&&f(e)})),D=r.useCallback((function(){O.current&&di(i,O.current)}),[i]);return r.useEffect((function(){if(!l&&"down"!==i&&"right"!==i){var e=it((function(){O.current&&di(i,O.current)}));return window.addEventListener("resize",e),function(){e.clear(),window.removeEventListener("resize",e)}}}),[i,l]),r.useEffect((function(){l||D()}),[l,D]),r.createElement(y,Object(h.a)({nodeRef:O,onEnter:C,onEntered:T,onEntering:P,onExit:R,onExited:M,onExiting:N,appear:!0,in:l,timeout:b},x),(function(e,t){return r.cloneElement(n,Object(h.a)({ref:k,style:Object(h.a)({visibility:"exited"!==e||l?void 0:"hidden"},m,n.props.style)},t))}))})),mi={left:"right",right:"left",top:"down",bottom:"up"};function hi(e){return-1!==["left","right"].indexOf(e)}function vi(e,t){return"rtl"===e.direction&&hi(t)?mi[t]:t}var bi={enter:ai.b.enteringScreen,exit:ai.b.leavingScreen},gi=r.forwardRef((function(e,t){var n=e.anchor,o=void 0===n?"left":n,a=e.BackdropProps,i=e.children,l=e.classes,c=e.className,u=e.elevation,s=void 0===u?16:u,d=e.ModalProps,f=(d=void 0===d?{}:d).BackdropProps,p=Object(ze.a)(d,["BackdropProps"]),m=e.onClose,v=e.open,b=void 0!==v&&v,g=e.PaperProps,y=void 0===g?{}:g,x=e.SlideProps,w=e.TransitionComponent,O=void 0===w?pi:w,E=e.transitionDuration,S=void 0===E?bi:E,k=e.variant,j=void 0===k?"temporary":k,C=Object(ze.a)(e,["anchor","BackdropProps","children","classes","className","elevation","ModalProps","onClose","open","PaperProps","SlideProps","TransitionComponent","transitionDuration","variant"]),P=Ot(),T=r.useRef(!1);r.useEffect((function(){T.current=!0}),[]);var N=vi(P,o),R=r.createElement(On,Object(h.a)({elevation:"temporary"===j?s:0,square:!0},y,{className:Object(Fe.a)(l.paper,l["paperAnchor".concat(Object(qe.a)(N))],y.className,"temporary"!==j&&l["paperAnchorDocked".concat(Object(qe.a)(N))])}),i);if("permanent"===j)return r.createElement("div",Object(h.a)({className:Object(Fe.a)(l.root,l.docked,c),ref:t},C),R);var M=r.createElement(O,Object(h.a)({in:b,direction:mi[N],timeout:S,appear:T.current},x),R);return"persistent"===j?r.createElement("div",Object(h.a)({className:Object(Fe.a)(l.root,l.docked,c),ref:t},C),M):r.createElement(un,Object(h.a)({BackdropProps:Object(h.a)({},a,f,{transitionDuration:S}),BackdropComponent:si,className:Object(Fe.a)(l.root,l.modal,c),open:b,onClose:m,ref:t},C,p),M)})),yi=Object(We.a)((function(e){return{root:{},docked:{flex:"0 0 auto"},paper:{overflowY:"auto",display:"flex",flexDirection:"column",height:"100%",flex:"1 0 auto",zIndex:e.zIndex.drawer,WebkitOverflowScrolling:"touch",position:"fixed",top:0,outline:0},paperAnchorLeft:{left:0,right:"auto"},paperAnchorRight:{left:"auto",right:0},paperAnchorTop:{top:0,left:0,bottom:"auto",right:0,height:"auto",maxHeight:"100%"},paperAnchorBottom:{top:"auto",left:0,bottom:0,right:0,height:"auto",maxHeight:"100%"},paperAnchorDockedLeft:{borderRight:"1px solid ".concat(e.palette.divider)},paperAnchorDockedTop:{borderBottom:"1px solid ".concat(e.palette.divider)},paperAnchorDockedRight:{borderLeft:"1px solid ".concat(e.palette.divider)},paperAnchorDockedBottom:{borderTop:"1px solid ".concat(e.palette.divider)},modal:{}}}),{name:"MuiDrawer",flip:!1})(gi),xi="undefined"!=typeof window?r.useLayoutEffect:r.useEffect;var wi=function(e){var t=e.children,n=e.defer,o=void 0!==n&&n,a=e.fallback,i=void 0===a?null:a,l=r.useState(!1),c=l[0],u=l[1];return xi((function(){o||u(!0)}),[o]),r.useEffect((function(){o&&u(!0)}),[o]),r.createElement(r.Fragment,null,c?t:i)},Oi=r.forwardRef((function(e,t){var n=e.anchor,o=e.classes,a=e.className,i=e.width,l=Object(ze.a)(e,["anchor","classes","className","width"]);return r.createElement("div",Object(h.a)({className:Object(Fe.a)(o.root,o["anchor".concat(Object(qe.a)(n))],a),ref:t,style:Object(xt.a)({},hi(n)?"width":"height",i)},l))})),Ei=Object(We.a)((function(e){return{root:{position:"fixed",top:0,left:0,bottom:0,zIndex:e.zIndex.drawer-1},anchorLeft:{right:"auto"},anchorRight:{left:"auto",right:0},anchorTop:{bottom:"auto",right:0},anchorBottom:{top:"auto",bottom:0,right:0}}}),{name:"PrivateSwipeArea"})(Oi),Si=null;function ki(e,t){return"right"===e?document.body.offsetWidth-t[0].pageX:t[0].pageX}function ji(e,t){return"bottom"===e?window.innerHeight-t[0].clientY:t[0].clientY}function Ci(e,t){return e?t.clientWidth:t.clientHeight}function Pi(e,t,n,r){return Math.min(Math.max(n?t-e:r+t-e,0),r)}var Ti="undefined"!=typeof navigator&&/iPad|iPhone|iPod/.test(navigator.userAgent),Ni={enter:ai.b.enteringScreen,exit:ai.b.leavingScreen},Ri="undefined"!=typeof window?r.useLayoutEffect:r.useEffect,Mi=r.forwardRef((function(e,t){var n=Ot(),o=Object(Ut.a)({name:"MuiSwipeableDrawer",props:Object(h.a)({},e),theme:n}),i=o.anchor,l=void 0===i?"left":i,c=o.disableBackdropTransition,u=void 0!==c&&c,s=o.disableDiscovery,d=void 0!==s&&s,f=o.disableSwipeToOpen,p=void 0===f?Ti:f,m=o.hideBackdrop,v=o.hysteresis,b=void 0===v?.52:v,g=o.minFlingVelocity,y=void 0===g?450:g,x=o.ModalProps,w=(x=void 0===x?{}:x).BackdropProps,O=Object(ze.a)(x,["BackdropProps"]),E=o.onClose,S=o.onOpen,k=o.open,j=o.PaperProps,C=void 0===j?{}:j,P=o.SwipeAreaProps,T=o.swipeAreaWidth,N=void 0===T?20:T,R=o.transitionDuration,M=void 0===R?Ni:R,D=o.variant,A=void 0===D?"temporary":D,I=Object(ze.a)(o,["anchor","disableBackdropTransition","disableDiscovery","disableSwipeToOpen","hideBackdrop","hysteresis","minFlingVelocity","ModalProps","onClose","onOpen","open","PaperProps","SwipeAreaProps","swipeAreaWidth","transitionDuration","variant"]),L=r.useState(!1),_=L[0],z=L[1],F=r.useRef({isSwiping:null}),W=r.useRef(),B=r.useRef(),H=r.useRef(),U=r.useRef(!1),$=r.useRef();Ri((function(){$.current=null}),[k]);var V=r.useCallback((function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},r=t.mode,o=void 0===r?null:r,a=t.changeTransition,i=void 0===a||a,c=vi(n,l),s=-1!==["right","bottom"].indexOf(c)?1:-1,d=hi(l),f=d?"translate(".concat(s*e,"px, 0)"):"translate(0, ".concat(s*e,"px)"),p=H.current.style;p.webkitTransform=f,p.transform=f;var h="";if(o&&(h=n.transitions.create("all",vn({timeout:M},{mode:o}))),i&&(p.webkitTransition=h,p.transition=h),!u&&!m){var v=B.current.style;v.opacity=1-e/Ci(d,H.current),i&&(v.webkitTransition=h,v.transition=h)}}),[l,u,m,n,M]),q=Xt((function(e){if(U.current)if(Si=null,U.current=!1,z(!1),F.current.isSwiping){F.current.isSwiping=null;var t,r=vi(n,l),o=hi(l);t=o?ki(r,e.changedTouches):ji(r,e.changedTouches);var a=o?F.current.startX:F.current.startY,i=Ci(o,H.current),c=Pi(t,a,k,i),u=c/i;Math.abs(F.current.velocity)>y&&($.current=1e3*Math.abs((i-c)/F.current.velocity)),k?F.current.velocity>y||u>b?E():V(0,{mode:"exit"}):F.current.velocity<-y||1-u>b?S():V(Ci(o,H.current),{mode:"enter"})}else F.current.isSwiping=null})),X=Xt((function(e){if(H.current&&U.current&&(null==Si||Si===F.current)){var t=vi(n,l),r=hi(l),o=ki(t,e.touches),a=ji(t,e.touches);if(k&&H.current.contains(e.target)&&null==Si){var i=function(e){var t=e.domTreeShapes,n=e.start,r=e.current,o=e.anchor,a={x:"scrollLeft",y:"scrollTop"},i={x:"scrollWidth",y:"scrollHeight"},l={x:"clientWidth",y:"clientHeight"};return t.some((function(e){var t=r>=n;"top"!==o&&"left"!==o||(t=!t);var c="left"===o||"right"===o?"x":"y",u=e[a[c]],s=u>0,d=u+e[l[c]]<e[i[c]];return t&&d||!t&&s?e:null}))}({domTreeShapes:function(e,t){for(var n=[];e&&e!==t;){var r=window.getComputedStyle(e);"absolute"===r.getPropertyValue("position")||"hidden"===r.getPropertyValue("overflow-x")?n=[]:(e.clientWidth>0&&e.scrollWidth>e.clientWidth||e.clientHeight>0&&e.scrollHeight>e.clientHeight)&&n.push(e),e=e.parentElement}return n}(e.target,H.current),start:r?F.current.startX:F.current.startY,current:r?o:a,anchor:l});if(i)return void(Si=i);Si=F.current}if(null==F.current.isSwiping){var c=Math.abs(o-F.current.startX),u=Math.abs(a-F.current.startY);c>u&&e.cancelable&&e.preventDefault();var s=r?c>u&&c>3:u>c&&u>3;if(!0===s||(r?u>3:c>3)){if(F.current.isSwiping=s,!s)return void q(e);F.current.startX=o,F.current.startY=a,d||k||(r?F.current.startX-=N:F.current.startY-=N)}}if(F.current.isSwiping){var f=Ci(r,H.current),p=r?F.current.startX:F.current.startY;k&&!F.current.paperHit&&(p=Math.min(p,f));var m=Pi(r?o:a,p,k,f);if(k)if(F.current.paperHit)0===m&&(F.current.startX=o,F.current.startY=a);else{if(!(r?o<f:a<f))return;F.current.paperHit=!0,F.current.startX=o,F.current.startY=a}null===F.current.lastTranslate&&(F.current.lastTranslate=m,F.current.lastTime=performance.now()+1);var h=(m-F.current.lastTranslate)/(performance.now()-F.current.lastTime)*1e3;F.current.velocity=.4*F.current.velocity+.6*h,F.current.lastTranslate=m,F.current.lastTime=performance.now(),e.cancelable&&e.preventDefault(),V(m)}}})),K=Xt((function(e){if(!e.defaultPrevented&&!e.muiHandled&&(!k||B.current.contains(e.target)||H.current.contains(e.target))){var t=vi(n,l),r=hi(l),o=ki(t,e.touches),a=ji(t,e.touches);if(!k){if(p||e.target!==W.current)return;if(r){if(o>N)return}else if(a>N)return}e.muiHandled=!0,Si=null,F.current.startX=o,F.current.startY=a,z(!0),!k&&H.current&&V(Ci(r,H.current)+(d?20:-N),{changeTransition:!1}),F.current.velocity=0,F.current.lastTime=null,F.current.lastTranslate=null,F.current.paperHit=!1,U.current=!0}}));r.useEffect((function(){if("temporary"===A){var e=Wt(H.current);return e.addEventListener("touchstart",K),e.addEventListener("touchmove",X,{passive:!1}),e.addEventListener("touchend",q),function(){e.removeEventListener("touchstart",K),e.removeEventListener("touchmove",X,{passive:!1}),e.removeEventListener("touchend",q)}}}),[A,K,X,q]),r.useEffect((function(){return function(){Si===F.current&&(Si=null)}}),[]),r.useEffect((function(){k||z(!1)}),[k]);var Y=r.useCallback((function(e){B.current=a.findDOMNode(e)}),[]);return r.createElement(r.Fragment,null,r.createElement(yi,Object(h.a)({open:!("temporary"!==A||!_)||k,variant:A,ModalProps:Object(h.a)({BackdropProps:Object(h.a)({},w,{ref:Y})},O),PaperProps:Object(h.a)({},C,{style:Object(h.a)({pointerEvents:"temporary"!==A||k?"":"none"},C.style),ref:H}),anchor:l,transitionDuration:$.current||M,onClose:E,ref:t},I)),!p&&"temporary"===A&&r.createElement(wi,null,r.createElement(Ei,Object(h.a)({anchor:l,ref:W,width:N},P))))})),Di=r.forwardRef((function(e,t){var n=e.classes,o=e.className,a=Object(ze.a)(e,["classes","className"]),i=r.useContext(Tn);return r.createElement("div",Object(h.a)({className:Object(Fe.a)(n.root,o,"flex-start"===i.alignItems&&n.alignItemsFlexStart),ref:t},a))})),Ai=Object(We.a)((function(e){return{root:{minWidth:56,color:e.palette.action.active,flexShrink:0,display:"inline-flex"},alignItemsFlexStart:{marginTop:8}}}),{name:"MuiListItemIcon"})(Di),Ii=r.forwardRef((function(e,t){var n=e.children,o=e.classes,a=e.className,i=e.disableTypography,l=void 0!==i&&i,c=e.inset,u=void 0!==c&&c,s=e.primary,d=e.primaryTypographyProps,f=e.secondary,p=e.secondaryTypographyProps,m=Object(ze.a)(e,["children","classes","className","disableTypography","inset","primary","primaryTypographyProps","secondary","secondaryTypographyProps"]),v=r.useContext(Tn).dense,b=null!=s?s:n;null==b||b.type===Ye||l||(b=r.createElement(Ye,Object(h.a)({variant:v?"body2":"body1",className:o.primary,component:"span",display:"block"},d),b));var g=f;return null==g||g.type===Ye||l||(g=r.createElement(Ye,Object(h.a)({variant:"body2",className:o.secondary,color:"textSecondary",display:"block"},p),g)),r.createElement("div",Object(h.a)({className:Object(Fe.a)(o.root,a,v&&o.dense,u&&o.inset,b&&g&&o.multiline),ref:t},m),b,g)})),Li=Object(We.a)({root:{flex:"1 1 auto",minWidth:0,marginTop:4,marginBottom:4},multiline:{marginTop:6,marginBottom:6},dense:{},inset:{paddingLeft:56},primary:{},secondary:{}},{name:"MuiListItemText"})(Ii),_i=n(52),zi=n.n(_i),Fi=n(51),Wi=n.n(Fi),Bi=n(41),Hi=n.n(Bi),Ui=n(83),$i=n.n(Ui),Vi=n(84),qi=n.n(Vi),Xi=n(36),Ki=n.n(Xi),Yi=_e((function(e){return{root:{width:"100%",fontSize:"12px"},inline:{display:"inline"},link:{textDecoration:"none",color:"#000"},nested:{paddingLeft:e.spacing(4)}}}));function Gi(e){var t=Yi(),n=[{path:"/",name:"Главная страница",role:"",icon:o.a.createElement($i.a,{color:"primary"})},{path:"/lessons",name:"Мои уроки",role:"",icon:o.a.createElement(Wi.a,{color:"primary"})},{path:"/lessons",name:"Каталог",role:"",icon:o.a.createElement(zi.a,{color:"primary"})}],r=[{path:"/cabinet",name:"Личный кабинет",role:"",icon:o.a.createElement(qi.a,{color:"primary"})},{path:"/createLesson",name:"Создание урока",role:"",icon:o.a.createElement(Ki.a,{color:"primary"})},{path:"/cart",name:"Корзина",role:"",icon:o.a.createElement(Hi.a,{color:"primary"})}],a=function(n){return n.map((function(n,r){return o.a.createElement(Ma,{key:r,button:!0,onClick:function(){return e.redirect("".concat(n.path))}},o.a.createElement(Ai,null,n.icon),o.a.createElement("div",null,o.a.createElement("h2",null,"sdsad")),o.a.createElement(Li,{primary:o.a.createElement(Ye,{component:"span",variant:"body2",className:t.inline,color:"textPrimary"},n.name)}))}))};return o.a.createElement(Rn,{component:"nav",className:t.root},a(n),o.a.createElement(Je,null),a(r))}function Qi(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var Ji=_e((function(e){return{drawer:Qi({flexShrink:0,width:275},e.breakpoints.up("sm"),{width:150}),drawerPaper:Qi({width:275,backgroundColor:"#f5f5f5"},e.breakpoints.up("sm"),{width:150}),media:{height:100}}}));function Zi(e){var t=Ji();return o.a.createElement("aside",null,o.a.createElement(oi,{xsDown:!0,implementation:"css"},o.a.createElement(yi,{className:t.drawer,variant:"permanent",classes:{paper:t.drawerPaper},anchor:"left"},o.a.createElement("div",{className:t.toolbar}),o.a.createElement(to,{image:"https://i.ibb.co/TtFYWTL/logo.png",className:t.media}),o.a.createElement(Je,null),o.a.createElement(Gi,{redirect:e.redirect}))),o.a.createElement(oi,{smUp:!0,implementation:"css"},o.a.createElement(Mi,{onClose:e.handleMobileDrawerOpen,onOpen:e.handleMobileDrawerOpen,onClick:e.handleMobileDrawerOpen,className:t.drawer,classes:{paper:t.drawerPaper},anchor:"left",open:e.mobileDrawer},o.a.createElement("div",{className:t.toolbar}),o.a.createElement(to,{image:"https://i.ibb.co/TtFYWTL/logo.png",className:t.media}),o.a.createElement(Je,null),o.a.createElement(Gi,{redirect:e.redirect}))))}var el=r.forwardRef((function(e,t){var n=e.classes,o=e.className,a=e.component,i=void 0===a?"div":a,l=Object(ze.a)(e,["classes","className","component"]);return r.createElement(i,Object(h.a)({ref:t,className:Object(Fe.a)(n.root,o)},l))})),tl=Object(We.a)({root:{width:"100%",overflowX:"auto"}},{name:"MuiTableContainer"})(el);var nl=r.createContext(),rl=r.forwardRef((function(e,t){var n=e.classes,o=e.className,a=e.component,i=void 0===a?"table":a,l=e.padding,c=void 0===l?"default":l,u=e.size,s=void 0===u?"medium":u,d=e.stickyHeader,f=void 0!==d&&d,p=Object(ze.a)(e,["classes","className","component","padding","size","stickyHeader"]),m=r.useMemo((function(){return{padding:c,size:s,stickyHeader:f}}),[c,s,f]);return r.createElement(nl.Provider,{value:m},r.createElement(i,Object(h.a)({role:"table"===i?null:"table",ref:t,className:Object(Fe.a)(n.root,o,f&&n.stickyHeader)},p)))})),ol=Object(We.a)((function(e){return{root:{display:"table",width:"100%",borderCollapse:"collapse",borderSpacing:0,"& caption":Object(h.a)({},e.typography.body2,{padding:e.spacing(2),color:e.palette.text.secondary,textAlign:"left",captionSide:"bottom"})},stickyHeader:{borderCollapse:"separate"}}}),{name:"MuiTable"})(rl);var al=r.createContext(),il={variant:"head"},ll=r.forwardRef((function(e,t){var n=e.classes,o=e.className,a=e.component,i=void 0===a?"thead":a,l=Object(ze.a)(e,["classes","className","component"]);return r.createElement(al.Provider,{value:il},r.createElement(i,Object(h.a)({className:Object(Fe.a)(n.root,o),ref:t,role:"thead"===i?null:"rowgroup"},l)))})),cl=Object(We.a)({root:{display:"table-header-group"}},{name:"MuiTableHead"})(ll),ul=r.forwardRef((function(e,t){var n=e.classes,o=e.className,a=e.component,i=void 0===a?"tr":a,l=e.hover,c=void 0!==l&&l,u=e.selected,s=void 0!==u&&u,d=Object(ze.a)(e,["classes","className","component","hover","selected"]),f=r.useContext(al);return r.createElement(i,Object(h.a)({ref:t,className:Object(Fe.a)(n.root,o,f&&{head:n.head,footer:n.footer}[f.variant],c&&n.hover,s&&n.selected),role:"tr"===i?null:"row"},d))})),sl=Object(We.a)((function(e){return{root:{color:"inherit",display:"table-row",verticalAlign:"middle",outline:0,"&$hover:hover":{backgroundColor:e.palette.action.hover},"&$selected, &$selected:hover":{backgroundColor:Object(Ge.c)(e.palette.secondary.main,e.palette.action.selectedOpacity)}},selected:{},hover:{},head:{},footer:{}}}),{name:"MuiTableRow"})(ul),dl=r.forwardRef((function(e,t){var n,o,a=e.align,i=void 0===a?"inherit":a,l=e.classes,c=e.className,u=e.component,s=e.padding,d=e.scope,f=e.size,p=e.sortDirection,m=e.variant,v=Object(ze.a)(e,["align","classes","className","component","padding","scope","size","sortDirection","variant"]),b=r.useContext(nl),g=r.useContext(al),y=g&&"head"===g.variant;u?(o=u,n=y?"columnheader":"cell"):o=y?"th":"td";var x=d;!x&&y&&(x="col");var w=s||(b&&b.padding?b.padding:"default"),O=f||(b&&b.size?b.size:"medium"),E=m||g&&g.variant,S=null;return p&&(S="asc"===p?"ascending":"descending"),r.createElement(o,Object(h.a)({ref:t,className:Object(Fe.a)(l.root,l[E],c,"inherit"!==i&&l["align".concat(Object(qe.a)(i))],"default"!==w&&l["padding".concat(Object(qe.a)(w))],"medium"!==O&&l["size".concat(Object(qe.a)(O))],"head"===E&&b&&b.stickyHeader&&l.stickyHeader),"aria-sort":S,role:n,scope:x},v))})),fl=Object(We.a)((function(e){return{root:Object(h.a)({},e.typography.body2,{display:"table-cell",verticalAlign:"inherit",borderBottom:"1px solid\n    ".concat("light"===e.palette.type?Object(Ge.e)(Object(Ge.c)(e.palette.divider,1),.88):Object(Ge.a)(Object(Ge.c)(e.palette.divider,1),.68)),textAlign:"left",padding:16}),head:{color:e.palette.text.primary,lineHeight:e.typography.pxToRem(24),fontWeight:e.typography.fontWeightMedium},body:{color:e.palette.text.primary},footer:{color:e.palette.text.secondary,lineHeight:e.typography.pxToRem(21),fontSize:e.typography.pxToRem(12)},sizeSmall:{padding:"6px 24px 6px 16px","&:last-child":{paddingRight:16},"&$paddingCheckbox":{width:24,padding:"0 12px 0 16px","&:last-child":{paddingLeft:12,paddingRight:16},"& > *":{padding:0}}},paddingCheckbox:{width:48,padding:"0 0 0 4px","&:last-child":{paddingLeft:0,paddingRight:4}},paddingNone:{padding:0,"&:last-child":{padding:0}},alignLeft:{textAlign:"left"},alignCenter:{textAlign:"center"},alignRight:{textAlign:"right",flexDirection:"row-reverse"},alignJustify:{textAlign:"justify"},stickyHeader:{position:"sticky",top:0,left:0,zIndex:2,backgroundColor:e.palette.background.default}}}),{name:"MuiTableCell"})(dl),pl={variant:"body"},ml=r.forwardRef((function(e,t){var n=e.classes,o=e.className,a=e.component,i=void 0===a?"tbody":a,l=Object(ze.a)(e,["classes","className","component"]);return r.createElement(al.Provider,{value:pl},r.createElement(i,Object(h.a)({className:Object(Fe.a)(n.root,o),ref:t,role:"tbody"===i?null:"rowgroup"},l)))})),hl=Object(We.a)({root:{display:"table-row-group"}},{name:"MuiTableBody"})(ml);function vl(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(e)))return;var n=[],r=!0,o=!1,a=void 0;try{for(var i,l=e[Symbol.iterator]();!(r=(i=l.next()).done)&&(n.push(i.value),!t||n.length!==t);r=!0);}catch(e){o=!0,a=e}finally{try{r||null==l.return||l.return()}finally{if(o)throw a}}return n}(e,t)||function(e,t){if(!e)return;if("string"==typeof e)return bl(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return bl(e,t)}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function bl(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var gl=_e((function(e){return{root:{"&:nth-of-type(odd)":{backgroundColor:e.palette.action.hover}},buttonGroup:{"& button":{marginRight:e.spacing(2)},"& button:last-child":{marginRight:0}}}}));function yl(e){for(var t=gl(),n=e.cart,r=[],a=vl(o.a.useState(""),2),i=a[0],l=a[1],c=0,u=Object.entries(n);c<u.length;c++){var s=vl(u[c],2),d=(s[0],s[1]);r.push(d)}return o.a.createElement(o.a.Fragment,null,o.a.createElement(tl,{component:On},o.a.createElement(ol,{stickyHeader:!0,className:t.table,size:"small","aria-label":"a dense table"},o.a.createElement(cl,null,o.a.createElement(sl,null,o.a.createElement(fl,null,"#"),o.a.createElement(fl,{align:"right"},"Наименование"),o.a.createElement(fl,{align:"right"},"Цена"))),o.a.createElement(hl,null,r.map((function(e,n){return o.a.createElement(sl,{selected:e.id===i,onClick:function(t){return n=e.id,void l(i===n?"":n);var n},className:t.root,key:e.id},o.a.createElement(fl,{component:"th",scope:"row"},n+1),o.a.createElement(fl,{align:"right"},e.name),o.a.createElement(fl,{align:"right"},e.price))}))))),o.a.createElement(Ye,{align:"right"},"Итого: ",Object.keys(n).length),o.a.createElement("div",{className:t.buttonGroup},o.a.createElement(La,{onClick:e.hanldeCartDelete,color:"primary",variant:"contained"},"Отчистить корзину"),o.a.createElement(La,{onClick:function(){e.handleCartRemoveItem(i)},disabled:""===i,color:"secondary",variant:"contained"},"Удалить")))}var xl=_e((function(e){return{root:{},media:{height:100,width:100,margin:e.spacing(0,0,"1rem",0)},content:{margin:e.spacing(0,0,"1rem",0)},title:{marginBottom:e.spacing(2),width:"100%"},elementSpacing:{},buttonGroup:(t={display:"flex",width:"100%"},n="& button",r={margin:e.spacing(0,"1rem",0,0)},n in t?Object.defineProperty(t,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[n]=r,t)};var t,n,r}));function wl(e){var t=xl(),n=e.profile,r=n.firstName,a=n.lastName,i=n.avatar,l=n.email,c=n.age;return o.a.createElement(o.a.Fragment,null,o.a.createElement(Ye,{variant:"h4",component:"h2",className:t.title},"Личный кабинет пользователя"),o.a.createElement(Ve,{container:!0,spacing:2,alignItems:"flex-start",className:t.root},o.a.createElement(Ve,{item:!0,xs:12,sm:8},o.a.createElement(to,{className:t.media,image:i}),o.a.createElement(Ye,{className:t.content},"Имя: ",r," ",a),o.a.createElement(Ye,{className:t.content},"Возраст: ",c," "),o.a.createElement(Ye,{className:t.content},"Почта: ",l," "),o.a.createElement(Ye,{className:t.content},"Роль: Администратор"," "),o.a.createElement(La,{className:t.content,variant:"contained",color:"primary"},"Показать все уроки"),o.a.createElement("div",{className:t.buttonGroup},o.a.createElement(La,{variant:"contained",color:"primary"},"Сохранить"),o.a.createElement(La,{variant:"contained",color:"secondary"},"Отмена"))),o.a.createElement(Je,{orientation:"vertical",flexItem:!0}),o.a.createElement(Ve,{container:!0,item:!0,xs:12,sm:3,justify:"center",className:t.root},o.a.createElement(Ye,{className:t.title,align:"center"},"Панель действий"),o.a.createElement(La,{variant:"outlined",color:"primary"},"Корзина"),o.a.createElement(La,{variant:"outlined",color:"primary"},"История заказов"),o.a.createElement(La,{variant:"outlined",color:"primary"},"Движение средств"))))}var Ol=n(53),El=n.n(Ol),Sl=qn(r.createElement("path",{d:"M12 12c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4zm0 2c-2.67 0-8 1.34-8 4v2h16v-2c0-2.66-5.33-4-8-4z"}));var kl=r.forwardRef((function(e,t){var n=e.alt,o=e.children,a=e.classes,i=e.className,l=e.component,c=void 0===l?"div":l,u=e.imgProps,s=e.sizes,d=e.src,f=e.srcSet,p=e.variant,m=void 0===p?"circle":p,v=Object(ze.a)(e,["alt","children","classes","className","component","imgProps","sizes","src","srcSet","variant"]),b=null,g=function(e){var t=e.src,n=e.srcSet,o=r.useState(!1),a=o[0],i=o[1];return r.useEffect((function(){if(t||n){i(!1);var e=!0,r=new Image;return r.src=t,r.srcSet=n,r.onload=function(){e&&i("loaded")},r.onerror=function(){e&&i("error")},function(){e=!1}}}),[t,n]),a}({src:d,srcSet:f}),y=d||f,x=y&&"error"!==g;return b=x?r.createElement("img",Object(h.a)({alt:n,src:d,srcSet:f,sizes:s,className:a.img},u)):null!=o?o:y&&n?n[0]:r.createElement(Sl,{className:a.fallback}),r.createElement(c,Object(h.a)({className:Object(Fe.a)(a.root,a.system,a[m],i,!x&&a.colorDefault),ref:t},v),b)})),jl=Object(We.a)((function(e){return{root:{position:"relative",display:"flex",alignItems:"center",justifyContent:"center",flexShrink:0,width:40,height:40,fontFamily:e.typography.fontFamily,fontSize:e.typography.pxToRem(20),lineHeight:1,borderRadius:"50%",overflow:"hidden",userSelect:"none"},colorDefault:{color:e.palette.background.default,backgroundColor:"light"===e.palette.type?e.palette.grey[400]:e.palette.grey[600]},circle:{},rounded:{borderRadius:e.shape.borderRadius},square:{borderRadius:0},img:{width:"100%",height:"100%",textAlign:"center",objectFit:"cover",color:"transparent",textIndent:1e4},fallback:{width:"75%",height:"75%"}}}),{name:"MuiAvatar"})(kl),Cl=r.forwardRef((function(e,t){var n=e.disableSpacing,o=void 0!==n&&n,a=e.classes,i=e.className,l=Object(ze.a)(e,["disableSpacing","classes","className"]);return r.createElement("div",Object(h.a)({className:Object(Fe.a)(a.root,i,!o&&a.spacing),ref:t},l))})),Pl=Object(We.a)({root:{display:"flex",alignItems:"center",padding:8},spacing:{"& > :not(:first-child)":{marginLeft:8}}},{name:"MuiCardActions"})(Cl),Tl=n(35),Nl=n.n(Tl),Rl=n(54),Ml=n.n(Rl);function Dl(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(e)))return;var n=[],r=!0,o=!1,a=void 0;try{for(var i,l=e[Symbol.iterator]();!(r=(i=l.next()).done)&&(n.push(i.value),!t||n.length!==t);r=!0);}catch(e){o=!0,a=e}finally{try{r||null==l.return||l.return()}finally{if(o)throw a}}return n}(e,t)||function(e,t){if(!e)return;if("string"==typeof e)return Al(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return Al(e,t)}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Al(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var Il=_e((function(e){return{root:{margin:e.spacing(1,0,0,0)},reviews:{display:"flex",width:"100%",flexDirection:"column",boxSizing:"border-box",justifyContent:"center","& > *:not(:last-child)":{marginBottom:e.spacing(2)}},reviewContent:{display:"flex",width:"100%",alignItems:"center","& > *:not(:last-child)":{marginRight:e.spacing(2)}},reviewsList:{display:"flex",flexDirection:"column",width:"100%"},reviewInput:{flexGrow:1}}}));function Ll(e){var t=Il(),n=Ot(),r=Dl(o.a.useState(""),2),a=r[0],i=r[1],l=e.profile,c=e.lesson,u=function(){};return o.a.createElement(qr,{className:t.root,index:2,dir:n.direction},o.a.createElement(ro,{className:t.reviews},o.a.createElement("div",{className:t.reviewsList},o.a.createElement(Ye,{variant:"h4",component:"h3",style:{marginBottom:n.spacing(1)}},"Отзывы"),o.a.createElement(Je,{variant:"fullWidth",orientation:"horizontal",style:{marginBottom:n.spacing(2)}}),c.reviews.map((function(e,r){return o.a.createElement(On,{key:e.id,elevation:2,style:{marginBottom:n.spacing(2),padding:n.spacing(1),boxSizing:"border-box"}},o.a.createElement("div",{className:t.reviewContent},o.a.createElement(jl,{src:e.avatar}),o.a.createElement(Ye,{variant:"body2",component:"span",style:{flexGrow:1}},e.author,": ",e.text),e.author==="".concat(l.firstName," ").concat(l.lastName)?o.a.createElement(Pl,null,o.a.createElement(Mr,null,o.a.createElement(Ki.a,null)),o.a.createElement(Mr,{id:e.id,onClick:function(t){e.id}},o.a.createElement(Nl.a,null))):null))}))),c.reviews.length>0?o.a.createElement(Je,{orientation:"horizontal",variant:"fullWidth"}):null,o.a.createElement("div",{className:t.reviewContent},o.a.createElement(jl,{src:l.avatar}),o.a.createElement(ar,{placeholder:c.reviews.length>0?"Оставьте отзыв ":"Станьте первым, кто оставит отзыв об этом уроке!",variant:"outlined",className:t.reviewInput,size:"small",type:"text",onKeyPress:function(e){e.key},value:a,onChange:function(e){return i(e.target.value)}}),o.a.createElement(Mr,{onClick:u,color:"primary"},o.a.createElement(Ml.a,null)))))}var _l=qn(r.createElement("path",{d:"M12 17.27L18.18 21l-1.64-7.03L22 9.24l-7.19-.61L12 2 9.19 8.63 2 9.24l5.46 4.73L5.82 21z"}));function zl(e,t){if(null==e)return e;var n,r=Math.round(e/t)*t;return Number(r.toFixed((n=t.toString().split(".")[1])?n.length:0))}function Fl(e){e.value;var t=Object(ze.a)(e,["value"]);return r.createElement("span",t)}var Wl=r.createElement(_l,{fontSize:"inherit"});function Bl(e){return"".concat(e," Star").concat(1!==e?"s":"")}var Hl,Ul=r.forwardRef((function(e,t){var n=e.classes,o=e.className,a=e.defaultValue,i=void 0===a?null:a,l=e.disabled,c=void 0!==l&&l,u=e.emptyIcon,s=e.emptyLabelText,d=void 0===s?"Empty":s,f=e.getLabelText,p=void 0===f?Bl:f,m=e.icon,v=void 0===m?Wl:m,b=e.IconContainerComponent,g=void 0===b?Fl:b,y=e.max,x=void 0===y?5:y,w=e.name,O=e.onChange,E=e.onChangeActive,S=e.onMouseLeave,k=e.onMouseMove,j=e.precision,C=void 0===j?1:j,P=e.readOnly,T=void 0!==P&&P,N=e.size,R=void 0===N?"medium":N,M=e.value,D=Object(ze.a)(e,["classes","className","defaultValue","disabled","emptyIcon","emptyLabelText","getLabelText","icon","IconContainerComponent","max","name","onChange","onChangeActive","onMouseLeave","onMouseMove","precision","readOnly","size","value"]),A=ko(w),I=Hn({controlled:M,default:i,name:"Rating"}),L=Object(zt.a)(I,2),_=L[0],z=L[1],F=zl(_,C),W=Ot(),B=r.useState({hover:-1,focus:-1}),H=B[0],U=H.hover,$=H.focus,V=B[1],q=F;-1!==U&&(q=U),-1!==$&&(q=$);var X=br(),K=X.isFocusVisible,Y=X.onBlurVisible,G=X.ref,Q=r.useState(!1),J=Q[0],Z=Q[1],ee=r.useRef(),te=at(G,ee),ne=at(te,t),re=function(e){var t=parseFloat(e.target.value);z(t),O&&O(e,t)},oe=function(e){0===e.clientX&&0===e.clientY||(V({hover:-1,focus:-1}),z(null),O&&parseFloat(e.target.value)===F&&O(e,null))},ae=function(e){K(e)&&Z(!0);var t=parseFloat(e.target.value);V((function(e){return{hover:e.hover,focus:t}})),E&&$!==t&&E(e,t)},ie=function(e){if(-1===U){!1!==J&&(Z(!1),Y());V((function(e){return{hover:e.hover,focus:-1}})),E&&-1!==$&&E(e,-1)}},le=function(e,t){var o="".concat(A,"-").concat(String(e.value).replace(".","-")),a=r.createElement(g,{value:e.value,className:Object(Fe.a)(n.icon,e.filled?n.iconFilled:n.iconEmpty,e.hover&&n.iconHover,e.focus&&n.iconFocus,e.active&&n.iconActive)},u&&!e.filled?u:v);return T?r.createElement("span",Object(h.a)({key:e.value},t),a):r.createElement(r.Fragment,{key:e.value},r.createElement("label",Object(h.a)({className:n.label,htmlFor:o},t),a,r.createElement("span",{className:n.visuallyhidden},p(e.value))),r.createElement("input",{onFocus:ae,onBlur:ie,onChange:re,onClick:oe,disabled:c,value:e.value,id:o,type:"radio",name:A,checked:e.checked,className:n.visuallyhidden}))};return r.createElement("span",Object(h.a)({ref:ne,onMouseMove:function(e){k&&k(e);var t,n=ee.current,r=n.getBoundingClientRect(),o=r.right,a=r.left,i=n.firstChild.getBoundingClientRect().width;t="rtl"===W.direction?(o-e.clientX)/(i*x):(e.clientX-a)/(i*x);var l=zl(x*t+C/2,C);l=function(e,t,n){return e<t?t:e>n?n:e}(l,C,x),V((function(e){return e.hover===l&&e.focus===l?e:{hover:l,focus:l}})),Z(!1),E&&U!==l&&E(e,l)},onMouseLeave:function(e){S&&S(e);V({hover:-1,focus:-1}),E&&-1!==U&&E(e,-1)},className:Object(Fe.a)(n.root,o,"medium"!==R&&n["size".concat(Object(qe.a)(R))],c&&n.disabled,J&&n.focusVisible,T&&n.readOnly),role:T?"img":null,"aria-label":T?p(q):null},D),Array.from(new Array(x)).map((function(e,t){var o=t+1;if(C<1){var a=Array.from(new Array(1/C));return r.createElement("span",{key:o,className:Object(Fe.a)(n.decimal,o===Math.ceil(q)&&(-1!==U||-1!==$)&&n.iconActive)},a.map((function(e,t){var n=zl(o-1+(t+1)*C,C);return le({value:n,filled:n<=q,hover:n<=U,focus:n<=$,checked:n===F},{style:a.length-1===t?{}:{width:n===q?"".concat((t+1)*C*100,"%"):"0%",overflow:"hidden",zIndex:1,position:"absolute"}})})))}return le({value:o,active:o===q&&(-1!==U||-1!==$),filled:o<=q,hover:o<=U,focus:o<=$,checked:o===F})})),!T&&!c&&null==F&&r.createElement(r.Fragment,null,r.createElement("input",{value:"",id:"".concat(A,"-empty"),type:"radio",name:A,defaultChecked:!0,className:n.visuallyhidden}),r.createElement("label",{className:n.pristine,htmlFor:"".concat(A,"-empty")},r.createElement("span",{className:n.visuallyhidden},d))))})),$l=Object(We.a)((function(e){return{root:{display:"inline-flex",position:"relative",fontSize:e.typography.pxToRem(24),color:"#ffb400",cursor:"pointer",textAlign:"left",WebkitTapHighlightColor:"transparent","&$disabled":{opacity:.5,pointerEvents:"none"},"&$focusVisible $iconActive":{outline:"1px solid #999"}},sizeSmall:{fontSize:e.typography.pxToRem(18)},sizeLarge:{fontSize:e.typography.pxToRem(30)},readOnly:{pointerEvents:"none"},disabled:{},focusVisible:{},visuallyhidden:{border:0,clip:"rect(0 0 0 0)",height:1,margin:-1,color:"#000",overflow:"hidden",padding:0,position:"absolute",top:20,width:1},pristine:{"input:focus + &":{top:0,bottom:0,position:"absolute",outline:"1px solid #999",width:"100%"}},label:{cursor:"inherit"},icon:{display:"flex",transition:e.transitions.create("transform",{duration:e.transitions.duration.shortest}),pointerEvents:"none"},iconEmpty:{color:e.palette.action.disabled},iconFilled:{},iconHover:{},iconFocus:{},iconActive:{transform:"scale(1.2)"},decimal:{position:"relative"}}}),{name:"MuiRating"})(Ul),Vl=r.forwardRef((function(e,t){var n=e.classes,o=e.className,a=e.component,i=void 0===a?"div":a,l=e.disableGutters,c=void 0!==l&&l,u=e.fixed,s=void 0!==u&&u,d=e.maxWidth,f=void 0===d?"lg":d,p=Object(ze.a)(e,["classes","className","component","disableGutters","fixed","maxWidth"]);return r.createElement(i,Object(h.a)({className:Object(Fe.a)(n.root,o,s&&n.fixed,c&&n.disableGutters,!1!==f&&n["maxWidth".concat(Object(qe.a)(String(f)))]),ref:t},p))})),ql=Object(We.a)((function(e){return{root:Object(xt.a)({width:"100%",marginLeft:"auto",boxSizing:"border-box",marginRight:"auto",paddingLeft:e.spacing(2),paddingRight:e.spacing(2),display:"block"},e.breakpoints.up("sm"),{paddingLeft:e.spacing(3),paddingRight:e.spacing(3)}),disableGutters:{paddingLeft:0,paddingRight:0},fixed:Object.keys(e.breakpoints.values).reduce((function(t,n){var r=e.breakpoints.values[n];return 0!==r&&(t[e.breakpoints.up(n)]={maxWidth:r}),t}),{}),maxWidthXs:Object(xt.a)({},e.breakpoints.up("xs"),{maxWidth:Math.max(e.breakpoints.values.xs,444)}),maxWidthSm:Object(xt.a)({},e.breakpoints.up("sm"),{maxWidth:e.breakpoints.values.sm}),maxWidthMd:Object(xt.a)({},e.breakpoints.up("md"),{maxWidth:e.breakpoints.values.md}),maxWidthLg:Object(xt.a)({},e.breakpoints.up("lg"),{maxWidth:e.breakpoints.values.lg}),maxWidthXl:Object(xt.a)({},e.breakpoints.up("xl"),{maxWidth:e.breakpoints.values.xl})}}),{name:"MuiContainer"})(Vl),Xl=r.forwardRef((function(e,t){var n=e.classes,o=e.className,a=e.color,i=void 0===a?"primary":a,l=e.position,c=void 0===l?"fixed":l,u=Object(ze.a)(e,["classes","className","color","position"]);return r.createElement(On,Object(h.a)({square:!0,component:"header",elevation:4,className:Object(Fe.a)(n.root,n["position".concat(Object(qe.a)(c))],n["color".concat(Object(qe.a)(i))],o,"fixed"===c&&"mui-fixed"),ref:t},u))})),Kl=Object(We.a)((function(e){var t="light"===e.palette.type?e.palette.grey[100]:e.palette.grey[900];return{root:{display:"flex",flexDirection:"column",width:"100%",boxSizing:"border-box",zIndex:e.zIndex.appBar,flexShrink:0},positionFixed:{position:"fixed",top:0,left:"auto",right:0,"@media print":{position:"absolute"}},positionAbsolute:{position:"absolute",top:0,left:"auto",right:0},positionSticky:{position:"sticky",top:0,left:"auto",right:0},positionStatic:{position:"static"},positionRelative:{position:"relative"},colorDefault:{backgroundColor:t,color:e.palette.getContrastText(t)},colorPrimary:{backgroundColor:e.palette.primary.main,color:e.palette.primary.contrastText},colorSecondary:{backgroundColor:e.palette.secondary.main,color:e.palette.secondary.contrastText},colorInherit:{color:"inherit"},colorTransparent:{backgroundColor:"transparent",color:"inherit"}}}),{name:"MuiAppBar"})(Xl);function Yl(){if(Hl)return Hl;var e=document.createElement("div");return e.appendChild(document.createTextNode("ABCD")),e.dir="rtl",e.style.fontSize="14px",e.style.width="4px",e.style.height="1px",e.style.position="absolute",e.style.top="-1000px",e.style.overflow="scroll",document.body.appendChild(e),Hl="reverse",e.scrollLeft>0?Hl="default":(e.scrollLeft=1,0===e.scrollLeft&&(Hl="negative")),document.body.removeChild(e),Hl}function Gl(e,t){var n=e.scrollLeft;if("rtl"!==t)return n;switch(Yl()){case"negative":return e.scrollWidth-e.clientWidth+n;case"reverse":return e.scrollWidth-e.clientWidth-n;default:return n}}function Ql(e){return(1+Math.sin(Math.PI*e-Math.PI/2))/2}var Jl={width:99,height:99,position:"absolute",top:-9999,overflow:"scroll"};function Zl(e){var t=e.onChange,n=Object(ze.a)(e,["onChange"]),o=r.useRef(),a=r.useRef(null),i=function(){o.current=a.current.offsetHeight-a.current.clientHeight};return r.useEffect((function(){var e=it((function(){var e=o.current;i(),e!==o.current&&t(o.current)}));return window.addEventListener("resize",e),function(){e.clear(),window.removeEventListener("resize",e)}}),[t]),r.useEffect((function(){i(),t(o.current)}),[t]),r.createElement("div",Object(h.a)({style:Jl,ref:a},n))}var ec=r.forwardRef((function(e,t){var n=e.classes,o=e.className,a=e.color,i=e.orientation,l=Object(ze.a)(e,["classes","className","color","orientation"]);return r.createElement("span",Object(h.a)({className:Object(Fe.a)(n.root,n["color".concat(Object(qe.a)(a))],o,"vertical"===i&&n.vertical),ref:t},l))})),tc=Object(We.a)((function(e){return{root:{position:"absolute",height:2,bottom:0,width:"100%",transition:e.transitions.create()},colorPrimary:{backgroundColor:e.palette.primary.main},colorSecondary:{backgroundColor:e.palette.secondary.main},vertical:{height:"100%",width:2,right:0}}}),{name:"PrivateTabIndicator"})(ec),nc=qn(r.createElement("path",{d:"M15.41 16.09l-4.58-4.59 4.58-4.59L14 5.5l-6 6 6 6z"})),rc=qn(r.createElement("path",{d:"M8.59 16.34l4.58-4.59-4.58-4.59L10 5.75l6 6-6 6z"})),oc=r.createElement(nc,{fontSize:"small"}),ac=r.createElement(rc,{fontSize:"small"}),ic=r.forwardRef((function(e,t){var n=e.classes,o=e.className,a=e.direction,i=e.orientation,l=e.disabled,c=Object(ze.a)(e,["classes","className","direction","orientation","disabled"]);return r.createElement(Nr,Object(h.a)({component:"div",className:Object(Fe.a)(n.root,o,l&&n.disabled,"vertical"===i&&n.vertical),ref:t,role:null,tabIndex:null},c),"left"===a?oc:ac)})),lc=Object(We.a)({root:{width:40,flexShrink:0,opacity:.8,"&$disabled":{opacity:0}},vertical:{width:"100%",height:40,"& svg":{transform:"rotate(90deg)"}},disabled:{}},{name:"MuiTabScrollButton"})(ic),cc=r.forwardRef((function(e,t){var n=e["aria-label"],o=e["aria-labelledby"],a=e.action,i=e.centered,l=void 0!==i&&i,c=e.children,u=e.classes,s=e.className,d=e.component,f=void 0===d?"div":d,p=e.indicatorColor,m=void 0===p?"secondary":p,v=e.onChange,b=e.orientation,g=void 0===b?"horizontal":b,y=e.ScrollButtonComponent,x=void 0===y?lc:y,w=e.scrollButtons,O=void 0===w?"auto":w,E=e.selectionFollowsFocus,S=e.TabIndicatorProps,k=void 0===S?{}:S,j=e.TabScrollButtonProps,C=e.textColor,P=void 0===C?"inherit":C,T=e.value,N=e.variant,R=void 0===N?"standard":N,M=Object(ze.a)(e,["aria-label","aria-labelledby","action","centered","children","classes","className","component","indicatorColor","onChange","orientation","ScrollButtonComponent","scrollButtons","selectionFollowsFocus","TabIndicatorProps","TabScrollButtonProps","textColor","value","variant"]),D=Ot(),A="scrollable"===R,I="rtl"===D.direction,L="vertical"===g,_=L?"scrollTop":"scrollLeft",z=L?"top":"left",F=L?"bottom":"right",W=L?"clientHeight":"clientWidth",B=L?"height":"width";var H=r.useState(!1),U=H[0],$=H[1],V=r.useState({}),q=V[0],X=V[1],K=r.useState({start:!1,end:!1}),Y=K[0],G=K[1],Q=r.useState({overflow:"hidden",marginBottom:null}),J=Q[0],Z=Q[1],ee=new Map,te=r.useRef(null),ne=r.useRef(null),re=function(){var e,t,n=te.current;if(n){var r=n.getBoundingClientRect();e={clientWidth:n.clientWidth,scrollLeft:n.scrollLeft,scrollTop:n.scrollTop,scrollLeftNormalized:Gl(n,D.direction),scrollWidth:n.scrollWidth,top:r.top,bottom:r.bottom,left:r.left,right:r.right}}if(n&&!1!==T){var o=ne.current.children;if(o.length>0){var a=o[ee.get(T)];0,t=a?a.getBoundingClientRect():null}}return{tabsMeta:e,tabMeta:t}},oe=Xt((function(){var e,t=re(),n=t.tabsMeta,r=t.tabMeta,o=0;if(r&&n)if(L)o=r.top-n.top+n.scrollTop;else{var a=I?n.scrollLeftNormalized+n.clientWidth-n.scrollWidth:n.scrollLeft;o=r.left-n.left+a}var i=(e={},Object(xt.a)(e,z,o),Object(xt.a)(e,B,r?r[B]:0),e);if(isNaN(q[z])||isNaN(q[B]))X(i);else{var l=Math.abs(q[z]-i[z]),c=Math.abs(q[B]-i[B]);(l>=1||c>=1)&&X(i)}})),ae=function(e){!function(e,t,n){var r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:{},o=arguments.length>4&&void 0!==arguments[4]?arguments[4]:function(){},a=r.ease,i=void 0===a?Ql:a,l=r.duration,c=void 0===l?300:l,u=null,s=t[e],d=!1,f=function(){d=!0},p=function r(a){if(d)o(new Error("Animation cancelled"));else{null===u&&(u=a);var l=Math.min(1,(a-u)/c);t[e]=i(l)*(n-s)+s,l>=1?requestAnimationFrame((function(){o(null)})):requestAnimationFrame(r)}};s===n?o(new Error("Element already at target position")):requestAnimationFrame(p)}(_,te.current,e)},ie=function(e){var t=te.current[_];L?t+=e:(t+=e*(I?-1:1),t*=I&&"reverse"===Yl()?-1:1),ae(t)},le=function(){ie(-te.current[W])},ce=function(){ie(te.current[W])},ue=r.useCallback((function(e){Z({overflow:null,marginBottom:-e})}),[]),se=Xt((function(){var e=re(),t=e.tabsMeta,n=e.tabMeta;if(n&&t)if(n[z]<t[z]){var r=t[_]+(n[z]-t[z]);ae(r)}else if(n[F]>t[F]){var o=t[_]+(n[F]-t[F]);ae(o)}})),de=Xt((function(){if(A&&"off"!==O){var e,t,n=te.current,r=n.scrollTop,o=n.scrollHeight,a=n.clientHeight,i=n.scrollWidth,l=n.clientWidth;if(L)e=r>1,t=r<o-a-1;else{var c=Gl(te.current,D.direction);e=I?c<i-l-1:c>1,t=I?c>1:c<i-l-1}e===Y.start&&t===Y.end||G({start:e,end:t})}}));r.useEffect((function(){var e=it((function(){oe(),de()})),t=Bt(te.current);return t.addEventListener("resize",e),function(){e.clear(),t.removeEventListener("resize",e)}}),[oe,de]);var fe=r.useCallback(it((function(){de()})));r.useEffect((function(){return function(){fe.clear()}}),[fe]),r.useEffect((function(){$(!0)}),[]),r.useEffect((function(){oe(),de()})),r.useEffect((function(){se()}),[se,q]),r.useImperativeHandle(a,(function(){return{updateIndicator:oe,updateScrollButtons:de}}),[oe,de]);var pe=r.createElement(tc,Object(h.a)({className:u.indicator,orientation:g,color:m},k,{style:Object(h.a)({},q,k.style)})),me=0,he=r.Children.map(c,(function(e){if(!r.isValidElement(e))return null;var t=void 0===e.props.value?me:e.props.value;ee.set(t,me);var n=t===T;return me+=1,r.cloneElement(e,{fullWidth:"fullWidth"===R,indicator:n&&!U&&pe,selected:n,selectionFollowsFocus:E,onChange:v,textColor:P,value:t})})),ve=function(){var e={};e.scrollbarSizeListener=A?r.createElement(Zl,{className:u.scrollable,onChange:ue}):null;var t=Y.start||Y.end,n=A&&("auto"===O&&t||"desktop"===O||"on"===O);return e.scrollButtonStart=n?r.createElement(x,Object(h.a)({orientation:g,direction:I?"right":"left",onClick:le,disabled:!Y.start,className:Object(Fe.a)(u.scrollButtons,"on"!==O&&u.scrollButtonsDesktop)},j)):null,e.scrollButtonEnd=n?r.createElement(x,Object(h.a)({orientation:g,direction:I?"left":"right",onClick:ce,disabled:!Y.end,className:Object(Fe.a)(u.scrollButtons,"on"!==O&&u.scrollButtonsDesktop)},j)):null,e}();return r.createElement(f,Object(h.a)({className:Object(Fe.a)(u.root,s,L&&u.vertical),ref:t},M),ve.scrollButtonStart,ve.scrollbarSizeListener,r.createElement("div",{className:Object(Fe.a)(u.scroller,A?u.scrollable:u.fixed),style:J,ref:te,onScroll:fe},r.createElement("div",{"aria-label":n,"aria-labelledby":o,className:Object(Fe.a)(u.flexContainer,L&&u.flexContainerVertical,l&&!A&&u.centered),onKeyDown:function(e){var t=e.target;if("tab"===t.getAttribute("role")){var n=null,r="vertical"!==g?"ArrowLeft":"ArrowUp",o="vertical"!==g?"ArrowRight":"ArrowDown";switch("vertical"!==g&&"rtl"===D.direction&&(r="ArrowRight",o="ArrowLeft"),e.key){case r:n=t.previousElementSibling||ne.current.lastChild;break;case o:n=t.nextElementSibling||ne.current.firstChild;break;case"Home":n=ne.current.firstChild;break;case"End":n=ne.current.lastChild}null!==n&&(n.focus(),e.preventDefault())}},ref:ne,role:"tablist"},he),U&&pe),ve.scrollButtonEnd)})),uc=Object(We.a)((function(e){return{root:{overflow:"hidden",minHeight:48,WebkitOverflowScrolling:"touch",display:"flex"},vertical:{flexDirection:"column"},flexContainer:{display:"flex"},flexContainerVertical:{flexDirection:"column"},centered:{justifyContent:"center"},scroller:{position:"relative",display:"inline-block",flex:"1 1 auto",whiteSpace:"nowrap"},fixed:{overflowX:"hidden",width:"100%"},scrollable:{overflowX:"scroll",scrollbarWidth:"none","&::-webkit-scrollbar":{display:"none"}},scrollButtons:{},scrollButtonsDesktop:Object(xt.a)({},e.breakpoints.down("xs"),{display:"none"}),indicator:{}}}),{name:"MuiTabs"})(cc),sc=r.forwardRef((function(e,t){var n=e.classes,o=e.className,a=e.disabled,i=void 0!==a&&a,l=e.disableFocusRipple,c=void 0!==l&&l,u=e.fullWidth,s=e.icon,d=e.indicator,f=e.label,p=e.onChange,m=e.onClick,v=e.onFocus,b=e.selected,g=e.selectionFollowsFocus,y=e.textColor,x=void 0===y?"inherit":y,w=e.value,O=e.wrapped,E=void 0!==O&&O,S=Object(ze.a)(e,["classes","className","disabled","disableFocusRipple","fullWidth","icon","indicator","label","onChange","onClick","onFocus","selected","selectionFollowsFocus","textColor","value","wrapped"]);return r.createElement(Nr,Object(h.a)({focusRipple:!c,className:Object(Fe.a)(n.root,n["textColor".concat(Object(qe.a)(x))],o,i&&n.disabled,b&&n.selected,f&&s&&n.labelIcon,u&&n.fullWidth,E&&n.wrapped),ref:t,role:"tab","aria-selected":b,disabled:i,onClick:function(e){p&&p(e,w),m&&m(e)},onFocus:function(e){g&&!b&&p&&p(e,w),v&&v(e)},tabIndex:b?0:-1},S),r.createElement("span",{className:n.wrapper},s,f),d)})),dc=Object(We.a)((function(e){var t;return{root:Object(h.a)({},e.typography.button,(t={maxWidth:264,minWidth:72,position:"relative",boxSizing:"border-box",minHeight:48,flexShrink:0,padding:"6px 12px"},Object(xt.a)(t,e.breakpoints.up("sm"),{padding:"6px 24px"}),Object(xt.a)(t,"overflow","hidden"),Object(xt.a)(t,"whiteSpace","normal"),Object(xt.a)(t,"textAlign","center"),Object(xt.a)(t,e.breakpoints.up("sm"),{minWidth:160}),t)),labelIcon:{minHeight:72,paddingTop:9,"& $wrapper > *:first-child":{marginBottom:6}},textColorInherit:{color:"inherit",opacity:.7,"&$selected":{opacity:1},"&$disabled":{opacity:.5}},textColorPrimary:{color:e.palette.text.secondary,"&$selected":{color:e.palette.primary.main},"&$disabled":{color:e.palette.text.disabled}},textColorSecondary:{color:e.palette.text.secondary,"&$selected":{color:e.palette.secondary.main},"&$disabled":{color:e.palette.text.disabled}},selected:{},disabled:{},fullWidth:{flexShrink:1,flexGrow:1,flexBasis:0,maxWidth:"none"},wrapped:{fontSize:e.typography.pxToRem(12),lineHeight:1.5},wrapper:{display:"inline-flex",alignItems:"center",justifyContent:"center",width:"100%",flexDirection:"column"}}}),{name:"MuiTab"})(sc),fc=n(85),pc=n.n(fc);function mc(){return(mc=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function hc(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(e)))return;var n=[],r=!0,o=!1,a=void 0;try{for(var i,l=e[Symbol.iterator]();!(r=(i=l.next()).done)&&(n.push(i.value),!t||n.length!==t);r=!0);}catch(e){o=!0,a=e}finally{try{r||null==l.return||l.return()}finally{if(o)throw a}}return n}(e,t)||function(e,t){if(!e)return;if("string"==typeof e)return vc(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return vc(e,t)}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function vc(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function bc(e){return{id:"full-width-tab-".concat(e),"aria-controls":"full-width-tabpanel-".concat(e)}}var gc=_e((function(e){return{root:{margin:e.spacing(1,0,0,0)},media:{filter:"brightness(25%)",zIndex:1},divider:{margin:e.spacing(0,0,1,0)},nav:{flexGrow:1,width:"100%",backgroundColor:e.palette.background.paper},navButton:{alignSelf:"flex-start",color:"#000",textShadow:"0px 1px 2px rgba(255, 255, 255, 0.1)"},content:{padding:e.spacing(1)},reviews:{display:"flex",width:"100%",flexDirection:"column",boxSizing:"border-box",justifyContent:"center","& > *:not(:last-child)":{marginBottom:e.spacing(2)}},reviewContent:{display:"flex",width:"100%",alignItems:"center","& > *:not(:last-child)":{marginRight:e.spacing(2)}},reviewsList:{display:"flex",flexDirection:"column",width:"100%"},reviewInput:{flexGrow:1},lessonHeader:{position:"absolute",display:"flex",flexDirection:"column",zIndex:1e3,height:200,boxSizing:"border-box",padding:e.spacing(0,0,4,2),justifyContent:"space-between"}}}));var yc=function(){return{type:"LESSON_LOAD"}},xc=function(e){return{type:"LESSON_DELETE",payload:e}},wc=V((function(e){console.log(e);var t=e.lessons,n=t.lessonId,r=t.lessonsList,o=e.profile.profile;return{lessonId:n,lessonsList:r,lesson:r[n],profile:o}}),{lessonsLoadAction:yc,deleteLesonAction:xc,addReviewLesson:function(e){return{type:"REVIEW_ADD",payload:e}},removeReviewLesson:function(e){return{type:"REMOVE_REVIEW",payload:e}},redirect:Y})((function(e){var t=gc(),n=Ot(),r=e.lesson,a=(e.deleteLesonAction,e.lessonId,e.profile),i=hc(o.a.useState(!1),2),l=i[0],c=(i[1],hc(o.a.useState(0),2)),u=c[0],s=c[1],d=hc(o.a.useState(""),2),f=d[0],p=d[1];if(void 0===r)return o.a.createElement("div",null,"Урок не найден вернитесь на главную!");var m=function(){e.lesson.reviews.find((function(t){return t.author==="".concat(e.profile.firstName," ").concat(e.profile.lastName)}));e.addReviewLesson({id:e.lessonId,review:{id:Ca(4),author:"".concat(e.profile.firstName," ").concat(e.profile.lastName),text:f,avatar:e.profile.avatar}}),p("")},h=(r.id,r.category),v=r.content,b=r.title,g=(r.price,r.cover),y=r.rating,x=r.author;return o.a.createElement("div",{style:{position:"relative"}},o.a.createElement(ql,{maxWidth:"xl",className:t.lessonHeader},o.a.createElement(La,{onClick:function(){e.redirect("/lessons")},variant:"text",color:"primary",className:t.navButton},"Назад к урокам"),o.a.createElement(Ye,{variant:"h3",component:"h3",color:"textPrimary"},b),o.a.createElement(Ye,{variant:"body2",component:"span",color:"secondary"},a.myLessons.find((function(e){return e===r.id}))?o.a.createElement(Gr,{color:"primary",icon:o.a.createElement(lo.a,null),label:"В моих Уроках",size:"small"}):o.a.createElement(Gr,{color:"primary",icon:o.a.createElement(pc.a,null),label:"Доступен",size:"small"}))),o.a.createElement(to,{component:"img",alt:"cover_lesson",className:t.media,height:"200",image:g,title:b}),o.a.createElement("div",{className:t.nav},o.a.createElement(Kl,{position:"static",color:"default"},o.a.createElement(uc,{value:u,onChange:function(e,t){s(t)},indicatorColor:"primary",textColor:"primary",variant:"fullWidth","aria-label":"full width tabs example"},o.a.createElement(dc,mc({label:"Содержание"},bc(0))),o.a.createElement(dc,mc({label:"Об уроке"},bc(1))),o.a.createElement(dc,mc({label:"Отзывы"},bc(2))),o.a.createElement(dc,mc({label:"Вопросы и ответы"},bc(3))))),o.a.createElement(El.a,{axis:"rtl"===n.direction?"x-reverse":"x",index:u,onChangeIndex:function(e){s(e)}},o.a.createElement(qr,{className:t.root,index:0,dir:n.direction},o.a.createElement(ro,null,o.a.createElement(Ye,{variant:"body1",color:"textPrimary",component:"h3"},"Описание Урока"),l?null:o.a.createElement(Ye,{variant:"body2",color:"textPrimary",component:"p"},v))),o.a.createElement(qr,{className:t.root,index:1,dir:n.direction},o.a.createElement(ro,null,o.a.createElement(Ye,null,"Категория:"),o.a.createElement(Gr,{avatar:o.a.createElement(jl,null,h[0]),label:h,className:t.divider,color:"primary"}),o.a.createElement(Ye,null,"Сложность: 5"),o.a.createElement(Ye,null,"Автор: ",x),o.a.createElement(Ye,null,"Рейтинг:"),o.a.createElement($l,{name:"read-only",value:y,readOnly:!0}))),o.a.createElement(qr,{className:t.root,index:2,dir:n.direction},o.a.createElement(ro,{className:t.reviews},o.a.createElement("div",{className:t.reviewsList},o.a.createElement(Ye,{variant:"h4",component:"h3",style:{marginBottom:n.spacing(1)}},"Отзывы"),o.a.createElement(Je,{variant:"fullWidth",orientation:"horizontal",style:{marginBottom:n.spacing(2)}}),e.lesson.reviews.map((function(r,a){return o.a.createElement(On,{key:r.id,elevation:2,style:{marginBottom:n.spacing(2),padding:n.spacing(1),boxSizing:"border-box"}},o.a.createElement("div",{className:t.reviewContent},o.a.createElement(jl,{src:r.avatar}),o.a.createElement(Ye,{variant:"body2",component:"span",style:{flexGrow:1}},r.author,": ",r.text),r.author==="".concat(e.profile.firstName," ").concat(e.profile.lastName)?o.a.createElement(Pl,null,o.a.createElement(Mr,null,o.a.createElement(Ki.a,null)),o.a.createElement(Mr,{id:r.id,onClick:function(t){return function(t,n){e.removeReviewLesson({lessonId:e.lessonId,reviewId:n})}(0,r.id)}},o.a.createElement(Nl.a,null))):null))}))),e.lesson.reviews.length>0?o.a.createElement(Je,{orientation:"horizontal",variant:"fullWidth"}):null,o.a.createElement("div",{className:t.reviewContent},o.a.createElement(jl,{src:a.avatar}),o.a.createElement(ar,{placeholder:e.lesson.reviews.length>0?"Оставьте отзыв ":"Станьте первым, кто оставит отзыв об этом уроке!",variant:"outlined",className:t.reviewInput,size:"small",type:"text",onKeyPress:function(e){"Enter"===e.key&&m()},value:f,onChange:function(e){return p(e.target.value)}}),o.a.createElement(Mr,{onClick:m,color:"primary"},o.a.createElement(Ml.a,null))))),o.a.createElement(Ll,{value:u,index:3,dir:n.direction,profile:e.profile,lesson:e.lesson}))))})),Oc=function(){return{type:"MOBILE_DRAWER_STATE_SET"}},Ec=function(){return{type:"LOGOUT"}},Sc=function(e){return{type:"LOGIN",payload:e}},kc=function(){return{type:"PROFILE_LOAD"}},jc=function(e){return{type:"PROFILE_CHANGE_NAME",payload:e}},Cc=r.forwardRef((function(e,t){var n=e.classes,o=e.className,a=e.component,i=void 0===a?"div":a,l=e.disableGutters,c=void 0!==l&&l,u=e.variant,s=void 0===u?"regular":u,d=Object(ze.a)(e,["classes","className","component","disableGutters","variant"]);return r.createElement(i,Object(h.a)({className:Object(Fe.a)(n.root,n[s],o,!c&&n.gutters),ref:t},d))})),Pc=Object(We.a)((function(e){return{root:{position:"relative",display:"flex",alignItems:"center"},gutters:Object(xt.a)({paddingLeft:e.spacing(2),paddingRight:e.spacing(2)},e.breakpoints.up("sm"),{paddingLeft:e.spacing(3),paddingRight:e.spacing(3)}),regular:e.mixins.toolbar,dense:{minHeight:48}}}),{name:"MuiToolbar"})(Cc),Tc=n(57),Nc=n.n(Tc);o.a.Component;o.a.Component;var Rc=function(e,t){return"function"==typeof e?e(t):e},Mc=function(e,t){return"string"==typeof e?ie(e,null,null,t):e},Dc=function(e){return e},Ac=o.a.forwardRef;void 0===Ac&&(Ac=Dc);var Ic=Ac((function(e,t){var n=e.innerRef,r=e.navigate,a=e.onClick,i=Object(v.a)(e,["innerRef","navigate","onClick"]),l=i.target,c=Object(h.a)({},i,{onClick:function(e){try{a&&a(e)}catch(t){throw e.preventDefault(),t}e.defaultPrevented||0!==e.button||l&&"_self"!==l||function(e){return!!(e.metaKey||e.altKey||e.ctrlKey||e.shiftKey)}(e)||(e.preventDefault(),r())}});return c.ref=Dc!==Ac&&t||n,o.a.createElement("a",c)}));var Lc=Ac((function(e,t){var n=e.component,r=void 0===n?Ic:n,a=e.replace,i=e.to,l=e.innerRef,c=Object(v.a)(e,["component","replace","to","innerRef"]);return o.a.createElement(Ee.Consumer,null,(function(e){e||ee(!1);var n=e.history,u=Mc(Rc(i,e.location),e.location),s=u?n.createHref(u):"",d=Object(h.a)({},c,{href:s,navigate:function(){var t=Rc(i,e.location);(a?n.replace:n.push)(t)}});return Dc!==Ac?d.ref=t||l:d.innerRef=l,o.a.createElement(r,d)}))})),_c=function(e){return e},zc=o.a.forwardRef;void 0===zc&&(zc=_c);zc((function(e,t){var n=e["aria-current"],r=void 0===n?"page":n,a=e.activeClassName,i=void 0===a?"active":a,l=e.activeStyle,c=e.className,u=e.exact,s=e.isActive,d=e.location,f=e.sensitive,p=e.strict,m=e.style,b=e.to,g=e.innerRef,y=Object(v.a)(e,["aria-current","activeClassName","activeStyle","className","exact","isActive","location","sensitive","strict","style","to","innerRef"]);return o.a.createElement(Ee.Consumer,null,(function(e){e||ee(!1);var n=d||e.location,a=Mc(Rc(b,n),n),v=a.pathname,x=v&&v.replace(/([.+*?=^!:${}()[\]|/\\])/g,"\\$1"),w=x?Ce(n.pathname,{path:x,exact:u,sensitive:f,strict:p}):null,O=!!(s?s(w,n):w),E=O?function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return t.filter((function(e){return e})).join(" ")}(c,i):c,S=O?Object(h.a)({},m,{},l):m,k=Object(h.a)({"aria-current":O&&r||null,className:E,style:S,to:a},y);return _c!==zc?k.ref=t||g:k.innerRef=g,o.a.createElement(Lc,k)}))}));var Fc=r.forwardRef((function(e,t){var n=e.anchorOrigin,o=void 0===n?{vertical:"top",horizontal:"right"}:n,a=e.badgeContent,i=e.children,l=e.classes,c=e.className,u=e.color,s=void 0===u?"default":u,d=e.component,f=void 0===d?"span":d,p=e.invisible,m=e.max,v=void 0===m?99:m,b=e.overlap,g=void 0===b?"rectangle":b,y=e.showZero,x=void 0!==y&&y,w=e.variant,O=void 0===w?"standard":w,E=Object(ze.a)(e,["anchorOrigin","badgeContent","children","classes","className","color","component","invisible","max","overlap","showZero","variant"]),S=p;null==p&&(0===a&&!x||null==a&&"dot"!==O)&&(S=!0);var k="";return"dot"!==O&&(k=a>v?"".concat(v,"+"):a),r.createElement(f,Object(h.a)({className:Object(Fe.a)(l.root,c),ref:t},E),i,r.createElement("span",{className:Object(Fe.a)(l.badge,l["".concat(o.horizontal).concat(Object(qe.a)(o.vertical),"}")],l["anchorOrigin".concat(Object(qe.a)(o.vertical)).concat(Object(qe.a)(o.horizontal)).concat(Object(qe.a)(g))],"default"!==s&&l["color".concat(Object(qe.a)(s))],S&&l.invisible,"dot"===O&&l.dot)},k))})),Wc=Object(We.a)((function(e){return{root:{position:"relative",display:"inline-flex",verticalAlign:"middle",flexShrink:0},badge:{display:"flex",flexDirection:"row",flexWrap:"wrap",justifyContent:"center",alignContent:"center",alignItems:"center",position:"absolute",boxSizing:"border-box",fontFamily:e.typography.fontFamily,fontWeight:e.typography.fontWeightMedium,fontSize:e.typography.pxToRem(12),minWidth:20,lineHeight:1,padding:"0 6px",height:20,borderRadius:10,zIndex:1,transition:e.transitions.create("transform",{easing:e.transitions.easing.easeInOut,duration:e.transitions.duration.enteringScreen})},colorPrimary:{backgroundColor:e.palette.primary.main,color:e.palette.primary.contrastText},colorSecondary:{backgroundColor:e.palette.secondary.main,color:e.palette.secondary.contrastText},colorError:{backgroundColor:e.palette.error.main,color:e.palette.error.contrastText},dot:{borderRadius:4,height:8,minWidth:8,padding:0},anchorOriginTopRightRectangle:{top:0,right:0,transform:"scale(1) translate(50%, -50%)",transformOrigin:"100% 0%","&$invisible":{transform:"scale(0) translate(50%, -50%)"}},anchorOriginBottomRightRectangle:{bottom:0,right:0,transform:"scale(1) translate(50%, 50%)",transformOrigin:"100% 100%","&$invisible":{transform:"scale(0) translate(50%, 50%)"}},anchorOriginTopLeftRectangle:{top:0,left:0,transform:"scale(1) translate(-50%, -50%)",transformOrigin:"0% 0%","&$invisible":{transform:"scale(0) translate(-50%, -50%)"}},anchorOriginBottomLeftRectangle:{bottom:0,left:0,transform:"scale(1) translate(-50%, 50%)",transformOrigin:"0% 100%","&$invisible":{transform:"scale(0) translate(-50%, 50%)"}},anchorOriginTopRightCircle:{top:"14%",right:"14%",transform:"scale(1) translate(50%, -50%)",transformOrigin:"100% 0%","&$invisible":{transform:"scale(0) translate(50%, -50%)"}},anchorOriginBottomRightCircle:{bottom:"14%",right:"14%",transform:"scale(1) translate(50%, 50%)",transformOrigin:"100% 100%","&$invisible":{transform:"scale(0) translate(50%, 50%)"}},anchorOriginTopLeftCircle:{top:"14%",left:"14%",transform:"scale(1) translate(-50%, -50%)",transformOrigin:"0% 0%","&$invisible":{transform:"scale(0) translate(-50%, -50%)"}},anchorOriginBottomLeftCircle:{bottom:"14%",left:"14%",transform:"scale(1) translate(-50%, 50%)",transformOrigin:"0% 100%","&$invisible":{transform:"scale(0) translate(-50%, 50%)"}},invisible:{transition:e.transitions.create("transform",{easing:e.transitions.easing.easeInOut,duration:e.transitions.duration.leavingScreen})}}}),{name:"MuiBadge"})(Fc),Bc=n(86),Hc=n.n(Bc),Uc={enter:ai.b.enteringScreen,exit:ai.b.leavingScreen},$c=r.forwardRef((function(e,t){var n=e.BackdropProps,o=e.children,a=e.classes,i=e.className,l=e.disableBackdropClick,c=void 0!==l&&l,u=e.disableEscapeKeyDown,s=void 0!==u&&u,d=e.fullScreen,f=void 0!==d&&d,p=e.fullWidth,m=void 0!==p&&p,v=e.maxWidth,b=void 0===v?"sm":v,g=e.onBackdropClick,y=e.onClose,x=e.onEnter,w=e.onEntered,O=e.onEntering,E=e.onEscapeKeyDown,S=e.onExit,k=e.onExited,j=e.onExiting,C=e.open,P=e.PaperComponent,T=void 0===P?On:P,N=e.PaperProps,R=void 0===N?{}:N,M=e.scroll,D=void 0===M?"paper":M,A=e.TransitionComponent,I=void 0===A?ci:A,L=e.transitionDuration,_=void 0===L?Uc:L,z=e.TransitionProps,F=e["aria-describedby"],W=e["aria-labelledby"],B=Object(ze.a)(e,["BackdropProps","children","classes","className","disableBackdropClick","disableEscapeKeyDown","fullScreen","fullWidth","maxWidth","onBackdropClick","onClose","onEnter","onEntered","onEntering","onEscapeKeyDown","onExit","onExited","onExiting","open","PaperComponent","PaperProps","scroll","TransitionComponent","transitionDuration","TransitionProps","aria-describedby","aria-labelledby"]),H=r.useRef();return r.createElement(un,Object(h.a)({className:Object(Fe.a)(a.root,i),BackdropComponent:si,BackdropProps:Object(h.a)({transitionDuration:_},n),closeAfterTransition:!0,disableBackdropClick:c,disableEscapeKeyDown:s,onEscapeKeyDown:E,onClose:y,open:C,ref:t},B),r.createElement(I,Object(h.a)({appear:!0,in:C,timeout:_,onEnter:x,onEntering:O,onEntered:w,onExit:S,onExiting:j,onExited:k,role:"none presentation"},z),r.createElement("div",{className:Object(Fe.a)(a.container,a["scroll".concat(Object(qe.a)(D))]),onMouseUp:function(e){e.target===e.currentTarget&&e.target===H.current&&(H.current=null,g&&g(e),!c&&y&&y(e,"backdropClick"))},onMouseDown:function(e){H.current=e.target}},r.createElement(T,Object(h.a)({elevation:24,role:"dialog","aria-describedby":F,"aria-labelledby":W},R,{className:Object(Fe.a)(a.paper,a["paperScroll".concat(Object(qe.a)(D))],a["paperWidth".concat(Object(qe.a)(String(b)))],R.className,f&&a.paperFullScreen,m&&a.paperFullWidth)}),o))))})),Vc=Object(We.a)((function(e){return{root:{"@media print":{position:"absolute !important"}},scrollPaper:{display:"flex",justifyContent:"center",alignItems:"center"},scrollBody:{overflowY:"auto",overflowX:"hidden",textAlign:"center","&:after":{content:'""',display:"inline-block",verticalAlign:"middle",height:"100%",width:"0"}},container:{height:"100%","@media print":{height:"auto"},outline:0},paper:{margin:32,position:"relative",overflowY:"auto","@media print":{overflowY:"visible",boxShadow:"none"}},paperScrollPaper:{display:"flex",flexDirection:"column",maxHeight:"calc(100% - 64px)"},paperScrollBody:{display:"inline-block",verticalAlign:"middle",textAlign:"left"},paperWidthFalse:{maxWidth:"calc(100% - 64px)"},paperWidthXs:{maxWidth:Math.max(e.breakpoints.values.xs,444),"&$paperScrollBody":Object(xt.a)({},e.breakpoints.down(Math.max(e.breakpoints.values.xs,444)+64),{maxWidth:"calc(100% - 64px)"})},paperWidthSm:{maxWidth:e.breakpoints.values.sm,"&$paperScrollBody":Object(xt.a)({},e.breakpoints.down(e.breakpoints.values.sm+64),{maxWidth:"calc(100% - 64px)"})},paperWidthMd:{maxWidth:e.breakpoints.values.md,"&$paperScrollBody":Object(xt.a)({},e.breakpoints.down(e.breakpoints.values.md+64),{maxWidth:"calc(100% - 64px)"})},paperWidthLg:{maxWidth:e.breakpoints.values.lg,"&$paperScrollBody":Object(xt.a)({},e.breakpoints.down(e.breakpoints.values.lg+64),{maxWidth:"calc(100% - 64px)"})},paperWidthXl:{maxWidth:e.breakpoints.values.xl,"&$paperScrollBody":Object(xt.a)({},e.breakpoints.down(e.breakpoints.values.xl+64),{maxWidth:"calc(100% - 64px)"})},paperFullWidth:{width:"calc(100% - 64px)"},paperFullScreen:{margin:0,width:"100%",maxWidth:"100%",height:"100%",maxHeight:"none",borderRadius:0,"&$paperScrollBody":{margin:0,maxWidth:"100%"}}}}),{name:"MuiDialog"})($c),qc=r.forwardRef((function(e,t){var n=e.children,o=e.classes,a=e.className,i=e.disableTypography,l=void 0!==i&&i,c=Object(ze.a)(e,["children","classes","className","disableTypography"]);return r.createElement("div",Object(h.a)({className:Object(Fe.a)(o.root,a),ref:t},c),l?n:r.createElement(Ye,{component:"h2",variant:"h6"},n))})),Xc=Object(We.a)({root:{margin:0,padding:"16px 24px",flex:"0 0 auto"}},{name:"MuiDialogTitle"})(qc),Kc=r.forwardRef((function(e,t){var n=e.classes,o=e.className,a=e.dividers,i=void 0!==a&&a,l=Object(ze.a)(e,["classes","className","dividers"]);return r.createElement("div",Object(h.a)({className:Object(Fe.a)(n.root,o,i&&n.dividers),ref:t},l))})),Yc=Object(We.a)((function(e){return{root:{flex:"1 1 auto",WebkitOverflowScrolling:"touch",overflowY:"auto",padding:"8px 24px","&:first-child":{paddingTop:20}},dividers:{padding:"16px 24px",borderTop:"1px solid ".concat(e.palette.divider),borderBottom:"1px solid ".concat(e.palette.divider)}}}),{name:"MuiDialogContent"})(Kc),Gc=r.forwardRef((function(e,t){return r.createElement(Ye,Object(h.a)({component:"p",variant:"body1",color:"textSecondary",ref:t},e))})),Qc=Object(We.a)({root:{marginBottom:12}},{name:"MuiDialogContentText"})(Gc),Jc=r.forwardRef((function(e,t){var n=e.disableSpacing,o=void 0!==n&&n,a=e.classes,i=e.className,l=Object(ze.a)(e,["disableSpacing","classes","className"]);return r.createElement("div",Object(h.a)({className:Object(Fe.a)(a.root,i,!o&&a.spacing),ref:t},l))})),Zc=Object(We.a)({root:{display:"flex",alignItems:"center",padding:8,justifyContent:"flex-end",flex:"0 0 auto"},spacing:{"& > :not(:first-child)":{marginLeft:8}}},{name:"MuiDialogActions"})(Jc);function eu(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function tu(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(e)))return;var n=[],r=!0,o=!1,a=void 0;try{for(var i,l=e[Symbol.iterator]();!(r=(i=l.next()).done)&&(n.push(i.value),!t||n.length!==t);r=!0);}catch(e){o=!0,a=e}finally{try{r||null==l.return||l.return()}finally{if(o)throw a}}return n}(e,t)||function(e,t){if(!e)return;if("string"==typeof e)return nu(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return nu(e,t)}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function nu(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var ru=_e((function(e){return{root:{display:"flex","& > *":{margin:e.spacing(1)}},profileTitleContainer:{display:"flex",justifyContent:"space-between",width:"100%",boxSizing:"border-box"},small:{width:e.spacing(3),height:e.spacing(3)},regButton:{margin:"0 0 0 0"},large:{width:e.spacing(17),height:e.spacing(17),margin:"0 auto"}}}));function ou(e){return o.a.createElement(Hc.a,{handle:"#draggable-dialog-title",cancel:'[class*="MuiDialogContent-root"]'},o.a.createElement(On,e))}function au(e){var t,n=ru(),r=tu(o.a.useState(!1),2),a=r[0],i=r[1],l=tu(o.a.useState(e.profile.firstName),2),c=l[0],u=l[1],s=tu(o.a.useState(e.profile.email),2),d=s[0],f=s[1],p=tu(o.a.useState(e.profile.lastName),2),m=p[0],h=p[1],v=function(){i(!1)},b=function(e){13===e.keyCode&&(c.length>0||m.length>0)&&g()},g=function(){e.handleNameChange({firstName:c,lastName:m}),v()};return o.a.createElement("div",{className:n.regButton},o.a.createElement("p",{onClick:function(){i(!0)}},"Профиль"),o.a.createElement(Vc,{open:a,fullWidth:!0,onClose:v,PaperComponent:ou,"aria-labelledby":"draggable-dialog-title"},o.a.createElement(Xc,{style:{cursor:"move"},id:"draggable-dialog-title"},o.a.createElement("div",{className:n.profileTitleContainer},e.profile.firstName," ",e.profile.lastName,o.a.createElement(Lc,{to:"/cabinet",replace:!0},o.a.createElement(La,{color:"primary",variant:"contained",onClick:v},"Кабинет")))),o.a.createElement(Yc,null,o.a.createElement(jl,(eu(t={className:"avatar"},"className",n.large),eu(t,"src",e.profile.avatar),t)),o.a.createElement(Qc,null,"Введите новые данные о пользователе"),o.a.createElement(Qc,null,"Возраст : ",e.profile.age),o.a.createElement(ar,{autoFocus:!0,margin:"dense",id:"name",label:"Имя",onChange:function(e){u(e.target.value)},value:c,onKeyUp:function(e){return b(e)},fullWidth:!0}),o.a.createElement(ar,{autoFocus:!0,margin:"dense",id:"name",label:"Фамилия",onChange:function(e){h(e.target.value)},value:m,onKeyUp:function(e){return b(e)},fullWidth:!0}),o.a.createElement(ar,{autoFocus:!0,margin:"dense",id:"email",type:"email",label:"Почта",onChange:function(e){f(e.target.value)},value:d,onKeyUp:function(e){return b(e)},fullWidth:!0,required:!0})),o.a.createElement(Zc,null,o.a.createElement(La,{autoFocus:!0,onClick:v,color:"primary"},"Отмена"),o.a.createElement(La,{onClick:g,color:"primary"},"Потдвердить"))))}var iu=n(61),lu=n.n(iu),cu=n(62),uu=n.n(cu),su=n(87),du=n.n(su);function fu(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(e)))return;var n=[],r=!0,o=!1,a=void 0;try{for(var i,l=e[Symbol.iterator]();!(r=(i=l.next()).done)&&(n.push(i.value),!t||n.length!==t);r=!0);}catch(e){o=!0,a=e}finally{try{r||null==l.return||l.return()}finally{if(o)throw a}}return n}(e,t)||function(e,t){if(!e)return;if("string"==typeof e)return pu(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return pu(e,t)}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function pu(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function mu(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var hu=_e((function(e){return{link:{alignSelf:"center",color:"inherit"},sectionDesktop:mu({display:"none"},e.breakpoints.up("sm"),{display:"flex"}),sectionMobile:mu({display:"flex"},e.breakpoints.up("sm"),{display:"none"})}}));function vu(e){var t=hu(),n=fu(o.a.useState(null),2),r=n[0],a=n[1],i=fu(o.a.useState(null),2),l=i[0],c=i[1],u=Boolean(r),s=Boolean(l),d=function(){c(null)},f=function(){a(null),d()},p=function(){a(null),e.logoutAction()},m=o.a.createElement(Bn,{anchorEl:r,anchorOrigin:{vertical:"top",horizontal:"right"},keepMounted:!0,id:e.propsmenuId,transformOrigin:{vertical:"top",horizontal:"right"},open:u,onClose:f},o.a.createElement(Aa,{onClick:f},o.a.createElement(au,{profile:e.profile,handleNameChange:e.profileChangeNameAction})),o.a.createElement(Aa,{onClick:p},o.a.createElement("p",null,"Выход"))),h=o.a.createElement(Bn,{anchorEl:l,anchorOrigin:{vertical:"top",horizontal:"right"},id:e.mobileMenuId,keepMounted:!0,transformOrigin:{vertical:"top",horizontal:"right"},open:s,onClose:d},o.a.createElement(Aa,{onClick:d},o.a.createElement(Mr,{"aria-label":"show 4 new mails",color:"inherit"},o.a.createElement(Wc,{badgeContent:4,color:"secondary"},o.a.createElement(lu.a,null))),o.a.createElement("p",null,"Сообщения")),o.a.createElement(Aa,null,o.a.createElement(Mr,{"aria-label":"show 11 new notifications",color:"inherit"},o.a.createElement(Wc,{badgeContent:11,color:"secondary"},o.a.createElement(uu.a,null))),o.a.createElement("p",null,"Уведомления")),o.a.createElement(Aa,{onClick:function(){a(null),d(),e.redirect("cart")}},o.a.createElement(Mr,{"aria-label":"show 4 new mails",color:"inherit"},o.a.createElement(Wc,{badgeContent:Object.keys(e.cart).length,color:"secondary"},o.a.createElement(Hi.a,null))),o.a.createElement("p",null,"Корзина")),o.a.createElement(Lc,{to:"/cabinet",replace:!0},o.a.createElement(Aa,{onClick:f},o.a.createElement("p",null,"Профиль"))),o.a.createElement(Aa,{onClick:p},o.a.createElement("p",null,"Выход")));return o.a.createElement(o.a.Fragment,null,o.a.createElement("div",{className:t.sectionDesktop},o.a.createElement(Mr,{"aria-label":"show 4 new mails",color:"inherit"},o.a.createElement(Wc,{badgeContent:4,color:"secondary"},o.a.createElement(lu.a,null))),o.a.createElement(Mr,{"aria-label":"show 17 new notifications",color:"inherit"},o.a.createElement(Wc,{badgeContent:17,color:"secondary"},o.a.createElement(uu.a,null))),o.a.createElement(Mr,{edge:"end","aria-label":"account of current user","aria-controls":e.menuId,"aria-haspopup":"true",onClick:function(e){a(e.currentTarget)},color:"inherit"},o.a.createElement(jl,{src:e.profile.avatar})),o.a.createElement(Lc,{to:"/cart",replace:!0,className:t.link},o.a.createElement(Mr,{"aria-label":"show 1 goods in cart",color:"inherit"},o.a.createElement(Wc,{badgeContent:Object.keys(e.cart).length,color:"secondary"},o.a.createElement(Hi.a,null))))),o.a.createElement("div",{className:t.sectionMobile},o.a.createElement(Mr,{"aria-label":"show more","aria-controls":e.mobileMenuId,"aria-haspopup":"true",onClick:function(e){c(e.currentTarget)},color:"inherit"},o.a.createElement(du.a,null))),m,h)}function bu(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var gu=_e((function(e){return{grow:{flexGrow:1},menuButton:bu({marginRight:e.spacing(2),display:"flex"},e.breakpoints.up("sm"),{display:"none"}),nav:bu({"& button:not(:last-child)":{marginRight:"1rem"},display:"none"},e.breakpoints.up("sm"),{display:"flex"}),navButton:{color:e.palette.common.white},appBar:bu({},e.breakpoints.up("sm"),{width:"calc(100% - ".concat(150,"px)"),marginLeft:150}),appBar2:bu({},e.breakpoints.up("sm"),{width:"100%"}),title:bu({cursor:"pointer"},e.breakpoints.up("sm"),{display:"block"}),sectionDesktop:bu({display:"none"},e.breakpoints.up("sm"),{display:"flex"}),sectionMobile:bu({display:"flex"},e.breakpoints.up("sm"),{display:"none"})}}));var yu=V((function(e){var t=e.profile,n=t.profile,r=t.token;return{profile:n,mobileDrawer:e.header.mobileDrawer,cart:e.cart.cart,token:r}}),{mobileDrawerStateSetAction:Oc,redirect:Y,profileChangeNameAction:jc,logoutAction:Ec})((function(e){var t=gu();return o.a.createElement("div",{className:t.grow},o.a.createElement(Kl,{position:"fixed",className:t.appBar2,color:"primary"},o.a.createElement(Pc,null,null!==e.token?o.a.createElement(Mr,{edge:"start",className:t.menuButton,color:"inherit","aria-label":"open drawer","aria-controls":"primary-search-account-menu-mobile","aria-haspopup":"true",onClick:e.mobileDrawerStateSetAction},o.a.createElement(Nc.a,null)):null,o.a.createElement(Ye,{onClick:function(){return e.redirect("/")},className:t.title,variant:"h6",noWrap:!0,component:"h2"},e.title),o.a.createElement("div",{className:t.grow}),o.a.createElement("nav",{className:t.nav},o.a.createElement(La,{className:t.navButton,startIcon:o.a.createElement(Wi.a,null),size:"small"},o.a.createElement(Ye,{variant:"body2",component:"span"},"Мои уроки")),o.a.createElement(La,{onClick:function(){return e.redirect("/lessons")},className:t.navButton,startIcon:o.a.createElement(zi.a,null),size:"small"},o.a.createElement(Ye,{variant:"body2",component:"span"},"Каталог"))),o.a.createElement("div",{className:t.grow}),null!==e.token?o.a.createElement(vu,{redirect:e.redirect,logoutAction:e.logoutAction,profile:e.profile,menuId:"primary-search-account-menu",mobileMenuId:"primary-search-account-menu-mobile",cart:e.cart}):o.a.createElement(o.a.Fragment,null,o.a.createElement("div",{className:t.sectionDesktop},o.a.createElement(La,{onClick:function(){return e.redirect("/login")},color:"primary",variant:"contained"},"Вход / Регистрация")),o.a.createElement("div",{className:t.sectionMobile},o.a.createElement(La,{onClick:function(){return e.redirect("/login")},color:"primary",variant:"contained",size:"small"},o.a.createElement(Ye,{variant:"body2",component:"span"},"Вход / Регистрация")))))))})),xu=qn(r.createElement("path",{d:"M20,12A8,8 0 0,1 12,20A8,8 0 0,1 4,12A8,8 0 0,1 12,4C12.76,4 13.5,4.11 14.2, 4.31L15.77,2.74C14.61,2.26 13.34,2 12,2A10,10 0 0,0 2,12A10,10 0 0,0 12,22A10,10 0 0, 0 22,12M7.91,10.08L6.5,11.5L11,16L21,6L19.59,4.58L11,13.17L7.91,10.08Z"})),wu=qn(r.createElement("path",{d:"M12 5.99L19.53 19H4.47L12 5.99M12 2L1 21h22L12 2zm1 14h-2v2h2v-2zm0-6h-2v4h2v-4z"})),Ou=qn(r.createElement("path",{d:"M11 15h2v2h-2zm0-8h2v6h-2zm.99-5C6.47 2 2 6.48 2 12s4.47 10 9.99 10C17.52 22 22 17.52 22 12S17.52 2 11.99 2zM12 20c-4.42 0-8-3.58-8-8s3.58-8 8-8 8 3.58 8 8-3.58 8-8 8z"})),Eu=qn(r.createElement("path",{d:"M11,9H13V7H11M12,20C7.59,20 4,16.41 4,12C4,7.59 7.59,4 12,4C16.41,4 20,7.59 20, 12C20,16.41 16.41,20 12,20M12,2A10,10 0 0,0 2,12A10,10 0 0,0 12,22A10,10 0 0,0 22,12A10, 10 0 0,0 12,2M11,17H13V11H11V17Z"})),Su={success:r.createElement(xu,{fontSize:"inherit"}),warning:r.createElement(wu,{fontSize:"inherit"}),error:r.createElement(Ou,{fontSize:"inherit"}),info:r.createElement(Eu,{fontSize:"inherit"})},ku=r.createElement(Eo,{fontSize:"small"}),ju=r.forwardRef((function(e,t){var n=e.action,o=e.children,a=e.classes,i=e.className,l=e.closeText,c=void 0===l?"Close":l,u=e.color,s=e.icon,d=e.iconMapping,f=void 0===d?Su:d,p=e.onClose,m=e.role,v=void 0===m?"alert":m,b=e.severity,g=void 0===b?"success":b,y=e.variant,x=void 0===y?"standard":y,w=Object(ze.a)(e,["action","children","classes","className","closeText","color","icon","iconMapping","onClose","role","severity","variant"]);return r.createElement(On,Object(h.a)({role:v,square:!0,elevation:0,className:Object(Fe.a)(a.root,a["".concat(x).concat(Object(qe.a)(u||g))],i),ref:t},w),!1!==s?r.createElement("div",{className:a.icon},s||f[g]||Su[g]):null,r.createElement("div",{className:a.message},o),null!=n?r.createElement("div",{className:a.action},n):null,null==n&&p?r.createElement("div",{className:a.action},r.createElement(Mr,{size:"small","aria-label":c,title:c,color:"inherit",onClick:p},ku)):null)})),Cu=Object(We.a)((function(e){var t="light"===e.palette.type?Ge.a:Ge.e,n="light"===e.palette.type?Ge.e:Ge.a;return{root:Object(h.a)({},e.typography.body2,{borderRadius:e.shape.borderRadius,backgroundColor:"transparent",display:"flex",padding:"6px 16px"}),standardSuccess:{color:t(e.palette.success.main,.6),backgroundColor:n(e.palette.success.main,.9),"& $icon":{color:e.palette.success.main}},standardInfo:{color:t(e.palette.info.main,.6),backgroundColor:n(e.palette.info.main,.9),"& $icon":{color:e.palette.info.main}},standardWarning:{color:t(e.palette.warning.main,.6),backgroundColor:n(e.palette.warning.main,.9),"& $icon":{color:e.palette.warning.main}},standardError:{color:t(e.palette.error.main,.6),backgroundColor:n(e.palette.error.main,.9),"& $icon":{color:e.palette.error.main}},outlinedSuccess:{color:t(e.palette.success.main,.6),border:"1px solid ".concat(e.palette.success.main),"& $icon":{color:e.palette.success.main}},outlinedInfo:{color:t(e.palette.info.main,.6),border:"1px solid ".concat(e.palette.info.main),"& $icon":{color:e.palette.info.main}},outlinedWarning:{color:t(e.palette.warning.main,.6),border:"1px solid ".concat(e.palette.warning.main),"& $icon":{color:e.palette.warning.main}},outlinedError:{color:t(e.palette.error.main,.6),border:"1px solid ".concat(e.palette.error.main),"& $icon":{color:e.palette.error.main}},filledSuccess:{color:"#fff",fontWeight:e.typography.fontWeightMedium,backgroundColor:e.palette.success.main},filledInfo:{color:"#fff",fontWeight:e.typography.fontWeightMedium,backgroundColor:e.palette.info.main},filledWarning:{color:"#fff",fontWeight:e.typography.fontWeightMedium,backgroundColor:e.palette.warning.main},filledError:{color:"#fff",fontWeight:e.typography.fontWeightMedium,backgroundColor:e.palette.error.main},icon:{marginRight:12,padding:"7px 0",display:"flex",fontSize:22,opacity:.9},message:{padding:"8px 0"},action:{display:"flex",alignItems:"center",marginLeft:"auto",paddingLeft:16,marginRight:-8}}}),{name:"MuiAlert"})(ju),Pu=r.forwardRef((function(e,t){var n=e.children,o=e.classes,a=e.className,i=e.collapsedHeight,l=void 0===i?"0px":i,c=e.component,u=void 0===c?"div":c,s=e.disableStrictModeCompat,d=void 0!==s&&s,f=e.in,p=e.onEnter,m=e.onEntered,v=e.onEntering,b=e.onExit,g=e.onExited,y=e.onExiting,x=e.style,w=e.timeout,O=void 0===w?ai.b.standard:w,E=e.TransitionComponent,S=void 0===E?mn:E,k=Object(ze.a)(e,["children","classes","className","collapsedHeight","component","disableStrictModeCompat","in","onEnter","onEntered","onEntering","onExit","onExited","onExiting","style","timeout","TransitionComponent"]),j=Ot(),C=r.useRef(),P=r.useRef(null),T=r.useRef(),N="number"==typeof l?"".concat(l,"px"):l;r.useEffect((function(){return function(){clearTimeout(C.current)}}),[]);var R=j.unstable_strictMode&&!d,M=r.useRef(null),D=at(t,R?M:void 0),A=function(e){return function(t,n){if(e){var r=R?[M.current,t]:[t,n],o=Object(zt.a)(r,2),a=o[0],i=o[1];void 0===i?e(a):e(a,i)}}},I=A((function(e,t){e.style.height=N,p&&p(e,t)})),L=A((function(e,t){var n=P.current?P.current.clientHeight:0,r=vn({style:x,timeout:O},{mode:"enter"}).duration;if("auto"===O){var o=j.transitions.getAutoHeightDuration(n);e.style.transitionDuration="".concat(o,"ms"),T.current=o}else e.style.transitionDuration="string"==typeof r?r:"".concat(r,"ms");e.style.height="".concat(n,"px"),v&&v(e,t)})),_=A((function(e,t){e.style.height="auto",m&&m(e,t)})),z=A((function(e){var t=P.current?P.current.clientHeight:0;e.style.height="".concat(t,"px"),b&&b(e)})),F=A(g),W=A((function(e){var t=P.current?P.current.clientHeight:0,n=vn({style:x,timeout:O},{mode:"exit"}).duration;if("auto"===O){var r=j.transitions.getAutoHeightDuration(t);e.style.transitionDuration="".concat(r,"ms"),T.current=r}else e.style.transitionDuration="string"==typeof n?n:"".concat(n,"ms");e.style.height=N,y&&y(e)}));return r.createElement(S,Object(h.a)({in:f,onEnter:I,onEntered:_,onEntering:L,onExit:z,onExited:F,onExiting:W,addEndListener:function(e,t){var n=R?e:t;"auto"===O&&(C.current=setTimeout(n,T.current||0))},nodeRef:R?M:void 0,timeout:"auto"===O?null:O},k),(function(e,t){return r.createElement(u,Object(h.a)({className:Object(Fe.a)(o.container,a,{entered:o.entered,exited:!f&&"0px"===N&&o.hidden}[e]),style:Object(h.a)({minHeight:N},x),ref:D},t),r.createElement("div",{className:o.wrapper,ref:P},r.createElement("div",{className:o.wrapperInner},n)))}))}));Pu.muiSupportAuto=!0;var Tu=Object(We.a)((function(e){return{container:{height:0,overflow:"hidden",transition:e.transitions.create("height")},entered:{height:"auto",overflow:"visible"},hidden:{visibility:"hidden"},wrapper:{display:"flex"},wrapperInner:{width:"100%"}}}),{name:"MuiCollapse"})(Pu),Nu=n(88),Ru=n.n(Nu);function Mu(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(e)))return;var n=[],r=!0,o=!1,a=void 0;try{for(var i,l=e[Symbol.iterator]();!(r=(i=l.next()).done)&&(n.push(i.value),!t||n.length!==t);r=!0);}catch(e){o=!0,a=e}finally{try{r||null==l.return||l.return()}finally{if(o)throw a}}return n}(e,t)||function(e,t){if(!e)return;if("string"==typeof e)return Du(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return Du(e,t)}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Du(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var Au=_e((function(e){return{root:{position:"absolute",bottom:"1rem",right:"2rem",width:"60%","& > * + *":{marginTop:e.spacing(2)}}}}));function Iu(e){var t=Au(),n=Mu(o.a.useState(e.popup.status),2);n[0],n[1];return o.a.createElement("div",{className:t.root},o.a.createElement(Tu,{in:e.popup.status},o.a.createElement(Cu,{variant:"filled",severity:"success",action:o.a.createElement(Mr,{"aria-label":"close",color:"inherit",size:"small",onClick:function(){e.hanldeCloseAlert(!1)}},o.a.createElement(Ru.a,{fontSize:"inherit"}))},e.popup.text)))}function Lu(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(e)))return;var n=[],r=!0,o=!1,a=void 0;try{for(var i,l=e[Symbol.iterator]();!(r=(i=l.next()).done)&&(n.push(i.value),!t||n.length!==t);r=!0);}catch(e){o=!0,a=e}finally{try{r||null==l.return||l.return()}finally{if(o)throw a}}return n}(e,t)||function(e,t){if(!e)return;if("string"==typeof e)return _u(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return _u(e,t)}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function _u(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function zu(){return(zu=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function Fu(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}function Wu(e){var t=e.children,n=e.value,r=e.index,a=Fu(e,["children","value","index"]);return o.a.createElement("div",zu({role:"tabpanel",hidden:n!==r,id:"full-width-tabpanel-".concat(r),"aria-labelledby":"full-width-tab-".concat(r)},a),n===r&&o.a.createElement(Oa,{p:3},o.a.createElement(Ye,{component:"span",variant:"body2"},t)))}function Bu(e){return{id:"full-width-tab-".concat(e),"aria-controls":"full-width-tabpanel-".concat(e)}}Wu.propTypes={children:c.a.node,index:c.a.any.isRequired,value:c.a.any.isRequired};var Hu=_e((function(e){return{root:{backgroundColor:e.palette.background.paper,marginTop:"1rem",height:"100%"},form:{"& .MuiTextField-root":{marginBottom:e.spacing(1),width:"100%"}}}}));function Uu(e){var t=Hu(),n=Ot(),r=Lu(o.a.useState(0),2),a=r[0],i=r[1],l=Lu(o.a.useState(""),2),c=l[0],u=l[1],s=Lu(o.a.useState(""),2),d=s[0],f=s[1],p=Lu(o.a.useState(""),2),m=p[0],h=p[1],v=Lu(o.a.useState(""),2),b=v[0],g=v[1],y=Lu(o.a.useState(""),2),x=y[0],w=y[1];o.a.useEffect((function(){null!==e.token&&e.redirect("/")}));var O=function(e){u(e.target.value)},E=function(e){g(e.target.value)};return o.a.createElement(ql,{className:t.root,maxWidth:"xs"},o.a.createElement(On,{square:!0},o.a.createElement(Kl,{position:"static",color:"default"},o.a.createElement(uc,{value:a,onChange:function(e,t){i(t)},indicatorColor:"primary",textColor:"primary",variant:"fullWidth","aria-label":"full width tabs example"},o.a.createElement(dc,zu({label:"Авторизация"},Bu(0))),o.a.createElement(dc,zu({label:"Регистрация"},Bu(1))))),o.a.createElement(El.a,{axis:"rtl"===n.direction?"x-reverse":"x",index:a,onChangeIndex:function(e){i(e)}},o.a.createElement(Wu,{value:a,index:0,dir:n.direction},o.a.createElement("form",{className:t.form},o.a.createElement(ar,{id:"email",label:"Логин",variant:"outlined",fullWidth:!0,required:!0,size:"small",value:c,onChange:O}),o.a.createElement(ar,{id:"password",label:"Пароль",type:"password",variant:"outlined",fullWidth:!0,required:!0,size:"small",value:b,onChange:E}),o.a.createElement(La,{variant:"contained",color:"primary",fullWidth:!0,onClick:function(){b.length>0&&c.length>0&&e.handleLogin({email:c,password:b})}},"Вход"),o.a.createElement(La,{onClick:function(){return e.redirect("/")},variant:"contained",color:"secondary"},"Назад"))),o.a.createElement(Wu,{value:a,index:1,dir:n.direction},o.a.createElement("form",{className:t.form,action:"/",method:"POST",noValidate:!0},o.a.createElement(ar,{id:"firstName",label:"Имя",variant:"outlined",fullWidth:!0,required:!0,size:"small",value:d,onChange:function(e){f(e.target.value)}}),o.a.createElement(ar,{id:"lastName",label:"Фамилия",variant:"outlined",fullWidth:!0,required:!0,size:"small",value:m,onChange:function(e){h(e.target.value)}}),o.a.createElement(ar,{id:"email",label:"Почта",type:"email",variant:"outlined",fullWidth:!0,required:!0,size:"small",value:c,onChange:O}),o.a.createElement(ar,{id:"password",label:"Пароль",type:"password",variant:"outlined",fullWidth:!0,required:!0,size:"small",value:b,onChange:E}),o.a.createElement(ar,{id:"repassword",label:"Повторить пароль",type:"password",variant:"outlined",fullWidth:!0,required:!0,size:"small",value:x,onChange:function(e){w(e.target.value)}}),o.a.createElement(La,{variant:"contained",color:"primary",fullWidth:!0,onClick:function(){e.handleRegistration({email:c,firstName:d,lastName:m,password:b})}},"Регистрация"),o.a.createElement(La,{onClick:function(){return e.redirect("/")},variant:"contained",color:"secondary"},"Назад"))))))}function $u(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(e)))return;var n=[],r=!0,o=!1,a=void 0;try{for(var i,l=e[Symbol.iterator]();!(r=(i=l.next()).done)&&(n.push(i.value),!t||n.length!==t);r=!0);}catch(e){o=!0,a=e}finally{try{r||null==l.return||l.return()}finally{if(o)throw a}}return n}(e,t)||function(e,t){if(!e)return;if("string"==typeof e)return Vu(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return Vu(e,t)}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Vu(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function qu(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var Xu=_e((function(e){var t;return{main:qu({marginTop:40,position:"relative",width:"100%",boxSizing:"border-box"},e.breakpoints.up("sm"),{marginTop:64}),container:{display:"flex"},footer:(t={position:"relative",height:"50px",display:"flex",alignItems:"center",zIndex:1500,width:"100%"},qu(t,e.breakpoints.up("sm"),{"& p":{marginLeft:150}}),qu(t,"backgroundColor","#f5f5f5"),t),sectionDesktop:qu({display:"none"},e.breakpoints.up("sm"),{display:"flex"}),helper:{}}}));var Ku=function(e){return{type:"ALERT_CLOSE",payload:e}};function Yu(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function Gu(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Yu(Object(n),!0).forEach((function(t){Qu(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Yu(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function Qu(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var Ju={profileLoadAction:kc,profileChangeNameAction:jc,registrationAction:function(e){return{type:"REGISTRATION",payload:e}},alertLoadAction:function(){return{type:"ALERT_LOAD"}},alertCloseInformAction:function(e){return{type:"ALERT_CLOSE_INFORM",payload:e}},alertSendInformAction:function(e){return{type:"ALERT_ADD_INFORM",payload:e}},lessonsLoadAction:yc,selectLessonAction:function(e){return{type:"LESSON_SELECT",payload:e}},createLessonAction:function(e){return{type:"LESSON_CREATE",payload:e}},deleteLesonAction:xc,logoutAction:Ec,loginAction:Sc,redirect:Y,mobileDrawerStateLoadAction:function(){return{type:"MOBILE_DRAWER_STATE_LOAD"}},mobileDrawerStateSetAction:Oc,cartLoadAction:function(){return{type:"CART_LOAD"}},cartDeleteAction:function(){return{type:"CART_DELETE"}},cartAddAction:function(e){return{type:"CART_ADD",payload:e}},cartRemoveAction:function(e){return{type:"CART_REMOVE",payload:e}},initAction:function(){return{type:"INIT"}}};V.PropTypes={initAction:c.a.func.isRequired};var Zu=V((function(e){var t=e.alert.popup,n=e.header.mobileDrawer,r=e.profile,o=r.profile,a=r.token,i=e.lessons;return{popup:t,mobileDrawer:n,profile:o,lessonsList:i.lessonsList,lessonId:i.lessonId,cart:e.cart.cart,token:a}}),Ju,(function(e,t,n){var r=e.profile;return Gu(Gu(Gu({},e),t),{},{handleCreateLesson:function(e){t.createLessonAction({author:r,data:e})}})}))((function(e){var t=Xu(),n=$u(o.a.useState("eLearning"),2),a=n[0],i=(n[1],$u(o.a.useState(null),2));return i[0],i[1],o.a.useEffect((function(){e.initAction()}),[e.token]),o.a.createElement(r.Fragment,null,o.a.createElement(yu,{title:a}),o.a.createElement("div",{className:t.container},e.mobileDrawer?o.a.createElement(Zi,{redirect:e.redirect,handleMobileDrawerOpen:e.mobileDrawerStateSetAction,mobileDrawer:e.mobileDrawer}):null,o.a.createElement("main",{className:t.main},o.a.createElement(Ae,null,o.a.createElement(Pe,{path:"/",exact:!0},o.a.createElement(ja,null)),o.a.createElement(Pe,{path:"/lessons",exact:!0},o.a.createElement(Ko,{profile:e.profile,redirect:e.redirect,handleCartAdd:e.cartAddAction,lessonsList:e.lessonsList,handleDeleteItem:e.deleteLesonAction,handleSelectLesson:e.selectLessonAction})),o.a.createElement(Pe,{path:"/login",exact:!0},o.a.createElement(Uu,{handleRegistration:e.registrationAction,redirect:e.redirect,token:e.token,handleLogin:e.loginAction})),o.a.createElement(Pe,{path:"/lesson/:id",exact:!0},o.a.createElement(wc,null)),o.a.createElement(Pe,{path:"/createLesson",exact:!0},o.a.createElement(Ka,{handleCreateLesson:e.handleCreateLesson,redirect:e.redirect})),o.a.createElement(Pe,{path:"/cabinet",exact:!0},o.a.createElement(wl,{profile:e.profile})),o.a.createElement(Pe,{path:"/cart",exact:!0},o.a.createElement(yl,{cart:e.cart,handleCartPlusItem:e.cartPlusItemAction,handleCartMinusItem:e.cartMinusItemAction,handleCartRemoveItem:e.cartRemoveAction,hanldeCartDelete:e.cartDeleteAction})),o.a.createElement(Pe,{path:"*"},o.a.createElement("h2",null,"Error"))),o.a.createElement(Iu,{popup:e.popup,hanldeCloseAlert:e.alertCloseInformAction}))))}));function es(e){return(es="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function ts(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function ns(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function rs(e,t){return!t||"object"!==es(t)&&"function"!=typeof t?as(e):t}function os(e){return(os=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function as(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function is(e,t){return(is=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function ls(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var cs=function(e){function t(){var e,n;ts(this,t);for(var r=arguments.length,o=new Array(r),a=0;a<r;a++)o[a]=arguments[a];return ls(as(n=rs(this,(e=os(t)).call.apply(e,[this].concat(o)))),"state",{bootstrapped:!1}),ls(as(n),"_unsubscribe",void 0),ls(as(n),"handlePersistorState",(function(){n.props.persistor.getState().bootstrapped&&(n.props.onBeforeLift?Promise.resolve(n.props.onBeforeLift()).finally((function(){return n.setState({bootstrapped:!0})})):n.setState({bootstrapped:!0}),n._unsubscribe&&n._unsubscribe())})),n}var n,r,o;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&is(e,t)}(t,e),n=t,(r=[{key:"componentDidMount",value:function(){this._unsubscribe=this.props.persistor.subscribe(this.handlePersistorState),this.handlePersistorState()}},{key:"componentWillUnmount",value:function(){this._unsubscribe&&this._unsubscribe()}},{key:"render",value:function(){return"function"==typeof this.props.children?this.props.children(this.state.bootstrapped):this.state.bootstrapped?this.props.children:this.props.loading}}])&&ns(n.prototype,r),o&&ns(n,o),t}(r.PureComponent);ls(cs,"defaultProps",{children:null,loading:null});var us=n(89);function ss(e){return(ss="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}var ds=function(e){var t=e.getIn,n=e.toJS,r=function(e){var r,o=n(t(e,["router"]));if(null==(r=o)||"object"!==ss(r)||!t(r,["location"])||!t(r,["action"]))throw'Could not find router reducer in state tree, it must be mounted under "router"';return o},o=function(e){return n(t(r(e),["location"]))};return{getLocation:o,getAction:function(e){return n(t(r(e),["action"]))},getRouter:r,getSearch:function(e){return n(t(r(e),["location","search"]))},getHash:function(e){return n(t(r(e),["location","hash"]))},createMatchSelector:function(e){var t=null,n=null;return function(r){var a=(o(r)||{}).pathname;if(a===t)return n;t=a;var i=Ce(a,e);return i&&n&&i.url===n.url&&i.isExact===n.isExact||(n=i),n}}}};function fs(e){return(fs="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function ps(){return(ps=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function ms(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function hs(e,t){return!t||"object"!==fs(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function vs(e){return(vs=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function bs(e,t){return(bs=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function gs(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if(!(Symbol.iterator in Object(e))&&"[object Arguments]"!==Object.prototype.toString.call(e))return;var n=[],r=!0,o=!1,a=void 0;try{for(var i,l=e[Symbol.iterator]();!(r=(i=l.next()).done)&&(n.push(i.value),!t||n.length!==t);r=!0);}catch(e){o=!0,a=e}finally{try{r||null==l.return||l.return()}finally{if(o)throw a}}return n}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}function ys(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function xs(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?ys(Object(n),!0).forEach((function(t){ws(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):ys(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function ws(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var Os=function(e){if(e&&e.query)return e;var t=e&&e.search;if("string"!=typeof t||0===t.length)return xs({},e,{query:{}});var n=t.substring(1).split("&").reduce((function(e,t){var n=gs(t.split("="),2);return xs({},e,ws({},n[0],n[1]))}),{});return xs({},e,{query:n})},Es=function(e){var t=e.fromJS,n=e.merge;return function(e){var r=t({location:Os(e.location),action:e.action});return function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:r,o=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},a=o.type,i=o.payload;if(a===X){var l=i.location,c=i.action,u=i.isFirstRendering;return u?e:n(e,{location:t(Os(l)),action:c})}return e}}};function Ss(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function ks(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var js={fromJS:function(e){return e},getIn:function(e,t){if(!e)return e;var n=t.length;if(n){for(var r=e,o=0;o<n&&r;++o)r=r[t[o]];return r}},merge:function(e,t){return function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Ss(Object(n),!0).forEach((function(t){ks(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Ss(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}({},e,{},t)},toJS:function(e){return e}},Cs=function(e){var t=ds(e).getLocation,n=function(e){function n(e){var r;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,n),r=hs(this,vs(n).call(this,e));var o=e.store,a=e.history,i=e.onLocationChanged;r.inTimeTravelling=!1,r.unsubscribe=o.subscribe((function(){var n=t(o.getState()),i=n.pathname,l=n.search,c=n.hash,u=n.state,s=a.location,d=s.pathname,f=s.search,p=s.hash,m=s.state;"PUSH"!==e.history.action||d===i&&f===l&&p===c&&u===m||(r.inTimeTravelling=!0,a.push({pathname:i,search:l,hash:c,state:u}))}));var l=function(e,t){var n=arguments.length>2&&void 0!==arguments[2]&&arguments[2];r.inTimeTravelling?r.inTimeTravelling=!1:i(e,t,n)};return r.unlisten=a.listen(l),e.noInitialPop||l(a.location,a.action,!0),r}var r,a,i;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&bs(e,t)}(n,e),r=n,(a=[{key:"componentWillUnmount",value:function(){this.unlisten(),this.unsubscribe()}},{key:"render",value:function(){var e=this.props,t=e.history,n=e.children;return o.a.createElement(Se,{history:t},n)}}])&&ms(r.prototype,a),i&&ms(r,i),n}(r.PureComponent);n.propTypes={store:c.a.shape({getState:c.a.func.isRequired,subscribe:c.a.func.isRequired}).isRequired,history:c.a.shape({action:c.a.string.isRequired,listen:c.a.func.isRequired,location:c.a.object.isRequired,push:c.a.func.isRequired}).isRequired,basename:c.a.string,children:c.a.oneOfType([c.a.func,c.a.node]),onLocationChanged:c.a.func.isRequired,noInitialPop:c.a.bool};var a=function(e){var t=e.context||u;if(null==t)throw"Please upgrade to react-redux v6";return o.a.createElement(t.Consumer,null,(function(t){var r=t.store;return o.a.createElement(n,ps({store:r},e))}))};return a.propTypes={context:c.a.object},V(null,(function(e){return{onLocationChanged:function(t,n,r){return e(function(e,t){var n=arguments.length>2&&void 0!==arguments[2]&&arguments[2];return{type:X,payload:{location:e,action:t,isFirstRendering:n}}}(t,n,r))}}}))(a)}(js),Ps=Es(js),Ts=ds(js);Ts.getLocation,Ts.getAction,Ts.getHash,Ts.getSearch,Ts.createMatchSelector;function Ns(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function Rs(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Ns(Object(n),!0).forEach((function(t){Ms(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Ns(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function Ms(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var Ds={profile:{},token:null},As=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:Ds,t=arguments.length>1?arguments[1]:void 0;switch(t.type){case"PROFILE_LOAD":return Rs(Rs({},e),{},{profile:Wo});case"PROFILE_CHANGE_NAME":return Rs(Rs({},e),{},{profile:Rs(Rs({},e.profile),{},{firstName:void 0===t.payload.firstName?e.profile.firstName:t.payload.firstName,lastName:void 0===t.payload.lastName?e.profile.lastName:t.payload.lastName})});case"LOGOUT":return Rs(Rs({},e),{},{token:null});case"LOGIN":return Rs(Rs({},e),{},{token:t.payload.token});case"REGISTRATION":return Rs(Rs({},e),{},{profile:Rs({},t.payload)});default:return e}};function Is(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function Ls(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Is(Object(n),!0).forEach((function(t){_s(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Is(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function _s(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var zs={popup:[]},Fs=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:zs,t=arguments.length>1?arguments[1]:void 0;switch(t.type){case"ALERT_LOAD":return Ls(Ls({},e),{},{popup:{text:"",status:!1,type:"",id:"",isSelect:!1}});case"ALERT_SEND":return Ls(Ls({},e),{},{popup:t.payload});case"ALERT_CLOSE":return Ls(Ls({},e),{},{popup:{text:"",status:!1,type:"",id:"",isSelect:!1}});default:return e}},Ws=new Fo.AvatarGenerator,Bs={Ukm7SJ:{id:"Ukm7SJ",title:"Урок 1",rating:1,content:"Ничего не понятно но очень интернесно",cover:Ws.generateRandomAvatar(),category:"Прочее",price:31,author:"userId",reviews:[],qustions:[]},dk3t0m:{id:"dk3t0m",title:"Урок 2",rating:4,content:"Ничего не понятно но очень интернесно",cover:Ws.generateRandomAvatar(),category:"Прочее",price:71,author:"userId",reviews:[],qustions:[]},fv1hud:{id:"fv1hud",title:"Урок 3",rating:4,content:"Ничего не понятно но очень интернесно",cover:Ws.generateRandomAvatar(),category:"Прочее",price:0,author:"userId",reviews:[],qustions:[]},tiqD0R:{id:"tiqD0R",title:"Урок 4",rating:5,content:"Ничего не понятно но очень интернесно",cover:Ws.generateRandomAvatar(),category:"Прочее",price:151,author:"userId",reviews:[],qustions:[]}};function Hs(e){return(Hs="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function Us(e){return function(e){if(Array.isArray(e))return $s(e)}(e)||function(e){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(e))return Array.from(e)}(e)||function(e,t){if(!e)return;if("string"==typeof e)return $s(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return $s(e,t)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function $s(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function Vs(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}function qs(e){var t=function(e,t){if("object"!==Hs(e)||null===e)return e;var n=e[Symbol.toPrimitive];if(void 0!==n){var r=n.call(e,t||"default");if("object"!==Hs(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===t?String:Number)(e)}(e,"string");return"symbol"===Hs(t)?t:String(t)}function Xs(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function Ks(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Xs(Object(n),!0).forEach((function(t){Ys(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Xs(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function Ys(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var Gs={lessonsList:{},lessonId:""},Qs=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:Gs,t=arguments.length>1?arguments[1]:void 0;switch(t.type){case"LESSON_LOAD":return Ks(Ks({},e),{},{lessonsList:Bs});case"LESSON_CREATE":return console.log(t.payload),Ks(Ks({},e),{},{lessonsList:Ks(Ks({},e.lessonsList),{},Ys({},t.payload.data.id,Ks(Ks({},t.payload.data),{},{author:t.payload.author.firstName+" "+t.payload.author.lastName}))),lessonId:t.payload.data.id});case"LESSON_SELECT":return Ks(Ks({},e),{},{lessonId:t.payload});case"LESSON_DELETE":var n=e.lessonsList,r=t.payload,o=(n[r],Vs(n,[r].map(qs)));return Ks(Ks({},e),{},{lessonsList:o});case"REVIEW_ADD":return Ks(Ks({},e),{},{lessonsList:Ks(Ks({},e.lessonsList),{},Ys({},t.payload.id,Ks(Ks({},e.lessonsList[t.payload.id]),{},{reviews:[].concat(Us(e.lessonsList[t.payload.id].reviews),[t.payload.review])})))});case"REMOVE_REVIEW":var a=e.lessonsList[t.payload.lessonId].reviews.filter((function(e){return e.id!==t.payload.reviewId}));return Ks(Ks({},e),{},{lessonsList:Ks(Ks({},e.lessonsList),{},Ys({},t.payload.lessonId,Ks(Ks({},e.lessonsList[t.payload.lessonId]),{},{reviews:a})))});default:return e}};function Js(e){return(Js="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function Zs(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}function ed(e){var t=function(e,t){if("object"!==Js(e)||null===e)return e;var n=e[Symbol.toPrimitive];if(void 0!==n){var r=n.call(e,t||"default");if("object"!==Js(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===t?String:Number)(e)}(e,"string");return"symbol"===Js(t)?t:String(t)}function td(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function nd(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?td(Object(n),!0).forEach((function(t){rd(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):td(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function rd(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var od={cart:{}},ad=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:od,t=arguments.length>1?arguments[1]:void 0;switch(t.type){case"CART_LOAD":return nd(nd({},e),{},{cart:n});case"CART_ADD":return nd(nd({},e),{},{cart:nd(nd({},e.cart),{},rd({},t.payload.id,nd(nd({},e.cart[t.payload.id]),t.payload)))});case"CART_REMOVE":var n=e.cart,r=t.payload,o=(n[r],Zs(n,[r].map(ed)));return nd(nd({},e),{},{cart:o});case"CART_DELETE":return nd(nd({},e),{},{cart:[]});default:return e}};function id(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function ld(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?id(Object(n),!0).forEach((function(t){cd(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):id(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function cd(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var ud={mobileDrawer:!1},sd=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:ud,t=arguments.length>1?arguments[1]:void 0;switch(t.type){case"MOBILE_DRAWER_STATE_LOAD":return ld(ld({},e),{},{mobileDrawer:mobileDrawer});case"MOBILE_DRAWER_STATE_SET":return ld(ld({},e),{},{mobileDrawer:!e.mobileDrawer});default:return e}};function dd(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function fd(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?dd(Object(n),!0).forEach((function(t){pd(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):dd(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function pd(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var md={},hd=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:md,t=arguments.length>1?arguments[1]:void 0;switch(t.type){case"INIT":return fd({},e);default:return e}},vd=n(90),bd=n.n(vd),gd=n(91),yd=n.n(gd),xd="persist/REHYDRATE",wd="persist/REGISTER";function Od(e){return(Od="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function Ed(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function Sd(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function kd(e,t,n,r){r.debug;var o=function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Ed(n,!0).forEach((function(t){Sd(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Ed(n).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}({},n);return e&&"object"===Od(e)&&Object.keys(e).forEach((function(r){"_persist"!==r&&t[r]===n[r]&&(o[r]=e[r])})),o}function jd(e){var t,n=e.blacklist||null,r=e.whitelist||null,o=e.transforms||[],a=e.throttle||0,i="".concat(void 0!==e.keyPrefix?e.keyPrefix:"persist:").concat(e.key),l=e.storage;t=!1===e.serialize?function(e){return e}:"function"==typeof e.serialize?e.serialize:Cd;var c=e.writeFailHandler||null,u={},s={},d=[],f=null,p=null;function m(){if(0===d.length)return f&&clearInterval(f),void(f=null);var e=d.shift(),n=o.reduce((function(t,n){return n.in(t,e,u)}),u[e]);if(void 0!==n)try{s[e]=t(n)}catch(e){console.error("redux-persist/createPersistoid: error serializing state",e)}else delete s[e];0===d.length&&(Object.keys(s).forEach((function(e){void 0===u[e]&&delete s[e]})),p=l.setItem(i,t(s)).catch(v))}function h(e){return(!r||-1!==r.indexOf(e)||"_persist"===e)&&(!n||-1===n.indexOf(e))}function v(e){c&&c(e)}return{update:function(e){Object.keys(e).forEach((function(t){h(t)&&u[t]!==e[t]&&-1===d.indexOf(t)&&d.push(t)})),Object.keys(u).forEach((function(t){void 0===e[t]&&h(t)&&-1===d.indexOf(t)&&void 0!==u[t]&&d.push(t)})),null===f&&(f=setInterval(m,a)),u=e},flush:function(){for(;0!==d.length;)m();return p||Promise.resolve()}}}function Cd(e){return JSON.stringify(e)}function Pd(e){var t,n=e.transforms||[],r="".concat(void 0!==e.keyPrefix?e.keyPrefix:"persist:").concat(e.key),o=e.storage;e.debug;return t=!1===e.deserialize?function(e){return e}:"function"==typeof e.deserialize?e.deserialize:Td,o.getItem(r).then((function(e){if(e)try{var r={},o=t(e);return Object.keys(o).forEach((function(e){r[e]=n.reduceRight((function(t,n){return n.out(t,e,o)}),t(o[e]))})),r}catch(e){throw e}}))}function Td(e){return JSON.parse(e)}function Nd(e){0}function Rd(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function Md(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Rd(n,!0).forEach((function(t){Dd(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Rd(n).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function Dd(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function Ad(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}function Id(e,t){var n=void 0!==e.version?e.version:-1,r=(e.debug,void 0===e.stateReconciler?kd:e.stateReconciler),o=e.getStoredState||Pd,a=void 0!==e.timeout?e.timeout:5e3,i=null,l=!1,c=!0,u=function(e){return e._persist.rehydrated&&i&&!c&&i.update(e),e};return function(s,d){var f=s||{},p=f._persist,m=Ad(f,["_persist"]);if("persist/PERSIST"===d.type){var h=!1,v=function(t,n){h||(d.rehydrate(e.key,t,n),h=!0)};if(a&&setTimeout((function(){!h&&v(void 0,new Error('redux-persist: persist timed out for persist key "'.concat(e.key,'"')))}),a),c=!1,i||(i=jd(e)),p)return Md({},t(m,d),{_persist:p});if("function"!=typeof d.rehydrate||"function"!=typeof d.register)throw new Error("redux-persist: either rehydrate or register is not a function on the PERSIST action. This can happen if the action is being replayed. This is an unexplored use case, please open an issue and we will figure out a resolution.");return d.register(e.key),o(e).then((function(t){(e.migrate||function(e,t){return Promise.resolve(e)})(t,n).then((function(e){v(e)}),(function(e){v(void 0,e)}))}),(function(e){v(void 0,e)})),Md({},t(m,d),{_persist:{version:n,rehydrated:!1}})}if("persist/PURGE"===d.type)return l=!0,d.result(function(e){var t=e.storage,n="".concat(void 0!==e.keyPrefix?e.keyPrefix:"persist:").concat(e.key);return t.removeItem(n,Nd)}(e)),Md({},t(m,d),{_persist:p});if("persist/FLUSH"===d.type)return d.result(i&&i.flush()),Md({},t(m,d),{_persist:p});if("persist/PAUSE"===d.type)c=!0;else if(d.type===xd){if(l)return Md({},m,{_persist:Md({},p,{rehydrated:!0})});if(d.key===e.key){var b=t(m,d),g=d.payload,y=Md({},!1!==r&&void 0!==g?r(g,s,b,e):b,{_persist:Md({},p,{rehydrated:!0})});return u(y)}}if(!p)return t(s,d);var x=t(m,d);return x===m?s:u(Md({},x,{_persist:p}))}}function Ld(e){return function(e){if(Array.isArray(e)){for(var t=0,n=new Array(e.length);t<e.length;t++)n[t]=e[t];return n}}(e)||function(e){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e))return Array.from(e)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}function _d(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function zd(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?_d(n,!0).forEach((function(t){Fd(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):_d(n).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function Fd(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var Wd={registry:[],bootstrapped:!1},Bd=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:Wd,t=arguments.length>1?arguments[1]:void 0;switch(t.type){case wd:return zd({},e,{registry:[].concat(Ld(e.registry),[t.key])});case xd:var n=e.registry.indexOf(t.key),r=Ld(e.registry);return r.splice(n,1),zd({},e,{registry:r,bootstrapped:0===r.length});default:return e}};function Hd(e){return function(e){if(Array.isArray(e)){for(var t=0,n=new Array(e.length);t<e.length;t++)n[t]=e[t];return n}}(e)||function(e){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e))return Array.from(e)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}var Ud=function(e){return function(t){return function(t){return function(n){if("@@router/CALL_HISTORY_METHOD"!==n.type)return t(n);var r=n.payload,o=r.method,a=r.args;e[o].apply(e,Hd(a))}}}};function $d(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function Vd(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?$d(Object(n),!0).forEach((function(t){qd(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):$d(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function qd(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var Xd,Kd,Yd,Gd=function(e){return function(t){return function(n){if("REGISTRATION"===n.type){var r=n.payload;r.password===r.rePassword&&e.dispatch(Sc(n.payload))}if("LOGIN"===n.type){if(0===n.payload.email.length||0===n.payload.password.length)return;e.dispatch({type:"PROFILE_LOAD"});var o=e.getState();if(n.payload.email!==o.profile.profile.email)return;n.payload=Vd(Vd({},n.payload),{},{token:"12123"})}return t(n)}}},Qd=0,Jd=function(e){return function(t){return function(n){if("ALERT_ADD_INFORM"===n.type){var r=n.payload,o=r.value,a=r.type,i=r.isSelect,l=r.messageId,c={error:"error",warning:"warning",inform:"inform"}[a]||"inform";e.dispatch({type:"ALERT_SEND",payload:{text:o,status:!0,type:c,id:l,isSelect:i}}),n.payload.isSelect||(clearTimeout(Qd),Qd=setTimeout((function(){e.dispatch(Ku(!1))}),4e3))}return"ALERT_CLOSE_INFORM"===n.type&&e.dispatch(Ku(n.payload)),t(n)}}},Zd=function(e){return function(t){return function(n){if("INIT"===n.type){var r=e.getState();Object.keys(r.profile.profile).length&&Object.keys(r.lessons.lessonsList).length||e.dispatch({type:"LESSON_LOAD"})}return t(n)}}},ef=de(),tf={key:"app",storage:yd.a,whitelist:["init","lessons","profile"]},nf=(n(149),Kd=Object(R.createStore)(Id(tf,(Xd=ef,Object(R.combineReducers)({profile:As,alert:Fs,lessons:Qs,header:sd,cart:ad,init:hd,router:Ps(Xd)}))),{},Object(us.composeWithDevTools)(Object(R.applyMiddleware)(bd.a,Zd,Gd,Ud(ef),Jd))),Yd=function(e,t,n){var r=n||!1,o=Object(R.createStore)(Bd,Wd,t&&t.enhancer?t.enhancer:void 0),a=function(e){o.dispatch({type:wd,key:e})},i=function(t,n,a){var i={type:xd,payload:n,err:a,key:t};e.dispatch(i),o.dispatch(i),r&&l.getState().bootstrapped&&(r(),r=!1)},l=zd({},o,{purge:function(){var t=[];return e.dispatch({type:"persist/PURGE",result:function(e){t.push(e)}}),Promise.all(t)},flush:function(){var t=[];return e.dispatch({type:"persist/FLUSH",result:function(e){t.push(e)}}),Promise.all(t)},pause:function(){e.dispatch({type:"persist/PAUSE"})},persist:function(){e.dispatch({type:"persist/PERSIST",register:a,rehydrate:i})}});return t&&t.manualPersist||l.persist(),l}(Kd),{store:Kd,persistor:Yd}),rf=nf.store,of=nf.persistor;i.a.render(o.a.createElement(m,{store:rf},o.a.createElement(cs,{persistor:of},o.a.createElement(Cs,{history:ef},o.a.createElement(Zu,null)))),document.getElementById("root"))},function(e,t,n){"use strict";n.d(t,"a",(function(){return i}));var r=n(1),o=n(28);function a(e){return e&&"object"===Object(o.a)(e)&&e.constructor===Object}function i(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{clone:!0},o=n.clone?Object(r.a)({},e):e;return a(e)&&a(t)&&Object.keys(t).forEach((function(r){"__proto__"!==r&&(a(t[r])&&r in e?o[r]=i(e[r],t[r],n):o[r]=t[r])})),o}},,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,function(e,t,n){"use strict";n.d(t,"a",(function(){return o}));var r=n(1);function o(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e.baseClasses,n=e.newClasses;e.Component;if(!n)return t;var o=Object(r.a)({},t);return Object.keys(n).forEach((function(e){n[e]&&(o[e]="".concat(t[e]," ").concat(n[e]))})),o}},function(e,t,n){"use strict";function r(e){var t=e.theme,n=e.name,r=e.props;if(!t||!t.props||!t.props[n])return r;var o,a=t.props[n];for(o in a)void 0===r[o]&&(r[o]=a[o]);return r}n.d(t,"a",(function(){return r}))},function(e,t,n){"use strict";n.d(t,"a",(function(){return fn}));var r=n(2),o=n(1),a=n(0),i=n.n(a),l="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},c="object"===("undefined"==typeof window?"undefined":l(window))&&"object"===("undefined"==typeof document?"undefined":l(document))&&9===document.nodeType,u=(n(26),n(37)),s=n(12),d=n(39),f=n(11),p={}.constructor;function m(e){if(null==e||"object"!=typeof e)return e;if(Array.isArray(e))return e.map(m);if(e.constructor!==p)return e;var t={};for(var n in e)t[n]=m(e[n]);return t}function h(e,t,n){void 0===e&&(e="unnamed");var r=n.jss,o=m(t),a=r.plugins.onCreateRule(e,o,n);return a||(e[0],null)}var v=function(e,t){for(var n="",r=0;r<e.length&&"!important"!==e[r];r++)n&&(n+=t),n+=e[r];return n};function b(e,t){if(void 0===t&&(t=!1),!Array.isArray(e))return e;var n="";if(Array.isArray(e[0]))for(var r=0;r<e.length&&"!important"!==e[r];r++)n&&(n+=", "),n+=v(e[r]," ");else n=v(e,", ");return t||"!important"!==e[e.length-1]||(n+=" !important"),n}function g(e,t){for(var n="",r=0;r<t;r++)n+="  ";return n+e}function y(e,t,n){void 0===n&&(n={});var r="";if(!t)return r;var o=n.indent,a=void 0===o?0:o,i=t.fallbacks;if(e&&a++,i)if(Array.isArray(i))for(var l=0;l<i.length;l++){var c=i[l];for(var u in c){var s=c[u];null!=s&&(r&&(r+="\n"),r+=""+g(u+": "+b(s)+";",a))}}else for(var d in i){var f=i[d];null!=f&&(r&&(r+="\n"),r+=""+g(d+": "+b(f)+";",a))}for(var p in t){var m=t[p];null!=m&&"fallbacks"!==p&&(r&&(r+="\n"),r+=""+g(p+": "+b(m)+";",a))}return(r||n.allowEmpty)&&e?(r&&(r="\n"+r+"\n"),g(e+" {"+r,--a)+g("}",a)):r}var x=/([[\].#*$><+~=|^:(),"'`\s])/g,w="undefined"!=typeof CSS&&CSS.escape,O=function(e){return w?w(e):e.replace(x,"\\$1")},E=function(){function e(e,t,n){this.type="style",this.key=void 0,this.isProcessed=!1,this.style=void 0,this.renderer=void 0,this.renderable=void 0,this.options=void 0;var r=n.sheet,o=n.Renderer;this.key=e,this.options=n,this.style=t,r?this.renderer=r.renderer:o&&(this.renderer=new o)}return e.prototype.prop=function(e,t,n){if(void 0===t)return this.style[e];var r=!!n&&n.force;if(!r&&this.style[e]===t)return this;var o=t;n&&!1===n.process||(o=this.options.jss.plugins.onChangeValue(t,e,this));var a=null==o||!1===o,i=e in this.style;if(a&&!i&&!r)return this;var l=a&&i;if(l?delete this.style[e]:this.style[e]=o,this.renderable&&this.renderer)return l?this.renderer.removeProperty(this.renderable,e):this.renderer.setProperty(this.renderable,e,o),this;var c=this.options.sheet;return c&&c.attached,this},e}(),S=function(e){function t(t,n,r){var o;(o=e.call(this,t,n,r)||this).selectorText=void 0,o.id=void 0,o.renderable=void 0;var a=r.selector,i=r.scoped,l=r.sheet,c=r.generateId;return a?o.selectorText=a:!1!==i&&(o.id=c(Object(d.a)(Object(d.a)(o)),l),o.selectorText="."+O(o.id)),o}Object(s.a)(t,e);var n=t.prototype;return n.applyTo=function(e){var t=this.renderer;if(t){var n=this.toJSON();for(var r in n)t.setProperty(e,r,n[r])}return this},n.toJSON=function(){var e={};for(var t in this.style){var n=this.style[t];"object"!=typeof n?e[t]=n:Array.isArray(n)&&(e[t]=b(n))}return e},n.toString=function(e){var t=this.options.sheet,n=!!t&&t.options.link?Object(o.a)({},e,{allowEmpty:!0}):e;return y(this.selectorText,this.style,n)},Object(u.a)(t,[{key:"selector",set:function(e){if(e!==this.selectorText){this.selectorText=e;var t=this.renderer,n=this.renderable;if(n&&t)t.setSelector(n,e)||t.replaceRule(n,this)}},get:function(){return this.selectorText}}]),t}(E),k={onCreateRule:function(e,t,n){return"@"===e[0]||n.parent&&"keyframes"===n.parent.type?null:new S(e,t,n)}},j={indent:1,children:!0},C=/@([\w-]+)/,P=function(){function e(e,t,n){this.type="conditional",this.at=void 0,this.key=void 0,this.query=void 0,this.rules=void 0,this.options=void 0,this.isProcessed=!1,this.renderable=void 0,this.key=e,this.query=n.name;var r=e.match(C);for(var a in this.at=r?r[1]:"unknown",this.options=n,this.rules=new Q(Object(o.a)({},n,{parent:this})),t)this.rules.add(a,t[a]);this.rules.process()}var t=e.prototype;return t.getRule=function(e){return this.rules.get(e)},t.indexOf=function(e){return this.rules.indexOf(e)},t.addRule=function(e,t,n){var r=this.rules.add(e,t,n);return r?(this.options.jss.plugins.onProcessRule(r),r):null},t.toString=function(e){if(void 0===e&&(e=j),null==e.indent&&(e.indent=j.indent),null==e.children&&(e.children=j.children),!1===e.children)return this.query+" {}";var t=this.rules.toString(e);return t?this.query+" {\n"+t+"\n}":""},e}(),T=/@media|@supports\s+/,N={onCreateRule:function(e,t,n){return T.test(e)?new P(e,t,n):null}},R={indent:1,children:!0},M=/@keyframes\s+([\w-]+)/,D=function(){function e(e,t,n){this.type="keyframes",this.at="@keyframes",this.key=void 0,this.name=void 0,this.id=void 0,this.rules=void 0,this.options=void 0,this.isProcessed=!1,this.renderable=void 0;var r=e.match(M);r&&r[1]?this.name=r[1]:this.name="noname",this.key=this.type+"-"+this.name,this.options=n;var a=n.scoped,i=n.sheet,l=n.generateId;for(var c in this.id=!1===a?this.name:O(l(this,i)),this.rules=new Q(Object(o.a)({},n,{parent:this})),t)this.rules.add(c,t[c],Object(o.a)({},n,{parent:this}));this.rules.process()}return e.prototype.toString=function(e){if(void 0===e&&(e=R),null==e.indent&&(e.indent=R.indent),null==e.children&&(e.children=R.children),!1===e.children)return this.at+" "+this.id+" {}";var t=this.rules.toString(e);return t&&(t="\n"+t+"\n"),this.at+" "+this.id+" {"+t+"}"},e}(),A=/@keyframes\s+/,I=/\$([\w-]+)/g,L=function(e,t){return"string"==typeof e?e.replace(I,(function(e,n){return n in t?t[n]:e})):e},_=function(e,t,n){var r=e[t],o=L(r,n);o!==r&&(e[t]=o)},z={onCreateRule:function(e,t,n){return"string"==typeof e&&A.test(e)?new D(e,t,n):null},onProcessStyle:function(e,t,n){return"style"===t.type&&n?("animation-name"in e&&_(e,"animation-name",n.keyframes),"animation"in e&&_(e,"animation",n.keyframes),e):e},onChangeValue:function(e,t,n){var r=n.options.sheet;if(!r)return e;switch(t){case"animation":case"animation-name":return L(e,r.keyframes);default:return e}}},F=function(e){function t(){for(var t,n=arguments.length,r=new Array(n),o=0;o<n;o++)r[o]=arguments[o];return(t=e.call.apply(e,[this].concat(r))||this).renderable=void 0,t}return Object(s.a)(t,e),t.prototype.toString=function(e){var t=this.options.sheet,n=!!t&&t.options.link?Object(o.a)({},e,{allowEmpty:!0}):e;return y(this.key,this.style,n)},t}(E),W={onCreateRule:function(e,t,n){return n.parent&&"keyframes"===n.parent.type?new F(e,t,n):null}},B=function(){function e(e,t,n){this.type="font-face",this.at="@font-face",this.key=void 0,this.style=void 0,this.options=void 0,this.isProcessed=!1,this.renderable=void 0,this.key=e,this.style=t,this.options=n}return e.prototype.toString=function(e){if(Array.isArray(this.style)){for(var t="",n=0;n<this.style.length;n++)t+=y(this.at,this.style[n]),this.style[n+1]&&(t+="\n");return t}return y(this.at,this.style,e)},e}(),H=/@font-face/,U={onCreateRule:function(e,t,n){return H.test(e)?new B(e,t,n):null}},$=function(){function e(e,t,n){this.type="viewport",this.at="@viewport",this.key=void 0,this.style=void 0,this.options=void 0,this.isProcessed=!1,this.renderable=void 0,this.key=e,this.style=t,this.options=n}return e.prototype.toString=function(e){return y(this.key,this.style,e)},e}(),V={onCreateRule:function(e,t,n){return"@viewport"===e||"@-ms-viewport"===e?new $(e,t,n):null}},q=function(){function e(e,t,n){this.type="simple",this.key=void 0,this.value=void 0,this.options=void 0,this.isProcessed=!1,this.renderable=void 0,this.key=e,this.value=t,this.options=n}return e.prototype.toString=function(e){if(Array.isArray(this.value)){for(var t="",n=0;n<this.value.length;n++)t+=this.key+" "+this.value[n]+";",this.value[n+1]&&(t+="\n");return t}return this.key+" "+this.value+";"},e}(),X={"@charset":!0,"@import":!0,"@namespace":!0},K=[k,N,z,W,U,V,{onCreateRule:function(e,t,n){return e in X?new q(e,t,n):null}}],Y={process:!0},G={force:!0,process:!0},Q=function(){function e(e){this.map={},this.raw={},this.index=[],this.counter=0,this.options=void 0,this.classes=void 0,this.keyframes=void 0,this.options=e,this.classes=e.classes,this.keyframes=e.keyframes}var t=e.prototype;return t.add=function(e,t,n){var r=this.options,a=r.parent,i=r.sheet,l=r.jss,c=r.Renderer,u=r.generateId,s=r.scoped,d=Object(o.a)({classes:this.classes,parent:a,sheet:i,jss:l,Renderer:c,generateId:u,scoped:s,name:e,keyframes:this.keyframes,selector:void 0},n),f=e;e in this.raw&&(f=e+"-d"+this.counter++),this.raw[f]=t,f in this.classes&&(d.selector="."+O(this.classes[f]));var p=h(f,t,d);if(!p)return null;this.register(p);var m=void 0===d.index?this.index.length:d.index;return this.index.splice(m,0,p),p},t.get=function(e){return this.map[e]},t.remove=function(e){this.unregister(e),delete this.raw[e.key],this.index.splice(this.index.indexOf(e),1)},t.indexOf=function(e){return this.index.indexOf(e)},t.process=function(){var e=this.options.jss.plugins;this.index.slice(0).forEach(e.onProcessRule,e)},t.register=function(e){this.map[e.key]=e,e instanceof S?(this.map[e.selector]=e,e.id&&(this.classes[e.key]=e.id)):e instanceof D&&this.keyframes&&(this.keyframes[e.name]=e.id)},t.unregister=function(e){delete this.map[e.key],e instanceof S?(delete this.map[e.selector],delete this.classes[e.key]):e instanceof D&&delete this.keyframes[e.name]},t.update=function(){var e,t,n;if("string"==typeof(arguments.length<=0?void 0:arguments[0])?(e=arguments.length<=0?void 0:arguments[0],t=arguments.length<=1?void 0:arguments[1],n=arguments.length<=2?void 0:arguments[2]):(t=arguments.length<=0?void 0:arguments[0],n=arguments.length<=1?void 0:arguments[1],e=null),e)this.updateOne(this.map[e],t,n);else for(var r=0;r<this.index.length;r++)this.updateOne(this.index[r],t,n)},t.updateOne=function(t,n,r){void 0===r&&(r=Y);var o=this.options,a=o.jss.plugins,i=o.sheet;if(t.rules instanceof e)t.rules.update(n,r);else{var l=t,c=l.style;if(a.onUpdate(n,t,i,r),r.process&&c&&c!==l.style){for(var u in a.onProcessStyle(l.style,l,i),l.style){var s=l.style[u];s!==c[u]&&l.prop(u,s,G)}for(var d in c){var f=l.style[d],p=c[d];null==f&&f!==p&&l.prop(d,null,G)}}}},t.toString=function(e){for(var t="",n=this.options.sheet,r=!!n&&n.options.link,o=0;o<this.index.length;o++){var a=this.index[o].toString(e);(a||r)&&(t&&(t+="\n"),t+=a)}return t},e}(),J=function(){function e(e,t){for(var n in this.options=void 0,this.deployed=void 0,this.attached=void 0,this.rules=void 0,this.renderer=void 0,this.classes=void 0,this.keyframes=void 0,this.queue=void 0,this.attached=!1,this.deployed=!1,this.classes={},this.keyframes={},this.options=Object(o.a)({},t,{sheet:this,parent:this,classes:this.classes,keyframes:this.keyframes}),t.Renderer&&(this.renderer=new t.Renderer(this)),this.rules=new Q(this.options),e)this.rules.add(n,e[n]);this.rules.process()}var t=e.prototype;return t.attach=function(){return this.attached||(this.renderer&&this.renderer.attach(),this.attached=!0,this.deployed||this.deploy()),this},t.detach=function(){return this.attached?(this.renderer&&this.renderer.detach(),this.attached=!1,this):this},t.addRule=function(e,t,n){var r=this.queue;this.attached&&!r&&(this.queue=[]);var o=this.rules.add(e,t,n);return o?(this.options.jss.plugins.onProcessRule(o),this.attached?this.deployed?(r?r.push(o):(this.insertRule(o),this.queue&&(this.queue.forEach(this.insertRule,this),this.queue=void 0)),o):o:(this.deployed=!1,o)):null},t.insertRule=function(e){this.renderer&&this.renderer.insertRule(e)},t.addRules=function(e,t){var n=[];for(var r in e){var o=this.addRule(r,e[r],t);o&&n.push(o)}return n},t.getRule=function(e){return this.rules.get(e)},t.deleteRule=function(e){var t="object"==typeof e?e:this.rules.get(e);return!!t&&(this.rules.remove(t),!(this.attached&&t.renderable&&this.renderer)||this.renderer.deleteRule(t.renderable))},t.indexOf=function(e){return this.rules.indexOf(e)},t.deploy=function(){return this.renderer&&this.renderer.deploy(),this.deployed=!0,this},t.update=function(){var e;return(e=this.rules).update.apply(e,arguments),this},t.updateOne=function(e,t,n){return this.rules.updateOne(e,t,n),this},t.toString=function(e){return this.rules.toString(e)},e}(),Z=function(){function e(){this.plugins={internal:[],external:[]},this.registry=void 0}var t=e.prototype;return t.onCreateRule=function(e,t,n){for(var r=0;r<this.registry.onCreateRule.length;r++){var o=this.registry.onCreateRule[r](e,t,n);if(o)return o}return null},t.onProcessRule=function(e){if(!e.isProcessed){for(var t=e.options.sheet,n=0;n<this.registry.onProcessRule.length;n++)this.registry.onProcessRule[n](e,t);e.style&&this.onProcessStyle(e.style,e,t),e.isProcessed=!0}},t.onProcessStyle=function(e,t,n){for(var r=0;r<this.registry.onProcessStyle.length;r++)t.style=this.registry.onProcessStyle[r](t.style,t,n)},t.onProcessSheet=function(e){for(var t=0;t<this.registry.onProcessSheet.length;t++)this.registry.onProcessSheet[t](e)},t.onUpdate=function(e,t,n,r){for(var o=0;o<this.registry.onUpdate.length;o++)this.registry.onUpdate[o](e,t,n,r)},t.onChangeValue=function(e,t,n){for(var r=e,o=0;o<this.registry.onChangeValue.length;o++)r=this.registry.onChangeValue[o](r,t,n);return r},t.use=function(e,t){void 0===t&&(t={queue:"external"});var n=this.plugins[t.queue];-1===n.indexOf(e)&&(n.push(e),this.registry=[].concat(this.plugins.external,this.plugins.internal).reduce((function(e,t){for(var n in t)n in e&&e[n].push(t[n]);return e}),{onCreateRule:[],onProcessRule:[],onProcessStyle:[],onProcessSheet:[],onChangeValue:[],onUpdate:[]}))},e}(),ee=new(function(){function e(){this.registry=[]}var t=e.prototype;return t.add=function(e){var t=this.registry,n=e.options.index;if(-1===t.indexOf(e))if(0===t.length||n>=this.index)t.push(e);else for(var r=0;r<t.length;r++)if(t[r].options.index>n)return void t.splice(r,0,e)},t.reset=function(){this.registry=[]},t.remove=function(e){var t=this.registry.indexOf(e);this.registry.splice(t,1)},t.toString=function(e){for(var t=void 0===e?{}:e,n=t.attached,r=Object(f.a)(t,["attached"]),o="",a=0;a<this.registry.length;a++){var i=this.registry[a];null!=n&&i.attached!==n||(o&&(o+="\n"),o+=i.toString(r))}return o},Object(u.a)(e,[{key:"index",get:function(){return 0===this.registry.length?0:this.registry[this.registry.length-1].options.index}}]),e}()),te="undefined"!=typeof window&&window.Math==Math?window:"undefined"!=typeof self&&self.Math==Math?self:Function("return this")(),ne="2f1acc6c3a606b082e5eef5e54414ffb";null==te[ne]&&(te[ne]=0);var re=te[ne]++,oe=function(e){void 0===e&&(e={});var t=0;return function(n,r){t+=1;var o="",a="";return r&&(r.options.classNamePrefix&&(a=r.options.classNamePrefix),null!=r.options.jss.id&&(o=String(r.options.jss.id))),e.minify?""+(a||"c")+re+o+t:a+n.key+"-"+re+(o?"-"+o:"")+"-"+t}},ae=function(e){var t;return function(){return t||(t=e()),t}};function ie(e,t){try{return e.attributeStyleMap?e.attributeStyleMap.get(t):e.style.getPropertyValue(t)}catch(e){return""}}function le(e,t,n){try{var r=n;if(Array.isArray(n)&&(r=b(n,!0),"!important"===n[n.length-1]))return e.style.setProperty(t,r,"important"),!0;e.attributeStyleMap?e.attributeStyleMap.set(t,r):e.style.setProperty(t,r)}catch(e){return!1}return!0}function ce(e,t){try{e.attributeStyleMap?e.attributeStyleMap.delete(t):e.style.removeProperty(t)}catch(e){}}function ue(e,t){return e.selectorText=t,e.selectorText===t}var se=ae((function(){return document.querySelector("head")}));function de(e){var t=ee.registry;if(t.length>0){var n=function(e,t){for(var n=0;n<e.length;n++){var r=e[n];if(r.attached&&r.options.index>t.index&&r.options.insertionPoint===t.insertionPoint)return r}return null}(t,e);if(n&&n.renderer)return{parent:n.renderer.element.parentNode,node:n.renderer.element};if((n=function(e,t){for(var n=e.length-1;n>=0;n--){var r=e[n];if(r.attached&&r.options.insertionPoint===t.insertionPoint)return r}return null}(t,e))&&n.renderer)return{parent:n.renderer.element.parentNode,node:n.renderer.element.nextSibling}}var r=e.insertionPoint;if(r&&"string"==typeof r){var o=function(e){for(var t=se(),n=0;n<t.childNodes.length;n++){var r=t.childNodes[n];if(8===r.nodeType&&r.nodeValue.trim()===e)return r}return null}(r);if(o)return{parent:o.parentNode,node:o.nextSibling}}return!1}var fe=ae((function(){var e=document.querySelector('meta[property="csp-nonce"]');return e?e.getAttribute("content"):null})),pe=function(e,t,n){var r=e.cssRules.length;(void 0===n||n>r)&&(n=r);try{if("insertRule"in e)e.insertRule(t,n);else if("appendRule"in e){e.appendRule(t)}}catch(e){return!1}return e.cssRules[n]},me=function(){function e(e){this.getPropertyValue=ie,this.setProperty=le,this.removeProperty=ce,this.setSelector=ue,this.element=void 0,this.sheet=void 0,this.hasInsertedRules=!1,e&&ee.add(e),this.sheet=e;var t=this.sheet?this.sheet.options:{},n=t.media,r=t.meta,o=t.element;this.element=o||function(){var e=document.createElement("style");return e.textContent="\n",e}(),this.element.setAttribute("data-jss",""),n&&this.element.setAttribute("media",n),r&&this.element.setAttribute("data-meta",r);var a=fe();a&&this.element.setAttribute("nonce",a)}var t=e.prototype;return t.attach=function(){if(!this.element.parentNode&&this.sheet){!function(e,t){var n=t.insertionPoint,r=de(t);if(!1!==r&&r.parent)r.parent.insertBefore(e,r.node);else if(n&&"number"==typeof n.nodeType){var o=n,a=o.parentNode;a&&a.insertBefore(e,o.nextSibling)}else se().appendChild(e)}(this.element,this.sheet.options);var e=Boolean(this.sheet&&this.sheet.deployed);this.hasInsertedRules&&e&&(this.hasInsertedRules=!1,this.deploy())}},t.detach=function(){var e=this.element.parentNode;e&&e.removeChild(this.element)},t.deploy=function(){var e=this.sheet;e&&(e.options.link?this.insertRules(e.rules):this.element.textContent="\n"+e.toString()+"\n")},t.insertRules=function(e,t){for(var n=0;n<e.index.length;n++)this.insertRule(e.index[n],n,t)},t.insertRule=function(e,t,n){if(void 0===n&&(n=this.element.sheet),e.rules){var r=e,o=n;return("conditional"!==e.type&&"keyframes"!==e.type||!1!==(o=pe(n,r.toString({children:!1}),t)))&&(this.insertRules(r.rules,o),o)}if(e.renderable&&e.renderable.parentStyleSheet===this.element.sheet)return e.renderable;var a=e.toString();if(!a)return!1;var i=pe(n,a,t);return!1!==i&&(this.hasInsertedRules=!0,e.renderable=i,i)},t.deleteRule=function(e){var t=this.element.sheet,n=this.indexOf(e);return-1!==n&&(t.deleteRule(n),!0)},t.indexOf=function(e){for(var t=this.element.sheet.cssRules,n=0;n<t.length;n++)if(e===t[n])return n;return-1},t.replaceRule=function(e,t){var n=this.indexOf(e);return-1!==n&&(this.element.sheet.deleteRule(n),this.insertRule(t,n))},t.getRules=function(){return this.element.sheet.cssRules},e}(),he=0,ve=function(){function e(e){this.id=he++,this.version="10.4.0",this.plugins=new Z,this.options={id:{minify:!1},createGenerateId:oe,Renderer:c?me:null,plugins:[]},this.generateId=oe({minify:!1});for(var t=0;t<K.length;t++)this.plugins.use(K[t],{queue:"internal"});this.setup(e)}var t=e.prototype;return t.setup=function(e){return void 0===e&&(e={}),e.createGenerateId&&(this.options.createGenerateId=e.createGenerateId),e.id&&(this.options.id=Object(o.a)({},this.options.id,e.id)),(e.createGenerateId||e.id)&&(this.generateId=this.options.createGenerateId(this.options.id)),null!=e.insertionPoint&&(this.options.insertionPoint=e.insertionPoint),"Renderer"in e&&(this.options.Renderer=e.Renderer),e.plugins&&this.use.apply(this,e.plugins),this},t.createStyleSheet=function(e,t){void 0===t&&(t={});var n=t.index;"number"!=typeof n&&(n=0===ee.index?0:ee.index+1);var r=new J(e,Object(o.a)({},t,{jss:this,generateId:t.generateId||this.generateId,insertionPoint:this.options.insertionPoint,Renderer:this.options.Renderer,index:n}));return this.plugins.onProcessSheet(r),r},t.removeStyleSheet=function(e){return e.detach(),ee.remove(e),this},t.createRule=function(e,t,n){if(void 0===t&&(t={}),void 0===n&&(n={}),"object"==typeof e)return this.createRule(void 0,e,t);var r=Object(o.a)({},n,{name:e,jss:this,Renderer:this.options.Renderer});r.generateId||(r.generateId=this.generateId),r.classes||(r.classes={}),r.keyframes||(r.keyframes={});var a=h(e,t,r);return a&&this.plugins.onProcessRule(a),a},t.use=function(){for(var e=this,t=arguments.length,n=new Array(t),r=0;r<t;r++)n[r]=arguments[r];return n.forEach((function(t){e.plugins.use(t)})),this},e}();var be="undefined"!=typeof CSS&&CSS&&"number"in CSS,ge=function(e){return new ve(e)},ye=(ge(),n(185)),xe={set:function(e,t,n,r){var o=e.get(t);o||(o=new Map,e.set(t,o)),o.set(n,r)},get:function(e,t,n){var r=e.get(t);return r?r.get(n):void 0},delete:function(e,t,n){e.get(t).delete(n)}},we=n(188),Oe=(n(4),"function"==typeof Symbol&&Symbol.for?Symbol.for("mui.nested"):"__THEME_NESTED__"),Ee=["checked","disabled","error","focused","focusVisible","required","expanded","selected"];
/**
 * A better abstraction over CSS.
 *
 * @copyright Oleg Isonen (Slobodskoi) / Isonen 2014-present
 * @website https://github.com/cssinjs/jss
 * @license MIT
 */var Se=Date.now(),ke="fnValues"+Se,je="fnStyle"+ ++Se;var Ce=function(){return{onCreateRule:function(e,t,n){if("function"!=typeof t)return null;var r=h(e,{},n);return r[je]=t,r},onProcessStyle:function(e,t){if(ke in t||je in t)return e;var n={};for(var r in e){var o=e[r];"function"==typeof o&&(delete e[r],n[r]=o)}return t[ke]=n,e},onUpdate:function(e,t,n,r){var o=t,a=o[je];a&&(o.style=a(e)||{});var i=o[ke];if(i)for(var l in i)o.prop(l,i[l](e),r)}}},Pe="@global",Te=function(){function e(e,t,n){for(var r in this.type="global",this.at=Pe,this.rules=void 0,this.options=void 0,this.key=void 0,this.isProcessed=!1,this.key=e,this.options=n,this.rules=new Q(Object(o.a)({},n,{parent:this})),t)this.rules.add(r,t[r]);this.rules.process()}var t=e.prototype;return t.getRule=function(e){return this.rules.get(e)},t.addRule=function(e,t,n){var r=this.rules.add(e,t,n);return this.options.jss.plugins.onProcessRule(r),r},t.indexOf=function(e){return this.rules.indexOf(e)},t.toString=function(){return this.rules.toString()},e}(),Ne=function(){function e(e,t,n){this.type="global",this.at=Pe,this.options=void 0,this.rule=void 0,this.isProcessed=!1,this.key=void 0,this.key=e,this.options=n;var r=e.substr("@global ".length);this.rule=n.jss.createRule(r,t,Object(o.a)({},n,{parent:this}))}return e.prototype.toString=function(e){return this.rule?this.rule.toString(e):""},e}(),Re=/\s*,\s*/g;function Me(e,t){for(var n=e.split(Re),r="",o=0;o<n.length;o++)r+=t+" "+n[o].trim(),n[o+1]&&(r+=", ");return r}var De=function(){return{onCreateRule:function(e,t,n){if(!e)return null;if(e===Pe)return new Te(e,t,n);if("@"===e[0]&&"@global "===e.substr(0,"@global ".length))return new Ne(e,t,n);var r=n.parent;return r&&("global"===r.type||r.options.parent&&"global"===r.options.parent.type)&&(n.scoped=!1),!1===n.scoped&&(n.selector=e),null},onProcessRule:function(e){"style"===e.type&&(function(e){var t=e.options,n=e.style,r=n?n[Pe]:null;if(r){for(var a in r)t.sheet.addRule(a,r[a],Object(o.a)({},t,{selector:Me(a,e.selector)}));delete n[Pe]}}(e),function(e){var t=e.options,n=e.style;for(var r in n)if("@"===r[0]&&r.substr(0,Pe.length)===Pe){var a=Me(r.substr(Pe.length),e.selector);t.sheet.addRule(a,n[r],Object(o.a)({},t,{selector:a})),delete n[r]}}(e))}}},Ae=/\s*,\s*/g,Ie=/&/g,Le=/\$([\w-]+)/g;var _e=function(){function e(e,t){return function(n,r){var o=e.getRule(r)||t&&t.getRule(r);return o?(o=o).selector:r}}function t(e,t){for(var n=t.split(Ae),r=e.split(Ae),o="",a=0;a<n.length;a++)for(var i=n[a],l=0;l<r.length;l++){var c=r[l];o&&(o+=", "),o+=-1!==c.indexOf("&")?c.replace(Ie,i):i+" "+c}return o}function n(e,t,n){if(n)return Object(o.a)({},n,{index:n.index+1});var r=e.options.nestingLevel;r=void 0===r?1:r+1;var a=Object(o.a)({},e.options,{nestingLevel:r,index:t.indexOf(e)+1});return delete a.name,a}return{onProcessStyle:function(r,a,i){if("style"!==a.type)return r;var l,c,u=a,s=u.options.parent;for(var d in r){var f=-1!==d.indexOf("&"),p="@"===d[0];if(f||p){if(l=n(u,s,l),f){var m=t(d,u.selector);c||(c=e(s,i)),m=m.replace(Le,c),s.addRule(m,r[d],Object(o.a)({},l,{selector:m}))}else p&&s.addRule(d,{},l).addRule(u.key,r[d],{selector:u.selector});delete r[d]}}return r}}},ze=/[A-Z]/g,Fe=/^ms-/,We={};function Be(e){return"-"+e.toLowerCase()}var He=function(e){if(We.hasOwnProperty(e))return We[e];var t=e.replace(ze,Be);return We[e]=Fe.test(t)?"-"+t:t};function Ue(e){var t={};for(var n in e){t[0===n.indexOf("--")?n:He(n)]=e[n]}return e.fallbacks&&(Array.isArray(e.fallbacks)?t.fallbacks=e.fallbacks.map(Ue):t.fallbacks=Ue(e.fallbacks)),t}var $e=function(){return{onProcessStyle:function(e){if(Array.isArray(e)){for(var t=0;t<e.length;t++)e[t]=Ue(e[t]);return e}return Ue(e)},onChangeValue:function(e,t,n){if(0===t.indexOf("--"))return e;var r=He(t);return t===r?e:(n.prop(r,e),null)}}},Ve=be&&CSS?CSS.px:"px",qe=be&&CSS?CSS.ms:"ms",Xe=be&&CSS?CSS.percent:"%";function Ke(e){var t=/(-[a-z])/g,n=function(e){return e[1].toUpperCase()},r={};for(var o in e)r[o]=e[o],r[o.replace(t,n)]=e[o];return r}var Ye=Ke({"animation-delay":qe,"animation-duration":qe,"background-position":Ve,"background-position-x":Ve,"background-position-y":Ve,"background-size":Ve,border:Ve,"border-bottom":Ve,"border-bottom-left-radius":Ve,"border-bottom-right-radius":Ve,"border-bottom-width":Ve,"border-left":Ve,"border-left-width":Ve,"border-radius":Ve,"border-right":Ve,"border-right-width":Ve,"border-top":Ve,"border-top-left-radius":Ve,"border-top-right-radius":Ve,"border-top-width":Ve,"border-width":Ve,margin:Ve,"margin-bottom":Ve,"margin-left":Ve,"margin-right":Ve,"margin-top":Ve,padding:Ve,"padding-bottom":Ve,"padding-left":Ve,"padding-right":Ve,"padding-top":Ve,"mask-position-x":Ve,"mask-position-y":Ve,"mask-size":Ve,height:Ve,width:Ve,"min-height":Ve,"max-height":Ve,"min-width":Ve,"max-width":Ve,bottom:Ve,left:Ve,top:Ve,right:Ve,"box-shadow":Ve,"text-shadow":Ve,"column-gap":Ve,"column-rule":Ve,"column-rule-width":Ve,"column-width":Ve,"font-size":Ve,"font-size-delta":Ve,"letter-spacing":Ve,"text-indent":Ve,"text-stroke":Ve,"text-stroke-width":Ve,"word-spacing":Ve,motion:Ve,"motion-offset":Ve,outline:Ve,"outline-offset":Ve,"outline-width":Ve,perspective:Ve,"perspective-origin-x":Xe,"perspective-origin-y":Xe,"transform-origin":Xe,"transform-origin-x":Xe,"transform-origin-y":Xe,"transform-origin-z":Xe,"transition-delay":qe,"transition-duration":qe,"vertical-align":Ve,"flex-basis":Ve,"shape-margin":Ve,size:Ve,grid:Ve,"grid-gap":Ve,"grid-row-gap":Ve,"grid-column-gap":Ve,"grid-template-rows":Ve,"grid-template-columns":Ve,"grid-auto-rows":Ve,"grid-auto-columns":Ve,"box-shadow-x":Ve,"box-shadow-y":Ve,"box-shadow-blur":Ve,"box-shadow-spread":Ve,"font-line-height":Ve,"text-shadow-x":Ve,"text-shadow-y":Ve,"text-shadow-blur":Ve});function Ge(e,t,n){if(!t)return t;if(Array.isArray(t))for(var r=0;r<t.length;r++)t[r]=Ge(e,t[r],n);else if("object"==typeof t)if("fallbacks"===e)for(var o in t)t[o]=Ge(o,t[o],n);else for(var a in t)t[a]=Ge(e+"-"+a,t[a],n);else if("number"==typeof t){var i=n[e]||Ye[e];return i?"function"==typeof i?i(t).toString():""+t+i:t.toString()}return t}var Qe=function(e){void 0===e&&(e={});var t=Ke(e);return{onProcessStyle:function(e,n){if("style"!==n.type)return e;for(var r in e)e[r]=Ge(r,e[r],t);return e},onChangeValue:function(e,n){return Ge(n,e,t)}}},Je=n(24),Ze="",et="",tt="",nt="",rt=c&&"ontouchstart"in document.documentElement;if(c){var ot={Moz:"-moz-",ms:"-ms-",O:"-o-",Webkit:"-webkit-"},at=document.createElement("p").style;for(var it in ot)if(it+"Transform"in at){Ze=it,et=ot[it];break}"Webkit"===Ze&&"msHyphens"in at&&(Ze="ms",et=ot.ms,nt="edge"),"Webkit"===Ze&&"-apple-trailing-word"in at&&(tt="apple")}var lt=Ze,ct=et,ut=tt,st=nt,dt=rt;var ft={noPrefill:["appearance"],supportedProperty:function(e){return"appearance"===e&&("ms"===lt?"-webkit-"+e:ct+e)}},pt={noPrefill:["color-adjust"],supportedProperty:function(e){return"color-adjust"===e&&("Webkit"===lt?ct+"print-"+e:e)}},mt=/[-\s]+(.)?/g;function ht(e,t){return t?t.toUpperCase():""}function vt(e){return e.replace(mt,ht)}function bt(e){return vt("-"+e)}var gt,yt={noPrefill:["mask"],supportedProperty:function(e,t){if(!/^mask/.test(e))return!1;if("Webkit"===lt){if(vt("mask-image")in t)return e;if(lt+bt("mask-image")in t)return ct+e}return e}},xt={noPrefill:["text-orientation"],supportedProperty:function(e){return"text-orientation"===e&&("apple"!==ut||dt?e:ct+e)}},wt={noPrefill:["transform"],supportedProperty:function(e,t,n){return"transform"===e&&(n.transform?e:ct+e)}},Ot={noPrefill:["transition"],supportedProperty:function(e,t,n){return"transition"===e&&(n.transition?e:ct+e)}},Et={noPrefill:["writing-mode"],supportedProperty:function(e){return"writing-mode"===e&&("Webkit"===lt||"ms"===lt&&"edge"!==st?ct+e:e)}},St={noPrefill:["user-select"],supportedProperty:function(e){return"user-select"===e&&("Moz"===lt||"ms"===lt||"apple"===ut?ct+e:e)}},kt={supportedProperty:function(e,t){return!!/^break-/.test(e)&&("Webkit"===lt?"WebkitColumn"+bt(e)in t&&ct+"column-"+e:"Moz"===lt&&("page"+bt(e)in t&&"page-"+e))}},jt={supportedProperty:function(e,t){if(!/^(border|margin|padding)-inline/.test(e))return!1;if("Moz"===lt)return e;var n=e.replace("-inline","");return lt+bt(n)in t&&ct+n}},Ct={supportedProperty:function(e,t){return vt(e)in t&&e}},Pt={supportedProperty:function(e,t){var n=bt(e);return"-"===e[0]||"-"===e[0]&&"-"===e[1]?e:lt+n in t?ct+e:"Webkit"!==lt&&"Webkit"+n in t&&"-webkit-"+e}},Tt={supportedProperty:function(e){return"scroll-snap"===e.substring(0,11)&&("ms"===lt?""+ct+e:e)}},Nt={supportedProperty:function(e){return"overscroll-behavior"===e&&("ms"===lt?ct+"scroll-chaining":e)}},Rt={"flex-grow":"flex-positive","flex-shrink":"flex-negative","flex-basis":"flex-preferred-size","justify-content":"flex-pack",order:"flex-order","align-items":"flex-align","align-content":"flex-line-pack"},Mt={supportedProperty:function(e,t){var n=Rt[e];return!!n&&(lt+bt(n)in t&&ct+n)}},Dt={flex:"box-flex","flex-grow":"box-flex","flex-direction":["box-orient","box-direction"],order:"box-ordinal-group","align-items":"box-align","flex-flow":["box-orient","box-direction"],"justify-content":"box-pack"},At=Object.keys(Dt),It=function(e){return ct+e},Lt=[ft,pt,yt,xt,wt,Ot,Et,St,kt,jt,Ct,Pt,Tt,Nt,Mt,{supportedProperty:function(e,t,n){var r=n.multiple;if(At.indexOf(e)>-1){var o=Dt[e];if(!Array.isArray(o))return lt+bt(o)in t&&ct+o;if(!r)return!1;for(var a=0;a<o.length;a++)if(!(lt+bt(o[0])in t))return!1;return o.map(It)}return!1}}],_t=Lt.filter((function(e){return e.supportedProperty})).map((function(e){return e.supportedProperty})),zt=Lt.filter((function(e){return e.noPrefill})).reduce((function(e,t){return e.push.apply(e,Object(Je.a)(t.noPrefill)),e}),[]),Ft={};if(c){gt=document.createElement("p");var Wt=window.getComputedStyle(document.documentElement,"");for(var Bt in Wt)isNaN(Bt)||(Ft[Wt[Bt]]=Wt[Bt]);zt.forEach((function(e){return delete Ft[e]}))}function Ht(e,t){if(void 0===t&&(t={}),!gt)return e;if(null!=Ft[e])return Ft[e];"transition"!==e&&"transform"!==e||(t[e]=e in gt.style);for(var n=0;n<_t.length&&(Ft[e]=_t[n](e,gt.style,t),!Ft[e]);n++);try{gt.style[e]=""}catch(e){return!1}return Ft[e]}var Ut,$t={},Vt={transition:1,"transition-property":1,"-webkit-transition":1,"-webkit-transition-property":1},qt=/(^\s*[\w-]+)|, (\s*[\w-]+)(?![^()]*\))/g;function Xt(e,t,n){if("var"===t)return"var";if("all"===t)return"all";if("all"===n)return", all";var r=t?Ht(t):", "+Ht(n);return r||(t||n)}function Kt(e,t){var n=t;if(!Ut||"content"===e)return t;if("string"!=typeof n||!isNaN(parseInt(n,10)))return n;var r=e+n;if(null!=$t[r])return $t[r];try{Ut.style[e]=n}catch(e){return $t[r]=!1,!1}if(Vt[e])n=n.replace(qt,Xt);else if(""===Ut.style[e]&&("-ms-flex"===(n=ct+n)&&(Ut.style[e]="-ms-flexbox"),Ut.style[e]=n,""===Ut.style[e]))return $t[r]=!1,!1;return Ut.style[e]="",$t[r]=n,$t[r]}c&&(Ut=document.createElement("p"));var Yt=function(){function e(t){for(var n in t){var r=t[n];if("fallbacks"===n&&Array.isArray(r))t[n]=r.map(e);else{var o=!1,a=Ht(n);a&&a!==n&&(o=!0);var i=!1,l=Kt(a,b(r));l&&l!==r&&(i=!0),(o||i)&&(o&&delete t[n],t[a||n]=l||r)}}return t}return{onProcessRule:function(e){if("keyframes"===e.type){var t=e;t.at="-"===(n=t.at)[1]||"ms"===lt?n:"@"+ct+"keyframes"+n.substr(10)}var n},onProcessStyle:function(t,n){return"style"!==n.type?t:e(t)},onChangeValue:function(e,t){return Kt(t,b(e))||e}}};var Gt=function(){var e=function(e,t){return e.length===t.length?e>t?1:-1:e.length-t.length};return{onProcessStyle:function(t,n){if("style"!==n.type)return t;for(var r={},o=Object.keys(t).sort(e),a=0;a<o.length;a++)r[o[a]]=t[o[a]];return r}}};function Qt(){return{plugins:[Ce(),De(),_e(),$e(),Qe(),"undefined"==typeof window?null:Yt(),Gt()]}}var Jt=ge(Qt()),Zt={disableGeneration:!1,generateClassName:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e.disableGlobal,n=void 0!==t&&t,r=e.productionPrefix,o=void 0===r?"jss":r,a=e.seed,i=void 0===a?"":a,l=""===i?"":"".concat(i,"-"),c=0,u=function(){return c+=1};return function(e,t){var r=t.options.name;if(r&&0===r.indexOf("Mui")&&!t.options.link&&!n){if(-1!==Ee.indexOf(e.key))return"Mui-".concat(e.key);var a="".concat(l).concat(r,"-").concat(e.key);return t.options.theme[Oe]&&""===i?"".concat(a,"-").concat(u()):a}return"".concat(l).concat(o).concat(u())}}(),jss:Jt,sheetsCache:null,sheetsManager:new Map,sheetsRegistry:null},en=i.a.createContext(Zt);var tn=-1e9;function nn(){return tn+=1}n(28);var rn=n(153);function on(e){var t="function"==typeof e;return{create:function(n,r){var a;try{a=t?e(n):e}catch(e){throw e}if(!r||!n.overrides||!n.overrides[r])return a;var i=n.overrides[r],l=Object(o.a)({},a);return Object.keys(i).forEach((function(e){l[e]=Object(rn.a)(l[e],i[e])})),l},options:{}}}var an={};function ln(e,t,n){var r=e.state;if(e.stylesOptions.disableGeneration)return t||{};r.cacheClasses||(r.cacheClasses={value:null,lastProp:null,lastJSS:{}});var o=!1;return r.classes!==r.cacheClasses.lastJSS&&(r.cacheClasses.lastJSS=r.classes,o=!0),t!==r.cacheClasses.lastProp&&(r.cacheClasses.lastProp=t,o=!0),o&&(r.cacheClasses.value=Object(ye.a)({baseClasses:r.cacheClasses.lastJSS,newClasses:t,Component:n})),r.cacheClasses.value}function cn(e,t){var n=e.state,r=e.theme,a=e.stylesOptions,i=e.stylesCreator,l=e.name;if(!a.disableGeneration){var c=xe.get(a.sheetsManager,i,r);c||(c={refs:0,staticSheet:null,dynamicStyles:null},xe.set(a.sheetsManager,i,r,c));var u=Object(o.a)(Object(o.a)(Object(o.a)({},i.options),a),{},{theme:r,flip:"boolean"==typeof a.flip?a.flip:"rtl"===r.direction});u.generateId=u.serverGenerateClassName||u.generateClassName;var s=a.sheetsRegistry;if(0===c.refs){var d;a.sheetsCache&&(d=xe.get(a.sheetsCache,i,r));var f=i.create(r,l);d||((d=a.jss.createStyleSheet(f,Object(o.a)({link:!1},u))).attach(),a.sheetsCache&&xe.set(a.sheetsCache,i,r,d)),s&&s.add(d),c.staticSheet=d,c.dynamicStyles=function e(t){var n=null;for(var r in t){var o=t[r],a=typeof o;if("function"===a)n||(n={}),n[r]=o;else if("object"===a&&null!==o&&!Array.isArray(o)){var i=e(o);i&&(n||(n={}),n[r]=i)}}return n}(f)}if(c.dynamicStyles){var p=a.jss.createStyleSheet(c.dynamicStyles,Object(o.a)({link:!0},u));p.update(t),p.attach(),n.dynamicSheet=p,n.classes=Object(ye.a)({baseClasses:c.staticSheet.classes,newClasses:p.classes}),s&&s.add(p)}else n.classes=c.staticSheet.classes;c.refs+=1}}function un(e,t){var n=e.state;n.dynamicSheet&&n.dynamicSheet.update(t)}function sn(e){var t=e.state,n=e.theme,r=e.stylesOptions,o=e.stylesCreator;if(!r.disableGeneration){var a=xe.get(r.sheetsManager,o,n);a.refs-=1;var i=r.sheetsRegistry;0===a.refs&&(xe.delete(r.sheetsManager,o,n),r.jss.removeStyleSheet(a.staticSheet),i&&i.remove(a.staticSheet)),t.dynamicSheet&&(r.jss.removeStyleSheet(t.dynamicSheet),i&&i.remove(t.dynamicSheet))}}function dn(e,t){var n,r=i.a.useRef([]),o=i.a.useMemo((function(){return{}}),t);r.current!==o&&(r.current=o,n=e()),i.a.useEffect((function(){return function(){n&&n()}}),[o])}function fn(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=t.name,a=t.classNamePrefix,l=t.Component,c=t.defaultTheme,u=void 0===c?an:c,s=Object(r.a)(t,["name","classNamePrefix","Component","defaultTheme"]),d=on(e),f=n||a||"makeStyles";d.options={index:nn(),name:n,meta:f,classNamePrefix:f};var p=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=Object(we.a)()||u,r=Object(o.a)(Object(o.a)({},i.a.useContext(en)),s),a=i.a.useRef(),c=i.a.useRef();dn((function(){var o={name:n,state:{},stylesCreator:d,stylesOptions:r,theme:t};return cn(o,e),c.current=!1,a.current=o,function(){sn(o)}}),[t,d]),i.a.useEffect((function(){c.current&&un(a.current,e),c.current=!0}));var f=ln(a.current,e.classes,l);return f};return p}},function(e,t,n){"use strict";n.d(t,"a",(function(){return i}));var r=n(0),o=n.n(r);var a=o.a.createContext(null);function i(){return o.a.useContext(a)}},function(e,t,n){"use strict";n.d(t,"a",(function(){return p}));var r=n(17),o=n(47),a=n(29);var i,l,c={m:"margin",p:"padding"},u={t:"Top",r:"Right",b:"Bottom",l:"Left",x:["Left","Right"],y:["Top","Bottom"]},s={marginX:"mx",marginY:"my",paddingX:"px",paddingY:"py"},d=(i=function(e){if(e.length>2){if(!s[e])return[e];e=s[e]}var t=e.split(""),n=Object(r.a)(t,2),o=n[0],a=n[1],i=c[o],l=u[a]||"";return Array.isArray(l)?l.map((function(e){return i+e})):[i+l]},l={},function(e){return void 0===l[e]&&(l[e]=i(e)),l[e]}),f=["m","mt","mr","mb","ml","mx","my","p","pt","pr","pb","pl","px","py","margin","marginTop","marginRight","marginBottom","marginLeft","marginX","marginY","padding","paddingTop","paddingRight","paddingBottom","paddingLeft","paddingX","paddingY"];function p(e){var t=e.spacing||8;return"number"==typeof t?function(e){return t*e}:Array.isArray(t)?function(e){return t[e]}:"function"==typeof t?t:function(){}}function m(e,t){return function(n){return e.reduce((function(e,r){return e[r]=function(e,t){if("string"==typeof t)return t;var n=e(Math.abs(t));return t>=0?n:"number"==typeof n?-n:"-".concat(n)}(t,n),e}),{})}}function h(e){var t=p(e.theme);return Object.keys(e).map((function(n){if(-1===f.indexOf(n))return null;var r=m(d(n),t),a=e[n];return Object(o.a)(e,a,r)})).reduce(a.a,{})}h.propTypes={},h.filterProps=f;t.b=h}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0L2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY2xzeC9kaXN0L2Nsc3gubS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcHJvcC10eXBlcy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL3N0eWxlcy9lc20vd2l0aFN0eWxlcy93aXRoU3R5bGVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vc3R5bGVzL3dpdGhTdHlsZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS91dGlscy9jYXBpdGFsaXplLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9kZWZpbmVQcm9wZXJ0eS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL3N0eWxlcy9jb2xvck1hbmlwdWxhdG9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1kb20vaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2luaGVyaXRzTG9vc2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vc3R5bGVzL3RyYW5zaXRpb25zLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvaWNvbnMvdXRpbHMvY3JlYXRlU3ZnSWNvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vc2xpY2VkVG9BcnJheS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vaXRlcmFibGVUb0FycmF5TGltaXQuanMiLCJ3ZWJwYWNrOi8vLyh3ZWJwYWNrKS9idWlsZGluL2FtZC1kZWZpbmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlZHV4L2VzL3JlZHV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9ob2lzdC1ub24tcmVhY3Qtc3RhdGljcy9kaXN0L2hvaXN0LW5vbi1yZWFjdC1zdGF0aWNzLmNqcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL3N0eWxlcy9jcmVhdGVCcmVha3BvaW50cy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vdG9Db25zdW1hYmxlQXJyYXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2FycmF5V2l0aG91dEhvbGVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9ub25JdGVyYWJsZVNwcmVhZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdGlueS13YXJuaW5nL2Rpc3QvdGlueS13YXJuaW5nLmVzbS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtaXMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL3R5cGVvZi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL3N5c3RlbS9lc20vbWVyZ2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS9zdHlsZXMvY3JlYXRlTWl4aW5zLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vY29sb3JzL2NvbW1vbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL2NvbG9ycy9ncmV5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vY29sb3JzL2luZGlnby5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL2NvbG9ycy9waW5rLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vY29sb3JzL3JlZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL2NvbG9ycy9vcmFuZ2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS9jb2xvcnMvYmx1ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL3N0eWxlcy9jcmVhdGVQYWxldHRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vc3R5bGVzL2NyZWF0ZVR5cG9ncmFwaHkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS9zdHlsZXMvc2hhZG93cy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL3N0eWxlcy9zaGFwZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL3N0eWxlcy9jcmVhdGVTcGFjaW5nLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vc3R5bGVzL2NyZWF0ZU11aVRoZW1lLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vc3R5bGVzL2RlZmF1bHRUaGVtZS5qcyIsIndlYnBhY2s6Ly8vKHdlYnBhY2spL2J1aWxkaW4vbW9kdWxlLmpzIiwid2VicGFjazovLy8od2VicGFjaykvYnVpbGRpbi9hbWQtb3B0aW9ucy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2ljb25zL0RlbGV0ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2ljb25zL0NyZWF0ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vY3JlYXRlQ2xhc3MuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2Fzc2VydFRoaXNJbml0aWFsaXplZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vYXJyYXlMaWtlVG9BcnJheS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2ljb25zL1Nob3BwaW5nQ2FydC5qcyIsIndlYnBhY2s6Ly8vKHdlYnBhY2spL2J1aWxkaW4vZ2xvYmFsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1zd2lwZWFibGUtdmlld3MtY29yZS9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWRyYWdnYWJsZS9idWlsZC9janMvdXRpbHMvc2hpbXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvc3lzdGVtL2VzbS9icmVha3BvaW50cy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL3N0eWxlcy96SW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9pY29ucy9Eb25lLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yYW5kb20tYXZhdGFyLWdlbmVyYXRvci9kaXN0L2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvaWNvbnMvTWVudUJvb2tPdXRsaW5lZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2ljb25zL0NvbGxlY3Rpb25zQm9va21hcmtPdXRsaW5lZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3Qtc3dpcGVhYmxlLXZpZXdzL2xpYi9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2ljb25zL1NlbmQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS9jb2xvcnMvZ3JlZW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWRyYWdnYWJsZS9idWlsZC9janMvdXRpbHMvZG9tRm5zLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvaWNvbnMvTWVudS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc3ltYm9sLW9ic2VydmFibGUvZXMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21pbmktY3JlYXRlLXJlYWN0LWNvbnRleHQvZGlzdC9lc20vaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3BhdGgtdG8tcmVnZXhwL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvaWNvbnMvTWFpbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2ljb25zL05vdGlmaWNhdGlvbnMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL29iamVjdC1hc3NpZ24vaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS9TdmdJY29uL1N2Z0ljb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS9TdmdJY29uL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1zd2lwZWFibGUtdmlld3Mvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy93YXJuaW5nL3dhcm5pbmcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXN3aXBlYWJsZS12aWV3cy1jb3JlL2xpYi9jb25zdGFudC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtZHJhZ2dhYmxlL2J1aWxkL2Nqcy91dGlscy9wb3NpdGlvbkZucy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtZHJhZ2dhYmxlL2J1aWxkL2Nqcy91dGlscy9sb2cuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3N5bWJvbC1vYnNlcnZhYmxlL2VzL3BvbnlmaWxsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9pdGVyYWJsZVRvQXJyYXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2FycmF5V2l0aEhvbGVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9ub25JdGVyYWJsZVJlc3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3BvcHBlci5qcy9kaXN0L2VzbS9wb3BwZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9pY29ucy9BZGQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9pY29ucy9BY2NvdW50Q2lyY2xlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvaWNvbnMvUGhvdG9DYW1lcmEuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9pY29ucy9Ib21lLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvaWNvbnMvUGVyc29uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvaWNvbnMvSW5mby5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtZHJhZ2dhYmxlL2J1aWxkL2Nqcy9janMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9pY29ucy9Nb3JlVmVydC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2ljb25zL0Nsb3NlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWR1eC1kZXZ0b29scy1leHRlbnNpb24vaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlZHV4LWxvZ2dlci9kaXN0L3JlZHV4LWxvZ2dlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVkdXgtcGVyc2lzdC9saWIvc3RvcmFnZS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvdXRpbHMvZXNtL2Zvcm1hdE11aUVycm9yTWVzc2FnZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QvY2pzL3JlYWN0LnByb2R1Y3Rpb24ubWluLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1kb20vY2pzL3JlYWN0LWRvbS5wcm9kdWN0aW9uLm1pbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc2NoZWR1bGVyL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zY2hlZHVsZXIvY2pzL3NjaGVkdWxlci5wcm9kdWN0aW9uLm1pbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcHJvcC10eXBlcy9mYWN0b3J5V2l0aFRocm93aW5nU2hpbXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3Byb3AtdHlwZXMvbGliL1JlYWN0UHJvcFR5cGVzU2VjcmV0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1pcy9janMvcmVhY3QtaXMucHJvZHVjdGlvbi5taW4uanMiLCJ3ZWJwYWNrOi8vLyh3ZWJwYWNrKS9idWlsZGluL2hhcm1vbnktbW9kdWxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2V4dGVuZHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3NlZWRyYW5kb20vaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3NlZWRyYW5kb20vbGliL2FsZWEuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3NlZWRyYW5kb20vbGliL3hvcjEyOC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc2VlZHJhbmRvbS9saWIveG9yd293LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zZWVkcmFuZG9tL2xpYi94b3JzaGlmdDcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3NlZWRyYW5kb20vbGliL3hvcjQwOTYuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3NlZWRyYW5kb20vbGliL3R5Y2hlaS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc2VlZHJhbmRvbS9zZWVkcmFuZG9tLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1zd2lwZWFibGUtdmlld3MvbGliL1N3aXBlYWJsZVZpZXdzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1zd2lwZWFibGUtdmlld3Mvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXh0ZW5kcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3Qtc3dpcGVhYmxlLXZpZXdzL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1zd2lwZWFibGUtdmlld3Mvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3Qtc3dpcGVhYmxlLXZpZXdzL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1zd2lwZWFibGUtdmlld3Mvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvY3JlYXRlQ2xhc3MuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXN3aXBlYWJsZS12aWV3cy9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1zd2lwZWFibGUtdmlld3Mvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvdHlwZW9mLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1zd2lwZWFibGUtdmlld3Mvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvYXNzZXJ0VGhpc0luaXRpYWxpemVkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1zd2lwZWFibGUtdmlld3Mvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZ2V0UHJvdG90eXBlT2YuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXN3aXBlYWJsZS12aWV3cy9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbmhlcml0cy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3Qtc3dpcGVhYmxlLXZpZXdzL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL3NldFByb3RvdHlwZU9mLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1zd2lwZWFibGUtdmlld3MtY29yZS9saWIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXN3aXBlYWJsZS12aWV3cy1jb3JlL2xpYi9jaGVja0luZGV4Qm91bmRzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1zd2lwZWFibGUtdmlld3MtY29yZS9saWIvY29tcHV0ZUluZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1zd2lwZWFibGUtdmlld3MtY29yZS9saWIvZ2V0RGlzcGxheVNhbWVTbGlkZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3Qtc3dpcGVhYmxlLXZpZXdzLWNvcmUvbGliL21vZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtZHJhZ2dhYmxlL2J1aWxkL2Nqcy9EcmFnZ2FibGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NsYXNzbmFtZXMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWRyYWdnYWJsZS9idWlsZC9janMvdXRpbHMvZ2V0UHJlZml4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1kcmFnZ2FibGUvYnVpbGQvY2pzL0RyYWdnYWJsZUNvcmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2lzYXJyYXkvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlZHV4LXBlcnNpc3QvbGliL3N0b3JhZ2UvY3JlYXRlV2ViU3RvcmFnZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVkdXgtcGVyc2lzdC9saWIvc3RvcmFnZS9nZXRTdG9yYWdlLmpzIiwid2VicGFjazovLy8uL3Jlc291cmNlcy9zcmMvbGF5b3V0L2Nzcy9zdHlsZS5jc3M/OTc4OSIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanMiLCJ3ZWJwYWNrOi8vLy4vcmVzb3VyY2VzL3NyYy9sYXlvdXQvY3NzL3N0eWxlLmNzcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvZXMvY29tcG9uZW50cy9Db250ZXh0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yZWR1eC9lcy91dGlscy9iYXRjaC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvZXMvdXRpbHMvU3Vic2NyaXB0aW9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yZWR1eC9lcy9jb21wb25lbnRzL1Byb3ZpZGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yZWR1eC9lcy91dGlscy91c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yZWR1eC9lcy9jb21wb25lbnRzL2Nvbm5lY3RBZHZhbmNlZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvZXMvdXRpbHMvc2hhbGxvd0VxdWFsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yZWR1eC9lcy9jb25uZWN0L3dyYXBNYXBUb1Byb3BzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yZWR1eC9lcy9jb25uZWN0L21hcERpc3BhdGNoVG9Qcm9wcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvZXMvY29ubmVjdC9tYXBTdGF0ZVRvUHJvcHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L2VzL2Nvbm5lY3QvbWVyZ2VQcm9wcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvZXMvY29ubmVjdC9zZWxlY3RvckZhY3RvcnkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L2VzL2Nvbm5lY3QvY29ubmVjdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvZXMvaG9va3MvdXNlU2VsZWN0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L2VzL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb25uZWN0ZWQtcmVhY3Qtcm91dGVyL2VzbS9hY3Rpb25zLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZXNvbHZlLXBhdGhuYW1lL2VzbS9yZXNvbHZlLXBhdGhuYW1lLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy90aW55LWludmFyaWFudC9kaXN0L3RpbnktaW52YXJpYW50LmVzbS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaGlzdG9yeS9lc20vaGlzdG9yeS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyL2VzbS9yZWFjdC1yb3V0ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS9zdHlsZXMvbWFrZVN0eWxlcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL0dyaWQvR3JpZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL1R5cG9ncmFwaHkvVHlwb2dyYXBoeS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL0RpdmlkZXIvRGl2aWRlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL0Zvcm1Db250cm9sL2Zvcm1Db250cm9sU3RhdGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS9Gb3JtQ29udHJvbC9Gb3JtQ29udHJvbENvbnRleHQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS91dGlscy9zZXRSZWYuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS91dGlscy91c2VGb3JrUmVmLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vdXRpbHMvZGVib3VuY2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS9UZXh0YXJlYUF1dG9zaXplL1RleHRhcmVhQXV0b3NpemUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS9JbnB1dEJhc2UvdXRpbHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS9JbnB1dEJhc2UvSW5wdXRCYXNlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vSW5wdXQvSW5wdXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS9GaWxsZWRJbnB1dC9GaWxsZWRJbnB1dC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL3N0eWxlcy91c2VUaGVtZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL091dGxpbmVkSW5wdXQvTm90Y2hlZE91dGxpbmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS9PdXRsaW5lZElucHV0L091dGxpbmVkSW5wdXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS9Gb3JtQ29udHJvbC91c2VGb3JtQ29udHJvbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL0Zvcm1MYWJlbC9Gb3JtTGFiZWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS9JbnB1dExhYmVsL0lucHV0TGFiZWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS91dGlscy9pc011aUVsZW1lbnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS9Gb3JtQ29udHJvbC9Gb3JtQ29udHJvbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL0Zvcm1IZWxwZXJUZXh0L0Zvcm1IZWxwZXJUZXh0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vdXRpbHMvb3duZXJEb2N1bWVudC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL3V0aWxzL293bmVyV2luZG93LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vdXRpbHMvY3JlYXRlQ2hhaW5lZEZ1bmN0aW9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vUG9ydGFsL1BvcnRhbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL3V0aWxzL3VzZUV2ZW50Q2FsbGJhY2suanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS91dGlscy9nZXRTY3JvbGxiYXJTaXplLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vTW9kYWwvTW9kYWxNYW5hZ2VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9jbGFzc0NhbGxDaGVjay5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL1Vuc3RhYmxlX1RyYXBGb2N1cy9VbnN0YWJsZV9UcmFwRm9jdXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS9Nb2RhbC9TaW1wbGVCYWNrZHJvcC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL01vZGFsL01vZGFsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC10cmFuc2l0aW9uLWdyb3VwL2VzbS9jb25maWcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXRyYW5zaXRpb24tZ3JvdXAvZXNtL1RyYW5zaXRpb25Hcm91cENvbnRleHQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXRyYW5zaXRpb24tZ3JvdXAvZXNtL1RyYW5zaXRpb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS90cmFuc2l0aW9ucy91dGlscy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL0dyb3cvR3Jvdy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL1BhcGVyL1BhcGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vUG9wb3Zlci9Qb3BvdmVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vTGlzdC9MaXN0Q29udGV4dC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL0xpc3QvTGlzdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL01lbnVMaXN0L01lbnVMaXN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vTWVudS9NZW51LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vdXRpbHMvdXNlQ29udHJvbGxlZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL1NlbGVjdC9TZWxlY3RJbnB1dC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL3V0aWxzL2NyZWF0ZVN2Z0ljb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS9pbnRlcm5hbC9zdmctaWNvbnMvQXJyb3dEcm9wRG93bi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL05hdGl2ZVNlbGVjdC9OYXRpdmVTZWxlY3RJbnB1dC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL05hdGl2ZVNlbGVjdC9OYXRpdmVTZWxlY3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS9TZWxlY3QvU2VsZWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vVGV4dEZpZWxkL1RleHRGaWVsZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL0Zvcm1Db250cm9sTGFiZWwvRm9ybUNvbnRyb2xMYWJlbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL3V0aWxzL3VzZUlzRm9jdXNWaXNpYmxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC10cmFuc2l0aW9uLWdyb3VwL2VzbS91dGlscy9DaGlsZE1hcHBpbmcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXRyYW5zaXRpb24tZ3JvdXAvZXNtL1RyYW5zaXRpb25Hcm91cC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL0J1dHRvbkJhc2UvUmlwcGxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vQnV0dG9uQmFzZS9Ub3VjaFJpcHBsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL0J1dHRvbkJhc2UvQnV0dG9uQmFzZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL0ljb25CdXR0b24vSWNvbkJ1dHRvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL2ludGVybmFsL1N3aXRjaEJhc2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS9pbnRlcm5hbC9zdmctaWNvbnMvQ2hlY2tCb3hPdXRsaW5lQmxhbmsuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS9pbnRlcm5hbC9zdmctaWNvbnMvQ2hlY2tCb3guanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS9pbnRlcm5hbC9zdmctaWNvbnMvSW5kZXRlcm1pbmF0ZUNoZWNrQm94LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vQ2hlY2tib3gvQ2hlY2tib3guanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS9GYWIvRmFiLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vQ2FyZC9DYXJkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vaW50ZXJuYWwvc3ZnLWljb25zL0NhbmNlbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL0NoaXAvQ2hpcC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL0NhcmRBY3Rpb25BcmVhL0NhcmRBY3Rpb25BcmVhLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vQ2FyZE1lZGlhL0NhcmRNZWRpYS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL0NhcmRDb250ZW50L0NhcmRDb250ZW50LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vQ2FyZEhlYWRlci9DYXJkSGVhZGVyLmpzIiwid2VicGFjazovLy8uL3Jlc291cmNlcy9zcmMvY29tcG9uZW50cy9MZXNzb25JdGVtL0xlc3Nvbkl0ZW1CaWcuanN4Iiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vUG9wcGVyL1BvcHBlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL0xpc3RTdWJoZWFkZXIvTGlzdFN1YmhlYWRlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2xhYi9lc20vaW50ZXJuYWwvc3ZnLWljb25zL0Nsb3NlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvbGFiL2VzbS9pbnRlcm5hbC9zdmctaWNvbnMvQXJyb3dEcm9wRG93bi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL3V0aWxzL3Vuc3RhYmxlX3VzZUlkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvbGFiL2VzbS91c2VBdXRvY29tcGxldGUvdXNlQXV0b2NvbXBsZXRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvbGFiL2VzbS9BdXRvY29tcGxldGUvQXV0b2NvbXBsZXRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vQ2lyY3VsYXJQcm9ncmVzcy9DaXJjdWxhclByb2dyZXNzLmpzIiwid2VicGFjazovLy8uL3Jlc291cmNlcy9zcmMvaGVscGVycy9wcm9maWxlRGF0YS5qcyIsIndlYnBhY2s6Ly8vLi9yZXNvdXJjZXMvc3JjL2NvbXBvbmVudHMvTGVzc29uTGlzdC9MZXNzb25MaXN0LmpzeCIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL3N5c3RlbS9lc20vY3NzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvc3lzdGVtL2VzbS9jb21wb3NlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvc3lzdGVtL2VzbS9zdHlsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL3N5c3RlbS9lc20vYm9yZGVycy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL3N5c3RlbS9lc20vZGlzcGxheS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL3N5c3RlbS9lc20vZmxleGJveC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL3N5c3RlbS9lc20vZ3JpZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL3N5c3RlbS9lc20vcG9zaXRpb25zLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvc3lzdGVtL2VzbS9wYWxldHRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvc3lzdGVtL2VzbS9zaGFkb3dzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvc3lzdGVtL2VzbS9zaXppbmcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9zeXN0ZW0vZXNtL3R5cG9ncmFwaHkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9zdHlsZXMvZXNtL3N0eWxlZC9zdHlsZWQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS9zdHlsZXMvc3R5bGVkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vQm94L0JveC5qcyIsIndlYnBhY2s6Ly8vLi9yZXNvdXJjZXMvc3JjL2NvbXBvbmVudHMvTWFpblBhZ2UvTWFpblBhZ2UuanN4Iiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9uYW5vaWQvaW5kZXguYnJvd3Nlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL0lucHV0QWRvcm5tZW50L0lucHV0QWRvcm5tZW50LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vTGlzdEl0ZW0vTGlzdEl0ZW0uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS9NZW51SXRlbS9NZW51SXRlbS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL0J1dHRvbi9CdXR0b24uanMiLCJ3ZWJwYWNrOi8vLy4vcmVzb3VyY2VzL3NyYy9jb21wb25lbnRzL0NyZWF0ZUxlc3Nvbi9DcmVhdGVMZXNzb24uanN4Iiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vdXNlTWVkaWFRdWVyeS91c2VNZWRpYVF1ZXJ5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vd2l0aFdpZHRoL3dpdGhXaWR0aC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL0hpZGRlbi9IaWRkZW5Kcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL0hpZGRlbi9IaWRkZW5Dc3MuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS9IaWRkZW4vSGlkZGVuLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vRmFkZS9GYWRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vQmFja2Ryb3AvQmFja2Ryb3AuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS9TbGlkZS9TbGlkZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL0RyYXdlci9EcmF3ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS9Ob1Nzci9Ob1Nzci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL1N3aXBlYWJsZURyYXdlci9Td2lwZUFyZWEuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS9Td2lwZWFibGVEcmF3ZXIvU3dpcGVhYmxlRHJhd2VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vTGlzdEl0ZW1JY29uL0xpc3RJdGVtSWNvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL0xpc3RJdGVtVGV4dC9MaXN0SXRlbVRleHQuanMiLCJ3ZWJwYWNrOi8vLy4vcmVzb3VyY2VzL3NyYy9jb21wb25lbnRzL05hdmlnYXRpb24vTmF2aWdhdGlvbi5qc3giLCJ3ZWJwYWNrOi8vLy4vcmVzb3VyY2VzL3NyYy9jb21wb25lbnRzL0FzaWRlL0FzaWRlLmpzeCIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL1RhYmxlQ29udGFpbmVyL1RhYmxlQ29udGFpbmVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vVGFibGUvVGFibGVDb250ZXh0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vVGFibGUvVGFibGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS9UYWJsZS9UYWJsZWx2bDJDb250ZXh0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vVGFibGVIZWFkL1RhYmxlSGVhZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL1RhYmxlUm93L1RhYmxlUm93LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vVGFibGVDZWxsL1RhYmxlQ2VsbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL1RhYmxlQm9keS9UYWJsZUJvZHkuanMiLCJ3ZWJwYWNrOi8vLy4vcmVzb3VyY2VzL3NyYy9jb21wb25lbnRzL0NhcnQvQ2FydC5qc3giLCJ3ZWJwYWNrOi8vLy4vcmVzb3VyY2VzL3NyYy9jb21wb25lbnRzL0NhYmluZXQvQ2FiaW5ldC5qc3giLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS9pbnRlcm5hbC9zdmctaWNvbnMvUGVyc29uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vQXZhdGFyL0F2YXRhci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL0NhcmRBY3Rpb25zL0NhcmRBY3Rpb25zLmpzIiwid2VicGFjazovLy8uL3Jlc291cmNlcy9zcmMvY29tcG9uZW50cy9MZXNzb24vUmV2aWV3LmpzeCIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2xhYi9lc20vaW50ZXJuYWwvc3ZnLWljb25zL1N0YXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9sYWIvZXNtL1JhdGluZy9SYXRpbmcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS91dGlscy9zY3JvbGxMZWZ0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vQ29udGFpbmVyL0NvbnRhaW5lci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL0FwcEJhci9BcHBCYXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS9pbnRlcm5hbC9hbmltYXRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vVGFicy9TY3JvbGxiYXJTaXplLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vVGFicy9UYWJJbmRpY2F0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS9pbnRlcm5hbC9zdmctaWNvbnMvS2V5Ym9hcmRBcnJvd0xlZnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS9pbnRlcm5hbC9zdmctaWNvbnMvS2V5Ym9hcmRBcnJvd1JpZ2h0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vVGFiU2Nyb2xsQnV0dG9uL1RhYlNjcm9sbEJ1dHRvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL1RhYnMvVGFicy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL1RhYi9UYWIuanMiLCJ3ZWJwYWNrOi8vLy4vcmVzb3VyY2VzL3NyYy9jb21wb25lbnRzL0xlc3Nvbi9MZXNzb24uanN4Iiwid2VicGFjazovLy8uL3Jlc291cmNlcy9zcmMvYWN0aW9ucy9sZXNzb25zLmpzIiwid2VicGFjazovLy8uL3Jlc291cmNlcy9zcmMvY29udGFpbmVycy9MZXNzb25Db250YWluZXIuanN4Iiwid2VicGFjazovLy8uL3Jlc291cmNlcy9zcmMvYWN0aW9ucy9oZWFkZXIuanMiLCJ3ZWJwYWNrOi8vLy4vcmVzb3VyY2VzL3NyYy9hY3Rpb25zL3Byb2ZpbGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS9Ub29sYmFyL1Rvb2xiYXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci1kb20vZXNtL3JlYWN0LXJvdXRlci1kb20uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS9CYWRnZS9CYWRnZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL0RpYWxvZy9EaWFsb2cuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS9EaWFsb2dUaXRsZS9EaWFsb2dUaXRsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL0RpYWxvZ0NvbnRlbnQvRGlhbG9nQ29udGVudC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL0RpYWxvZ0NvbnRlbnRUZXh0L0RpYWxvZ0NvbnRlbnRUZXh0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vRGlhbG9nQWN0aW9ucy9EaWFsb2dBY3Rpb25zLmpzIiwid2VicGFjazovLy8uL3Jlc291cmNlcy9zcmMvY29tcG9uZW50cy9Qcm9maWxlL1Byb2ZpbGUuanN4Iiwid2VicGFjazovLy8uL3Jlc291cmNlcy9zcmMvY29tcG9uZW50cy9IZWFkZXIvQXV0aE1lbnUuanN4Iiwid2VicGFjazovLy8uL3Jlc291cmNlcy9zcmMvY29tcG9uZW50cy9IZWFkZXIvSGVhZGVyLmpzeCIsIndlYnBhY2s6Ly8vLi9yZXNvdXJjZXMvc3JjL2NvbnRhaW5lcnMvSGVhZGVyQ29udGFpbmVyLmpzeCIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2xhYi9lc20vaW50ZXJuYWwvc3ZnLWljb25zL1N1Y2Nlc3NPdXRsaW5lZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2xhYi9lc20vaW50ZXJuYWwvc3ZnLWljb25zL1JlcG9ydFByb2JsZW1PdXRsaW5lZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2xhYi9lc20vaW50ZXJuYWwvc3ZnLWljb25zL0Vycm9yT3V0bGluZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2xhYi9lc20vaW50ZXJuYWwvc3ZnLWljb25zL0luZm9PdXRsaW5lZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2xhYi9lc20vQWxlcnQvQWxlcnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS9Db2xsYXBzZS9Db2xsYXBzZS5qcyIsIndlYnBhY2s6Ly8vLi9yZXNvdXJjZXMvc3JjL2NvbXBvbmVudHMvQWxlcnRTaG93L0FsZXJ0U2hvdy5qc3giLCJ3ZWJwYWNrOi8vLy4vcmVzb3VyY2VzL3NyYy9jb21wb25lbnRzL0xvZ2luUGFnZS9Mb2dpblBhZ2UuanN4Iiwid2VicGFjazovLy8uL3Jlc291cmNlcy9zcmMvY29tcG9uZW50cy9BcHAvQXBwLmpzeCIsIndlYnBhY2s6Ly8vLi9yZXNvdXJjZXMvc3JjL2FjdGlvbnMvYWxlcnRzLmpzIiwid2VicGFjazovLy8uL3Jlc291cmNlcy9zcmMvY29udGFpbmVycy9BcHBDb250YWluZXIuanN4Iiwid2VicGFjazovLy8uL3Jlc291cmNlcy9zcmMvYWN0aW9ucy9jYXJ0LmpzIiwid2VicGFjazovLy8uL3Jlc291cmNlcy9zcmMvYWN0aW9ucy9pbml0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWR1eC1wZXJzaXN0L2VzL2ludGVncmF0aW9uL3JlYWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb25uZWN0ZWQtcmVhY3Qtcm91dGVyL2VzbS9zZWxlY3RvcnMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Nvbm5lY3RlZC1yZWFjdC1yb3V0ZXIvZXNtL0Nvbm5lY3RlZFJvdXRlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29ubmVjdGVkLXJlYWN0LXJvdXRlci9lc20vcmVkdWNlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29ubmVjdGVkLXJlYWN0LXJvdXRlci9lc20vc3RydWN0dXJlL3BsYWluL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb25uZWN0ZWQtcmVhY3Qtcm91dGVyL2VzbS9zdHJ1Y3R1cmUvcGxhaW4vZ2V0SW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Nvbm5lY3RlZC1yZWFjdC1yb3V0ZXIvZXNtL2luZGV4LmpzIiwid2VicGFjazovLy8uL3Jlc291cmNlcy9zcmMvcmVkdWNlcnMvcHJvZmlsZS5qcyIsIndlYnBhY2s6Ly8vLi9yZXNvdXJjZXMvc3JjL3JlZHVjZXJzL2FsZXJ0cy5qcyIsIndlYnBhY2s6Ly8vLi9yZXNvdXJjZXMvc3JjL2hlbHBlcnMvbGVzc29uQ2FyZC5qcyIsIndlYnBhY2s6Ly8vLi9yZXNvdXJjZXMvc3JjL3JlZHVjZXJzL2xlc3NvbnMuanMiLCJ3ZWJwYWNrOi8vLy4vcmVzb3VyY2VzL3NyYy9yZWR1Y2Vycy9jYXJ0LmpzIiwid2VicGFjazovLy8uL3Jlc291cmNlcy9zcmMvcmVkdWNlcnMvaGVhZGVyLmpzIiwid2VicGFjazovLy8uL3Jlc291cmNlcy9zcmMvcmVkdWNlcnMvaW5pdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVkdXgtcGVyc2lzdC9lcy9jb25zdGFudHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlZHV4LXBlcnNpc3QvZXMvc3RhdGVSZWNvbmNpbGVyL2F1dG9NZXJnZUxldmVsMS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVkdXgtcGVyc2lzdC9lcy9jcmVhdGVQZXJzaXN0b2lkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWR1eC1wZXJzaXN0L2VzL2dldFN0b3JlZFN0YXRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWR1eC1wZXJzaXN0L2VzL3B1cmdlU3RvcmVkU3RhdGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlZHV4LXBlcnNpc3QvZXMvcGVyc2lzdFJlZHVjZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlZHV4LXBlcnNpc3QvZXMvcGVyc2lzdFN0b3JlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb25uZWN0ZWQtcmVhY3Qtcm91dGVyL2VzbS9taWRkbGV3YXJlLmpzIiwid2VicGFjazovLy8uL3Jlc291cmNlcy9zcmMvbWlkZGxld2FyZXMvcmVnaXN0cmF0aW9uTWlkZGxlV2FyZS5qcyIsIndlYnBhY2s6Ly8vLi9yZXNvdXJjZXMvc3JjL3JlZHVjZXJzL2luZGV4LmpzIiwid2VicGFjazovLy8uL3Jlc291cmNlcy9zcmMvc3RvcmUuanMiLCJ3ZWJwYWNrOi8vLy4vcmVzb3VyY2VzL3NyYy9taWRkbGV3YXJlcy9hbGVydE1pZGRsZVdhcmUuanMiLCJ3ZWJwYWNrOi8vLy4vcmVzb3VyY2VzL3NyYy9taWRkbGV3YXJlcy9pbml0TWlkZGxlV2FyZS5qcyIsIndlYnBhY2s6Ly8vLi9yZXNvdXJjZXMvc3JjL2luZGV4LmpzeCIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL3V0aWxzL2VzbS9kZWVwbWVyZ2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9zdHlsZXMvZXNtL21lcmdlQ2xhc3Nlcy9tZXJnZUNsYXNzZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9zdHlsZXMvZXNtL2dldFRoZW1lUHJvcHMvZ2V0VGhlbWVQcm9wcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaXMtaW4tYnJvd3Nlci9kaXN0L21vZHVsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvanNzL2Rpc3QvanNzLmVzbS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL3N0eWxlcy9lc20vbWFrZVN0eWxlcy9tdWx0aUtleVN0b3JlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvc3R5bGVzL2VzbS9UaGVtZVByb3ZpZGVyL25lc3RlZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL3N0eWxlcy9lc20vY3JlYXRlR2VuZXJhdGVDbGFzc05hbWUvY3JlYXRlR2VuZXJhdGVDbGFzc05hbWUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2pzcy1wbHVnaW4tcnVsZS12YWx1ZS1mdW5jdGlvbi9kaXN0L2pzcy1wbHVnaW4tcnVsZS12YWx1ZS1mdW5jdGlvbi5lc20uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2pzcy1wbHVnaW4tZ2xvYmFsL2Rpc3QvanNzLXBsdWdpbi1nbG9iYWwuZXNtLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9qc3MtcGx1Z2luLW5lc3RlZC9kaXN0L2pzcy1wbHVnaW4tbmVzdGVkLmVzbS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaHlwaGVuYXRlLXN0eWxlLW5hbWUvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2pzcy1wbHVnaW4tY2FtZWwtY2FzZS9kaXN0L2pzcy1wbHVnaW4tY2FtZWwtY2FzZS5lc20uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2pzcy1wbHVnaW4tZGVmYXVsdC11bml0L2Rpc3QvanNzLXBsdWdpbi1kZWZhdWx0LXVuaXQuZXNtLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jc3MtdmVuZG9yL2Rpc3QvY3NzLXZlbmRvci5lc20uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2pzcy1wbHVnaW4tdmVuZG9yLXByZWZpeGVyL2Rpc3QvanNzLXBsdWdpbi12ZW5kb3ItcHJlZml4ZXIuZXNtLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9qc3MtcGx1Z2luLXByb3BzLXNvcnQvZGlzdC9qc3MtcGx1Z2luLXByb3BzLXNvcnQuZXNtLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvc3R5bGVzL2VzbS9qc3NQcmVzZXQvanNzUHJlc2V0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvc3R5bGVzL2VzbS9TdHlsZXNQcm92aWRlci9TdHlsZXNQcm92aWRlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL3N0eWxlcy9lc20vbWFrZVN0eWxlcy9pbmRleENvdW50ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9zdHlsZXMvZXNtL2dldFN0eWxlc0NyZWF0b3IvZ2V0U3R5bGVzQ3JlYXRvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL3N0eWxlcy9lc20vZ2V0U3R5bGVzQ3JlYXRvci9ub29wVGhlbWUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9zdHlsZXMvZXNtL21ha2VTdHlsZXMvbWFrZVN0eWxlcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL3N0eWxlcy9lc20vdXNlVGhlbWUvVGhlbWVDb250ZXh0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvc3R5bGVzL2VzbS91c2VUaGVtZS91c2VUaGVtZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL3N5c3RlbS9lc20vc3BhY2luZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL3N5c3RlbS9lc20vbWVtb2l6ZS5qcyJdLCJuYW1lcyI6WyJpbnN0YWxsZWRNb2R1bGVzIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiZXhwb3J0cyIsIm1vZHVsZSIsImkiLCJsIiwibW9kdWxlcyIsImNhbGwiLCJtIiwiYyIsImQiLCJuYW1lIiwiZ2V0dGVyIiwibyIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImdldCIsInIiLCJTeW1ib2wiLCJ0b1N0cmluZ1RhZyIsInZhbHVlIiwidCIsIm1vZGUiLCJfX2VzTW9kdWxlIiwibnMiLCJjcmVhdGUiLCJrZXkiLCJiaW5kIiwibiIsIm9iamVjdCIsInByb3BlcnR5IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJwIiwicyIsIl9leHRlbmRzIiwiYXNzaWduIiwidGFyZ2V0IiwiYXJndW1lbnRzIiwibGVuZ3RoIiwic291cmNlIiwiYXBwbHkiLCJ0aGlzIiwiX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIiwiZXhjbHVkZWQiLCJnZXRPd25Qcm9wZXJ0eVN5bWJvbHMiLCJzb3VyY2VTeW1ib2xLZXlzIiwiaW5kZXhPZiIsInByb3BlcnR5SXNFbnVtZXJhYmxlIiwidG9WYWwiLCJtaXgiLCJrIiwieSIsInN0ciIsIkFycmF5IiwiaXNBcnJheSIsInRtcCIsIngiLCJzdHlsZXNPckNyZWF0b3IiLCJvcHRpb25zIiwidW5kZWZpbmVkIiwiQ29tcG9uZW50IiwiZGVmYXVsdFRoZW1lIiwiX29wdGlvbnMkd2l0aFRoZW1lIiwid2l0aFRoZW1lIiwic3R5bGVzT3B0aW9ucyIsImNsYXNzTmFtZVByZWZpeCIsInVzZVN0eWxlcyIsIm1ha2VTdHlsZXMiLCJkaXNwbGF5TmFtZSIsIldpdGhTdHlsZXMiLCJmb3J3YXJkUmVmIiwicHJvcHMiLCJyZWYiLCJjbGFzc2VzIiwidGhlbWUiLCJpbm5lclJlZiIsIm90aGVyIiwiZGVmYXVsdFByb3BzIiwibW9yZSIsInVzZVRoZW1lIiwiZ2V0VGhlbWVQcm9wcyIsImNyZWF0ZUVsZW1lbnQiLCJjYXBpdGFsaXplIiwic3RyaW5nIiwiRXJyb3IiLCJjaGFyQXQiLCJ0b1VwcGVyQ2FzZSIsInNsaWNlIiwiX2RlZmluZVByb3BlcnR5Iiwib2JqIiwiY29uZmlndXJhYmxlIiwid3JpdGFibGUiLCJjbGFtcCIsIm1pbiIsIm1heCIsIk1hdGgiLCJkZWNvbXBvc2VDb2xvciIsImNvbG9yIiwidHlwZSIsInN1YnN0ciIsInJlIiwiUmVnRXhwIiwiY29uY2F0IiwiY29sb3JzIiwibWF0Y2giLCJtYXAiLCJpbmRleCIsInBhcnNlSW50Iiwicm91bmQiLCJqb2luIiwiaGV4VG9SZ2IiLCJtYXJrZXIiLCJzdWJzdHJpbmciLCJ2YWx1ZXMiLCJzcGxpdCIsInBhcnNlRmxvYXQiLCJyZWNvbXBvc2VDb2xvciIsImdldENvbnRyYXN0UmF0aW8iLCJmb3JlZ3JvdW5kIiwiYmFja2dyb3VuZCIsImx1bUEiLCJnZXRMdW1pbmFuY2UiLCJsdW1CIiwicmdiIiwiaCIsImEiLCJmIiwicHVzaCIsImhzbFRvUmdiIiwidmFsIiwicG93IiwiTnVtYmVyIiwidG9GaXhlZCIsImVtcGhhc2l6ZSIsImNvZWZmaWNpZW50IiwiZGFya2VuIiwibGlnaHRlbiIsImZhZGUiLCJjaGVja0RDRSIsIl9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXyIsImVyciIsImNvbnNvbGUiLCJlcnJvciIsIl9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIiwic291cmNlS2V5cyIsImtleXMiLCJfaW5oZXJpdHNMb29zZSIsInN1YkNsYXNzIiwic3VwZXJDbGFzcyIsImNvbnN0cnVjdG9yIiwiX19wcm90b19fIiwiZWFzaW5nIiwiZWFzZUluT3V0IiwiZWFzZU91dCIsImVhc2VJbiIsInNoYXJwIiwiZHVyYXRpb24iLCJzaG9ydGVzdCIsInNob3J0ZXIiLCJzaG9ydCIsInN0YW5kYXJkIiwiY29tcGxleCIsImVudGVyaW5nU2NyZWVuIiwibGVhdmluZ1NjcmVlbiIsImZvcm1hdE1zIiwibWlsbGlzZWNvbmRzIiwiX29wdGlvbnMkZHVyYXRpb24iLCJkdXJhdGlvbk9wdGlvbiIsIl9vcHRpb25zJGVhc2luZyIsImVhc2luZ09wdGlvbiIsIl9vcHRpb25zJGRlbGF5IiwiZGVsYXkiLCJhbmltYXRlZFByb3AiLCJnZXRBdXRvSGVpZ2h0RHVyYXRpb24iLCJoZWlnaHQiLCJjb25zdGFudCIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJkZWZhdWx0IiwicGF0aCIsIl9yZWFjdCIsIm1lbW8iLCJfU3ZnSWNvbiIsIl9leHRlbmRzMiIsIm11aU5hbWUiLCJfc2xpY2VkVG9BcnJheSIsImFyciIsImFycmF5V2l0aEhvbGVzIiwiaXRlcmF0b3IiLCJfYXJyIiwiX24iLCJfZCIsIl9lIiwiX3MiLCJfaSIsIm5leHQiLCJkb25lIiwidW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkiLCJub25JdGVyYWJsZVJlc3QiLCJyYW5kb21TdHJpbmciLCJyYW5kb20iLCJ0b1N0cmluZyIsIkFjdGlvblR5cGVzIiwiSU5JVCIsIlJFUExBQ0UiLCJQUk9CRV9VTktOT1dOX0FDVElPTiIsImlzUGxhaW5PYmplY3QiLCJwcm90byIsImdldFByb3RvdHlwZU9mIiwiY3JlYXRlU3RvcmUiLCJyZWR1Y2VyIiwicHJlbG9hZGVkU3RhdGUiLCJlbmhhbmNlciIsIl9yZWYyIiwiY3VycmVudFJlZHVjZXIiLCJjdXJyZW50U3RhdGUiLCJjdXJyZW50TGlzdGVuZXJzIiwibmV4dExpc3RlbmVycyIsImlzRGlzcGF0Y2hpbmciLCJlbnN1cmVDYW5NdXRhdGVOZXh0TGlzdGVuZXJzIiwiZ2V0U3RhdGUiLCJzdWJzY3JpYmUiLCJsaXN0ZW5lciIsImlzU3Vic2NyaWJlZCIsInNwbGljZSIsImRpc3BhdGNoIiwiYWN0aW9uIiwibGlzdGVuZXJzIiwicmVwbGFjZVJlZHVjZXIiLCJuZXh0UmVkdWNlciIsIm9ic2VydmFibGUiLCJfcmVmIiwib3V0ZXJTdWJzY3JpYmUiLCJvYnNlcnZlciIsIlR5cGVFcnJvciIsIm9ic2VydmVTdGF0ZSIsInVuc3Vic2NyaWJlIiwiZ2V0VW5kZWZpbmVkU3RhdGVFcnJvck1lc3NhZ2UiLCJhY3Rpb25UeXBlIiwiU3RyaW5nIiwiY29tYmluZVJlZHVjZXJzIiwicmVkdWNlcnMiLCJyZWR1Y2VyS2V5cyIsImZpbmFsUmVkdWNlcnMiLCJzaGFwZUFzc2VydGlvbkVycm9yIiwiZmluYWxSZWR1Y2VyS2V5cyIsImZvckVhY2giLCJhc3NlcnRSZWR1Y2VyU2hhcGUiLCJlIiwic3RhdGUiLCJoYXNDaGFuZ2VkIiwibmV4dFN0YXRlIiwiX2tleSIsInByZXZpb3VzU3RhdGVGb3JLZXkiLCJuZXh0U3RhdGVGb3JLZXkiLCJlcnJvck1lc3NhZ2UiLCJiaW5kQWN0aW9uQ3JlYXRvciIsImFjdGlvbkNyZWF0b3IiLCJiaW5kQWN0aW9uQ3JlYXRvcnMiLCJhY3Rpb25DcmVhdG9ycyIsImJvdW5kQWN0aW9uQ3JlYXRvcnMiLCJvd25LZXlzIiwiZW51bWVyYWJsZU9ubHkiLCJmaWx0ZXIiLCJzeW0iLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJfb2JqZWN0U3ByZWFkMiIsImdldE93blByb3BlcnR5RGVzY3JpcHRvcnMiLCJkZWZpbmVQcm9wZXJ0aWVzIiwiY29tcG9zZSIsIl9sZW4iLCJmdW5jcyIsImFyZyIsInJlZHVjZSIsImIiLCJhcHBseU1pZGRsZXdhcmUiLCJtaWRkbGV3YXJlcyIsInN0b3JlIiwiX2Rpc3BhdGNoIiwibWlkZGxld2FyZUFQSSIsImNoYWluIiwibWlkZGxld2FyZSIsInJlYWN0SXMiLCJSRUFDVF9TVEFUSUNTIiwiY2hpbGRDb250ZXh0VHlwZXMiLCJjb250ZXh0VHlwZSIsImNvbnRleHRUeXBlcyIsImdldERlZmF1bHRQcm9wcyIsImdldERlcml2ZWRTdGF0ZUZyb21FcnJvciIsImdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyIsIm1peGlucyIsInByb3BUeXBlcyIsIktOT1dOX1NUQVRJQ1MiLCJjYWxsZXIiLCJjYWxsZWUiLCJhcml0eSIsIk1FTU9fU1RBVElDUyIsImNvbXBhcmUiLCJUWVBFX1NUQVRJQ1MiLCJnZXRTdGF0aWNzIiwiY29tcG9uZW50IiwiaXNNZW1vIiwiRm9yd2FyZFJlZiIsInJlbmRlciIsIk1lbW8iLCJnZXRPd25Qcm9wZXJ0eU5hbWVzIiwib2JqZWN0UHJvdG90eXBlIiwiaG9pc3ROb25SZWFjdFN0YXRpY3MiLCJ0YXJnZXRDb21wb25lbnQiLCJzb3VyY2VDb21wb25lbnQiLCJibGFja2xpc3QiLCJpbmhlcml0ZWRDb21wb25lbnQiLCJ0YXJnZXRTdGF0aWNzIiwic291cmNlU3RhdGljcyIsImRlc2NyaXB0b3IiLCJjcmVhdGVCcmVha3BvaW50cyIsImJyZWFrcG9pbnRzIiwiX2JyZWFrcG9pbnRzJHZhbHVlcyIsInhzIiwic20iLCJtZCIsImxnIiwieGwiLCJfYnJlYWtwb2ludHMkdW5pdCIsInVuaXQiLCJfYnJlYWtwb2ludHMkc3RlcCIsInN0ZXAiLCJ1cCIsImJldHdlZW4iLCJzdGFydCIsImVuZCIsImVuZEluZGV4IiwiZG93biIsInVwcGVyYm91bmQiLCJvbmx5Iiwid2lkdGgiLCJfdG9Db25zdW1hYmxlQXJyYXkiLCJhcnJheUxpa2VUb0FycmF5IiwiaXRlcmFibGVUb0FycmF5IiwiY29uZGl0aW9uIiwibWVzc2FnZSIsIl90eXBlb2YiLCJhY2MiLCJpdGVtIiwiY2xvbmUiLCJjcmVhdGVNaXhpbnMiLCJzcGFjaW5nIiwiX3Rvb2xiYXIiLCJndXR0ZXJzIiwic3R5bGVzIiwicGFkZGluZ0xlZnQiLCJwYWRkaW5nUmlnaHQiLCJ0b29sYmFyIiwibWluSGVpZ2h0IiwiYmxhY2siLCJ3aGl0ZSIsIjUwIiwiMTAwIiwiMjAwIiwiMzAwIiwiNDAwIiwiNTAwIiwiNjAwIiwiNzAwIiwiODAwIiwiOTAwIiwiQTEwMCIsIkEyMDAiLCJBNDAwIiwiQTcwMCIsImxpZ2h0IiwidGV4dCIsInByaW1hcnkiLCJzZWNvbmRhcnkiLCJkaXNhYmxlZCIsImhpbnQiLCJkaXZpZGVyIiwicGFwZXIiLCJhY3RpdmUiLCJob3ZlciIsImhvdmVyT3BhY2l0eSIsInNlbGVjdGVkIiwic2VsZWN0ZWRPcGFjaXR5IiwiZGlzYWJsZWRCYWNrZ3JvdW5kIiwiZGlzYWJsZWRPcGFjaXR5IiwiZm9jdXMiLCJmb2N1c09wYWNpdHkiLCJhY3RpdmF0ZWRPcGFjaXR5IiwiZGFyayIsImljb24iLCJhZGRMaWdodE9yRGFyayIsImludGVudCIsImRpcmVjdGlvbiIsInNoYWRlIiwidG9uYWxPZmZzZXQiLCJ0b25hbE9mZnNldExpZ2h0IiwidG9uYWxPZmZzZXREYXJrIiwibWFpbiIsImNyZWF0ZVBhbGV0dGUiLCJwYWxldHRlIiwiX3BhbGV0dGUkcHJpbWFyeSIsIl9wYWxldHRlJHNlY29uZGFyeSIsIl9wYWxldHRlJGVycm9yIiwiX3BhbGV0dGUkd2FybmluZyIsIndhcm5pbmciLCJfcGFsZXR0ZSRpbmZvIiwiaW5mbyIsIl9wYWxldHRlJHN1Y2Nlc3MiLCJzdWNjZXNzIiwiZ3JlZW4iLCJfcGFsZXR0ZSR0eXBlIiwiX3BhbGV0dGUkY29udHJhc3RUaHJlIiwiY29udHJhc3RUaHJlc2hvbGQiLCJfcGFsZXR0ZSR0b25hbE9mZnNldCIsImdldENvbnRyYXN0VGV4dCIsImF1Z21lbnRDb2xvciIsIm1haW5TaGFkZSIsImxpZ2h0U2hhZGUiLCJkYXJrU2hhZGUiLCJKU09OIiwic3RyaW5naWZ5IiwiY29udHJhc3RUZXh0IiwidHlwZXMiLCJkZWVwbWVyZ2UiLCJjb21tb24iLCJncmV5IiwiY2FzZUFsbENhcHMiLCJ0ZXh0VHJhbnNmb3JtIiwiY3JlYXRlVHlwb2dyYXBoeSIsInR5cG9ncmFwaHkiLCJfcmVmJGZvbnRGYW1pbHkiLCJmb250RmFtaWx5IiwiX3JlZiRmb250U2l6ZSIsImZvbnRTaXplIiwiX3JlZiRmb250V2VpZ2h0TGlnaHQiLCJmb250V2VpZ2h0TGlnaHQiLCJfcmVmJGZvbnRXZWlnaHRSZWd1bGEiLCJmb250V2VpZ2h0UmVndWxhciIsIl9yZWYkZm9udFdlaWdodE1lZGl1bSIsImZvbnRXZWlnaHRNZWRpdW0iLCJfcmVmJGZvbnRXZWlnaHRCb2xkIiwiZm9udFdlaWdodEJvbGQiLCJfcmVmJGh0bWxGb250U2l6ZSIsImh0bWxGb250U2l6ZSIsImFsbFZhcmlhbnRzIiwicHhUb1JlbTIiLCJweFRvUmVtIiwiY29lZiIsInNpemUiLCJidWlsZFZhcmlhbnQiLCJmb250V2VpZ2h0IiwibGluZUhlaWdodCIsImxldHRlclNwYWNpbmciLCJjYXNpbmciLCJ2YXJpYW50cyIsImgxIiwiaDIiLCJoMyIsImg0IiwiaDUiLCJoNiIsInN1YnRpdGxlMSIsInN1YnRpdGxlMiIsImJvZHkxIiwiYm9keTIiLCJidXR0b24iLCJjYXB0aW9uIiwib3ZlcmxpbmUiLCJjcmVhdGVTaGFkb3ciLCJib3JkZXJSYWRpdXMiLCJjcmVhdGVTcGFjaW5nIiwic3BhY2luZ0lucHV0IiwibXVpIiwidHJhbnNmb3JtIiwiYXJncyIsImFyZ3VtZW50Iiwib3V0cHV0IiwiX29wdGlvbnMkYnJlYWtwb2ludHMiLCJicmVha3BvaW50c0lucHV0IiwiX29wdGlvbnMkbWl4aW5zIiwibWl4aW5zSW5wdXQiLCJfb3B0aW9ucyRwYWxldHRlIiwicGFsZXR0ZUlucHV0IiwiX29wdGlvbnMkdHlwb2dyYXBoeSIsInR5cG9ncmFwaHlJbnB1dCIsIm11aVRoZW1lIiwib3ZlcnJpZGVzIiwic2hhZG93cyIsInNoYXBlIiwidHJhbnNpdGlvbnMiLCJ6SW5kZXgiLCJ3ZWJwYWNrUG9seWZpbGwiLCJkZXByZWNhdGUiLCJwYXRocyIsImNoaWxkcmVuIiwiX193ZWJwYWNrX2FtZF9vcHRpb25zX18iLCJfZGVmYXVsdCIsIl9kZWZpbmVQcm9wZXJ0aWVzIiwiX2NyZWF0ZUNsYXNzIiwiQ29uc3RydWN0b3IiLCJwcm90b1Byb3BzIiwic3RhdGljUHJvcHMiLCJfYXNzZXJ0VGhpc0luaXRpYWxpemVkIiwic2VsZiIsIlJlZmVyZW5jZUVycm9yIiwiX2FycmF5TGlrZVRvQXJyYXkiLCJsZW4iLCJhcnIyIiwiZyIsIkZ1bmN0aW9uIiwid2luZG93IiwiZmluZEluQXJyYXkiLCJhcnJheSIsImNhbGxiYWNrIiwiaXNGdW5jdGlvbiIsImZ1bmMiLCJpc051bSIsIm51bSIsImlzTmFOIiwiaW50IiwiZG9udFNldE1lIiwicHJvcE5hbWUiLCJjb21wb25lbnROYW1lIiwiX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5IiwibWluTGVuIiwiZnJvbSIsInRlc3QiLCJkZWZhdWx0QnJlYWtwb2ludHMiLCJoYW5kbGVCcmVha3BvaW50cyIsInByb3BWYWx1ZSIsInN0eWxlRnJvbVByb3BWYWx1ZSIsInRoZW1lQnJlYWtwb2ludHMiLCJfdGhlbWVCcmVha3BvaW50cyIsImJyZWFrcG9pbnQiLCJtb2JpbGVTdGVwcGVyIiwic3BlZWREaWFsIiwiYXBwQmFyIiwiZHJhd2VyIiwibW9kYWwiLCJzbmFja2JhciIsInRvb2x0aXAiLCJfX2ltcG9ydERlZmF1bHQiLCJtb2QiLCJBdmF0YXJHZW5lcmF0b3IiLCJzZWVkcmFuZG9tXzEiLCJnZW5lcmF0ZVJhbmRvbUF2YXRhciIsInNlZWQiLCJ0b3BUeXBlT3B0aW9ucyIsImFjY2Vzc29yaWVzVHlwZU9wdGlvbnMiLCJmYWNpYWxIYWlyVHlwZU9wdGlvbnMiLCJmYWNpYWxIYWlyQ29sb3JPcHRpb25zIiwiY2xvdGhlVHlwZU9wdGlvbnMiLCJleWVUeXBlT3B0aW9ucyIsImV5ZWJyb3dUeXBlT3B0aW9ucyIsIm1vdXRoVHlwZU9wdGlvbnMiLCJza2luQ29sb3JPcHRpb25zIiwiaGFpckNvbG9yVHlwZXMiLCJoYXRDb2xvck9wdGlvbnMiLCJjbG90aGVDb2xvck9wdGlvbnMiLCJybmciLCJmbG9vciIsIkZyYWdtZW50IiwibWF0Y2hlc1NlbGVjdG9yIiwibWF0Y2hlc1NlbGVjdG9yQW5kUGFyZW50c1RvIiwiZWwiLCJzZWxlY3RvciIsImJhc2VOb2RlIiwibm9kZSIsInBhcmVudE5vZGUiLCJhZGRFdmVudCIsImV2ZW50IiwiaGFuZGxlciIsImlucHV0T3B0aW9ucyIsIl9vYmplY3RTcHJlYWQiLCJjYXB0dXJlIiwiYWRkRXZlbnRMaXN0ZW5lciIsImF0dGFjaEV2ZW50IiwicmVtb3ZlRXZlbnQiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiZGV0YWNoRXZlbnQiLCJvdXRlckhlaWdodCIsImNsaWVudEhlaWdodCIsImNvbXB1dGVkU3R5bGUiLCJvd25lckRvY3VtZW50IiwiZGVmYXVsdFZpZXciLCJnZXRDb21wdXRlZFN0eWxlIiwiX3NoaW1zIiwiYm9yZGVyVG9wV2lkdGgiLCJib3JkZXJCb3R0b21XaWR0aCIsIm91dGVyV2lkdGgiLCJjbGllbnRXaWR0aCIsImJvcmRlckxlZnRXaWR0aCIsImJvcmRlclJpZ2h0V2lkdGgiLCJpbm5lckhlaWdodCIsInBhZGRpbmdUb3AiLCJwYWRkaW5nQm90dG9tIiwiaW5uZXJXaWR0aCIsIm9mZnNldFhZRnJvbVBhcmVudCIsImV2dCIsIm9mZnNldFBhcmVudCIsInNjYWxlIiwib2Zmc2V0UGFyZW50UmVjdCIsImJvZHkiLCJsZWZ0IiwidG9wIiwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0IiwiY2xpZW50WCIsInNjcm9sbExlZnQiLCJjbGllbnRZIiwic2Nyb2xsVG9wIiwiY3JlYXRlQ1NTVHJhbnNmb3JtIiwiY29udHJvbFBvcyIsInBvc2l0aW9uT2Zmc2V0IiwidHJhbnNsYXRpb24iLCJnZXRUcmFuc2xhdGlvbiIsIl9nZXRQcmVmaXgiLCJicm93c2VyUHJlZml4VG9LZXkiLCJjcmVhdGVTVkdUcmFuc2Zvcm0iLCJnZXRUb3VjaCIsImlkZW50aWZpZXIiLCJ0YXJnZXRUb3VjaGVzIiwiY2hhbmdlZFRvdWNoZXMiLCJnZXRUb3VjaElkZW50aWZpZXIiLCJhZGRVc2VyU2VsZWN0U3R5bGVzIiwiZG9jIiwic3R5bGVFbCIsImdldEVsZW1lbnRCeUlkIiwiaWQiLCJpbm5lckhUTUwiLCJnZXRFbGVtZW50c0J5VGFnTmFtZSIsImFwcGVuZENoaWxkIiwiYWRkQ2xhc3NOYW1lIiwicmVtb3ZlVXNlclNlbGVjdFN0eWxlcyIsInJlbW92ZUNsYXNzTmFtZSIsInNlbGVjdGlvbiIsImVtcHR5IiwiZ2V0U2VsZWN0aW9uIiwicmVtb3ZlQWxsUmFuZ2VzIiwiY2FjaGUiLCJfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUiLCJoYXMiLCJuZXdPYmoiLCJoYXNQcm9wZXJ0eURlc2NyaXB0b3IiLCJkZXNjIiwic2V0IiwiX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQiLCJXZWFrTWFwIiwic3ltYm9scyIsIm1hdGNoZXNTZWxlY3RvckZ1bmMiLCJtZXRob2QiLCJ1bml0U3VmZml4IiwiZGVmYXVsdFgiLCJkZWZhdWx0WSIsImNsYXNzTmFtZSIsImNsYXNzTGlzdCIsImFkZCIsInJlbW92ZSIsInJlcGxhY2UiLCJyb290IiwiZ2xvYmFsIiwicmVzdWx0IiwiY29tbW9uanNHbG9iYWwiLCJnbG9iYWxUaGlzIiwiY3JlYXRlRXZlbnRFbWl0dGVyIiwiaGFuZGxlcnMiLCJvbiIsIm9mZiIsIm5ld1ZhbHVlIiwiY2hhbmdlZEJpdHMiLCJjcmVhdGVDb250ZXh0IiwiZGVmYXVsdFZhbHVlIiwiY2FsY3VsYXRlQ2hhbmdlZEJpdHMiLCJfUHJvdmlkZXIkY2hpbGRDb250ZXgiLCJfQ29uc3VtZXIkY29udGV4dFR5cGUiLCJjb250ZXh0UHJvcCIsIlByb3ZpZGVyIiwiX0NvbXBvbmVudCIsIl90aGlzIiwiZW1pdHRlciIsIl9wcm90byIsImdldENoaWxkQ29udGV4dCIsImNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMiLCJuZXh0UHJvcHMiLCJvbGRWYWx1ZSIsImlzUmVxdWlyZWQiLCJDb25zdW1lciIsIl9Db21wb25lbnQyIiwiX3RoaXMyIiwiZ2V0VmFsdWUiLCJvblVwZGF0ZSIsIm9ic2VydmVkQml0cyIsInNldFN0YXRlIiwiX3Byb3RvMiIsImNvbXBvbmVudERpZE1vdW50IiwiY29udGV4dCIsImNvbXBvbmVudFdpbGxVbm1vdW50IiwiaXNhcnJheSIsInBhdGhUb1JlZ2V4cCIsInBhcnNlIiwiY29tcGlsZSIsInRva2Vuc1RvRnVuY3Rpb24iLCJ0b2tlbnNUb1JlZ0V4cCIsIlBBVEhfUkVHRVhQIiwicmVzIiwidG9rZW5zIiwiZGVmYXVsdERlbGltaXRlciIsImRlbGltaXRlciIsImV4ZWMiLCJlc2NhcGVkIiwib2Zmc2V0IiwicHJlZml4IiwiZ3JvdXAiLCJtb2RpZmllciIsImFzdGVyaXNrIiwicGFydGlhbCIsInJlcGVhdCIsIm9wdGlvbmFsIiwicGF0dGVybiIsImVzY2FwZUdyb3VwIiwiZXNjYXBlU3RyaW5nIiwiZW5jb2RlVVJJQ29tcG9uZW50UHJldHR5IiwiZW5jb2RlVVJJIiwiY2hhckNvZGVBdCIsIm1hdGNoZXMiLCJmbGFncyIsIm9wdHMiLCJkYXRhIiwiZW5jb2RlIiwicHJldHR5IiwiZW5jb2RlVVJJQ29tcG9uZW50IiwidG9rZW4iLCJzZWdtZW50IiwiaiIsImF0dGFjaEtleXMiLCJzZW5zaXRpdmUiLCJzdHJpY3QiLCJyb3V0ZSIsImVuZHNXaXRoRGVsaW1pdGVyIiwiZ3JvdXBzIiwicmVnZXhwVG9SZWdleHAiLCJwYXJ0cyIsImFycmF5VG9SZWdleHAiLCJzdHJpbmdUb1JlZ2V4cCIsInByb3BJc0VudW1lcmFibGUiLCJ0b09iamVjdCIsInRlc3QxIiwidGVzdDIiLCJmcm9tQ2hhckNvZGUiLCJ0ZXN0MyIsImxldHRlciIsInNob3VsZFVzZU5hdGl2ZSIsInRvIiwiU3ZnSWNvbiIsIl9wcm9wcyRjb2xvciIsIl9wcm9wcyRjb21wb25lbnQiLCJfcHJvcHMkZm9udFNpemUiLCJodG1sQ29sb3IiLCJ0aXRsZUFjY2VzcyIsIl9wcm9wcyR2aWV3Qm94Iiwidmlld0JveCIsImZvY3VzYWJsZSIsInJvbGUiLCJ1c2VyU2VsZWN0IiwiZGlzcGxheSIsImZpbGwiLCJmbGV4U2hyaW5rIiwidHJhbnNpdGlvbiIsImNvbG9yUHJpbWFyeSIsImNvbG9yU2Vjb25kYXJ5IiwiY29sb3JBY3Rpb24iLCJjb2xvckVycm9yIiwiY29sb3JEaXNhYmxlZCIsImZvbnRTaXplSW5oZXJpdCIsImZvbnRTaXplU21hbGwiLCJmb250U2l6ZUxhcmdlIiwiUkVTSVNUQU5DRV9DT0VGIiwiVU5DRVJUQUlOVFlfVEhSRVNIT0xEIiwiZ2V0Qm91bmRQb3NpdGlvbiIsImRyYWdnYWJsZSIsImJvdW5kcyIsInJpZ2h0IiwiYm90dG9tIiwiY2xvbmVCb3VuZHMiLCJmaW5kRE9NTm9kZSIsImJvdW5kTm9kZSIsIm93bmVyV2luZG93IiwicXVlcnlTZWxlY3RvciIsIkhUTUxFbGVtZW50Iiwibm9kZVN0eWxlIiwiYm91bmROb2RlU3R5bGUiLCJvZmZzZXRMZWZ0IiwibWFyZ2luTGVmdCIsIm9mZnNldFRvcCIsIm1hcmdpblRvcCIsIl9kb21GbnMiLCJtYXJnaW5SaWdodCIsIm1hcmdpbkJvdHRvbSIsInNuYXBUb0dyaWQiLCJncmlkIiwicGVuZGluZ1giLCJwZW5kaW5nWSIsImNhbkRyYWdYIiwiYXhpcyIsImNhbkRyYWdZIiwiZ2V0Q29udHJvbFBvc2l0aW9uIiwidG91Y2hJZGVudGlmaWVyIiwiZHJhZ2dhYmxlQ29yZSIsInRvdWNoT2JqIiwiY3JlYXRlQ29yZURhdGEiLCJpc1N0YXJ0IiwibGFzdFgiLCJkZWx0YVgiLCJkZWx0YVkiLCJsYXN0WSIsImNyZWF0ZURyYWdnYWJsZURhdGEiLCJjb3JlRGF0YSIsInN5bWJvbE9ic2VydmFibGVQb255ZmlsbCIsIl9pdGVyYWJsZVRvQXJyYXkiLCJpdGVyIiwiX2FycmF5V2l0aEhvbGVzIiwiX25vbkl0ZXJhYmxlUmVzdCIsImlzQnJvd3NlciIsImRvY3VtZW50IiwibmF2aWdhdG9yIiwidGltZW91dER1cmF0aW9uIiwibG9uZ2VyVGltZW91dEJyb3dzZXJzIiwidXNlckFnZW50IiwiZGVib3VuY2UiLCJQcm9taXNlIiwiZm4iLCJjYWxsZWQiLCJyZXNvbHZlIiwidGhlbiIsInNjaGVkdWxlZCIsInNldFRpbWVvdXQiLCJmdW5jdGlvblRvQ2hlY2siLCJnZXRTdHlsZUNvbXB1dGVkUHJvcGVydHkiLCJlbGVtZW50Iiwibm9kZVR5cGUiLCJjc3MiLCJnZXRQYXJlbnROb2RlIiwibm9kZU5hbWUiLCJob3N0IiwiZ2V0U2Nyb2xsUGFyZW50IiwiX2dldFN0eWxlQ29tcHV0ZWRQcm9wIiwib3ZlcmZsb3ciLCJvdmVyZmxvd1giLCJvdmVyZmxvd1kiLCJnZXRSZWZlcmVuY2VOb2RlIiwicmVmZXJlbmNlIiwicmVmZXJlbmNlTm9kZSIsImlzSUUxMSIsIk1TSW5wdXRNZXRob2RDb250ZXh0IiwiZG9jdW1lbnRNb2RlIiwiaXNJRTEwIiwiaXNJRSIsInZlcnNpb24iLCJnZXRPZmZzZXRQYXJlbnQiLCJkb2N1bWVudEVsZW1lbnQiLCJub09mZnNldFBhcmVudCIsIm5leHRFbGVtZW50U2libGluZyIsImdldFJvb3QiLCJmaW5kQ29tbW9uT2Zmc2V0UGFyZW50IiwiZWxlbWVudDEiLCJlbGVtZW50MiIsIm9yZGVyIiwiY29tcGFyZURvY3VtZW50UG9zaXRpb24iLCJOb2RlIiwiRE9DVU1FTlRfUE9TSVRJT05fRk9MTE9XSU5HIiwicmFuZ2UiLCJjcmVhdGVSYW5nZSIsInNldFN0YXJ0Iiwic2V0RW5kIiwiY29tbW9uQW5jZXN0b3JDb250YWluZXIiLCJjb250YWlucyIsImZpcnN0RWxlbWVudENoaWxkIiwiZWxlbWVudDFyb290IiwiZ2V0U2Nyb2xsIiwic2lkZSIsInVwcGVyU2lkZSIsImh0bWwiLCJzY3JvbGxpbmdFbGVtZW50IiwiaW5jbHVkZVNjcm9sbCIsInJlY3QiLCJzdWJ0cmFjdCIsImdldEJvcmRlcnNTaXplIiwic2lkZUEiLCJzaWRlQiIsImdldFNpemUiLCJnZXRXaW5kb3dTaXplcyIsImNsYXNzQ2FsbENoZWNrIiwiaW5zdGFuY2UiLCJjcmVhdGVDbGFzcyIsImdldENsaWVudFJlY3QiLCJvZmZzZXRzIiwic2l6ZXMiLCJob3JpelNjcm9sbGJhciIsIm9mZnNldFdpZHRoIiwidmVydFNjcm9sbGJhciIsIm9mZnNldEhlaWdodCIsImdldE9mZnNldFJlY3RSZWxhdGl2ZVRvQXJiaXRyYXJ5Tm9kZSIsInBhcmVudCIsImZpeGVkUG9zaXRpb24iLCJpc0hUTUwiLCJjaGlsZHJlblJlY3QiLCJwYXJlbnRSZWN0Iiwic2Nyb2xsUGFyZW50IiwiZ2V0Vmlld3BvcnRPZmZzZXRSZWN0UmVsYXRpdmVUb0FydGJpdHJhcnlOb2RlIiwiZXhjbHVkZVNjcm9sbCIsInJlbGF0aXZlT2Zmc2V0IiwiaXNGaXhlZCIsImdldEZpeGVkUG9zaXRpb25PZmZzZXRQYXJlbnQiLCJwYXJlbnRFbGVtZW50IiwiZ2V0Qm91bmRhcmllcyIsInBvcHBlciIsInBhZGRpbmciLCJib3VuZGFyaWVzRWxlbWVudCIsImJvdW5kYXJpZXMiLCJib3VuZGFyaWVzTm9kZSIsIl9nZXRXaW5kb3dTaXplcyIsImlzUGFkZGluZ051bWJlciIsImdldEFyZWEiLCJjb21wdXRlQXV0b1BsYWNlbWVudCIsInBsYWNlbWVudCIsInJlZlJlY3QiLCJyZWN0cyIsInNvcnRlZEFyZWFzIiwiYXJlYSIsInNvcnQiLCJmaWx0ZXJlZEFyZWFzIiwiY29tcHV0ZWRQbGFjZW1lbnQiLCJ2YXJpYXRpb24iLCJnZXRSZWZlcmVuY2VPZmZzZXRzIiwiY29tbW9uT2Zmc2V0UGFyZW50IiwiZ2V0T3V0ZXJTaXplcyIsImdldE9wcG9zaXRlUGxhY2VtZW50IiwiaGFzaCIsIm1hdGNoZWQiLCJnZXRQb3BwZXJPZmZzZXRzIiwicmVmZXJlbmNlT2Zmc2V0cyIsInBvcHBlclJlY3QiLCJwb3BwZXJPZmZzZXRzIiwiaXNIb3JpeiIsIm1haW5TaWRlIiwic2Vjb25kYXJ5U2lkZSIsIm1lYXN1cmVtZW50Iiwic2Vjb25kYXJ5TWVhc3VyZW1lbnQiLCJmaW5kIiwiY2hlY2siLCJydW5Nb2RpZmllcnMiLCJtb2RpZmllcnMiLCJlbmRzIiwicHJvcCIsImZpbmRJbmRleCIsImN1ciIsIndhcm4iLCJlbmFibGVkIiwidXBkYXRlIiwiaXNEZXN0cm95ZWQiLCJhcnJvd1N0eWxlcyIsImF0dHJpYnV0ZXMiLCJmbGlwcGVkIiwicG9zaXRpb25GaXhlZCIsImZsaXAiLCJvcmlnaW5hbFBsYWNlbWVudCIsInBvc2l0aW9uIiwiaXNDcmVhdGVkIiwib25DcmVhdGUiLCJpc01vZGlmaWVyRW5hYmxlZCIsIm1vZGlmaWVyTmFtZSIsInNvbWUiLCJnZXRTdXBwb3J0ZWRQcm9wZXJ0eU5hbWUiLCJwcmVmaXhlcyIsInVwcGVyUHJvcCIsInRvQ2hlY2siLCJzdHlsZSIsImRlc3Ryb3kiLCJyZW1vdmVBdHRyaWJ1dGUiLCJ3aWxsQ2hhbmdlIiwiZGlzYWJsZUV2ZW50TGlzdGVuZXJzIiwicmVtb3ZlT25EZXN0cm95IiwicmVtb3ZlQ2hpbGQiLCJnZXRXaW5kb3ciLCJzZXR1cEV2ZW50TGlzdGVuZXJzIiwidXBkYXRlQm91bmQiLCJwYXNzaXZlIiwic2Nyb2xsRWxlbWVudCIsImF0dGFjaFRvU2Nyb2xsUGFyZW50cyIsInNjcm9sbFBhcmVudHMiLCJpc0JvZHkiLCJldmVudHNFbmFibGVkIiwiZW5hYmxlRXZlbnRMaXN0ZW5lcnMiLCJzY2hlZHVsZVVwZGF0ZSIsImNhbmNlbEFuaW1hdGlvbkZyYW1lIiwiaXNOdW1lcmljIiwiaXNGaW5pdGUiLCJzZXRTdHlsZXMiLCJpc0ZpcmVmb3giLCJpc01vZGlmaWVyUmVxdWlyZWQiLCJyZXF1ZXN0aW5nTmFtZSIsInJlcXVlc3RlZE5hbWUiLCJyZXF1ZXN0aW5nIiwiX3JlcXVlc3RpbmciLCJyZXF1ZXN0ZWQiLCJwbGFjZW1lbnRzIiwidmFsaWRQbGFjZW1lbnRzIiwiY2xvY2t3aXNlIiwiY291bnRlciIsInJldmVyc2UiLCJCRUhBVklPUlMiLCJwYXJzZU9mZnNldCIsImJhc2VQbGFjZW1lbnQiLCJ1c2VIZWlnaHQiLCJmcmFnbWVudHMiLCJmcmFnIiwidHJpbSIsInNlYXJjaCIsInNwbGl0UmVnZXgiLCJvcHMiLCJvcCIsIm1lcmdlV2l0aFByZXZpb3VzIiwidG9WYWx1ZSIsImluZGV4MiIsIkRlZmF1bHRzIiwic2hpZnQiLCJzaGlmdHZhcmlhdGlvbiIsIl9kYXRhJG9mZnNldHMiLCJpc1ZlcnRpY2FsIiwic2hpZnRPZmZzZXRzIiwicHJldmVudE92ZXJmbG93IiwidHJhbnNmb3JtUHJvcCIsInBvcHBlclN0eWxlcyIsInByaW9yaXR5IiwiZXNjYXBlV2l0aFJlZmVyZW5jZSIsImtlZXBUb2dldGhlciIsIm9wU2lkZSIsImFycm93IiwiX2RhdGEkb2Zmc2V0cyRhcnJvdyIsImFycm93RWxlbWVudCIsInNpZGVDYXBpdGFsaXplZCIsInRvTG93ZXJDYXNlIiwiYWx0U2lkZSIsImFycm93RWxlbWVudFNpemUiLCJjZW50ZXIiLCJwb3BwZXJNYXJnaW5TaWRlIiwicG9wcGVyQm9yZGVyU2lkZSIsInNpZGVWYWx1ZSIsInBsYWNlbWVudE9wcG9zaXRlIiwiZmxpcE9yZGVyIiwiYmVoYXZpb3IiLCJyZWZPZmZzZXRzIiwib3ZlcmxhcHNSZWYiLCJvdmVyZmxvd3NMZWZ0Iiwib3ZlcmZsb3dzUmlnaHQiLCJvdmVyZmxvd3NUb3AiLCJvdmVyZmxvd3NCb3R0b20iLCJvdmVyZmxvd3NCb3VuZGFyaWVzIiwiZmxpcHBlZFZhcmlhdGlvbkJ5UmVmIiwiZmxpcFZhcmlhdGlvbnMiLCJmbGlwcGVkVmFyaWF0aW9uQnlDb250ZW50IiwiZmxpcFZhcmlhdGlvbnNCeUNvbnRlbnQiLCJmbGlwcGVkVmFyaWF0aW9uIiwiZ2V0T3Bwb3NpdGVWYXJpYXRpb24iLCJpbm5lciIsInN1YnRyYWN0TGVuZ3RoIiwiaGlkZSIsImJvdW5kIiwiY29tcHV0ZVN0eWxlIiwibGVnYWN5R3B1QWNjZWxlcmF0aW9uT3B0aW9uIiwiZ3B1QWNjZWxlcmF0aW9uIiwic2hvdWxkUm91bmQiLCJub1JvdW5kIiwidiIsInJlZmVyZW5jZVdpZHRoIiwicG9wcGVyV2lkdGgiLCJpc1ZhcmlhdGlvbiIsImhvcml6b250YWxUb0ludGVnZXIiLCJ2ZXJ0aWNhbFRvSW50ZWdlciIsImdldFJvdW5kZWRPZmZzZXRzIiwiZGV2aWNlUGl4ZWxSYXRpbyIsInByZWZpeGVkUHJvcGVydHkiLCJpbnZlcnRUb3AiLCJpbnZlcnRMZWZ0IiwiYXBwbHlTdHlsZSIsInNldEF0dHJpYnV0ZSIsIm9uTG9hZCIsIm1vZGlmaWVyT3B0aW9ucyIsIlBvcHBlciIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsImpxdWVyeSIsIlV0aWxzIiwiUG9wcGVyVXRpbHMiLCJjeCIsImN5IiwiX3JlcXVpcmUiLCJEcmFnZ2FibGUiLCJEcmFnZ2FibGVDb3JlIiwiY29tcG9zZVdpdGhEZXZUb29scyIsIl9fUkVEVVhfREVWVE9PTFNfRVhURU5TSU9OX0NPTVBPU0VfXyIsImRldlRvb2xzRW5oYW5jZXIiLCJfX1JFRFVYX0RFVlRPT0xTX0VYVEVOU0lPTl9fIiwibm9vcCIsInN1cGVyXyIsInUiLCJOIiwicHJlZmlsdGVyIiwibm9ybWFsaXplIiwibGhzIiwicmhzIiwidyIsIlMiLCJraW5kIiwiRiIsImdyb3VwQ29sbGFwc2VkIiwibG9nIiwiUCIsImdyb3VwRW5kIiwibG9nZ2VyIiwiYWN0aW9uVHJhbnNmb3JtZXIiLCJ0aXRsZUZvcm1hdHRlciIsInRpbWVzdGFtcCIsImNvbGxhcHNlZCIsImxldmVsIiwiZGlmZiIsInN0YXJ0ZWQiLCJzdGFydGVkVGltZSIsInByZXZTdGF0ZSIsInRvb2siLCJEIiwiRSIsInRpdGxlIiwiQSIsIk8iLCJDIiwiTCIsIlQiLCJNIiwiXyIsInN0YXRlVHJhbnNmb3JtZXIiLCJlcnJvclRyYW5zZm9ybWVyIiwicHJlZGljYXRlIiwibG9nRXJyb3JzIiwiZGlmZlByZWRpY2F0ZSIsIm5vdyIsIkRhdGUiLCJnZXRIb3VycyIsImdldE1pbnV0ZXMiLCJnZXRTZWNvbmRzIiwiZ2V0TWlsbGlzZWNvbmRzIiwicGVyZm9ybWFuY2UiLCJEZWVwRGlmZiIsIm9ic2VydmFibGVEaWZmIiwiYXBwbHlEaWZmIiwiYXBwbHlDaGFuZ2UiLCJyZXZlcnRDaGFuZ2UiLCJpc0NvbmZsaWN0Iiwibm9Db25mbGljdCIsInRyYW5zZm9ybWVyIiwiZGVmYXVsdHMiLCJjcmVhdGVMb2dnZXIiLCJ1c2VTb3VyY2VNYXAiLCJsaXN0IiwiY29udGVudCIsImNzc01hcHBpbmciLCJidG9hIiwic291cmNlTWFwcGluZyIsInNvdXJjZU1hcCIsImJhc2U2NCIsInVuZXNjYXBlIiwic291cmNlVVJMcyIsInNvdXJjZXMiLCJzb3VyY2VSb290IiwiY3NzV2l0aE1hcHBpbmdUb1N0cmluZyIsIm1lZGlhUXVlcnkiLCJkZWR1cGUiLCJhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzIiwiZm9ybWF0TXVpRXJyb3JNZXNzYWdlIiwiY29kZSIsInVybCIsImZvciIsInEiLCJ6IiwiQiIsImlzTW91bnRlZCIsImVucXVldWVGb3JjZVVwZGF0ZSIsImVucXVldWVSZXBsYWNlU3RhdGUiLCJlbnF1ZXVlU2V0U3RhdGUiLCJyZWZzIiwidXBkYXRlciIsIkciLCJIIiwiaXNSZWFjdENvbXBvbmVudCIsImZvcmNlVXBkYXRlIiwiSSIsImlzUHVyZVJlYWN0Q29tcG9uZW50IiwiSiIsImN1cnJlbnQiLCJLIiwiX19zZWxmIiwiX19zb3VyY2UiLCIkJHR5cGVvZiIsIl9vd25lciIsIlEiLCJSIiwicG9wIiwia2V5UHJlZml4IiwiY291bnQiLCJWIiwiVSIsImVzY2FwZSIsIlciLCJhYSIsIlgiLCJZIiwiWiIsImJhIiwiUmVhY3RDdXJyZW50RGlzcGF0Y2hlciIsIlJlYWN0Q3VycmVudEJhdGNoQ29uZmlnIiwic3VzcGVuc2UiLCJSZWFjdEN1cnJlbnRPd25lciIsIklzU29tZVJlbmRlcmVyQWN0aW5nIiwiQ2hpbGRyZW4iLCJ0b0FycmF5IiwiUHJvZmlsZXIiLCJQdXJlQ29tcG9uZW50IiwiU3RyaWN0TW9kZSIsIlN1c3BlbnNlIiwiX19TRUNSRVRfSU5URVJOQUxTX0RPX05PVF9VU0VfT1JfWU9VX1dJTExfQkVfRklSRUQiLCJjbG9uZUVsZW1lbnQiLCJfY2FsY3VsYXRlQ2hhbmdlZEJpdHMiLCJfY3VycmVudFZhbHVlIiwiX2N1cnJlbnRWYWx1ZTIiLCJfdGhyZWFkQ291bnQiLCJfY29udGV4dCIsImNyZWF0ZUZhY3RvcnkiLCJjcmVhdGVSZWYiLCJpc1ZhbGlkRWxlbWVudCIsImxhenkiLCJfY3RvciIsIl9zdGF0dXMiLCJfcmVzdWx0IiwidXNlQ2FsbGJhY2siLCJ1c2VDb250ZXh0IiwidXNlRGVidWdWYWx1ZSIsInVzZUVmZmVjdCIsInVzZUltcGVyYXRpdmVIYW5kbGUiLCJ1c2VMYXlvdXRFZmZlY3QiLCJ1c2VNZW1vIiwidXNlUmVkdWNlciIsInVzZVJlZiIsInVzZVN0YXRlIiwib25FcnJvciIsImRhIiwiZWEiLCJmYSIsImhhIiwiaWEiLCJqYSIsImxhIiwibWEiLCJuYSIsIm9hIiwiY3VycmVudFRhcmdldCIsImthIiwicGEiLCJxYSIsInJhIiwic2EiLCJleHRyYWN0RXZlbnRzIiwiZXZlbnRUeXBlcyIsInRhIiwicGhhc2VkUmVnaXN0cmF0aW9uTmFtZXMiLCJ1YSIsInJlZ2lzdHJhdGlvbk5hbWUiLCJ2YSIsIndhIiwiZGVwZW5kZW5jaWVzIiwieGEiLCJ5YSIsInphIiwiQWEiLCJCYSIsIkNhIiwic3RhdGVOb2RlIiwiRGEiLCJFYSIsIkZhIiwiR2EiLCJIYSIsIklhIiwiSmEiLCJLYSIsIkxhIiwiTWEiLCJOYSIsIk9hIiwiUGEiLCJRYSIsImFjY2VwdHNCb29sZWFucyIsImF0dHJpYnV0ZU5hbWUiLCJhdHRyaWJ1dGVOYW1lc3BhY2UiLCJtdXN0VXNlUHJvcGVydHkiLCJwcm9wZXJ0eU5hbWUiLCJzYW5pdGl6ZVVSTCIsIlVhIiwiVmEiLCJ4bGlua0hyZWYiLCJXYSIsIlhhIiwiU2EiLCJUYSIsIlJhIiwic2V0QXR0cmlidXRlTlMiLCJZYSIsIlphIiwiJGEiLCJhYiIsImJiIiwiY2IiLCJkYiIsImViIiwiZmIiLCJnYiIsImhiIiwiaWIiLCJqYiIsImtiIiwibGIiLCJtYiIsIm5iIiwicGIiLCJxYiIsInRhZyIsIl9kZWJ1Z093bmVyIiwiX2RlYnVnU291cmNlIiwiZmlsZU5hbWUiLCJsaW5lTnVtYmVyIiwicmV0dXJuIiwicmIiLCJzYiIsInhiIiwiX3ZhbHVlVHJhY2tlciIsInNldFZhbHVlIiwic3RvcFRyYWNraW5nIiwidGIiLCJ5YiIsImNoZWNrZWQiLCJ6YiIsImRlZmF1bHRDaGVja2VkIiwiX3dyYXBwZXJTdGF0ZSIsImluaXRpYWxDaGVja2VkIiwiQWIiLCJpbml0aWFsVmFsdWUiLCJjb250cm9sbGVkIiwiQmIiLCJDYiIsIkRiIiwiRWIiLCJhY3RpdmVFbGVtZW50IiwiR2IiLCJGYiIsIkhiIiwiZGVmYXVsdFNlbGVjdGVkIiwiSWIiLCJkYW5nZXJvdXNseVNldElubmVySFRNTCIsIkpiIiwiS2IiLCJMYiIsInRleHRDb250ZW50IiwiTWIiLCJOYiIsIk9iIiwiUGIiLCJRYiIsIk1TQXBwIiwiZXhlY1Vuc2FmZUxvY2FsRnVuY3Rpb24iLCJuYW1lc3BhY2VVUkkiLCJ2YWx1ZU9mIiwiZmlyc3RDaGlsZCIsIlJiIiwibGFzdENoaWxkIiwibm9kZVZhbHVlIiwiU2IiLCJUYiIsImFuaW1hdGlvbmVuZCIsImFuaW1hdGlvbml0ZXJhdGlvbiIsImFuaW1hdGlvbnN0YXJ0IiwidHJhbnNpdGlvbmVuZCIsIlViIiwiVmIiLCJXYiIsImFuaW1hdGlvbiIsIlhiIiwiWWIiLCJaYiIsIiRiIiwiYWMiLCJiYyIsIk1hcCIsImNjIiwiZGMiLCJhbHRlcm5hdGUiLCJlZmZlY3RUYWciLCJlYyIsIm1lbW9pemVkU3RhdGUiLCJkZWh5ZHJhdGVkIiwiZmMiLCJoYyIsImNoaWxkIiwic2libGluZyIsImdjIiwiaWMiLCJqYyIsImtjIiwibGMiLCJfZGlzcGF0Y2hMaXN0ZW5lcnMiLCJfZGlzcGF0Y2hJbnN0YW5jZXMiLCJpc1Byb3BhZ2F0aW9uU3RvcHBlZCIsImlzUGVyc2lzdGVudCIsInJlbGVhc2UiLCJtYyIsIm5jIiwic3JjRWxlbWVudCIsImNvcnJlc3BvbmRpbmdVc2VFbGVtZW50Iiwib2MiLCJwYyIsInFjIiwidG9wTGV2ZWxUeXBlIiwibmF0aXZlRXZlbnQiLCJ0YXJnZXRJbnN0IiwiYW5jZXN0b3JzIiwicmMiLCJldmVudFN5c3RlbUZsYWdzIiwic2MiLCJjb250YWluZXJJbmZvIiwidGMiLCJ1YyIsInZjIiwid2MiLCJ4YyIsInljIiwiemMiLCJBYyIsIkJjIiwiQ2MiLCJEYyIsIkVjIiwiRmMiLCJHYyIsIkhjIiwiSWMiLCJLYyIsImJsb2NrZWRPbiIsImNvbnRhaW5lciIsIkxjIiwiZGVsZXRlIiwicG9pbnRlcklkIiwiTWMiLCJOYyIsIlBjIiwidW5zdGFibGVfcnVuV2l0aFByaW9yaXR5IiwiaHlkcmF0ZSIsIlFjIiwiUmMiLCJTYyIsIlRjIiwiVWMiLCJ1bnN0YWJsZV9zY2hlZHVsZUNhbGxiYWNrIiwidW5zdGFibGVfTm9ybWFsUHJpb3JpdHkiLCJWYyIsIldjIiwiWWMiLCJaYyIsIiRjIiwiYWQiLCJidWJibGVkIiwiY2FwdHVyZWQiLCJldmVudFByaW9yaXR5IiwiYmQiLCJjZCIsImRkIiwidW5zdGFibGVfVXNlckJsb2NraW5nUHJpb3JpdHkiLCJlZCIsImZkIiwiZ2QiLCJoZCIsIk9jIiwiamQiLCJhbmltYXRpb25JdGVyYXRpb25Db3VudCIsImJvcmRlckltYWdlT3V0c2V0IiwiYm9yZGVySW1hZ2VTbGljZSIsImJvcmRlckltYWdlV2lkdGgiLCJib3hGbGV4IiwiYm94RmxleEdyb3VwIiwiYm94T3JkaW5hbEdyb3VwIiwiY29sdW1uQ291bnQiLCJjb2x1bW5zIiwiZmxleCIsImZsZXhHcm93IiwiZmxleFBvc2l0aXZlIiwiZmxleE5lZ2F0aXZlIiwiZmxleE9yZGVyIiwiZ3JpZEFyZWEiLCJncmlkUm93IiwiZ3JpZFJvd0VuZCIsImdyaWRSb3dTcGFuIiwiZ3JpZFJvd1N0YXJ0IiwiZ3JpZENvbHVtbiIsImdyaWRDb2x1bW5FbmQiLCJncmlkQ29sdW1uU3BhbiIsImdyaWRDb2x1bW5TdGFydCIsImxpbmVDbGFtcCIsIm9wYWNpdHkiLCJvcnBoYW5zIiwidGFiU2l6ZSIsIndpZG93cyIsInpvb20iLCJmaWxsT3BhY2l0eSIsImZsb29kT3BhY2l0eSIsInN0b3BPcGFjaXR5Iiwic3Ryb2tlRGFzaGFycmF5Iiwic3Ryb2tlRGFzaG9mZnNldCIsInN0cm9rZU1pdGVybGltaXQiLCJzdHJva2VPcGFjaXR5Iiwic3Ryb2tlV2lkdGgiLCJrZCIsImxkIiwic2V0UHJvcGVydHkiLCJuZCIsIm1lbnVpdGVtIiwiYmFzZSIsImJyIiwiY29sIiwiZW1iZWQiLCJociIsImltZyIsImlucHV0Iiwia2V5Z2VuIiwibGluayIsIm1ldGEiLCJwYXJhbSIsInRyYWNrIiwid2JyIiwib2QiLCJwZCIsImlzIiwicWQiLCJyZCIsInNkIiwidGQiLCJ1ZCIsInZkIiwibmV4dFNpYmxpbmciLCJ4ZCIsIkhUTUxJRnJhbWVFbGVtZW50IiwiY29udGVudFdpbmRvdyIsImxvY2F0aW9uIiwiaHJlZiIsInlkIiwiY29udGVudEVkaXRhYmxlIiwiRGQiLCJFZCIsIkZkIiwiYXV0b0ZvY3VzIiwiR2QiLCJfX2h0bWwiLCJIZCIsIklkIiwiY2xlYXJUaW1lb3V0IiwiSmQiLCJLZCIsInByZXZpb3VzU2libGluZyIsIkxkIiwiTWQiLCJOZCIsIk9kIiwiUGQiLCJRZCIsIlJkIiwiU2QiLCJUZCIsImRpc3BhdGNoQ29uZmlnIiwiVWQiLCJfdGFyZ2V0SW5zdCIsIlZkIiwiV2QiLCJYZCIsIllkIiwiWmQiLCIkZCIsImFlIiwiYmUiLCJjZSIsIkludGVyZmFjZSIsImlzRGVmYXVsdFByZXZlbnRlZCIsImRlZmF1bHRQcmV2ZW50ZWQiLCJyZXR1cm5WYWx1ZSIsImVlIiwiZXZlbnRQb29sIiwiZmUiLCJkZXN0cnVjdG9yIiwiZGUiLCJnZXRQb29sZWQiLCJwcmV2ZW50RGVmYXVsdCIsInN0b3BQcm9wYWdhdGlvbiIsImNhbmNlbEJ1YmJsZSIsInBlcnNpc3QiLCJldmVudFBoYXNlIiwiYnViYmxlcyIsImNhbmNlbGFibGUiLCJ0aW1lU3RhbXAiLCJpc1RydXN0ZWQiLCJleHRlbmQiLCJnZSIsImhlIiwiaWUiLCJqZSIsImtlIiwibGUiLCJtZSIsIm5lIiwib2UiLCJiZWZvcmVJbnB1dCIsImNvbXBvc2l0aW9uRW5kIiwiY29tcG9zaXRpb25TdGFydCIsImNvbXBvc2l0aW9uVXBkYXRlIiwicGUiLCJxZSIsImtleUNvZGUiLCJkZXRhaWwiLCJzZSIsInZlIiwibG9jYWxlIiwid2hpY2giLCJ0ZSIsImN0cmxLZXkiLCJhbHRLZXkiLCJtZXRhS2V5IiwiY2hhciIsInVlIiwid2UiLCJkYXRlIiwiZGF0ZXRpbWUiLCJlbWFpbCIsIm1vbnRoIiwibnVtYmVyIiwicGFzc3dvcmQiLCJ0ZWwiLCJ0aW1lIiwid2VlayIsInhlIiwieWUiLCJjaGFuZ2UiLCJ6ZSIsIkFlIiwiQmUiLCJDZSIsIkRlIiwiRWUiLCJGZSIsIkdlIiwiSGUiLCJJZSIsIkplIiwiS2UiLCJMZSIsIk1lIiwiX2lzSW5wdXRFdmVudFN1cHBvcnRlZCIsIk5lIiwidmlldyIsIk9lIiwiQWx0IiwiQ29udHJvbCIsIk1ldGEiLCJTaGlmdCIsIlBlIiwiZ2V0TW9kaWZpZXJTdGF0ZSIsIlFlIiwiUmUiLCJTZSIsIlRlIiwiVWUiLCJWZSIsInNjcmVlblgiLCJzY3JlZW5ZIiwicGFnZVgiLCJwYWdlWSIsInNoaWZ0S2V5IiwiYnV0dG9ucyIsInJlbGF0ZWRUYXJnZXQiLCJmcm9tRWxlbWVudCIsInRvRWxlbWVudCIsIm1vdmVtZW50WCIsIm1vdmVtZW50WSIsIldlIiwicHJlc3N1cmUiLCJ0YW5nZW50aWFsUHJlc3N1cmUiLCJ0aWx0WCIsInRpbHRZIiwidHdpc3QiLCJwb2ludGVyVHlwZSIsImlzUHJpbWFyeSIsIlhlIiwibW91c2VFbnRlciIsIm1vdXNlTGVhdmUiLCJwb2ludGVyRW50ZXIiLCJwb2ludGVyTGVhdmUiLCJZZSIsInBhcmVudFdpbmRvdyIsIiRlIiwiYWYiLCJiZiIsImNmIiwiZGYiLCJzZWxlY3QiLCJlZiIsImZmIiwiZ2YiLCJoZiIsImpmIiwic2VsZWN0aW9uU3RhcnQiLCJzZWxlY3Rpb25FbmQiLCJhbmNob3JOb2RlIiwiYW5jaG9yT2Zmc2V0IiwiZm9jdXNOb2RlIiwiZm9jdXNPZmZzZXQiLCJrZiIsIm9uU2VsZWN0IiwibGYiLCJhbmltYXRpb25OYW1lIiwiZWxhcHNlZFRpbWUiLCJwc2V1ZG9FbGVtZW50IiwibWYiLCJjbGlwYm9hcmREYXRhIiwibmYiLCJvZiIsImNoYXJDb2RlIiwicGYiLCJFc2MiLCJTcGFjZWJhciIsIkxlZnQiLCJVcCIsIlJpZ2h0IiwiRG93biIsIkRlbCIsIldpbiIsIk1lbnUiLCJBcHBzIiwiU2Nyb2xsIiwiTW96UHJpbnRhYmxlS2V5IiwicWYiLCI4IiwiOSIsIjEyIiwiMTMiLCIxNiIsIjE3IiwiMTgiLCIxOSIsIjIwIiwiMjciLCIzMiIsIjMzIiwiMzQiLCIzNSIsIjM2IiwiMzciLCIzOCIsIjM5IiwiNDAiLCI0NSIsIjQ2IiwiMTEyIiwiMTEzIiwiMTE0IiwiMTE1IiwiMTE2IiwiMTE3IiwiMTE4IiwiMTE5IiwiMTIwIiwiMTIxIiwiMTIyIiwiMTIzIiwiMTQ0IiwiMTQ1IiwiMjI0IiwicmYiLCJzZiIsImRhdGFUcmFuc2ZlciIsInRmIiwidG91Y2hlcyIsInVmIiwidmYiLCJ3aGVlbERlbHRhWCIsIndoZWVsRGVsdGFZIiwid2hlZWxEZWx0YSIsImRlbHRhWiIsImRlbHRhTW9kZSIsIndmIiwiU2ltcGxlRXZlbnRQbHVnaW4iLCJFbnRlckxlYXZlRXZlbnRQbHVnaW4iLCJDaGFuZ2VFdmVudFBsdWdpbiIsIlNlbGVjdEV2ZW50UGx1Z2luIiwiQmVmb3JlSW5wdXRFdmVudFBsdWdpbiIsInlmIiwiemYiLCJBZiIsIkJmIiwiQ2YiLCJfX3JlYWN0SW50ZXJuYWxNZW1vaXplZFVubWFza2VkQ2hpbGRDb250ZXh0IiwiX19yZWFjdEludGVybmFsTWVtb2l6ZWRNYXNrZWRDaGlsZENvbnRleHQiLCJEZiIsIkVmIiwiRmYiLCJHZiIsIl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWVyZ2VkQ2hpbGRDb250ZXh0IiwiSGYiLCJJZiIsIkpmIiwiS2YiLCJ1bnN0YWJsZV9jYW5jZWxDYWxsYmFjayIsIkxmIiwidW5zdGFibGVfcmVxdWVzdFBhaW50IiwiTWYiLCJ1bnN0YWJsZV9ub3ciLCJOZiIsInVuc3RhYmxlX2dldEN1cnJlbnRQcmlvcml0eUxldmVsIiwiT2YiLCJ1bnN0YWJsZV9JbW1lZGlhdGVQcmlvcml0eSIsIlBmIiwiUWYiLCJSZiIsInVuc3RhYmxlX0xvd1ByaW9yaXR5IiwiU2YiLCJ1bnN0YWJsZV9JZGxlUHJpb3JpdHkiLCJUZiIsIlVmIiwidW5zdGFibGVfc2hvdWxkWWllbGQiLCJWZiIsIldmIiwiWGYiLCJZZiIsIlpmIiwiJGYiLCJhZyIsImJnIiwiY2ciLCJkZyIsImVnIiwiZmciLCJnZyIsImhnIiwiaWciLCJqZyIsImtnIiwibWciLCJuZyIsIm9nIiwicGciLCJjaGlsZEV4cGlyYXRpb25UaW1lIiwicWciLCJmaXJzdENvbnRleHQiLCJleHBpcmF0aW9uVGltZSIsInJnIiwic2ciLCJyZXNwb25kZXJzIiwidGciLCJ1ZyIsInVwZGF0ZVF1ZXVlIiwiYmFzZVN0YXRlIiwiYmFzZVF1ZXVlIiwic2hhcmVkIiwicGVuZGluZyIsImVmZmVjdHMiLCJ2ZyIsIndnIiwic3VzcGVuc2VDb25maWciLCJwYXlsb2FkIiwieGciLCJ5ZyIsInpnIiwiY2EiLCJBZyIsIkJnIiwiQ2ciLCJEZyIsIkVnIiwiRmciLCJKZyIsIl9yZWFjdEludGVybmFsRmliZXIiLCJHZyIsIkhnIiwiSWciLCJLZyIsInNob3VsZENvbXBvbmVudFVwZGF0ZSIsIkxnIiwiTWciLCJVTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyIsIk5nIiwiZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUiLCJVTlNBRkVfY29tcG9uZW50V2lsbE1vdW50IiwiY29tcG9uZW50V2lsbE1vdW50IiwiT2ciLCJQZyIsIl9zdHJpbmdSZWYiLCJRZyIsIlJnIiwibGFzdEVmZmVjdCIsIm5leHRFZmZlY3QiLCJmaXJzdEVmZmVjdCIsIlNnIiwiVGciLCJlbGVtZW50VHlwZSIsIlVnIiwiaW1wbGVtZW50YXRpb24iLCJWZyIsIldnIiwiWGciLCJZZyIsIlpnIiwiJGciLCJhaCIsImJoIiwiY2giLCJkaCIsInRhZ05hbWUiLCJlaCIsImZoIiwiZ2giLCJoaCIsIm1lbW9pemVkUHJvcHMiLCJyZXZlYWxPcmRlciIsImloIiwicmVzcG9uZGVyIiwiamgiLCJraCIsImxoIiwibWgiLCJuaCIsIm9oIiwicGgiLCJxaCIsInJoIiwic2giLCJ0aCIsInF1ZXVlIiwidWgiLCJ2aCIsIndoIiwibGFzdFJlbmRlcmVkUmVkdWNlciIsImVhZ2VyUmVkdWNlciIsImVhZ2VyU3RhdGUiLCJsYXN0UmVuZGVyZWRTdGF0ZSIsInhoIiwieWgiLCJ6aCIsIkFoIiwiZGVwcyIsIkJoIiwiQ2giLCJEaCIsIkVoIiwiRmgiLCJHaCIsIkhoIiwiSWgiLCJKaCIsIktoIiwiTGgiLCJNaCIsIk5oIiwicmVhZENvbnRleHQiLCJ1c2VSZXNwb25kZXIiLCJ1c2VEZWZlcnJlZFZhbHVlIiwidXNlVHJhbnNpdGlvbiIsIk9oIiwiUGgiLCJRaCIsIlJoIiwiU2giLCJUaCIsInBlbmRpbmdQcm9wcyIsIlVoIiwiVmgiLCJXaCIsIlhoIiwiWWgiLCJaaCIsIiRoIiwiYWkiLCJiaSIsImNpIiwiZGkiLCJlaSIsImZpIiwiVU5TQUZFX2NvbXBvbmVudFdpbGxVcGRhdGUiLCJjb21wb25lbnRXaWxsVXBkYXRlIiwiY29tcG9uZW50RGlkVXBkYXRlIiwiZ2kiLCJoaSIsInBlbmRpbmdDb250ZXh0IiwibmkiLCJwaSIsInFpIiwiaWkiLCJyZXRyeVRpbWUiLCJqaSIsImZhbGxiYWNrIiwidW5zdGFibGVfYXZvaWRUaGlzRmFsbGJhY2siLCJraSIsImxpIiwiaXNCYWNrd2FyZHMiLCJyZW5kZXJpbmciLCJyZW5kZXJpbmdTdGFydFRpbWUiLCJsYXN0IiwidGFpbCIsInRhaWxFeHBpcmF0aW9uIiwidGFpbE1vZGUiLCJtaSIsInJpIiwic2kiLCJ3YXNNdWx0aXBsZSIsIm11bHRpcGxlIiwib25DbGljayIsIm9uY2xpY2siLCJjcmVhdGVFbGVtZW50TlMiLCJjcmVhdGVUZXh0Tm9kZSIsInRpIiwidWkiLCJ2aSIsIndpIiwieGkiLCJ5aSIsInppIiwiQWkiLCJzdGFjayIsIkJpIiwiV2Vha1NldCIsIlNldCIsIkNpIiwiRmkiLCJFaSIsIkdpIiwiX19yZWFjdEludGVybmFsU25hcHNob3RCZWZvcmVVcGRhdGUiLCJIaSIsIklpIiwiSmkiLCJLaSIsIkxpIiwiRGkiLCJNaSIsIk5pIiwiT2kiLCJQaSIsIlFpIiwiaW5zZXJ0QmVmb3JlIiwiX3JlYWN0Um9vdENvbnRhaW5lciIsIlJpIiwiU2kiLCJUaSIsIlVpIiwiVmkiLCJXaSIsIlhpIiwiWWkiLCJaaSIsIiRpIiwiY29tcG9uZW50RGlkQ2F0Y2giLCJhaiIsImNvbXBvbmVudFN0YWNrIiwiUmoiLCJiaiIsImNlaWwiLCJjaiIsImRqIiwia2oiLCJsaiIsIm1qIiwibmoiLCJvaiIsInFqIiwicmoiLCJzaiIsInRqIiwidWoiLCJ2aiIsIndqIiwidGltZW91dE1zIiwieGoiLCJ5aiIsInpqIiwibGFzdEV4cGlyZWRUaW1lIiwiQWoiLCJmaXJzdFBlbmRpbmdUaW1lIiwibGFzdFBpbmdlZFRpbWUiLCJuZXh0S25vd25QZW5kaW5nTGV2ZWwiLCJjYWxsYmFja0V4cGlyYXRpb25UaW1lIiwiY2FsbGJhY2tQcmlvcml0eSIsImNhbGxiYWNrTm9kZSIsIkJqIiwidGltZW91dCIsIkNqIiwiRGoiLCJFaiIsIkZqIiwiR2oiLCJIaiIsImZpbmlzaGVkV29yayIsImZpbmlzaGVkRXhwaXJhdGlvblRpbWUiLCJsYXN0U3VzcGVuZGVkVGltZSIsIklqIiwidGltZW91dEhhbmRsZSIsIkpqIiwiYnVzeU1pbkR1cmF0aW9uTXMiLCJidXN5RGVsYXlNcyIsIktqIiwiTWoiLCJOaiIsInBpbmdDYWNoZSIsIk9qIiwidWIiLCJQaiIsIlhjIiwiUWoiLCJTaiIsImZpcnN0U3VzcGVuZGVkVGltZSIsInJhbmdlQ291bnQiLCJ3YiIsImFjdGl2ZUVsZW1lbnREZXRhY2hlZCIsImZvY3VzZWRFbGVtIiwic2VsZWN0aW9uUmFuZ2UiLCJUaiIsIndkIiwiYWRkUmFuZ2UiLCJ2YiIsIlVqIiwiVmoiLCJXaiIsImhpZGRlbiIsIm9iIiwiWGoiLCJ1bnN0YWJsZV9vYnNlcnZlZEJpdHMiLCJaaiIsInBlbmRpbmdDaGlsZHJlbiIsImFrIiwiYmsiLCJjayIsImRrIiwiZWsiLCJmayIsIkpjIiwiX2ludGVybmFsUm9vdCIsImdrIiwiaWsiLCJoYXNBdHRyaWJ1dGUiLCJoayIsImprIiwia2siLCJ1bm1vdW50IiwicXVlcnlTZWxlY3RvckFsbCIsImZvcm0iLCJMaiIsImxrIiwiRXZlbnRzIiwiZmluZEZpYmVyQnlIb3N0SW5zdGFuY2UiLCJidW5kbGVUeXBlIiwicmVuZGVyZXJQYWNrYWdlTmFtZSIsImlzRGlzYWJsZWQiLCJzdXBwb3J0c0ZpYmVyIiwiaW5qZWN0Iiwib25Db21taXRGaWJlclJvb3QiLCJvbkNvbW1pdEZpYmVyVW5tb3VudCIsIllqIiwib3ZlcnJpZGVIb29rU3RhdGUiLCJvdmVycmlkZVByb3BzIiwic2V0U3VzcGVuc2VIYW5kbGVyIiwiY3VycmVudERpc3BhdGNoZXJSZWYiLCJmaW5kSG9zdEluc3RhbmNlQnlGaWJlciIsImZpbmRIb3N0SW5zdGFuY2VzRm9yUmVmcmVzaCIsInNjaGVkdWxlUmVmcmVzaCIsInNjaGVkdWxlUm9vdCIsInNldFJlZnJlc2hIYW5kbGVyIiwiZ2V0Q3VycmVudEZpYmVyIiwiY3JlYXRlUG9ydGFsIiwiZmx1c2hTeW5jIiwidW5tb3VudENvbXBvbmVudEF0Tm9kZSIsInVuc3RhYmxlX2JhdGNoZWRVcGRhdGVzIiwidW5zdGFibGVfY3JlYXRlUG9ydGFsIiwidW5zdGFibGVfcmVuZGVyU3VidHJlZUludG9Db250YWluZXIiLCJNZXNzYWdlQ2hhbm5lbCIsInVuc3RhYmxlX2ZvcmNlRnJhbWVSYXRlIiwicG9ydDIiLCJwb3J0MSIsIm9ubWVzc2FnZSIsInBvc3RNZXNzYWdlIiwic29ydEluZGV4Iiwic3RhcnRUaW1lIiwicHJpb3JpdHlMZXZlbCIsInVuc3RhYmxlX1Byb2ZpbGluZyIsInVuc3RhYmxlX2NvbnRpbnVlRXhlY3V0aW9uIiwidW5zdGFibGVfZ2V0Rmlyc3RDYWxsYmFja05vZGUiLCJ1bnN0YWJsZV9uZXh0IiwidW5zdGFibGVfcGF1c2VFeGVjdXRpb24iLCJ1bnN0YWJsZV93cmFwQ2FsbGJhY2siLCJSZWFjdFByb3BUeXBlc1NlY3JldCIsImVtcHR5RnVuY3Rpb24iLCJlbXB0eUZ1bmN0aW9uV2l0aFJlc2V0IiwicmVzZXRXYXJuaW5nQ2FjaGUiLCJzaGltIiwicHJvcEZ1bGxOYW1lIiwic2VjcmV0IiwiZ2V0U2hpbSIsIlJlYWN0UHJvcFR5cGVzIiwiYm9vbCIsInN5bWJvbCIsImFueSIsImFycmF5T2YiLCJpbnN0YW5jZU9mIiwib2JqZWN0T2YiLCJvbmVPZiIsIm9uZU9mVHlwZSIsImV4YWN0IiwiY2hlY2tQcm9wVHlwZXMiLCJQcm9wVHlwZXMiLCJBc3luY01vZGUiLCJDb25jdXJyZW50TW9kZSIsIkNvbnRleHRDb25zdW1lciIsIkNvbnRleHRQcm92aWRlciIsIkVsZW1lbnQiLCJMYXp5IiwiUG9ydGFsIiwiaXNBc3luY01vZGUiLCJpc0NvbmN1cnJlbnRNb2RlIiwiaXNDb250ZXh0Q29uc3VtZXIiLCJpc0NvbnRleHRQcm92aWRlciIsImlzRWxlbWVudCIsImlzRm9yd2FyZFJlZiIsImlzRnJhZ21lbnQiLCJpc0xhenkiLCJpc1BvcnRhbCIsImlzUHJvZmlsZXIiLCJpc1N0cmljdE1vZGUiLCJpc1N1c3BlbnNlIiwiaXNWYWxpZEVsZW1lbnRUeXBlIiwidHlwZU9mIiwib3JpZ2luYWxNb2R1bGUiLCJhbGVhIiwieG9yMTI4IiwieG9yd293IiwieG9yc2hpZnQ3IiwieG9yNDA5NiIsInR5Y2hlaSIsInNyIiwiZGVmaW5lIiwiQWxlYSIsIm1hc2giLCJzMCIsInMxIiwiczIiLCJjb3B5IiwiaW1wbCIsInBybmciLCJpbnQzMiIsImRvdWJsZSIsInF1aWNrIiwiWG9yR2VuIiwic3Ryc2VlZCIsImluaXQiLCJsaW1pdCIsInBvb2wiLCJtYXRoIiwibm9kZWNyeXB0byIsInN0YXJ0ZGVub20iLCJzaWduaWZpY2FuY2UiLCJzZWVkcmFuZG9tIiwic2hvcnRzZWVkIiwibWl4a2V5IiwiZmxhdHRlbiIsImRlcHRoIiwidHlwIiwiZW50cm9weSIsInRvc3RyaW5nIiwib3V0IiwicmFuZG9tQnl0ZXMiLCJVaW50OEFycmF5IiwiY3J5cHRvIiwibXNDcnlwdG8iLCJnZXRSYW5kb21WYWx1ZXMiLCJicm93c2VyIiwicGx1Z2lucyIsInNjcmVlbiIsImF1dG9zZWVkIiwiYXJjNCIsIkFSQzQiLCJwYXNzIiwiaXNfbWF0aF9jYWxsIiwia2V5bGVuIiwic21lYXIiLCJzdHJpbmdzZWVkIiwiZXgiLCJnZXREb21UcmVlU2hhcGVzIiwiZmluZE5hdGl2ZUhhbmRsZXIiLCJfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMyIiwiX2NsYXNzQ2FsbENoZWNrMiIsIl9jcmVhdGVDbGFzczIiLCJfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybjIiLCJfZ2V0UHJvdG90eXBlT2YyIiwiX2luaGVyaXRzMiIsIl9wcm9wVHlwZXMiLCJfcmVhY3RTd2lwZWFibGVWaWV3c0NvcmUiLCJXZWJraXRGbGV4U2hyaW5rIiwiYXhpc1Byb3BlcnRpZXMiLCJmbGV4RGlyZWN0aW9uIiwidHJhbnNsYXRlIiwicm90YXRpb25NYXRyaXgiLCJzY3JvbGxQb3NpdGlvbiIsInNjcm9sbExlbmd0aCIsImNsaWVudExlbmd0aCIsImNyZWF0ZVRyYW5zaXRpb24iLCJlYXNlRnVuY3Rpb24iLCJhcHBseVJvdGF0aW9uTWF0cml4IiwidG91Y2giLCJhZGFwdE1vdXNlIiwicm9vdE5vZGUiLCJkb21UcmVlU2hhcGVzIiwiZ2V0UHJvcGVydHlWYWx1ZSIsInNjcm9sbFdpZHRoIiwic2Nyb2xsSGVpZ2h0Iiwibm9kZVdob0NsYWltZWRUaGVTY3JvbGwiLCJwYXJhbXMiLCJzdGFydFgiLCJnb2luZ0ZvcndhcmQiLCJhcmVOb3RBdFN0YXJ0IiwiYXJlTm90QXRFbmQiLCJTd2lwZWFibGVWaWV3cyIsIl9SZWFjdCRDb21wb25lbnQiLCJjb250YWluZXJOb2RlIiwiaWdub3JlTmV4dFNjcm9sbEV2ZW50cyIsInZpZXdMZW5ndGgiLCJ2eCIsInN0YXJ0WSIsImlzU3dpcGluZyIsInN0YXJ0SW5kZXgiLCJ0cmFuc2l0aW9uTGlzdGVuZXIiLCJ0b3VjaE1vdmVMaXN0ZW5lciIsImFjdGl2ZVNsaWRlIiwiaW5kZXhDdXJyZW50IiwiZmlyc3RSZW5kZXJUaW1lb3V0Iiwic2V0Um9vdE5vZGUiLCJzZXRDb250YWluZXJOb2RlIiwic2V0QWN0aXZlU2xpZGUiLCJ1cGRhdGVIZWlnaHQiLCJoYW5kbGVTd2lwZVN0YXJ0IiwidHJhbnNmb3JtVmFsdWVzIiwicm9vdFN0eWxlIiwidHJhbmZvcm1Ob3JtYWxpemVkIiwiaGFuZGxlU3dpcGVNb3ZlIiwiX3RoaXMkcHJvcHMiLCJpZ25vcmVOYXRpdmVTY3JvbGwiLCJvblN3aXRjaGluZyIsInJlc2lzdGFuY2UiLCJkeCIsImFicyIsImR5IiwiX2NvbXB1dGVJbmRleCIsImNvbXB1dGVJbmRleCIsInNldEluZGV4Q3VycmVudCIsImRpc3BsYXlTYW1lU2xpZGUiLCJpc0RyYWdnaW5nIiwiaGFuZGxlVG91Y2hTdGFydCIsImhhbmRsZVN3aXBlRW5kIiwiaW5kZXhOZXciLCJpbmRleExhdGVzdCIsImRlbHRhIiwidGhyZXNob2xkIiwiaHlzdGVyZXNpcyIsImluZGV4TWF4Iiwib25DaGFuZ2VJbmRleCIsInJlYXNvbiIsImhhbmRsZVRyYW5zaXRpb25FbmQiLCJvblRvdWNoU3RhcnQiLCJoYW5kbGVUb3VjaEVuZCIsIm9uVG91Y2hFbmQiLCJoYW5kbGVNb3VzZURvd24iLCJvbk1vdXNlRG93biIsImhhbmRsZU1vdXNlVXAiLCJvbk1vdXNlVXAiLCJoYW5kbGVNb3VzZUxlYXZlIiwib25Nb3VzZUxlYXZlIiwiaGFuZGxlTW91c2VNb3ZlIiwib25Nb3VzZU1vdmUiLCJoYW5kbGVTY3JvbGwiLCJvblNjcm9sbCIsImhlaWdodExhdGVzdCIsInJlbmRlck9ubHlBY3RpdmUiLCJkaXNhYmxlTGF6eUxvYWRpbmciLCJzd2lwZWFibGVWaWV3cyIsInNsaWRlVXBkYXRlSGVpZ2h0IiwiX3RoaXMzIiwiZ2V0RGlzcGxheVNhbWVTbGlkZSIsImFuaW1hdGVUcmFuc2l0aW9ucyIsIldlYmtpdFRyYW5zZm9ybSIsIm9uVHJhbnNpdGlvbkVuZCIsIldlYmtpdFRyYW5zaXRpb24iLCJfdGhpczQiLCJfdGhpcyRwcm9wczIiLCJhbmltYXRlSGVpZ2h0IiwiY29udGFpbmVyU3R5bGVQcm9wIiwiY29udGFpbmVyU3R5bGUiLCJlbmFibGVNb3VzZUV2ZW50cyIsInNsaWRlU3R5bGVQcm9wIiwic2xpZGVTdHlsZSIsInNsaWRlQ2xhc3NOYW1lIiwic3ByaW5nQ29uZmlnIiwiX3RoaXMkc3RhdGUiLCJ0b3VjaEV2ZW50cyIsIm1vdXNlRXZlbnRzIiwiYWRkaXRpb25hbFRyYW5zdGlvbiIsIldlYmtpdEZsZXhEaXJlY3Rpb24iLCJpbmRleENoaWxkIiwib2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSIsImFzc2VydFRoaXNJbml0aWFsaXplZCIsIl90eXBlb2YyIiwiX2dldFByb3RvdHlwZU9mIiwic2V0UHJvdG90eXBlT2YiLCJfc2V0UHJvdG90eXBlT2YiLCJfY2hlY2tJbmRleEJvdW5kcyIsIl9jb25zdGFudCIsIl9nZXREaXNwbGF5U2FtZVNsaWRlIiwiX21vZCIsIm5ld1N0YXJ0WCIsImV4cCIsImdldENoaWxkcmVuS2V5Iiwib2xkS2V5IiwiX0RyYWdnYWJsZUNvcmUiLCJSZWFjdCIsIl9yZWFjdERvbSIsIl9jbGFzc25hbWVzIiwiX3Bvc2l0aW9uRm5zIiwiX2xvZyIsIl9pdGVyYWJsZVRvQXJyYXlMaW1pdCIsIl9jcmVhdGVTdXBlciIsIkRlcml2ZWQiLCJoYXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0IiwiUmVmbGVjdCIsImNvbnN0cnVjdCIsInNoYW0iLCJQcm94eSIsIl9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QiLCJTdXBlciIsIk5ld1RhcmdldCIsIl9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuIiwiX2luaGVyaXRzIiwiX3N1cGVyIiwiX2NsYXNzQ2FsbENoZWNrIiwib25TdGFydCIsImRyYWdnaW5nIiwiZHJhZ2dlZCIsInVpRGF0YSIsIm5ld1N0YXRlIiwic2xhY2tYIiwic2xhY2tZIiwiX2dldEJvdW5kUG9zaXRpb24yIiwibmV3U3RhdGVYIiwibmV3U3RhdGVZIiwib25EcmFnIiwib25TdG9wIiwiQm9vbGVhbiIsIl90aGlzJHByb3BzJHBvc2l0aW9uIiwiZGVmYXVsdFBvc2l0aW9uIiwicHJldlByb3BzUG9zaXRpb24iLCJpc0VsZW1lbnRTVkciLCJTVkdFbGVtZW50Iiwibm9kZVJlZiIsIl9jbGFzc05hbWVzIiwiZGVmYXVsdENsYXNzTmFtZSIsImRlZmF1bHRDbGFzc05hbWVEcmFnZ2luZyIsImRlZmF1bHRDbGFzc05hbWVEcmFnZ2VkIiwiZHJhZ2dhYmxlQ29yZVByb3BzIiwic3ZnVHJhbnNmb3JtIiwidmFsaWRQb3NpdGlvbiIsInRyYW5zZm9ybU9wdHMiLCJvbkRyYWdTdGFydCIsIm9uRHJhZ1N0b3AiLCJoYXNPd24iLCJjbGFzc05hbWVzIiwiYXJnVHlwZSIsImdldFByZWZpeCIsImJyb3dzZXJQcmVmaXhUb1N0eWxlIiwic2hvdWxkQ2FwaXRhbGl6ZSIsImtlYmFiVG9UaXRsZUNhc2UiLCJldmVudHNGb3IiLCJtb3ZlIiwic3RvcCIsImRyYWdFdmVudEZvciIsIk5hTiIsImFsbG93QW55Q2xpY2siLCJ0aGlzTm9kZSIsImhhbmRsZSIsImNhbmNlbCIsImNvcmVFdmVudCIsIm1vdW50ZWQiLCJlbmFibGVVc2VyU2VsZWN0SGFjayIsImhhbmRsZURyYWciLCJoYW5kbGVEcmFnU3RvcCIsIl9zbmFwVG9HcmlkMiIsIk1vdXNlRXZlbnQiLCJjcmVhdGVFdmVudCIsImluaXRNb3VzZUV2ZW50IiwiaGFuZGxlRHJhZ1N0YXJ0Iiwic3RvcmFnZSIsIl9nZXRTdG9yYWdlIiwiZ2V0SXRlbSIsInJlamVjdCIsInNldEl0ZW0iLCJyZW1vdmVJdGVtIiwic3RvcmFnZVR5cGUiLCJ0ZXN0S2V5IiwiaGFzU3RvcmFnZSIsIm5vb3BTdG9yYWdlIiwiYXBpIiwibG9jYWxzIiwiaXNPbGRJRSIsImFsbCIsImF0b2IiLCJnZXRUYXJnZXQiLCJzdHlsZVRhcmdldCIsImNvbnRlbnREb2N1bWVudCIsImhlYWQiLCJzdHlsZXNJbkRvbSIsImdldEluZGV4QnlJZGVudGlmaWVyIiwibW9kdWxlc1RvRG9tIiwiaWRDb3VudE1hcCIsImlkZW50aWZpZXJzIiwibWVkaWEiLCJyZWZlcmVuY2VzIiwiYWRkU3R5bGUiLCJpbnNlcnRTdHlsZUVsZW1lbnQiLCJub25jZSIsImluc2VydCIsInRleHRTdG9yZSIsInJlcGxhY2VUZXh0IiwicmVwbGFjZW1lbnQiLCJhcHBseVRvU2luZ2xldG9uVGFnIiwic3R5bGVTaGVldCIsImNzc1RleHQiLCJjc3NOb2RlIiwiY2hpbGROb2RlcyIsImFwcGx5VG9UYWciLCJzaW5nbGV0b24iLCJzaW5nbGV0b25Db3VudGVyIiwic3R5bGVJbmRleCIsInJlbW92ZVN0eWxlRWxlbWVudCIsImxhc3RJZGVudGlmaWVycyIsIm5ld0xpc3QiLCJuZXdMYXN0SWRlbnRpZmllcnMiLCJfaW5kZXgiLCJfX19DU1NfTE9BREVSX0VYUE9SVF9fXyIsIlJlYWN0UmVkdXhDb250ZXh0IiwibnVsbExpc3RlbmVycyIsIm5vdGlmeSIsImNyZWF0ZUxpc3RlbmVyQ29sbGVjdGlvbiIsImJhdGNoIiwiZmlyc3QiLCJjbGVhciIsInByZXYiLCJTdWJzY3JpcHRpb24iLCJwYXJlbnRTdWIiLCJoYW5kbGVDaGFuZ2VXcmFwcGVyIiwiYWRkTmVzdGVkU3ViIiwidHJ5U3Vic2NyaWJlIiwibm90aWZ5TmVzdGVkU3VicyIsIm9uU3RhdGVDaGFuZ2UiLCJ0cnlVbnN1YnNjcmliZSIsImNvbnRleHRWYWx1ZSIsInN1YnNjcmlwdGlvbiIsInByZXZpb3VzU3RhdGUiLCJDb250ZXh0IiwidXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdCIsIkVNUFRZX0FSUkFZIiwiTk9fU1VCU0NSSVBUSU9OX0FSUkFZIiwic3RvcmVTdGF0ZVVwZGF0ZXNSZWR1Y2VyIiwidXBkYXRlQ291bnQiLCJ1c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0V2l0aEFyZ3MiLCJlZmZlY3RGdW5jIiwiZWZmZWN0QXJncyIsImNhcHR1cmVXcmFwcGVyUHJvcHMiLCJsYXN0V3JhcHBlclByb3BzIiwibGFzdENoaWxkUHJvcHMiLCJyZW5kZXJJc1NjaGVkdWxlZCIsIndyYXBwZXJQcm9wcyIsImFjdHVhbENoaWxkUHJvcHMiLCJjaGlsZFByb3BzRnJvbVN0b3JlVXBkYXRlIiwic3Vic2NyaWJlVXBkYXRlcyIsInNob3VsZEhhbmRsZVN0YXRlQ2hhbmdlcyIsImNoaWxkUHJvcHNTZWxlY3RvciIsImZvcmNlQ29tcG9uZW50VXBkYXRlRGlzcGF0Y2giLCJkaWRVbnN1YnNjcmliZSIsImxhc3RUaHJvd25FcnJvciIsImNoZWNrRm9yVXBkYXRlcyIsIm5ld0NoaWxkUHJvcHMiLCJsYXRlc3RTdG9yZVN0YXRlIiwiaW5pdFN0YXRlVXBkYXRlcyIsImNvbm5lY3RBZHZhbmNlZCIsInNlbGVjdG9yRmFjdG9yeSIsIl9yZWYyJGdldERpc3BsYXlOYW1lIiwiZ2V0RGlzcGxheU5hbWUiLCJfcmVmMiRtZXRob2ROYW1lIiwibWV0aG9kTmFtZSIsIl9yZWYyJHJlbmRlckNvdW50UHJvcCIsInJlbmRlckNvdW50UHJvcCIsIl9yZWYyJHNob3VsZEhhbmRsZVN0YSIsIl9yZWYyJHN0b3JlS2V5Iiwic3RvcmVLZXkiLCJfcmVmMiRmb3J3YXJkUmVmIiwid2l0aFJlZiIsIl9yZWYyJGNvbnRleHQiLCJjb25uZWN0T3B0aW9ucyIsIldyYXBwZWRDb21wb25lbnQiLCJ3cmFwcGVkQ29tcG9uZW50TmFtZSIsInNlbGVjdG9yRmFjdG9yeU9wdGlvbnMiLCJwdXJlIiwidXNlUHVyZU9ubHlNZW1vIiwiQ29ubmVjdEZ1bmN0aW9uIiwiX3VzZU1lbW8iLCJyZWFjdFJlZHV4Rm9yd2FyZGVkUmVmIiwicHJvcHNDb250ZXh0IiwiQ29udGV4dFRvVXNlIiwiZGlkU3RvcmVDb21lRnJvbVByb3BzIiwiY3JlYXRlQ2hpbGRTZWxlY3RvciIsIl91c2VNZW1vMiIsIm92ZXJyaWRkZW5Db250ZXh0VmFsdWUiLCJfdXNlUmVkdWNlciIsInByZXZpb3VzU3RhdGVVcGRhdGVSZXN1bHQiLCJyZW5kZXJlZFdyYXBwZWRDb21wb25lbnQiLCJDb25uZWN0IiwiZm9yd2FyZGVkIiwic2hhbGxvd0VxdWFsIiwib2JqQSIsIm9iakIiLCJrZXlzQSIsImtleXNCIiwid3JhcE1hcFRvUHJvcHNDb25zdGFudCIsImdldENvbnN0YW50IiwiY29uc3RhbnRTZWxlY3RvciIsImRlcGVuZHNPbk93blByb3BzIiwiZ2V0RGVwZW5kc09uT3duUHJvcHMiLCJtYXBUb1Byb3BzIiwid3JhcE1hcFRvUHJvcHNGdW5jIiwicHJveHkiLCJzdGF0ZU9yRGlzcGF0Y2giLCJvd25Qcm9wcyIsIm1hcERpc3BhdGNoVG9Qcm9wcyIsIm1hcFN0YXRlVG9Qcm9wcyIsImRlZmF1bHRNZXJnZVByb3BzIiwic3RhdGVQcm9wcyIsImRpc3BhdGNoUHJvcHMiLCJtZXJnZVByb3BzIiwibWVyZ2VkUHJvcHMiLCJhcmVNZXJnZWRQcm9wc0VxdWFsIiwiaGFzUnVuT25jZSIsIm5leHRNZXJnZWRQcm9wcyIsIndyYXBNZXJnZVByb3BzRnVuYyIsImltcHVyZUZpbmFsUHJvcHNTZWxlY3RvckZhY3RvcnkiLCJwdXJlRmluYWxQcm9wc1NlbGVjdG9yRmFjdG9yeSIsImFyZVN0YXRlc0VxdWFsIiwiYXJlT3duUHJvcHNFcXVhbCIsImFyZVN0YXRlUHJvcHNFcXVhbCIsImhhc1J1bkF0TGVhc3RPbmNlIiwiaGFuZGxlU3Vic2VxdWVudENhbGxzIiwibmV4dE93blByb3BzIiwibmV4dFN0YXRlUHJvcHMiLCJzdGF0ZVByb3BzQ2hhbmdlZCIsInByb3BzQ2hhbmdlZCIsInN0YXRlQ2hhbmdlZCIsImZpbmFsUHJvcHNTZWxlY3RvckZhY3RvcnkiLCJpbml0TWFwU3RhdGVUb1Byb3BzIiwiaW5pdE1hcERpc3BhdGNoVG9Qcm9wcyIsImluaXRNZXJnZVByb3BzIiwiZmFjdG9yaWVzIiwic3RyaWN0RXF1YWwiLCJjcmVhdGVDb25uZWN0IiwiX3RlbXAiLCJfcmVmJGNvbm5lY3RIT0MiLCJjb25uZWN0SE9DIiwiX3JlZiRtYXBTdGF0ZVRvUHJvcHNGIiwibWFwU3RhdGVUb1Byb3BzRmFjdG9yaWVzIiwiX3JlZiRtYXBEaXNwYXRjaFRvUHJvIiwibWFwRGlzcGF0Y2hUb1Byb3BzRmFjdG9yaWVzIiwiX3JlZiRtZXJnZVByb3BzRmFjdG9yIiwibWVyZ2VQcm9wc0ZhY3RvcmllcyIsIl9yZWYkc2VsZWN0b3JGYWN0b3J5IiwiX3JlZjMiLCJfcmVmMyRwdXJlIiwiX3JlZjMkYXJlU3RhdGVzRXF1YWwiLCJfcmVmMyRhcmVPd25Qcm9wc0VxdWEiLCJfcmVmMyRhcmVTdGF0ZVByb3BzRXEiLCJfcmVmMyRhcmVNZXJnZWRQcm9wc0UiLCJleHRyYU9wdGlvbnMiLCJuZXdCYXRjaCIsIkxPQ0FUSU9OX0NIQU5HRSIsInVwZGF0ZUxvY2F0aW9uIiwiaXNBYnNvbHV0ZSIsInBhdGhuYW1lIiwic3BsaWNlT25lIiwiaGFzVHJhaWxpbmdTbGFzaCIsInRvUGFydHMiLCJmcm9tUGFydHMiLCJpc1RvQWJzIiwiaXNGcm9tQWJzIiwibXVzdEVuZEFicyIsInBhcnQiLCJ1bnNoaWZ0IiwiYWRkTGVhZGluZ1NsYXNoIiwic3RyaXBMZWFkaW5nU2xhc2giLCJzdHJpcEJhc2VuYW1lIiwiaGFzQmFzZW5hbWUiLCJzdHJpcFRyYWlsaW5nU2xhc2giLCJjcmVhdGVQYXRoIiwiY3JlYXRlTG9jYXRpb24iLCJjdXJyZW50TG9jYXRpb24iLCJoYXNoSW5kZXgiLCJzZWFyY2hJbmRleCIsInBhcnNlUGF0aCIsImRlY29kZVVSSSIsIlVSSUVycm9yIiwiY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXIiLCJwcm9tcHQiLCJzZXRQcm9tcHQiLCJuZXh0UHJvbXB0IiwiY29uZmlybVRyYW5zaXRpb25UbyIsImdldFVzZXJDb25maXJtYXRpb24iLCJhcHBlbmRMaXN0ZW5lciIsImlzQWN0aXZlIiwibm90aWZ5TGlzdGVuZXJzIiwiY2FuVXNlRE9NIiwiZ2V0Q29uZmlybWF0aW9uIiwiY29uZmlybSIsImdldEhpc3RvcnlTdGF0ZSIsImhpc3RvcnkiLCJjcmVhdGVCcm93c2VySGlzdG9yeSIsImdsb2JhbEhpc3RvcnkiLCJjYW5Vc2VIaXN0b3J5IiwibmVlZHNIYXNoQ2hhbmdlTGlzdGVuZXIiLCJfcHJvcHMiLCJfcHJvcHMkZm9yY2VSZWZyZXNoIiwiZm9yY2VSZWZyZXNoIiwiX3Byb3BzJGdldFVzZXJDb25maXJtIiwiX3Byb3BzJGtleUxlbmd0aCIsImtleUxlbmd0aCIsImJhc2VuYW1lIiwiZ2V0RE9NTG9jYXRpb24iLCJoaXN0b3J5U3RhdGUiLCJfd2luZG93JGxvY2F0aW9uIiwiY3JlYXRlS2V5IiwidHJhbnNpdGlvbk1hbmFnZXIiLCJoYW5kbGVQb3BTdGF0ZSIsImlzRXh0cmFuZW91c1BvcHN0YXRlRXZlbnQiLCJoYW5kbGVQb3AiLCJoYW5kbGVIYXNoQ2hhbmdlIiwiZm9yY2VOZXh0UG9wIiwib2siLCJmcm9tTG9jYXRpb24iLCJ0b0xvY2F0aW9uIiwidG9JbmRleCIsImFsbEtleXMiLCJmcm9tSW5kZXgiLCJnbyIsInJldmVydFBvcCIsImluaXRpYWxMb2NhdGlvbiIsImNyZWF0ZUhyZWYiLCJsaXN0ZW5lckNvdW50IiwiY2hlY2tET01MaXN0ZW5lcnMiLCJpc0Jsb2NrZWQiLCJwdXNoU3RhdGUiLCJwcmV2SW5kZXgiLCJuZXh0S2V5cyIsInJlcGxhY2VTdGF0ZSIsImdvQmFjayIsImdvRm9yd2FyZCIsImJsb2NrIiwidW5ibG9jayIsImxpc3RlbiIsInVubGlzdGVuIiwiSGFzaFBhdGhDb2RlcnMiLCJoYXNoYmFuZyIsImVuY29kZVBhdGgiLCJkZWNvZGVQYXRoIiwibm9zbGFzaCIsInNsYXNoIiwic3RyaXBIYXNoIiwiZ2V0SGFzaFBhdGgiLCJyZXBsYWNlSGFzaFBhdGgiLCJjcmVhdGVIYXNoSGlzdG9yeSIsIl9wcm9wcyRoYXNoVHlwZSIsImhhc2hUeXBlIiwiX0hhc2hQYXRoQ29kZXJzJGhhc2hUIiwiaWdub3JlUGF0aCIsImVuY29kZWRQYXRoIiwicHJldkxvY2F0aW9uIiwiYWxsUGF0aHMiLCJsYXN0SW5kZXhPZiIsImJhc2VUYWciLCJnZXRBdHRyaWJ1dGUiLCJwdXNoSGFzaFBhdGgiLCJuZXh0UGF0aHMiLCJsb3dlckJvdW5kIiwidXBwZXJCb3VuZCIsImNyZWF0ZU1lbW9yeUhpc3RvcnkiLCJfcHJvcHMkaW5pdGlhbEVudHJpZXMiLCJpbml0aWFsRW50cmllcyIsIl9wcm9wcyRpbml0aWFsSW5kZXgiLCJpbml0aWFsSW5kZXgiLCJlbnRyaWVzIiwiZW50cnkiLCJuZXh0SW5kZXgiLCJuZXh0RW50cmllcyIsImNhbkdvIiwiaGlzdG9yeUNvbnRleHQiLCJjcmVhdGVOYW1lZENvbnRleHQkMSIsIlJvdXRlciIsIl9pc01vdW50ZWQiLCJfcGVuZGluZ0xvY2F0aW9uIiwic3RhdGljQ29udGV4dCIsImNvbXB1dGVSb290TWF0Y2giLCJpc0V4YWN0IiwiY2FjaGUkMSIsImNhY2hlQ291bnQkMSIsIm1hdGNoUGF0aCIsIl9vcHRpb25zIiwiX29wdGlvbnMkZXhhY3QiLCJfb3B0aW9ucyRzdHJpY3QiLCJfb3B0aW9ucyRzZW5zaXRpdmUiLCJfY29tcGlsZVBhdGgiLCJjYWNoZUtleSIsInBhdGhDYWNoZSIsInJlZ2V4cCIsImNvbXBpbGVQYXRoJDEiLCJSb3V0ZSIsImNvbnRleHQkMSIsImNvbXB1dGVkTWF0Y2giLCJjcmVhdGVVUkwiLCJzdGF0aWNIYW5kbGVyIiwiU3dpdGNoIiwiU1BBQ0lOR1MiLCJHUklEX1NJWkVTIiwiZ2V0T2Zmc2V0IiwiZGl2IiwiX3Byb3BzJGFsaWduQ29udGVudCIsImFsaWduQ29udGVudCIsIl9wcm9wcyRhbGlnbkl0ZW1zIiwiYWxpZ25JdGVtcyIsImNsYXNzTmFtZVByb3AiLCJfcHJvcHMkY29udGFpbmVyIiwiX3Byb3BzJGRpcmVjdGlvbiIsIl9wcm9wcyRpdGVtIiwiX3Byb3BzJGp1c3RpZnkiLCJqdXN0aWZ5IiwiX3Byb3BzJGxnIiwiX3Byb3BzJG1kIiwiX3Byb3BzJHNtIiwiX3Byb3BzJHNwYWNpbmciLCJfcHJvcHMkd3JhcCIsIndyYXAiLCJfcHJvcHMkeGwiLCJfcHJvcHMkeHMiLCJfcHJvcHMkemVyb01pbldpZHRoIiwiemVyb01pbldpZHRoIiwid2l0aFN0eWxlcyIsImJveFNpemluZyIsImZsZXhXcmFwIiwibWFyZ2luIiwibWluV2lkdGgiLCJqdXN0aWZ5Q29udGVudCIsInRoZW1lU3BhY2luZyIsImdlbmVyYXRlR3V0dGVyIiwiYWNjdW11bGF0b3IiLCJnbG9iYWxTdHlsZXMiLCJmbGV4QmFzaXMiLCJtYXhXaWR0aCIsImdlbmVyYXRlR3JpZCIsImRlZmF1bHRWYXJpYW50TWFwcGluZyIsIl9wcm9wcyRhbGlnbiIsImFsaWduIiwiX3Byb3BzJGRpc3BsYXkiLCJfcHJvcHMkZ3V0dGVyQm90dG9tIiwiZ3V0dGVyQm90dG9tIiwiX3Byb3BzJG5vV3JhcCIsIm5vV3JhcCIsIl9wcm9wcyRwYXJhZ3JhcGgiLCJwYXJhZ3JhcGgiLCJfcHJvcHMkdmFyaWFudCIsInZhcmlhbnQiLCJfcHJvcHMkdmFyaWFudE1hcHBpbmciLCJ2YXJpYW50TWFwcGluZyIsInNyT25seSIsImFsaWduTGVmdCIsInRleHRBbGlnbiIsImFsaWduQ2VudGVyIiwiYWxpZ25SaWdodCIsImFsaWduSnVzdGlmeSIsInRleHRPdmVyZmxvdyIsIndoaXRlU3BhY2UiLCJjb2xvckluaGVyaXQiLCJjb2xvclRleHRQcmltYXJ5IiwiY29sb3JUZXh0U2Vjb25kYXJ5IiwiZGlzcGxheUlubGluZSIsImRpc3BsYXlCbG9jayIsIl9wcm9wcyRhYnNvbHV0ZSIsImFic29sdXRlIiwiX3Byb3BzJGZsZXhJdGVtIiwiZmxleEl0ZW0iLCJfcHJvcHMkbGlnaHQiLCJfcHJvcHMkb3JpZW50YXRpb24iLCJvcmllbnRhdGlvbiIsIl9wcm9wcyRyb2xlIiwidmVydGljYWwiLCJib3JkZXIiLCJiYWNrZ3JvdW5kQ29sb3IiLCJpbnNldCIsIm1pZGRsZSIsImFsaWduU2VsZiIsImZvcm1Db250cm9sU3RhdGUiLCJzdGF0ZXMiLCJtdWlGb3JtQ29udHJvbCIsIkZvcm1Db250cm9sQ29udGV4dCIsInVzZUZvcm1Db250cm9sIiwic2V0UmVmIiwidXNlRm9ya1JlZiIsInJlZkEiLCJyZWZCIiwicmVmVmFsdWUiLCJ3YWl0IiwiZGVib3VuY2VkIiwidGhhdCIsImxhdGVyIiwiZ2V0U3R5bGVWYWx1ZSIsInVzZUVuaGFuY2VkRWZmZWN0IiwidmlzaWJpbGl0eSIsIm9uQ2hhbmdlIiwicm93cyIsInJvd3NNYXgiLCJfcHJvcHMkcm93c01pbiIsInJvd3NNaW4iLCJyb3dzTWluUHJvcCIsImlzQ29udHJvbGxlZCIsImlucHV0UmVmIiwiaGFuZGxlUmVmIiwic2hhZG93UmVmIiwicmVuZGVycyIsIl9SZWFjdCR1c2VTdGF0ZSIsInN5bmNIZWlnaHQiLCJpbnB1dFNoYWxsb3ciLCJwbGFjZWhvbGRlciIsInNpbmdsZVJvd0hlaWdodCIsIm91dGVySGVpZ2h0U3R5bGUiLCJoYW5kbGVSZXNpemUiLCJyZWFkT25seSIsInRhYkluZGV4IiwiaGFzVmFsdWUiLCJpc0ZpbGxlZCIsIlNTUiIsImFyaWFEZXNjcmliZWRieSIsImF1dG9Db21wbGV0ZSIsImVuZEFkb3JubWVudCIsIl9wcm9wcyRmdWxsV2lkdGgiLCJmdWxsV2lkdGgiLCJfcHJvcHMkaW5wdXRDb21wb25lbnQiLCJpbnB1dENvbXBvbmVudCIsIl9wcm9wcyRpbnB1dFByb3BzIiwiaW5wdXRQcm9wcyIsImlucHV0UHJvcHNQcm9wIiwiaW5wdXRSZWZQcm9wIiwiX3Byb3BzJG11bHRpbGluZSIsIm11bHRpbGluZSIsIm9uQmx1ciIsIm9uRm9jdXMiLCJvbktleURvd24iLCJvbktleVVwIiwicmVuZGVyU3VmZml4Iiwic3RhcnRBZG9ybm1lbnQiLCJfcHJvcHMkdHlwZSIsInZhbHVlUHJvcCIsImhhbmRsZUlucHV0UmVmV2FybmluZyIsImhhbmRsZUlucHV0UHJvcHNSZWZQcm9wIiwiaGFuZGxlSW5wdXRSZWZQcm9wIiwiaGFuZGxlSW5wdXRSZWYiLCJmb2N1c2VkIiwic2V0Rm9jdXNlZCIsImZjcyIsIm9uRmlsbGVkIiwib25FbXB0eSIsImNoZWNrRGlydHkiLCJJbnB1dENvbXBvbmVudCIsInNldEFkb3JuZWRTdGFydCIsImZvcm1Db250cm9sIiwiYWRvcm5lZFN0YXJ0IiwiYWRvcm5lZEVuZCIsIm1hcmdpbkRlbnNlIiwib25BbmltYXRpb25TdGFydCIsInJlcXVpcmVkIiwiaW5wdXRNdWx0aWxpbmUiLCJoaWRkZW5MYWJlbCIsImlucHV0SGlkZGVuTGFiZWwiLCJpbnB1dEFkb3JuZWRTdGFydCIsImlucHV0QWRvcm5lZEVuZCIsImlucHV0VHlwZVNlYXJjaCIsImlucHV0TWFyZ2luRGVuc2UiLCJwbGFjZWhvbGRlckhpZGRlbiIsInBsYWNlaG9sZGVyVmlzaWJsZSIsImN1cnNvciIsImZvbnQiLCJXZWJraXRUYXBIaWdobGlnaHRDb2xvciIsImFuaW1hdGlvbkR1cmF0aW9uIiwib3V0bGluZSIsImJveFNoYWRvdyIsInJlc2l6ZSIsImRpc2FibGVVbmRlcmxpbmUiLCJ1bmRlcmxpbmUiLCJib3R0b21MaW5lQ29sb3IiLCJib3JkZXJCb3R0b21Db2xvciIsImJvcmRlckJvdHRvbSIsInBvaW50ZXJFdmVudHMiLCJib3JkZXJCb3R0b21TdHlsZSIsImJvcmRlclRvcExlZnRSYWRpdXMiLCJib3JkZXJUb3BSaWdodFJhZGl1cyIsIldlYmtpdEJveFNoYWRvdyIsIldlYmtpdFRleHRGaWxsQ29sb3IiLCJjYXJldENvbG9yIiwibGFiZWwiLCJsYWJlbFdpZHRoUHJvcCIsImxhYmVsV2lkdGgiLCJub3RjaGVkIiwibGVnZW5kTGFiZWxsZWQiLCJsZWdlbmROb3RjaGVkIiwibGVnZW5kIiwiYm9yZGVyU3R5bGUiLCJib3JkZXJXaWR0aCIsIl9wcm9wcyRsYWJlbFdpZHRoIiwibm90Y2hlZE91dGxpbmUiLCJmaWxsZWQiLCJib3JkZXJDb2xvciIsIl9wcm9wcyRkaXNhYmxlQW5pbWF0aSIsImRpc2FibGVBbmltYXRpb24iLCJzaHJpbmtQcm9wIiwic2hyaW5rIiwiYW5pbWF0ZWQiLCJvdXRsaW5lZCIsInRyYW5zZm9ybU9yaWdpbiIsImlzTXVpRWxlbWVudCIsIm11aU5hbWVzIiwiX3Byb3BzJGRpc2FibGVkIiwiX3Byb3BzJGVycm9yIiwidmlzdWFsbHlGb2N1c2VkIiwiX3Byb3BzJGhpZGRlbkxhYmVsIiwiX3Byb3BzJG1hcmdpbiIsIl9wcm9wcyRyZXF1aXJlZCIsImluaXRpYWxBZG9ybmVkU3RhcnQiLCJfUmVhY3QkdXNlU3RhdGUyIiwiaW5pdGlhbEZpbGxlZCIsInNldEZpbGxlZCIsIl9SZWFjdCR1c2VTdGF0ZTMiLCJfZm9jdXNlZCIsImNoaWxkQ29udGV4dCIsInJlZ2lzdGVyRWZmZWN0IiwidmVydGljYWxBbGlnbiIsIm1hcmdpbk5vcm1hbCIsImNvbnRhaW5lZCIsImNyZWF0ZUNoYWluZWRGdW5jdGlvbiIsIl9sZW4yIiwiX2tleTIiLCJfcHJvcHMkZGlzYWJsZVBvcnRhbCIsImRpc2FibGVQb3J0YWwiLCJvblJlbmRlcmVkIiwibW91bnROb2RlIiwic2V0TW91bnROb2RlIiwiZ2V0Q29udGFpbmVyIiwidXNlRXZlbnRDYWxsYmFjayIsImdldFNjcm9sbGJhclNpemUiLCJzY3JvbGxEaXYiLCJzY3JvbGxiYXJTaXplIiwiYXJpYUhpZGRlbiIsInNob3ciLCJnZXRQYWRkaW5nUmlnaHQiLCJhcmlhSGlkZGVuU2libGluZ3MiLCJjdXJyZW50Tm9kZSIsIm5vZGVzVG9FeGNsdWRlIiwiYmxhY2tsaXN0VGFnTmFtZXMiLCJmaW5kSW5kZXhPZiIsImlkeCIsImhhbmRsZUNvbnRhaW5lciIsImZpeGVkTm9kZXMiLCJyZXN0b3JlU3R5bGUiLCJyZXN0b3JlUGFkZGluZ3MiLCJkaXNhYmxlU2Nyb2xsTG9jayIsImlzT3ZlcmZsb3dpbmciLCJzY3JvbGxDb250YWluZXIiLCJyZW1vdmVQcm9wZXJ0eSIsIk1vZGFsTWFuYWdlciIsIm1vZGFscyIsImNvbnRhaW5lcnMiLCJtb2RhbEluZGV4IiwibW9kYWxSZWYiLCJoaWRkZW5TaWJsaW5nTm9kZXMiLCJoaWRkZW5TaWJsaW5ncyIsImdldEhpZGRlblNpYmxpbmdzIiwiY29udGFpbmVySW5kZXgiLCJyZXN0b3JlIiwibmV4dFRvcCIsIl9wcm9wcyRkaXNhYmxlQXV0b0ZvYyIsImRpc2FibGVBdXRvRm9jdXMiLCJfcHJvcHMkZGlzYWJsZUVuZm9yY2UiLCJkaXNhYmxlRW5mb3JjZUZvY3VzIiwiX3Byb3BzJGRpc2FibGVSZXN0b3JlIiwiZGlzYWJsZVJlc3RvcmVGb2N1cyIsImdldERvYyIsImlzRW5hYmxlZCIsIm9wZW4iLCJpZ25vcmVOZXh0RW5mb3JjZUZvY3VzIiwic2VudGluZWxTdGFydCIsInNlbnRpbmVsRW5kIiwibm9kZVRvUmVzdG9yZSIsInJvb3RSZWYiLCJoYW5kbGVPd25SZWYiLCJwcmV2T3BlblJlZiIsImNvbnRhaW4iLCJoYXNGb2N1cyIsImxvb3BGb2N1cyIsImludGVydmFsIiwic2V0SW50ZXJ2YWwiLCJjbGVhckludGVydmFsIiwiaW52aXNpYmxlIiwiX3Byb3BzJGludmlzaWJsZSIsImRlZmF1bHRNYW5hZ2VyIiwiaW5Qcm9wcyIsIl9wcm9wcyRCYWNrZHJvcENvbXBvbiIsIkJhY2tkcm9wQ29tcG9uZW50IiwiQmFja2Ryb3BQcm9wcyIsIl9wcm9wcyRjbG9zZUFmdGVyVHJhbiIsImNsb3NlQWZ0ZXJUcmFuc2l0aW9uIiwiX3Byb3BzJGRpc2FibGVCYWNrZHJvIiwiZGlzYWJsZUJhY2tkcm9wQ2xpY2siLCJfcHJvcHMkZGlzYWJsZUVzY2FwZUsiLCJkaXNhYmxlRXNjYXBlS2V5RG93biIsIl9wcm9wcyRkaXNhYmxlU2Nyb2xsTCIsIl9wcm9wcyRoaWRlQmFja2Ryb3AiLCJoaWRlQmFja2Ryb3AiLCJfcHJvcHMka2VlcE1vdW50ZWQiLCJrZWVwTW91bnRlZCIsIl9wcm9wcyRtYW5hZ2VyIiwibWFuYWdlciIsIm9uQmFja2Ryb3BDbGljayIsIm9uQ2xvc2UiLCJvbkVzY2FwZUtleURvd24iLCJleGl0ZWQiLCJzZXRFeGl0ZWQiLCJtb3VudE5vZGVSZWYiLCJoYXNUcmFuc2l0aW9uIiwiZ2V0SGFzVHJhbnNpdGlvbiIsImdldE1vZGFsIiwiaGFuZGxlTW91bnRlZCIsIm1vdW50IiwiaGFuZGxlT3BlbiIsInJlc29sdmVkQ29udGFpbmVyIiwiaXNUb3BNb2RhbCIsImhhbmRsZVBvcnRhbFJlZiIsImhhbmRsZUNsb3NlIiwiaW5saW5lU3R5bGUiLCJjaGlsZFByb3BzIiwib25FbnRlciIsIm9uRXhpdGVkIiwiVHJhbnNpdGlvbiIsImluaXRpYWxTdGF0dXMiLCJhcHBlYXIiLCJpc01vdW50aW5nIiwiZW50ZXIiLCJhcHBlYXJTdGF0dXMiLCJpbiIsInVubW91bnRPbkV4aXQiLCJtb3VudE9uRW50ZXIiLCJzdGF0dXMiLCJuZXh0Q2FsbGJhY2siLCJ1cGRhdGVTdGF0dXMiLCJwcmV2UHJvcHMiLCJuZXh0U3RhdHVzIiwiY2FuY2VsTmV4dENhbGxiYWNrIiwiZ2V0VGltZW91dHMiLCJleGl0IiwibW91bnRpbmciLCJwZXJmb3JtRW50ZXIiLCJwZXJmb3JtRXhpdCIsImFwcGVhcmluZyIsIm1heWJlTm9kZSIsIm1heWJlQXBwZWFyaW5nIiwidGltZW91dHMiLCJlbnRlclRpbWVvdXQiLCJzYWZlU2V0U3RhdGUiLCJvbkVudGVyZWQiLCJvbkVudGVyaW5nIiwib25FeGl0Iiwib25FeGl0aW5nIiwic2V0TmV4dENhbGxiYWNrIiwiZG9lc05vdEhhdmVUaW1lb3V0T3JMaXN0ZW5lciIsImFkZEVuZExpc3RlbmVyIiwibWF5YmVOZXh0Q2FsbGJhY2siLCJUcmFuc2l0aW9uR3JvdXBDb250ZXh0IiwiVU5NT1VOVEVEIiwiRVhJVEVEIiwiRU5URVJJTkciLCJFTlRFUkVEIiwiRVhJVElORyIsInJlZmxvdyIsImdldFRyYW5zaXRpb25Qcm9wcyIsIl9wcm9wcyRzdHlsZSIsInRyYW5zaXRpb25EdXJhdGlvbiIsInRyYW5zaXRpb25EZWxheSIsImdldFNjYWxlIiwiZW50ZXJpbmciLCJlbnRlcmVkIiwiX3Byb3BzJGRpc2FibGVTdHJpY3RNIiwiZGlzYWJsZVN0cmljdE1vZGVDb21wYXQiLCJpblByb3AiLCJfcHJvcHMkdGltZW91dCIsIl9wcm9wcyRUcmFuc2l0aW9uQ29tcCIsIlRyYW5zaXRpb25Db21wb25lbnQiLCJ0aW1lciIsImF1dG9UaW1lb3V0IiwiZW5hYmxlU3RyaWN0TW9kZUNvbXBhdCIsInVuc3RhYmxlX3N0cmljdE1vZGUiLCJmb3JlaWduUmVmIiwibm9ybWFsaXplZFRyYW5zaXRpb25DYWxsYmFjayIsIm5vZGVPckFwcGVhcmluZyIsImlzQXBwZWFyaW5nIiwiaGFuZGxlRW50ZXJpbmciLCJoYW5kbGVFbnRlciIsIl9nZXRUcmFuc2l0aW9uUHJvcHMiLCJoYW5kbGVFbnRlcmVkIiwiaGFuZGxlRXhpdGluZyIsImhhbmRsZUV4aXQiLCJfZ2V0VHJhbnNpdGlvblByb3BzMiIsImhhbmRsZUV4aXRlZCIsIm5vZGVPck5leHQiLCJtYXliZU5leHQiLCJtdWlTdXBwb3J0QXV0byIsIl9wcm9wcyRzcXVhcmUiLCJzcXVhcmUiLCJfcHJvcHMkZWxldmF0aW9uIiwiZWxldmF0aW9uIiwicm91bmRlZCIsImVsZXZhdGlvbnMiLCJzaGFkb3ciLCJnZXRPZmZzZXRUb3AiLCJnZXRPZmZzZXRMZWZ0IiwiaG9yaXpvbnRhbCIsImdldFRyYW5zZm9ybU9yaWdpblZhbHVlIiwiZ2V0QW5jaG9yRWwiLCJhbmNob3JFbCIsIl9wcm9wcyRhbmNob3JPcmlnaW4iLCJhbmNob3JPcmlnaW4iLCJhbmNob3JQb3NpdGlvbiIsIl9wcm9wcyRhbmNob3JSZWZlcmVuYyIsImFuY2hvclJlZmVyZW5jZSIsImNvbnRhaW5lclByb3AiLCJnZXRDb250ZW50QW5jaG9yRWwiLCJfcHJvcHMkbWFyZ2luVGhyZXNob2wiLCJtYXJnaW5UaHJlc2hvbGQiLCJfcHJvcHMkUGFwZXJQcm9wcyIsIlBhcGVyUHJvcHMiLCJfcHJvcHMkdHJhbnNmb3JtT3JpZ2kiLCJfcHJvcHMkdHJhbnNpdGlvbkR1cmEiLCJ0cmFuc2l0aW9uRHVyYXRpb25Qcm9wIiwiX3Byb3BzJFRyYW5zaXRpb25Qcm9wIiwiVHJhbnNpdGlvblByb3BzIiwicGFwZXJSZWYiLCJnZXRBbmNob3JPZmZzZXQiLCJjb250ZW50QW5jaG9yT2Zmc2V0IiwicmVzb2x2ZWRBbmNob3JFbCIsImFuY2hvclJlY3QiLCJhbmNob3JWZXJ0aWNhbCIsImdldENvbnRlbnRBbmNob3JPZmZzZXQiLCJjb250ZW50QW5jaG9yRWwiLCJnZXRUcmFuc2Zvcm1PcmlnaW4iLCJlbGVtUmVjdCIsImdldFBvc2l0aW9uaW5nU3R5bGUiLCJlbGVtVHJhbnNmb3JtT3JpZ2luIiwiY29udGFpbmVyV2luZG93IiwiaGVpZ2h0VGhyZXNob2xkIiwid2lkdGhUaHJlc2hvbGQiLCJfZGlmZiIsIl9kaWZmMiIsIl9kaWZmMyIsInNldFBvc2l0aW9uaW5nU3R5bGVzIiwicG9zaXRpb25pbmciLCJoYW5kbGVQYXBlclJlZiIsInVwZGF0ZVBvc2l0aW9uIiwibWF4SGVpZ2h0IiwiX3Byb3BzJGRlbnNlIiwiZGVuc2UiLCJfcHJvcHMkZGlzYWJsZVBhZGRpbmciLCJkaXNhYmxlUGFkZGluZyIsInN1YmhlYWRlciIsImxpc3RTdHlsZSIsIm5leHRJdGVtIiwiZGlzYWJsZUxpc3RXcmFwIiwicHJldmlvdXNJdGVtIiwicHJldmlvdXNFbGVtZW50U2libGluZyIsInRleHRDcml0ZXJpYU1hdGNoZXMiLCJuZXh0Rm9jdXMiLCJ0ZXh0Q3JpdGVyaWEiLCJpbm5lclRleHQiLCJyZXBlYXRpbmciLCJtb3ZlRm9jdXMiLCJjdXJyZW50Rm9jdXMiLCJkaXNhYmxlZEl0ZW1zRm9jdXNhYmxlIiwidHJhdmVyc2FsRnVuY3Rpb24iLCJ3cmFwcGVkT25jZSIsIm5leHRGb2N1c0Rpc2FibGVkIiwiYWN0aW9ucyIsIl9wcm9wcyRhdXRvRm9jdXMiLCJfcHJvcHMkYXV0b0ZvY3VzSXRlbSIsImF1dG9Gb2N1c0l0ZW0iLCJfcHJvcHMkZGlzYWJsZWRJdGVtc0YiLCJfcHJvcHMkZGlzYWJsZUxpc3RXcmEiLCJsaXN0UmVmIiwidGV4dENyaXRlcmlhUmVmIiwicHJldmlvdXNLZXlNYXRjaGVkIiwibGFzdFRpbWUiLCJhZGp1c3RTdHlsZUZvclNjcm9sbGJhciIsImNvbnRhaW5lckVsZW1lbnQiLCJub0V4cGxpY2l0V2lkdGgiLCJhY3RpdmVJdGVtSW5kZXgiLCJpdGVtcyIsImNyaXRlcmlhIiwibG93ZXJLZXkiLCJjdXJyVGltZSIsImtlZXBGb2N1c09uQ3VycmVudCIsIlJUTF9PUklHSU4iLCJMVFJfT1JJR0lOIiwiZGlzYWJsZUF1dG9Gb2N1c0l0ZW0iLCJfcHJvcHMkTWVudUxpc3RQcm9wcyIsIk1lbnVMaXN0UHJvcHMiLCJQb3BvdmVyQ2xhc3NlcyIsIm1lbnVMaXN0QWN0aW9uc1JlZiIsImNvbnRlbnRBbmNob3JSZWYiLCJXZWJraXRPdmVyZmxvd1Njcm9sbGluZyIsInVzZUNvbnRyb2xsZWQiLCJkZWZhdWx0UHJvcCIsInZhbHVlU3RhdGUiLCJhcmVFcXVhbFZhbHVlcyIsImFyaWFMYWJlbCIsImF1dG9XaWR0aCIsImRpc3BsYXlFbXB0eSIsIkljb25Db21wb25lbnQiLCJsYWJlbElkIiwiX3Byb3BzJE1lbnVQcm9wcyIsIk1lbnVQcm9wcyIsIm9uT3BlbiIsIm9wZW5Qcm9wIiwicmVuZGVyVmFsdWUiLCJfcHJvcHMkU2VsZWN0RGlzcGxheVAiLCJTZWxlY3REaXNwbGF5UHJvcHMiLCJ0YWJJbmRleFByb3AiLCJfdXNlQ29udHJvbGxlZCIsIl91c2VDb250cm9sbGVkMiIsImRpc3BsYXlOb2RlIiwic2V0RGlzcGxheU5vZGUiLCJpc09wZW5Db250cm9sbGVkIiwibWVudU1pbldpZHRoU3RhdGUiLCJzZXRNZW51TWluV2lkdGhTdGF0ZSIsIm9wZW5TdGF0ZSIsInNldE9wZW5TdGF0ZSIsImlzQ29sbGFwc2VkIiwiZGlzcGxheVNpbmdsZSIsImNoaWxkcmVuQXJyYXkiLCJoYW5kbGVJdGVtQ2xpY2siLCJpdGVtSW5kZXgiLCJkaXNwbGF5TXVsdGlwbGUiLCJjb21wdXRlRGlzcGxheSIsIm1lbnVNaW5XaWR0aCIsImJ1dHRvbklkIiwic2VsZWN0TWVudSIsImlzRW1wdHkiLCJuYXRpdmVJbnB1dCIsImljb25PcGVuIiwiY3JlYXRlU3ZnSWNvbiIsImljb25GaWxsZWQiLCJpY29uT3V0bGluZWQiLCJkZWZhdWx0SW5wdXQiLCJfcHJvcHMkSWNvbkNvbXBvbmVudCIsIkFycm93RHJvcERvd24iLCJfcHJvcHMkaW5wdXQiLCJTZWxlY3QiLCJfcHJvcHMkYXV0b1dpZHRoIiwiX3Byb3BzJGRpc3BsYXlFbXB0eSIsIl9wcm9wcyRtdWx0aXBsZSIsIl9wcm9wcyRuYXRpdmUiLCJuYXRpdmUiLCJ2YXJpYW50UHJvcHMiLCJtZXJnZUNsYXNzZXMiLCJiYXNlQ2xhc3NlcyIsIm5ld0NsYXNzZXMiLCJ2YXJpYW50Q29tcG9uZW50IiwiRm9ybUhlbHBlclRleHRQcm9wcyIsImhlbHBlclRleHQiLCJJbnB1dExhYmVsUHJvcHMiLCJJbnB1dFByb3BzIiwiX3Byb3BzJHNlbGVjdCIsIlNlbGVjdFByb3BzIiwiSW5wdXRNb3JlIiwiX0lucHV0TGFiZWxQcm9wcyRyZXF1IiwiZGlzcGxheVJlcXVpcmVkIiwiaGVscGVyVGV4dElkIiwiaW5wdXRMYWJlbElkIiwiSW5wdXRFbGVtZW50IiwiaHRtbEZvciIsImNvbnRyb2wiLCJkaXNhYmxlZFByb3AiLCJfcHJvcHMkbGFiZWxQbGFjZW1lbnQiLCJsYWJlbFBsYWNlbWVudCIsImNvbnRyb2xQcm9wcyIsImxhYmVsUGxhY2VtZW50U3RhcnQiLCJsYWJlbFBsYWNlbWVudFRvcCIsImxhYmVsUGxhY2VtZW50Qm90dG9tIiwiaGFkS2V5Ym9hcmRFdmVudCIsImhhZEZvY3VzVmlzaWJsZVJlY2VudGx5IiwiaGFkRm9jdXNWaXNpYmxlUmVjZW50bHlUaW1lb3V0IiwiaW5wdXRUeXBlc1doaXRlbGlzdCIsImhhbmRsZVBvaW50ZXJEb3duIiwiaGFuZGxlVmlzaWJpbGl0eUNoYW5nZSIsInZpc2liaWxpdHlTdGF0ZSIsImlzQ29udGVudEVkaXRhYmxlIiwiaGFuZGxlQmx1clZpc2libGUiLCJ1c2VJc0ZvY3VzVmlzaWJsZSIsImlzRm9jdXNWaXNpYmxlIiwib25CbHVyVmlzaWJsZSIsImdldENoaWxkTWFwcGluZyIsIm1hcEZuIiwibWFwcGVyIiwiZ2V0UHJvcCIsImdldE5leHRDaGlsZE1hcHBpbmciLCJwcmV2Q2hpbGRNYXBwaW5nIiwibmV4dENoaWxkTWFwcGluZyIsImdldFZhbHVlRm9yS2V5IiwibmV4dEtleXNQZW5kaW5nIiwicGVuZGluZ0tleXMiLCJwcmV2S2V5IiwiY2hpbGRNYXBwaW5nIiwibmV4dEtleSIsInBlbmRpbmdOZXh0S2V5IiwibWVyZ2VDaGlsZE1hcHBpbmdzIiwiaGFzUHJldiIsImhhc05leHQiLCJwcmV2Q2hpbGQiLCJpc0xlYXZpbmciLCJUcmFuc2l0aW9uR3JvdXAiLCJmaXJzdFJlbmRlciIsImN1cnJlbnRDaGlsZE1hcHBpbmciLCJjaGlsZEZhY3RvcnkiLCJfcHJvcHMkcHVsc2F0ZSIsInB1bHNhdGUiLCJyaXBwbGVYIiwicmlwcGxlWSIsInJpcHBsZVNpemUiLCJfcHJvcHMkb25FeGl0ZWQiLCJsZWF2aW5nIiwic2V0TGVhdmluZyIsInJpcHBsZUNsYXNzTmFtZSIsInJpcHBsZSIsInJpcHBsZVZpc2libGUiLCJyaXBwbGVQdWxzYXRlIiwicmlwcGxlU3R5bGVzIiwiY2hpbGRDbGFzc05hbWUiLCJjaGlsZExlYXZpbmciLCJjaGlsZFB1bHNhdGUiLCJ0aW1lb3V0SWQiLCJfcHJvcHMkY2VudGVyIiwiY2VudGVyUHJvcCIsInJpcHBsZXMiLCJzZXRSaXBwbGVzIiwicmlwcGxlQ2FsbGJhY2siLCJpZ25vcmluZ01vdXNlRG93biIsInN0YXJ0VGltZXIiLCJzdGFydFRpbWVyQ29tbWl0Iiwic3RhcnRDb21taXQiLCJvbGRSaXBwbGVzIiwiX29wdGlvbnMkcHVsc2F0ZSIsIl9vcHRpb25zJGNlbnRlciIsIl9vcHRpb25zJGZha2VFbGVtZW50IiwiZmFrZUVsZW1lbnQiLCJzcXJ0Iiwic2l6ZVgiLCJzaXplWSIsImJ1dHRvblJlZlByb3AiLCJidXR0b25SZWYiLCJfcHJvcHMkY2VudGVyUmlwcGxlIiwiY2VudGVyUmlwcGxlIiwiX3Byb3BzJGRpc2FibGVSaXBwbGUiLCJkaXNhYmxlUmlwcGxlIiwiX3Byb3BzJGRpc2FibGVUb3VjaFJpIiwiZGlzYWJsZVRvdWNoUmlwcGxlIiwiX3Byb3BzJGZvY3VzUmlwcGxlIiwiZm9jdXNSaXBwbGUiLCJmb2N1c1Zpc2libGVDbGFzc05hbWUiLCJvbkZvY3VzVmlzaWJsZSIsIm9uVG91Y2hNb3ZlIiwib25EcmFnTGVhdmUiLCJfcHJvcHMkdGFiSW5kZXgiLCJUb3VjaFJpcHBsZVByb3BzIiwicmlwcGxlUmVmIiwiZm9jdXNWaXNpYmxlIiwic2V0Rm9jdXNWaXNpYmxlIiwiX3VzZUlzRm9jdXNWaXNpYmxlIiwiZm9jdXNWaXNpYmxlUmVmIiwidXNlUmlwcGxlSGFuZGxlciIsInJpcHBsZUFjdGlvbiIsImV2ZW50Q2FsbGJhY2siLCJza2lwUmlwcGxlQWN0aW9uIiwiaGFuZGxlRHJhZ0xlYXZlIiwiaGFuZGxlVG91Y2hNb3ZlIiwiaGFuZGxlQmx1ciIsImhhbmRsZUZvY3VzIiwiaXNOb25OYXRpdmVCdXR0b24iLCJrZXlkb3duUmVmIiwiaGFuZGxlS2V5RG93biIsImhhbmRsZUtleVVwIiwiQ29tcG9uZW50UHJvcCIsImJ1dHRvblByb3BzIiwiaGFuZGxlVXNlclJlZiIsIm1vdW50ZWRTdGF0ZSIsInNldE1vdW50ZWRTdGF0ZSIsImVuYWJsZVRvdWNoUmlwcGxlIiwidGV4dERlY29yYXRpb24iLCJjb2xvckFkanVzdCIsIl9wcm9wcyRlZGdlIiwiZWRnZSIsIl9wcm9wcyRkaXNhYmxlRm9jdXNSaSIsImRpc2FibGVGb2N1c1JpcHBsZSIsIl9wcm9wcyRzaXplIiwiZWRnZVN0YXJ0IiwiZWRnZUVuZCIsInNpemVTbWFsbCIsImNoZWNrZWRQcm9wIiwiY2hlY2tlZEljb24iLCJzZXRDaGVja2VkU3RhdGUiLCJoYXNMYWJlbEZvciIsIm5ld0NoZWNrZWQiLCJkZWZhdWx0Q2hlY2tlZEljb24iLCJDaGVja0JveCIsImRlZmF1bHRJY29uIiwiQ2hlY2tCb3hPdXRsaW5lQmxhbmsiLCJkZWZhdWx0SW5kZXRlcm1pbmF0ZUljb24iLCJJbmRldGVybWluYXRlQ2hlY2tCb3giLCJfcHJvcHMkY2hlY2tlZEljb24iLCJfcHJvcHMkaWNvbiIsImljb25Qcm9wIiwiX3Byb3BzJGluZGV0ZXJtaW5hdGUiLCJpbmRldGVybWluYXRlIiwiX3Byb3BzJGluZGV0ZXJtaW5hdGVJIiwiaW5kZXRlcm1pbmF0ZUljb24iLCJpbmRldGVybWluYXRlSWNvblByb3AiLCJleHRlbmRlZCIsInNpemVNZWRpdW0iLCJfcHJvcHMkcmFpc2VkIiwicmFpc2VkIiwiaXNEZWxldGVLZXlib2FyZEV2ZW50Iiwia2V5Ym9hcmRFdmVudCIsImF2YXRhclByb3AiLCJhdmF0YXIiLCJjbGlja2FibGVQcm9wIiwiY2xpY2thYmxlIiwiZGVsZXRlSWNvblByb3AiLCJkZWxldGVJY29uIiwib25EZWxldGUiLCJjaGlwUmVmIiwiaGFuZGxlRGVsZXRlSWNvbkNsaWNrIiwic21hbGwiLCJtb3JlUHJvcHMiLCJjdXN0b21DbGFzc2VzIiwiZGVsZXRlSWNvblNtYWxsIiwiQ2FuY2VsIiwiYXZhdGFyU21hbGwiLCJpY29uU21hbGwiLCJvdXRsaW5lZFByaW1hcnkiLCJvdXRsaW5lZFNlY29uZGFyeSIsImRlbGV0YWJsZSIsImJsdXIiLCJsYWJlbFNtYWxsIiwiZGVsZXRlSWNvbkNvbG9yIiwiY2xpY2thYmxlQ29sb3JQcmltYXJ5IiwiY2xpY2thYmxlQ29sb3JTZWNvbmRhcnkiLCJkZWxldGFibGVDb2xvclByaW1hcnkiLCJkZWxldGFibGVDb2xvclNlY29uZGFyeSIsImF2YXRhckNvbG9yUHJpbWFyeSIsImF2YXRhckNvbG9yU2Vjb25kYXJ5IiwiaWNvbkNvbG9yUHJpbWFyeSIsImljb25Db2xvclNlY29uZGFyeSIsImRlbGV0ZUljb25Db2xvclByaW1hcnkiLCJkZWxldGVJY29uQ29sb3JTZWNvbmRhcnkiLCJkZWxldGVJY29uT3V0bGluZWRDb2xvclByaW1hcnkiLCJkZWxldGVJY29uT3V0bGluZWRDb2xvclNlY29uZGFyeSIsImZvY3VzSGlnaGxpZ2h0IiwiTUVESUFfQ09NUE9ORU5UUyIsImltYWdlIiwic3JjIiwiaXNNZWRpYUNvbXBvbmVudCIsImNvbXBvc2VkU3R5bGUiLCJiYWNrZ3JvdW5kSW1hZ2UiLCJiYWNrZ3JvdW5kU2l6ZSIsImJhY2tncm91bmRSZXBlYXQiLCJiYWNrZ3JvdW5kUG9zaXRpb24iLCJvYmplY3RGaXQiLCJfcHJvcHMkZGlzYWJsZVR5cG9ncmEiLCJkaXNhYmxlVHlwb2dyYXBoeSIsInN1YmhlYWRlclByb3AiLCJzdWJoZWFkZXJUeXBvZ3JhcGh5UHJvcHMiLCJ0aXRsZVByb3AiLCJ0aXRsZVR5cG9ncmFwaHlQcm9wcyIsImNhcmQiLCJjYXJkQWN0aW9uIiwiY2hpcCIsIkxlc3Nvbkl0ZW1CaWciLCJwcmljZSIsImNhdGVnb3J5IiwiY292ZXIiLCJsZXNzb25JZCIsImlzUmVuZGVyIiwic2V0SXNSZW5kZXIiLCJzZXRUaW1lciIsImhhbmRsZVNlbGVjdExlc3NvbiIsInJlZGlyZWN0IiwiZGVmYXVsdFBvcHBlck9wdGlvbnMiLCJfcHJvcHMkcGxhY2VtZW50IiwiaW5pdGlhbFBsYWNlbWVudCIsIl9wcm9wcyRwb3BwZXJPcHRpb25zIiwicG9wcGVyT3B0aW9ucyIsInBvcHBlclJlZlByb3AiLCJwb3BwZXJSZWYiLCJfcHJvcHMkdHJhbnNpdGlvbiIsInRvb2x0aXBSZWYiLCJvd25SZWYiLCJoYW5kbGVQb3BwZXJSZWYiLCJoYW5kbGVQb3BwZXJSZWZSZWYiLCJydGxQbGFjZW1lbnQiLCJmbGlwUGxhY2VtZW50Iiwic2V0UGxhY2VtZW50IiwiaGFuZGxlUG9wcGVyVXBkYXRlIiwiX3Byb3BzJGRpc2FibGVHdXR0ZXJzIiwiZGlzYWJsZUd1dHRlcnMiLCJfcHJvcHMkZGlzYWJsZVN0aWNreSIsImRpc2FibGVTdGlja3kiLCJfcHJvcHMkaW5zZXQiLCJzdGlja3kiLCJ1c2VJZCIsImlkT3ZlcnJpZGUiLCJkZWZhdWx0SWQiLCJzZXREZWZhdWx0SWQiLCJzdHJpcERpYWNyaXRpY3MiLCJjcmVhdGVGaWx0ZXJPcHRpb25zIiwiY29uZmlnIiwiX2NvbmZpZyRpZ25vcmVBY2NlbnRzIiwiaWdub3JlQWNjZW50cyIsIl9jb25maWckaWdub3JlQ2FzZSIsImlnbm9yZUNhc2UiLCJfY29uZmlnJG1hdGNoRnJvbSIsIm1hdGNoRnJvbSIsIl9jb25maWckdHJpbSIsImlucHV0VmFsdWUiLCJnZXRPcHRpb25MYWJlbCIsImZpbHRlcmVkT3B0aW9ucyIsIm9wdGlvbiIsImNhbmRpZGF0ZSIsImNvbXAiLCJkZWZhdWx0RmlsdGVyT3B0aW9ucyIsInVzZUF1dG9jb21wbGV0ZSIsIl9wcm9wcyRhdXRvQ29tcGxldGUiLCJfcHJvcHMkYXV0b0hpZ2hsaWdodCIsImF1dG9IaWdobGlnaHQiLCJfcHJvcHMkYXV0b1NlbGVjdCIsImF1dG9TZWxlY3QiLCJfcHJvcHMkYmx1ck9uU2VsZWN0IiwiYmx1ck9uU2VsZWN0IiwiX3Byb3BzJGNsZWFyT25CbHVyIiwiY2xlYXJPbkJsdXIiLCJmcmVlU29sbyIsIl9wcm9wcyRjbGVhck9uRXNjYXBlIiwiY2xlYXJPbkVzY2FwZSIsIl9wcm9wcyRjb21wb25lbnROYW1lIiwiX3Byb3BzJGRlYnVnIiwiZGVidWciLCJfcHJvcHMkZGVmYXVsdFZhbHVlIiwiX3Byb3BzJGRpc2FibGVDbGVhcmFiIiwiZGlzYWJsZUNsZWFyYWJsZSIsIl9wcm9wcyRkaXNhYmxlQ2xvc2VPbiIsImRpc2FibGVDbG9zZU9uU2VsZWN0IiwiX3Byb3BzJGZpbHRlck9wdGlvbnMiLCJmaWx0ZXJPcHRpb25zIiwiX3Byb3BzJGZpbHRlclNlbGVjdGVkIiwiZmlsdGVyU2VsZWN0ZWRPcHRpb25zIiwiX3Byb3BzJGZyZWVTb2xvIiwiZ2V0T3B0aW9uRGlzYWJsZWQiLCJfcHJvcHMkZ2V0T3B0aW9uTGFiZWwiLCJnZXRPcHRpb25MYWJlbFByb3AiLCJfcHJvcHMkZ2V0T3B0aW9uU2VsZWMiLCJnZXRPcHRpb25TZWxlY3RlZCIsImdyb3VwQnkiLCJfcHJvcHMkaGFuZGxlSG9tZUVuZEsiLCJoYW5kbGVIb21lRW5kS2V5cyIsImlkUHJvcCIsIl9wcm9wcyRpbmNsdWRlSW5wdXRJbiIsImluY2x1ZGVJbnB1dEluTGlzdCIsImlucHV0VmFsdWVQcm9wIiwib25IaWdobGlnaHRDaGFuZ2UiLCJvbklucHV0Q2hhbmdlIiwiX3Byb3BzJG9wZW5PbkZvY3VzIiwib3Blbk9uRm9jdXMiLCJfcHJvcHMkc2VsZWN0T25Gb2N1cyIsInNlbGVjdE9uRm9jdXMiLCJpZ25vcmVGb2N1cyIsImZpcnN0Rm9jdXMiLCJsaXN0Ym94UmVmIiwic2V0QW5jaG9yRWwiLCJmb2N1c2VkVGFnIiwic2V0Rm9jdXNlZFRhZyIsImRlZmF1bHRIaWdobGlnaHRlZCIsImhpZ2hsaWdodGVkSW5kZXhSZWYiLCJfdXNlQ29udHJvbGxlZDMiLCJfdXNlQ29udHJvbGxlZDQiLCJzZXRJbnB1dFZhbHVlIiwicmVzZXRJbnB1dFZhbHVlIiwibmV3SW5wdXRWYWx1ZSIsIm9wdGlvbkxhYmVsIiwiX3VzZUNvbnRyb2xsZWQ1IiwiX3VzZUNvbnRyb2xsZWQ2IiwiaW5wdXRWYWx1ZUlzU2VsZWN0ZWRWYWx1ZSIsInBvcHVwT3BlbiIsInZhbHVlMiIsImZvY3VzVGFnIiwidGFnVG9Gb2N1cyIsInNldEhpZ2hsaWdodGVkSW5kZXgiLCJfcmVmMiRyZWFzb24iLCJsaXN0Ym94Tm9kZSIsInNjcm9sbEJvdHRvbSIsImVsZW1lbnRCb3R0b20iLCJjaGFuZ2VIaWdobGlnaHRlZEluZGV4IiwiX3JlZjMkZGlyZWN0aW9uIiwiX3JlZjMkcmVhc29uIiwidmFsaWRPcHRpb25JbmRleCIsIm1heEluZGV4IiwibmV3SW5kZXgiLCJnZXROZXh0SW5kZXgiLCJzZXRTZWxlY3Rpb25SYW5nZSIsInN5bmNIaWdobGlnaHRlZEluZGV4IiwidmFsdWVJdGVtIiwiY3VycmVudE9wdGlvbiIsIm9wdGlvbkl0ZW0iLCJoYW5kbGVMaXN0Ym94UmVmIiwiaGFuZGxlVmFsdWUiLCJkZXRhaWxzIiwiaXNUb3VjaCIsInNlbGVjdE5ld1ZhbHVlIiwicmVhc29uUHJvcCIsIm9yaWdpbiIsImhhbmRsZUZvY3VzVGFnIiwibmV4dFRhZyIsInZhbGlkVGFnSW5kZXgiLCJoYW5kbGVDbGVhciIsImhhbmRsZUlucHV0Q2hhbmdlIiwiaGFuZGxlT3B0aW9uTW91c2VPdmVyIiwiaGFuZGxlT3B0aW9uVG91Y2hTdGFydCIsImhhbmRsZU9wdGlvbkNsaWNrIiwiaGFuZGxlVGFnRGVsZXRlIiwiaGFuZGxlUG9wdXBJbmRpY2F0b3IiLCJoYW5kbGVDbGljayIsImhhbmRsZUlucHV0TW91c2VEb3duIiwiZGlydHkiLCJncm91cGVkT3B0aW9ucyIsImdldFJvb3RQcm9wcyIsImdldElucHV0TGFiZWxQcm9wcyIsImdldElucHV0UHJvcHMiLCJhdXRvQ2FwaXRhbGl6ZSIsInNwZWxsQ2hlY2siLCJnZXRDbGVhclByb3BzIiwiZ2V0UG9wdXBJbmRpY2F0b3JQcm9wcyIsImdldFRhZ1Byb3BzIiwiX3JlZjQiLCJnZXRMaXN0Ym94UHJvcHMiLCJnZXRPcHRpb25Qcm9wcyIsIl9yZWY1Iiwib25Nb3VzZU92ZXIiLCJEaXNhYmxlUG9ydGFsIiwiQ2xvc2UiLCJDaGlwUHJvcHMiLCJfcHJvcHMkY2xlYXJUZXh0IiwiY2xlYXJUZXh0IiwiX3Byb3BzJGNsb3NlSWNvbiIsImNsb3NlSWNvbiIsIl9wcm9wcyRjbG9zZVRleHQiLCJjbG9zZVRleHQiLCJfcHJvcHMkZm9yY2VQb3B1cEljb24iLCJmb3JjZVBvcHVwSWNvbiIsIl9wcm9wcyRnZXRMaW1pdFRhZ3NUZSIsImdldExpbWl0VGFnc1RleHQiLCJfcHJvcHMkbGltaXRUYWdzIiwibGltaXRUYWdzIiwiX3Byb3BzJExpc3Rib3hDb21wb25lIiwiTGlzdGJveENvbXBvbmVudCIsIkxpc3Rib3hQcm9wcyIsIl9wcm9wcyRsb2FkaW5nIiwibG9hZGluZyIsIl9wcm9wcyRsb2FkaW5nVGV4dCIsImxvYWRpbmdUZXh0IiwiX3Byb3BzJG5vT3B0aW9uc1RleHQiLCJub09wdGlvbnNUZXh0IiwiX3Byb3BzJG9wZW5UZXh0Iiwib3BlblRleHQiLCJfcHJvcHMkUGFwZXJDb21wb25lbnQiLCJQYXBlckNvbXBvbmVudCIsIl9wcm9wcyRQb3BwZXJDb21wb25lbiIsIlBvcHBlckNvbXBvbmVudCIsIlBvcHBlckNvbXBvbmVudFByb3AiLCJfcHJvcHMkcG9wdXBJY29uIiwicG9wdXBJY29uIiwicmVuZGVyR3JvdXBQcm9wIiwicmVuZGVyR3JvdXAiLCJyZW5kZXJJbnB1dCIsInJlbmRlck9wdGlvblByb3AiLCJyZW5kZXJPcHRpb24iLCJyZW5kZXJUYWdzIiwiX3VzZUF1dG9jb21wbGV0ZSIsImdldEN1c3RvbWl6ZWRUYWdQcm9wcyIsInRhZ1NpemVTbWFsbCIsImdyb3VwTGFiZWwiLCJncm91cFVsIiwicmVuZGVyTGlzdE9wdGlvbiIsIm9wdGlvblByb3BzIiwiaGFzQ2xlYXJJY29uIiwiaGFzUG9wdXBJY29uIiwiaW5wdXRSb290IiwiY2xlYXJJbmRpY2F0b3IiLCJjbGVhckluZGljYXRvckRpcnR5IiwicG9wdXBJbmRpY2F0b3IiLCJwb3B1cEluZGljYXRvck9wZW4iLCJpbnB1dEZvY3VzZWQiLCJwb3BwZXJEaXNhYmxlUG9ydGFsIiwibm9PcHRpb25zIiwibGlzdGJveCIsIm9wdGlvbjIiLCJfb3B0aW9uIiwiX3Byb3BzJGRpc2FibGVTaHJpbmsiLCJkaXNhYmxlU2hyaW5rIiwiX3Byb3BzJHRoaWNrbmVzcyIsInRoaWNrbmVzcyIsIl9wcm9wcyR2YWx1ZSIsImNpcmNsZVN0eWxlIiwicm9vdFByb3BzIiwiY2lyY3VtZmVyZW5jZSIsIlBJIiwic3RhdGljIiwic3ZnIiwiU0laRSIsImNpcmNsZSIsImNpcmNsZURpc2FibGVTaHJpbmsiLCJjaXJjbGVJbmRldGVybWluYXRlIiwiY2lyY2xlU3RhdGljIiwic3Ryb2tlIiwicHJvZmlsZSIsImZpcnN0TmFtZSIsImxhc3ROYW1lIiwiYWdlIiwiYXZhaWxpYmxlTGVzc29ucyIsIm15TGVzc29ucyIsImZhYiIsIkxlc3Nvbkxpc3QiLCJsZXNzb25zTGlzdCIsImxlc3NvbnNJdGVtcyIsInNldE9wZW4iLCJzZWFyY2hWYWx1ZSIsInNldFNlYXJjaFZhbHVlIiwic2VhcmNoSW5wdXRWYWx1ZSIsInNldFNlYXJjaElucHV0VmFsdWUiLCJzZXRDaGVja2VkIiwiaGFuZGxlQ2FydEFkZCIsImhhbmRsZURlbGV0ZUl0ZW0iLCJzdHlsZUZ1bmN0aW9uIiwibmV3U3R5bGVGdW5jdGlvbiIsImZpZWxkcyIsIm9taXQiLCJmaWx0ZXJQcm9wcyIsImdldFBhdGgiLCJfb3B0aW9ucyRjc3NQcm9wZXJ0eSIsImNzc1Byb3BlcnR5IiwidGhlbWVLZXkiLCJ0aGVtZU1hcHBpbmciLCJwcm9wVmFsdWVGaW5hbCIsImdldEJvcmRlciIsImNvbXBvbmVudENyZWF0b3IiLCJTdHlsZWRDb21wb25lbnQiLCJzcHJlYWQiLCJGaW5hbENvbXBvbmVudCIsInBvc2l0aW9ucyIsIk1haW5QYWdlIiwicG9ycHMiLCJwcm9ncmVzcyIsInNldFByb2dyZXNzIiwic2V0TG9hZGluZyIsInByZXZQcm9ncmVzcyIsInJlbmRlckxvYWRpbmciLCJzeCIsIm5hbm9pZCIsImJ5dGVzIiwiYnl0ZSIsIl9wcm9wcyRkaXNhYmxlUG9pbnRlciIsImRpc2FibGVQb2ludGVyRXZlbnRzIiwidmFyaWFudFByb3AiLCJwb3NpdGlvblN0YXJ0IiwicG9zaXRpb25FbmQiLCJfcHJvcHMkYnV0dG9uIiwiY2hpbGRyZW5Qcm9wIiwiY29tcG9uZW50UHJvcCIsIl9wcm9wcyRDb250YWluZXJDb21wbyIsIkNvbnRhaW5lckNvbXBvbmVudCIsIl9wcm9wcyRDb250YWluZXJQcm9wcyIsIkNvbnRhaW5lclByb3BzIiwiQ29udGFpbmVyQ2xhc3NOYW1lIiwiX3Byb3BzJGRpdmlkZXIiLCJfcHJvcHMkc2VsZWN0ZWQiLCJsaXN0SXRlbVJlZiIsImhhc1NlY29uZGFyeUFjdGlvbiIsImNvbXBvbmVudFByb3BzIiwiYWxpZ25JdGVtc0ZsZXhTdGFydCIsInNlY29uZGFyeUFjdGlvbiIsImJhY2tncm91bmRDbGlwIiwiTGlzdEl0ZW1DbGFzc2VzIiwiX3Byb3BzJGRpc2FibGVFbGV2YXRpIiwiZGlzYWJsZUVsZXZhdGlvbiIsImVuZEljb25Qcm9wIiwiZW5kSWNvbiIsInN0YXJ0SWNvblByb3AiLCJzdGFydEljb24iLCJ0ZXh0UHJpbWFyeSIsInRleHRTZWNvbmRhcnkiLCJjb250YWluZWRQcmltYXJ5IiwiY29udGFpbmVkU2Vjb25kYXJ5IiwidGV4dFNpemVTbWFsbCIsInRleHRTaXplTGFyZ2UiLCJvdXRsaW5lZFNpemVTbWFsbCIsIm91dGxpbmVkU2l6ZUxhcmdlIiwiY29udGFpbmVkU2l6ZVNtYWxsIiwiY29udGFpbmVkU2l6ZUxhcmdlIiwic2l6ZUxhcmdlIiwiaWNvblNpemVTbWFsbCIsImljb25TaXplTWVkaXVtIiwiaWNvblNpemVMYXJnZSIsIkJVTEtfSU1BR0UiLCJpbWFnZVVwbG9hZCIsInRleHRGaWxlZCIsImJ1dHRvbkdyb3VwIiwiQ3JlYXRlTGVzc29uIiwiY2F0ZWdvcmllcyIsInNldERhdGEiLCJub1ZhbGlkYXRlIiwibmV3Q292ZXIiLCJoYW5kbGVDcmVhdGVMZXNzb24iLCJhbGVydCIsImFjY2VwdCIsImFyaWEtbGFiZWwiLCJ1c2VNZWRpYVF1ZXJ5IiwicXVlcnlJbnB1dCIsInF1ZXJ5Iiwic3VwcG9ydE1hdGNoTWVkaWEiLCJtYXRjaE1lZGlhIiwiX3Byb3BzJG9wdGlvbnMiLCJfcHJvcHMkb3B0aW9ucyRkZWZhdWwiLCJkZWZhdWx0TWF0Y2hlcyIsIl9wcm9wcyRvcHRpb25zJG1hdGNoTSIsIl9wcm9wcyRvcHRpb25zJG5vU3NyIiwibm9Tc3IiLCJfcHJvcHMkb3B0aW9ucyRzc3JNYXQiLCJzc3JNYXRjaE1lZGlhIiwic2V0TWF0Y2giLCJxdWVyeUxpc3QiLCJ1cGRhdGVNYXRjaCIsImFkZExpc3RlbmVyIiwicmVtb3ZlTGlzdGVuZXIiLCJpbmNsdXNpdmUiLCJ3aXRoVGhlbWVPcHRpb24iLCJfb3B0aW9ucyRub1NTUiIsIm5vU1NSIiwiaW5pdGlhbFdpZHRoT3B0aW9uIiwiaW5pdGlhbFdpZHRoIiwiV2l0aFdpZHRoIiwiY29udGV4dFRoZW1lIiwiX2dldFRoZW1lUHJvcHMiLCJ3aWR0aENvbXB1dGVkIiwiSGlkZGVuSnMiLCJ2aXNpYmxlIiwiX2JyZWFrcG9pbnQiLCJicmVha3BvaW50VXAiLCJicmVha3BvaW50RG93biIsImxnRG93biIsImxnVXAiLCJtZERvd24iLCJtZFVwIiwic21Eb3duIiwic21VcCIsInhsRG93biIsInhsVXAiLCJ4c0Rvd24iLCJ4c1VwIiwiY2xzeCIsIl9wcm9wcyRpbXBsZW1lbnRhdGlvbiIsIl9wcm9wcyRsZ0Rvd24iLCJfcHJvcHMkbGdVcCIsIl9wcm9wcyRtZERvd24iLCJfcHJvcHMkbWRVcCIsIl9wcm9wcyRzbURvd24iLCJfcHJvcHMkc21VcCIsIl9wcm9wcyR4bERvd24iLCJfcHJvcHMkeGxVcCIsIl9wcm9wcyR4c0Rvd24iLCJfcHJvcHMkeHNVcCIsImRlZmF1bHRUaW1lb3V0IiwidHJhbnNpdGlvblByb3BzIiwid2Via2l0VHJhbnNpdGlvbiIsInNldFRyYW5zbGF0ZVZhbHVlIiwiZmFrZVRyYW5zZm9ybSIsIm9mZnNldFgiLCJvZmZzZXRZIiwiZ2V0VHJhbnNsYXRlVmFsdWUiLCJ3ZWJraXRUcmFuc2Zvcm0iLCJjaGlsZHJlblJlZiIsImhhbmRsZVJlZkludGVybWVkaWFyeSIsIm9wcG9zaXRlRGlyZWN0aW9uIiwiaXNIb3Jpem9udGFsIiwiYW5jaG9yIiwiZ2V0QW5jaG9yIiwiZGVmYXVsdFRyYW5zaXRpb25EdXJhdGlvbiIsIl9wcm9wcyRhbmNob3IiLCJhbmNob3JQcm9wIiwiX3Byb3BzJE1vZGFsUHJvcHMiLCJNb2RhbFByb3BzIiwiQmFja2Ryb3BQcm9wc1Byb3AiLCJfcHJvcHMkb3BlbiIsIlNsaWRlUHJvcHMiLCJkb2NrZWQiLCJzbGlkaW5nRHJhd2VyIiwicGFwZXJBbmNob3JMZWZ0IiwicGFwZXJBbmNob3JSaWdodCIsInBhcGVyQW5jaG9yVG9wIiwicGFwZXJBbmNob3JCb3R0b20iLCJwYXBlckFuY2hvckRvY2tlZExlZnQiLCJib3JkZXJSaWdodCIsInBhcGVyQW5jaG9yRG9ja2VkVG9wIiwicGFwZXJBbmNob3JEb2NrZWRSaWdodCIsImJvcmRlckxlZnQiLCJwYXBlckFuY2hvckRvY2tlZEJvdHRvbSIsImJvcmRlclRvcCIsIl9wcm9wcyRkZWZlciIsImRlZmVyIiwiX3Byb3BzJGZhbGxiYWNrIiwiYW5jaG9yTGVmdCIsImFuY2hvclJpZ2h0IiwiYW5jaG9yVG9wIiwiYW5jaG9yQm90dG9tIiwibm9kZVRoYXRDbGFpbWVkVGhlU3dpcGUiLCJjYWxjdWxhdGVDdXJyZW50WCIsImNhbGN1bGF0ZUN1cnJlbnRZIiwiZ2V0TWF4VHJhbnNsYXRlIiwiaG9yaXpvbnRhbFN3aXBlIiwicGFwZXJJbnN0YW5jZSIsImdldFRyYW5zbGF0ZSIsImN1cnJlbnRUcmFuc2xhdGUiLCJzdGFydExvY2F0aW9uIiwibWF4VHJhbnNsYXRlIiwiaU9TIiwidHJhbnNpdGlvbkR1cmF0aW9uRGVmYXVsdCIsImRpc2FibGVCYWNrZHJvcFRyYW5zaXRpb24iLCJfcHJvcHMkZGlzYWJsZURpc2NvdmUiLCJkaXNhYmxlRGlzY292ZXJ5IiwiX3Byb3BzJGRpc2FibGVTd2lwZVRvIiwiZGlzYWJsZVN3aXBlVG9PcGVuIiwiX3Byb3BzJGh5c3RlcmVzaXMiLCJfcHJvcHMkbWluRmxpbmdWZWxvY2kiLCJtaW5GbGluZ1ZlbG9jaXR5IiwiTW9kYWxQcm9wc1Byb3AiLCJTd2lwZUFyZWFQcm9wcyIsIl9wcm9wcyRzd2lwZUFyZWFXaWR0aCIsInN3aXBlQXJlYVdpZHRoIiwibWF5YmVTd2lwaW5nIiwic2V0TWF5YmVTd2lwaW5nIiwic3dpcGVJbnN0YW5jZSIsInN3aXBlQXJlYVJlZiIsImJhY2tkcm9wUmVmIiwidG91Y2hEZXRlY3RlZCIsImNhbGN1bGF0ZWREdXJhdGlvblJlZiIsInNldFBvc2l0aW9uIiwiX29wdGlvbnMkbW9kZSIsIl9vcHRpb25zJGNoYW5nZVRyYW5zaSIsImNoYW5nZVRyYW5zaXRpb24iLCJhbmNob3JSdGwiLCJydGxUcmFuc2xhdGVNdWx0aXBsaWVyIiwiZHJhd2VyU3R5bGUiLCJiYWNrZHJvcFN0eWxlIiwiaGFuZGxlQm9keVRvdWNoRW5kIiwidHJhbnNsYXRlUmF0aW8iLCJ2ZWxvY2l0eSIsImhhbmRsZUJvZHlUb3VjaE1vdmUiLCJjdXJyZW50WCIsImN1cnJlbnRZIiwibmF0aXZlSGFuZGxlciIsImRlZmluaXRlbHlTd2lwaW5nIiwicGFwZXJIaXQiLCJsYXN0VHJhbnNsYXRlIiwiaGFuZGxlQm9keVRvdWNoU3RhcnQiLCJtdWlIYW5kbGVkIiwiaGFuZGxlQmFja2Ryb3BSZWYiLCJwcmltYXJ5UHJvcCIsInByaW1hcnlUeXBvZ3JhcGh5UHJvcHMiLCJzZWNvbmRhcnlQcm9wIiwic2Vjb25kYXJ5VHlwb2dyYXBoeVByb3BzIiwiaW5saW5lIiwibmVzdGVkIiwiTmF2aWdhdGlvbiIsIm5hdkRpY3RNYWluIiwibmF2RGljdFNlY29uZCIsInJlbmRlck5hdk1haW5MaXN0IiwiZHJhd2VyUGFwZXIiLCJBc2lkZSIsImhhbmRsZU1vYmlsZURyYXdlck9wZW4iLCJtb2JpbGVEcmF3ZXIiLCJfcHJvcHMkcGFkZGluZyIsIl9wcm9wcyRzdGlja3lIZWFkZXIiLCJzdGlja3lIZWFkZXIiLCJ0YWJsZSIsImJvcmRlckNvbGxhcHNlIiwiYm9yZGVyU3BhY2luZyIsImNhcHRpb25TaWRlIiwiX3Byb3BzJGhvdmVyIiwidGFibGVsdmwyIiwiZm9vdGVyIiwicGFkZGluZ1Byb3AiLCJzY29wZVByb3AiLCJzY29wZSIsInNpemVQcm9wIiwic29ydERpcmVjdGlvbiIsImlzSGVhZENlbGwiLCJhcmlhU29ydCIsInBhZGRpbmdDaGVja2JveCIsInBhZGRpbmdOb25lIiwiQ2FydCIsImNhcnQiLCJjYXJ0SXRlbXMiLCJzZXRTZWxlY3RlZCIsIlBhcGVyIiwiaXRlbUlkIiwiaGFubGRlQ2FydERlbGV0ZSIsImhhbmRsZUNhcnRSZW1vdmVJdGVtIiwiZWxlbWVudFNwYWNpbmciLCJDYWJpbmV0IiwiYWx0IiwiaW1nUHJvcHMiLCJzcmNTZXQiLCJsb2FkZWQiLCJzZXRMb2FkZWQiLCJJbWFnZSIsIm9ubG9hZCIsIm9uZXJyb3IiLCJ1c2VMb2FkZWQiLCJoYXNJbWciLCJoYXNJbWdOb3RGYWlsaW5nIiwic3lzdGVtIiwiY29sb3JEZWZhdWx0IiwidGV4dEluZGVudCIsIl9wcm9wcyRkaXNhYmxlU3BhY2luZyIsImRpc2FibGVTcGFjaW5nIiwicmV2aWV3cyIsInJldmlld0NvbnRlbnQiLCJyZXZpZXdzTGlzdCIsInJldmlld0lucHV0IiwiUmV2aWV3IiwicmV2aWV3Iiwic2V0UmV2aWV3IiwibGVzc29uIiwiaGFuZGxlU2V0UmV2aWV3IiwiZGlyIiwiYXV0aG9yIiwib25LZXlQcmVzcyIsInJvdW5kVmFsdWVUb1ByZWNpc2lvbiIsInByZWNpc2lvbiIsImRlY2ltYWxQYXJ0IiwibmVhcmVzdCIsIkljb25Db250YWluZXIiLCJTdGFyIiwiZGVmYXVsdExhYmVsVGV4dCIsImNhY2hlZFR5cGUiLCJlbXB0eUljb24iLCJfcHJvcHMkZW1wdHlMYWJlbFRleHQiLCJlbXB0eUxhYmVsVGV4dCIsIl9wcm9wcyRnZXRMYWJlbFRleHQiLCJnZXRMYWJlbFRleHQiLCJfcHJvcHMkSWNvbkNvbnRhaW5lckMiLCJJY29uQ29udGFpbmVyQ29tcG9uZW50IiwiX3Byb3BzJG1heCIsIm5hbWVQcm9wIiwib25DaGFuZ2VBY3RpdmUiLCJfcHJvcHMkcHJlY2lzaW9uIiwiX3Byb3BzJHJlYWRPbmx5IiwidmFsdWVEZXJpdmVkIiwic2V0VmFsdWVTdGF0ZSIsInZhbHVlUm91bmRlZCIsIl9SZWFjdCR1c2VTdGF0ZSQiLCJoYW5kbGVGb2N1c1JlZiIsImhhbmRsZUNoYW5nZSIsIm5ld0ZvY3VzIiwibGFiZWxQcm9wcyIsImljb25FbXB0eSIsImljb25Ib3ZlciIsImljb25Gb2N1cyIsImljb25BY3RpdmUiLCJ2aXN1YWxseWhpZGRlbiIsInBlcmNlbnQiLCJfcm9vdE5vZGUkZ2V0Qm91bmRpbmciLCJuZXdIb3ZlciIsIml0ZW1WYWx1ZSIsImRlY2ltYWwiLCIkIiwiaW5kZXhEZWNpbWFsIiwiaXRlbURlY2ltYWxWYWx1ZSIsInByaXN0aW5lIiwiY2xpcCIsIl9wcm9wcyRmaXhlZCIsImZpeGVkIiwiX3Byb3BzJG1heFdpZHRoIiwibWF4V2lkdGhYcyIsIm1heFdpZHRoU20iLCJtYXhXaWR0aE1kIiwibWF4V2lkdGhMZyIsIm1heFdpZHRoWGwiLCJfcHJvcHMkcG9zaXRpb24iLCJiYWNrZ3JvdW5kQ29sb3JEZWZhdWx0IiwicG9zaXRpb25BYnNvbHV0ZSIsInBvc2l0aW9uU3RpY2t5IiwicG9zaXRpb25TdGF0aWMiLCJwb3NpdGlvblJlbGF0aXZlIiwiY29sb3JUcmFuc3BhcmVudCIsImRldGVjdFNjcm9sbFR5cGUiLCJkdW1teSIsImdldE5vcm1hbGl6ZWRTY3JvbGxMZWZ0IiwiZWFzZUluT3V0U2luIiwic2luIiwiU2Nyb2xsYmFyU2l6ZSIsInNjcm9sbGJhckhlaWdodCIsInNldE1lYXN1cmVtZW50cyIsInByZXZIZWlnaHQiLCJLZXlib2FyZEFycm93TGVmdCIsIktleWJvYXJkQXJyb3dSaWdodCIsImFyaWFMYWJlbGxlZEJ5IiwiX3Byb3BzJGNlbnRlcmVkIiwiY2VudGVyZWQiLCJfcHJvcHMkaW5kaWNhdG9yQ29sb3IiLCJpbmRpY2F0b3JDb2xvciIsIl9wcm9wcyRTY3JvbGxCdXR0b25DbyIsIlNjcm9sbEJ1dHRvbkNvbXBvbmVudCIsIl9wcm9wcyRzY3JvbGxCdXR0b25zIiwic2Nyb2xsQnV0dG9ucyIsInNlbGVjdGlvbkZvbGxvd3NGb2N1cyIsIl9wcm9wcyRUYWJJbmRpY2F0b3JQciIsIlRhYkluZGljYXRvclByb3BzIiwiVGFiU2Nyb2xsQnV0dG9uUHJvcHMiLCJfcHJvcHMkdGV4dENvbG9yIiwidGV4dENvbG9yIiwic2Nyb2xsYWJsZSIsImlzUnRsIiwic2Nyb2xsU3RhcnQiLCJjbGllbnRTaXplIiwic2V0TW91bnRlZCIsImluZGljYXRvclN0eWxlIiwic2V0SW5kaWNhdG9yU3R5bGUiLCJkaXNwbGF5U2Nyb2xsIiwic2V0RGlzcGxheVNjcm9sbCIsIl9SZWFjdCR1c2VTdGF0ZTQiLCJzY3JvbGxlclN0eWxlIiwic2V0U2Nyb2xsZXJTdHlsZSIsInZhbHVlVG9JbmRleCIsInRhYnNSZWYiLCJ0YWJMaXN0UmVmIiwiZ2V0VGFic01ldGEiLCJ0YWJzTWV0YSIsInRhYk1ldGEiLCJ0YWJzTm9kZSIsInNjcm9sbExlZnROb3JtYWxpemVkIiwiX2NoaWxkcmVuIiwidGFiIiwidXBkYXRlSW5kaWNhdG9yU3RhdGUiLCJfbmV3SW5kaWNhdG9yU3R5bGUiLCJfZ2V0VGFic01ldGEiLCJzdGFydFZhbHVlIiwiY29ycmVjdGlvbiIsIm5ld0luZGljYXRvclN0eWxlIiwiZFN0YXJ0IiwiZFNpemUiLCJzY3JvbGwiLCJzY3JvbGxWYWx1ZSIsIl9vcHRpb25zJGVhc2UiLCJlYXNlIiwiY2FuY2VsbGVkIiwiYW5pbWF0ZSIsIm1vdmVUYWJzU2Nyb2xsIiwiaGFuZGxlU3RhcnRTY3JvbGxDbGljayIsImhhbmRsZUVuZFNjcm9sbENsaWNrIiwiaGFuZGxlU2Nyb2xsYmFyU2l6ZUNoYW5nZSIsInNjcm9sbFNlbGVjdGVkSW50b1ZpZXciLCJfZ2V0VGFic01ldGEyIiwibmV4dFNjcm9sbFN0YXJ0IiwiX25leHRTY3JvbGxTdGFydCIsInVwZGF0ZVNjcm9sbEJ1dHRvblN0YXRlIiwic2hvd1N0YXJ0U2Nyb2xsIiwic2hvd0VuZFNjcm9sbCIsIl90YWJzUmVmJGN1cnJlbnQiLCJ3aW4iLCJoYW5kbGVUYWJzU2Nyb2xsIiwidXBkYXRlSW5kaWNhdG9yIiwidXBkYXRlU2Nyb2xsQnV0dG9ucyIsImluZGljYXRvciIsImNoaWxkSW5kZXgiLCJjaGlsZFZhbHVlIiwiY29uZGl0aW9uYWxFbGVtZW50cyIsInNjcm9sbGJhclNpemVMaXN0ZW5lciIsInNjcm9sbEJ1dHRvbnNBY3RpdmUiLCJzaG93U2Nyb2xsQnV0dG9ucyIsInNjcm9sbEJ1dHRvblN0YXJ0Iiwic2Nyb2xsQnV0dG9uc0Rlc2t0b3AiLCJzY3JvbGxCdXR0b25FbmQiLCJnZXRDb25kaXRpb25hbEVsZW1lbnRzIiwic2Nyb2xsZXIiLCJmbGV4Q29udGFpbmVyIiwiZmxleENvbnRhaW5lclZlcnRpY2FsIiwibmV3Rm9jdXNUYXJnZXQiLCJwcmV2aW91c0l0ZW1LZXkiLCJuZXh0SXRlbUtleSIsInNjcm9sbGJhcldpZHRoIiwiX3Byb3BzJHdyYXBwZWQiLCJ3cmFwcGVkIiwibGFiZWxJY29uIiwid3JhcHBlciIsInRleHRDb2xvckluaGVyaXQiLCJ0ZXh0Q29sb3JQcmltYXJ5IiwidGV4dENvbG9yU2Vjb25kYXJ5IiwiYTExeVByb3BzIiwibmF2IiwibmF2QnV0dG9uIiwidGV4dFNoYWRvdyIsImxlc3NvbkhlYWRlciIsImxlc3NvbnNMb2FkQWN0aW9uIiwiZGVsZXRlTGVzb25BY3Rpb24iLCJjb25uZWN0IiwibGVzc29ucyIsImFkZFJldmlld0xlc3NvbiIsInJlbW92ZVJldmlld0xlc3NvbiIsImlzRWRpdCIsInJhdGluZyIsInJldmlld0lkIiwiaGFuZGxlRGVsZXRlUmV2aWV3IiwibW9iaWxlRHJhd2VyU3RhdGVTZXRBY3Rpb24iLCJsb2dvdXRBY3Rpb24iLCJsb2dpbkFjdGlvbiIsInByb2ZpbGVMb2FkQWN0aW9uIiwicHJvZmlsZUNoYW5nZU5hbWVBY3Rpb24iLCJyZWd1bGFyIiwicmVzb2x2ZVRvTG9jYXRpb24iLCJmb3J3YXJkUmVmU2hpbSIsIkxpbmtBbmNob3IiLCJmb3J3YXJkZWRSZWYiLCJuYXZpZ2F0ZSIsIl9vbkNsaWNrIiwicmVzdCIsImlzTW9kaWZpZWRFdmVudCIsIkxpbmsiLCJfcmVmMiRjb21wb25lbnQiLCJmb3J3YXJkUmVmU2hpbSQxIiwiZm9yd2FyZFJlZiQxIiwiX3JlZiRhcmlhQ3VycmVudCIsImFyaWFDdXJyZW50IiwiX3JlZiRhY3RpdmVDbGFzc05hbWUiLCJhY3RpdmVDbGFzc05hbWUiLCJhY3RpdmVTdHlsZSIsImlzQWN0aXZlUHJvcCIsImxvY2F0aW9uUHJvcCIsInN0eWxlUHJvcCIsImVzY2FwZWRQYXRoIiwiY2xhc3NuYW1lcyIsImpvaW5DbGFzc25hbWVzIiwiYmFkZ2VDb250ZW50IiwiaW52aXNpYmxlUHJvcCIsIl9wcm9wcyRvdmVybGFwIiwib3ZlcmxhcCIsIl9wcm9wcyRzaG93WmVybyIsInNob3daZXJvIiwiZGlzcGxheVZhbHVlIiwiYmFkZ2UiLCJkb3QiLCJSQURJVVNfU1RBTkRBUkQiLCJSQURJVVNfRE9UIiwiYW5jaG9yT3JpZ2luVG9wUmlnaHRSZWN0YW5nbGUiLCJhbmNob3JPcmlnaW5Cb3R0b21SaWdodFJlY3RhbmdsZSIsImFuY2hvck9yaWdpblRvcExlZnRSZWN0YW5nbGUiLCJhbmNob3JPcmlnaW5Cb3R0b21MZWZ0UmVjdGFuZ2xlIiwiYW5jaG9yT3JpZ2luVG9wUmlnaHRDaXJjbGUiLCJhbmNob3JPcmlnaW5Cb3R0b21SaWdodENpcmNsZSIsImFuY2hvck9yaWdpblRvcExlZnRDaXJjbGUiLCJhbmNob3JPcmlnaW5Cb3R0b21MZWZ0Q2lyY2xlIiwiX3Byb3BzJGZ1bGxTY3JlZW4iLCJmdWxsU2NyZWVuIiwiX3Byb3BzJHNjcm9sbCIsImFyaWFMYWJlbGxlZGJ5IiwibW91c2VEb3duVGFyZ2V0IiwicGFwZXJGdWxsU2NyZWVuIiwicGFwZXJGdWxsV2lkdGgiLCJzY3JvbGxQYXBlciIsInNjcm9sbEJvZHkiLCJwYXBlclNjcm9sbFBhcGVyIiwicGFwZXJTY3JvbGxCb2R5IiwicGFwZXJXaWR0aEZhbHNlIiwicGFwZXJXaWR0aFhzIiwicGFwZXJXaWR0aFNtIiwicGFwZXJXaWR0aE1kIiwicGFwZXJXaWR0aExnIiwicGFwZXJXaWR0aFhsIiwiX3Byb3BzJGRpdmlkZXJzIiwiZGl2aWRlcnMiLCJwcm9maWxlVGl0bGVDb250YWluZXIiLCJyZWdCdXR0b24iLCJsYXJnZSIsIlByb2ZpbGUiLCJzZXRGaXJzdE5hbWUiLCJzZXRFbWFpbCIsInNldExhc3ROYW1lIiwiaGFuZGxlQ29uZmlybSIsImhhbmRsZU5hbWVDaGFuZ2UiLCJhcmlhLWxhYmVsbGVkYnkiLCJzZWN0aW9uRGVza3RvcCIsInNlY3Rpb25Nb2JpbGUiLCJBdXRoTWVudSIsIm1vYmlsZU1vcmVBbmNob3JFbCIsInNldE1vYmlsZU1vcmVBbmNob3JFbCIsImlzTWVudU9wZW4iLCJpc01vYmlsZU1lbnVPcGVuIiwiaGFuZGxlTW9iaWxlTWVudUNsb3NlIiwiaGFuZGxlTWVudUNsb3NlIiwiaGFuZGxlTG9nb3V0IiwicmVuZGVyTWVudSIsInByb3BzbWVudUlkIiwicmVuZGVyTW9iaWxlTWVudSIsIm1vYmlsZU1lbnVJZCIsImFyaWEtY29udHJvbHMiLCJtZW51SWQiLCJhcmlhLWhhc3BvcHVwIiwiZ3JvdyIsIm1lbnVCdXR0b24iLCJhcHBCYXIyIiwiaGVhZGVyIiwiZGVmYXVsdEljb25NYXBwaW5nIiwiU3VjY2Vzc091dGxpbmVkIiwiUmVwb3J0UHJvYmxlbU91dGxpbmVkIiwiRXJyb3JPdXRsaW5lIiwiSW5mb091dGxpbmVkIiwiX3Byb3BzJGljb25NYXBwaW5nIiwiaWNvbk1hcHBpbmciLCJfcHJvcHMkc2V2ZXJpdHkiLCJzZXZlcml0eSIsImdldENvbG9yIiwiZ2V0QmFja2dyb3VuZENvbG9yIiwic3RhbmRhcmRTdWNjZXNzIiwic3RhbmRhcmRJbmZvIiwic3RhbmRhcmRXYXJuaW5nIiwic3RhbmRhcmRFcnJvciIsIm91dGxpbmVkU3VjY2VzcyIsIm91dGxpbmVkSW5mbyIsIm91dGxpbmVkV2FybmluZyIsIm91dGxpbmVkRXJyb3IiLCJmaWxsZWRTdWNjZXNzIiwiZmlsbGVkSW5mbyIsImZpbGxlZFdhcm5pbmciLCJmaWxsZWRFcnJvciIsIl9wcm9wcyRjb2xsYXBzZWRIZWlnaCIsImNvbGxhcHNlZEhlaWdodCIsImNvbGxhcHNlZEhlaWdodFByb3AiLCJ3cmFwcGVyUmVmIiwiYXV0b1RyYW5zaXRpb25EdXJhdGlvbiIsIndyYXBwZXJIZWlnaHQiLCJkdXJhdGlvbjIiLCJ3cmFwcGVySW5uZXIiLCJBbGVydFNob3ciLCJwb3B1cCIsImhhbmxkZUNsb3NlQWxlcnQiLCJUYWJQYW5lbCIsIkxvZ2luUGFnZSIsInNldFBhc3N3b3JkIiwicmVQYXNzd29yZCIsInNldFJlUGFzc3dvcmQiLCJoYW5kbGVFbWFpbCIsImhhbmRsZVBhc3N3b3JkIiwiaGFuZGxlTG9naW4iLCJoYW5kbGVSZWdpc3RyYXRpb24iLCJoZWxwZXIiLCJhbGVydENsb3NlQWN0aW9uIiwicmVnaXN0cmF0aW9uQWN0aW9uIiwicHJvZmlsZURhdGEiLCJhbGVydExvYWRBY3Rpb24iLCJhbGVydENsb3NlSW5mb3JtQWN0aW9uIiwiYWxlcnRTZW5kSW5mb3JtQWN0aW9uIiwic2VsZWN0TGVzc29uQWN0aW9uIiwiY3JlYXRlTGVzc29uQWN0aW9uIiwibW9iaWxlRHJhd2VyU3RhdGVMb2FkQWN0aW9uIiwiY2FydExvYWRBY3Rpb24iLCJjYXJ0RGVsZXRlQWN0aW9uIiwiY2FydEFkZEFjdGlvbiIsImNhcnRSZW1vdmVBY3Rpb24iLCJpbml0QWN0aW9uIiwiSGVhZGVyQ29udGFpbmVyIiwiTGVzc29uQ29udGFpbmVyIiwiaGFuZGxlQ2FydFBsdXNJdGVtIiwiY2FydFBsdXNJdGVtQWN0aW9uIiwiaGFuZGxlQ2FydE1pbnVzSXRlbSIsImNhcnRNaW51c0l0ZW1BY3Rpb24iLCJQZXJzaXN0R2F0ZSIsIl9QdXJlQ29tcG9uZW50IiwiYm9vdHN0cmFwcGVkIiwicGVyc2lzdG9yIiwib25CZWZvcmVMaWZ0IiwiZmluYWxseSIsIl91bnN1YnNjcmliZSIsImhhbmRsZVBlcnNpc3RvclN0YXRlIiwic3RydWN0dXJlIiwiZ2V0SW4iLCJ0b0pTIiwiZ2V0Um91dGVyIiwicm91dGVyIiwiZ2V0TG9jYXRpb24iLCJnZXRBY3Rpb24iLCJnZXRTZWFyY2giLCJnZXRIYXNoIiwiY3JlYXRlTWF0Y2hTZWxlY3RvciIsImxhc3RQYXRobmFtZSIsImxhc3RNYXRjaCIsImluamVjdFF1ZXJ5Iiwic2VhcmNoUXVlcnkiLCJjdXJyZW50UXVlcnkiLCJfY3VycmVudFF1ZXJ5JHNwbGl0MiIsImZyb21KUyIsIm1lcmdlIiwiaW5pdGlhbFJvdXRlclN0YXRlIiwiaXNGaXJzdFJlbmRlcmluZyIsIkNvbm5lY3RlZFJvdXRlciIsIm9uTG9jYXRpb25DaGFuZ2VkIiwiaW5UaW1lVHJhdmVsbGluZyIsIl9nZXRMb2NhdGlvbiIsInBhdGhuYW1lSW5TdG9yZSIsInNlYXJjaEluU3RvcmUiLCJoYXNoSW5TdG9yZSIsInN0YXRlSW5TdG9yZSIsIl9oaXN0b3J5JGxvY2F0aW9uIiwicGF0aG5hbWVJbkhpc3RvcnkiLCJzZWFyY2hJbkhpc3RvcnkiLCJoYXNoSW5IaXN0b3J5Iiwic3RhdGVJbkhpc3RvcnkiLCJoYW5kbGVMb2NhdGlvbkNoYW5nZSIsIm5vSW5pdGlhbFBvcCIsIkNvbm5lY3RlZFJvdXRlcldpdGhDb250ZXh0IiwicGxhaW4iLCJjb25uZWN0Um91dGVyIiwiaW5pdGlhbFN0YXRlIiwicHJvZmlsZVJlZHVjZXIiLCJhbGVydFJlZHVjZXIiLCJpc1NlbGVjdCIsImdlbmVyYXRvciIsImxlc3NvbnNFbnRyeSIsIlVrbTdTSiIsInF1c3Rpb25zIiwiZGszdDBtIiwiZnYxaHVkIiwidGlxRDBSIiwibGVzc29uUmVkdWNlciIsIm5ld0xlc3NvbnMiLCJzZWFyY2hSZXZpZXciLCJjYXJ0UmVkdWNlciIsIm5ld0NhcnQiLCJoZWFkZXJSZWR1Y2VyIiwiaW5pdFJlZHVjZXIiLCJSRUhZRFJBVEUiLCJSRUdJU1RFUiIsImF1dG9NZXJnZUxldmVsMSIsImluYm91bmRTdGF0ZSIsIm9yaWdpbmFsU3RhdGUiLCJyZWR1Y2VkU3RhdGUiLCJjcmVhdGVQZXJzaXN0b2lkIiwic2VyaWFsaXplIiwid2hpdGVsaXN0IiwidHJhbnNmb3JtcyIsInRocm90dGxlIiwic3RvcmFnZUtleSIsImRlZmF1bHRTZXJpYWxpemUiLCJ3cml0ZUZhaWxIYW5kbGVyIiwibGFzdFN0YXRlIiwic3RhZ2VkU3RhdGUiLCJrZXlzVG9Qcm9jZXNzIiwidGltZUl0ZXJhdG9yIiwid3JpdGVQcm9taXNlIiwicHJvY2Vzc05leHRLZXkiLCJlbmRTdGF0ZSIsInN1YlN0YXRlIiwiY2F0Y2giLCJvbldyaXRlRmFpbCIsInBhc3NXaGl0ZWxpc3RCbGFja2xpc3QiLCJmbHVzaCIsImRlc2VyaWFsaXplIiwiZGVmYXVsdERlc2VyaWFsaXplIiwic2VyaWFsaXplZCIsInJhd1N0YXRlIiwicmVkdWNlUmlnaHQiLCJzZXJpYWwiLCJ3YXJuSWZSZW1vdmVFcnJvciIsInBlcnNpc3RSZWR1Y2VyIiwiYmFzZVJlZHVjZXIiLCJzdGF0ZVJlY29uY2lsZXIiLCJnZXRTdG9yZWRTdGF0ZSIsIl9wZXJzaXN0b2lkIiwiX3B1cmdlIiwiX3BhdXNlZCIsImNvbmRpdGlvbmFsVXBkYXRlIiwiX3BlcnNpc3QiLCJyZWh5ZHJhdGVkIiwicmVzdFN0YXRlIiwiX3NlYWxlZCIsIl9yZWh5ZHJhdGUiLCJyZWh5ZHJhdGUiLCJyZWdpc3RlciIsInJlc3RvcmVkU3RhdGUiLCJtaWdyYXRlIiwibWlncmF0ZWRTdGF0ZSIsIm1pZ3JhdGVFcnIiLCJwdXJnZVN0b3JlZFN0YXRlIiwiX25ld1N0YXRlIiwicmVnaXN0cnkiLCJmaXJzdEluZGV4IiwiX2FjdGlvbiRwYXlsb2FkIiwicmVnaXN0cmF0aW9uTWlkZGxlV2FyZSIsImFsZXJ0TWlkZGxlV2FyZSIsIm1lc3NhZ2VJZCIsImFsZXJ0VHlwZSIsImluZm9ybSIsImluaXRNaWRkbGVXYXJlIiwicGVyc2lzdENvbmZpZyIsInJvdXRlck1pZGRsZXdhcmUiLCJib29zdHJhcHBlZENiIiwiX3BTdG9yZSIsInJlaHlkcmF0ZUFjdGlvbiIsInB1cmdlIiwicmVzdWx0cyIsInB1cmdlUmVzdWx0IiwiZmx1c2hSZXN1bHQiLCJwYXVzZSIsIm1hbnVhbFBlcnNpc3QiLCJwZXJzaXN0U3RvcmUiLCJSZWFjdERPTSIsIkFwcENvbnRhaW5lciIsIm5leHRDbGFzc2VzIiwicGxhaW5PYmplY3RDb25zdHJ1cmN0b3IiLCJjbG9uZVN0eWxlIiwibmV3U3R5bGUiLCJjcmVhdGVSdWxlIiwiZGVjbCIsImpzcyIsImRlY2xDb3B5IiwicnVsZSIsIm9uQ3JlYXRlUnVsZSIsImJ5IiwidG9Dc3NWYWx1ZSIsImlnbm9yZUltcG9ydGFudCIsImNzc1ZhbHVlIiwiaW5kZW50U3RyIiwiaW5kZW50IiwidG9Dc3MiLCJfb3B0aW9ucyRpbmRlbnQiLCJmYWxsYmFja3MiLCJfcHJvcCIsIl92YWx1ZSIsIl9wcm9wMiIsIl92YWx1ZTIiLCJhbGxvd0VtcHR5IiwiZXNjYXBlUmVnZXgiLCJuYXRpdmVFc2NhcGUiLCJDU1MiLCJCYXNlU3R5bGVSdWxlIiwiaXNQcm9jZXNzZWQiLCJyZW5kZXJlciIsInJlbmRlcmFibGUiLCJzaGVldCIsIlJlbmRlcmVyIiwiZm9yY2UiLCJwcm9jZXNzIiwib25DaGFuZ2VWYWx1ZSIsImlzRGVmaW5lZCIsImF0dGFjaGVkIiwiX0Jhc2VTdHlsZVJ1bGUiLCJTdHlsZVJ1bGUiLCJzZWxlY3RvclRleHQiLCJzY29wZWQiLCJnZW5lcmF0ZUlkIiwiYXBwbHlUbyIsImpzb24iLCJ0b0pTT04iLCJzZXRTZWxlY3RvciIsInJlcGxhY2VSdWxlIiwicGx1Z2luU3R5bGVSdWxlIiwiZGVmYXVsdFRvU3RyaW5nT3B0aW9ucyIsImF0UmVnRXhwIiwiQ29uZGl0aW9uYWxSdWxlIiwiYXQiLCJydWxlcyIsImF0TWF0Y2giLCJnZXRSdWxlIiwiYWRkUnVsZSIsIm9uUHJvY2Vzc1J1bGUiLCJrZXlSZWdFeHAiLCJwbHVnaW5Db25kaXRpb25hbFJ1bGUiLCJkZWZhdWx0VG9TdHJpbmdPcHRpb25zJDEiLCJuYW1lUmVnRXhwIiwiS2V5ZnJhbWVzUnVsZSIsImZyYW1lcyIsIm5hbWVNYXRjaCIsImtleVJlZ0V4cCQxIiwicmVmUmVnRXhwIiwiZmluZFJlZmVyZW5jZWRLZXlmcmFtZSIsImtleWZyYW1lcyIsInJlZktleWZyYW1lIiwib25Qcm9jZXNzU3R5bGUiLCJLZXlmcmFtZVJ1bGUiLCJwbHVnaW5LZXlmcmFtZVJ1bGUiLCJGb250RmFjZVJ1bGUiLCJrZXlSZWdFeHAkMiIsInBsdWdpbkZvbnRGYWNlUnVsZSIsIlZpZXdwb3J0UnVsZSIsInBsdWdpblZpZXdwb3J0UnVsZSIsIlNpbXBsZVJ1bGUiLCJrZXlzTWFwIiwiZGVmYXVsdFVwZGF0ZU9wdGlvbnMiLCJmb3JjZVVwZGF0ZU9wdGlvbnMiLCJSdWxlTGlzdCIsInJhdyIsInJ1bGVPcHRpb25zIiwiX3RoaXMkb3B0aW9ucyIsInVucmVnaXN0ZXIiLCJ1cGRhdGVPbmUiLCJfdGhpcyRvcHRpb25zMiIsInN0eWxlUnVsZSIsIm5leHRWYWx1ZSIsIl9uZXh0VmFsdWUiLCJfcHJldlZhbHVlIiwiU3R5bGVTaGVldCIsImRlcGxveWVkIiwiYXR0YWNoIiwiZGVwbG95IiwiZGV0YWNoIiwiaW5zZXJ0UnVsZSIsImFkZFJ1bGVzIiwiYWRkZWQiLCJkZWxldGVSdWxlIiwiX3RoaXMkcnVsZXMiLCJQbHVnaW5zUmVnaXN0cnkiLCJpbnRlcm5hbCIsImV4dGVybmFsIiwib25Qcm9jZXNzU2hlZXQiLCJwcm9jZXNzZWRWYWx1ZSIsInVzZSIsIm5ld1BsdWdpbiIsInBsdWdpbiIsInNoZWV0cyIsIlNoZWV0c1JlZ2lzdHJ5IiwicmVzZXQiLCJjcmVhdGVHZW5lcmF0ZUlkIiwicnVsZUNvdW50ZXIiLCJqc3NJZCIsIm1pbmlmeSIsIm1lbW9pemUiLCJjc3NSdWxlIiwiYXR0cmlidXRlU3R5bGVNYXAiLCJnZXRIZWFkIiwiZmluZFByZXZOb2RlIiwiaW5zZXJ0aW9uUG9pbnQiLCJmaW5kSGlnaGVyU2hlZXQiLCJmaW5kSGlnaGVzdFNoZWV0IiwiY29tbWVudCIsImZpbmRDb21tZW50Tm9kZSIsImdldE5vbmNlIiwiX2luc2VydFJ1bGUiLCJjc3NSdWxlcyIsImFwcGVuZFJ1bGUiLCJEb21SZW5kZXJlciIsImhhc0luc2VydGVkUnVsZXMiLCJjcmVhdGVTdHlsZSIsIm5leHROb2RlIiwiaW5zZXJ0aW9uUG9pbnRFbGVtZW50IiwiaW5zZXJ0U3R5bGUiLCJpbnNlcnRSdWxlcyIsIm5hdGl2ZVBhcmVudCIsImxhdGVzdE5hdGl2ZVBhcmVudCIsInBhcmVudFN0eWxlU2hlZXQiLCJydWxlU3RyIiwibmF0aXZlUnVsZSIsImdldFJ1bGVzIiwiaW5zdGFuY2VDb3VudGVyIiwiSnNzIiwic2V0dXAiLCJjcmVhdGVTdHlsZVNoZWV0IiwicmVtb3ZlU3R5bGVTaGVldCIsImhhc0NTU1RPTVN1cHBvcnQiLCJrZXkxIiwia2V5MiIsInN1YkNhY2hlIiwicHNldWRvQ2xhc3NlcyIsImZuVmFsdWVzTnMiLCJmblJ1bGVOcyIsImZuVmFsdWVzIiwiZm5SdWxlIiwiR2xvYmFsQ29udGFpbmVyUnVsZSIsIkdsb2JhbFByZWZpeGVkUnVsZSIsInNlcGFyYXRvclJlZ0V4cCIsImFkZFNjb3BlIiwiaGFuZGxlTmVzdGVkR2xvYmFsQ29udGFpbmVyUnVsZSIsImhhbmRsZVByZWZpeGVkR2xvYmFsUnVsZSIsInBhcmVudFJlZ0V4cCIsImdldFJlcGxhY2VSZWYiLCJyZXBsYWNlUGFyZW50UmVmcyIsIm5lc3RlZFByb3AiLCJwYXJlbnRQcm9wIiwicGFyZW50U2VsZWN0b3JzIiwibmVzdGVkU2VsZWN0b3JzIiwiZ2V0T3B0aW9ucyIsInByZXZPcHRpb25zIiwibmVzdGluZ0xldmVsIiwicmVwbGFjZVJlZiIsImlzTmVzdGVkIiwiaXNOZXN0ZWRDb25kaXRpb25hbCIsInVwcGVyY2FzZVBhdHRlcm4iLCJtc1BhdHRlcm4iLCJ0b0h5cGhlbkxvd2VyIiwiaE5hbWUiLCJjb252ZXJ0Q2FzZSIsImNvbnZlcnRlZCIsImh5cGhlbmF0ZWRQcm9wIiwicHgiLCJtcyIsImFkZENhbWVsQ2FzZWRWZXJzaW9uIiwicmVnRXhwIiwidW5pdHMiLCJtb3Rpb24iLCJwZXJzcGVjdGl2ZSIsIml0ZXJhdGUiLCJpbm5lclByb3AiLCJfaW5uZXJQcm9wIiwiY2FtZWxDYXNlZE9wdGlvbnMiLCJqcyIsInZlbmRvciIsImpzQ3NzTWFwIiwiTW96IiwiV2Via2l0IiwiYXBwZWFyZW5jZSIsIm5vUHJlZmlsbCIsInN1cHBvcnRlZFByb3BlcnR5IiwidG9VcHBlciIsImNhbWVsaXplIiwicGFzY2FsaXplIiwibWFzayIsInRleHRPcmllbnRhdGlvbiIsIndyaXRpbmdNb2RlIiwiYnJlYWtQcm9wc09sZCIsImlubGluZUxvZ2ljYWxPbGQiLCJuZXdQcm9wIiwidW5wcmVmaXhlZCIsInByZWZpeGVkIiwicGFzY2FsaXplZCIsInNjcm9sbFNuYXAiLCJvdmVyc2Nyb2xsQmVoYXZpb3IiLCJwcm9wTWFwIiwiZmxleDIwMTIiLCJwcm9wTWFwJDEiLCJwcm9wS2V5cyIsInByZWZpeENzcyIsInByb3BlcnR5RGV0ZWN0b3JzIiwiY29tcHV0ZWQiLCJrZXkkMSIsImVsJDEiLCJ0cmFuc2l0aW9uUHJvcGVydGllcyIsInRyYW5zUHJvcHNSZWdFeHAiLCJwcmVmaXhUcmFuc2l0aW9uQ2FsbGJhY2siLCJwMSIsInAyIiwicHJlZml4ZWRWYWx1ZSIsInN1cHBvcnRlZFZhbHVlIiwicHJlZml4U3R5bGUiLCJjaGFuZ2VQcm9wIiwic3VwcG9ydGVkUHJvcCIsImNoYW5nZVZhbHVlIiwic3VwcG9ydGVkVmFsdWUkMSIsImF0UnVsZSIsInByb3AwIiwicHJvcDEiLCJqc3NQcmVzZXQiLCJkZWZhdWx0T3B0aW9ucyIsImRpc2FibGVHZW5lcmF0aW9uIiwiZ2VuZXJhdGVDbGFzc05hbWUiLCJfb3B0aW9ucyRkaXNhYmxlR2xvYmEiLCJkaXNhYmxlR2xvYmFsIiwiX29wdGlvbnMkcHJvZHVjdGlvblByIiwicHJvZHVjdGlvblByZWZpeCIsIl9vcHRpb25zJHNlZWQiLCJzZWVkUHJlZml4IiwiZ2V0TmV4dENvdW50ZXJJZCIsImNyZWF0ZUdlbmVyYXRlQ2xhc3NOYW1lIiwic2hlZXRzQ2FjaGUiLCJzaGVldHNNYW5hZ2VyIiwic2hlZXRzUmVnaXN0cnkiLCJTdHlsZXNDb250ZXh0IiwiaW5kZXhDb3VudGVyIiwiaW5jcmVtZW50IiwiZ2V0U3R5bGVzQ3JlYXRvciIsInRoZW1pbmdFbmFibGVkIiwic3R5bGVzV2l0aE92ZXJyaWRlcyIsImdldENsYXNzZXMiLCJjYWNoZUNsYXNzZXMiLCJsYXN0UHJvcCIsImxhc3RKU1MiLCJnZW5lcmF0ZSIsInN0eWxlc0NyZWF0b3IiLCJzaGVldE1hbmFnZXIiLCJzdGF0aWNTaGVldCIsImR5bmFtaWNTdHlsZXMiLCJzZXJ2ZXJHZW5lcmF0ZUNsYXNzTmFtZSIsImdldER5bmFtaWNTdHlsZXMiLCJleHRyYWN0ZWQiLCJkeW5hbWljU2hlZXQiLCJ1c2VTeW5jaHJvbm91c0VmZmVjdCIsImN1cnJlbnRLZXkiLCJjbGFzc05hbWVQcmVmaXhPcHRpb24iLCJfb3B0aW9ucyRkZWZhdWx0VGhlbWUiLCJzdHlsZXNPcHRpb25zMiIsInNob3VsZFVwZGF0ZSIsInByb3BlcnRpZXMiLCJkaXJlY3Rpb25zIiwiYWxpYXNlcyIsIm1hcmdpblgiLCJtYXJnaW5ZIiwicGFkZGluZ1giLCJwYWRkaW5nWSIsImdldENzc1Byb3BlcnRpZXMiLCJfcHJvcCRzcGxpdCIsIl9wcm9wJHNwbGl0MiIsInNwYWNpbmdLZXlzIiwiY3JlYXRlVW5hcnlTcGFjaW5nIiwiZ2V0U3R5bGVGcm9tUHJvcFZhbHVlIiwiY3NzUHJvcGVydGllcyIsInRyYW5zZm9ybWVkIl0sIm1hcHBpbmdzIjoiYUFDRSxJQUFJQSxFQUFtQixHQUd2QixTQUFTQyxFQUFvQkMsR0FHNUIsR0FBR0YsRUFBaUJFLEdBQ25CLE9BQU9GLEVBQWlCRSxHQUFVQyxRQUduQyxJQUFJQyxFQUFTSixFQUFpQkUsR0FBWSxDQUN6Q0csRUFBR0gsRUFDSEksR0FBRyxFQUNISCxRQUFTLElBVVYsT0FOQUksRUFBUUwsR0FBVU0sS0FBS0osRUFBT0QsUUFBU0MsRUFBUUEsRUFBT0QsUUFBU0YsR0FHL0RHLEVBQU9FLEdBQUksRUFHSkYsRUFBT0QsUUFLZkYsRUFBb0JRLEVBQUlGLEVBR3hCTixFQUFvQlMsRUFBSVYsRUFHeEJDLEVBQW9CVSxFQUFJLFNBQVNSLEVBQVNTLEVBQU1DLEdBQzNDWixFQUFvQmEsRUFBRVgsRUFBU1MsSUFDbENHLE9BQU9DLGVBQWViLEVBQVNTLEVBQU0sQ0FBRUssWUFBWSxFQUFNQyxJQUFLTCxLQUtoRVosRUFBb0JrQixFQUFJLFNBQVNoQixHQUNYLG9CQUFYaUIsUUFBMEJBLE9BQU9DLGFBQzFDTixPQUFPQyxlQUFlYixFQUFTaUIsT0FBT0MsWUFBYSxDQUFFQyxNQUFPLFdBRTdEUCxPQUFPQyxlQUFlYixFQUFTLGFBQWMs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VUFDTEMsSUFBSyxVQUNMQyxJQUFLLFVBQ0xDLElBQUssVUFDTEMsSUFBSyxVQUNMQyxJQUFLLFVBQ0xDLElBQUssVUFDTEMsSUFBSyxVQUNMQyxLQUFNLFVBQ05DLEtBQU0sVUFDTkMsS0FBTSxVQUNOQyxLQUFNLFdDRU8sRUFoQkYsQ0FDWGIsR0FBSSxVQUNKQyxJQUFLLFVBQ0xDLElBQUssVUFDTEMsSUFBSyxVQUNMQyxJQUFLLFVBQ0xDLElBQUssVUFDTEMsSUFBSyxVQUNMQyxJQUFLLFVBQ0xDLElBQUssVUFDTEMsSUFBSyxVQUNMQyxLQUFNLFVBQ05DLEtBQU0sVUFDTkMsS0FBTSxVQUNOQyxLQUFNLFdDRU8sRUFoQkosQ0FDVGIsR0FBSSxVQUNKQyxJQUFLLFVBQ0xDLElBQUssVUFDTEMsSUFBSyxVQUNMQyxJQUFLLFVBQ0xDLElBQUssVUFDTEMsSUFBSyxVQUNMQyxJQUFLLFVBQ0xDLElBQUssVUFDTEMsSUFBSyxVQUNMQyxLQUFNLFVBQ05DLEtBQU0sVUFDTkMsS0FBTSxVQUNOQyxLQUFNLFdDRU8sRUFoQkwsQ0FDUmIsR0FBSSxVQUNKQyxJQUFLLFVBQ0xDLElBQUssVUFDTEMsSUFBSyxVQUNMQyxJQUFLLFVBQ0xDLElBQUssVUFDTEMsSUFBSyxVQUNMQyxJQUFLLFVBQ0xDLElBQUssVUFDTEMsSUFBSyxVQUNMQyxLQUFNLFVBQ05DLEtBQU0sVUFDTkMsS0FBTSxVQUNOQyxLQUFNLFdDRU8sRUFoQkYsQ0FDWGIsR0FBSSxVQUNKQyxJQUFLLFVBQ0xDLElBQUssVUFDTEMsSUFBSyxVQUNMQyxJQUFLLFVBQ0xDLElBQUssVUFDTEMsSUFBSyxVQUNMQyxJQUFLLFVBQ0xDLElBQUssVUFDTEMsSUFBSyxVQUNMQyxLQUFNLFVBQ05DLEtBQU0sVUFDTkMsS0FBTSxVQUNOQyxLQUFNLFdDRU8sRUFoQkosQ0FDVGIsR0FBSSxVQUNKQyxJQUFLLFVBQ0xDLElBQUssVUFDTEMsSUFBSyxVQUNMQyxJQUFLLFVBQ0xDLElBQUssVUFDTEMsSUFBSyxVQUNMQyxJQUFLLFVBQ0xDLElBQUssVUFDTEMsSUFB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RyxHQUFJLEdBQUlBLEVBQWEsRUFBRyxFQUFHLEdBQUksRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxHQUFJLEdBQUlBLEVBQWEsRUFBRyxFQUFHLEdBQUksRUFBRyxFQUFHLEVBQUcsR0FBSSxFQUFHLEVBQUcsRUFBRyxHQUFJLEdBQUlBLEVBQWEsRUFBRyxFQUFHLEdBQUksRUFBRyxFQUFHLEVBQUcsR0FBSSxFQUFHLEVBQUcsRUFBRyxHQUFJLEdBQUlBLEVBQWEsRUFBRyxFQUFHLEdBQUksRUFBRyxFQUFHLEVBQUcsR0FBSSxFQUFHLEVBQUcsRUFBRyxHQUFJLEdBQUlBLEVBQWEsRUFBRyxFQUFHLEdBQUksRUFBRyxFQUFHLEVBQUcsR0FBSSxFQUFHLEVBQUcsRUFBRyxHQUFJLEdBQUlBLEVBQWEsRUFBRyxFQUFHLEdBQUksRUFBRyxFQUFHLEdBQUksR0FBSSxFQUFHLEVBQUcsRUFBRyxHQUFJLEdBQUlBLEVBQWEsRUFBRyxFQUFHLEdBQUksRUFBRyxFQUFHLEdBQUksR0FBSSxFQUFHLEVBQUcsRUFBRyxHQUFJLEdBQUlBLEVBQWEsRUFBRyxFQUFHLEdBQUksRUFBRyxFQUFHLEdBQUksR0FBSSxFQUFHLEVBQUcsRUFBRyxHQUFJLEdBQUlBLEVBQWEsRUFBRyxFQUFHLEdBQUksRUFBRyxFQUFHLEdBQUksR0FBSSxFQUFHLEVBQUcsRUFBRyxHQUFJLEdBQUlBLEVBQWEsRUFBRyxFQUFHLEdBQUksRUFBRyxFQUFHLEdBQUksR0FBSSxFQUFHLEVBQUcsRUFBRyxHQUFJLEdBQUlBLEVBQWEsRUFBRyxFQUFHLEdBQUksRUFBRyxFQUFHLEdBQUksR0FBSSxFQUFHLEVBQUcsRUFBRyxHQUFJLEdBQUlBLEVBQWEsRUFBRyxFQUFHLElBQUssRUFBRyxFQUFHLEdBQUksR0FBSSxFQUFHLEVBQUcsRUFBRyxHQUFJLEdBQUlBLEVBQWEsRUFBRyxFQUFHLElBQUssRUFBRyxFQUFHLEdBQUksR0FBSSxFQUFHLEVBQUcsRUFBRyxHQUFJLEdBQUlBLEVBQWEsRUFBRyxFQUFHLElBQUssRUFBRyxFQUFH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S0FHVCxJQUNJdGEsRUFBcUIrMEksRUFETEwsRUFBaUJwNkgsR0FDeUI2TSxHQUMxRHBuQixFQUFZemMsRUFBTWczQixHQUN0QixPQUFPLFlBQWtCaDNCLEVBQU95YyxFQUFXQyxNQUMxQ2pRLE9BQU9zckksRUFBQSxFQUFPLElBR25CN21JLEVBQVF2RCxVQUdDLEdBQ1R1RCxFQUFRczlHLFlBQWMraUMsRUFDUCIsImZpbGUiOiJhcHAuanMiLCJzb3VyY2VzQ29udGVudCI6WyIgXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuXG4gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXG4gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSkge1xuIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuIFx0XHR9XG4gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbiBcdFx0XHRpOiBtb2R1bGVJZCxcbiBcdFx0XHRsOiBmYWxzZSxcbiBcdFx0XHRleHBvcnRzOiB7fVxuIFx0XHR9O1xuXG4gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4gXHRcdG1vZHVsZS5sID0gdHJ1ZTtcblxuIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4gXHR9XG5cblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuXG4gXHQvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9uIGZvciBoYXJtb255IGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIG5hbWUsIGdldHRlcikge1xuIFx0XHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIG5hbWUpKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIG5hbWUsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBnZXR0ZXIgfSk7XG4gXHRcdH1cbiBcdH07XG5cbiBcdC8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uciA9IGZ1bmN0aW9uKGV4cG9ydHMpIHtcbiBcdFx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG4gXHRcdH1cbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbiBcdH07XG5cbiBcdC8vIGNyZWF0ZSBhIGZha2UgbmFtZXNwYWNlIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDE6IHZhbHVlIGlzIGEgbW9kdWxlIGlkLCByZXF1aXJlIGl0XG4gXHQvLyBtb2RlICYgMjogbWVyZ2UgYWxsIHByb3BlcnRpZXMgb2YgdmFsdWUgaW50byB0aGUgbnNcbiBcdC8vIG1vZGUgJiA0OiByZXR1cm4gdmFsdWUgd2hlbiBhbHJlYWR5IG5zIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDh8MTogYmVoYXZlIGxpa2UgcmVxdWlyZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy50ID0gZnVuY3Rpb24odmFsdWUsIG1vZGUpIHtcbiBcdFx0aWYobW9kZSAmIDEpIHZhbHVlID0gX193ZWJwYWNrX3JlcXVpcmVfXyh2YWx1ZSk7XG4gXHRcdGlmKG1vZGUgJiA4KSByZXR1cm4gdmFsdWU7XG4gXHRcdGlmKChtb2RlICYgNCkgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiB2YWx1ZSAmJiB2YWx1ZS5fX2VzTW9kdWxlKSByZXR1cm4gdmFsdWU7XG4gXHRcdHZhciBucyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18ucihucyk7XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShucywgJ2RlZmF1bHQnLCB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiB2YWx1ZSB9KTtcbiBcdFx0aWYobW9kZSAmIDIgJiYgdHlwZW9mIHZhbHVlICE9ICdzdHJpbmcnKSBmb3IodmFyIGtleSBpbiB2YWx1ZSkgX193ZWJwYWNrX3JlcXVpcmVfXy5kKG5zLCBrZXksIGZ1bmN0aW9uKGtleSkgeyByZXR1cm4gdmFsdWVba2V5XTsgfS5iaW5kKG51bGwsIGtleSkpO1xuIFx0XHRyZXR1cm4gbnM7XG4gXHR9O1xuXG4gXHQvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG4gXHRcdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuIFx0XHRcdGZ1bmN0aW9uIGdldERlZmF1bHQoKSB7IHJldHVybiBtb2R1bGVbJ2RlZmF1bHQnXTsgfSA6XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpIHsgcmV0dXJuIG1vZHVsZTsgfTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgJ2EnLCBnZXR0ZXIpO1xuIFx0XHRyZXR1cm4gZ2V0dGVyO1xuIFx0fTtcblxuIFx0Ly8gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7IH07XG5cbiBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIlwiO1xuXG5cbiBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oX193ZWJwYWNrX3JlcXVpcmVfXy5zID0gMTUyKTtcbiIsIid1c2Ugc3RyaWN0JztcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC5wcm9kdWN0aW9uLm1pbi5qcycpO1xufSBlbHNlIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC5kZXZlbG9wbWVudC5qcycpO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX2V4dGVuZHMoKSB7XG4gIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7XG4gICAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07XG5cbiAgICAgIGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHtcbiAgICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHtcbiAgICAgICAgICB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHRhcmdldDtcbiAgfTtcblxuICByZXR1cm4gX2V4dGVuZHMuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbn0iLCJpbXBvcnQgb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiLi9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMoc291cmNlLCBleGNsdWRlZCkge1xuICBpZiAoc291cmNlID09IG51bGwpIHJldHVybiB7fTtcbiAgdmFyIHRhcmdldCA9IG9iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2Uoc291cmNlLCBleGNsdWRlZCk7XG4gIHZhciBrZXksIGk7XG5cbiAgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHtcbiAgICB2YXIgc291cmNlU3ltYm9sS2V5cyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMoc291cmNlKTtcblxuICAgIGZvciAoaSA9IDA7IGkgPCBzb3VyY2VTeW1ib2xLZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBrZXkgPSBzb3VyY2VTeW1ib2xLZXlzW2ldO1xuICAgICAgaWYgKGV4Y2x1ZGVkLmluZGV4T2Yoa2V5KSA+PSAwKSBjb250aW51ZTtcbiAgICAgIGlmICghT2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKHNvdXJjZSwga2V5KSkgY29udGludWU7XG4gICAgICB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0YXJnZXQ7XG59IiwiZnVuY3Rpb24gdG9WYWwobWl4KSB7XG5cdHZhciBrLCB5LCBzdHI9Jyc7XG5cblx0aWYgKHR5cGVvZiBtaXggPT09ICdzdHJpbmcnIHx8IHR5cGVvZiBtaXggPT09ICdudW1iZXInKSB7XG5cdFx0c3RyICs9IG1peDtcblx0fSBlbHNlIGlmICh0eXBlb2YgbWl4ID09PSAnb2JqZWN0Jykge1xuXHRcdGlmIChBcnJheS5pc0FycmF5KG1peCkpIHtcblx0XHRcdGZvciAoaz0wOyBrIDwgbWl4Lmxlbmd0aDsgaysrKSB7XG5cdFx0XHRcdGlmIChtaXhba10pIHtcblx0XHRcdFx0XHRpZiAoeSA9IHRvVmFsKG1peFtrXSkpIHtcblx0XHRcdFx0XHRcdHN0ciAmJiAoc3RyICs9ICcgJyk7XG5cdFx0XHRcdFx0XHRzdHIgKz0geTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9IGVsc2Uge1xuXHRcdFx0Zm9yIChrIGluIG1peCkge1xuXHRcdFx0XHRpZiAobWl4W2tdKSB7XG5cdFx0XHRcdFx0c3RyICYmIChzdHIgKz0gJyAnKTtcblx0XHRcdFx0XHRzdHIgKz0gaztcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHJldHVybiBzdHI7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uICgpIHtcblx0dmFyIGk9MCwgdG1wLCB4LCBzdHI9Jyc7XG5cdHdoaWxlIChpIDwgYXJndW1lbnRzLmxlbmd0aCkge1xuXHRcdGlmICh0bXAgPSBhcmd1bWVudHNbaSsrXSkge1xuXHRcdFx0aWYgKHggPSB0b1ZhbCh0bXApKSB7XG5cdFx0XHRcdHN0ciAmJiAoc3RyICs9ICcgJyk7XG5cdFx0XHRcdHN0ciArPSB4XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cdHJldHVybiBzdHI7XG59XG4iLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIHZhciBSZWFjdElzID0gcmVxdWlyZSgncmVhY3QtaXMnKTtcblxuICAvLyBCeSBleHBsaWNpdGx5IHVzaW5nIGBwcm9wLXR5cGVzYCB5b3UgYXJlIG9wdGluZyBpbnRvIG5ldyBkZXZlbG9wbWVudCBiZWhhdmlvci5cbiAgLy8gaHR0cDovL2ZiLm1lL3Byb3AtdHlwZXMtaW4tcHJvZFxuICB2YXIgdGhyb3dPbkRpcmVjdEFjY2VzcyA9IHRydWU7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9mYWN0b3J5V2l0aFR5cGVDaGVja2VycycpKFJlYWN0SXMuaXNFbGVtZW50LCB0aHJvd09uRGlyZWN0QWNjZXNzKTtcbn0gZWxzZSB7XG4gIC8vIEJ5IGV4cGxpY2l0bHkgdXNpbmcgYHByb3AtdHlwZXNgIHlvdSBhcmUgb3B0aW5nIGludG8gbmV3IHByb2R1Y3Rpb24gYmVoYXZpb3IuXG4gIC8vIGh0dHA6Ly9mYi5tZS9wcm9wLXR5cGVzLWluLXByb2RcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2ZhY3RvcnlXaXRoVGhyb3dpbmdTaGltcycpKCk7XG59XG4iLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzXCI7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBob2lzdE5vblJlYWN0U3RhdGljcyBmcm9tICdob2lzdC1ub24tcmVhY3Qtc3RhdGljcyc7XG5pbXBvcnQgeyBjaGFpblByb3BUeXBlcywgZ2V0RGlzcGxheU5hbWUgfSBmcm9tICdAbWF0ZXJpYWwtdWkvdXRpbHMnO1xuaW1wb3J0IG1ha2VTdHlsZXMgZnJvbSAnLi4vbWFrZVN0eWxlcyc7XG5pbXBvcnQgZ2V0VGhlbWVQcm9wcyBmcm9tICcuLi9nZXRUaGVtZVByb3BzJztcbmltcG9ydCB1c2VUaGVtZSBmcm9tICcuLi91c2VUaGVtZSc7IC8vIExpbmsgYSBzdHlsZSBzaGVldCB3aXRoIGEgY29tcG9uZW50LlxuLy8gSXQgZG9lcyBub3QgbW9kaWZ5IHRoZSBjb21wb25lbnQgcGFzc2VkIHRvIGl0O1xuLy8gaW5zdGVhZCwgaXQgcmV0dXJucyBhIG5ldyBjb21wb25lbnQsIHdpdGggYSBgY2xhc3Nlc2AgcHJvcGVydHkuXG5cbnZhciB3aXRoU3R5bGVzID0gZnVuY3Rpb24gd2l0aFN0eWxlcyhzdHlsZXNPckNyZWF0b3IpIHtcbiAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHt9O1xuICByZXR1cm4gZnVuY3Rpb24gKENvbXBvbmVudCkge1xuICAgIHZhciBkZWZhdWx0VGhlbWUgPSBvcHRpb25zLmRlZmF1bHRUaGVtZSxcbiAgICAgICAgX29wdGlvbnMkd2l0aFRoZW1lID0gb3B0aW9ucy53aXRoVGhlbWUsXG4gICAgICAgIHdpdGhUaGVtZSA9IF9vcHRpb25zJHdpdGhUaGVtZSA9PT0gdm9pZCAwID8gZmFsc2UgOiBfb3B0aW9ucyR3aXRoVGhlbWUsXG4gICAgICAgIG5hbWUgPSBvcHRpb25zLm5hbWUsXG4gICAgICAgIHN0eWxlc09wdGlvbnMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMob3B0aW9ucywgW1wiZGVmYXVsdFRoZW1lXCIsIFwid2l0aFRoZW1lXCIsIFwibmFtZVwiXSk7XG5cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgaWYgKENvbXBvbmVudCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihbJ1lvdSBhcmUgY2FsbGluZyB3aXRoU3R5bGVzKHN0eWxlcykoQ29tcG9uZW50KSB3aXRoIGFuIHVuZGVmaW5lZCBjb21wb25lbnQuJywgJ1lvdSBtYXkgaGF2ZSBmb3Jnb3R0ZW4gdG8gaW1wb3J0IGl0LiddLmpvaW4oJ1xcbicpKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgY2xhc3NOYW1lUHJlZml4ID0gbmFtZTtcblxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBpZiAoIW5hbWUpIHtcbiAgICAgICAgLy8gUHJvdmlkZSBhIGJldHRlciBEWCBvdXRzaWRlIHByb2R1Y3Rpb24uXG4gICAgICAgIHZhciBkaXNwbGF5TmFtZSA9IGdldERpc3BsYXlOYW1lKENvbXBvbmVudCk7XG5cbiAgICAgICAgaWYgKGRpc3BsYXlOYW1lICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBjbGFzc05hbWVQcmVmaXggPSBkaXNwbGF5TmFtZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHZhciB1c2VTdHlsZXMgPSBtYWtlU3R5bGVzKHN0eWxlc09yQ3JlYXRvciwgX2V4dGVuZHMoe1xuICAgICAgZGVmYXVsdFRoZW1lOiBkZWZhdWx0VGhlbWUsXG4gICAgICBDb21wb25lbnQ6IENvbXBvbmVudCxcbiAgICAgIG5hbWU6IG5hbWUgfHwgQ29tcG9uZW50LmRpc3BsYXlOYW1lLFxuICAgICAgY2xhc3NOYW1lUHJlZml4OiBjbGFzc05hbWVQcmVmaXhcbiAgICB9LCBzdHlsZXNPcHRpb25zKSk7XG4gICAgdmFyIFdpdGhTdHlsZXMgPSBSZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIFdpdGhTdHlsZXMocHJvcHMsIHJlZikge1xuICAgICAgdmFyIGNsYXNzZXNQcm9wID0gcHJvcHMuY2xhc3NlcyxcbiAgICAgICAgICBpbm5lclJlZiA9IHByb3BzLmlubmVyUmVmLFxuICAgICAgICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKHByb3BzLCBbXCJjbGFzc2VzXCIsIFwiaW5uZXJSZWZcIl0pOyAvLyBUaGUgd3JhcHBlciByZWNlaXZlcyBvbmx5IHVzZXIgc3VwcGxpZWQgcHJvcHMsIHdoaWNoIGNvdWxkIGJlIGEgc3Vic2V0IG9mXG4gICAgICAvLyB0aGUgYWN0dWFsIHByb3BzIENvbXBvbmVudCBtaWdodCByZWNlaXZlIGR1ZSB0byBtZXJnaW5nIHdpdGggZGVmYXVsdFByb3BzLlxuICAgICAgLy8gU28gY29weWluZyBpdCBoZXJlIHdvdWxkIGdpdmUgdXMgdGhlIHNhbWUgcmVzdWx0IGluIHRoZSB3cmFwcGVyIGFzIHdlbGwuXG5cblxuICAgICAgdmFyIGNsYXNzZXMgPSB1c2VTdHlsZXMoX2V4dGVuZHMoX2V4dGVuZHMoe30sIENvbXBvbmVudC5kZWZhdWx0UHJvcHMpLCBwcm9wcykpO1xuICAgICAgdmFyIHRoZW1lO1xuICAgICAgdmFyIG1vcmUgPSBvdGhlcjtcblxuICAgICAgaWYgKHR5cGVvZiBuYW1lID09PSAnc3RyaW5nJyB8fCB3aXRoVGhlbWUpIHtcbiAgICAgICAgLy8gbmFtZSBhbmQgd2l0aFRoZW1lIGFyZSBpbnZhcmlhbnQgaW4gdGhlIG91dGVyIHNjb3BlXG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWFjdC1ob29rcy9ydWxlcy1vZi1ob29rc1xuICAgICAgICB0aGVtZSA9IHVzZVRoZW1lKCkgfHwgZGVmYXVsdFRoZW1lO1xuXG4gICAgICAgIGlmIChuYW1lKSB7XG4gICAgICAgICAgbW9yZSA9IGdldFRoZW1lUHJvcHMoe1xuICAgICAgICAgICAgdGhlbWU6IHRoZW1lLFxuICAgICAgICAgICAgbmFtZTogbmFtZSxcbiAgICAgICAgICAgIHByb3BzOiBvdGhlclxuICAgICAgICAgIH0pO1xuICAgICAgICB9IC8vIFByb3ZpZGUgdGhlIHRoZW1lIHRvIHRoZSB3cmFwcGVkIGNvbXBvbmVudC5cbiAgICAgICAgLy8gU28gd2UgZG9uJ3QgaGF2ZSB0byB1c2UgdGhlIGB3aXRoVGhlbWUoKWAgSGlnaGVyLW9yZGVyIENvbXBvbmVudC5cblxuXG4gICAgICAgIGlmICh3aXRoVGhlbWUgJiYgIW1vcmUudGhlbWUpIHtcbiAgICAgICAgICBtb3JlLnRoZW1lID0gdGhlbWU7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KENvbXBvbmVudCwgX2V4dGVuZHMoe1xuICAgICAgICByZWY6IGlubmVyUmVmIHx8IHJlZixcbiAgICAgICAgY2xhc3NlczogY2xhc3Nlc1xuICAgICAgfSwgbW9yZSkpO1xuICAgIH0pO1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFdpdGhTdHlsZXMucHJvcFR5cGVzID0ge1xuICAgICAgLyoqXG4gICAgICAgKiBPdmVycmlkZSBvciBleHRlbmQgdGhlIHN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAgICAgKi9cbiAgICAgIGNsYXNzZXM6IFByb3BUeXBlcy5vYmplY3QsXG5cbiAgICAgIC8qKlxuICAgICAgICogVXNlIHRoYXQgcHJvcCB0byBwYXNzIGEgcmVmIHRvIHRoZSBkZWNvcmF0ZWQgY29tcG9uZW50LlxuICAgICAgICogQGRlcHJlY2F0ZWRcbiAgICAgICAqL1xuICAgICAgaW5uZXJSZWY6IGNoYWluUHJvcFR5cGVzKFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMub2JqZWN0XSksIGZ1bmN0aW9uIChwcm9wcykge1xuICAgICAgICBpZiAocHJvcHMuaW5uZXJSZWYgPT0gbnVsbCkge1xuICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG51bGw7IC8vIHJldHVybiBuZXcgRXJyb3IoXG4gICAgICAgIC8vICAgJ01hdGVyaWFsLVVJOiBUaGUgYGlubmVyUmVmYCBwcm9wIGlzIGRlcHJlY2F0ZWQgYW5kIHdpbGwgYmUgcmVtb3ZlZCBpbiB2NS4gJyArXG4gICAgICAgIC8vICAgICAnUmVmcyBhcmUgbm93IGF1dG9tYXRpY2FsbHkgZm9yd2FyZGVkIHRvIHRoZSBpbm5lciBjb21wb25lbnQuJyxcbiAgICAgICAgLy8gKTtcbiAgICAgIH0pXG4gICAgfSA6IHZvaWQgMDtcblxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBXaXRoU3R5bGVzLmRpc3BsYXlOYW1lID0gXCJXaXRoU3R5bGVzKFwiLmNvbmNhdChnZXREaXNwbGF5TmFtZShDb21wb25lbnQpLCBcIilcIik7XG4gICAgfVxuXG4gICAgaG9pc3ROb25SZWFjdFN0YXRpY3MoV2l0aFN0eWxlcywgQ29tcG9uZW50KTtcblxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAvLyBFeHBvc2VkIGZvciB0ZXN0IHB1cnBvc2VzLlxuICAgICAgV2l0aFN0eWxlcy5OYWtlZCA9IENvbXBvbmVudDtcbiAgICAgIFdpdGhTdHlsZXMub3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgICBXaXRoU3R5bGVzLnVzZVN0eWxlcyA9IHVzZVN0eWxlcztcbiAgICB9XG5cbiAgICByZXR1cm4gV2l0aFN0eWxlcztcbiAgfTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IHdpdGhTdHlsZXM7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgeyB3aXRoU3R5bGVzIGFzIHdpdGhTdHlsZXNXaXRob3V0RGVmYXVsdCB9IGZyb20gJ0BtYXRlcmlhbC11aS9zdHlsZXMnO1xuaW1wb3J0IGRlZmF1bHRUaGVtZSBmcm9tICcuL2RlZmF1bHRUaGVtZSc7XG5cbmZ1bmN0aW9uIHdpdGhTdHlsZXMoc3R5bGVzT3JDcmVhdG9yLCBvcHRpb25zKSB7XG4gIHJldHVybiB3aXRoU3R5bGVzV2l0aG91dERlZmF1bHQoc3R5bGVzT3JDcmVhdG9yLCBfZXh0ZW5kcyh7XG4gICAgZGVmYXVsdFRoZW1lOiBkZWZhdWx0VGhlbWVcbiAgfSwgb3B0aW9ucykpO1xufVxuXG5leHBvcnQgZGVmYXVsdCB3aXRoU3R5bGVzOyIsImltcG9ydCB7IGZvcm1hdE11aUVycm9yTWVzc2FnZSBhcyBfZm9ybWF0TXVpRXJyb3JNZXNzYWdlIH0gZnJvbSBcIkBtYXRlcmlhbC11aS91dGlsc1wiO1xuLy8gSXQgc2hvdWxkIHRvIGJlIG5vdGVkIHRoYXQgdGhpcyBmdW5jdGlvbiBpc24ndCBlcXVpdmFsZW50IHRvIGB0ZXh0LXRyYW5zZm9ybTogY2FwaXRhbGl6ZWAuXG4vL1xuLy8gQSBzdHJpY3QgY2FwaXRhbGl6YXRpb24gc2hvdWxkIHVwcGVyY2FzZSB0aGUgZmlyc3QgbGV0dGVyIG9mIGVhY2ggd29yZCBhIHRoZSBzZW50ZW5jZS5cbi8vIFdlIG9ubHkgaGFuZGxlIHRoZSBmaXJzdCB3b3JkLlxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY2FwaXRhbGl6ZShzdHJpbmcpIHtcbiAgaWYgKHR5cGVvZiBzdHJpbmcgIT09ICdzdHJpbmcnKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFwiTWF0ZXJpYWwtVUk6IGNhcGl0YWxpemUoc3RyaW5nKSBleHBlY3RzIGEgc3RyaW5nIGFyZ3VtZW50LlwiIDogX2Zvcm1hdE11aUVycm9yTWVzc2FnZSg3KSk7XG4gIH1cblxuICByZXR1cm4gc3RyaW5nLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgc3RyaW5nLnNsaWNlKDEpO1xufSIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHtcbiAgaWYgKGtleSBpbiBvYmopIHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHtcbiAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICB3cml0YWJsZTogdHJ1ZVxuICAgIH0pO1xuICB9IGVsc2Uge1xuICAgIG9ialtrZXldID0gdmFsdWU7XG4gIH1cblxuICByZXR1cm4gb2JqO1xufSIsImltcG9ydCB7IGZvcm1hdE11aUVycm9yTWVzc2FnZSBhcyBfZm9ybWF0TXVpRXJyb3JNZXNzYWdlIH0gZnJvbSBcIkBtYXRlcmlhbC11aS91dGlsc1wiO1xuXG4vKiBlc2xpbnQtZGlzYWJsZSBuby11c2UtYmVmb3JlLWRlZmluZSAqL1xuXG4vKipcbiAqIFJldHVybnMgYSBudW1iZXIgd2hvc2UgdmFsdWUgaXMgbGltaXRlZCB0byB0aGUgZ2l2ZW4gcmFuZ2UuXG4gKlxuICogQHBhcmFtIHtudW1iZXJ9IHZhbHVlIFRoZSB2YWx1ZSB0byBiZSBjbGFtcGVkXG4gKiBAcGFyYW0ge251bWJlcn0gbWluIFRoZSBsb3dlciBib3VuZGFyeSBvZiB0aGUgb3V0cHV0IHJhbmdlXG4gKiBAcGFyYW0ge251bWJlcn0gbWF4IFRoZSB1cHBlciBib3VuZGFyeSBvZiB0aGUgb3V0cHV0IHJhbmdlXG4gKiBAcmV0dXJucyB7bnVtYmVyfSBBIG51bWJlciBpbiB0aGUgcmFuZ2UgW21pbiwgbWF4XVxuICovXG5mdW5jdGlvbiBjbGFtcCh2YWx1ZSkge1xuICB2YXIgbWluID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiAwO1xuICB2YXIgbWF4ID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiAxO1xuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgaWYgKHZhbHVlIDwgbWluIHx8IHZhbHVlID4gbWF4KSB7XG4gICAgICBjb25zb2xlLmVycm9yKFwiTWF0ZXJpYWwtVUk6IFRoZSB2YWx1ZSBwcm92aWRlZCBcIi5jb25jYXQodmFsdWUsIFwiIGlzIG91dCBvZiByYW5nZSBbXCIpLmNvbmNhdChtaW4sIFwiLCBcIikuY29uY2F0KG1heCwgXCJdLlwiKSk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIE1hdGgubWluKE1hdGgubWF4KG1pbiwgdmFsdWUpLCBtYXgpO1xufVxuLyoqXG4gKiBDb252ZXJ0cyBhIGNvbG9yIGZyb20gQ1NTIGhleCBmb3JtYXQgdG8gQ1NTIHJnYiBmb3JtYXQuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGNvbG9yIC0gSGV4IGNvbG9yLCBpLmUuICNubm4gb3IgI25ubm5ublxuICogQHJldHVybnMge3N0cmluZ30gQSBDU1MgcmdiIGNvbG9yIHN0cmluZ1xuICovXG5cblxuZXhwb3J0IGZ1bmN0aW9uIGhleFRvUmdiKGNvbG9yKSB7XG4gIGNvbG9yID0gY29sb3Iuc3Vic3RyKDEpO1xuICB2YXIgcmUgPSBuZXcgUmVnRXhwKFwiLnsxLFwiLmNvbmNhdChjb2xvci5sZW5ndGggPj0gNiA/IDIgOiAxLCBcIn1cIiksICdnJyk7XG4gIHZhciBjb2xvcnMgPSBjb2xvci5tYXRjaChyZSk7XG5cbiAgaWYgKGNvbG9ycyAmJiBjb2xvcnNbMF0ubGVuZ3RoID09PSAxKSB7XG4gICAgY29sb3JzID0gY29sb3JzLm1hcChmdW5jdGlvbiAobikge1xuICAgICAgcmV0dXJuIG4gKyBuO1xuICAgIH0pO1xuICB9XG5cbiAgcmV0dXJuIGNvbG9ycyA/IFwicmdiXCIuY29uY2F0KGNvbG9ycy5sZW5ndGggPT09IDQgPyAnYScgOiAnJywgXCIoXCIpLmNvbmNhdChjb2xvcnMubWFwKGZ1bmN0aW9uIChuLCBpbmRleCkge1xuICAgIHJldHVybiBpbmRleCA8IDMgPyBwYXJzZUludChuLCAxNikgOiBNYXRoLnJvdW5kKHBhcnNlSW50KG4sIDE2KSAvIDI1NSAqIDEwMDApIC8gMTAwMDtcbiAgfSkuam9pbignLCAnKSwgXCIpXCIpIDogJyc7XG59XG5cbmZ1bmN0aW9uIGludFRvSGV4KGludCkge1xuICB2YXIgaGV4ID0gaW50LnRvU3RyaW5nKDE2KTtcbiAgcmV0dXJuIGhleC5sZW5ndGggPT09IDEgPyBcIjBcIi5jb25jYXQoaGV4KSA6IGhleDtcbn1cbi8qKlxuICogQ29udmVydHMgYSBjb2xvciBmcm9tIENTUyByZ2IgZm9ybWF0IHRvIENTUyBoZXggZm9ybWF0LlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBjb2xvciAtIFJHQiBjb2xvciwgaS5lLiByZ2IobiwgbiwgbilcbiAqIEByZXR1cm5zIHtzdHJpbmd9IEEgQ1NTIHJnYiBjb2xvciBzdHJpbmcsIGkuZS4gI25ubm5ublxuICovXG5cblxuZXhwb3J0IGZ1bmN0aW9uIHJnYlRvSGV4KGNvbG9yKSB7XG4gIC8vIElkZW1wb3RlbnRcbiAgaWYgKGNvbG9yLmluZGV4T2YoJyMnKSA9PT0gMCkge1xuICAgIHJldHVybiBjb2xvcjtcbiAgfVxuXG4gIHZhciBfZGVjb21wb3NlQ29sb3IgPSBkZWNvbXBvc2VDb2xvcihjb2xvciksXG4gICAgICB2YWx1ZXMgPSBfZGVjb21wb3NlQ29sb3IudmFsdWVzO1xuXG4gIHJldHVybiBcIiNcIi5jb25jYXQodmFsdWVzLm1hcChmdW5jdGlvbiAobikge1xuICAgIHJldHVybiBpbnRUb0hleChuKTtcbiAgfSkuam9pbignJykpO1xufVxuLyoqXG4gKiBDb252ZXJ0cyBhIGNvbG9yIGZyb20gaHNsIGZvcm1hdCB0byByZ2IgZm9ybWF0LlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBjb2xvciAtIEhTTCBjb2xvciB2YWx1ZXNcbiAqIEByZXR1cm5zIHtzdHJpbmd9IHJnYiBjb2xvciB2YWx1ZXNcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gaHNsVG9SZ2IoY29sb3IpIHtcbiAgY29sb3IgPSBkZWNvbXBvc2VDb2xvcihjb2xvcik7XG4gIHZhciBfY29sb3IgPSBjb2xvcixcbiAgICAgIHZhbHVlcyA9IF9jb2xvci52YWx1ZXM7XG4gIHZhciBoID0gdmFsdWVzWzBdO1xuICB2YXIgcyA9IHZhbHVlc1sxXSAvIDEwMDtcbiAgdmFyIGwgPSB2YWx1ZXNbMl0gLyAxMDA7XG4gIHZhciBhID0gcyAqIE1hdGgubWluKGwsIDEgLSBsKTtcblxuICB2YXIgZiA9IGZ1bmN0aW9uIGYobikge1xuICAgIHZhciBrID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiAobiArIGggLyAzMCkgJSAxMjtcbiAgICByZXR1cm4gbCAtIGEgKiBNYXRoLm1heChNYXRoLm1pbihrIC0gMywgOSAtIGssIDEpLCAtMSk7XG4gIH07XG5cbiAgdmFyIHR5cGUgPSAncmdiJztcbiAgdmFyIHJnYiA9IFtNYXRoLnJvdW5kKGYoMCkgKiAyNTUpLCBNYXRoLnJvdW5kKGYoOCkgKiAyNTUpLCBNYXRoLnJvdW5kKGYoNCkgKiAyNTUpXTtcblxuICBpZiAoY29sb3IudHlwZSA9PT0gJ2hzbGEnKSB7XG4gICAgdHlwZSArPSAnYSc7XG4gICAgcmdiLnB1c2godmFsdWVzWzNdKTtcbiAgfVxuXG4gIHJldHVybiByZWNvbXBvc2VDb2xvcih7XG4gICAgdHlwZTogdHlwZSxcbiAgICB2YWx1ZXM6IHJnYlxuICB9KTtcbn1cbi8qKlxuICogUmV0dXJucyBhbiBvYmplY3Qgd2l0aCB0aGUgdHlwZSBhbmQgdmFsdWVzIG9mIGEgY29sb3IuXG4gKlxuICogTm90ZTogRG9lcyBub3Qgc3VwcG9ydCByZ2IgJSB2YWx1ZXMuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGNvbG9yIC0gQ1NTIGNvbG9yLCBpLmUuIG9uZSBvZjogI25ubiwgI25ubm5ubiwgcmdiKCksIHJnYmEoKSwgaHNsKCksIGhzbGEoKVxuICogQHJldHVybnMge29iamVjdH0gLSBBIE1VSSBjb2xvciBvYmplY3Q6IHt0eXBlOiBzdHJpbmcsIHZhbHVlczogbnVtYmVyW119XG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGRlY29tcG9zZUNvbG9yKGNvbG9yKSB7XG4gIC8vIElkZW1wb3RlbnRcbiAgaWYgKGNvbG9yLnR5cGUpIHtcbiAgICByZXR1cm4gY29sb3I7XG4gIH1cblxuICBpZiAoY29sb3IuY2hhckF0KDApID09PSAnIycpIHtcbiAgICByZXR1cm4gZGVjb21wb3NlQ29sb3IoaGV4VG9SZ2IoY29sb3IpKTtcbiAgfVxuXG4gIHZhciBtYXJrZXIgPSBjb2xvci5pbmRleE9mKCcoJyk7XG4gIHZhciB0eXBlID0gY29sb3Iuc3Vic3RyaW5nKDAsIG1hcmtlcik7XG5cbiAgaWYgKFsncmdiJywgJ3JnYmEnLCAnaHNsJywgJ2hzbGEnXS5pbmRleE9mKHR5cGUpID09PSAtMSkge1xuICAgIHRocm93IG5ldyBFcnJvcihwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBcIk1hdGVyaWFsLVVJOiBVbnN1cHBvcnRlZCBgXCIuY29uY2F0KGNvbG9yLCBcImAgY29sb3IuXFxuV2Ugc3VwcG9ydCB0aGUgZm9sbG93aW5nIGZvcm1hdHM6ICNubm4sICNubm5ubm4sIHJnYigpLCByZ2JhKCksIGhzbCgpLCBoc2xhKCkuXCIpIDogX2Zvcm1hdE11aUVycm9yTWVzc2FnZSgzLCBjb2xvcikpO1xuICB9XG5cbiAgdmFyIHZhbHVlcyA9IGNvbG9yLnN1YnN0cmluZyhtYXJrZXIgKyAxLCBjb2xvci5sZW5ndGggLSAxKS5zcGxpdCgnLCcpO1xuICB2YWx1ZXMgPSB2YWx1ZXMubWFwKGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgIHJldHVybiBwYXJzZUZsb2F0KHZhbHVlKTtcbiAgfSk7XG4gIHJldHVybiB7XG4gICAgdHlwZTogdHlwZSxcbiAgICB2YWx1ZXM6IHZhbHVlc1xuICB9O1xufVxuLyoqXG4gKiBDb252ZXJ0cyBhIGNvbG9yIG9iamVjdCB3aXRoIHR5cGUgYW5kIHZhbHVlcyB0byBhIHN0cmluZy5cbiAqXG4gKiBAcGFyYW0ge29iamVjdH0gY29sb3IgLSBEZWNvbXBvc2VkIGNvbG9yXG4gKiBAcGFyYW0ge3N0cmluZ30gY29sb3IudHlwZSAtIE9uZSBvZjogJ3JnYicsICdyZ2JhJywgJ2hzbCcsICdoc2xhJ1xuICogQHBhcmFtIHthcnJheX0gY29sb3IudmFsdWVzIC0gW24sbixuXSBvciBbbixuLG4sbl1cbiAqIEByZXR1cm5zIHtzdHJpbmd9IEEgQ1NTIGNvbG9yIHN0cmluZ1xuICovXG5cbmV4cG9ydCBmdW5jdGlvbiByZWNvbXBvc2VDb2xvcihjb2xvcikge1xuICB2YXIgdHlwZSA9IGNvbG9yLnR5cGU7XG4gIHZhciB2YWx1ZXMgPSBjb2xvci52YWx1ZXM7XG5cbiAgaWYgKHR5cGUuaW5kZXhPZigncmdiJykgIT09IC0xKSB7XG4gICAgLy8gT25seSBjb252ZXJ0IHRoZSBmaXJzdCAzIHZhbHVlcyB0byBpbnQgKGkuZS4gbm90IGFscGhhKVxuICAgIHZhbHVlcyA9IHZhbHVlcy5tYXAoZnVuY3Rpb24gKG4sIGkpIHtcbiAgICAgIHJldHVybiBpIDwgMyA/IHBhcnNlSW50KG4sIDEwKSA6IG47XG4gICAgfSk7XG4gIH0gZWxzZSBpZiAodHlwZS5pbmRleE9mKCdoc2wnKSAhPT0gLTEpIHtcbiAgICB2YWx1ZXNbMV0gPSBcIlwiLmNvbmNhdCh2YWx1ZXNbMV0sIFwiJVwiKTtcbiAgICB2YWx1ZXNbMl0gPSBcIlwiLmNvbmNhdCh2YWx1ZXNbMl0sIFwiJVwiKTtcbiAgfVxuXG4gIHJldHVybiBcIlwiLmNvbmNhdCh0eXBlLCBcIihcIikuY29uY2F0KHZhbHVlcy5qb2luKCcsICcpLCBcIilcIik7XG59XG4vKipcbiAqIENhbGN1bGF0ZXMgdGhlIGNvbnRyYXN0IHJhdGlvIGJldHdlZW4gdHdvIGNvbG9ycy5cbiAqXG4gKiBGb3JtdWxhOiBodHRwczovL3d3dy53My5vcmcvVFIvV0NBRzIwLVRFQ0hTL0cxNy5odG1sI0cxNy10ZXN0c1xuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBmb3JlZ3JvdW5kIC0gQ1NTIGNvbG9yLCBpLmUuIG9uZSBvZjogI25ubiwgI25ubm5ubiwgcmdiKCksIHJnYmEoKSwgaHNsKCksIGhzbGEoKVxuICogQHBhcmFtIHtzdHJpbmd9IGJhY2tncm91bmQgLSBDU1MgY29sb3IsIGkuZS4gb25lIG9mOiAjbm5uLCAjbm5ubm5uLCByZ2IoKSwgcmdiYSgpLCBoc2woKSwgaHNsYSgpXG4gKiBAcmV0dXJucyB7bnVtYmVyfSBBIGNvbnRyYXN0IHJhdGlvIHZhbHVlIGluIHRoZSByYW5nZSAwIC0gMjEuXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGdldENvbnRyYXN0UmF0aW8oZm9yZWdyb3VuZCwgYmFja2dyb3VuZCkge1xuICB2YXIgbHVtQSA9IGdldEx1bWluYW5jZShmb3JlZ3JvdW5kKTtcbiAgdmFyIGx1bUIgPSBnZXRMdW1pbmFuY2UoYmFja2dyb3VuZCk7XG4gIHJldHVybiAoTWF0aC5tYXgobHVtQSwgbHVtQikgKyAwLjA1KSAvIChNYXRoLm1pbihsdW1BLCBsdW1CKSArIDAuMDUpO1xufVxuLyoqXG4gKiBUaGUgcmVsYXRpdmUgYnJpZ2h0bmVzcyBvZiBhbnkgcG9pbnQgaW4gYSBjb2xvciBzcGFjZSxcbiAqIG5vcm1hbGl6ZWQgdG8gMCBmb3IgZGFya2VzdCBibGFjayBhbmQgMSBmb3IgbGlnaHRlc3Qgd2hpdGUuXG4gKlxuICogRm9ybXVsYTogaHR0cHM6Ly93d3cudzMub3JnL1RSL1dDQUcyMC1URUNIUy9HMTcuaHRtbCNHMTctdGVzdHNcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gY29sb3IgLSBDU1MgY29sb3IsIGkuZS4gb25lIG9mOiAjbm5uLCAjbm5ubm5uLCByZ2IoKSwgcmdiYSgpLCBoc2woKSwgaHNsYSgpXG4gKiBAcmV0dXJucyB7bnVtYmVyfSBUaGUgcmVsYXRpdmUgYnJpZ2h0bmVzcyBvZiB0aGUgY29sb3IgaW4gdGhlIHJhbmdlIDAgLSAxXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGdldEx1bWluYW5jZShjb2xvcikge1xuICBjb2xvciA9IGRlY29tcG9zZUNvbG9yKGNvbG9yKTtcbiAgdmFyIHJnYiA9IGNvbG9yLnR5cGUgPT09ICdoc2wnID8gZGVjb21wb3NlQ29sb3IoaHNsVG9SZ2IoY29sb3IpKS52YWx1ZXMgOiBjb2xvci52YWx1ZXM7XG4gIHJnYiA9IHJnYi5tYXAoZnVuY3Rpb24gKHZhbCkge1xuICAgIHZhbCAvPSAyNTU7IC8vIG5vcm1hbGl6ZWRcblxuICAgIHJldHVybiB2YWwgPD0gMC4wMzkyOCA/IHZhbCAvIDEyLjkyIDogTWF0aC5wb3coKHZhbCArIDAuMDU1KSAvIDEuMDU1LCAyLjQpO1xuICB9KTsgLy8gVHJ1bmNhdGUgYXQgMyBkaWdpdHNcblxuICByZXR1cm4gTnVtYmVyKCgwLjIxMjYgKiByZ2JbMF0gKyAwLjcxNTIgKiByZ2JbMV0gKyAwLjA3MjIgKiByZ2JbMl0pLnRvRml4ZWQoMykpO1xufVxuLyoqXG4gKiBEYXJrZW4gb3IgbGlnaHRlbiBhIGNvbG9yLCBkZXBlbmRpbmcgb24gaXRzIGx1bWluYW5jZS5cbiAqIExpZ2h0IGNvbG9ycyBhcmUgZGFya2VuZWQsIGRhcmsgY29sb3JzIGFyZSBsaWdodGVuZWQuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGNvbG9yIC0gQ1NTIGNvbG9yLCBpLmUuIG9uZSBvZjogI25ubiwgI25ubm5ubiwgcmdiKCksIHJnYmEoKSwgaHNsKCksIGhzbGEoKVxuICogQHBhcmFtIHtudW1iZXJ9IGNvZWZmaWNpZW50PTAuMTUgLSBtdWx0aXBsaWVyIGluIHRoZSByYW5nZSAwIC0gMVxuICogQHJldHVybnMge3N0cmluZ30gQSBDU1MgY29sb3Igc3RyaW5nLiBIZXggaW5wdXQgdmFsdWVzIGFyZSByZXR1cm5lZCBhcyByZ2JcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gZW1waGFzaXplKGNvbG9yKSB7XG4gIHZhciBjb2VmZmljaWVudCA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogMC4xNTtcbiAgcmV0dXJuIGdldEx1bWluYW5jZShjb2xvcikgPiAwLjUgPyBkYXJrZW4oY29sb3IsIGNvZWZmaWNpZW50KSA6IGxpZ2h0ZW4oY29sb3IsIGNvZWZmaWNpZW50KTtcbn1cbi8qKlxuICogU2V0IHRoZSBhYnNvbHV0ZSB0cmFuc3BhcmVuY3kgb2YgYSBjb2xvci5cbiAqIEFueSBleGlzdGluZyBhbHBoYSB2YWx1ZXMgYXJlIG92ZXJ3cml0dGVuLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBjb2xvciAtIENTUyBjb2xvciwgaS5lLiBvbmUgb2Y6ICNubm4sICNubm5ubm4sIHJnYigpLCByZ2JhKCksIGhzbCgpLCBoc2xhKClcbiAqIEBwYXJhbSB7bnVtYmVyfSB2YWx1ZSAtIHZhbHVlIHRvIHNldCB0aGUgYWxwaGEgY2hhbm5lbCB0byBpbiB0aGUgcmFuZ2UgMCAtMVxuICogQHJldHVybnMge3N0cmluZ30gQSBDU1MgY29sb3Igc3RyaW5nLiBIZXggaW5wdXQgdmFsdWVzIGFyZSByZXR1cm5lZCBhcyByZ2JcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gZmFkZShjb2xvciwgdmFsdWUpIHtcbiAgY29sb3IgPSBkZWNvbXBvc2VDb2xvcihjb2xvcik7XG4gIHZhbHVlID0gY2xhbXAodmFsdWUpO1xuXG4gIGlmIChjb2xvci50eXBlID09PSAncmdiJyB8fCBjb2xvci50eXBlID09PSAnaHNsJykge1xuICAgIGNvbG9yLnR5cGUgKz0gJ2EnO1xuICB9XG5cbiAgY29sb3IudmFsdWVzWzNdID0gdmFsdWU7XG4gIHJldHVybiByZWNvbXBvc2VDb2xvcihjb2xvcik7XG59XG4vKipcbiAqIERhcmtlbnMgYSBjb2xvci5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gY29sb3IgLSBDU1MgY29sb3IsIGkuZS4gb25lIG9mOiAjbm5uLCAjbm5ubm5uLCByZ2IoKSwgcmdiYSgpLCBoc2woKSwgaHNsYSgpXG4gKiBAcGFyYW0ge251bWJlcn0gY29lZmZpY2llbnQgLSBtdWx0aXBsaWVyIGluIHRoZSByYW5nZSAwIC0gMVxuICogQHJldHVybnMge3N0cmluZ30gQSBDU1MgY29sb3Igc3RyaW5nLiBIZXggaW5wdXQgdmFsdWVzIGFyZSByZXR1cm5lZCBhcyByZ2JcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gZGFya2VuKGNvbG9yLCBjb2VmZmljaWVudCkge1xuICBjb2xvciA9IGRlY29tcG9zZUNvbG9yKGNvbG9yKTtcbiAgY29lZmZpY2llbnQgPSBjbGFtcChjb2VmZmljaWVudCk7XG5cbiAgaWYgKGNvbG9yLnR5cGUuaW5kZXhPZignaHNsJykgIT09IC0xKSB7XG4gICAgY29sb3IudmFsdWVzWzJdICo9IDEgLSBjb2VmZmljaWVudDtcbiAgfSBlbHNlIGlmIChjb2xvci50eXBlLmluZGV4T2YoJ3JnYicpICE9PSAtMSkge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgMzsgaSArPSAxKSB7XG4gICAgICBjb2xvci52YWx1ZXNbaV0gKj0gMSAtIGNvZWZmaWNpZW50O1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiByZWNvbXBvc2VDb2xvcihjb2xvcik7XG59XG4vKipcbiAqIExpZ2h0ZW5zIGEgY29sb3IuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGNvbG9yIC0gQ1NTIGNvbG9yLCBpLmUuIG9uZSBvZjogI25ubiwgI25ubm5ubiwgcmdiKCksIHJnYmEoKSwgaHNsKCksIGhzbGEoKVxuICogQHBhcmFtIHtudW1iZXJ9IGNvZWZmaWNpZW50IC0gbXVsdGlwbGllciBpbiB0aGUgcmFuZ2UgMCAtIDFcbiAqIEByZXR1cm5zIHtzdHJpbmd9IEEgQ1NTIGNvbG9yIHN0cmluZy4gSGV4IGlucHV0IHZhbHVlcyBhcmUgcmV0dXJuZWQgYXMgcmdiXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGxpZ2h0ZW4oY29sb3IsIGNvZWZmaWNpZW50KSB7XG4gIGNvbG9yID0gZGVjb21wb3NlQ29sb3IoY29sb3IpO1xuICBjb2VmZmljaWVudCA9IGNsYW1wKGNvZWZmaWNpZW50KTtcblxuICBpZiAoY29sb3IudHlwZS5pbmRleE9mKCdoc2wnKSAhPT0gLTEpIHtcbiAgICBjb2xvci52YWx1ZXNbMl0gKz0gKDEwMCAtIGNvbG9yLnZhbHVlc1syXSkgKiBjb2VmZmljaWVudDtcbiAgfSBlbHNlIGlmIChjb2xvci50eXBlLmluZGV4T2YoJ3JnYicpICE9PSAtMSkge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgMzsgaSArPSAxKSB7XG4gICAgICBjb2xvci52YWx1ZXNbaV0gKz0gKDI1NSAtIGNvbG9yLnZhbHVlc1tpXSkgKiBjb2VmZmljaWVudDtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gcmVjb21wb3NlQ29sb3IoY29sb3IpO1xufSIsIid1c2Ugc3RyaWN0JztcblxuZnVuY3Rpb24gY2hlY2tEQ0UoKSB7XG4gIC8qIGdsb2JhbCBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18gKi9cbiAgaWYgKFxuICAgIHR5cGVvZiBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18gPT09ICd1bmRlZmluZWQnIHx8XG4gICAgdHlwZW9mIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXy5jaGVja0RDRSAhPT0gJ2Z1bmN0aW9uJ1xuICApIHtcbiAgICByZXR1cm47XG4gIH1cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAvLyBUaGlzIGJyYW5jaCBpcyB1bnJlYWNoYWJsZSBiZWNhdXNlIHRoaXMgZnVuY3Rpb24gaXMgb25seSBjYWxsZWRcbiAgICAvLyBpbiBwcm9kdWN0aW9uLCBidXQgdGhlIGNvbmRpdGlvbiBpcyB0cnVlIG9ubHkgaW4gZGV2ZWxvcG1lbnQuXG4gICAgLy8gVGhlcmVmb3JlIGlmIHRoZSBicmFuY2ggaXMgc3RpbGwgaGVyZSwgZGVhZCBjb2RlIGVsaW1pbmF0aW9uIHdhc24ndFxuICAgIC8vIHByb3Blcmx5IGFwcGxpZWQuXG4gICAgLy8gRG9uJ3QgY2hhbmdlIHRoZSBtZXNzYWdlLiBSZWFjdCBEZXZUb29scyByZWxpZXMgb24gaXQuIEFsc28gbWFrZSBzdXJlXG4gICAgLy8gdGhpcyBtZXNzYWdlIGRvZXNuJ3Qgb2NjdXIgZWxzZXdoZXJlIGluIHRoaXMgZnVuY3Rpb24sIG9yIGl0IHdpbGwgY2F1c2VcbiAgICAvLyBhIGZhbHNlIHBvc2l0aXZlLlxuICAgIHRocm93IG5ldyBFcnJvcignXl9eJyk7XG4gIH1cbiAgdHJ5IHtcbiAgICAvLyBWZXJpZnkgdGhhdCB0aGUgY29kZSBhYm92ZSBoYXMgYmVlbiBkZWFkIGNvZGUgZWxpbWluYXRlZCAoRENFJ2QpLlxuICAgIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXy5jaGVja0RDRShjaGVja0RDRSk7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIC8vIERldlRvb2xzIHNob3VsZG4ndCBjcmFzaCBSZWFjdCwgbm8gbWF0dGVyIHdoYXQuXG4gICAgLy8gV2Ugc2hvdWxkIHN0aWxsIHJlcG9ydCBpbiBjYXNlIHdlIGJyZWFrIHRoaXMgY29kZS5cbiAgICBjb25zb2xlLmVycm9yKGVycik7XG4gIH1cbn1cblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgLy8gRENFIGNoZWNrIHNob3VsZCBoYXBwZW4gYmVmb3JlIFJlYWN0RE9NIGJ1bmRsZSBleGVjdXRlcyBzbyB0aGF0XG4gIC8vIERldlRvb2xzIGNhbiByZXBvcnQgYmFkIG1pbmlmaWNhdGlvbiBkdXJpbmcgaW5qZWN0aW9uLlxuICBjaGVja0RDRSgpO1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LWRvbS5wcm9kdWN0aW9uLm1pbi5qcycpO1xufSBlbHNlIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1kb20uZGV2ZWxvcG1lbnQuanMnKTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHNvdXJjZSwgZXhjbHVkZWQpIHtcbiAgaWYgKHNvdXJjZSA9PSBudWxsKSByZXR1cm4ge307XG4gIHZhciB0YXJnZXQgPSB7fTtcbiAgdmFyIHNvdXJjZUtleXMgPSBPYmplY3Qua2V5cyhzb3VyY2UpO1xuICB2YXIga2V5LCBpO1xuXG4gIGZvciAoaSA9IDA7IGkgPCBzb3VyY2VLZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAga2V5ID0gc291cmNlS2V5c1tpXTtcbiAgICBpZiAoZXhjbHVkZWQuaW5kZXhPZihrZXkpID49IDApIGNvbnRpbnVlO1xuICAgIHRhcmdldFtrZXldID0gc291cmNlW2tleV07XG4gIH1cblxuICByZXR1cm4gdGFyZ2V0O1xufSIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9pbmhlcml0c0xvb3NlKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7XG4gIHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcy5wcm90b3R5cGUpO1xuICBzdWJDbGFzcy5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBzdWJDbGFzcztcbiAgc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzcztcbn0iLCJmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikge1xuICByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDoge1xuICAgIFwiZGVmYXVsdFwiOiBvYmpcbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0OyIsImltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzXCI7XG4vLyBGb2xsb3cgaHR0cHM6Ly9tYXRlcmlhbC5nb29nbGUuY29tL21vdGlvbi9kdXJhdGlvbi1lYXNpbmcuaHRtbCNkdXJhdGlvbi1lYXNpbmctbmF0dXJhbC1lYXNpbmctY3VydmVzXG4vLyB0byBsZWFybiB0aGUgY29udGV4dCBpbiB3aGljaCBlYWNoIGVhc2luZyBzaG91bGQgYmUgdXNlZC5cbmV4cG9ydCB2YXIgZWFzaW5nID0ge1xuICAvLyBUaGlzIGlzIHRoZSBtb3N0IGNvbW1vbiBlYXNpbmcgY3VydmUuXG4gIGVhc2VJbk91dDogJ2N1YmljLWJlemllcigwLjQsIDAsIDAuMiwgMSknLFxuICAvLyBPYmplY3RzIGVudGVyIHRoZSBzY3JlZW4gYXQgZnVsbCB2ZWxvY2l0eSBmcm9tIG9mZi1zY3JlZW4gYW5kXG4gIC8vIHNsb3dseSBkZWNlbGVyYXRlIHRvIGEgcmVzdGluZyBwb2ludC5cbiAgZWFzZU91dDogJ2N1YmljLWJlemllcigwLjAsIDAsIDAuMiwgMSknLFxuICAvLyBPYmplY3RzIGxlYXZlIHRoZSBzY3JlZW4gYXQgZnVsbCB2ZWxvY2l0eS4gVGhleSBkbyBub3QgZGVjZWxlcmF0ZSB3aGVuIG9mZi1zY3JlZW4uXG4gIGVhc2VJbjogJ2N1YmljLWJlemllcigwLjQsIDAsIDEsIDEpJyxcbiAgLy8gVGhlIHNoYXJwIGN1cnZlIGlzIHVzZWQgYnkgb2JqZWN0cyB0aGF0IG1heSByZXR1cm4gdG8gdGhlIHNjcmVlbiBhdCBhbnkgdGltZS5cbiAgc2hhcnA6ICdjdWJpYy1iZXppZXIoMC40LCAwLCAwLjYsIDEpJ1xufTsgLy8gRm9sbG93IGh0dHBzOi8vbWF0ZXJpYWwuaW8vZ3VpZGVsaW5lcy9tb3Rpb24vZHVyYXRpb24tZWFzaW5nLmh0bWwjZHVyYXRpb24tZWFzaW5nLWNvbW1vbi1kdXJhdGlvbnNcbi8vIHRvIGxlYXJuIHdoZW4gdXNlIHdoYXQgdGltaW5nXG5cbmV4cG9ydCB2YXIgZHVyYXRpb24gPSB7XG4gIHNob3J0ZXN0OiAxNTAsXG4gIHNob3J0ZXI6IDIwMCxcbiAgc2hvcnQ6IDI1MCxcbiAgLy8gbW9zdCBiYXNpYyByZWNvbW1lbmRlZCB0aW1pbmdcbiAgc3RhbmRhcmQ6IDMwMCxcbiAgLy8gdGhpcyBpcyB0byBiZSB1c2VkIGluIGNvbXBsZXggYW5pbWF0aW9uc1xuICBjb21wbGV4OiAzNzUsXG4gIC8vIHJlY29tbWVuZGVkIHdoZW4gc29tZXRoaW5nIGlzIGVudGVyaW5nIHNjcmVlblxuICBlbnRlcmluZ1NjcmVlbjogMjI1LFxuICAvLyByZWNvbW1lbmRlZCB3aGVuIHNvbWV0aGluZyBpcyBsZWF2aW5nIHNjcmVlblxuICBsZWF2aW5nU2NyZWVuOiAxOTVcbn07XG5cbmZ1bmN0aW9uIGZvcm1hdE1zKG1pbGxpc2Vjb25kcykge1xuICByZXR1cm4gXCJcIi5jb25jYXQoTWF0aC5yb3VuZChtaWxsaXNlY29uZHMpLCBcIm1zXCIpO1xufVxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ3xBcnJheX0gcHJvcHNcbiAqIEBwYXJhbSB7b2JqZWN0fSBwYXJhbVxuICogQHBhcmFtIHtzdHJpbmd9IHBhcmFtLnByb3BcbiAqIEBwYXJhbSB7bnVtYmVyfSBwYXJhbS5kdXJhdGlvblxuICogQHBhcmFtIHtzdHJpbmd9IHBhcmFtLmVhc2luZ1xuICogQHBhcmFtIHtudW1iZXJ9IHBhcmFtLmRlbGF5XG4gKi9cblxuXG5leHBvcnQgZGVmYXVsdCB7XG4gIGVhc2luZzogZWFzaW5nLFxuICBkdXJhdGlvbjogZHVyYXRpb24sXG4gIGNyZWF0ZTogZnVuY3Rpb24gY3JlYXRlKCkge1xuICAgIHZhciBwcm9wcyA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogWydhbGwnXTtcbiAgICB2YXIgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDoge307XG5cbiAgICB2YXIgX29wdGlvbnMkZHVyYXRpb24gPSBvcHRpb25zLmR1cmF0aW9uLFxuICAgICAgICBkdXJhdGlvbk9wdGlvbiA9IF9vcHRpb25zJGR1cmF0aW9uID09PSB2b2lkIDAgPyBkdXJhdGlvbi5zdGFuZGFyZCA6IF9vcHRpb25zJGR1cmF0aW9uLFxuICAgICAgICBfb3B0aW9ucyRlYXNpbmcgPSBvcHRpb25zLmVhc2luZyxcbiAgICAgICAgZWFzaW5nT3B0aW9uID0gX29wdGlvbnMkZWFzaW5nID09PSB2b2lkIDAgPyBlYXNpbmcuZWFzZUluT3V0IDogX29wdGlvbnMkZWFzaW5nLFxuICAgICAgICBfb3B0aW9ucyRkZWxheSA9IG9wdGlvbnMuZGVsYXksXG4gICAgICAgIGRlbGF5ID0gX29wdGlvbnMkZGVsYXkgPT09IHZvaWQgMCA/IDAgOiBfb3B0aW9ucyRkZWxheSxcbiAgICAgICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMob3B0aW9ucywgW1wiZHVyYXRpb25cIiwgXCJlYXNpbmdcIiwgXCJkZWxheVwiXSk7XG5cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgdmFyIGlzU3RyaW5nID0gZnVuY3Rpb24gaXNTdHJpbmcodmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZyc7XG4gICAgICB9O1xuXG4gICAgICB2YXIgaXNOdW1iZXIgPSBmdW5jdGlvbiBpc051bWJlcih2YWx1ZSkge1xuICAgICAgICByZXR1cm4gIWlzTmFOKHBhcnNlRmxvYXQodmFsdWUpKTtcbiAgICAgIH07XG5cbiAgICAgIGlmICghaXNTdHJpbmcocHJvcHMpICYmICFBcnJheS5pc0FycmF5KHByb3BzKSkge1xuICAgICAgICBjb25zb2xlLmVycm9yKCdNYXRlcmlhbC1VSTogQXJndW1lbnQgXCJwcm9wc1wiIG11c3QgYmUgYSBzdHJpbmcgb3IgQXJyYXkuJyk7XG4gICAgICB9XG5cbiAgICAgIGlmICghaXNOdW1iZXIoZHVyYXRpb25PcHRpb24pICYmICFpc1N0cmluZyhkdXJhdGlvbk9wdGlvbikpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihcIk1hdGVyaWFsLVVJOiBBcmd1bWVudCBcXFwiZHVyYXRpb25cXFwiIG11c3QgYmUgYSBudW1iZXIgb3IgYSBzdHJpbmcgYnV0IGZvdW5kIFwiLmNvbmNhdChkdXJhdGlvbk9wdGlvbiwgXCIuXCIpKTtcbiAgICAgIH1cblxuICAgICAgaWYgKCFpc1N0cmluZyhlYXNpbmdPcHRpb24pKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ01hdGVyaWFsLVVJOiBBcmd1bWVudCBcImVhc2luZ1wiIG11c3QgYmUgYSBzdHJpbmcuJyk7XG4gICAgICB9XG5cbiAgICAgIGlmICghaXNOdW1iZXIoZGVsYXkpICYmICFpc1N0cmluZyhkZWxheSkpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcignTWF0ZXJpYWwtVUk6IEFyZ3VtZW50IFwiZGVsYXlcIiBtdXN0IGJlIGEgbnVtYmVyIG9yIGEgc3RyaW5nLicpO1xuICAgICAgfVxuXG4gICAgICBpZiAoT2JqZWN0LmtleXMob3RoZXIpLmxlbmd0aCAhPT0gMCkge1xuICAgICAgICBjb25zb2xlLmVycm9yKFwiTWF0ZXJpYWwtVUk6IFVucmVjb2duaXplZCBhcmd1bWVudChzKSBbXCIuY29uY2F0KE9iamVjdC5rZXlzKG90aGVyKS5qb2luKCcsJyksIFwiXS5cIikpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiAoQXJyYXkuaXNBcnJheShwcm9wcykgPyBwcm9wcyA6IFtwcm9wc10pLm1hcChmdW5jdGlvbiAoYW5pbWF0ZWRQcm9wKSB7XG4gICAgICByZXR1cm4gXCJcIi5jb25jYXQoYW5pbWF0ZWRQcm9wLCBcIiBcIikuY29uY2F0KHR5cGVvZiBkdXJhdGlvbk9wdGlvbiA9PT0gJ3N0cmluZycgPyBkdXJhdGlvbk9wdGlvbiA6IGZvcm1hdE1zKGR1cmF0aW9uT3B0aW9uKSwgXCIgXCIpLmNvbmNhdChlYXNpbmdPcHRpb24sIFwiIFwiKS5jb25jYXQodHlwZW9mIGRlbGF5ID09PSAnc3RyaW5nJyA/IGRlbGF5IDogZm9ybWF0TXMoZGVsYXkpKTtcbiAgICB9KS5qb2luKCcsJyk7XG4gIH0sXG4gIGdldEF1dG9IZWlnaHREdXJhdGlvbjogZnVuY3Rpb24gZ2V0QXV0b0hlaWdodER1cmF0aW9uKGhlaWdodCkge1xuICAgIGlmICghaGVpZ2h0KSB7XG4gICAgICByZXR1cm4gMDtcbiAgICB9XG5cbiAgICB2YXIgY29uc3RhbnQgPSBoZWlnaHQgLyAzNjsgLy8gaHR0cHM6Ly93d3cud29sZnJhbWFscGhhLmNvbS9pbnB1dC8/aT0oNCslMkIrMTUrKisoeCslMkYrMzYrKSsqKiswLjI1KyUyQisoeCslMkYrMzYpKyUyRis1KSsqKzEwXG5cbiAgICByZXR1cm4gTWF0aC5yb3VuZCgoNCArIDE1ICogTWF0aC5wb3coY29uc3RhbnQsIDAuMjUpICsgY29uc3RhbnQgLyA1KSAqIDEwKTtcbiAgfVxufTsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBjcmVhdGVTdmdJY29uO1xuXG52YXIgX2V4dGVuZHMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9leHRlbmRzXCIpKTtcblxudmFyIF9yZWFjdCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInJlYWN0XCIpKTtcblxudmFyIF9TdmdJY29uID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQG1hdGVyaWFsLXVpL2NvcmUvU3ZnSWNvblwiKSk7XG5cbmZ1bmN0aW9uIGNyZWF0ZVN2Z0ljb24ocGF0aCwgZGlzcGxheU5hbWUpIHtcbiAgdmFyIENvbXBvbmVudCA9IF9yZWFjdC5kZWZhdWx0Lm1lbW8oX3JlYWN0LmRlZmF1bHQuZm9yd2FyZFJlZihmdW5jdGlvbiAocHJvcHMsIHJlZikge1xuICAgIHJldHVybiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9TdmdJY29uLmRlZmF1bHQsICgwLCBfZXh0ZW5kczIuZGVmYXVsdCkoe1xuICAgICAgcmVmOiByZWZcbiAgICB9LCBwcm9wcyksIHBhdGgpO1xuICB9KSk7XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBDb21wb25lbnQuZGlzcGxheU5hbWUgPSBcIlwiLmNvbmNhdChkaXNwbGF5TmFtZSwgXCJJY29uXCIpO1xuICB9XG5cbiAgQ29tcG9uZW50Lm11aU5hbWUgPSBfU3ZnSWNvbi5kZWZhdWx0Lm11aU5hbWU7XG4gIHJldHVybiBDb21wb25lbnQ7XG59IiwiaW1wb3J0IGFycmF5V2l0aEhvbGVzIGZyb20gXCIuL2FycmF5V2l0aEhvbGVzXCI7XG5pbXBvcnQgaXRlcmFibGVUb0FycmF5TGltaXQgZnJvbSBcIi4vaXRlcmFibGVUb0FycmF5TGltaXRcIjtcbmltcG9ydCB1bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheSBmcm9tIFwiLi91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheVwiO1xuaW1wb3J0IG5vbkl0ZXJhYmxlUmVzdCBmcm9tIFwiLi9ub25JdGVyYWJsZVJlc3RcIjtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9zbGljZWRUb0FycmF5KGFyciwgaSkge1xuICByZXR1cm4gYXJyYXlXaXRoSG9sZXMoYXJyKSB8fCBpdGVyYWJsZVRvQXJyYXlMaW1pdChhcnIsIGkpIHx8IHVuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5KGFyciwgaSkgfHwgbm9uSXRlcmFibGVSZXN0KCk7XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX2l0ZXJhYmxlVG9BcnJheUxpbWl0KGFyciwgaSkge1xuICBpZiAodHlwZW9mIFN5bWJvbCA9PT0gXCJ1bmRlZmluZWRcIiB8fCAhKFN5bWJvbC5pdGVyYXRvciBpbiBPYmplY3QoYXJyKSkpIHJldHVybjtcbiAgdmFyIF9hcnIgPSBbXTtcbiAgdmFyIF9uID0gdHJ1ZTtcbiAgdmFyIF9kID0gZmFsc2U7XG4gIHZhciBfZSA9IHVuZGVmaW5lZDtcblxuICB0cnkge1xuICAgIGZvciAodmFyIF9pID0gYXJyW1N5bWJvbC5pdGVyYXRvcl0oKSwgX3M7ICEoX24gPSAoX3MgPSBfaS5uZXh0KCkpLmRvbmUpOyBfbiA9IHRydWUpIHtcbiAgICAgIF9hcnIucHVzaChfcy52YWx1ZSk7XG5cbiAgICAgIGlmIChpICYmIF9hcnIubGVuZ3RoID09PSBpKSBicmVhaztcbiAgICB9XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIF9kID0gdHJ1ZTtcbiAgICBfZSA9IGVycjtcbiAgfSBmaW5hbGx5IHtcbiAgICB0cnkge1xuICAgICAgaWYgKCFfbiAmJiBfaVtcInJldHVyblwiXSAhPSBudWxsKSBfaVtcInJldHVyblwiXSgpO1xuICAgIH0gZmluYWxseSB7XG4gICAgICBpZiAoX2QpIHRocm93IF9lO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBfYXJyO1xufSIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oKSB7XG5cdHRocm93IG5ldyBFcnJvcihcImRlZmluZSBjYW5ub3QgYmUgdXNlZCBpbmRpcmVjdFwiKTtcbn07XG4iLCJpbXBvcnQgJCRvYnNlcnZhYmxlIGZyb20gJ3N5bWJvbC1vYnNlcnZhYmxlJztcblxuLyoqXG4gKiBUaGVzZSBhcmUgcHJpdmF0ZSBhY3Rpb24gdHlwZXMgcmVzZXJ2ZWQgYnkgUmVkdXguXG4gKiBGb3IgYW55IHVua25vd24gYWN0aW9ucywgeW91IG11c3QgcmV0dXJuIHRoZSBjdXJyZW50IHN0YXRlLlxuICogSWYgdGhlIGN1cnJlbnQgc3RhdGUgaXMgdW5kZWZpbmVkLCB5b3UgbXVzdCByZXR1cm4gdGhlIGluaXRpYWwgc3RhdGUuXG4gKiBEbyBub3QgcmVmZXJlbmNlIHRoZXNlIGFjdGlvbiB0eXBlcyBkaXJlY3RseSBpbiB5b3VyIGNvZGUuXG4gKi9cbnZhciByYW5kb21TdHJpbmcgPSBmdW5jdGlvbiByYW5kb21TdHJpbmcoKSB7XG4gIHJldHVybiBNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zdWJzdHJpbmcoNykuc3BsaXQoJycpLmpvaW4oJy4nKTtcbn07XG5cbnZhciBBY3Rpb25UeXBlcyA9IHtcbiAgSU5JVDogXCJAQHJlZHV4L0lOSVRcIiArIHJhbmRvbVN0cmluZygpLFxuICBSRVBMQUNFOiBcIkBAcmVkdXgvUkVQTEFDRVwiICsgcmFuZG9tU3RyaW5nKCksXG4gIFBST0JFX1VOS05PV05fQUNUSU9OOiBmdW5jdGlvbiBQUk9CRV9VTktOT1dOX0FDVElPTigpIHtcbiAgICByZXR1cm4gXCJAQHJlZHV4L1BST0JFX1VOS05PV05fQUNUSU9OXCIgKyByYW5kb21TdHJpbmcoKTtcbiAgfVxufTtcblxuLyoqXG4gKiBAcGFyYW0ge2FueX0gb2JqIFRoZSBvYmplY3QgdG8gaW5zcGVjdC5cbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHRoZSBhcmd1bWVudCBhcHBlYXJzIHRvIGJlIGEgcGxhaW4gb2JqZWN0LlxuICovXG5mdW5jdGlvbiBpc1BsYWluT2JqZWN0KG9iaikge1xuICBpZiAodHlwZW9mIG9iaiAhPT0gJ29iamVjdCcgfHwgb2JqID09PSBudWxsKSByZXR1cm4gZmFsc2U7XG4gIHZhciBwcm90byA9IG9iajtcblxuICB3aGlsZSAoT2JqZWN0LmdldFByb3RvdHlwZU9mKHByb3RvKSAhPT0gbnVsbCkge1xuICAgIHByb3RvID0gT2JqZWN0LmdldFByb3RvdHlwZU9mKHByb3RvKTtcbiAgfVxuXG4gIHJldHVybiBPYmplY3QuZ2V0UHJvdG90eXBlT2Yob2JqKSA9PT0gcHJvdG87XG59XG5cbi8qKlxuICogQ3JlYXRlcyBhIFJlZHV4IHN0b3JlIHRoYXQgaG9sZHMgdGhlIHN0YXRlIHRyZWUuXG4gKiBUaGUgb25seSB3YXkgdG8gY2hhbmdlIHRoZSBkYXRhIGluIHRoZSBzdG9yZSBpcyB0byBjYWxsIGBkaXNwYXRjaCgpYCBvbiBpdC5cbiAqXG4gKiBUaGVyZSBzaG91bGQgb25seSBiZSBhIHNpbmdsZSBzdG9yZSBpbiB5b3VyIGFwcC4gVG8gc3BlY2lmeSBob3cgZGlmZmVyZW50XG4gKiBwYXJ0cyBvZiB0aGUgc3RhdGUgdHJlZSByZXNwb25kIHRvIGFjdGlvbnMsIHlvdSBtYXkgY29tYmluZSBzZXZlcmFsIHJlZHVjZXJzXG4gKiBpbnRvIGEgc2luZ2xlIHJlZHVjZXIgZnVuY3Rpb24gYnkgdXNpbmcgYGNvbWJpbmVSZWR1Y2Vyc2AuXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gcmVkdWNlciBBIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyB0aGUgbmV4dCBzdGF0ZSB0cmVlLCBnaXZlblxuICogdGhlIGN1cnJlbnQgc3RhdGUgdHJlZSBhbmQgdGhlIGFjdGlvbiB0byBoYW5kbGUuXG4gKlxuICogQHBhcmFtIHthbnl9IFtwcmVsb2FkZWRTdGF0ZV0gVGhlIGluaXRpYWwgc3RhdGUuIFlvdSBtYXkgb3B0aW9uYWxseSBzcGVjaWZ5IGl0XG4gKiB0byBoeWRyYXRlIHRoZSBzdGF0ZSBmcm9tIHRoZSBzZXJ2ZXIgaW4gdW5pdmVyc2FsIGFwcHMsIG9yIHRvIHJlc3RvcmUgYVxuICogcHJldmlvdXNseSBzZXJpYWxpemVkIHVzZXIgc2Vzc2lvbi5cbiAqIElmIHlvdSB1c2UgYGNvbWJpbmVSZWR1Y2Vyc2AgdG8gcHJvZHVjZSB0aGUgcm9vdCByZWR1Y2VyIGZ1bmN0aW9uLCB0aGlzIG11c3QgYmVcbiAqIGFuIG9iamVjdCB3aXRoIHRoZSBzYW1lIHNoYXBlIGFzIGBjb21iaW5lUmVkdWNlcnNgIGtleXMuXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gW2VuaGFuY2VyXSBUaGUgc3RvcmUgZW5oYW5jZXIuIFlvdSBtYXkgb3B0aW9uYWxseSBzcGVjaWZ5IGl0XG4gKiB0byBlbmhhbmNlIHRoZSBzdG9yZSB3aXRoIHRoaXJkLXBhcnR5IGNhcGFiaWxpdGllcyBzdWNoIGFzIG1pZGRsZXdhcmUsXG4gKiB0aW1lIHRyYXZlbCwgcGVyc2lzdGVuY2UsIGV0Yy4gVGhlIG9ubHkgc3RvcmUgZW5oYW5jZXIgdGhhdCBzaGlwcyB3aXRoIFJlZHV4XG4gKiBpcyBgYXBwbHlNaWRkbGV3YXJlKClgLlxuICpcbiAqIEByZXR1cm5zIHtTdG9yZX0gQSBSZWR1eCBzdG9yZSB0aGF0IGxldHMgeW91IHJlYWQgdGhlIHN0YXRlLCBkaXNwYXRjaCBhY3Rpb25zXG4gKiBhbmQgc3Vic2NyaWJlIHRvIGNoYW5nZXMuXG4gKi9cblxuZnVuY3Rpb24gY3JlYXRlU3RvcmUocmVkdWNlciwgcHJlbG9hZGVkU3RhdGUsIGVuaGFuY2VyKSB7XG4gIHZhciBfcmVmMjtcblxuICBpZiAodHlwZW9mIHByZWxvYWRlZFN0YXRlID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBlbmhhbmNlciA9PT0gJ2Z1bmN0aW9uJyB8fCB0eXBlb2YgZW5oYW5jZXIgPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIGFyZ3VtZW50c1szXSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHRocm93IG5ldyBFcnJvcignSXQgbG9va3MgbGlrZSB5b3UgYXJlIHBhc3Npbmcgc2V2ZXJhbCBzdG9yZSBlbmhhbmNlcnMgdG8gJyArICdjcmVhdGVTdG9yZSgpLiBUaGlzIGlzIG5vdCBzdXBwb3J0ZWQuIEluc3RlYWQsIGNvbXBvc2UgdGhlbSAnICsgJ3RvZ2V0aGVyIHRvIGEgc2luZ2xlIGZ1bmN0aW9uLicpO1xuICB9XG5cbiAgaWYgKHR5cGVvZiBwcmVsb2FkZWRTdGF0ZSA9PT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2YgZW5oYW5jZXIgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgZW5oYW5jZXIgPSBwcmVsb2FkZWRTdGF0ZTtcbiAgICBwcmVsb2FkZWRTdGF0ZSA9IHVuZGVmaW5lZDtcbiAgfVxuXG4gIGlmICh0eXBlb2YgZW5oYW5jZXIgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgaWYgKHR5cGVvZiBlbmhhbmNlciAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdFeHBlY3RlZCB0aGUgZW5oYW5jZXIgdG8gYmUgYSBmdW5jdGlvbi4nKTtcbiAgICB9XG5cbiAgICByZXR1cm4gZW5oYW5jZXIoY3JlYXRlU3RvcmUpKHJlZHVjZXIsIHByZWxvYWRlZFN0YXRlKTtcbiAgfVxuXG4gIGlmICh0eXBlb2YgcmVkdWNlciAhPT0gJ2Z1bmN0aW9uJykge1xuICAgIHRocm93IG5ldyBFcnJvcignRXhwZWN0ZWQgdGhlIHJlZHVjZXIgdG8gYmUgYSBmdW5jdGlvbi4nKTtcbiAgfVxuXG4gIHZhciBjdXJyZW50UmVkdWNlciA9IHJlZHVjZXI7XG4gIHZhciBjdXJyZW50U3RhdGUgPSBwcmVsb2FkZWRTdGF0ZTtcbiAgdmFyIGN1cnJlbnRMaXN0ZW5lcnMgPSBbXTtcbiAgdmFyIG5leHRMaXN0ZW5lcnMgPSBjdXJyZW50TGlzdGVuZXJzO1xuICB2YXIgaXNEaXNwYXRjaGluZyA9IGZhbHNlO1xuICAvKipcbiAgICogVGhpcyBtYWtlcyBhIHNoYWxsb3cgY29weSBvZiBjdXJyZW50TGlzdGVuZXJzIHNvIHdlIGNhbiB1c2VcbiAgICogbmV4dExpc3RlbmVycyBhcyBhIHRlbXBvcmFyeSBsaXN0IHdoaWxlIGRpc3BhdGNoaW5nLlxuICAgKlxuICAgKiBUaGlzIHByZXZlbnRzIGFueSBidWdzIGFyb3VuZCBjb25zdW1lcnMgY2FsbGluZ1xuICAgKiBzdWJzY3JpYmUvdW5zdWJzY3JpYmUgaW4gdGhlIG1pZGRsZSBvZiBhIGRpc3BhdGNoLlxuICAgKi9cblxuICBmdW5jdGlvbiBlbnN1cmVDYW5NdXRhdGVOZXh0TGlzdGVuZXJzKCkge1xuICAgIGlmIChuZXh0TGlzdGVuZXJzID09PSBjdXJyZW50TGlzdGVuZXJzKSB7XG4gICAgICBuZXh0TGlzdGVuZXJzID0gY3VycmVudExpc3RlbmVycy5zbGljZSgpO1xuICAgIH1cbiAgfVxuICAvKipcbiAgICogUmVhZHMgdGhlIHN0YXRlIHRyZWUgbWFuYWdlZCBieSB0aGUgc3RvcmUuXG4gICAqXG4gICAqIEByZXR1cm5zIHthbnl9IFRoZSBjdXJyZW50IHN0YXRlIHRyZWUgb2YgeW91ciBhcHBsaWNhdGlvbi5cbiAgICovXG5cblxuICBmdW5jdGlvbiBnZXRTdGF0ZSgpIHtcbiAgICBpZiAoaXNEaXNwYXRjaGluZykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdZb3UgbWF5IG5vdCBjYWxsIHN0b3JlLmdldFN0YXRlKCkgd2hpbGUgdGhlIHJlZHVjZXIgaXMgZXhlY3V0aW5nLiAnICsgJ1RoZSByZWR1Y2VyIGhhcyBhbHJlYWR5IHJlY2VpdmVkIHRoZSBzdGF0ZSBhcyBhbiBhcmd1bWVudC4gJyArICdQYXNzIGl0IGRvd24gZnJvbSB0aGUgdG9wIHJlZHVjZXIgaW5zdGVhZCBvZiByZWFkaW5nIGl0IGZyb20gdGhlIHN0b3JlLicpO1xuICAgIH1cblxuICAgIHJldHVybiBjdXJyZW50U3RhdGU7XG4gIH1cbiAgLyoqXG4gICAqIEFkZHMgYSBjaGFuZ2UgbGlzdGVuZXIuIEl0IHdpbGwgYmUgY2FsbGVkIGFueSB0aW1lIGFuIGFjdGlvbiBpcyBkaXNwYXRjaGVkLFxuICAgKiBhbmQgc29tZSBwYXJ0IG9mIHRoZSBzdGF0ZSB0cmVlIG1heSBwb3RlbnRpYWxseSBoYXZlIGNoYW5nZWQuIFlvdSBtYXkgdGhlblxuICAgKiBjYWxsIGBnZXRTdGF0ZSgpYCB0byByZWFkIHRoZSBjdXJyZW50IHN0YXRlIHRyZWUgaW5zaWRlIHRoZSBjYWxsYmFjay5cbiAgICpcbiAgICogWW91IG1heSBjYWxsIGBkaXNwYXRjaCgpYCBmcm9tIGEgY2hhbmdlIGxpc3RlbmVyLCB3aXRoIHRoZSBmb2xsb3dpbmdcbiAgICogY2F2ZWF0czpcbiAgICpcbiAgICogMS4gVGhlIHN1YnNjcmlwdGlvbnMgYXJlIHNuYXBzaG90dGVkIGp1c3QgYmVmb3JlIGV2ZXJ5IGBkaXNwYXRjaCgpYCBjYWxsLlxuICAgKiBJZiB5b3Ugc3Vic2NyaWJlIG9yIHVuc3Vic2NyaWJlIHdoaWxlIHRoZSBsaXN0ZW5lcnMgYXJlIGJlaW5nIGludm9rZWQsIHRoaXNcbiAgICogd2lsbCBub3QgaGF2ZSBhbnkgZWZmZWN0IG9uIHRoZSBgZGlzcGF0Y2goKWAgdGhhdCBpcyBjdXJyZW50bHkgaW4gcHJvZ3Jlc3MuXG4gICAqIEhvd2V2ZXIsIHRoZSBuZXh0IGBkaXNwYXRjaCgpYCBjYWxsLCB3aGV0aGVyIG5lc3RlZCBvciBub3QsIHdpbGwgdXNlIGEgbW9yZVxuICAgKiByZWNlbnQgc25hcHNob3Qgb2YgdGhlIHN1YnNjcmlwdGlvbiBsaXN0LlxuICAgKlxuICAgKiAyLiBUaGUgbGlzdGVuZXIgc2hvdWxkIG5vdCBleHBlY3QgdG8gc2VlIGFsbCBzdGF0ZSBjaGFuZ2VzLCBhcyB0aGUgc3RhdGVcbiAgICogbWlnaHQgaGF2ZSBiZWVuIHVwZGF0ZWQgbXVsdGlwbGUgdGltZXMgZHVyaW5nIGEgbmVzdGVkIGBkaXNwYXRjaCgpYCBiZWZvcmVcbiAgICogdGhlIGxpc3RlbmVyIGlzIGNhbGxlZC4gSXQgaXMsIGhvd2V2ZXIsIGd1YXJhbnRlZWQgdGhhdCBhbGwgc3Vic2NyaWJlcnNcbiAgICogcmVnaXN0ZXJlZCBiZWZvcmUgdGhlIGBkaXNwYXRjaCgpYCBzdGFydGVkIHdpbGwgYmUgY2FsbGVkIHdpdGggdGhlIGxhdGVzdFxuICAgKiBzdGF0ZSBieSB0aGUgdGltZSBpdCBleGl0cy5cbiAgICpcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gbGlzdGVuZXIgQSBjYWxsYmFjayB0byBiZSBpbnZva2VkIG9uIGV2ZXJ5IGRpc3BhdGNoLlxuICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IEEgZnVuY3Rpb24gdG8gcmVtb3ZlIHRoaXMgY2hhbmdlIGxpc3RlbmVyLlxuICAgKi9cblxuXG4gIGZ1bmN0aW9uIHN1YnNjcmliZShsaXN0ZW5lcikge1xuICAgIGlmICh0eXBlb2YgbGlzdGVuZXIgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignRXhwZWN0ZWQgdGhlIGxpc3RlbmVyIHRvIGJlIGEgZnVuY3Rpb24uJyk7XG4gICAgfVxuXG4gICAgaWYgKGlzRGlzcGF0Y2hpbmcpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignWW91IG1heSBub3QgY2FsbCBzdG9yZS5zdWJzY3JpYmUoKSB3aGlsZSB0aGUgcmVkdWNlciBpcyBleGVjdXRpbmcuICcgKyAnSWYgeW91IHdvdWxkIGxpa2UgdG8gYmUgbm90aWZpZWQgYWZ0ZXIgdGhlIHN0b3JlIGhhcyBiZWVuIHVwZGF0ZWQsIHN1YnNjcmliZSBmcm9tIGEgJyArICdjb21wb25lbnQgYW5kIGludm9rZSBzdG9yZS5nZXRTdGF0ZSgpIGluIHRoZSBjYWxsYmFjayB0byBhY2Nlc3MgdGhlIGxhdGVzdCBzdGF0ZS4gJyArICdTZWUgaHR0cHM6Ly9yZWR1eC5qcy5vcmcvYXBpLXJlZmVyZW5jZS9zdG9yZSNzdWJzY3JpYmVsaXN0ZW5lciBmb3IgbW9yZSBkZXRhaWxzLicpO1xuICAgIH1cblxuICAgIHZhciBpc1N1YnNjcmliZWQgPSB0cnVlO1xuICAgIGVuc3VyZUNhbk11dGF0ZU5leHRMaXN0ZW5lcnMoKTtcbiAgICBuZXh0TGlzdGVuZXJzLnB1c2gobGlzdGVuZXIpO1xuICAgIHJldHVybiBmdW5jdGlvbiB1bnN1YnNjcmliZSgpIHtcbiAgICAgIGlmICghaXNTdWJzY3JpYmVkKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKGlzRGlzcGF0Y2hpbmcpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdZb3UgbWF5IG5vdCB1bnN1YnNjcmliZSBmcm9tIGEgc3RvcmUgbGlzdGVuZXIgd2hpbGUgdGhlIHJlZHVjZXIgaXMgZXhlY3V0aW5nLiAnICsgJ1NlZSBodHRwczovL3JlZHV4LmpzLm9yZy9hcGktcmVmZXJlbmNlL3N0b3JlI3N1YnNjcmliZWxpc3RlbmVyIGZvciBtb3JlIGRldGFpbHMuJyk7XG4gICAgICB9XG5cbiAgICAgIGlzU3Vic2NyaWJlZCA9IGZhbHNlO1xuICAgICAgZW5zdXJlQ2FuTXV0YXRlTmV4dExpc3RlbmVycygpO1xuICAgICAgdmFyIGluZGV4ID0gbmV4dExpc3RlbmVycy5pbmRleE9mKGxpc3RlbmVyKTtcbiAgICAgIG5leHRMaXN0ZW5lcnMuc3BsaWNlKGluZGV4LCAxKTtcbiAgICAgIGN1cnJlbnRMaXN0ZW5lcnMgPSBudWxsO1xuICAgIH07XG4gIH1cbiAgLyoqXG4gICAqIERpc3BhdGNoZXMgYW4gYWN0aW9uLiBJdCBpcyB0aGUgb25seSB3YXkgdG8gdHJpZ2dlciBhIHN0YXRlIGNoYW5nZS5cbiAgICpcbiAgICogVGhlIGByZWR1Y2VyYCBmdW5jdGlvbiwgdXNlZCB0byBjcmVhdGUgdGhlIHN0b3JlLCB3aWxsIGJlIGNhbGxlZCB3aXRoIHRoZVxuICAgKiBjdXJyZW50IHN0YXRlIHRyZWUgYW5kIHRoZSBnaXZlbiBgYWN0aW9uYC4gSXRzIHJldHVybiB2YWx1ZSB3aWxsXG4gICAqIGJlIGNvbnNpZGVyZWQgdGhlICoqbmV4dCoqIHN0YXRlIG9mIHRoZSB0cmVlLCBhbmQgdGhlIGNoYW5nZSBsaXN0ZW5lcnNcbiAgICogd2lsbCBiZSBub3RpZmllZC5cbiAgICpcbiAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb25seSBzdXBwb3J0cyBwbGFpbiBvYmplY3QgYWN0aW9ucy4gSWYgeW91IHdhbnQgdG9cbiAgICogZGlzcGF0Y2ggYSBQcm9taXNlLCBhbiBPYnNlcnZhYmxlLCBhIHRodW5rLCBvciBzb21ldGhpbmcgZWxzZSwgeW91IG5lZWQgdG9cbiAgICogd3JhcCB5b3VyIHN0b3JlIGNyZWF0aW5nIGZ1bmN0aW9uIGludG8gdGhlIGNvcnJlc3BvbmRpbmcgbWlkZGxld2FyZS4gRm9yXG4gICAqIGV4YW1wbGUsIHNlZSB0aGUgZG9jdW1lbnRhdGlvbiBmb3IgdGhlIGByZWR1eC10aHVua2AgcGFja2FnZS4gRXZlbiB0aGVcbiAgICogbWlkZGxld2FyZSB3aWxsIGV2ZW50dWFsbHkgZGlzcGF0Y2ggcGxhaW4gb2JqZWN0IGFjdGlvbnMgdXNpbmcgdGhpcyBtZXRob2QuXG4gICAqXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBhY3Rpb24gQSBwbGFpbiBvYmplY3QgcmVwcmVzZW50aW5nIOKAnHdoYXQgY2hhbmdlZOKAnS4gSXQgaXNcbiAgICogYSBnb29kIGlkZWEgdG8ga2VlcCBhY3Rpb25zIHNlcmlhbGl6YWJsZSBzbyB5b3UgY2FuIHJlY29yZCBhbmQgcmVwbGF5IHVzZXJcbiAgICogc2Vzc2lvbnMsIG9yIHVzZSB0aGUgdGltZSB0cmF2ZWxsaW5nIGByZWR1eC1kZXZ0b29sc2AuIEFuIGFjdGlvbiBtdXN0IGhhdmVcbiAgICogYSBgdHlwZWAgcHJvcGVydHkgd2hpY2ggbWF5IG5vdCBiZSBgdW5kZWZpbmVkYC4gSXQgaXMgYSBnb29kIGlkZWEgdG8gdXNlXG4gICAqIHN0cmluZyBjb25zdGFudHMgZm9yIGFjdGlvbiB0eXBlcy5cbiAgICpcbiAgICogQHJldHVybnMge09iamVjdH0gRm9yIGNvbnZlbmllbmNlLCB0aGUgc2FtZSBhY3Rpb24gb2JqZWN0IHlvdSBkaXNwYXRjaGVkLlxuICAgKlxuICAgKiBOb3RlIHRoYXQsIGlmIHlvdSB1c2UgYSBjdXN0b20gbWlkZGxld2FyZSwgaXQgbWF5IHdyYXAgYGRpc3BhdGNoKClgIHRvXG4gICAqIHJldHVybiBzb21ldGhpbmcgZWxzZSAoZm9yIGV4YW1wbGUsIGEgUHJvbWlzZSB5b3UgY2FuIGF3YWl0KS5cbiAgICovXG5cblxuICBmdW5jdGlvbiBkaXNwYXRjaChhY3Rpb24pIHtcbiAgICBpZiAoIWlzUGxhaW5PYmplY3QoYWN0aW9uKSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdBY3Rpb25zIG11c3QgYmUgcGxhaW4gb2JqZWN0cy4gJyArICdVc2UgY3VzdG9tIG1pZGRsZXdhcmUgZm9yIGFzeW5jIGFjdGlvbnMuJyk7XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBhY3Rpb24udHlwZSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignQWN0aW9ucyBtYXkgbm90IGhhdmUgYW4gdW5kZWZpbmVkIFwidHlwZVwiIHByb3BlcnR5LiAnICsgJ0hhdmUgeW91IG1pc3NwZWxsZWQgYSBjb25zdGFudD8nKTtcbiAgICB9XG5cbiAgICBpZiAoaXNEaXNwYXRjaGluZykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdSZWR1Y2VycyBtYXkgbm90IGRpc3BhdGNoIGFjdGlvbnMuJyk7XG4gICAgfVxuXG4gICAgdHJ5IHtcbiAgICAgIGlzRGlzcGF0Y2hpbmcgPSB0cnVlO1xuICAgICAgY3VycmVudFN0YXRlID0gY3VycmVudFJlZHVjZXIoY3VycmVudFN0YXRlLCBhY3Rpb24pO1xuICAgIH0gZmluYWxseSB7XG4gICAgICBpc0Rpc3BhdGNoaW5nID0gZmFsc2U7XG4gICAgfVxuXG4gICAgdmFyIGxpc3RlbmVycyA9IGN1cnJlbnRMaXN0ZW5lcnMgPSBuZXh0TGlzdGVuZXJzO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaXN0ZW5lcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBsaXN0ZW5lciA9IGxpc3RlbmVyc1tpXTtcbiAgICAgIGxpc3RlbmVyKCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGFjdGlvbjtcbiAgfVxuICAvKipcbiAgICogUmVwbGFjZXMgdGhlIHJlZHVjZXIgY3VycmVudGx5IHVzZWQgYnkgdGhlIHN0b3JlIHRvIGNhbGN1bGF0ZSB0aGUgc3RhdGUuXG4gICAqXG4gICAqIFlvdSBtaWdodCBuZWVkIHRoaXMgaWYgeW91ciBhcHAgaW1wbGVtZW50cyBjb2RlIHNwbGl0dGluZyBhbmQgeW91IHdhbnQgdG9cbiAgICogbG9hZCBzb21lIG9mIHRoZSByZWR1Y2VycyBkeW5hbWljYWxseS4gWW91IG1pZ2h0IGFsc28gbmVlZCB0aGlzIGlmIHlvdVxuICAgKiBpbXBsZW1lbnQgYSBob3QgcmVsb2FkaW5nIG1lY2hhbmlzbSBmb3IgUmVkdXguXG4gICAqXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IG5leHRSZWR1Y2VyIFRoZSByZWR1Y2VyIGZvciB0aGUgc3RvcmUgdG8gdXNlIGluc3RlYWQuXG4gICAqIEByZXR1cm5zIHt2b2lkfVxuICAgKi9cblxuXG4gIGZ1bmN0aW9uIHJlcGxhY2VSZWR1Y2VyKG5leHRSZWR1Y2VyKSB7XG4gICAgaWYgKHR5cGVvZiBuZXh0UmVkdWNlciAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdFeHBlY3RlZCB0aGUgbmV4dFJlZHVjZXIgdG8gYmUgYSBmdW5jdGlvbi4nKTtcbiAgICB9XG5cbiAgICBjdXJyZW50UmVkdWNlciA9IG5leHRSZWR1Y2VyOyAvLyBUaGlzIGFjdGlvbiBoYXMgYSBzaW1pbGlhciBlZmZlY3QgdG8gQWN0aW9uVHlwZXMuSU5JVC5cbiAgICAvLyBBbnkgcmVkdWNlcnMgdGhhdCBleGlzdGVkIGluIGJvdGggdGhlIG5ldyBhbmQgb2xkIHJvb3RSZWR1Y2VyXG4gICAgLy8gd2lsbCByZWNlaXZlIHRoZSBwcmV2aW91cyBzdGF0ZS4gVGhpcyBlZmZlY3RpdmVseSBwb3B1bGF0ZXNcbiAgICAvLyB0aGUgbmV3IHN0YXRlIHRyZWUgd2l0aCBhbnkgcmVsZXZhbnQgZGF0YSBmcm9tIHRoZSBvbGQgb25lLlxuXG4gICAgZGlzcGF0Y2goe1xuICAgICAgdHlwZTogQWN0aW9uVHlwZXMuUkVQTEFDRVxuICAgIH0pO1xuICB9XG4gIC8qKlxuICAgKiBJbnRlcm9wZXJhYmlsaXR5IHBvaW50IGZvciBvYnNlcnZhYmxlL3JlYWN0aXZlIGxpYnJhcmllcy5cbiAgICogQHJldHVybnMge29ic2VydmFibGV9IEEgbWluaW1hbCBvYnNlcnZhYmxlIG9mIHN0YXRlIGNoYW5nZXMuXG4gICAqIEZvciBtb3JlIGluZm9ybWF0aW9uLCBzZWUgdGhlIG9ic2VydmFibGUgcHJvcG9zYWw6XG4gICAqIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLW9ic2VydmFibGVcbiAgICovXG5cblxuICBmdW5jdGlvbiBvYnNlcnZhYmxlKCkge1xuICAgIHZhciBfcmVmO1xuXG4gICAgdmFyIG91dGVyU3Vic2NyaWJlID0gc3Vic2NyaWJlO1xuICAgIHJldHVybiBfcmVmID0ge1xuICAgICAgLyoqXG4gICAgICAgKiBUaGUgbWluaW1hbCBvYnNlcnZhYmxlIHN1YnNjcmlwdGlvbiBtZXRob2QuXG4gICAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JzZXJ2ZXIgQW55IG9iamVjdCB0aGF0IGNhbiBiZSB1c2VkIGFzIGFuIG9ic2VydmVyLlxuICAgICAgICogVGhlIG9ic2VydmVyIG9iamVjdCBzaG91bGQgaGF2ZSBhIGBuZXh0YCBtZXRob2QuXG4gICAgICAgKiBAcmV0dXJucyB7c3Vic2NyaXB0aW9ufSBBbiBvYmplY3Qgd2l0aCBhbiBgdW5zdWJzY3JpYmVgIG1ldGhvZCB0aGF0IGNhblxuICAgICAgICogYmUgdXNlZCB0byB1bnN1YnNjcmliZSB0aGUgb2JzZXJ2YWJsZSBmcm9tIHRoZSBzdG9yZSwgYW5kIHByZXZlbnQgZnVydGhlclxuICAgICAgICogZW1pc3Npb24gb2YgdmFsdWVzIGZyb20gdGhlIG9ic2VydmFibGUuXG4gICAgICAgKi9cbiAgICAgIHN1YnNjcmliZTogZnVuY3Rpb24gc3Vic2NyaWJlKG9ic2VydmVyKSB7XG4gICAgICAgIGlmICh0eXBlb2Ygb2JzZXJ2ZXIgIT09ICdvYmplY3QnIHx8IG9ic2VydmVyID09PSBudWxsKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignRXhwZWN0ZWQgdGhlIG9ic2VydmVyIHRvIGJlIGFuIG9iamVjdC4nKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIG9ic2VydmVTdGF0ZSgpIHtcbiAgICAgICAgICBpZiAob2JzZXJ2ZXIubmV4dCkge1xuICAgICAgICAgICAgb2JzZXJ2ZXIubmV4dChnZXRTdGF0ZSgpKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBvYnNlcnZlU3RhdGUoKTtcbiAgICAgICAgdmFyIHVuc3Vic2NyaWJlID0gb3V0ZXJTdWJzY3JpYmUob2JzZXJ2ZVN0YXRlKTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICB1bnN1YnNjcmliZTogdW5zdWJzY3JpYmVcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICB9LCBfcmVmWyQkb2JzZXJ2YWJsZV0gPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9LCBfcmVmO1xuICB9IC8vIFdoZW4gYSBzdG9yZSBpcyBjcmVhdGVkLCBhbiBcIklOSVRcIiBhY3Rpb24gaXMgZGlzcGF0Y2hlZCBzbyB0aGF0IGV2ZXJ5XG4gIC8vIHJlZHVjZXIgcmV0dXJucyB0aGVpciBpbml0aWFsIHN0YXRlLiBUaGlzIGVmZmVjdGl2ZWx5IHBvcHVsYXRlc1xuICAvLyB0aGUgaW5pdGlhbCBzdGF0ZSB0cmVlLlxuXG5cbiAgZGlzcGF0Y2goe1xuICAgIHR5cGU6IEFjdGlvblR5cGVzLklOSVRcbiAgfSk7XG4gIHJldHVybiBfcmVmMiA9IHtcbiAgICBkaXNwYXRjaDogZGlzcGF0Y2gsXG4gICAgc3Vic2NyaWJlOiBzdWJzY3JpYmUsXG4gICAgZ2V0U3RhdGU6IGdldFN0YXRlLFxuICAgIHJlcGxhY2VSZWR1Y2VyOiByZXBsYWNlUmVkdWNlclxuICB9LCBfcmVmMlskJG9ic2VydmFibGVdID0gb2JzZXJ2YWJsZSwgX3JlZjI7XG59XG5cbi8qKlxuICogUHJpbnRzIGEgd2FybmluZyBpbiB0aGUgY29uc29sZSBpZiBpdCBleGlzdHMuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IG1lc3NhZ2UgVGhlIHdhcm5pbmcgbWVzc2FnZS5cbiAqIEByZXR1cm5zIHt2b2lkfVxuICovXG5mdW5jdGlvbiB3YXJuaW5nKG1lc3NhZ2UpIHtcbiAgLyogZXNsaW50LWRpc2FibGUgbm8tY29uc29sZSAqL1xuICBpZiAodHlwZW9mIGNvbnNvbGUgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBjb25zb2xlLmVycm9yID09PSAnZnVuY3Rpb24nKSB7XG4gICAgY29uc29sZS5lcnJvcihtZXNzYWdlKTtcbiAgfVxuICAvKiBlc2xpbnQtZW5hYmxlIG5vLWNvbnNvbGUgKi9cblxuXG4gIHRyeSB7XG4gICAgLy8gVGhpcyBlcnJvciB3YXMgdGhyb3duIGFzIGEgY29udmVuaWVuY2Ugc28gdGhhdCBpZiB5b3UgZW5hYmxlXG4gICAgLy8gXCJicmVhayBvbiBhbGwgZXhjZXB0aW9uc1wiIGluIHlvdXIgY29uc29sZSxcbiAgICAvLyBpdCB3b3VsZCBwYXVzZSB0aGUgZXhlY3V0aW9uIGF0IHRoaXMgbGluZS5cbiAgICB0aHJvdyBuZXcgRXJyb3IobWVzc2FnZSk7XG4gIH0gY2F0Y2ggKGUpIHt9IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tZW1wdHlcblxufVxuXG5mdW5jdGlvbiBnZXRVbmRlZmluZWRTdGF0ZUVycm9yTWVzc2FnZShrZXksIGFjdGlvbikge1xuICB2YXIgYWN0aW9uVHlwZSA9IGFjdGlvbiAmJiBhY3Rpb24udHlwZTtcbiAgdmFyIGFjdGlvbkRlc2NyaXB0aW9uID0gYWN0aW9uVHlwZSAmJiBcImFjdGlvbiBcXFwiXCIgKyBTdHJpbmcoYWN0aW9uVHlwZSkgKyBcIlxcXCJcIiB8fCAnYW4gYWN0aW9uJztcbiAgcmV0dXJuIFwiR2l2ZW4gXCIgKyBhY3Rpb25EZXNjcmlwdGlvbiArIFwiLCByZWR1Y2VyIFxcXCJcIiArIGtleSArIFwiXFxcIiByZXR1cm5lZCB1bmRlZmluZWQuIFwiICsgXCJUbyBpZ25vcmUgYW4gYWN0aW9uLCB5b3UgbXVzdCBleHBsaWNpdGx5IHJldHVybiB0aGUgcHJldmlvdXMgc3RhdGUuIFwiICsgXCJJZiB5b3Ugd2FudCB0aGlzIHJlZHVjZXIgdG8gaG9sZCBubyB2YWx1ZSwgeW91IGNhbiByZXR1cm4gbnVsbCBpbnN0ZWFkIG9mIHVuZGVmaW5lZC5cIjtcbn1cblxuZnVuY3Rpb24gZ2V0VW5leHBlY3RlZFN0YXRlU2hhcGVXYXJuaW5nTWVzc2FnZShpbnB1dFN0YXRlLCByZWR1Y2VycywgYWN0aW9uLCB1bmV4cGVjdGVkS2V5Q2FjaGUpIHtcbiAgdmFyIHJlZHVjZXJLZXlzID0gT2JqZWN0LmtleXMocmVkdWNlcnMpO1xuICB2YXIgYXJndW1lbnROYW1lID0gYWN0aW9uICYmIGFjdGlvbi50eXBlID09PSBBY3Rpb25UeXBlcy5JTklUID8gJ3ByZWxvYWRlZFN0YXRlIGFyZ3VtZW50IHBhc3NlZCB0byBjcmVhdGVTdG9yZScgOiAncHJldmlvdXMgc3RhdGUgcmVjZWl2ZWQgYnkgdGhlIHJlZHVjZXInO1xuXG4gIGlmIChyZWR1Y2VyS2V5cy5sZW5ndGggPT09IDApIHtcbiAgICByZXR1cm4gJ1N0b3JlIGRvZXMgbm90IGhhdmUgYSB2YWxpZCByZWR1Y2VyLiBNYWtlIHN1cmUgdGhlIGFyZ3VtZW50IHBhc3NlZCAnICsgJ3RvIGNvbWJpbmVSZWR1Y2VycyBpcyBhbiBvYmplY3Qgd2hvc2UgdmFsdWVzIGFyZSByZWR1Y2Vycy4nO1xuICB9XG5cbiAgaWYgKCFpc1BsYWluT2JqZWN0KGlucHV0U3RhdGUpKSB7XG4gICAgcmV0dXJuIFwiVGhlIFwiICsgYXJndW1lbnROYW1lICsgXCIgaGFzIHVuZXhwZWN0ZWQgdHlwZSBvZiBcXFwiXCIgKyB7fS50b1N0cmluZy5jYWxsKGlucHV0U3RhdGUpLm1hdGNoKC9cXHMoW2EtenxBLVpdKykvKVsxXSArIFwiXFxcIi4gRXhwZWN0ZWQgYXJndW1lbnQgdG8gYmUgYW4gb2JqZWN0IHdpdGggdGhlIGZvbGxvd2luZyBcIiArIChcImtleXM6IFxcXCJcIiArIHJlZHVjZXJLZXlzLmpvaW4oJ1wiLCBcIicpICsgXCJcXFwiXCIpO1xuICB9XG5cbiAgdmFyIHVuZXhwZWN0ZWRLZXlzID0gT2JqZWN0LmtleXMoaW5wdXRTdGF0ZSkuZmlsdGVyKGZ1bmN0aW9uIChrZXkpIHtcbiAgICByZXR1cm4gIXJlZHVjZXJzLmhhc093blByb3BlcnR5KGtleSkgJiYgIXVuZXhwZWN0ZWRLZXlDYWNoZVtrZXldO1xuICB9KTtcbiAgdW5leHBlY3RlZEtleXMuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgdW5leHBlY3RlZEtleUNhY2hlW2tleV0gPSB0cnVlO1xuICB9KTtcbiAgaWYgKGFjdGlvbiAmJiBhY3Rpb24udHlwZSA9PT0gQWN0aW9uVHlwZXMuUkVQTEFDRSkgcmV0dXJuO1xuXG4gIGlmICh1bmV4cGVjdGVkS2V5cy5sZW5ndGggPiAwKSB7XG4gICAgcmV0dXJuIFwiVW5leHBlY3RlZCBcIiArICh1bmV4cGVjdGVkS2V5cy5sZW5ndGggPiAxID8gJ2tleXMnIDogJ2tleScpICsgXCIgXCIgKyAoXCJcXFwiXCIgKyB1bmV4cGVjdGVkS2V5cy5qb2luKCdcIiwgXCInKSArIFwiXFxcIiBmb3VuZCBpbiBcIiArIGFyZ3VtZW50TmFtZSArIFwiLiBcIikgKyBcIkV4cGVjdGVkIHRvIGZpbmQgb25lIG9mIHRoZSBrbm93biByZWR1Y2VyIGtleXMgaW5zdGVhZDogXCIgKyAoXCJcXFwiXCIgKyByZWR1Y2VyS2V5cy5qb2luKCdcIiwgXCInKSArIFwiXFxcIi4gVW5leHBlY3RlZCBrZXlzIHdpbGwgYmUgaWdub3JlZC5cIik7XG4gIH1cbn1cblxuZnVuY3Rpb24gYXNzZXJ0UmVkdWNlclNoYXBlKHJlZHVjZXJzKSB7XG4gIE9iamVjdC5rZXlzKHJlZHVjZXJzKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICB2YXIgcmVkdWNlciA9IHJlZHVjZXJzW2tleV07XG4gICAgdmFyIGluaXRpYWxTdGF0ZSA9IHJlZHVjZXIodW5kZWZpbmVkLCB7XG4gICAgICB0eXBlOiBBY3Rpb25UeXBlcy5JTklUXG4gICAgfSk7XG5cbiAgICBpZiAodHlwZW9mIGluaXRpYWxTdGF0ZSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIlJlZHVjZXIgXFxcIlwiICsga2V5ICsgXCJcXFwiIHJldHVybmVkIHVuZGVmaW5lZCBkdXJpbmcgaW5pdGlhbGl6YXRpb24uIFwiICsgXCJJZiB0aGUgc3RhdGUgcGFzc2VkIHRvIHRoZSByZWR1Y2VyIGlzIHVuZGVmaW5lZCwgeW91IG11c3QgXCIgKyBcImV4cGxpY2l0bHkgcmV0dXJuIHRoZSBpbml0aWFsIHN0YXRlLiBUaGUgaW5pdGlhbCBzdGF0ZSBtYXkgXCIgKyBcIm5vdCBiZSB1bmRlZmluZWQuIElmIHlvdSBkb24ndCB3YW50IHRvIHNldCBhIHZhbHVlIGZvciB0aGlzIHJlZHVjZXIsIFwiICsgXCJ5b3UgY2FuIHVzZSBudWxsIGluc3RlYWQgb2YgdW5kZWZpbmVkLlwiKTtcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIHJlZHVjZXIodW5kZWZpbmVkLCB7XG4gICAgICB0eXBlOiBBY3Rpb25UeXBlcy5QUk9CRV9VTktOT1dOX0FDVElPTigpXG4gICAgfSkgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJSZWR1Y2VyIFxcXCJcIiArIGtleSArIFwiXFxcIiByZXR1cm5lZCB1bmRlZmluZWQgd2hlbiBwcm9iZWQgd2l0aCBhIHJhbmRvbSB0eXBlLiBcIiArIChcIkRvbid0IHRyeSB0byBoYW5kbGUgXCIgKyBBY3Rpb25UeXBlcy5JTklUICsgXCIgb3Igb3RoZXIgYWN0aW9ucyBpbiBcXFwicmVkdXgvKlxcXCIgXCIpICsgXCJuYW1lc3BhY2UuIFRoZXkgYXJlIGNvbnNpZGVyZWQgcHJpdmF0ZS4gSW5zdGVhZCwgeW91IG11c3QgcmV0dXJuIHRoZSBcIiArIFwiY3VycmVudCBzdGF0ZSBmb3IgYW55IHVua25vd24gYWN0aW9ucywgdW5sZXNzIGl0IGlzIHVuZGVmaW5lZCwgXCIgKyBcImluIHdoaWNoIGNhc2UgeW91IG11c3QgcmV0dXJuIHRoZSBpbml0aWFsIHN0YXRlLCByZWdhcmRsZXNzIG9mIHRoZSBcIiArIFwiYWN0aW9uIHR5cGUuIFRoZSBpbml0aWFsIHN0YXRlIG1heSBub3QgYmUgdW5kZWZpbmVkLCBidXQgY2FuIGJlIG51bGwuXCIpO1xuICAgIH1cbiAgfSk7XG59XG4vKipcbiAqIFR1cm5zIGFuIG9iamVjdCB3aG9zZSB2YWx1ZXMgYXJlIGRpZmZlcmVudCByZWR1Y2VyIGZ1bmN0aW9ucywgaW50byBhIHNpbmdsZVxuICogcmVkdWNlciBmdW5jdGlvbi4gSXQgd2lsbCBjYWxsIGV2ZXJ5IGNoaWxkIHJlZHVjZXIsIGFuZCBnYXRoZXIgdGhlaXIgcmVzdWx0c1xuICogaW50byBhIHNpbmdsZSBzdGF0ZSBvYmplY3QsIHdob3NlIGtleXMgY29ycmVzcG9uZCB0byB0aGUga2V5cyBvZiB0aGUgcGFzc2VkXG4gKiByZWR1Y2VyIGZ1bmN0aW9ucy5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gcmVkdWNlcnMgQW4gb2JqZWN0IHdob3NlIHZhbHVlcyBjb3JyZXNwb25kIHRvIGRpZmZlcmVudFxuICogcmVkdWNlciBmdW5jdGlvbnMgdGhhdCBuZWVkIHRvIGJlIGNvbWJpbmVkIGludG8gb25lLiBPbmUgaGFuZHkgd2F5IHRvIG9idGFpblxuICogaXQgaXMgdG8gdXNlIEVTNiBgaW1wb3J0ICogYXMgcmVkdWNlcnNgIHN5bnRheC4gVGhlIHJlZHVjZXJzIG1heSBuZXZlciByZXR1cm5cbiAqIHVuZGVmaW5lZCBmb3IgYW55IGFjdGlvbi4gSW5zdGVhZCwgdGhleSBzaG91bGQgcmV0dXJuIHRoZWlyIGluaXRpYWwgc3RhdGVcbiAqIGlmIHRoZSBzdGF0ZSBwYXNzZWQgdG8gdGhlbSB3YXMgdW5kZWZpbmVkLCBhbmQgdGhlIGN1cnJlbnQgc3RhdGUgZm9yIGFueVxuICogdW5yZWNvZ25pemVkIGFjdGlvbi5cbiAqXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IEEgcmVkdWNlciBmdW5jdGlvbiB0aGF0IGludm9rZXMgZXZlcnkgcmVkdWNlciBpbnNpZGUgdGhlXG4gKiBwYXNzZWQgb2JqZWN0LCBhbmQgYnVpbGRzIGEgc3RhdGUgb2JqZWN0IHdpdGggdGhlIHNhbWUgc2hhcGUuXG4gKi9cblxuXG5mdW5jdGlvbiBjb21iaW5lUmVkdWNlcnMocmVkdWNlcnMpIHtcbiAgdmFyIHJlZHVjZXJLZXlzID0gT2JqZWN0LmtleXMocmVkdWNlcnMpO1xuICB2YXIgZmluYWxSZWR1Y2VycyA9IHt9O1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgcmVkdWNlcktleXMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIga2V5ID0gcmVkdWNlcktleXNbaV07XG5cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgaWYgKHR5cGVvZiByZWR1Y2Vyc1trZXldID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICB3YXJuaW5nKFwiTm8gcmVkdWNlciBwcm92aWRlZCBmb3Iga2V5IFxcXCJcIiArIGtleSArIFwiXFxcIlwiKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIHJlZHVjZXJzW2tleV0gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIGZpbmFsUmVkdWNlcnNba2V5XSA9IHJlZHVjZXJzW2tleV07XG4gICAgfVxuICB9XG5cbiAgdmFyIGZpbmFsUmVkdWNlcktleXMgPSBPYmplY3Qua2V5cyhmaW5hbFJlZHVjZXJzKTsgLy8gVGhpcyBpcyB1c2VkIHRvIG1ha2Ugc3VyZSB3ZSBkb24ndCB3YXJuIGFib3V0IHRoZSBzYW1lXG4gIC8vIGtleXMgbXVsdGlwbGUgdGltZXMuXG5cbiAgdmFyIHVuZXhwZWN0ZWRLZXlDYWNoZTtcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIHVuZXhwZWN0ZWRLZXlDYWNoZSA9IHt9O1xuICB9XG5cbiAgdmFyIHNoYXBlQXNzZXJ0aW9uRXJyb3I7XG5cbiAgdHJ5IHtcbiAgICBhc3NlcnRSZWR1Y2VyU2hhcGUoZmluYWxSZWR1Y2Vycyk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBzaGFwZUFzc2VydGlvbkVycm9yID0gZTtcbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbiBjb21iaW5hdGlvbihzdGF0ZSwgYWN0aW9uKSB7XG4gICAgaWYgKHN0YXRlID09PSB2b2lkIDApIHtcbiAgICAgIHN0YXRlID0ge307XG4gICAgfVxuXG4gICAgaWYgKHNoYXBlQXNzZXJ0aW9uRXJyb3IpIHtcbiAgICAgIHRocm93IHNoYXBlQXNzZXJ0aW9uRXJyb3I7XG4gICAgfVxuXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIHZhciB3YXJuaW5nTWVzc2FnZSA9IGdldFVuZXhwZWN0ZWRTdGF0ZVNoYXBlV2FybmluZ01lc3NhZ2Uoc3RhdGUsIGZpbmFsUmVkdWNlcnMsIGFjdGlvbiwgdW5leHBlY3RlZEtleUNhY2hlKTtcblxuICAgICAgaWYgKHdhcm5pbmdNZXNzYWdlKSB7XG4gICAgICAgIHdhcm5pbmcod2FybmluZ01lc3NhZ2UpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhciBoYXNDaGFuZ2VkID0gZmFsc2U7XG4gICAgdmFyIG5leHRTdGF0ZSA9IHt9O1xuXG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGZpbmFsUmVkdWNlcktleXMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICB2YXIgX2tleSA9IGZpbmFsUmVkdWNlcktleXNbX2ldO1xuICAgICAgdmFyIHJlZHVjZXIgPSBmaW5hbFJlZHVjZXJzW19rZXldO1xuICAgICAgdmFyIHByZXZpb3VzU3RhdGVGb3JLZXkgPSBzdGF0ZVtfa2V5XTtcbiAgICAgIHZhciBuZXh0U3RhdGVGb3JLZXkgPSByZWR1Y2VyKHByZXZpb3VzU3RhdGVGb3JLZXksIGFjdGlvbik7XG5cbiAgICAgIGlmICh0eXBlb2YgbmV4dFN0YXRlRm9yS2V5ID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICB2YXIgZXJyb3JNZXNzYWdlID0gZ2V0VW5kZWZpbmVkU3RhdGVFcnJvck1lc3NhZ2UoX2tleSwgYWN0aW9uKTtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGVycm9yTWVzc2FnZSk7XG4gICAgICB9XG5cbiAgICAgIG5leHRTdGF0ZVtfa2V5XSA9IG5leHRTdGF0ZUZvcktleTtcbiAgICAgIGhhc0NoYW5nZWQgPSBoYXNDaGFuZ2VkIHx8IG5leHRTdGF0ZUZvcktleSAhPT0gcHJldmlvdXNTdGF0ZUZvcktleTtcbiAgICB9XG5cbiAgICBoYXNDaGFuZ2VkID0gaGFzQ2hhbmdlZCB8fCBmaW5hbFJlZHVjZXJLZXlzLmxlbmd0aCAhPT0gT2JqZWN0LmtleXMoc3RhdGUpLmxlbmd0aDtcbiAgICByZXR1cm4gaGFzQ2hhbmdlZCA/IG5leHRTdGF0ZSA6IHN0YXRlO1xuICB9O1xufVxuXG5mdW5jdGlvbiBiaW5kQWN0aW9uQ3JlYXRvcihhY3Rpb25DcmVhdG9yLCBkaXNwYXRjaCkge1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBkaXNwYXRjaChhY3Rpb25DcmVhdG9yLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuICB9O1xufVxuLyoqXG4gKiBUdXJucyBhbiBvYmplY3Qgd2hvc2UgdmFsdWVzIGFyZSBhY3Rpb24gY3JlYXRvcnMsIGludG8gYW4gb2JqZWN0IHdpdGggdGhlXG4gKiBzYW1lIGtleXMsIGJ1dCB3aXRoIGV2ZXJ5IGZ1bmN0aW9uIHdyYXBwZWQgaW50byBhIGBkaXNwYXRjaGAgY2FsbCBzbyB0aGV5XG4gKiBtYXkgYmUgaW52b2tlZCBkaXJlY3RseS4gVGhpcyBpcyBqdXN0IGEgY29udmVuaWVuY2UgbWV0aG9kLCBhcyB5b3UgY2FuIGNhbGxcbiAqIGBzdG9yZS5kaXNwYXRjaChNeUFjdGlvbkNyZWF0b3JzLmRvU29tZXRoaW5nKCkpYCB5b3Vyc2VsZiBqdXN0IGZpbmUuXG4gKlxuICogRm9yIGNvbnZlbmllbmNlLCB5b3UgY2FuIGFsc28gcGFzcyBhbiBhY3Rpb24gY3JlYXRvciBhcyB0aGUgZmlyc3QgYXJndW1lbnQsXG4gKiBhbmQgZ2V0IGEgZGlzcGF0Y2ggd3JhcHBlZCBmdW5jdGlvbiBpbiByZXR1cm4uXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbnxPYmplY3R9IGFjdGlvbkNyZWF0b3JzIEFuIG9iamVjdCB3aG9zZSB2YWx1ZXMgYXJlIGFjdGlvblxuICogY3JlYXRvciBmdW5jdGlvbnMuIE9uZSBoYW5keSB3YXkgdG8gb2J0YWluIGl0IGlzIHRvIHVzZSBFUzYgYGltcG9ydCAqIGFzYFxuICogc3ludGF4LiBZb3UgbWF5IGFsc28gcGFzcyBhIHNpbmdsZSBmdW5jdGlvbi5cbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBkaXNwYXRjaCBUaGUgYGRpc3BhdGNoYCBmdW5jdGlvbiBhdmFpbGFibGUgb24geW91ciBSZWR1eFxuICogc3RvcmUuXG4gKlxuICogQHJldHVybnMge0Z1bmN0aW9ufE9iamVjdH0gVGhlIG9iamVjdCBtaW1pY2tpbmcgdGhlIG9yaWdpbmFsIG9iamVjdCwgYnV0IHdpdGhcbiAqIGV2ZXJ5IGFjdGlvbiBjcmVhdG9yIHdyYXBwZWQgaW50byB0aGUgYGRpc3BhdGNoYCBjYWxsLiBJZiB5b3UgcGFzc2VkIGFcbiAqIGZ1bmN0aW9uIGFzIGBhY3Rpb25DcmVhdG9yc2AsIHRoZSByZXR1cm4gdmFsdWUgd2lsbCBhbHNvIGJlIGEgc2luZ2xlXG4gKiBmdW5jdGlvbi5cbiAqL1xuXG5cbmZ1bmN0aW9uIGJpbmRBY3Rpb25DcmVhdG9ycyhhY3Rpb25DcmVhdG9ycywgZGlzcGF0Y2gpIHtcbiAgaWYgKHR5cGVvZiBhY3Rpb25DcmVhdG9ycyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHJldHVybiBiaW5kQWN0aW9uQ3JlYXRvcihhY3Rpb25DcmVhdG9ycywgZGlzcGF0Y2gpO1xuICB9XG5cbiAgaWYgKHR5cGVvZiBhY3Rpb25DcmVhdG9ycyAhPT0gJ29iamVjdCcgfHwgYWN0aW9uQ3JlYXRvcnMgPT09IG51bGwpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJiaW5kQWN0aW9uQ3JlYXRvcnMgZXhwZWN0ZWQgYW4gb2JqZWN0IG9yIGEgZnVuY3Rpb24sIGluc3RlYWQgcmVjZWl2ZWQgXCIgKyAoYWN0aW9uQ3JlYXRvcnMgPT09IG51bGwgPyAnbnVsbCcgOiB0eXBlb2YgYWN0aW9uQ3JlYXRvcnMpICsgXCIuIFwiICsgXCJEaWQgeW91IHdyaXRlIFxcXCJpbXBvcnQgQWN0aW9uQ3JlYXRvcnMgZnJvbVxcXCIgaW5zdGVhZCBvZiBcXFwiaW1wb3J0ICogYXMgQWN0aW9uQ3JlYXRvcnMgZnJvbVxcXCI/XCIpO1xuICB9XG5cbiAgdmFyIGJvdW5kQWN0aW9uQ3JlYXRvcnMgPSB7fTtcblxuICBmb3IgKHZhciBrZXkgaW4gYWN0aW9uQ3JlYXRvcnMpIHtcbiAgICB2YXIgYWN0aW9uQ3JlYXRvciA9IGFjdGlvbkNyZWF0b3JzW2tleV07XG5cbiAgICBpZiAodHlwZW9mIGFjdGlvbkNyZWF0b3IgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIGJvdW5kQWN0aW9uQ3JlYXRvcnNba2V5XSA9IGJpbmRBY3Rpb25DcmVhdG9yKGFjdGlvbkNyZWF0b3IsIGRpc3BhdGNoKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gYm91bmRBY3Rpb25DcmVhdG9ycztcbn1cblxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkge1xuICBpZiAoa2V5IGluIG9iaikge1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwge1xuICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgIHdyaXRhYmxlOiB0cnVlXG4gICAgfSk7XG4gIH0gZWxzZSB7XG4gICAgb2JqW2tleV0gPSB2YWx1ZTtcbiAgfVxuXG4gIHJldHVybiBvYmo7XG59XG5cbmZ1bmN0aW9uIG93bktleXMob2JqZWN0LCBlbnVtZXJhYmxlT25seSkge1xuICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKG9iamVjdCk7XG5cbiAgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHtcbiAgICBrZXlzLnB1c2guYXBwbHkoa2V5cywgT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhvYmplY3QpKTtcbiAgfVxuXG4gIGlmIChlbnVtZXJhYmxlT25seSkga2V5cyA9IGtleXMuZmlsdGVyKGZ1bmN0aW9uIChzeW0pIHtcbiAgICByZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmplY3QsIHN5bSkuZW51bWVyYWJsZTtcbiAgfSk7XG4gIHJldHVybiBrZXlzO1xufVxuXG5mdW5jdGlvbiBfb2JqZWN0U3ByZWFkMih0YXJnZXQpIHtcbiAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldICE9IG51bGwgPyBhcmd1bWVudHNbaV0gOiB7fTtcblxuICAgIGlmIChpICUgMikge1xuICAgICAgb3duS2V5cyhzb3VyY2UsIHRydWUpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgICBfZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHNvdXJjZVtrZXldKTtcbiAgICAgIH0pO1xuICAgIH0gZWxzZSBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMpIHtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMoc291cmNlKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIG93bktleXMoc291cmNlKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHNvdXJjZSwga2V5KSk7XG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdGFyZ2V0O1xufVxuXG4vKipcbiAqIENvbXBvc2VzIHNpbmdsZS1hcmd1bWVudCBmdW5jdGlvbnMgZnJvbSByaWdodCB0byBsZWZ0LiBUaGUgcmlnaHRtb3N0XG4gKiBmdW5jdGlvbiBjYW4gdGFrZSBtdWx0aXBsZSBhcmd1bWVudHMgYXMgaXQgcHJvdmlkZXMgdGhlIHNpZ25hdHVyZSBmb3JcbiAqIHRoZSByZXN1bHRpbmcgY29tcG9zaXRlIGZ1bmN0aW9uLlxuICpcbiAqIEBwYXJhbSB7Li4uRnVuY3Rpb259IGZ1bmNzIFRoZSBmdW5jdGlvbnMgdG8gY29tcG9zZS5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gQSBmdW5jdGlvbiBvYnRhaW5lZCBieSBjb21wb3NpbmcgdGhlIGFyZ3VtZW50IGZ1bmN0aW9uc1xuICogZnJvbSByaWdodCB0byBsZWZ0LiBGb3IgZXhhbXBsZSwgY29tcG9zZShmLCBnLCBoKSBpcyBpZGVudGljYWwgdG8gZG9pbmdcbiAqICguLi5hcmdzKSA9PiBmKGcoaCguLi5hcmdzKSkpLlxuICovXG5mdW5jdGlvbiBjb21wb3NlKCkge1xuICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgZnVuY3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgZnVuY3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gIH1cblxuICBpZiAoZnVuY3MubGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChhcmcpIHtcbiAgICAgIHJldHVybiBhcmc7XG4gICAgfTtcbiAgfVxuXG4gIGlmIChmdW5jcy5sZW5ndGggPT09IDEpIHtcbiAgICByZXR1cm4gZnVuY3NbMF07XG4gIH1cblxuICByZXR1cm4gZnVuY3MucmVkdWNlKGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBhKGIuYXBwbHkodm9pZCAwLCBhcmd1bWVudHMpKTtcbiAgICB9O1xuICB9KTtcbn1cblxuLyoqXG4gKiBDcmVhdGVzIGEgc3RvcmUgZW5oYW5jZXIgdGhhdCBhcHBsaWVzIG1pZGRsZXdhcmUgdG8gdGhlIGRpc3BhdGNoIG1ldGhvZFxuICogb2YgdGhlIFJlZHV4IHN0b3JlLiBUaGlzIGlzIGhhbmR5IGZvciBhIHZhcmlldHkgb2YgdGFza3MsIHN1Y2ggYXMgZXhwcmVzc2luZ1xuICogYXN5bmNocm9ub3VzIGFjdGlvbnMgaW4gYSBjb25jaXNlIG1hbm5lciwgb3IgbG9nZ2luZyBldmVyeSBhY3Rpb24gcGF5bG9hZC5cbiAqXG4gKiBTZWUgYHJlZHV4LXRodW5rYCBwYWNrYWdlIGFzIGFuIGV4YW1wbGUgb2YgdGhlIFJlZHV4IG1pZGRsZXdhcmUuXG4gKlxuICogQmVjYXVzZSBtaWRkbGV3YXJlIGlzIHBvdGVudGlhbGx5IGFzeW5jaHJvbm91cywgdGhpcyBzaG91bGQgYmUgdGhlIGZpcnN0XG4gKiBzdG9yZSBlbmhhbmNlciBpbiB0aGUgY29tcG9zaXRpb24gY2hhaW4uXG4gKlxuICogTm90ZSB0aGF0IGVhY2ggbWlkZGxld2FyZSB3aWxsIGJlIGdpdmVuIHRoZSBgZGlzcGF0Y2hgIGFuZCBgZ2V0U3RhdGVgIGZ1bmN0aW9uc1xuICogYXMgbmFtZWQgYXJndW1lbnRzLlxuICpcbiAqIEBwYXJhbSB7Li4uRnVuY3Rpb259IG1pZGRsZXdhcmVzIFRoZSBtaWRkbGV3YXJlIGNoYWluIHRvIGJlIGFwcGxpZWQuXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IEEgc3RvcmUgZW5oYW5jZXIgYXBwbHlpbmcgdGhlIG1pZGRsZXdhcmUuXG4gKi9cblxuZnVuY3Rpb24gYXBwbHlNaWRkbGV3YXJlKCkge1xuICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgbWlkZGxld2FyZXMgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgbWlkZGxld2FyZXNbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24gKGNyZWF0ZVN0b3JlKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBzdG9yZSA9IGNyZWF0ZVN0b3JlLmFwcGx5KHZvaWQgMCwgYXJndW1lbnRzKTtcblxuICAgICAgdmFyIF9kaXNwYXRjaCA9IGZ1bmN0aW9uIGRpc3BhdGNoKCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0Rpc3BhdGNoaW5nIHdoaWxlIGNvbnN0cnVjdGluZyB5b3VyIG1pZGRsZXdhcmUgaXMgbm90IGFsbG93ZWQuICcgKyAnT3RoZXIgbWlkZGxld2FyZSB3b3VsZCBub3QgYmUgYXBwbGllZCB0byB0aGlzIGRpc3BhdGNoLicpO1xuICAgICAgfTtcblxuICAgICAgdmFyIG1pZGRsZXdhcmVBUEkgPSB7XG4gICAgICAgIGdldFN0YXRlOiBzdG9yZS5nZXRTdGF0ZSxcbiAgICAgICAgZGlzcGF0Y2g6IGZ1bmN0aW9uIGRpc3BhdGNoKCkge1xuICAgICAgICAgIHJldHVybiBfZGlzcGF0Y2guYXBwbHkodm9pZCAwLCBhcmd1bWVudHMpO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgICAgdmFyIGNoYWluID0gbWlkZGxld2FyZXMubWFwKGZ1bmN0aW9uIChtaWRkbGV3YXJlKSB7XG4gICAgICAgIHJldHVybiBtaWRkbGV3YXJlKG1pZGRsZXdhcmVBUEkpO1xuICAgICAgfSk7XG4gICAgICBfZGlzcGF0Y2ggPSBjb21wb3NlLmFwcGx5KHZvaWQgMCwgY2hhaW4pKHN0b3JlLmRpc3BhdGNoKTtcbiAgICAgIHJldHVybiBfb2JqZWN0U3ByZWFkMih7fSwgc3RvcmUsIHtcbiAgICAgICAgZGlzcGF0Y2g6IF9kaXNwYXRjaFxuICAgICAgfSk7XG4gICAgfTtcbiAgfTtcbn1cblxuLypcbiAqIFRoaXMgaXMgYSBkdW1teSBmdW5jdGlvbiB0byBjaGVjayBpZiB0aGUgZnVuY3Rpb24gbmFtZSBoYXMgYmVlbiBhbHRlcmVkIGJ5IG1pbmlmaWNhdGlvbi5cbiAqIElmIHRoZSBmdW5jdGlvbiBoYXMgYmVlbiBtaW5pZmllZCBhbmQgTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJywgd2FybiB0aGUgdXNlci5cbiAqL1xuXG5mdW5jdGlvbiBpc0NydXNoZWQoKSB7fVxuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiB0eXBlb2YgaXNDcnVzaGVkLm5hbWUgPT09ICdzdHJpbmcnICYmIGlzQ3J1c2hlZC5uYW1lICE9PSAnaXNDcnVzaGVkJykge1xuICB3YXJuaW5nKCdZb3UgYXJlIGN1cnJlbnRseSB1c2luZyBtaW5pZmllZCBjb2RlIG91dHNpZGUgb2YgTk9ERV9FTlYgPT09IFwicHJvZHVjdGlvblwiLiAnICsgJ1RoaXMgbWVhbnMgdGhhdCB5b3UgYXJlIHJ1bm5pbmcgYSBzbG93ZXIgZGV2ZWxvcG1lbnQgYnVpbGQgb2YgUmVkdXguICcgKyAnWW91IGNhbiB1c2UgbG9vc2UtZW52aWZ5IChodHRwczovL2dpdGh1Yi5jb20vemVydG9zaC9sb29zZS1lbnZpZnkpIGZvciBicm93c2VyaWZ5ICcgKyAnb3Igc2V0dGluZyBtb2RlIHRvIHByb2R1Y3Rpb24gaW4gd2VicGFjayAoaHR0cHM6Ly93ZWJwYWNrLmpzLm9yZy9jb25jZXB0cy9tb2RlLykgJyArICd0byBlbnN1cmUgeW91IGhhdmUgdGhlIGNvcnJlY3QgY29kZSBmb3IgeW91ciBwcm9kdWN0aW9uIGJ1aWxkLicpO1xufVxuXG5leHBvcnQgeyBBY3Rpb25UeXBlcyBhcyBfX0RPX05PVF9VU0VfX0FjdGlvblR5cGVzLCBhcHBseU1pZGRsZXdhcmUsIGJpbmRBY3Rpb25DcmVhdG9ycywgY29tYmluZVJlZHVjZXJzLCBjb21wb3NlLCBjcmVhdGVTdG9yZSB9O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgcmVhY3RJcyA9IHJlcXVpcmUoJ3JlYWN0LWlzJyk7XG5cbi8qKlxuICogQ29weXJpZ2h0IDIwMTUsIFlhaG9vISBJbmMuXG4gKiBDb3B5cmlnaHRzIGxpY2Vuc2VkIHVuZGVyIHRoZSBOZXcgQlNEIExpY2Vuc2UuIFNlZSB0aGUgYWNjb21wYW55aW5nIExJQ0VOU0UgZmlsZSBmb3IgdGVybXMuXG4gKi9cbnZhciBSRUFDVF9TVEFUSUNTID0ge1xuICBjaGlsZENvbnRleHRUeXBlczogdHJ1ZSxcbiAgY29udGV4dFR5cGU6IHRydWUsXG4gIGNvbnRleHRUeXBlczogdHJ1ZSxcbiAgZGVmYXVsdFByb3BzOiB0cnVlLFxuICBkaXNwbGF5TmFtZTogdHJ1ZSxcbiAgZ2V0RGVmYXVsdFByb3BzOiB0cnVlLFxuICBnZXREZXJpdmVkU3RhdGVGcm9tRXJyb3I6IHRydWUsXG4gIGdldERlcml2ZWRTdGF0ZUZyb21Qcm9wczogdHJ1ZSxcbiAgbWl4aW5zOiB0cnVlLFxuICBwcm9wVHlwZXM6IHRydWUsXG4gIHR5cGU6IHRydWVcbn07XG52YXIgS05PV05fU1RBVElDUyA9IHtcbiAgbmFtZTogdHJ1ZSxcbiAgbGVuZ3RoOiB0cnVlLFxuICBwcm90b3R5cGU6IHRydWUsXG4gIGNhbGxlcjogdHJ1ZSxcbiAgY2FsbGVlOiB0cnVlLFxuICBhcmd1bWVudHM6IHRydWUsXG4gIGFyaXR5OiB0cnVlXG59O1xudmFyIEZPUldBUkRfUkVGX1NUQVRJQ1MgPSB7XG4gICckJHR5cGVvZic6IHRydWUsXG4gIHJlbmRlcjogdHJ1ZSxcbiAgZGVmYXVsdFByb3BzOiB0cnVlLFxuICBkaXNwbGF5TmFtZTogdHJ1ZSxcbiAgcHJvcFR5cGVzOiB0cnVlXG59O1xudmFyIE1FTU9fU1RBVElDUyA9IHtcbiAgJyQkdHlwZW9mJzogdHJ1ZSxcbiAgY29tcGFyZTogdHJ1ZSxcbiAgZGVmYXVsdFByb3BzOiB0cnVlLFxuICBkaXNwbGF5TmFtZTogdHJ1ZSxcbiAgcHJvcFR5cGVzOiB0cnVlLFxuICB0eXBlOiB0cnVlXG59O1xudmFyIFRZUEVfU1RBVElDUyA9IHt9O1xuVFlQRV9TVEFUSUNTW3JlYWN0SXMuRm9yd2FyZFJlZl0gPSBGT1JXQVJEX1JFRl9TVEFUSUNTO1xuVFlQRV9TVEFUSUNTW3JlYWN0SXMuTWVtb10gPSBNRU1PX1NUQVRJQ1M7XG5cbmZ1bmN0aW9uIGdldFN0YXRpY3MoY29tcG9uZW50KSB7XG4gIC8vIFJlYWN0IHYxNi4xMSBhbmQgYmVsb3dcbiAgaWYgKHJlYWN0SXMuaXNNZW1vKGNvbXBvbmVudCkpIHtcbiAgICByZXR1cm4gTUVNT19TVEFUSUNTO1xuICB9IC8vIFJlYWN0IHYxNi4xMiBhbmQgYWJvdmVcblxuXG4gIHJldHVybiBUWVBFX1NUQVRJQ1NbY29tcG9uZW50WyckJHR5cGVvZiddXSB8fCBSRUFDVF9TVEFUSUNTO1xufVxuXG52YXIgZGVmaW5lUHJvcGVydHkgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7XG52YXIgZ2V0T3duUHJvcGVydHlOYW1lcyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzO1xudmFyIGdldE93blByb3BlcnR5U3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHM7XG52YXIgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcbnZhciBnZXRQcm90b3R5cGVPZiA9IE9iamVjdC5nZXRQcm90b3R5cGVPZjtcbnZhciBvYmplY3RQcm90b3R5cGUgPSBPYmplY3QucHJvdG90eXBlO1xuZnVuY3Rpb24gaG9pc3ROb25SZWFjdFN0YXRpY3ModGFyZ2V0Q29tcG9uZW50LCBzb3VyY2VDb21wb25lbnQsIGJsYWNrbGlzdCkge1xuICBpZiAodHlwZW9mIHNvdXJjZUNvbXBvbmVudCAhPT0gJ3N0cmluZycpIHtcbiAgICAvLyBkb24ndCBob2lzdCBvdmVyIHN0cmluZyAoaHRtbCkgY29tcG9uZW50c1xuICAgIGlmIChvYmplY3RQcm90b3R5cGUpIHtcbiAgICAgIHZhciBpbmhlcml0ZWRDb21wb25lbnQgPSBnZXRQcm90b3R5cGVPZihzb3VyY2VDb21wb25lbnQpO1xuXG4gICAgICBpZiAoaW5oZXJpdGVkQ29tcG9uZW50ICYmIGluaGVyaXRlZENvbXBvbmVudCAhPT0gb2JqZWN0UHJvdG90eXBlKSB7XG4gICAgICAgIGhvaXN0Tm9uUmVhY3RTdGF0aWNzKHRhcmdldENvbXBvbmVudCwgaW5oZXJpdGVkQ29tcG9uZW50LCBibGFja2xpc3QpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhciBrZXlzID0gZ2V0T3duUHJvcGVydHlOYW1lcyhzb3VyY2VDb21wb25lbnQpO1xuXG4gICAgaWYgKGdldE93blByb3BlcnR5U3ltYm9scykge1xuICAgICAga2V5cyA9IGtleXMuY29uY2F0KGdldE93blByb3BlcnR5U3ltYm9scyhzb3VyY2VDb21wb25lbnQpKTtcbiAgICB9XG5cbiAgICB2YXIgdGFyZ2V0U3RhdGljcyA9IGdldFN0YXRpY3ModGFyZ2V0Q29tcG9uZW50KTtcbiAgICB2YXIgc291cmNlU3RhdGljcyA9IGdldFN0YXRpY3Moc291cmNlQ29tcG9uZW50KTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7ICsraSkge1xuICAgICAgdmFyIGtleSA9IGtleXNbaV07XG5cbiAgICAgIGlmICghS05PV05fU1RBVElDU1trZXldICYmICEoYmxhY2tsaXN0ICYmIGJsYWNrbGlzdFtrZXldKSAmJiAhKHNvdXJjZVN0YXRpY3MgJiYgc291cmNlU3RhdGljc1trZXldKSAmJiAhKHRhcmdldFN0YXRpY3MgJiYgdGFyZ2V0U3RhdGljc1trZXldKSkge1xuICAgICAgICB2YXIgZGVzY3JpcHRvciA9IGdldE93blByb3BlcnR5RGVzY3JpcHRvcihzb3VyY2VDb21wb25lbnQsIGtleSk7XG5cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAvLyBBdm9pZCBmYWlsdXJlcyBmcm9tIHJlYWQtb25seSBwcm9wZXJ0aWVzXG4gICAgICAgICAgZGVmaW5lUHJvcGVydHkodGFyZ2V0Q29tcG9uZW50LCBrZXksIGRlc2NyaXB0b3IpO1xuICAgICAgICB9IGNhdGNoIChlKSB7fVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0YXJnZXRDb21wb25lbnQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaG9pc3ROb25SZWFjdFN0YXRpY3M7XG4iLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzXCI7XG4vLyBTb3J0ZWQgQVNDIGJ5IHNpemUuIFRoYXQncyBpbXBvcnRhbnQuXG4vLyBJdCBjYW4ndCBiZSBjb25maWd1cmVkIGFzIGl0J3MgdXNlZCBzdGF0aWNhbGx5IGZvciBwcm9wVHlwZXMuXG5leHBvcnQgdmFyIGtleXMgPSBbJ3hzJywgJ3NtJywgJ21kJywgJ2xnJywgJ3hsJ107IC8vIEtlZXAgaW4gbWluZCB0aGF0IEBtZWRpYSBpcyBpbmNsdXNpdmUgYnkgdGhlIENTUyBzcGVjaWZpY2F0aW9uLlxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjcmVhdGVCcmVha3BvaW50cyhicmVha3BvaW50cykge1xuICB2YXIgX2JyZWFrcG9pbnRzJHZhbHVlcyA9IGJyZWFrcG9pbnRzLnZhbHVlcyxcbiAgICAgIHZhbHVlcyA9IF9icmVha3BvaW50cyR2YWx1ZXMgPT09IHZvaWQgMCA/IHtcbiAgICB4czogMCxcbiAgICBzbTogNjAwLFxuICAgIG1kOiA5NjAsXG4gICAgbGc6IDEyODAsXG4gICAgeGw6IDE5MjBcbiAgfSA6IF9icmVha3BvaW50cyR2YWx1ZXMsXG4gICAgICBfYnJlYWtwb2ludHMkdW5pdCA9IGJyZWFrcG9pbnRzLnVuaXQsXG4gICAgICB1bml0ID0gX2JyZWFrcG9pbnRzJHVuaXQgPT09IHZvaWQgMCA/ICdweCcgOiBfYnJlYWtwb2ludHMkdW5pdCxcbiAgICAgIF9icmVha3BvaW50cyRzdGVwID0gYnJlYWtwb2ludHMuc3RlcCxcbiAgICAgIHN0ZXAgPSBfYnJlYWtwb2ludHMkc3RlcCA9PT0gdm9pZCAwID8gNSA6IF9icmVha3BvaW50cyRzdGVwLFxuICAgICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMoYnJlYWtwb2ludHMsIFtcInZhbHVlc1wiLCBcInVuaXRcIiwgXCJzdGVwXCJdKTtcblxuICBmdW5jdGlvbiB1cChrZXkpIHtcbiAgICB2YXIgdmFsdWUgPSB0eXBlb2YgdmFsdWVzW2tleV0gPT09ICdudW1iZXInID8gdmFsdWVzW2tleV0gOiBrZXk7XG4gICAgcmV0dXJuIFwiQG1lZGlhIChtaW4td2lkdGg6XCIuY29uY2F0KHZhbHVlKS5jb25jYXQodW5pdCwgXCIpXCIpO1xuICB9XG5cbiAgZnVuY3Rpb24gZG93bihrZXkpIHtcbiAgICB2YXIgZW5kSW5kZXggPSBrZXlzLmluZGV4T2Yoa2V5KSArIDE7XG4gICAgdmFyIHVwcGVyYm91bmQgPSB2YWx1ZXNba2V5c1tlbmRJbmRleF1dO1xuXG4gICAgaWYgKGVuZEluZGV4ID09PSBrZXlzLmxlbmd0aCkge1xuICAgICAgLy8geGwgZG93biBhcHBsaWVzIHRvIGFsbCBzaXplc1xuICAgICAgcmV0dXJuIHVwKCd4cycpO1xuICAgIH1cblxuICAgIHZhciB2YWx1ZSA9IHR5cGVvZiB1cHBlcmJvdW5kID09PSAnbnVtYmVyJyAmJiBlbmRJbmRleCA+IDAgPyB1cHBlcmJvdW5kIDoga2V5O1xuICAgIHJldHVybiBcIkBtZWRpYSAobWF4LXdpZHRoOlwiLmNvbmNhdCh2YWx1ZSAtIHN0ZXAgLyAxMDApLmNvbmNhdCh1bml0LCBcIilcIik7XG4gIH1cblxuICBmdW5jdGlvbiBiZXR3ZWVuKHN0YXJ0LCBlbmQpIHtcbiAgICB2YXIgZW5kSW5kZXggPSBrZXlzLmluZGV4T2YoZW5kKTtcblxuICAgIGlmIChlbmRJbmRleCA9PT0ga2V5cy5sZW5ndGggLSAxKSB7XG4gICAgICByZXR1cm4gdXAoc3RhcnQpO1xuICAgIH1cblxuICAgIHJldHVybiBcIkBtZWRpYSAobWluLXdpZHRoOlwiLmNvbmNhdCh0eXBlb2YgdmFsdWVzW3N0YXJ0XSA9PT0gJ251bWJlcicgPyB2YWx1ZXNbc3RhcnRdIDogc3RhcnQpLmNvbmNhdCh1bml0LCBcIikgYW5kIFwiKSArIFwiKG1heC13aWR0aDpcIi5jb25jYXQoKGVuZEluZGV4ICE9PSAtMSAmJiB0eXBlb2YgdmFsdWVzW2tleXNbZW5kSW5kZXggKyAxXV0gPT09ICdudW1iZXInID8gdmFsdWVzW2tleXNbZW5kSW5kZXggKyAxXV0gOiBlbmQpIC0gc3RlcCAvIDEwMCkuY29uY2F0KHVuaXQsIFwiKVwiKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIG9ubHkoa2V5KSB7XG4gICAgcmV0dXJuIGJldHdlZW4oa2V5LCBrZXkpO1xuICB9XG5cbiAgZnVuY3Rpb24gd2lkdGgoa2V5KSB7XG4gICAgcmV0dXJuIHZhbHVlc1trZXldO1xuICB9XG5cbiAgcmV0dXJuIF9leHRlbmRzKHtcbiAgICBrZXlzOiBrZXlzLFxuICAgIHZhbHVlczogdmFsdWVzLFxuICAgIHVwOiB1cCxcbiAgICBkb3duOiBkb3duLFxuICAgIGJldHdlZW46IGJldHdlZW4sXG4gICAgb25seTogb25seSxcbiAgICB3aWR0aDogd2lkdGhcbiAgfSwgb3RoZXIpO1xufSIsImltcG9ydCBhcnJheVdpdGhvdXRIb2xlcyBmcm9tIFwiLi9hcnJheVdpdGhvdXRIb2xlc1wiO1xuaW1wb3J0IGl0ZXJhYmxlVG9BcnJheSBmcm9tIFwiLi9pdGVyYWJsZVRvQXJyYXlcIjtcbmltcG9ydCB1bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheSBmcm9tIFwiLi91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheVwiO1xuaW1wb3J0IG5vbkl0ZXJhYmxlU3ByZWFkIGZyb20gXCIuL25vbkl0ZXJhYmxlU3ByZWFkXCI7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfdG9Db25zdW1hYmxlQXJyYXkoYXJyKSB7XG4gIHJldHVybiBhcnJheVdpdGhvdXRIb2xlcyhhcnIpIHx8IGl0ZXJhYmxlVG9BcnJheShhcnIpIHx8IHVuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5KGFycikgfHwgbm9uSXRlcmFibGVTcHJlYWQoKTtcbn0iLCJpbXBvcnQgYXJyYXlMaWtlVG9BcnJheSBmcm9tIFwiLi9hcnJheUxpa2VUb0FycmF5XCI7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfYXJyYXlXaXRob3V0SG9sZXMoYXJyKSB7XG4gIGlmIChBcnJheS5pc0FycmF5KGFycikpIHJldHVybiBhcnJheUxpa2VUb0FycmF5KGFycik7XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX25vbkl0ZXJhYmxlU3ByZWFkKCkge1xuICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiSW52YWxpZCBhdHRlbXB0IHRvIHNwcmVhZCBub24taXRlcmFibGUgaW5zdGFuY2UuXFxuSW4gb3JkZXIgdG8gYmUgaXRlcmFibGUsIG5vbi1hcnJheSBvYmplY3RzIG11c3QgaGF2ZSBhIFtTeW1ib2wuaXRlcmF0b3JdKCkgbWV0aG9kLlwiKTtcbn0iLCJ2YXIgaXNQcm9kdWN0aW9uID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJztcbmZ1bmN0aW9uIHdhcm5pbmcoY29uZGl0aW9uLCBtZXNzYWdlKSB7XG4gIGlmICghaXNQcm9kdWN0aW9uKSB7XG4gICAgaWYgKGNvbmRpdGlvbikge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciB0ZXh0ID0gXCJXYXJuaW5nOiBcIiArIG1lc3NhZ2U7XG5cbiAgICBpZiAodHlwZW9mIGNvbnNvbGUgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBjb25zb2xlLndhcm4odGV4dCk7XG4gICAgfVxuXG4gICAgdHJ5IHtcbiAgICAgIHRocm93IEVycm9yKHRleHQpO1xuICAgIH0gY2F0Y2ggKHgpIHt9XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgd2FybmluZztcbiIsIid1c2Ugc3RyaWN0JztcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1pcy5wcm9kdWN0aW9uLm1pbi5qcycpO1xufSBlbHNlIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1pcy5kZXZlbG9wbWVudC5qcycpO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX3R5cGVvZihvYmopIHtcbiAgXCJAYmFiZWwvaGVscGVycyAtIHR5cGVvZlwiO1xuXG4gIGlmICh0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIikge1xuICAgIF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikge1xuICAgICAgcmV0dXJuIHR5cGVvZiBvYmo7XG4gICAgfTtcbiAgfSBlbHNlIHtcbiAgICBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHtcbiAgICAgIHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqO1xuICAgIH07XG4gIH1cblxuICByZXR1cm4gX3R5cGVvZihvYmopO1xufSIsImltcG9ydCB7IGRlZXBtZXJnZSB9IGZyb20gJ0BtYXRlcmlhbC11aS91dGlscyc7XG5cbmZ1bmN0aW9uIG1lcmdlKGFjYywgaXRlbSkge1xuICBpZiAoIWl0ZW0pIHtcbiAgICByZXR1cm4gYWNjO1xuICB9XG5cbiAgcmV0dXJuIGRlZXBtZXJnZShhY2MsIGl0ZW0sIHtcbiAgICBjbG9uZTogZmFsc2UgLy8gTm8gbmVlZCB0byBjbG9uZSBkZWVwLCBpdCdzIHdheSBmYXN0ZXIuXG5cbiAgfSk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IG1lcmdlOyIsImltcG9ydCBfZGVmaW5lUHJvcGVydHkgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2RlZmluZVByb3BlcnR5XCI7XG5pbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNyZWF0ZU1peGlucyhicmVha3BvaW50cywgc3BhY2luZywgbWl4aW5zKSB7XG4gIHZhciBfdG9vbGJhcjtcblxuICByZXR1cm4gX2V4dGVuZHMoe1xuICAgIGd1dHRlcnM6IGZ1bmN0aW9uIGd1dHRlcnMoKSB7XG4gICAgICB2YXIgc3R5bGVzID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB7fTtcbiAgICAgIC8vIFRvIGRlcHJlY2F0ZSBpbiB2NC4xXG4gICAgICAvLyAgICAgICB3YXJuaW5nKFxuICAgICAgLy8gICAgICAgICBmYWxzZSxcbiAgICAgIC8vICAgICAgICAgW1xuICAgICAgLy8gICAgICAgICAgICdNYXRlcmlhbC1VSTogVGhlbWUubWl4aW5zLmd1dHRlcnMoKSBpcyBkZXByZWNhdGVkLicsXG4gICAgICAvLyAgICAgICAgICAgJ1lvdSBjYW4gdXNlIHRoZSBzb3VyY2Ugb2YgdGhlIG1peGluIGRpcmVjdGx5OicsXG4gICAgICAvLyAgICAgICAgICAgYFxuICAgICAgLy8gcGFkZGluZ0xlZnQ6IHRoZW1lLnNwYWNpbmcoMiksXG4gICAgICAvLyBwYWRkaW5nUmlnaHQ6IHRoZW1lLnNwYWNpbmcoMiksXG4gICAgICAvLyBbdGhlbWUuYnJlYWtwb2ludHMudXAoJ3NtJyldOiB7XG4gICAgICAvLyAgIHBhZGRpbmdMZWZ0OiB0aGVtZS5zcGFjaW5nKDMpLFxuICAgICAgLy8gICBwYWRkaW5nUmlnaHQ6IHRoZW1lLnNwYWNpbmcoMyksXG4gICAgICAvLyB9LFxuICAgICAgLy8gYCxcbiAgICAgIC8vICAgICAgICAgXS5qb2luKCdcXG4nKSxcbiAgICAgIC8vICAgICAgICk7XG4gICAgICByZXR1cm4gX2V4dGVuZHMoe1xuICAgICAgICBwYWRkaW5nTGVmdDogc3BhY2luZygyKSxcbiAgICAgICAgcGFkZGluZ1JpZ2h0OiBzcGFjaW5nKDIpXG4gICAgICB9LCBzdHlsZXMsIF9kZWZpbmVQcm9wZXJ0eSh7fSwgYnJlYWtwb2ludHMudXAoJ3NtJyksIF9leHRlbmRzKHtcbiAgICAgICAgcGFkZGluZ0xlZnQ6IHNwYWNpbmcoMyksXG4gICAgICAgIHBhZGRpbmdSaWdodDogc3BhY2luZygzKVxuICAgICAgfSwgc3R5bGVzW2JyZWFrcG9pbnRzLnVwKCdzbScpXSkpKTtcbiAgICB9LFxuICAgIHRvb2xiYXI6IChfdG9vbGJhciA9IHtcbiAgICAgIG1pbkhlaWdodDogNTZcbiAgICB9LCBfZGVmaW5lUHJvcGVydHkoX3Rvb2xiYXIsIFwiXCIuY29uY2F0KGJyZWFrcG9pbnRzLnVwKCd4cycpLCBcIiBhbmQgKG9yaWVudGF0aW9uOiBsYW5kc2NhcGUpXCIpLCB7XG4gICAgICBtaW5IZWlnaHQ6IDQ4XG4gICAgfSksIF9kZWZpbmVQcm9wZXJ0eShfdG9vbGJhciwgYnJlYWtwb2ludHMudXAoJ3NtJyksIHtcbiAgICAgIG1pbkhlaWdodDogNjRcbiAgICB9KSwgX3Rvb2xiYXIpXG4gIH0sIG1peGlucyk7XG59IiwidmFyIGNvbW1vbiA9IHtcbiAgYmxhY2s6ICcjMDAwJyxcbiAgd2hpdGU6ICcjZmZmJ1xufTtcbmV4cG9ydCBkZWZhdWx0IGNvbW1vbjsiLCJ2YXIgZ3JleSA9IHtcbiAgNTA6ICcjZmFmYWZhJyxcbiAgMTAwOiAnI2Y1ZjVmNScsXG4gIDIwMDogJyNlZWVlZWUnLFxuICAzMDA6ICcjZTBlMGUwJyxcbiAgNDAwOiAnI2JkYmRiZCcsXG4gIDUwMDogJyM5ZTllOWUnLFxuICA2MDA6ICcjNzU3NTc1JyxcbiAgNzAwOiAnIzYxNjE2MScsXG4gIDgwMDogJyM0MjQyNDInLFxuICA5MDA6ICcjMjEyMTIxJyxcbiAgQTEwMDogJyNkNWQ1ZDUnLFxuICBBMjAwOiAnI2FhYWFhYScsXG4gIEE0MDA6ICcjMzAzMDMwJyxcbiAgQTcwMDogJyM2MTYxNjEnXG59O1xuZXhwb3J0IGRlZmF1bHQgZ3JleTsiLCJ2YXIgaW5kaWdvID0ge1xuICA1MDogJyNlOGVhZjYnLFxuICAxMDA6ICcjYzVjYWU5JyxcbiAgMjAwOiAnIzlmYThkYScsXG4gIDMwMDogJyM3OTg2Y2InLFxuICA0MDA6ICcjNWM2YmMwJyxcbiAgNTAwOiAnIzNmNTFiNScsXG4gIDYwMDogJyMzOTQ5YWInLFxuICA3MDA6ICcjMzAzZjlmJyxcbiAgODAwOiAnIzI4MzU5MycsXG4gIDkwMDogJyMxYTIzN2UnLFxuICBBMTAwOiAnIzhjOWVmZicsXG4gIEEyMDA6ICcjNTM2ZGZlJyxcbiAgQTQwMDogJyMzZDVhZmUnLFxuICBBNzAwOiAnIzMwNGZmZSdcbn07XG5leHBvcnQgZGVmYXVsdCBpbmRpZ287IiwidmFyIHBpbmsgPSB7XG4gIDUwOiAnI2ZjZTRlYycsXG4gIDEwMDogJyNmOGJiZDAnLFxuICAyMDA6ICcjZjQ4ZmIxJyxcbiAgMzAwOiAnI2YwNjI5MicsXG4gIDQwMDogJyNlYzQwN2EnLFxuICA1MDA6ICcjZTkxZTYzJyxcbiAgNjAwOiAnI2Q4MWI2MCcsXG4gIDcwMDogJyNjMjE4NWInLFxuICA4MDA6ICcjYWQxNDU3JyxcbiAgOTAwOiAnIzg4MGU0ZicsXG4gIEExMDA6ICcjZmY4MGFiJyxcbiAgQTIwMDogJyNmZjQwODEnLFxuICBBNDAwOiAnI2Y1MDA1NycsXG4gIEE3MDA6ICcjYzUxMTYyJ1xufTtcbmV4cG9ydCBkZWZhdWx0IHBpbms7IiwidmFyIHJlZCA9IHtcbiAgNTA6ICcjZmZlYmVlJyxcbiAgMTAwOiAnI2ZmY2RkMicsXG4gIDIwMDogJyNlZjlhOWEnLFxuICAzMDA6ICcjZTU3MzczJyxcbiAgNDAwOiAnI2VmNTM1MCcsXG4gIDUwMDogJyNmNDQzMzYnLFxuICA2MDA6ICcjZTUzOTM1JyxcbiAgNzAwOiAnI2QzMmYyZicsXG4gIDgwMDogJyNjNjI4MjgnLFxuICA5MDA6ICcjYjcxYzFjJyxcbiAgQTEwMDogJyNmZjhhODAnLFxuICBBMjAwOiAnI2ZmNTI1MicsXG4gIEE0MDA6ICcjZmYxNzQ0JyxcbiAgQTcwMDogJyNkNTAwMDAnXG59O1xuZXhwb3J0IGRlZmF1bHQgcmVkOyIsInZhciBvcmFuZ2UgPSB7XG4gIDUwOiAnI2ZmZjNlMCcsXG4gIDEwMDogJyNmZmUwYjInLFxuICAyMDA6ICcjZmZjYzgwJyxcbiAgMzAwOiAnI2ZmYjc0ZCcsXG4gIDQwMDogJyNmZmE3MjYnLFxuICA1MDA6ICcjZmY5ODAwJyxcbiAgNjAwOiAnI2ZiOGMwMCcsXG4gIDcwMDogJyNmNTdjMDAnLFxuICA4MDA6ICcjZWY2YzAwJyxcbiAgOTAwOiAnI2U2NTEwMCcsXG4gIEExMDA6ICcjZmZkMTgwJyxcbiAgQTIwMDogJyNmZmFiNDAnLFxuICBBNDAwOiAnI2ZmOTEwMCcsXG4gIEE3MDA6ICcjZmY2ZDAwJ1xufTtcbmV4cG9ydCBkZWZhdWx0IG9yYW5nZTsiLCJ2YXIgYmx1ZSA9IHtcbiAgNTA6ICcjZTNmMmZkJyxcbiAgMTAwOiAnI2JiZGVmYicsXG4gIDIwMDogJyM5MGNhZjknLFxuICAzMDA6ICcjNjRiNWY2JyxcbiAgNDAwOiAnIzQyYTVmNScsXG4gIDUwMDogJyMyMTk2ZjMnLFxuICA2MDA6ICcjMWU4OGU1JyxcbiAgNzAwOiAnIzE5NzZkMicsXG4gIDgwMDogJyMxNTY1YzAnLFxuICA5MDA6ICcjMGQ0N2ExJyxcbiAgQTEwMDogJyM4MmIxZmYnLFxuICBBMjAwOiAnIzQ0OGFmZicsXG4gIEE0MDA6ICcjMjk3OWZmJyxcbiAgQTcwMDogJyMyOTYyZmYnXG59O1xuZXhwb3J0IGRlZmF1bHQgYmx1ZTsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzXCI7XG5pbXBvcnQgeyBmb3JtYXRNdWlFcnJvck1lc3NhZ2UgYXMgX2Zvcm1hdE11aUVycm9yTWVzc2FnZSB9IGZyb20gXCJAbWF0ZXJpYWwtdWkvdXRpbHNcIjtcbmltcG9ydCB7IGRlZXBtZXJnZSB9IGZyb20gJ0BtYXRlcmlhbC11aS91dGlscyc7XG5pbXBvcnQgY29tbW9uIGZyb20gJy4uL2NvbG9ycy9jb21tb24nO1xuaW1wb3J0IGdyZXkgZnJvbSAnLi4vY29sb3JzL2dyZXknO1xuaW1wb3J0IGluZGlnbyBmcm9tICcuLi9jb2xvcnMvaW5kaWdvJztcbmltcG9ydCBwaW5rIGZyb20gJy4uL2NvbG9ycy9waW5rJztcbmltcG9ydCByZWQgZnJvbSAnLi4vY29sb3JzL3JlZCc7XG5pbXBvcnQgb3JhbmdlIGZyb20gJy4uL2NvbG9ycy9vcmFuZ2UnO1xuaW1wb3J0IGJsdWUgZnJvbSAnLi4vY29sb3JzL2JsdWUnO1xuaW1wb3J0IGdyZWVuIGZyb20gJy4uL2NvbG9ycy9ncmVlbic7XG5pbXBvcnQgeyBkYXJrZW4sIGdldENvbnRyYXN0UmF0aW8sIGxpZ2h0ZW4gfSBmcm9tICcuL2NvbG9yTWFuaXB1bGF0b3InO1xuZXhwb3J0IHZhciBsaWdodCA9IHtcbiAgLy8gVGhlIGNvbG9ycyB1c2VkIHRvIHN0eWxlIHRoZSB0ZXh0LlxuICB0ZXh0OiB7XG4gICAgLy8gVGhlIG1vc3QgaW1wb3J0YW50IHRleHQuXG4gICAgcHJpbWFyeTogJ3JnYmEoMCwgMCwgMCwgMC44NyknLFxuICAgIC8vIFNlY29uZGFyeSB0ZXh0LlxuICAgIHNlY29uZGFyeTogJ3JnYmEoMCwgMCwgMCwgMC41NCknLFxuICAgIC8vIERpc2FibGVkIHRleHQgaGF2ZSBldmVuIGxvd2VyIHZpc3VhbCBwcm9taW5lbmNlLlxuICAgIGRpc2FibGVkOiAncmdiYSgwLCAwLCAwLCAwLjM4KScsXG4gICAgLy8gVGV4dCBoaW50cy5cbiAgICBoaW50OiAncmdiYSgwLCAwLCAwLCAwLjM4KSdcbiAgfSxcbiAgLy8gVGhlIGNvbG9yIHVzZWQgdG8gZGl2aWRlIGRpZmZlcmVudCBlbGVtZW50cy5cbiAgZGl2aWRlcjogJ3JnYmEoMCwgMCwgMCwgMC4xMiknLFxuICAvLyBUaGUgYmFja2dyb3VuZCBjb2xvcnMgdXNlZCB0byBzdHlsZSB0aGUgc3VyZmFjZXMuXG4gIC8vIENvbnNpc3RlbmN5IGJldHdlZW4gdGhlc2UgdmFsdWVzIGlzIGltcG9ydGFudC5cbiAgYmFja2dyb3VuZDoge1xuICAgIHBhcGVyOiBjb21tb24ud2hpdGUsXG4gICAgZGVmYXVsdDogZ3JleVs1MF1cbiAgfSxcbiAgLy8gVGhlIGNvbG9ycyB1c2VkIHRvIHN0eWxlIHRoZSBhY3Rpb24gZWxlbWVudHMuXG4gIGFjdGlvbjoge1xuICAgIC8vIFRoZSBjb2xvciBvZiBhbiBhY3RpdmUgYWN0aW9uIGxpa2UgYW4gaWNvbiBidXR0b24uXG4gICAgYWN0aXZlOiAncmdiYSgwLCAwLCAwLCAwLjU0KScsXG4gICAgLy8gVGhlIGNvbG9yIG9mIGFuIGhvdmVyZWQgYWN0aW9uLlxuICAgIGhvdmVyOiAncmdiYSgwLCAwLCAwLCAwLjA0KScsXG4gICAgaG92ZXJPcGFjaXR5OiAwLjA0LFxuICAgIC8vIFRoZSBjb2xvciBvZiBhIHNlbGVjdGVkIGFjdGlvbi5cbiAgICBzZWxlY3RlZDogJ3JnYmEoMCwgMCwgMCwgMC4wOCknLFxuICAgIHNlbGVjdGVkT3BhY2l0eTogMC4wOCxcbiAgICAvLyBUaGUgY29sb3Igb2YgYSBkaXNhYmxlZCBhY3Rpb24uXG4gICAgZGlzYWJsZWQ6ICdyZ2JhKDAsIDAsIDAsIDAuMjYpJyxcbiAgICAvLyBUaGUgYmFja2dyb3VuZCBjb2xvciBvZiBhIGRpc2FibGVkIGFjdGlvbi5cbiAgICBkaXNhYmxlZEJhY2tncm91bmQ6ICdyZ2JhKDAsIDAsIDAsIDAuMTIpJyxcbiAgICBkaXNhYmxlZE9wYWNpdHk6IDAuMzgsXG4gICAgZm9jdXM6ICdyZ2JhKDAsIDAsIDAsIDAuMTIpJyxcbiAgICBmb2N1c09wYWNpdHk6IDAuMTIsXG4gICAgYWN0aXZhdGVkT3BhY2l0eTogMC4xMlxuICB9XG59O1xuZXhwb3J0IHZhciBkYXJrID0ge1xuICB0ZXh0OiB7XG4gICAgcHJpbWFyeTogY29tbW9uLndoaXRlLFxuICAgIHNlY29uZGFyeTogJ3JnYmEoMjU1LCAyNTUsIDI1NSwgMC43KScsXG4gICAgZGlzYWJsZWQ6ICdyZ2JhKDI1NSwgMjU1LCAyNTUsIDAuNSknLFxuICAgIGhpbnQ6ICdyZ2JhKDI1NSwgMjU1LCAyNTUsIDAuNSknLFxuICAgIGljb246ICdyZ2JhKDI1NSwgMjU1LCAyNTUsIDAuNSknXG4gIH0sXG4gIGRpdmlkZXI6ICdyZ2JhKDI1NSwgMjU1LCAyNTUsIDAuMTIpJyxcbiAgYmFja2dyb3VuZDoge1xuICAgIHBhcGVyOiBncmV5WzgwMF0sXG4gICAgZGVmYXVsdDogJyMzMDMwMzAnXG4gIH0sXG4gIGFjdGlvbjoge1xuICAgIGFjdGl2ZTogY29tbW9uLndoaXRlLFxuICAgIGhvdmVyOiAncmdiYSgyNTUsIDI1NSwgMjU1LCAwLjA4KScsXG4gICAgaG92ZXJPcGFjaXR5OiAwLjA4LFxuICAgIHNlbGVjdGVkOiAncmdiYSgyNTUsIDI1NSwgMjU1LCAwLjE2KScsXG4gICAgc2VsZWN0ZWRPcGFjaXR5OiAwLjE2LFxuICAgIGRpc2FibGVkOiAncmdiYSgyNTUsIDI1NSwgMjU1LCAwLjMpJyxcbiAgICBkaXNhYmxlZEJhY2tncm91bmQ6ICdyZ2JhKDI1NSwgMjU1LCAyNTUsIDAuMTIpJyxcbiAgICBkaXNhYmxlZE9wYWNpdHk6IDAuMzgsXG4gICAgZm9jdXM6ICdyZ2JhKDI1NSwgMjU1LCAyNTUsIDAuMTIpJyxcbiAgICBmb2N1c09wYWNpdHk6IDAuMTIsXG4gICAgYWN0aXZhdGVkT3BhY2l0eTogMC4yNFxuICB9XG59O1xuXG5mdW5jdGlvbiBhZGRMaWdodE9yRGFyayhpbnRlbnQsIGRpcmVjdGlvbiwgc2hhZGUsIHRvbmFsT2Zmc2V0KSB7XG4gIHZhciB0b25hbE9mZnNldExpZ2h0ID0gdG9uYWxPZmZzZXQubGlnaHQgfHwgdG9uYWxPZmZzZXQ7XG4gIHZhciB0b25hbE9mZnNldERhcmsgPSB0b25hbE9mZnNldC5kYXJrIHx8IHRvbmFsT2Zmc2V0ICogMS41O1xuXG4gIGlmICghaW50ZW50W2RpcmVjdGlvbl0pIHtcbiAgICBpZiAoaW50ZW50Lmhhc093blByb3BlcnR5KHNoYWRlKSkge1xuICAgICAgaW50ZW50W2RpcmVjdGlvbl0gPSBpbnRlbnRbc2hhZGVdO1xuICAgIH0gZWxzZSBpZiAoZGlyZWN0aW9uID09PSAnbGlnaHQnKSB7XG4gICAgICBpbnRlbnQubGlnaHQgPSBsaWdodGVuKGludGVudC5tYWluLCB0b25hbE9mZnNldExpZ2h0KTtcbiAgICB9IGVsc2UgaWYgKGRpcmVjdGlvbiA9PT0gJ2RhcmsnKSB7XG4gICAgICBpbnRlbnQuZGFyayA9IGRhcmtlbihpbnRlbnQubWFpbiwgdG9uYWxPZmZzZXREYXJrKTtcbiAgICB9XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY3JlYXRlUGFsZXR0ZShwYWxldHRlKSB7XG4gIHZhciBfcGFsZXR0ZSRwcmltYXJ5ID0gcGFsZXR0ZS5wcmltYXJ5LFxuICAgICAgcHJpbWFyeSA9IF9wYWxldHRlJHByaW1hcnkgPT09IHZvaWQgMCA/IHtcbiAgICBsaWdodDogaW5kaWdvWzMwMF0sXG4gICAgbWFpbjogaW5kaWdvWzUwMF0sXG4gICAgZGFyazogaW5kaWdvWzcwMF1cbiAgfSA6IF9wYWxldHRlJHByaW1hcnksXG4gICAgICBfcGFsZXR0ZSRzZWNvbmRhcnkgPSBwYWxldHRlLnNlY29uZGFyeSxcbiAgICAgIHNlY29uZGFyeSA9IF9wYWxldHRlJHNlY29uZGFyeSA9PT0gdm9pZCAwID8ge1xuICAgIGxpZ2h0OiBwaW5rLkEyMDAsXG4gICAgbWFpbjogcGluay5BNDAwLFxuICAgIGRhcms6IHBpbmsuQTcwMFxuICB9IDogX3BhbGV0dGUkc2Vjb25kYXJ5LFxuICAgICAgX3BhbGV0dGUkZXJyb3IgPSBwYWxldHRlLmVycm9yLFxuICAgICAgZXJyb3IgPSBfcGFsZXR0ZSRlcnJvciA9PT0gdm9pZCAwID8ge1xuICAgIGxpZ2h0OiByZWRbMzAwXSxcbiAgICBtYWluOiByZWRbNTAwXSxcbiAgICBkYXJrOiByZWRbNzAwXVxuICB9IDogX3BhbGV0dGUkZXJyb3IsXG4gICAgICBfcGFsZXR0ZSR3YXJuaW5nID0gcGFsZXR0ZS53YXJuaW5nLFxuICAgICAgd2FybmluZyA9IF9wYWxldHRlJHdhcm5pbmcgPT09IHZvaWQgMCA/IHtcbiAgICBsaWdodDogb3JhbmdlWzMwMF0sXG4gICAgbWFpbjogb3JhbmdlWzUwMF0sXG4gICAgZGFyazogb3JhbmdlWzcwMF1cbiAgfSA6IF9wYWxldHRlJHdhcm5pbmcsXG4gICAgICBfcGFsZXR0ZSRpbmZvID0gcGFsZXR0ZS5pbmZvLFxuICAgICAgaW5mbyA9IF9wYWxldHRlJGluZm8gPT09IHZvaWQgMCA/IHtcbiAgICBsaWdodDogYmx1ZVszMDBdLFxuICAgIG1haW46IGJsdWVbNTAwXSxcbiAgICBkYXJrOiBibHVlWzcwMF1cbiAgfSA6IF9wYWxldHRlJGluZm8sXG4gICAgICBfcGFsZXR0ZSRzdWNjZXNzID0gcGFsZXR0ZS5zdWNjZXNzLFxuICAgICAgc3VjY2VzcyA9IF9wYWxldHRlJHN1Y2Nlc3MgPT09IHZvaWQgMCA/IHtcbiAgICBsaWdodDogZ3JlZW5bMzAwXSxcbiAgICBtYWluOiBncmVlbls1MDBdLFxuICAgIGRhcms6IGdyZWVuWzcwMF1cbiAgfSA6IF9wYWxldHRlJHN1Y2Nlc3MsXG4gICAgICBfcGFsZXR0ZSR0eXBlID0gcGFsZXR0ZS50eXBlLFxuICAgICAgdHlwZSA9IF9wYWxldHRlJHR5cGUgPT09IHZvaWQgMCA/ICdsaWdodCcgOiBfcGFsZXR0ZSR0eXBlLFxuICAgICAgX3BhbGV0dGUkY29udHJhc3RUaHJlID0gcGFsZXR0ZS5jb250cmFzdFRocmVzaG9sZCxcbiAgICAgIGNvbnRyYXN0VGhyZXNob2xkID0gX3BhbGV0dGUkY29udHJhc3RUaHJlID09PSB2b2lkIDAgPyAzIDogX3BhbGV0dGUkY29udHJhc3RUaHJlLFxuICAgICAgX3BhbGV0dGUkdG9uYWxPZmZzZXQgPSBwYWxldHRlLnRvbmFsT2Zmc2V0LFxuICAgICAgdG9uYWxPZmZzZXQgPSBfcGFsZXR0ZSR0b25hbE9mZnNldCA9PT0gdm9pZCAwID8gMC4yIDogX3BhbGV0dGUkdG9uYWxPZmZzZXQsXG4gICAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhwYWxldHRlLCBbXCJwcmltYXJ5XCIsIFwic2Vjb25kYXJ5XCIsIFwiZXJyb3JcIiwgXCJ3YXJuaW5nXCIsIFwiaW5mb1wiLCBcInN1Y2Nlc3NcIiwgXCJ0eXBlXCIsIFwiY29udHJhc3RUaHJlc2hvbGRcIiwgXCJ0b25hbE9mZnNldFwiXSk7IC8vIFVzZSB0aGUgc2FtZSBsb2dpYyBhc1xuICAvLyBCb290c3RyYXA6IGh0dHBzOi8vZ2l0aHViLmNvbS90d2JzL2Jvb3RzdHJhcC9ibG9iLzFkNmUzNzEwZGQ0NDdkZTFhMjAwZjI5ZThmYTUyMWY4YTA5MDhmNzAvc2Nzcy9fZnVuY3Rpb25zLnNjc3MjTDU5XG4gIC8vIGFuZCBtYXRlcmlhbC1jb21wb25lbnRzLXdlYiBodHRwczovL2dpdGh1Yi5jb20vbWF0ZXJpYWwtY29tcG9uZW50cy9tYXRlcmlhbC1jb21wb25lbnRzLXdlYi9ibG9iL2FjNDZiODg2M2M0ZGFiOWZjMjJjNGM2NjJkYzZiZDFiNjVkZDY1MmYvcGFja2FnZXMvbWRjLXRoZW1lL19mdW5jdGlvbnMuc2NzcyNMNTRcblxuXG4gIGZ1bmN0aW9uIGdldENvbnRyYXN0VGV4dChiYWNrZ3JvdW5kKSB7XG4gICAgdmFyIGNvbnRyYXN0VGV4dCA9IGdldENvbnRyYXN0UmF0aW8oYmFja2dyb3VuZCwgZGFyay50ZXh0LnByaW1hcnkpID49IGNvbnRyYXN0VGhyZXNob2xkID8gZGFyay50ZXh0LnByaW1hcnkgOiBsaWdodC50ZXh0LnByaW1hcnk7XG5cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgdmFyIGNvbnRyYXN0ID0gZ2V0Q29udHJhc3RSYXRpbyhiYWNrZ3JvdW5kLCBjb250cmFzdFRleHQpO1xuXG4gICAgICBpZiAoY29udHJhc3QgPCAzKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoW1wiTWF0ZXJpYWwtVUk6IFRoZSBjb250cmFzdCByYXRpbyBvZiBcIi5jb25jYXQoY29udHJhc3QsIFwiOjEgZm9yIFwiKS5jb25jYXQoY29udHJhc3RUZXh0LCBcIiBvbiBcIikuY29uY2F0KGJhY2tncm91bmQpLCAnZmFsbHMgYmVsb3cgdGhlIFdDQUcgcmVjb21tZW5kZWQgYWJzb2x1dGUgbWluaW11bSBjb250cmFzdCByYXRpbyBvZiAzOjEuJywgJ2h0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDA4L1JFQy1XQ0FHMjAtMjAwODEyMTEvI3Zpc3VhbC1hdWRpby1jb250cmFzdC1jb250cmFzdCddLmpvaW4oJ1xcbicpKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gY29udHJhc3RUZXh0O1xuICB9XG5cbiAgdmFyIGF1Z21lbnRDb2xvciA9IGZ1bmN0aW9uIGF1Z21lbnRDb2xvcihjb2xvcikge1xuICAgIHZhciBtYWluU2hhZGUgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IDUwMDtcbiAgICB2YXIgbGlnaHRTaGFkZSA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDogMzAwO1xuICAgIHZhciBkYXJrU2hhZGUgPSBhcmd1bWVudHMubGVuZ3RoID4gMyAmJiBhcmd1bWVudHNbM10gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1szXSA6IDcwMDtcbiAgICBjb2xvciA9IF9leHRlbmRzKHt9LCBjb2xvcik7XG5cbiAgICBpZiAoIWNvbG9yLm1haW4gJiYgY29sb3JbbWFpblNoYWRlXSkge1xuICAgICAgY29sb3IubWFpbiA9IGNvbG9yW21haW5TaGFkZV07XG4gICAgfVxuXG4gICAgaWYgKCFjb2xvci5tYWluKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gXCJNYXRlcmlhbC1VSTogVGhlIGNvbG9yIHByb3ZpZGVkIHRvIGF1Z21lbnRDb2xvcihjb2xvcikgaXMgaW52YWxpZC5cXG5UaGUgY29sb3Igb2JqZWN0IG5lZWRzIHRvIGhhdmUgYSBgbWFpbmAgcHJvcGVydHkgb3IgYSBgXCIuY29uY2F0KG1haW5TaGFkZSwgXCJgIHByb3BlcnR5LlwiKSA6IF9mb3JtYXRNdWlFcnJvck1lc3NhZ2UoNCwgbWFpblNoYWRlKSk7XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBjb2xvci5tYWluICE9PSAnc3RyaW5nJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFwiTWF0ZXJpYWwtVUk6IFRoZSBjb2xvciBwcm92aWRlZCB0byBhdWdtZW50Q29sb3IoY29sb3IpIGlzIGludmFsaWQuXFxuYGNvbG9yLm1haW5gIHNob3VsZCBiZSBhIHN0cmluZywgYnV0IGBcIi5jb25jYXQoSlNPTi5zdHJpbmdpZnkoY29sb3IubWFpbiksIFwiYCB3YXMgcHJvdmlkZWQgaW5zdGVhZC5cXG5cXG5EaWQgeW91IGludGVuZCB0byB1c2Ugb25lIG9mIHRoZSBmb2xsb3dpbmcgYXBwcm9hY2hlcz9cXG5cXG5pbXBvcnQge1xceEEwZ3JlZW4gfSBmcm9tIFxcXCJAbWF0ZXJpYWwtdWkvY29yZS9jb2xvcnNcXFwiO1xcblxcbmNvbnN0IHRoZW1lMSA9IGNyZWF0ZU11aVRoZW1lKHsgcGFsZXR0ZToge1xcbiAgcHJpbWFyeTogZ3JlZW4sXFxufSB9KTtcXG5cXG5jb25zdCB0aGVtZTIgPSBjcmVhdGVNdWlUaGVtZSh7IHBhbGV0dGU6IHtcXG4gIHByaW1hcnk6IHsgbWFpbjogZ3JlZW5bNTAwXSB9LFxcbn0gfSk7XCIpIDogX2Zvcm1hdE11aUVycm9yTWVzc2FnZSg1LCBKU09OLnN0cmluZ2lmeShjb2xvci5tYWluKSkpO1xuICAgIH1cblxuICAgIGFkZExpZ2h0T3JEYXJrKGNvbG9yLCAnbGlnaHQnLCBsaWdodFNoYWRlLCB0b25hbE9mZnNldCk7XG4gICAgYWRkTGlnaHRPckRhcmsoY29sb3IsICdkYXJrJywgZGFya1NoYWRlLCB0b25hbE9mZnNldCk7XG5cbiAgICBpZiAoIWNvbG9yLmNvbnRyYXN0VGV4dCkge1xuICAgICAgY29sb3IuY29udHJhc3RUZXh0ID0gZ2V0Q29udHJhc3RUZXh0KGNvbG9yLm1haW4pO1xuICAgIH1cblxuICAgIHJldHVybiBjb2xvcjtcbiAgfTtcblxuICB2YXIgdHlwZXMgPSB7XG4gICAgZGFyazogZGFyayxcbiAgICBsaWdodDogbGlnaHRcbiAgfTtcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGlmICghdHlwZXNbdHlwZV0pIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoXCJNYXRlcmlhbC1VSTogVGhlIHBhbGV0dGUgdHlwZSBgXCIuY29uY2F0KHR5cGUsIFwiYCBpcyBub3Qgc3VwcG9ydGVkLlwiKSk7XG4gICAgfVxuICB9XG5cbiAgdmFyIHBhbGV0dGVPdXRwdXQgPSBkZWVwbWVyZ2UoX2V4dGVuZHMoe1xuICAgIC8vIEEgY29sbGVjdGlvbiBvZiBjb21tb24gY29sb3JzLlxuICAgIGNvbW1vbjogY29tbW9uLFxuICAgIC8vIFRoZSBwYWxldHRlIHR5cGUsIGNhbiBiZSBsaWdodCBvciBkYXJrLlxuICAgIHR5cGU6IHR5cGUsXG4gICAgLy8gVGhlIGNvbG9ycyB1c2VkIHRvIHJlcHJlc2VudCBwcmltYXJ5IGludGVyZmFjZSBlbGVtZW50cyBmb3IgYSB1c2VyLlxuICAgIHByaW1hcnk6IGF1Z21lbnRDb2xvcihwcmltYXJ5KSxcbiAgICAvLyBUaGUgY29sb3JzIHVzZWQgdG8gcmVwcmVzZW50IHNlY29uZGFyeSBpbnRlcmZhY2UgZWxlbWVudHMgZm9yIGEgdXNlci5cbiAgICBzZWNvbmRhcnk6IGF1Z21lbnRDb2xvcihzZWNvbmRhcnksICdBNDAwJywgJ0EyMDAnLCAnQTcwMCcpLFxuICAgIC8vIFRoZSBjb2xvcnMgdXNlZCB0byByZXByZXNlbnQgaW50ZXJmYWNlIGVsZW1lbnRzIHRoYXQgdGhlIHVzZXIgc2hvdWxkIGJlIG1hZGUgYXdhcmUgb2YuXG4gICAgZXJyb3I6IGF1Z21lbnRDb2xvcihlcnJvciksXG4gICAgLy8gVGhlIGNvbG9ycyB1c2VkIHRvIHJlcHJlc2VudCBwb3RlbnRpYWxseSBkYW5nZXJvdXMgYWN0aW9ucyBvciBpbXBvcnRhbnQgbWVzc2FnZXMuXG4gICAgd2FybmluZzogYXVnbWVudENvbG9yKHdhcm5pbmcpLFxuICAgIC8vIFRoZSBjb2xvcnMgdXNlZCB0byBwcmVzZW50IGluZm9ybWF0aW9uIHRvIHRoZSB1c2VyIHRoYXQgaXMgbmV1dHJhbCBhbmQgbm90IG5lY2Vzc2FyaWx5IGltcG9ydGFudC5cbiAgICBpbmZvOiBhdWdtZW50Q29sb3IoaW5mbyksXG4gICAgLy8gVGhlIGNvbG9ycyB1c2VkIHRvIGluZGljYXRlIHRoZSBzdWNjZXNzZnVsIGNvbXBsZXRpb24gb2YgYW4gYWN0aW9uIHRoYXQgdXNlciB0cmlnZ2VyZWQuXG4gICAgc3VjY2VzczogYXVnbWVudENvbG9yKHN1Y2Nlc3MpLFxuICAgIC8vIFRoZSBncmV5IGNvbG9ycy5cbiAgICBncmV5OiBncmV5LFxuICAgIC8vIFVzZWQgYnkgYGdldENvbnRyYXN0VGV4dCgpYCB0byBtYXhpbWl6ZSB0aGUgY29udHJhc3QgYmV0d2VlblxuICAgIC8vIHRoZSBiYWNrZ3JvdW5kIGFuZCB0aGUgdGV4dC5cbiAgICBjb250cmFzdFRocmVzaG9sZDogY29udHJhc3RUaHJlc2hvbGQsXG4gICAgLy8gVGFrZXMgYSBiYWNrZ3JvdW5kIGNvbG9yIGFuZCByZXR1cm5zIHRoZSB0ZXh0IGNvbG9yIHRoYXQgbWF4aW1pemVzIHRoZSBjb250cmFzdC5cbiAgICBnZXRDb250cmFzdFRleHQ6IGdldENvbnRyYXN0VGV4dCxcbiAgICAvLyBHZW5lcmF0ZSBhIHJpY2ggY29sb3Igb2JqZWN0LlxuICAgIGF1Z21lbnRDb2xvcjogYXVnbWVudENvbG9yLFxuICAgIC8vIFVzZWQgYnkgdGhlIGZ1bmN0aW9ucyBiZWxvdyB0byBzaGlmdCBhIGNvbG9yJ3MgbHVtaW5hbmNlIGJ5IGFwcHJveGltYXRlbHlcbiAgICAvLyB0d28gaW5kZXhlcyB3aXRoaW4gaXRzIHRvbmFsIHBhbGV0dGUuXG4gICAgLy8gRS5nLiwgc2hpZnQgZnJvbSBSZWQgNTAwIHRvIFJlZCAzMDAgb3IgUmVkIDcwMC5cbiAgICB0b25hbE9mZnNldDogdG9uYWxPZmZzZXRcbiAgfSwgdHlwZXNbdHlwZV0pLCBvdGhlcik7XG4gIHJldHVybiBwYWxldHRlT3V0cHV0O1xufSIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNcIjtcbmltcG9ydCB7IGRlZXBtZXJnZSB9IGZyb20gJ0BtYXRlcmlhbC11aS91dGlscyc7XG5cbmZ1bmN0aW9uIHJvdW5kKHZhbHVlKSB7XG4gIHJldHVybiBNYXRoLnJvdW5kKHZhbHVlICogMWU1KSAvIDFlNTtcbn1cblxudmFyIGNhc2VBbGxDYXBzID0ge1xuICB0ZXh0VHJhbnNmb3JtOiAndXBwZXJjYXNlJ1xufTtcbnZhciBkZWZhdWx0Rm9udEZhbWlseSA9ICdcIlJvYm90b1wiLCBcIkhlbHZldGljYVwiLCBcIkFyaWFsXCIsIHNhbnMtc2VyaWYnO1xuLyoqXG4gKiBAc2VlIEBsaW5re2h0dHBzOi8vbWF0ZXJpYWwuaW8vZGVzaWduL3R5cG9ncmFwaHkvdGhlLXR5cGUtc3lzdGVtLmh0bWx9XG4gKiBAc2VlIEBsaW5re2h0dHBzOi8vbWF0ZXJpYWwuaW8vZGVzaWduL3R5cG9ncmFwaHkvdW5kZXJzdGFuZGluZy10eXBvZ3JhcGh5Lmh0bWx9XG4gKi9cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY3JlYXRlVHlwb2dyYXBoeShwYWxldHRlLCB0eXBvZ3JhcGh5KSB7XG4gIHZhciBfcmVmID0gdHlwZW9mIHR5cG9ncmFwaHkgPT09ICdmdW5jdGlvbicgPyB0eXBvZ3JhcGh5KHBhbGV0dGUpIDogdHlwb2dyYXBoeSxcbiAgICAgIF9yZWYkZm9udEZhbWlseSA9IF9yZWYuZm9udEZhbWlseSxcbiAgICAgIGZvbnRGYW1pbHkgPSBfcmVmJGZvbnRGYW1pbHkgPT09IHZvaWQgMCA/IGRlZmF1bHRGb250RmFtaWx5IDogX3JlZiRmb250RmFtaWx5LFxuICAgICAgX3JlZiRmb250U2l6ZSA9IF9yZWYuZm9udFNpemUsXG4gICAgICBmb250U2l6ZSA9IF9yZWYkZm9udFNpemUgPT09IHZvaWQgMCA/IDE0IDogX3JlZiRmb250U2l6ZSxcbiAgICAgIF9yZWYkZm9udFdlaWdodExpZ2h0ID0gX3JlZi5mb250V2VpZ2h0TGlnaHQsXG4gICAgICBmb250V2VpZ2h0TGlnaHQgPSBfcmVmJGZvbnRXZWlnaHRMaWdodCA9PT0gdm9pZCAwID8gMzAwIDogX3JlZiRmb250V2VpZ2h0TGlnaHQsXG4gICAgICBfcmVmJGZvbnRXZWlnaHRSZWd1bGEgPSBfcmVmLmZvbnRXZWlnaHRSZWd1bGFyLFxuICAgICAgZm9udFdlaWdodFJlZ3VsYXIgPSBfcmVmJGZvbnRXZWlnaHRSZWd1bGEgPT09IHZvaWQgMCA/IDQwMCA6IF9yZWYkZm9udFdlaWdodFJlZ3VsYSxcbiAgICAgIF9yZWYkZm9udFdlaWdodE1lZGl1bSA9IF9yZWYuZm9udFdlaWdodE1lZGl1bSxcbiAgICAgIGZvbnRXZWlnaHRNZWRpdW0gPSBfcmVmJGZvbnRXZWlnaHRNZWRpdW0gPT09IHZvaWQgMCA/IDUwMCA6IF9yZWYkZm9udFdlaWdodE1lZGl1bSxcbiAgICAgIF9yZWYkZm9udFdlaWdodEJvbGQgPSBfcmVmLmZvbnRXZWlnaHRCb2xkLFxuICAgICAgZm9udFdlaWdodEJvbGQgPSBfcmVmJGZvbnRXZWlnaHRCb2xkID09PSB2b2lkIDAgPyA3MDAgOiBfcmVmJGZvbnRXZWlnaHRCb2xkLFxuICAgICAgX3JlZiRodG1sRm9udFNpemUgPSBfcmVmLmh0bWxGb250U2l6ZSxcbiAgICAgIGh0bWxGb250U2l6ZSA9IF9yZWYkaHRtbEZvbnRTaXplID09PSB2b2lkIDAgPyAxNiA6IF9yZWYkaHRtbEZvbnRTaXplLFxuICAgICAgYWxsVmFyaWFudHMgPSBfcmVmLmFsbFZhcmlhbnRzLFxuICAgICAgcHhUb1JlbTIgPSBfcmVmLnB4VG9SZW0sXG4gICAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhfcmVmLCBbXCJmb250RmFtaWx5XCIsIFwiZm9udFNpemVcIiwgXCJmb250V2VpZ2h0TGlnaHRcIiwgXCJmb250V2VpZ2h0UmVndWxhclwiLCBcImZvbnRXZWlnaHRNZWRpdW1cIiwgXCJmb250V2VpZ2h0Qm9sZFwiLCBcImh0bWxGb250U2l6ZVwiLCBcImFsbFZhcmlhbnRzXCIsIFwicHhUb1JlbVwiXSk7XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBpZiAodHlwZW9mIGZvbnRTaXplICE9PSAnbnVtYmVyJykge1xuICAgICAgY29uc29sZS5lcnJvcignTWF0ZXJpYWwtVUk6IGBmb250U2l6ZWAgaXMgcmVxdWlyZWQgdG8gYmUgYSBudW1iZXIuJyk7XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBodG1sRm9udFNpemUgIT09ICdudW1iZXInKSB7XG4gICAgICBjb25zb2xlLmVycm9yKCdNYXRlcmlhbC1VSTogYGh0bWxGb250U2l6ZWAgaXMgcmVxdWlyZWQgdG8gYmUgYSBudW1iZXIuJyk7XG4gICAgfVxuICB9XG5cbiAgdmFyIGNvZWYgPSBmb250U2l6ZSAvIDE0O1xuXG4gIHZhciBweFRvUmVtID0gcHhUb1JlbTIgfHwgZnVuY3Rpb24gKHNpemUpIHtcbiAgICByZXR1cm4gXCJcIi5jb25jYXQoc2l6ZSAvIGh0bWxGb250U2l6ZSAqIGNvZWYsIFwicmVtXCIpO1xuICB9O1xuXG4gIHZhciBidWlsZFZhcmlhbnQgPSBmdW5jdGlvbiBidWlsZFZhcmlhbnQoZm9udFdlaWdodCwgc2l6ZSwgbGluZUhlaWdodCwgbGV0dGVyU3BhY2luZywgY2FzaW5nKSB7XG4gICAgcmV0dXJuIF9leHRlbmRzKHtcbiAgICAgIGZvbnRGYW1pbHk6IGZvbnRGYW1pbHksXG4gICAgICBmb250V2VpZ2h0OiBmb250V2VpZ2h0LFxuICAgICAgZm9udFNpemU6IHB4VG9SZW0oc2l6ZSksXG4gICAgICAvLyBVbml0bGVzcyBmb2xsb3dpbmcgaHR0cHM6Ly9tZXllcndlYi5jb20vZXJpYy90aG91Z2h0cy8yMDA2LzAyLzA4L3VuaXRsZXNzLWxpbmUtaGVpZ2h0cy9cbiAgICAgIGxpbmVIZWlnaHQ6IGxpbmVIZWlnaHRcbiAgICB9LCBmb250RmFtaWx5ID09PSBkZWZhdWx0Rm9udEZhbWlseSA/IHtcbiAgICAgIGxldHRlclNwYWNpbmc6IFwiXCIuY29uY2F0KHJvdW5kKGxldHRlclNwYWNpbmcgLyBzaXplKSwgXCJlbVwiKVxuICAgIH0gOiB7fSwgY2FzaW5nLCBhbGxWYXJpYW50cyk7XG4gIH07XG5cbiAgdmFyIHZhcmlhbnRzID0ge1xuICAgIGgxOiBidWlsZFZhcmlhbnQoZm9udFdlaWdodExpZ2h0LCA5NiwgMS4xNjcsIC0xLjUpLFxuICAgIGgyOiBidWlsZFZhcmlhbnQoZm9udFdlaWdodExpZ2h0LCA2MCwgMS4yLCAtMC41KSxcbiAgICBoMzogYnVpbGRWYXJpYW50KGZvbnRXZWlnaHRSZWd1bGFyLCA0OCwgMS4xNjcsIDApLFxuICAgIGg0OiBidWlsZFZhcmlhbnQoZm9udFdlaWdodFJlZ3VsYXIsIDM0LCAxLjIzNSwgMC4yNSksXG4gICAgaDU6IGJ1aWxkVmFyaWFudChmb250V2VpZ2h0UmVndWxhciwgMjQsIDEuMzM0LCAwKSxcbiAgICBoNjogYnVpbGRWYXJpYW50KGZvbnRXZWlnaHRNZWRpdW0sIDIwLCAxLjYsIDAuMTUpLFxuICAgIHN1YnRpdGxlMTogYnVpbGRWYXJpYW50KGZvbnRXZWlnaHRSZWd1bGFyLCAxNiwgMS43NSwgMC4xNSksXG4gICAgc3VidGl0bGUyOiBidWlsZFZhcmlhbnQoZm9udFdlaWdodE1lZGl1bSwgMTQsIDEuNTcsIDAuMSksXG4gICAgYm9keTE6IGJ1aWxkVmFyaWFudChmb250V2VpZ2h0UmVndWxhciwgMTYsIDEuNSwgMC4xNSksXG4gICAgYm9keTI6IGJ1aWxkVmFyaWFudChmb250V2VpZ2h0UmVndWxhciwgMTQsIDEuNDMsIDAuMTUpLFxuICAgIGJ1dHRvbjogYnVpbGRWYXJpYW50KGZvbnRXZWlnaHRNZWRpdW0sIDE0LCAxLjc1LCAwLjQsIGNhc2VBbGxDYXBzKSxcbiAgICBjYXB0aW9uOiBidWlsZFZhcmlhbnQoZm9udFdlaWdodFJlZ3VsYXIsIDEyLCAxLjY2LCAwLjQpLFxuICAgIG92ZXJsaW5lOiBidWlsZFZhcmlhbnQoZm9udFdlaWdodFJlZ3VsYXIsIDEyLCAyLjY2LCAxLCBjYXNlQWxsQ2FwcylcbiAgfTtcbiAgcmV0dXJuIGRlZXBtZXJnZShfZXh0ZW5kcyh7XG4gICAgaHRtbEZvbnRTaXplOiBodG1sRm9udFNpemUsXG4gICAgcHhUb1JlbTogcHhUb1JlbSxcbiAgICByb3VuZDogcm91bmQsXG4gICAgLy8gVE9ETyB2NTogcmVtb3ZlXG4gICAgZm9udEZhbWlseTogZm9udEZhbWlseSxcbiAgICBmb250U2l6ZTogZm9udFNpemUsXG4gICAgZm9udFdlaWdodExpZ2h0OiBmb250V2VpZ2h0TGlnaHQsXG4gICAgZm9udFdlaWdodFJlZ3VsYXI6IGZvbnRXZWlnaHRSZWd1bGFyLFxuICAgIGZvbnRXZWlnaHRNZWRpdW06IGZvbnRXZWlnaHRNZWRpdW0sXG4gICAgZm9udFdlaWdodEJvbGQ6IGZvbnRXZWlnaHRCb2xkXG4gIH0sIHZhcmlhbnRzKSwgb3RoZXIsIHtcbiAgICBjbG9uZTogZmFsc2UgLy8gTm8gbmVlZCB0byBjbG9uZSBkZWVwXG5cbiAgfSk7XG59IiwidmFyIHNoYWRvd0tleVVtYnJhT3BhY2l0eSA9IDAuMjtcbnZhciBzaGFkb3dLZXlQZW51bWJyYU9wYWNpdHkgPSAwLjE0O1xudmFyIHNoYWRvd0FtYmllbnRTaGFkb3dPcGFjaXR5ID0gMC4xMjtcblxuZnVuY3Rpb24gY3JlYXRlU2hhZG93KCkge1xuICByZXR1cm4gW1wiXCIuY29uY2F0KGFyZ3VtZW50cy5sZW5ndGggPD0gMCA/IHVuZGVmaW5lZCA6IGFyZ3VtZW50c1swXSwgXCJweCBcIikuY29uY2F0KGFyZ3VtZW50cy5sZW5ndGggPD0gMSA/IHVuZGVmaW5lZCA6IGFyZ3VtZW50c1sxXSwgXCJweCBcIikuY29uY2F0KGFyZ3VtZW50cy5sZW5ndGggPD0gMiA/IHVuZGVmaW5lZCA6IGFyZ3VtZW50c1syXSwgXCJweCBcIikuY29uY2F0KGFyZ3VtZW50cy5sZW5ndGggPD0gMyA/IHVuZGVmaW5lZCA6IGFyZ3VtZW50c1szXSwgXCJweCByZ2JhKDAsMCwwLFwiKS5jb25jYXQoc2hhZG93S2V5VW1icmFPcGFjaXR5LCBcIilcIiksIFwiXCIuY29uY2F0KGFyZ3VtZW50cy5sZW5ndGggPD0gNCA/IHVuZGVmaW5lZCA6IGFyZ3VtZW50c1s0XSwgXCJweCBcIikuY29uY2F0KGFyZ3VtZW50cy5sZW5ndGggPD0gNSA/IHVuZGVmaW5lZCA6IGFyZ3VtZW50c1s1XSwgXCJweCBcIikuY29uY2F0KGFyZ3VtZW50cy5sZW5ndGggPD0gNiA/IHVuZGVmaW5lZCA6IGFyZ3VtZW50c1s2XSwgXCJweCBcIikuY29uY2F0KGFyZ3VtZW50cy5sZW5ndGggPD0gNyA/IHVuZGVmaW5lZCA6IGFyZ3VtZW50c1s3XSwgXCJweCByZ2JhKDAsMCwwLFwiKS5jb25jYXQoc2hhZG93S2V5UGVudW1icmFPcGFjaXR5LCBcIilcIiksIFwiXCIuY29uY2F0KGFyZ3VtZW50cy5sZW5ndGggPD0gOCA/IHVuZGVmaW5lZCA6IGFyZ3VtZW50c1s4XSwgXCJweCBcIikuY29uY2F0KGFyZ3VtZW50cy5sZW5ndGggPD0gOSA/IHVuZGVmaW5lZCA6IGFyZ3VtZW50c1s5XSwgXCJweCBcIikuY29uY2F0KGFyZ3VtZW50cy5sZW5ndGggPD0gMTAgPyB1bmRlZmluZWQgOiBhcmd1bWVudHNbMTBdLCBcInB4IFwiKS5jb25jYXQoYXJndW1lbnRzLmxlbmd0aCA8PSAxMSA/IHVuZGVmaW5lZCA6IGFyZ3VtZW50c1sxMV0sIFwicHggcmdiYSgwLDAsMCxcIikuY29uY2F0KHNoYWRvd0FtYmllbnRTaGFkb3dPcGFjaXR5LCBcIilcIildLmpvaW4oJywnKTtcbn0gLy8gVmFsdWVzIGZyb20gaHR0cHM6Ly9naXRodWIuY29tL21hdGVyaWFsLWNvbXBvbmVudHMvbWF0ZXJpYWwtY29tcG9uZW50cy13ZWIvYmxvYi9iZTg3NDdmOTQ1NzQ2NjljYjVlN2FkZDFhN2M1NGZhNDFhODljZWM3L3BhY2thZ2VzL21kYy1lbGV2YXRpb24vX3ZhcmlhYmxlcy5zY3NzXG5cblxudmFyIHNoYWRvd3MgPSBbJ25vbmUnLCBjcmVhdGVTaGFkb3coMCwgMiwgMSwgLTEsIDAsIDEsIDEsIDAsIDAsIDEsIDMsIDApLCBjcmVhdGVTaGFkb3coMCwgMywgMSwgLTIsIDAsIDIsIDIsIDAsIDAsIDEsIDUsIDApLCBjcmVhdGVTaGFkb3coMCwgMywgMywgLTIsIDAsIDMsIDQsIDAsIDAsIDEsIDgsIDApLCBjcmVhdGVTaGFkb3coMCwgMiwgNCwgLTEsIDAsIDQsIDUsIDAsIDAsIDEsIDEwLCAwKSwgY3JlYXRlU2hhZG93KDAsIDMsIDUsIC0xLCAwLCA1LCA4LCAwLCAwLCAxLCAxNCwgMCksIGNyZWF0ZVNoYWRvdygwLCAzLCA1LCAtMSwgMCwgNiwgMTAsIDAsIDAsIDEsIDE4LCAwKSwgY3JlYXRlU2hhZG93KDAsIDQsIDUsIC0yLCAwLCA3LCAxMCwgMSwgMCwgMiwgMTYsIDEpLCBjcmVhdGVTaGFkb3coMCwgNSwgNSwgLTMsIDAsIDgsIDEwLCAxLCAwLCAzLCAxNCwgMiksIGNyZWF0ZVNoYWRvdygwLCA1LCA2LCAtMywgMCwgOSwgMTIsIDEsIDAsIDMsIDE2LCAyKSwgY3JlYXRlU2hhZG93KDAsIDYsIDYsIC0zLCAwLCAxMCwgMTQsIDEsIDAsIDQsIDE4LCAzKSwgY3JlYXRlU2hhZG93KDAsIDYsIDcsIC00LCAwLCAxMSwgMTUsIDEsIDAsIDQsIDIwLCAzKSwgY3JlYXRlU2hhZG93KDAsIDcsIDgsIC00LCAwLCAxMiwgMTcsIDIsIDAsIDUsIDIyLCA0KSwgY3JlYXRlU2hhZG93KDAsIDcsIDgsIC00LCAwLCAxMywgMTksIDIsIDAsIDUsIDI0LCA0KSwgY3JlYXRlU2hhZG93KDAsIDcsIDksIC00LCAwLCAxNCwgMjEsIDIsIDAsIDUsIDI2LCA0KSwgY3JlYXRlU2hhZG93KDAsIDgsIDksIC01LCAwLCAxNSwgMjIsIDIsIDAsIDYsIDI4LCA1KSwgY3JlYXRlU2hhZG93KDAsIDgsIDEwLCAtNSwgMCwgMTYsIDI0LCAyLCAwLCA2LCAzMCwgNSksIGNyZWF0ZVNoYWRvdygwLCA4LCAxMSwgLTUsIDAsIDE3LCAyNiwgMiwgMCwgNiwgMzIsIDUpLCBjcmVhdGVTaGFkb3coMCwgOSwgMTEsIC01LCAwLCAxOCwgMjgsIDIsIDAsIDcsIDM0LCA2KSwgY3JlYXRlU2hhZG93KDAsIDksIDEyLCAtNiwgMCwgMTksIDI5LCAyLCAwLCA3LCAzNiwgNiksIGNyZWF0ZVNoYWRvdygwLCAxMCwgMTMsIC02LCAwLCAyMCwgMzEsIDMsIDAsIDgsIDM4LCA3KSwgY3JlYXRlU2hhZG93KDAsIDEwLCAxMywgLTYsIDAsIDIxLCAzMywgMywgMCwgOCwgNDAsIDcpLCBjcmVhdGVTaGFkb3coMCwgMTAsIDE0LCAtNiwgMCwgMjIsIDM1LCAzLCAwLCA4LCA0MiwgNyksIGNyZWF0ZVNoYWRvdygwLCAxMSwgMTQsIC03LCAwLCAyMywgMzYsIDMsIDAsIDksIDQ0LCA4KSwgY3JlYXRlU2hhZG93KDAsIDExLCAxNSwgLTcsIDAsIDI0LCAzOCwgMywgMCwgOSwgNDYsIDgpXTtcbmV4cG9ydCBkZWZhdWx0IHNoYWRvd3M7IiwidmFyIHNoYXBlID0ge1xuICBib3JkZXJSYWRpdXM6IDRcbn07XG5leHBvcnQgZGVmYXVsdCBzaGFwZTsiLCJpbXBvcnQgeyBjcmVhdGVVbmFyeVNwYWNpbmcgfSBmcm9tICdAbWF0ZXJpYWwtdWkvc3lzdGVtJztcbnZhciB3YXJuT25jZTtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNyZWF0ZVNwYWNpbmcoKSB7XG4gIHZhciBzcGFjaW5nSW5wdXQgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IDg7XG5cbiAgLy8gQWxyZWFkeSB0cmFuc2Zvcm1lZC5cbiAgaWYgKHNwYWNpbmdJbnB1dC5tdWkpIHtcbiAgICByZXR1cm4gc3BhY2luZ0lucHV0O1xuICB9IC8vIE1hdGVyaWFsIERlc2lnbiBsYXlvdXRzIGFyZSB2aXN1YWxseSBiYWxhbmNlZC4gTW9zdCBtZWFzdXJlbWVudHMgYWxpZ24gdG8gYW4gOGRwIGdyaWQgYXBwbGllZCwgd2hpY2ggYWxpZ25zIGJvdGggc3BhY2luZyBhbmQgdGhlIG92ZXJhbGwgbGF5b3V0LlxuICAvLyBTbWFsbGVyIGNvbXBvbmVudHMsIHN1Y2ggYXMgaWNvbnMgYW5kIHR5cGUsIGNhbiBhbGlnbiB0byBhIDRkcCBncmlkLlxuICAvLyBodHRwczovL21hdGVyaWFsLmlvL2Rlc2lnbi9sYXlvdXQvdW5kZXJzdGFuZGluZy1sYXlvdXQuaHRtbCN1c2FnZVxuXG5cbiAgdmFyIHRyYW5zZm9ybSA9IGNyZWF0ZVVuYXJ5U3BhY2luZyh7XG4gICAgc3BhY2luZzogc3BhY2luZ0lucHV0XG4gIH0pO1xuXG4gIHZhciBzcGFjaW5nID0gZnVuY3Rpb24gc3BhY2luZygpIHtcbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIGlmICghKGFyZ3MubGVuZ3RoIDw9IDQpKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoXCJNYXRlcmlhbC1VSTogVG9vIG1hbnkgYXJndW1lbnRzIHByb3ZpZGVkLCBleHBlY3RlZCBiZXR3ZWVuIDAgYW5kIDQsIGdvdCBcIi5jb25jYXQoYXJncy5sZW5ndGgpKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoYXJncy5sZW5ndGggPT09IDApIHtcbiAgICAgIHJldHVybiB0cmFuc2Zvcm0oMSk7XG4gICAgfVxuXG4gICAgaWYgKGFyZ3MubGVuZ3RoID09PSAxKSB7XG4gICAgICByZXR1cm4gdHJhbnNmb3JtKGFyZ3NbMF0pO1xuICAgIH1cblxuICAgIHJldHVybiBhcmdzLm1hcChmdW5jdGlvbiAoYXJndW1lbnQpIHtcbiAgICAgIGlmICh0eXBlb2YgYXJndW1lbnQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHJldHVybiBhcmd1bWVudDtcbiAgICAgIH1cblxuICAgICAgdmFyIG91dHB1dCA9IHRyYW5zZm9ybShhcmd1bWVudCk7XG4gICAgICByZXR1cm4gdHlwZW9mIG91dHB1dCA9PT0gJ251bWJlcicgPyBcIlwiLmNvbmNhdChvdXRwdXQsIFwicHhcIikgOiBvdXRwdXQ7XG4gICAgfSkuam9pbignICcpO1xuICB9OyAvLyBCYWNrd2FyZCBjb21wYXRpYmlsaXR5LCB0byByZW1vdmUgaW4gdjUuXG5cblxuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoc3BhY2luZywgJ3VuaXQnLCB7XG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICBpZiAoIXdhcm5PbmNlIHx8IHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAndGVzdCcpIHtcbiAgICAgICAgICBjb25zb2xlLmVycm9yKFsnTWF0ZXJpYWwtVUk6IHRoZW1lLnNwYWNpbmcudW5pdCB1c2FnZSBoYXMgYmVlbiBkZXByZWNhdGVkLicsICdJdCB3aWxsIGJlIHJlbW92ZWQgaW4gdjUuJywgJ1lvdSBjYW4gcmVwbGFjZSBgdGhlbWUuc3BhY2luZy51bml0ICogeWAgd2l0aCBgdGhlbWUuc3BhY2luZyh5KWAuJywgJycsICdZb3UgY2FuIHVzZSB0aGUgYGh0dHBzOi8vZ2l0aHViLmNvbS9tdWktb3JnL21hdGVyaWFsLXVpL3RyZWUvbWFzdGVyL3BhY2thZ2VzL21hdGVyaWFsLXVpLWNvZGVtb2QvUkVBRE1FLm1kI3RoZW1lLXNwYWNpbmctYXBpYCBtaWdyYXRpb24gaGVscGVyIHRvIG1ha2UgdGhlIHByb2Nlc3Mgc21vb3RoZXIuJ10uam9pbignXFxuJykpO1xuICAgICAgICB9XG5cbiAgICAgICAgd2Fybk9uY2UgPSB0cnVlO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gc3BhY2luZ0lucHV0O1xuICAgIH1cbiAgfSk7XG4gIHNwYWNpbmcubXVpID0gdHJ1ZTtcbiAgcmV0dXJuIHNwYWNpbmc7XG59IiwiaW1wb3J0IF9kZWZpbmVQcm9wZXJ0eSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZGVmaW5lUHJvcGVydHlcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzXCI7XG5pbXBvcnQgeyBkZWVwbWVyZ2UgfSBmcm9tICdAbWF0ZXJpYWwtdWkvdXRpbHMnO1xuaW1wb3J0IGNyZWF0ZUJyZWFrcG9pbnRzIGZyb20gJy4vY3JlYXRlQnJlYWtwb2ludHMnO1xuaW1wb3J0IGNyZWF0ZU1peGlucyBmcm9tICcuL2NyZWF0ZU1peGlucyc7XG5pbXBvcnQgY3JlYXRlUGFsZXR0ZSBmcm9tICcuL2NyZWF0ZVBhbGV0dGUnO1xuaW1wb3J0IGNyZWF0ZVR5cG9ncmFwaHkgZnJvbSAnLi9jcmVhdGVUeXBvZ3JhcGh5JztcbmltcG9ydCBzaGFkb3dzIGZyb20gJy4vc2hhZG93cyc7XG5pbXBvcnQgc2hhcGUgZnJvbSAnLi9zaGFwZSc7XG5pbXBvcnQgY3JlYXRlU3BhY2luZyBmcm9tICcuL2NyZWF0ZVNwYWNpbmcnO1xuaW1wb3J0IHRyYW5zaXRpb25zIGZyb20gJy4vdHJhbnNpdGlvbnMnO1xuaW1wb3J0IHpJbmRleCBmcm9tICcuL3pJbmRleCc7XG5cbmZ1bmN0aW9uIGNyZWF0ZU11aVRoZW1lKCkge1xuICB2YXIgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDoge307XG5cbiAgdmFyIF9vcHRpb25zJGJyZWFrcG9pbnRzID0gb3B0aW9ucy5icmVha3BvaW50cyxcbiAgICAgIGJyZWFrcG9pbnRzSW5wdXQgPSBfb3B0aW9ucyRicmVha3BvaW50cyA9PT0gdm9pZCAwID8ge30gOiBfb3B0aW9ucyRicmVha3BvaW50cyxcbiAgICAgIF9vcHRpb25zJG1peGlucyA9IG9wdGlvbnMubWl4aW5zLFxuICAgICAgbWl4aW5zSW5wdXQgPSBfb3B0aW9ucyRtaXhpbnMgPT09IHZvaWQgMCA/IHt9IDogX29wdGlvbnMkbWl4aW5zLFxuICAgICAgX29wdGlvbnMkcGFsZXR0ZSA9IG9wdGlvbnMucGFsZXR0ZSxcbiAgICAgIHBhbGV0dGVJbnB1dCA9IF9vcHRpb25zJHBhbGV0dGUgPT09IHZvaWQgMCA/IHt9IDogX29wdGlvbnMkcGFsZXR0ZSxcbiAgICAgIHNwYWNpbmdJbnB1dCA9IG9wdGlvbnMuc3BhY2luZyxcbiAgICAgIF9vcHRpb25zJHR5cG9ncmFwaHkgPSBvcHRpb25zLnR5cG9ncmFwaHksXG4gICAgICB0eXBvZ3JhcGh5SW5wdXQgPSBfb3B0aW9ucyR0eXBvZ3JhcGh5ID09PSB2b2lkIDAgPyB7fSA6IF9vcHRpb25zJHR5cG9ncmFwaHksXG4gICAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhvcHRpb25zLCBbXCJicmVha3BvaW50c1wiLCBcIm1peGluc1wiLCBcInBhbGV0dGVcIiwgXCJzcGFjaW5nXCIsIFwidHlwb2dyYXBoeVwiXSk7XG5cbiAgdmFyIHBhbGV0dGUgPSBjcmVhdGVQYWxldHRlKHBhbGV0dGVJbnB1dCk7XG4gIHZhciBicmVha3BvaW50cyA9IGNyZWF0ZUJyZWFrcG9pbnRzKGJyZWFrcG9pbnRzSW5wdXQpO1xuICB2YXIgc3BhY2luZyA9IGNyZWF0ZVNwYWNpbmcoc3BhY2luZ0lucHV0KTtcbiAgdmFyIG11aVRoZW1lID0gZGVlcG1lcmdlKHtcbiAgICBicmVha3BvaW50czogYnJlYWtwb2ludHMsXG4gICAgZGlyZWN0aW9uOiAnbHRyJyxcbiAgICBtaXhpbnM6IGNyZWF0ZU1peGlucyhicmVha3BvaW50cywgc3BhY2luZywgbWl4aW5zSW5wdXQpLFxuICAgIG92ZXJyaWRlczoge30sXG4gICAgLy8gSW5qZWN0IGN1c3RvbSBzdHlsZXNcbiAgICBwYWxldHRlOiBwYWxldHRlLFxuICAgIHByb3BzOiB7fSxcbiAgICAvLyBQcm92aWRlIGRlZmF1bHQgcHJvcHNcbiAgICBzaGFkb3dzOiBzaGFkb3dzLFxuICAgIHR5cG9ncmFwaHk6IGNyZWF0ZVR5cG9ncmFwaHkocGFsZXR0ZSwgdHlwb2dyYXBoeUlucHV0KSxcbiAgICBzcGFjaW5nOiBzcGFjaW5nLFxuICAgIHNoYXBlOiBzaGFwZSxcbiAgICB0cmFuc2l0aW9uczogdHJhbnNpdGlvbnMsXG4gICAgekluZGV4OiB6SW5kZXhcbiAgfSwgb3RoZXIpO1xuXG4gIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4gPiAxID8gX2xlbiAtIDEgOiAwKSwgX2tleSA9IDE7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICBhcmdzW19rZXkgLSAxXSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgfVxuXG4gIG11aVRoZW1lID0gYXJncy5yZWR1Y2UoZnVuY3Rpb24gKGFjYywgYXJndW1lbnQpIHtcbiAgICByZXR1cm4gZGVlcG1lcmdlKGFjYywgYXJndW1lbnQpO1xuICB9LCBtdWlUaGVtZSk7XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICB2YXIgcHNldWRvQ2xhc3NlcyA9IFsnY2hlY2tlZCcsICdkaXNhYmxlZCcsICdlcnJvcicsICdmb2N1c2VkJywgJ2ZvY3VzVmlzaWJsZScsICdyZXF1aXJlZCcsICdleHBhbmRlZCcsICdzZWxlY3RlZCddO1xuXG4gICAgdmFyIHRyYXZlcnNlID0gZnVuY3Rpb24gdHJhdmVyc2Uobm9kZSwgcGFyZW50S2V5KSB7XG4gICAgICB2YXIgZGVwdGggPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6IDE7XG4gICAgICB2YXIga2V5OyAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZ3VhcmQtZm9yLWluLCBuby1yZXN0cmljdGVkLXN5bnRheFxuXG4gICAgICBmb3IgKGtleSBpbiBub2RlKSB7XG4gICAgICAgIHZhciBjaGlsZCA9IG5vZGVba2V5XTtcblxuICAgICAgICBpZiAoZGVwdGggPT09IDEpIHtcbiAgICAgICAgICBpZiAoa2V5LmluZGV4T2YoJ011aScpID09PSAwICYmIGNoaWxkKSB7XG4gICAgICAgICAgICB0cmF2ZXJzZShjaGlsZCwga2V5LCBkZXB0aCArIDEpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmIChwc2V1ZG9DbGFzc2VzLmluZGV4T2Yoa2V5KSAhPT0gLTEgJiYgT2JqZWN0LmtleXMoY2hpbGQpLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcihbXCJNYXRlcmlhbC1VSTogVGhlIGBcIi5jb25jYXQocGFyZW50S2V5LCBcImAgY29tcG9uZW50IGluY3JlYXNlcyBcIikgKyBcInRoZSBDU1Mgc3BlY2lmaWNpdHkgb2YgdGhlIGBcIi5jb25jYXQoa2V5LCBcImAgaW50ZXJuYWwgc3RhdGUuXCIpLCAnWW91IGNhbiBub3Qgb3ZlcnJpZGUgaXQgbGlrZSB0aGlzOiAnLCBKU09OLnN0cmluZ2lmeShub2RlLCBudWxsLCAyKSwgJycsICdJbnN0ZWFkLCB5b3UgbmVlZCB0byB1c2UgdGhlICRydWxlTmFtZSBzeW50YXg6JywgSlNPTi5zdHJpbmdpZnkoe1xuICAgICAgICAgICAgICByb290OiBfZGVmaW5lUHJvcGVydHkoe30sIFwiJiRcIi5jb25jYXQoa2V5KSwgY2hpbGQpXG4gICAgICAgICAgICB9LCBudWxsLCAyKSwgJycsICdodHRwczovL21hdGVyaWFsLXVpLmNvbS9yL3BzZXVkby1jbGFzc2VzLWd1aWRlJ10uam9pbignXFxuJykpO1xuICAgICAgICAgIH0gLy8gUmVtb3ZlIHRoZSBzdHlsZSB0byBwcmV2ZW50IGdsb2JhbCBjb25mbGljdHMuXG5cblxuICAgICAgICAgIG5vZGVba2V5XSA9IHt9O1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcblxuICAgIHRyYXZlcnNlKG11aVRoZW1lLm92ZXJyaWRlcyk7XG4gIH1cblxuICByZXR1cm4gbXVpVGhlbWU7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGNyZWF0ZU11aVRoZW1lOyIsImltcG9ydCBjcmVhdGVNdWlUaGVtZSBmcm9tICcuL2NyZWF0ZU11aVRoZW1lJztcbnZhciBkZWZhdWx0VGhlbWUgPSBjcmVhdGVNdWlUaGVtZSgpO1xuZXhwb3J0IGRlZmF1bHQgZGVmYXVsdFRoZW1lOyIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24obW9kdWxlKSB7XG5cdGlmICghbW9kdWxlLndlYnBhY2tQb2x5ZmlsbCkge1xuXHRcdG1vZHVsZS5kZXByZWNhdGUgPSBmdW5jdGlvbigpIHt9O1xuXHRcdG1vZHVsZS5wYXRocyA9IFtdO1xuXHRcdC8vIG1vZHVsZS5wYXJlbnQgPSB1bmRlZmluZWQgYnkgZGVmYXVsdFxuXHRcdGlmICghbW9kdWxlLmNoaWxkcmVuKSBtb2R1bGUuY2hpbGRyZW4gPSBbXTtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobW9kdWxlLCBcImxvYWRlZFwiLCB7XG5cdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuXHRcdFx0Z2V0OiBmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuIG1vZHVsZS5sO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShtb2R1bGUsIFwiaWRcIiwge1xuXHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcblx0XHRcdGdldDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiBtb2R1bGUuaTtcblx0XHRcdH1cblx0XHR9KTtcblx0XHRtb2R1bGUud2VicGFja1BvbHlmaWxsID0gMTtcblx0fVxuXHRyZXR1cm4gbW9kdWxlO1xufTtcbiIsIi8qIGdsb2JhbHMgX193ZWJwYWNrX2FtZF9vcHRpb25zX18gKi9cbm1vZHVsZS5leHBvcnRzID0gX193ZWJwYWNrX2FtZF9vcHRpb25zX187XG4iLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG5cbnZhciBfcmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJyZWFjdFwiKSk7XG5cbnZhciBfY3JlYXRlU3ZnSWNvbiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vdXRpbHMvY3JlYXRlU3ZnSWNvblwiKSk7XG5cbnZhciBfZGVmYXVsdCA9ICgwLCBfY3JlYXRlU3ZnSWNvbi5kZWZhdWx0KShfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwicGF0aFwiLCB7XG4gIGQ6IFwiTTYgMTljMCAxLjEuOSAyIDIgMmg4YzEuMSAwIDItLjkgMi0yVjdINnYxMnpNMTkgNGgtMy41bC0xLTFoLTVsLTEgMUg1djJoMTRWNHpcIlxufSksICdEZWxldGUnKTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwO1xuXG52YXIgX3JlYWN0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicmVhY3RcIikpO1xuXG52YXIgX2NyZWF0ZVN2Z0ljb24gPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL3V0aWxzL2NyZWF0ZVN2Z0ljb25cIikpO1xuXG52YXIgX2RlZmF1bHQgPSAoMCwgX2NyZWF0ZVN2Z0ljb24uZGVmYXVsdCkoX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChcInBhdGhcIiwge1xuICBkOiBcIk0zIDE3LjI1VjIxaDMuNzVMMTcuODEgOS45NGwtMy43NS0zLjc1TDMgMTcuMjV6TTIwLjcxIDcuMDRjLjM5LS4zOS4zOS0xLjAyIDAtMS40MWwtMi4zNC0yLjM0YS45OTU5Ljk5NTkgMCAwMC0xLjQxIDBsLTEuODMgMS44MyAzLjc1IDMuNzUgMS44My0xLjgzelwiXG59KSwgJ0NyZWF0ZScpO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDsiLCJmdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldO1xuICAgIGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTtcbiAgICBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7XG4gICAgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykge1xuICBpZiAocHJvdG9Qcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTtcbiAgaWYgKHN0YXRpY1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpO1xuICByZXR1cm4gQ29uc3RydWN0b3I7XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKSB7XG4gIGlmIChzZWxmID09PSB2b2lkIDApIHtcbiAgICB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7XG4gIH1cblxuICByZXR1cm4gc2VsZjtcbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfYXJyYXlMaWtlVG9BcnJheShhcnIsIGxlbikge1xuICBpZiAobGVuID09IG51bGwgfHwgbGVuID4gYXJyLmxlbmd0aCkgbGVuID0gYXJyLmxlbmd0aDtcblxuICBmb3IgKHZhciBpID0gMCwgYXJyMiA9IG5ldyBBcnJheShsZW4pOyBpIDwgbGVuOyBpKyspIHtcbiAgICBhcnIyW2ldID0gYXJyW2ldO1xuICB9XG5cbiAgcmV0dXJuIGFycjI7XG59IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwO1xuXG52YXIgX3JlYWN0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicmVhY3RcIikpO1xuXG52YXIgX2NyZWF0ZVN2Z0ljb24gPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL3V0aWxzL2NyZWF0ZVN2Z0ljb25cIikpO1xuXG52YXIgX2RlZmF1bHQgPSAoMCwgX2NyZWF0ZVN2Z0ljb24uZGVmYXVsdCkoX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChcInBhdGhcIiwge1xuICBkOiBcIk03IDE4Yy0xLjEgMC0xLjk5LjktMS45OSAyUzUuOSAyMiA3IDIyczItLjkgMi0yLS45LTItMi0yek0xIDJ2MmgybDMuNiA3LjU5LTEuMzUgMi40NWMtLjE2LjI4LS4yNS42MS0uMjUuOTYgMCAxLjEuOSAyIDIgMmgxMnYtMkg3LjQyYy0uMTQgMC0uMjUtLjExLS4yNS0uMjVsLjAzLS4xMi45LTEuNjNoNy40NWMuNzUgMCAxLjQxLS40MSAxLjc1LTEuMDNsMy41OC02LjQ5Yy4wOC0uMTQuMTItLjMxLjEyLS40OCAwLS41NS0uNDUtMS0xLTFINS4yMWwtLjk0LTJIMXptMTYgMTZjLTEuMSAwLTEuOTkuOS0xLjk5IDJzLjg5IDIgMS45OSAyIDItLjkgMi0yLS45LTItMi0yelwiXG59KSwgJ1Nob3BwaW5nQ2FydCcpO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDsiLCJ2YXIgZztcblxuLy8gVGhpcyB3b3JrcyBpbiBub24tc3RyaWN0IG1vZGVcbmcgPSAoZnVuY3Rpb24oKSB7XG5cdHJldHVybiB0aGlzO1xufSkoKTtcblxudHJ5IHtcblx0Ly8gVGhpcyB3b3JrcyBpZiBldmFsIGlzIGFsbG93ZWQgKHNlZSBDU1ApXG5cdGcgPSBnIHx8IG5ldyBGdW5jdGlvbihcInJldHVybiB0aGlzXCIpKCk7XG59IGNhdGNoIChlKSB7XG5cdC8vIFRoaXMgd29ya3MgaWYgdGhlIHdpbmRvdyByZWZlcmVuY2UgaXMgYXZhaWxhYmxlXG5cdGlmICh0eXBlb2Ygd2luZG93ID09PSBcIm9iamVjdFwiKSBnID0gd2luZG93O1xufVxuXG4vLyBnIGNhbiBzdGlsbCBiZSB1bmRlZmluZWQsIGJ1dCBub3RoaW5nIHRvIGRvIGFib3V0IGl0Li4uXG4vLyBXZSByZXR1cm4gdW5kZWZpbmVkLCBpbnN0ZWFkIG9mIG5vdGhpbmcgaGVyZSwgc28gaXQnc1xuLy8gZWFzaWVyIHRvIGhhbmRsZSB0aGlzIGNhc2UuIGlmKCFnbG9iYWwpIHsgLi4ufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGc7XG4iLCJmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikge1xuICByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDoge1xuICAgIGRlZmF1bHQ6IG9ialxuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmZpbmRJbkFycmF5ID0gZmluZEluQXJyYXk7XG5leHBvcnRzLmlzRnVuY3Rpb24gPSBpc0Z1bmN0aW9uO1xuZXhwb3J0cy5pc051bSA9IGlzTnVtO1xuZXhwb3J0cy5pbnQgPSBpbnQ7XG5leHBvcnRzLmRvbnRTZXRNZSA9IGRvbnRTZXRNZTtcblxuLy8gQGNyZWRpdHMgaHR0cHM6Ly9naXN0LmdpdGh1Yi5jb20vcm9nb3pobmlrb2ZmL2E0M2NmZWQyN2M0MWU0ZTY4Y2RjXG5mdW5jdGlvbiBmaW5kSW5BcnJheShhcnJheVxuLyo6IEFycmF5PGFueT4gfCBUb3VjaExpc3QqL1xuLCBjYWxsYmFja1xuLyo6IEZ1bmN0aW9uKi9cbilcbi8qOiBhbnkqL1xue1xuICBmb3IgKHZhciBpID0gMCwgbGVuZ3RoID0gYXJyYXkubGVuZ3RoOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoY2FsbGJhY2suYXBwbHkoY2FsbGJhY2ssIFthcnJheVtpXSwgaSwgYXJyYXldKSkgcmV0dXJuIGFycmF5W2ldO1xuICB9XG59XG5cbmZ1bmN0aW9uIGlzRnVuY3Rpb24oZnVuY1xuLyo6IGFueSovXG4pXG4vKjogYm9vbGVhbiAlY2hlY2tzKi9cbntcbiAgcmV0dXJuIHR5cGVvZiBmdW5jID09PSAnZnVuY3Rpb24nIHx8IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChmdW5jKSA9PT0gJ1tvYmplY3QgRnVuY3Rpb25dJztcbn1cblxuZnVuY3Rpb24gaXNOdW0obnVtXG4vKjogYW55Ki9cbilcbi8qOiBib29sZWFuICVjaGVja3MqL1xue1xuICByZXR1cm4gdHlwZW9mIG51bSA9PT0gJ251bWJlcicgJiYgIWlzTmFOKG51bSk7XG59XG5cbmZ1bmN0aW9uIGludChhXG4vKjogc3RyaW5nKi9cbilcbi8qOiBudW1iZXIqL1xue1xuICByZXR1cm4gcGFyc2VJbnQoYSwgMTApO1xufVxuXG5mdW5jdGlvbiBkb250U2V0TWUocHJvcHNcbi8qOiBPYmplY3QqL1xuLCBwcm9wTmFtZVxuLyo6IHN0cmluZyovXG4sIGNvbXBvbmVudE5hbWVcbi8qOiBzdHJpbmcqL1xuKSB7XG4gIGlmIChwcm9wc1twcm9wTmFtZV0pIHtcbiAgICByZXR1cm4gbmV3IEVycm9yKFwiSW52YWxpZCBwcm9wIFwiLmNvbmNhdChwcm9wTmFtZSwgXCIgcGFzc2VkIHRvIFwiKS5jb25jYXQoY29tcG9uZW50TmFtZSwgXCIgLSBkbyBub3Qgc2V0IHRoaXMsIHNldCBpdCBvbiB0aGUgY2hpbGQuXCIpKTtcbiAgfVxufSIsImltcG9ydCBhcnJheUxpa2VUb0FycmF5IGZyb20gXCIuL2FycmF5TGlrZVRvQXJyYXlcIjtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheShvLCBtaW5MZW4pIHtcbiAgaWYgKCFvKSByZXR1cm47XG4gIGlmICh0eXBlb2YgbyA9PT0gXCJzdHJpbmdcIikgcmV0dXJuIGFycmF5TGlrZVRvQXJyYXkobywgbWluTGVuKTtcbiAgdmFyIG4gPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwobykuc2xpY2UoOCwgLTEpO1xuICBpZiAobiA9PT0gXCJPYmplY3RcIiAmJiBvLmNvbnN0cnVjdG9yKSBuID0gby5jb25zdHJ1Y3Rvci5uYW1lO1xuICBpZiAobiA9PT0gXCJNYXBcIiB8fCBuID09PSBcIlNldFwiKSByZXR1cm4gQXJyYXkuZnJvbShvKTtcbiAgaWYgKG4gPT09IFwiQXJndW1lbnRzXCIgfHwgL14oPzpVaXxJKW50KD86OHwxNnwzMikoPzpDbGFtcGVkKT9BcnJheSQvLnRlc3QobikpIHJldHVybiBhcnJheUxpa2VUb0FycmF5KG8sIG1pbkxlbik7XG59IiwiaW1wb3J0IF90b0NvbnN1bWFibGVBcnJheSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vdG9Db25zdW1hYmxlQXJyYXlcIjtcbmltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF90eXBlb2YgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL3R5cGVvZlwiO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBtZXJnZSBmcm9tICcuL21lcmdlJzsgLy8gVGhlIGJyZWFrcG9pbnQgKipzdGFydCoqIGF0IHRoaXMgdmFsdWUuXG4vLyBGb3IgaW5zdGFuY2Ugd2l0aCB0aGUgZmlyc3QgYnJlYWtwb2ludCB4czogW3hzLCBzbVsuXG5cbnZhciB2YWx1ZXMgPSB7XG4gIHhzOiAwLFxuICBzbTogNjAwLFxuICBtZDogOTYwLFxuICBsZzogMTI4MCxcbiAgeGw6IDE5MjBcbn07XG52YXIgZGVmYXVsdEJyZWFrcG9pbnRzID0ge1xuICAvLyBTb3J0ZWQgQVNDIGJ5IHNpemUuIFRoYXQncyBpbXBvcnRhbnQuXG4gIC8vIEl0IGNhbid0IGJlIGNvbmZpZ3VyZWQgYXMgaXQncyB1c2VkIHN0YXRpY2FsbHkgZm9yIHByb3BUeXBlcy5cbiAga2V5czogWyd4cycsICdzbScsICdtZCcsICdsZycsICd4bCddLFxuICB1cDogZnVuY3Rpb24gdXAoa2V5KSB7XG4gICAgcmV0dXJuIFwiQG1lZGlhIChtaW4td2lkdGg6XCIuY29uY2F0KHZhbHVlc1trZXldLCBcInB4KVwiKTtcbiAgfVxufTtcbmV4cG9ydCBmdW5jdGlvbiBoYW5kbGVCcmVha3BvaW50cyhwcm9wcywgcHJvcFZhbHVlLCBzdHlsZUZyb21Qcm9wVmFsdWUpIHtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBpZiAoIXByb3BzLnRoZW1lKSB7XG4gICAgICBjb25zb2xlLmVycm9yKCdNYXRlcmlhbC1VSTogWW91IGFyZSBjYWxsaW5nIGEgc3R5bGUgZnVuY3Rpb24gd2l0aG91dCBhIHRoZW1lIHZhbHVlLicpO1xuICAgIH1cbiAgfVxuXG4gIGlmIChBcnJheS5pc0FycmF5KHByb3BWYWx1ZSkpIHtcbiAgICB2YXIgdGhlbWVCcmVha3BvaW50cyA9IHByb3BzLnRoZW1lLmJyZWFrcG9pbnRzIHx8IGRlZmF1bHRCcmVha3BvaW50cztcbiAgICByZXR1cm4gcHJvcFZhbHVlLnJlZHVjZShmdW5jdGlvbiAoYWNjLCBpdGVtLCBpbmRleCkge1xuICAgICAgYWNjW3RoZW1lQnJlYWtwb2ludHMudXAodGhlbWVCcmVha3BvaW50cy5rZXlzW2luZGV4XSldID0gc3R5bGVGcm9tUHJvcFZhbHVlKHByb3BWYWx1ZVtpbmRleF0pO1xuICAgICAgcmV0dXJuIGFjYztcbiAgICB9LCB7fSk7XG4gIH1cblxuICBpZiAoX3R5cGVvZihwcm9wVmFsdWUpID09PSAnb2JqZWN0Jykge1xuICAgIHZhciBfdGhlbWVCcmVha3BvaW50cyA9IHByb3BzLnRoZW1lLmJyZWFrcG9pbnRzIHx8IGRlZmF1bHRCcmVha3BvaW50cztcblxuICAgIHJldHVybiBPYmplY3Qua2V5cyhwcm9wVmFsdWUpLnJlZHVjZShmdW5jdGlvbiAoYWNjLCBicmVha3BvaW50KSB7XG4gICAgICBhY2NbX3RoZW1lQnJlYWtwb2ludHMudXAoYnJlYWtwb2ludCldID0gc3R5bGVGcm9tUHJvcFZhbHVlKHByb3BWYWx1ZVticmVha3BvaW50XSk7XG4gICAgICByZXR1cm4gYWNjO1xuICAgIH0sIHt9KTtcbiAgfVxuXG4gIHZhciBvdXRwdXQgPSBzdHlsZUZyb21Qcm9wVmFsdWUocHJvcFZhbHVlKTtcbiAgcmV0dXJuIG91dHB1dDtcbn1cblxuZnVuY3Rpb24gYnJlYWtwb2ludHMoc3R5bGVGdW5jdGlvbikge1xuICB2YXIgbmV3U3R5bGVGdW5jdGlvbiA9IGZ1bmN0aW9uIG5ld1N0eWxlRnVuY3Rpb24ocHJvcHMpIHtcbiAgICB2YXIgYmFzZSA9IHN0eWxlRnVuY3Rpb24ocHJvcHMpO1xuICAgIHZhciB0aGVtZUJyZWFrcG9pbnRzID0gcHJvcHMudGhlbWUuYnJlYWtwb2ludHMgfHwgZGVmYXVsdEJyZWFrcG9pbnRzO1xuICAgIHZhciBleHRlbmRlZCA9IHRoZW1lQnJlYWtwb2ludHMua2V5cy5yZWR1Y2UoZnVuY3Rpb24gKGFjYywga2V5KSB7XG4gICAgICBpZiAocHJvcHNba2V5XSkge1xuICAgICAgICBhY2MgPSBhY2MgfHwge307XG4gICAgICAgIGFjY1t0aGVtZUJyZWFrcG9pbnRzLnVwKGtleSldID0gc3R5bGVGdW5jdGlvbihfZXh0ZW5kcyh7XG4gICAgICAgICAgdGhlbWU6IHByb3BzLnRoZW1lXG4gICAgICAgIH0sIHByb3BzW2tleV0pKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGFjYztcbiAgICB9LCBudWxsKTtcbiAgICByZXR1cm4gbWVyZ2UoYmFzZSwgZXh0ZW5kZWQpO1xuICB9O1xuXG4gIG5ld1N0eWxlRnVuY3Rpb24ucHJvcFR5cGVzID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IF9leHRlbmRzKF9leHRlbmRzKHt9LCBzdHlsZUZ1bmN0aW9uLnByb3BUeXBlcyksIHt9LCB7XG4gICAgeHM6IFByb3BUeXBlcy5vYmplY3QsXG4gICAgc206IFByb3BUeXBlcy5vYmplY3QsXG4gICAgbWQ6IFByb3BUeXBlcy5vYmplY3QsXG4gICAgbGc6IFByb3BUeXBlcy5vYmplY3QsXG4gICAgeGw6IFByb3BUeXBlcy5vYmplY3RcbiAgfSkgOiB7fTtcbiAgbmV3U3R5bGVGdW5jdGlvbi5maWx0ZXJQcm9wcyA9IFsneHMnLCAnc20nLCAnbWQnLCAnbGcnLCAneGwnXS5jb25jYXQoX3RvQ29uc3VtYWJsZUFycmF5KHN0eWxlRnVuY3Rpb24uZmlsdGVyUHJvcHMpKTtcbiAgcmV0dXJuIG5ld1N0eWxlRnVuY3Rpb247XG59XG5cbmV4cG9ydCBkZWZhdWx0IGJyZWFrcG9pbnRzOyIsIi8vIFdlIG5lZWQgdG8gY2VudHJhbGl6ZSB0aGUgekluZGV4IGRlZmluaXRpb25zIGFzIHRoZXkgd29ya1xuLy8gbGlrZSBnbG9iYWwgdmFsdWVzIGluIHRoZSBicm93c2VyLlxudmFyIHpJbmRleCA9IHtcbiAgbW9iaWxlU3RlcHBlcjogMTAwMCxcbiAgc3BlZWREaWFsOiAxMDUwLFxuICBhcHBCYXI6IDExMDAsXG4gIGRyYXdlcjogMTIwMCxcbiAgbW9kYWw6IDEzMDAsXG4gIHNuYWNrYmFyOiAxNDAwLFxuICB0b29sdGlwOiAxNTAwXG59O1xuZXhwb3J0IGRlZmF1bHQgekluZGV4OyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcblxudmFyIF9yZWFjdCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInJlYWN0XCIpKTtcblxudmFyIF9jcmVhdGVTdmdJY29uID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi91dGlscy9jcmVhdGVTdmdJY29uXCIpKTtcblxudmFyIF9kZWZhdWx0ID0gKDAsIF9jcmVhdGVTdmdJY29uLmRlZmF1bHQpKF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJwYXRoXCIsIHtcbiAgZDogXCJNOSAxNi4yTDQuOCAxMmwtMS40IDEuNEw5IDE5IDIxIDdsLTEuNC0xLjRMOSAxNi4yelwiXG59KSwgJ0RvbmUnKTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XHJcbnZhciBfX2ltcG9ydERlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0RGVmYXVsdCkgfHwgZnVuY3Rpb24gKG1vZCkge1xyXG4gICAgcmV0dXJuIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpID8gbW9kIDogeyBcImRlZmF1bHRcIjogbW9kIH07XHJcbn07XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuZXhwb3J0cy5BdmF0YXJHZW5lcmF0b3IgPSB2b2lkIDA7XHJcbnZhciBzZWVkcmFuZG9tXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcInNlZWRyYW5kb21cIikpO1xyXG4vKiogQGRlc2NyaXB0aW9uIENsYXNzIHRvIGdlbmVyYXRlIGF2YXRhcnMgICovXHJcbnZhciBBdmF0YXJHZW5lcmF0b3IgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBBdmF0YXJHZW5lcmF0b3IoKSB7XHJcbiAgICB9XHJcbiAgICAvKiogQGRlc2NyaXB0aW9uIEdlbmVyYXRlcyByYW5kb20gYXZhdGFyIGltYWdlIFVSTFxyXG4gICAgICogQHJldHVybnMgUmFuZG9tIGF2YXRhciBpbWFnZSBVUkxcclxuICAgICAqL1xyXG4gICAgQXZhdGFyR2VuZXJhdG9yLnByb3RvdHlwZS5nZW5lcmF0ZVJhbmRvbUF2YXRhciA9IGZ1bmN0aW9uIChzZWVkKSB7XHJcbiAgICAgICAgdmFyIHRvcFR5cGVPcHRpb25zID0gbmV3IEFycmF5KCk7XHJcbiAgICAgICAgdG9wVHlwZU9wdGlvbnMucHVzaChcIk5vSGFpclwiLCBcIkV5ZXBhdGNoXCIsIFwiSGF0XCIsIFwiSGlqYWJcIiwgXCJUdXJiYW5cIiwgXCJXaW50ZXJIYXQxXCIsIFwiV2ludGVySGF0MlwiLCBcIldpbnRlckhhdDNcIiwgXCJXaW50ZXJIYXQ0XCIsIFwiTG9uZ0hhaXJCaWdIYWlyXCIsIFwiTG9uZ0hhaXJCb2JcIiwgXCJMb25nSGFpckJ1blwiLCBcIkxvbmdIYWlyQ3VybHlcIiwgXCJMb25nSGFpckN1cnZ5XCIsIFwiTG9uZ0hhaXJEcmVhZHNcIiwgXCJMb25nSGFpckZyaWRhXCIsIFwiTG9uZ0hhaXJGcm9cIiwgXCJMb25nSGFpckZyb0JhbmRcIiwgXCJMb25nSGFpck5vdFRvb0xvbmdcIiwgXCJMb25nSGFpclNoYXZlZFNpZGVzXCIsIFwiTG9uZ0hhaXJNaWFXYWxsYWNlXCIsIFwiTG9uZ0hhaXJTdHJhaWdodFwiLCBcIkxvbmdIYWlyU3RyYWlnaHQyXCIsIFwiTG9uZ0hhaXJTdHJhaWdodFN0cmFuZFwiLCBcIlNob3J0SGFpckRyZWFkczAxXCIsIFwiU2hvcnRIYWlyRHJlYWRzMDJcIiwgXCJTaG9ydEhhaXJGcml6emxlXCIsIFwiU2hvcnRIYWlyU2hhZ2d5TXVsbGV0XCIsIFwiU2hvcnRIYWlyU2hvcnRDdXJseVwiLCBcIlNob3J0SGFpclNob3J0RmxhdFwiLCBcIlNob3J0SGFpclNob3J0Um91bmRcIiwgXCJTaG9ydEhhaXJTaG9ydFdhdmVkXCIsIFwiU2hvcnRIYWlyU2lkZXNcIiwgXCJTaG9ydEhhaXJUaGVDYWVzYXJcIiwgXCJTaG9ydEhhaXJUaGVDYWVzYXJTaWRlUGFydFwiKTtcclxuICAgICAgICB2YXIgYWNjZXNzb3JpZXNUeXBlT3B0aW9ucyA9IG5ldyBBcnJheSgpO1xyXG4gICAgICAgIGFjY2Vzc29yaWVzVHlwZU9wdGlvbnMucHVzaChcIkJsYW5rXCIsIFwiS3VydFwiLCBcIlByZXNjcmlwdGlvbjAxXCIsIFwiUHJlc2NyaXB0aW9uMDJcIiwgXCJSb3VuZFwiLCBcIlN1bmdsYXNzZXNcIiwgXCJXYXlmYXJlcnNcIik7XHJcbiAgICAgICAgdmFyIGZhY2lhbEhhaXJUeXBlT3B0aW9ucyA9IG5ldyBBcnJheSgpO1xyXG4gICAgICAgIGZhY2lhbEhhaXJUeXBlT3B0aW9ucy5wdXNoKFwiQmxhbmtcIiwgXCJCZWFyZE1lZGl1bVwiLCBcIkJlYXJkTGlnaHRcIiwgXCJCZWFyZE1hZ2VzdGljXCIsIFwiTW91c3RhY2hlRmFuY3lcIiwgXCJNb3VzdGFjaGVNYWdudW1cIik7XHJcbiAgICAgICAgdmFyIGZhY2lhbEhhaXJDb2xvck9wdGlvbnMgPSBuZXcgQXJyYXkoKTtcclxuICAgICAgICBmYWNpYWxIYWlyQ29sb3JPcHRpb25zLnB1c2goXCJBdWJ1cm5cIiwgXCJCbGFja1wiLCBcIkJsb25kZVwiLCBcIkJsb25kZUdvbGRlblwiLCBcIkJyb3duXCIsIFwiQnJvd25EYXJrXCIsIFwiUGxhdGludW1cIiwgXCJSZWRcIik7XHJcbiAgICAgICAgdmFyIGNsb3RoZVR5cGVPcHRpb25zID0gbmV3IEFycmF5KCk7XHJcbiAgICAgICAgY2xvdGhlVHlwZU9wdGlvbnMucHVzaChcIkJsYXplclNoaXJ0XCIsIFwiQmxhemVyU3dlYXRlclwiLCBcIkNvbGxhclN3ZWF0ZXJcIiwgXCJHcmFwaGljU2hpcnRcIiwgXCJIb29kaWVcIiwgXCJPdmVyYWxsXCIsIFwiU2hpcnRDcmV3TmVja1wiLCBcIlNoaXJ0U2Nvb3BOZWNrXCIsIFwiU2hpcnRWTmVja1wiKTtcclxuICAgICAgICB2YXIgZXllVHlwZU9wdGlvbnMgPSBuZXcgQXJyYXkoKTtcclxuICAgICAgICBleWVUeXBlT3B0aW9ucy5wdXNoKFwiQ2xvc2VcIiwgXCJDcnlcIiwgXCJEZWZhdWx0XCIsIFwiRGl6enlcIiwgXCJFeWVSb2xsXCIsIFwiSGFwcHlcIiwgXCJIZWFydHNcIiwgXCJTaWRlXCIsIFwiU3F1aW50XCIsIFwiU3VycHJpc2VkXCIsIFwiV2lua1wiLCBcIldpbmtXYWNreVwiKTtcclxuICAgICAgICB2YXIgZXllYnJvd1R5cGVPcHRpb25zID0gbmV3IEFycmF5KCk7XHJcbiAgICAgICAgZXllYnJvd1R5cGVPcHRpb25zLnB1c2goXCJBbmdyeVwiLCBcIkFuZ3J5TmF0dXJhbFwiLCBcIkRlZmF1bHRcIiwgXCJEZWZhdWx0TmF0dXJhbFwiLCBcIkZsYXROYXR1cmFsXCIsIFwiUmFpc2VkRXhjaXRlZFwiLCBcIlJhaXNlZEV4Y2l0ZWROYXR1cmFsXCIsIFwiU2FkQ29uY2VybmVkXCIsIFwiU2FkQ29uY2VybmVkTmF0dXJhbFwiLCBcIlVuaWJyb3dOYXR1cmFsXCIsIFwiVXBEb3duXCIsIFwiVXBEb3duTmF0dXJhbFwiKTtcclxuICAgICAgICB2YXIgbW91dGhUeXBlT3B0aW9ucyA9IG5ldyBBcnJheSgpO1xyXG4gICAgICAgIG1vdXRoVHlwZU9wdGlvbnMucHVzaChcIkNvbmNlcm5lZFwiLCBcIkRlZmF1bHRcIiwgXCJEaXNiZWxpZWZcIiwgXCJFYXRpbmdcIiwgXCJHcmltYWNlXCIsIFwiU2FkXCIsIFwiU2NyZWFtT3BlblwiLCBcIlNlcmlvdXNcIiwgXCJTbWlsZVwiLCBcIlRvbmd1ZVwiLCBcIlR3aW5rbGVcIiwgXCJWb21pdFwiKTtcclxuICAgICAgICB2YXIgc2tpbkNvbG9yT3B0aW9ucyA9IG5ldyBBcnJheSgpO1xyXG4gICAgICAgIHNraW5Db2xvck9wdGlvbnMucHVzaChcIlRhbm5lZFwiLCBcIlllbGxvd1wiLCBcIlBhbGVcIiwgXCJMaWdodFwiLCBcIkJyb3duXCIsIFwiRGFya0Jyb3duXCIsIFwiQmxhY2tcIik7XHJcbiAgICAgICAgdmFyIGhhaXJDb2xvclR5cGVzID0gbmV3IEFycmF5KCk7XHJcbiAgICAgICAgaGFpckNvbG9yVHlwZXMucHVzaChcIkF1YnVyblwiLCBcIkJsYWNrXCIsIFwiQmxvbmRlXCIsIFwiQmxvbmRlR29sZGVuXCIsIFwiQnJvd25cIiwgXCJCcm93bkRhcmtcIiwgXCJQYXN0ZWxQaW5rXCIsIFwiUGxhdGludW1cIiwgXCJSZWRcIiwgXCJTaWx2ZXJHcmF5XCIpO1xyXG4gICAgICAgIHZhciBoYXRDb2xvck9wdGlvbnMgPSBuZXcgQXJyYXkoKTtcclxuICAgICAgICBoYXRDb2xvck9wdGlvbnMucHVzaChcIkJsYWNrXCIsIFwiQmx1ZTAxXCIsIFwiQmx1ZTAyXCIsIFwiQmx1ZTAzXCIsIFwiR3JheTAxXCIsIFwiR3JheTAyXCIsIFwiSGVhdGhlclwiLCBcIlBhc3RlbEJsdWVcIiwgXCJQYXN0ZWxHcmVlblwiLCBcIlBhc3RlbE9yYW5nZVwiLCBcIlBhc3RlbFJlZFwiLCBcIlBhc3RlbFllbGxvd1wiLCBcIlBpbmtcIiwgXCJSZWRcIiwgXCJXaGl0ZVwiKTtcclxuICAgICAgICB2YXIgY2xvdGhlQ29sb3JPcHRpb25zID0gbmV3IEFycmF5KCk7XHJcbiAgICAgICAgY2xvdGhlQ29sb3JPcHRpb25zLnB1c2goXCJCbGFja1wiLCBcIkJsdWUwMVwiLCBcIkJsdWUwMlwiLCBcIkJsdWUwM1wiLCBcIkdyYXkwMVwiLCBcIkdyYXkwMlwiLCBcIkhlYXRoZXJcIiwgXCJQYXN0ZWxCbHVlXCIsIFwiUGFzdGVsR3JlZW5cIiwgXCJQYXN0ZWxPcmFuZ2VcIiwgXCJQYXN0ZWxSZWRcIiwgXCJQYXN0ZWxZZWxsb3dcIiwgXCJQaW5rXCIsIFwiUmVkXCIsIFwiV2hpdGVcIik7XHJcbiAgICAgICAgdmFyIHJuZyA9IHNlZWQgPyBzZWVkcmFuZG9tXzEuZGVmYXVsdChzZWVkKSA6IHNlZWRyYW5kb21fMS5kZWZhdWx0KCk7XHJcbiAgICAgICAgcmV0dXJuIFwiaHR0cHM6Ly9hdmF0YWFhcnMuaW8vP2FjY2Vzc29yaWVzVHlwZT1cIiArIGFjY2Vzc29yaWVzVHlwZU9wdGlvbnNbTWF0aC5mbG9vcihybmcoKSAqIGFjY2Vzc29yaWVzVHlwZU9wdGlvbnMubGVuZ3RoKV0gKyBcIiZhdmF0YXJTdHlsZT1DaXJjbGUmY2xvdGhlQ29sb3I9XCIgKyBjbG90aGVDb2xvck9wdGlvbnNbTWF0aC5mbG9vcihybmcoKSAqIGNsb3RoZUNvbG9yT3B0aW9ucy5sZW5ndGgpXSArIFwiJmNsb3RoZVR5cGU9XCIgKyBjbG90aGVUeXBlT3B0aW9uc1tNYXRoLmZsb29yKHJuZygpICogY2xvdGhlVHlwZU9wdGlvbnMubGVuZ3RoKV0gKyBcIiZleWVUeXBlPVwiICsgZXllVHlwZU9wdGlvbnNbTWF0aC5mbG9vcihybmcoKSAqIGV5ZVR5cGVPcHRpb25zLmxlbmd0aCldICsgXCImZXllYnJvd1R5cGU9XCIgKyBleWVicm93VHlwZU9wdGlvbnNbTWF0aC5mbG9vcihybmcoKSAqIGV5ZWJyb3dUeXBlT3B0aW9ucy5sZW5ndGgpXSArIFwiJmZhY2lhbEhhaXJDb2xvcj1cIiArIGZhY2lhbEhhaXJDb2xvck9wdGlvbnNbTWF0aC5mbG9vcihybmcoKSAqIGZhY2lhbEhhaXJDb2xvck9wdGlvbnMubGVuZ3RoKV0gKyBcIiZmYWNpYWxIYWlyVHlwZT1cIiArIGZhY2lhbEhhaXJUeXBlT3B0aW9uc1tNYXRoLmZsb29yKHJuZygpICogZmFjaWFsSGFpclR5cGVPcHRpb25zLmxlbmd0aCldICsgXCImaGFpckNvbG9yPVwiICsgaGFpckNvbG9yVHlwZXNbTWF0aC5mbG9vcihybmcoKSAqIGhhaXJDb2xvclR5cGVzLmxlbmd0aCldICsgXCImaGF0Q29sb3I9XCIgKyBoYXRDb2xvck9wdGlvbnNbTWF0aC5mbG9vcihybmcoKSAqIGhhdENvbG9yT3B0aW9ucy5sZW5ndGgpXSArIFwiJm1vdXRoVHlwZT1cIiArIG1vdXRoVHlwZU9wdGlvbnNbTWF0aC5mbG9vcihybmcoKSAqIG1vdXRoVHlwZU9wdGlvbnMubGVuZ3RoKV0gKyBcIiZza2luQ29sb3I9XCIgKyBza2luQ29sb3JPcHRpb25zW01hdGguZmxvb3Iocm5nKCkgKiBza2luQ29sb3JPcHRpb25zLmxlbmd0aCldICsgXCImdG9wVHlwZT1cIiArIHRvcFR5cGVPcHRpb25zW01hdGguZmxvb3Iocm5nKCkgKiB0b3BUeXBlT3B0aW9ucy5sZW5ndGgpXTtcclxuICAgIH07XHJcbiAgICByZXR1cm4gQXZhdGFyR2VuZXJhdG9yO1xyXG59KCkpO1xyXG5leHBvcnRzLkF2YXRhckdlbmVyYXRvciA9IEF2YXRhckdlbmVyYXRvcjtcclxuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwO1xuXG52YXIgX3JlYWN0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicmVhY3RcIikpO1xuXG52YXIgX2NyZWF0ZVN2Z0ljb24gPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL3V0aWxzL2NyZWF0ZVN2Z0ljb25cIikpO1xuXG52YXIgX2RlZmF1bHQgPSAoMCwgX2NyZWF0ZVN2Z0ljb24uZGVmYXVsdCkoX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfcmVhY3QuZGVmYXVsdC5GcmFnbWVudCwgbnVsbCwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChcInBhdGhcIiwge1xuICBkOiBcIk0yMSA1Yy0xLjExLS4zNS0yLjMzLS41LTMuNS0uNS0xLjk1IDAtNC4wNS40LTUuNSAxLjUtMS40NS0xLjEtMy41NS0xLjUtNS41LTEuNVMyLjQ1IDQuOSAxIDZ2MTQuNjVjMCAuMjUuMjUuNS41LjUuMSAwIC4xNS0uMDUuMjUtLjA1QzMuMSAyMC40NSA1LjA1IDIwIDYuNSAyMGMxLjk1IDAgNC4wNS40IDUuNSAxLjUgMS4zNS0uODUgMy44LTEuNSA1LjUtMS41IDEuNjUgMCAzLjM1LjMgNC43NSAxLjA1LjEuMDUuMTUuMDUuMjUuMDUuMjUgMCAuNS0uMjUuNS0uNVY2Yy0uNi0uNDUtMS4yNS0uNzUtMi0xem0wIDEzLjVjLTEuMS0uMzUtMi4zLS41LTMuNS0uNS0xLjcgMC00LjE1LjY1LTUuNSAxLjVWOGMxLjM1LS44NSAzLjgtMS41IDUuNS0xLjUgMS4yIDAgMi40LjE1IDMuNS41djExLjV6XCJcbn0pLCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwicGF0aFwiLCB7XG4gIGQ6IFwiTTE3LjUgMTAuNWMuODggMCAxLjczLjA5IDIuNS4yNlY5LjI0Yy0uNzktLjE1LTEuNjQtLjI0LTIuNS0uMjQtMS43IDAtMy4yNC4yOS00LjUuODN2MS42NmMxLjEzLS42NCAyLjctLjk5IDQuNS0uOTl6TTEzIDEyLjQ5djEuNjZjMS4xMy0uNjQgMi43LS45OSA0LjUtLjk5Ljg4IDAgMS43My4wOSAyLjUuMjZWMTEuOWMtLjc5LS4xNS0xLjY0LS4yNC0yLjUtLjI0LTEuNyAwLTMuMjQuMy00LjUuODN6TTE3LjUgMTQuMzNjLTEuNyAwLTMuMjQuMjktNC41LjgzdjEuNjZjMS4xMy0uNjQgMi43LS45OSA0LjUtLjk5Ljg4IDAgMS43My4wOSAyLjUuMjZ2LTEuNTJjLS43OS0uMTYtMS42NC0uMjQtMi41LS4yNHpcIlxufSkpLCAnTWVudUJvb2tPdXRsaW5lZCcpO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG5cbnZhciBfcmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJyZWFjdFwiKSk7XG5cbnZhciBfY3JlYXRlU3ZnSWNvbiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vdXRpbHMvY3JlYXRlU3ZnSWNvblwiKSk7XG5cbnZhciBfZGVmYXVsdCA9ICgwLCBfY3JlYXRlU3ZnSWNvbi5kZWZhdWx0KShfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwicGF0aFwiLCB7XG4gIGQ6IFwiTTQgNkgydjE0YzAgMS4xLjkgMiAyIDJoMTR2LTJINFY2em0xNi00SDhjLTEuMSAwLTIgLjktMiAydjEyYzAgMS4xLjkgMiAyIDJoMTJjMS4xIDAgMi0uOSAyLTJWNGMwLTEuMS0uOS0yLTItMnptLTMgMnY1bC0xLS43NUwxNSA5VjRoMnptMyAxMkg4VjRoNXY5bDMtMi4yNUwxOSAxM1Y0aDF2MTJ6XCJcbn0pLCAnQ29sbGVjdGlvbnNCb29rbWFya091dGxpbmVkJyk7XG5cbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0OyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcblxudmFyIF9Td2lwZWFibGVWaWV3cyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vU3dpcGVhYmxlVmlld3NcIikpO1xuXG52YXIgX2RlZmF1bHQgPSBfU3dpcGVhYmxlVmlld3MuZGVmYXVsdDtcbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0OyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcblxudmFyIF9yZWFjdCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInJlYWN0XCIpKTtcblxudmFyIF9jcmVhdGVTdmdJY29uID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi91dGlscy9jcmVhdGVTdmdJY29uXCIpKTtcblxudmFyIF9kZWZhdWx0ID0gKDAsIF9jcmVhdGVTdmdJY29uLmRlZmF1bHQpKF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJwYXRoXCIsIHtcbiAgZDogXCJNMi4wMSAyMUwyMyAxMiAyLjAxIDMgMiAxMGwxNSAyLTE1IDJ6XCJcbn0pLCAnU2VuZCcpO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDsiLCJ2YXIgZ3JlZW4gPSB7XG4gIDUwOiAnI2U4ZjVlOScsXG4gIDEwMDogJyNjOGU2YzknLFxuICAyMDA6ICcjYTVkNmE3JyxcbiAgMzAwOiAnIzgxYzc4NCcsXG4gIDQwMDogJyM2NmJiNmEnLFxuICA1MDA6ICcjNGNhZjUwJyxcbiAgNjAwOiAnIzQzYTA0NycsXG4gIDcwMDogJyMzODhlM2MnLFxuICA4MDA6ICcjMmU3ZDMyJyxcbiAgOTAwOiAnIzFiNWUyMCcsXG4gIEExMDA6ICcjYjlmNmNhJyxcbiAgQTIwMDogJyM2OWYwYWUnLFxuICBBNDAwOiAnIzAwZTY3NicsXG4gIEE3MDA6ICcjMDBjODUzJ1xufTtcbmV4cG9ydCBkZWZhdWx0IGdyZWVuOyIsIlwidXNlIHN0cmljdFwiO1xuXG5mdW5jdGlvbiBfdHlwZW9mKG9iaikgeyBcIkBiYWJlbC9oZWxwZXJzIC0gdHlwZW9mXCI7IGlmICh0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIikgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH07IH0gZWxzZSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajsgfTsgfSByZXR1cm4gX3R5cGVvZihvYmopOyB9XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLm1hdGNoZXNTZWxlY3RvciA9IG1hdGNoZXNTZWxlY3RvcjtcbmV4cG9ydHMubWF0Y2hlc1NlbGVjdG9yQW5kUGFyZW50c1RvID0gbWF0Y2hlc1NlbGVjdG9yQW5kUGFyZW50c1RvO1xuZXhwb3J0cy5hZGRFdmVudCA9IGFkZEV2ZW50O1xuZXhwb3J0cy5yZW1vdmVFdmVudCA9IHJlbW92ZUV2ZW50O1xuZXhwb3J0cy5vdXRlckhlaWdodCA9IG91dGVySGVpZ2h0O1xuZXhwb3J0cy5vdXRlcldpZHRoID0gb3V0ZXJXaWR0aDtcbmV4cG9ydHMuaW5uZXJIZWlnaHQgPSBpbm5lckhlaWdodDtcbmV4cG9ydHMuaW5uZXJXaWR0aCA9IGlubmVyV2lkdGg7XG5leHBvcnRzLm9mZnNldFhZRnJvbVBhcmVudCA9IG9mZnNldFhZRnJvbVBhcmVudDtcbmV4cG9ydHMuY3JlYXRlQ1NTVHJhbnNmb3JtID0gY3JlYXRlQ1NTVHJhbnNmb3JtO1xuZXhwb3J0cy5jcmVhdGVTVkdUcmFuc2Zvcm0gPSBjcmVhdGVTVkdUcmFuc2Zvcm07XG5leHBvcnRzLmdldFRyYW5zbGF0aW9uID0gZ2V0VHJhbnNsYXRpb247XG5leHBvcnRzLmdldFRvdWNoID0gZ2V0VG91Y2g7XG5leHBvcnRzLmdldFRvdWNoSWRlbnRpZmllciA9IGdldFRvdWNoSWRlbnRpZmllcjtcbmV4cG9ydHMuYWRkVXNlclNlbGVjdFN0eWxlcyA9IGFkZFVzZXJTZWxlY3RTdHlsZXM7XG5leHBvcnRzLnJlbW92ZVVzZXJTZWxlY3RTdHlsZXMgPSByZW1vdmVVc2VyU2VsZWN0U3R5bGVzO1xuZXhwb3J0cy5hZGRDbGFzc05hbWUgPSBhZGRDbGFzc05hbWU7XG5leHBvcnRzLnJlbW92ZUNsYXNzTmFtZSA9IHJlbW92ZUNsYXNzTmFtZTtcblxudmFyIF9zaGltcyA9IHJlcXVpcmUoXCIuL3NoaW1zXCIpO1xuXG52YXIgX2dldFByZWZpeCA9IF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKHJlcXVpcmUoXCIuL2dldFByZWZpeFwiKSk7XG5cbmZ1bmN0aW9uIF9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZSgpIHsgaWYgKHR5cGVvZiBXZWFrTWFwICE9PSBcImZ1bmN0aW9uXCIpIHJldHVybiBudWxsOyB2YXIgY2FjaGUgPSBuZXcgV2Vha01hcCgpOyBfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUgPSBmdW5jdGlvbiBfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUoKSB7IHJldHVybiBjYWNoZTsgfTsgcmV0dXJuIGNhY2hlOyB9XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKG9iaikgeyBpZiAob2JqICYmIG9iai5fX2VzTW9kdWxlKSB7IHJldHVybiBvYmo7IH0gaWYgKG9iaiA9PT0gbnVsbCB8fCBfdHlwZW9mKG9iaikgIT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIG9iaiAhPT0gXCJmdW5jdGlvblwiKSB7IHJldHVybiB7IGRlZmF1bHQ6IG9iaiB9OyB9IHZhciBjYWNoZSA9IF9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZSgpOyBpZiAoY2FjaGUgJiYgY2FjaGUuaGFzKG9iaikpIHsgcmV0dXJuIGNhY2hlLmdldChvYmopOyB9IHZhciBuZXdPYmogPSB7fTsgdmFyIGhhc1Byb3BlcnR5RGVzY3JpcHRvciA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSAmJiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yOyBmb3IgKHZhciBrZXkgaW4gb2JqKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBrZXkpKSB7IHZhciBkZXNjID0gaGFzUHJvcGVydHlEZXNjcmlwdG9yID8gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmosIGtleSkgOiBudWxsOyBpZiAoZGVzYyAmJiAoZGVzYy5nZXQgfHwgZGVzYy5zZXQpKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShuZXdPYmosIGtleSwgZGVzYyk7IH0gZWxzZSB7IG5ld09ialtrZXldID0gb2JqW2tleV07IH0gfSB9IG5ld09iai5kZWZhdWx0ID0gb2JqOyBpZiAoY2FjaGUpIHsgY2FjaGUuc2V0KG9iaiwgbmV3T2JqKTsgfSByZXR1cm4gbmV3T2JqOyB9XG5cbmZ1bmN0aW9uIG93bktleXMob2JqZWN0LCBlbnVtZXJhYmxlT25seSkgeyB2YXIga2V5cyA9IE9iamVjdC5rZXlzKG9iamVjdCk7IGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7IHZhciBzeW1ib2xzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhvYmplY3QpOyBpZiAoZW51bWVyYWJsZU9ubHkpIHN5bWJvbHMgPSBzeW1ib2xzLmZpbHRlcihmdW5jdGlvbiAoc3ltKSB7IHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iamVjdCwgc3ltKS5lbnVtZXJhYmxlOyB9KTsga2V5cy5wdXNoLmFwcGx5KGtleXMsIHN5bWJvbHMpOyB9IHJldHVybiBrZXlzOyB9XG5cbmZ1bmN0aW9uIF9vYmplY3RTcHJlYWQodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV0gIT0gbnVsbCA/IGFyZ3VtZW50c1tpXSA6IHt9OyBpZiAoaSAlIDIpIHsgb3duS2V5cyhPYmplY3Qoc291cmNlKSwgdHJ1ZSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7IF9kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgc291cmNlW2tleV0pOyB9KTsgfSBlbHNlIGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycykgeyBPYmplY3QuZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKHNvdXJjZSkpOyB9IGVsc2UgeyBvd25LZXlzKE9iamVjdChzb3VyY2UpKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHNvdXJjZSwga2V5KSk7IH0pOyB9IH0gcmV0dXJuIHRhcmdldDsgfVxuXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7IGlmIChrZXkgaW4gb2JqKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgeyB2YWx1ZTogdmFsdWUsIGVudW1lcmFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSwgd3JpdGFibGU6IHRydWUgfSk7IH0gZWxzZSB7IG9ialtrZXldID0gdmFsdWU7IH0gcmV0dXJuIG9iajsgfVxuXG52YXIgbWF0Y2hlc1NlbGVjdG9yRnVuYyA9ICcnO1xuXG5mdW5jdGlvbiBtYXRjaGVzU2VsZWN0b3IoZWxcbi8qOiBOb2RlKi9cbiwgc2VsZWN0b3Jcbi8qOiBzdHJpbmcqL1xuKVxuLyo6IGJvb2xlYW4qL1xue1xuICBpZiAoIW1hdGNoZXNTZWxlY3RvckZ1bmMpIHtcbiAgICBtYXRjaGVzU2VsZWN0b3JGdW5jID0gKDAsIF9zaGltcy5maW5kSW5BcnJheSkoWydtYXRjaGVzJywgJ3dlYmtpdE1hdGNoZXNTZWxlY3RvcicsICdtb3pNYXRjaGVzU2VsZWN0b3InLCAnbXNNYXRjaGVzU2VsZWN0b3InLCAnb01hdGNoZXNTZWxlY3RvciddLCBmdW5jdGlvbiAobWV0aG9kKSB7XG4gICAgICAvLyAkRmxvd0lnbm9yZTogRG9lc24ndCB0aGluayBlbGVtZW50cyBhcmUgaW5kZXhhYmxlXG4gICAgICByZXR1cm4gKDAsIF9zaGltcy5pc0Z1bmN0aW9uKShlbFttZXRob2RdKTtcbiAgICB9KTtcbiAgfSAvLyBNaWdodCBub3QgYmUgZm91bmQgZW50aXJlbHkgKG5vdCBhbiBFbGVtZW50PykgLSBpbiB0aGF0IGNhc2UsIGJhaWxcbiAgLy8gJEZsb3dJZ25vcmU6IERvZXNuJ3QgdGhpbmsgZWxlbWVudHMgYXJlIGluZGV4YWJsZVxuXG5cbiAgaWYgKCEoMCwgX3NoaW1zLmlzRnVuY3Rpb24pKGVsW21hdGNoZXNTZWxlY3RvckZ1bmNdKSkgcmV0dXJuIGZhbHNlOyAvLyAkRmxvd0lnbm9yZTogRG9lc24ndCB0aGluayBlbGVtZW50cyBhcmUgaW5kZXhhYmxlXG5cbiAgcmV0dXJuIGVsW21hdGNoZXNTZWxlY3RvckZ1bmNdKHNlbGVjdG9yKTtcbn0gLy8gV29ya3MgdXAgdGhlIHRyZWUgdG8gdGhlIGRyYWdnYWJsZSBpdHNlbGYgYXR0ZW1wdGluZyB0byBtYXRjaCBzZWxlY3Rvci5cblxuXG5mdW5jdGlvbiBtYXRjaGVzU2VsZWN0b3JBbmRQYXJlbnRzVG8oZWxcbi8qOiBOb2RlKi9cbiwgc2VsZWN0b3Jcbi8qOiBzdHJpbmcqL1xuLCBiYXNlTm9kZVxuLyo6IE5vZGUqL1xuKVxuLyo6IGJvb2xlYW4qL1xue1xuICB2YXIgbm9kZSA9IGVsO1xuXG4gIGRvIHtcbiAgICBpZiAobWF0Y2hlc1NlbGVjdG9yKG5vZGUsIHNlbGVjdG9yKSkgcmV0dXJuIHRydWU7XG4gICAgaWYgKG5vZGUgPT09IGJhc2VOb2RlKSByZXR1cm4gZmFsc2U7XG4gICAgbm9kZSA9IG5vZGUucGFyZW50Tm9kZTtcbiAgfSB3aGlsZSAobm9kZSk7XG5cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5mdW5jdGlvbiBhZGRFdmVudChlbFxuLyo6ID9Ob2RlKi9cbiwgZXZlbnRcbi8qOiBzdHJpbmcqL1xuLCBoYW5kbGVyXG4vKjogRnVuY3Rpb24qL1xuLCBpbnB1dE9wdGlvbnNcbi8qOiBPYmplY3QqL1xuKVxuLyo6IHZvaWQqL1xue1xuICBpZiAoIWVsKSByZXR1cm47XG5cbiAgdmFyIG9wdGlvbnMgPSBfb2JqZWN0U3ByZWFkKHtcbiAgICBjYXB0dXJlOiB0cnVlXG4gIH0sIGlucHV0T3B0aW9ucyk7XG5cbiAgaWYgKGVsLmFkZEV2ZW50TGlzdGVuZXIpIHtcbiAgICBlbC5hZGRFdmVudExpc3RlbmVyKGV2ZW50LCBoYW5kbGVyLCBvcHRpb25zKTtcbiAgfSBlbHNlIGlmIChlbC5hdHRhY2hFdmVudCkge1xuICAgIGVsLmF0dGFjaEV2ZW50KCdvbicgKyBldmVudCwgaGFuZGxlcik7XG4gIH0gZWxzZSB7XG4gICAgLy8gJEZsb3dJZ25vcmU6IERvZXNuJ3QgdGhpbmsgZWxlbWVudHMgYXJlIGluZGV4YWJsZVxuICAgIGVsWydvbicgKyBldmVudF0gPSBoYW5kbGVyO1xuICB9XG59XG5cbmZ1bmN0aW9uIHJlbW92ZUV2ZW50KGVsXG4vKjogP05vZGUqL1xuLCBldmVudFxuLyo6IHN0cmluZyovXG4sIGhhbmRsZXJcbi8qOiBGdW5jdGlvbiovXG4sIGlucHV0T3B0aW9uc1xuLyo6IE9iamVjdCovXG4pXG4vKjogdm9pZCovXG57XG4gIGlmICghZWwpIHJldHVybjtcblxuICB2YXIgb3B0aW9ucyA9IF9vYmplY3RTcHJlYWQoe1xuICAgIGNhcHR1cmU6IHRydWVcbiAgfSwgaW5wdXRPcHRpb25zKTtcblxuICBpZiAoZWwucmVtb3ZlRXZlbnRMaXN0ZW5lcikge1xuICAgIGVsLnJlbW92ZUV2ZW50TGlzdGVuZXIoZXZlbnQsIGhhbmRsZXIsIG9wdGlvbnMpO1xuICB9IGVsc2UgaWYgKGVsLmRldGFjaEV2ZW50KSB7XG4gICAgZWwuZGV0YWNoRXZlbnQoJ29uJyArIGV2ZW50LCBoYW5kbGVyKTtcbiAgfSBlbHNlIHtcbiAgICAvLyAkRmxvd0lnbm9yZTogRG9lc24ndCB0aGluayBlbGVtZW50cyBhcmUgaW5kZXhhYmxlXG4gICAgZWxbJ29uJyArIGV2ZW50XSA9IG51bGw7XG4gIH1cbn1cblxuZnVuY3Rpb24gb3V0ZXJIZWlnaHQobm9kZVxuLyo6IEhUTUxFbGVtZW50Ki9cbilcbi8qOiBudW1iZXIqL1xue1xuICAvLyBUaGlzIGlzIGRlbGliZXJhdGVseSBleGNsdWRpbmcgbWFyZ2luIGZvciBvdXIgY2FsY3VsYXRpb25zLCBzaW5jZSB3ZSBhcmUgdXNpbmdcbiAgLy8gb2Zmc2V0VG9wIHdoaWNoIGlzIGluY2x1ZGluZyBtYXJnaW4uIFNlZSBnZXRCb3VuZFBvc2l0aW9uXG4gIHZhciBoZWlnaHQgPSBub2RlLmNsaWVudEhlaWdodDtcbiAgdmFyIGNvbXB1dGVkU3R5bGUgPSBub2RlLm93bmVyRG9jdW1lbnQuZGVmYXVsdFZpZXcuZ2V0Q29tcHV0ZWRTdHlsZShub2RlKTtcbiAgaGVpZ2h0ICs9ICgwLCBfc2hpbXMuaW50KShjb21wdXRlZFN0eWxlLmJvcmRlclRvcFdpZHRoKTtcbiAgaGVpZ2h0ICs9ICgwLCBfc2hpbXMuaW50KShjb21wdXRlZFN0eWxlLmJvcmRlckJvdHRvbVdpZHRoKTtcbiAgcmV0dXJuIGhlaWdodDtcbn1cblxuZnVuY3Rpb24gb3V0ZXJXaWR0aChub2RlXG4vKjogSFRNTEVsZW1lbnQqL1xuKVxuLyo6IG51bWJlciovXG57XG4gIC8vIFRoaXMgaXMgZGVsaWJlcmF0ZWx5IGV4Y2x1ZGluZyBtYXJnaW4gZm9yIG91ciBjYWxjdWxhdGlvbnMsIHNpbmNlIHdlIGFyZSB1c2luZ1xuICAvLyBvZmZzZXRMZWZ0IHdoaWNoIGlzIGluY2x1ZGluZyBtYXJnaW4uIFNlZSBnZXRCb3VuZFBvc2l0aW9uXG4gIHZhciB3aWR0aCA9IG5vZGUuY2xpZW50V2lkdGg7XG4gIHZhciBjb21wdXRlZFN0eWxlID0gbm9kZS5vd25lckRvY3VtZW50LmRlZmF1bHRWaWV3LmdldENvbXB1dGVkU3R5bGUobm9kZSk7XG4gIHdpZHRoICs9ICgwLCBfc2hpbXMuaW50KShjb21wdXRlZFN0eWxlLmJvcmRlckxlZnRXaWR0aCk7XG4gIHdpZHRoICs9ICgwLCBfc2hpbXMuaW50KShjb21wdXRlZFN0eWxlLmJvcmRlclJpZ2h0V2lkdGgpO1xuICByZXR1cm4gd2lkdGg7XG59XG5cbmZ1bmN0aW9uIGlubmVySGVpZ2h0KG5vZGVcbi8qOiBIVE1MRWxlbWVudCovXG4pXG4vKjogbnVtYmVyKi9cbntcbiAgdmFyIGhlaWdodCA9IG5vZGUuY2xpZW50SGVpZ2h0O1xuICB2YXIgY29tcHV0ZWRTdHlsZSA9IG5vZGUub3duZXJEb2N1bWVudC5kZWZhdWx0Vmlldy5nZXRDb21wdXRlZFN0eWxlKG5vZGUpO1xuICBoZWlnaHQgLT0gKDAsIF9zaGltcy5pbnQpKGNvbXB1dGVkU3R5bGUucGFkZGluZ1RvcCk7XG4gIGhlaWdodCAtPSAoMCwgX3NoaW1zLmludCkoY29tcHV0ZWRTdHlsZS5wYWRkaW5nQm90dG9tKTtcbiAgcmV0dXJuIGhlaWdodDtcbn1cblxuZnVuY3Rpb24gaW5uZXJXaWR0aChub2RlXG4vKjogSFRNTEVsZW1lbnQqL1xuKVxuLyo6IG51bWJlciovXG57XG4gIHZhciB3aWR0aCA9IG5vZGUuY2xpZW50V2lkdGg7XG4gIHZhciBjb21wdXRlZFN0eWxlID0gbm9kZS5vd25lckRvY3VtZW50LmRlZmF1bHRWaWV3LmdldENvbXB1dGVkU3R5bGUobm9kZSk7XG4gIHdpZHRoIC09ICgwLCBfc2hpbXMuaW50KShjb21wdXRlZFN0eWxlLnBhZGRpbmdMZWZ0KTtcbiAgd2lkdGggLT0gKDAsIF9zaGltcy5pbnQpKGNvbXB1dGVkU3R5bGUucGFkZGluZ1JpZ2h0KTtcbiAgcmV0dXJuIHdpZHRoO1xufSAvLyBHZXQgZnJvbSBvZmZzZXRQYXJlbnRcblxuXG5mdW5jdGlvbiBvZmZzZXRYWUZyb21QYXJlbnQoZXZ0XG4vKjoge2NsaWVudFg6IG51bWJlciwgY2xpZW50WTogbnVtYmVyfSovXG4sIG9mZnNldFBhcmVudFxuLyo6IEhUTUxFbGVtZW50Ki9cbiwgc2NhbGVcbi8qOiBudW1iZXIqL1xuKVxuLyo6IENvbnRyb2xQb3NpdGlvbiovXG57XG4gIHZhciBpc0JvZHkgPSBvZmZzZXRQYXJlbnQgPT09IG9mZnNldFBhcmVudC5vd25lckRvY3VtZW50LmJvZHk7XG4gIHZhciBvZmZzZXRQYXJlbnRSZWN0ID0gaXNCb2R5ID8ge1xuICAgIGxlZnQ6IDAsXG4gICAgdG9wOiAwXG4gIH0gOiBvZmZzZXRQYXJlbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gIHZhciB4ID0gKGV2dC5jbGllbnRYICsgb2Zmc2V0UGFyZW50LnNjcm9sbExlZnQgLSBvZmZzZXRQYXJlbnRSZWN0LmxlZnQpIC8gc2NhbGU7XG4gIHZhciB5ID0gKGV2dC5jbGllbnRZICsgb2Zmc2V0UGFyZW50LnNjcm9sbFRvcCAtIG9mZnNldFBhcmVudFJlY3QudG9wKSAvIHNjYWxlO1xuICByZXR1cm4ge1xuICAgIHg6IHgsXG4gICAgeTogeVxuICB9O1xufVxuXG5mdW5jdGlvbiBjcmVhdGVDU1NUcmFuc2Zvcm0oY29udHJvbFBvc1xuLyo6IENvbnRyb2xQb3NpdGlvbiovXG4sIHBvc2l0aW9uT2Zmc2V0XG4vKjogUG9zaXRpb25PZmZzZXRDb250cm9sUG9zaXRpb24qL1xuKVxuLyo6IE9iamVjdCovXG57XG4gIHZhciB0cmFuc2xhdGlvbiA9IGdldFRyYW5zbGF0aW9uKGNvbnRyb2xQb3MsIHBvc2l0aW9uT2Zmc2V0LCAncHgnKTtcbiAgcmV0dXJuIF9kZWZpbmVQcm9wZXJ0eSh7fSwgKDAsIF9nZXRQcmVmaXguYnJvd3NlclByZWZpeFRvS2V5KSgndHJhbnNmb3JtJywgX2dldFByZWZpeC5kZWZhdWx0KSwgdHJhbnNsYXRpb24pO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVTVkdUcmFuc2Zvcm0oY29udHJvbFBvc1xuLyo6IENvbnRyb2xQb3NpdGlvbiovXG4sIHBvc2l0aW9uT2Zmc2V0XG4vKjogUG9zaXRpb25PZmZzZXRDb250cm9sUG9zaXRpb24qL1xuKVxuLyo6IHN0cmluZyovXG57XG4gIHZhciB0cmFuc2xhdGlvbiA9IGdldFRyYW5zbGF0aW9uKGNvbnRyb2xQb3MsIHBvc2l0aW9uT2Zmc2V0LCAnJyk7XG4gIHJldHVybiB0cmFuc2xhdGlvbjtcbn1cblxuZnVuY3Rpb24gZ2V0VHJhbnNsYXRpb24oX3JlZjIsIHBvc2l0aW9uT2Zmc2V0XG4vKjogUG9zaXRpb25PZmZzZXRDb250cm9sUG9zaXRpb24qL1xuLCB1bml0U3VmZml4XG4vKjogc3RyaW5nKi9cbilcbi8qOiBzdHJpbmcqL1xue1xuICB2YXIgeCA9IF9yZWYyLngsXG4gICAgICB5ID0gX3JlZjIueTtcbiAgdmFyIHRyYW5zbGF0aW9uID0gXCJ0cmFuc2xhdGUoXCIuY29uY2F0KHgpLmNvbmNhdCh1bml0U3VmZml4LCBcIixcIikuY29uY2F0KHkpLmNvbmNhdCh1bml0U3VmZml4LCBcIilcIik7XG5cbiAgaWYgKHBvc2l0aW9uT2Zmc2V0KSB7XG4gICAgdmFyIGRlZmF1bHRYID0gXCJcIi5jb25jYXQodHlwZW9mIHBvc2l0aW9uT2Zmc2V0LnggPT09ICdzdHJpbmcnID8gcG9zaXRpb25PZmZzZXQueCA6IHBvc2l0aW9uT2Zmc2V0LnggKyB1bml0U3VmZml4KTtcbiAgICB2YXIgZGVmYXVsdFkgPSBcIlwiLmNvbmNhdCh0eXBlb2YgcG9zaXRpb25PZmZzZXQueSA9PT0gJ3N0cmluZycgPyBwb3NpdGlvbk9mZnNldC55IDogcG9zaXRpb25PZmZzZXQueSArIHVuaXRTdWZmaXgpO1xuICAgIHRyYW5zbGF0aW9uID0gXCJ0cmFuc2xhdGUoXCIuY29uY2F0KGRlZmF1bHRYLCBcIiwgXCIpLmNvbmNhdChkZWZhdWx0WSwgXCIpXCIpICsgdHJhbnNsYXRpb247XG4gIH1cblxuICByZXR1cm4gdHJhbnNsYXRpb247XG59XG5cbmZ1bmN0aW9uIGdldFRvdWNoKGVcbi8qOiBNb3VzZVRvdWNoRXZlbnQqL1xuLCBpZGVudGlmaWVyXG4vKjogbnVtYmVyKi9cbilcbi8qOiA/e2NsaWVudFg6IG51bWJlciwgY2xpZW50WTogbnVtYmVyfSovXG57XG4gIHJldHVybiBlLnRhcmdldFRvdWNoZXMgJiYgKDAsIF9zaGltcy5maW5kSW5BcnJheSkoZS50YXJnZXRUb3VjaGVzLCBmdW5jdGlvbiAodCkge1xuICAgIHJldHVybiBpZGVudGlmaWVyID09PSB0LmlkZW50aWZpZXI7XG4gIH0pIHx8IGUuY2hhbmdlZFRvdWNoZXMgJiYgKDAsIF9zaGltcy5maW5kSW5BcnJheSkoZS5jaGFuZ2VkVG91Y2hlcywgZnVuY3Rpb24gKHQpIHtcbiAgICByZXR1cm4gaWRlbnRpZmllciA9PT0gdC5pZGVudGlmaWVyO1xuICB9KTtcbn1cblxuZnVuY3Rpb24gZ2V0VG91Y2hJZGVudGlmaWVyKGVcbi8qOiBNb3VzZVRvdWNoRXZlbnQqL1xuKVxuLyo6ID9udW1iZXIqL1xue1xuICBpZiAoZS50YXJnZXRUb3VjaGVzICYmIGUudGFyZ2V0VG91Y2hlc1swXSkgcmV0dXJuIGUudGFyZ2V0VG91Y2hlc1swXS5pZGVudGlmaWVyO1xuICBpZiAoZS5jaGFuZ2VkVG91Y2hlcyAmJiBlLmNoYW5nZWRUb3VjaGVzWzBdKSByZXR1cm4gZS5jaGFuZ2VkVG91Y2hlc1swXS5pZGVudGlmaWVyO1xufSAvLyBVc2VyLXNlbGVjdCBIYWNrczpcbi8vXG4vLyBVc2VmdWwgZm9yIHByZXZlbnRpbmcgYmx1ZSBoaWdobGlnaHRzIGFsbCBvdmVyIGV2ZXJ5dGhpbmcgd2hlbiBkcmFnZ2luZy5cbi8vIE5vdGUgd2UncmUgcGFzc2luZyBgZG9jdW1lbnRgIGIvYyB3ZSBjb3VsZCBiZSBpZnJhbWVkXG5cblxuZnVuY3Rpb24gYWRkVXNlclNlbGVjdFN0eWxlcyhkb2Ncbi8qOiA/RG9jdW1lbnQqL1xuKSB7XG4gIGlmICghZG9jKSByZXR1cm47XG4gIHZhciBzdHlsZUVsID0gZG9jLmdldEVsZW1lbnRCeUlkKCdyZWFjdC1kcmFnZ2FibGUtc3R5bGUtZWwnKTtcblxuICBpZiAoIXN0eWxlRWwpIHtcbiAgICBzdHlsZUVsID0gZG9jLmNyZWF0ZUVsZW1lbnQoJ3N0eWxlJyk7XG4gICAgc3R5bGVFbC50eXBlID0gJ3RleHQvY3NzJztcbiAgICBzdHlsZUVsLmlkID0gJ3JlYWN0LWRyYWdnYWJsZS1zdHlsZS1lbCc7XG4gICAgc3R5bGVFbC5pbm5lckhUTUwgPSAnLnJlYWN0LWRyYWdnYWJsZS10cmFuc3BhcmVudC1zZWxlY3Rpb24gKjo6LW1vei1zZWxlY3Rpb24ge2FsbDogaW5oZXJpdDt9XFxuJztcbiAgICBzdHlsZUVsLmlubmVySFRNTCArPSAnLnJlYWN0LWRyYWdnYWJsZS10cmFuc3BhcmVudC1zZWxlY3Rpb24gKjo6c2VsZWN0aW9uIHthbGw6IGluaGVyaXQ7fVxcbic7XG4gICAgZG9jLmdldEVsZW1lbnRzQnlUYWdOYW1lKCdoZWFkJylbMF0uYXBwZW5kQ2hpbGQoc3R5bGVFbCk7XG4gIH1cblxuICBpZiAoZG9jLmJvZHkpIGFkZENsYXNzTmFtZShkb2MuYm9keSwgJ3JlYWN0LWRyYWdnYWJsZS10cmFuc3BhcmVudC1zZWxlY3Rpb24nKTtcbn1cblxuZnVuY3Rpb24gcmVtb3ZlVXNlclNlbGVjdFN0eWxlcyhkb2Ncbi8qOiA/RG9jdW1lbnQqL1xuKSB7XG4gIGlmICghZG9jKSByZXR1cm47XG5cbiAgdHJ5IHtcbiAgICBpZiAoZG9jLmJvZHkpIHJlbW92ZUNsYXNzTmFtZShkb2MuYm9keSwgJ3JlYWN0LWRyYWdnYWJsZS10cmFuc3BhcmVudC1zZWxlY3Rpb24nKTsgLy8gJEZsb3dJZ25vcmU6IElFXG5cbiAgICBpZiAoZG9jLnNlbGVjdGlvbikge1xuICAgICAgLy8gJEZsb3dJZ25vcmU6IElFXG4gICAgICBkb2Muc2VsZWN0aW9uLmVtcHR5KCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIFJlbW92ZSBzZWxlY3Rpb24gY2F1c2VkIGJ5IHNjcm9sbCwgdW5sZXNzIGl0J3MgYSBmb2N1c2VkIGlucHV0XG4gICAgICAvLyAod2UgdXNlIGRvYy5kZWZhdWx0VmlldyBpbiBjYXNlIHdlJ3JlIGluIGFuIGlmcmFtZSlcbiAgICAgIHZhciBzZWxlY3Rpb24gPSAoZG9jLmRlZmF1bHRWaWV3IHx8IHdpbmRvdykuZ2V0U2VsZWN0aW9uKCk7XG5cbiAgICAgIGlmIChzZWxlY3Rpb24gJiYgc2VsZWN0aW9uLnR5cGUgIT09ICdDYXJldCcpIHtcbiAgICAgICAgc2VsZWN0aW9uLnJlbW92ZUFsbFJhbmdlcygpO1xuICAgICAgfVxuICAgIH1cbiAgfSBjYXRjaCAoZSkgey8vIHByb2JhYmx5IElFXG4gIH1cbn1cblxuZnVuY3Rpb24gYWRkQ2xhc3NOYW1lKGVsXG4vKjogSFRNTEVsZW1lbnQqL1xuLCBjbGFzc05hbWVcbi8qOiBzdHJpbmcqL1xuKSB7XG4gIGlmIChlbC5jbGFzc0xpc3QpIHtcbiAgICBlbC5jbGFzc0xpc3QuYWRkKGNsYXNzTmFtZSk7XG4gIH0gZWxzZSB7XG4gICAgaWYgKCFlbC5jbGFzc05hbWUubWF0Y2gobmV3IFJlZ0V4cChcIig/Ol58XFxcXHMpXCIuY29uY2F0KGNsYXNzTmFtZSwgXCIoPyFcXFxcUylcIikpKSkge1xuICAgICAgZWwuY2xhc3NOYW1lICs9IFwiIFwiLmNvbmNhdChjbGFzc05hbWUpO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiByZW1vdmVDbGFzc05hbWUoZWxcbi8qOiBIVE1MRWxlbWVudCovXG4sIGNsYXNzTmFtZVxuLyo6IHN0cmluZyovXG4pIHtcbiAgaWYgKGVsLmNsYXNzTGlzdCkge1xuICAgIGVsLmNsYXNzTGlzdC5yZW1vdmUoY2xhc3NOYW1lKTtcbiAgfSBlbHNlIHtcbiAgICBlbC5jbGFzc05hbWUgPSBlbC5jbGFzc05hbWUucmVwbGFjZShuZXcgUmVnRXhwKFwiKD86XnxcXFxccylcIi5jb25jYXQoY2xhc3NOYW1lLCBcIig/IVxcXFxTKVwiKSwgJ2cnKSwgJycpO1xuICB9XG59IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwO1xuXG52YXIgX3JlYWN0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicmVhY3RcIikpO1xuXG52YXIgX2NyZWF0ZVN2Z0ljb24gPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL3V0aWxzL2NyZWF0ZVN2Z0ljb25cIikpO1xuXG52YXIgX2RlZmF1bHQgPSAoMCwgX2NyZWF0ZVN2Z0ljb24uZGVmYXVsdCkoX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChcInBhdGhcIiwge1xuICBkOiBcIk0zIDE4aDE4di0ySDN2MnptMC01aDE4di0ySDN2MnptMC03djJoMThWNkgzelwiXG59KSwgJ01lbnUnKTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7IiwiLyogZ2xvYmFsIHdpbmRvdyAqL1xuaW1wb3J0IHBvbnlmaWxsIGZyb20gJy4vcG9ueWZpbGwuanMnO1xuXG52YXIgcm9vdDtcblxuaWYgKHR5cGVvZiBzZWxmICE9PSAndW5kZWZpbmVkJykge1xuICByb290ID0gc2VsZjtcbn0gZWxzZSBpZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgcm9vdCA9IHdpbmRvdztcbn0gZWxzZSBpZiAodHlwZW9mIGdsb2JhbCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgcm9vdCA9IGdsb2JhbDtcbn0gZWxzZSBpZiAodHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgcm9vdCA9IG1vZHVsZTtcbn0gZWxzZSB7XG4gIHJvb3QgPSBGdW5jdGlvbigncmV0dXJuIHRoaXMnKSgpO1xufVxuXG52YXIgcmVzdWx0ID0gcG9ueWZpbGwocm9vdCk7XG5leHBvcnQgZGVmYXVsdCByZXN1bHQ7XG4iLCJpbXBvcnQgUmVhY3QsIHsgQ29tcG9uZW50IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IF9pbmhlcml0c0xvb3NlIGZyb20gJ0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2luaGVyaXRzTG9vc2UnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCB3YXJuaW5nIGZyb20gJ3Rpbnktd2FybmluZyc7XG5cbnZhciBNQVhfU0lHTkVEXzMxX0JJVF9JTlQgPSAxMDczNzQxODIzO1xudmFyIGNvbW1vbmpzR2xvYmFsID0gdHlwZW9mIGdsb2JhbFRoaXMgIT09ICd1bmRlZmluZWQnID8gZ2xvYmFsVGhpcyA6IHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnID8gd2luZG93IDogdHlwZW9mIGdsb2JhbCAhPT0gJ3VuZGVmaW5lZCcgPyBnbG9iYWwgOiB7fTtcblxuZnVuY3Rpb24gZ2V0VW5pcXVlSWQoKSB7XG4gIHZhciBrZXkgPSAnX19nbG9iYWxfdW5pcXVlX2lkX18nO1xuICByZXR1cm4gY29tbW9uanNHbG9iYWxba2V5XSA9IChjb21tb25qc0dsb2JhbFtrZXldIHx8IDApICsgMTtcbn1cblxuZnVuY3Rpb24gb2JqZWN0SXMoeCwgeSkge1xuICBpZiAoeCA9PT0geSkge1xuICAgIHJldHVybiB4ICE9PSAwIHx8IDEgLyB4ID09PSAxIC8geTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4geCAhPT0geCAmJiB5ICE9PSB5O1xuICB9XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUV2ZW50RW1pdHRlcih2YWx1ZSkge1xuICB2YXIgaGFuZGxlcnMgPSBbXTtcbiAgcmV0dXJuIHtcbiAgICBvbjogZnVuY3Rpb24gb24oaGFuZGxlcikge1xuICAgICAgaGFuZGxlcnMucHVzaChoYW5kbGVyKTtcbiAgICB9LFxuICAgIG9mZjogZnVuY3Rpb24gb2ZmKGhhbmRsZXIpIHtcbiAgICAgIGhhbmRsZXJzID0gaGFuZGxlcnMuZmlsdGVyKGZ1bmN0aW9uIChoKSB7XG4gICAgICAgIHJldHVybiBoICE9PSBoYW5kbGVyO1xuICAgICAgfSk7XG4gICAgfSxcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9LFxuICAgIHNldDogZnVuY3Rpb24gc2V0KG5ld1ZhbHVlLCBjaGFuZ2VkQml0cykge1xuICAgICAgdmFsdWUgPSBuZXdWYWx1ZTtcbiAgICAgIGhhbmRsZXJzLmZvckVhY2goZnVuY3Rpb24gKGhhbmRsZXIpIHtcbiAgICAgICAgcmV0dXJuIGhhbmRsZXIodmFsdWUsIGNoYW5nZWRCaXRzKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfTtcbn1cblxuZnVuY3Rpb24gb25seUNoaWxkKGNoaWxkcmVuKSB7XG4gIHJldHVybiBBcnJheS5pc0FycmF5KGNoaWxkcmVuKSA/IGNoaWxkcmVuWzBdIDogY2hpbGRyZW47XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVJlYWN0Q29udGV4dChkZWZhdWx0VmFsdWUsIGNhbGN1bGF0ZUNoYW5nZWRCaXRzKSB7XG4gIHZhciBfUHJvdmlkZXIkY2hpbGRDb250ZXgsIF9Db25zdW1lciRjb250ZXh0VHlwZTtcblxuICB2YXIgY29udGV4dFByb3AgPSAnX19jcmVhdGUtcmVhY3QtY29udGV4dC0nICsgZ2V0VW5pcXVlSWQoKSArICdfXyc7XG5cbiAgdmFyIFByb3ZpZGVyID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfQ29tcG9uZW50KSB7XG4gICAgX2luaGVyaXRzTG9vc2UoUHJvdmlkZXIsIF9Db21wb25lbnQpO1xuXG4gICAgZnVuY3Rpb24gUHJvdmlkZXIoKSB7XG4gICAgICB2YXIgX3RoaXM7XG5cbiAgICAgIF90aGlzID0gX0NvbXBvbmVudC5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XG4gICAgICBfdGhpcy5lbWl0dGVyID0gY3JlYXRlRXZlbnRFbWl0dGVyKF90aGlzLnByb3BzLnZhbHVlKTtcbiAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG5cbiAgICB2YXIgX3Byb3RvID0gUHJvdmlkZXIucHJvdG90eXBlO1xuXG4gICAgX3Byb3RvLmdldENoaWxkQ29udGV4dCA9IGZ1bmN0aW9uIGdldENoaWxkQ29udGV4dCgpIHtcbiAgICAgIHZhciBfcmVmO1xuXG4gICAgICByZXR1cm4gX3JlZiA9IHt9LCBfcmVmW2NvbnRleHRQcm9wXSA9IHRoaXMuZW1pdHRlciwgX3JlZjtcbiAgICB9O1xuXG4gICAgX3Byb3RvLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMgPSBmdW5jdGlvbiBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKG5leHRQcm9wcykge1xuICAgICAgaWYgKHRoaXMucHJvcHMudmFsdWUgIT09IG5leHRQcm9wcy52YWx1ZSkge1xuICAgICAgICB2YXIgb2xkVmFsdWUgPSB0aGlzLnByb3BzLnZhbHVlO1xuICAgICAgICB2YXIgbmV3VmFsdWUgPSBuZXh0UHJvcHMudmFsdWU7XG4gICAgICAgIHZhciBjaGFuZ2VkQml0cztcblxuICAgICAgICBpZiAob2JqZWN0SXMob2xkVmFsdWUsIG5ld1ZhbHVlKSkge1xuICAgICAgICAgIGNoYW5nZWRCaXRzID0gMDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjaGFuZ2VkQml0cyA9IHR5cGVvZiBjYWxjdWxhdGVDaGFuZ2VkQml0cyA9PT0gJ2Z1bmN0aW9uJyA/IGNhbGN1bGF0ZUNoYW5nZWRCaXRzKG9sZFZhbHVlLCBuZXdWYWx1ZSkgOiBNQVhfU0lHTkVEXzMxX0JJVF9JTlQ7XG5cbiAgICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICAgICAgd2FybmluZygoY2hhbmdlZEJpdHMgJiBNQVhfU0lHTkVEXzMxX0JJVF9JTlQpID09PSBjaGFuZ2VkQml0cywgJ2NhbGN1bGF0ZUNoYW5nZWRCaXRzOiBFeHBlY3RlZCB0aGUgcmV0dXJuIHZhbHVlIHRvIGJlIGEgJyArICczMS1iaXQgaW50ZWdlci4gSW5zdGVhZCByZWNlaXZlZDogJyArIGNoYW5nZWRCaXRzKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBjaGFuZ2VkQml0cyB8PSAwO1xuXG4gICAgICAgICAgaWYgKGNoYW5nZWRCaXRzICE9PSAwKSB7XG4gICAgICAgICAgICB0aGlzLmVtaXR0ZXIuc2V0KG5leHRQcm9wcy52YWx1ZSwgY2hhbmdlZEJpdHMpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG5cbiAgICBfcHJvdG8ucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgcmV0dXJuIHRoaXMucHJvcHMuY2hpbGRyZW47XG4gICAgfTtcblxuICAgIHJldHVybiBQcm92aWRlcjtcbiAgfShDb21wb25lbnQpO1xuXG4gIFByb3ZpZGVyLmNoaWxkQ29udGV4dFR5cGVzID0gKF9Qcm92aWRlciRjaGlsZENvbnRleCA9IHt9LCBfUHJvdmlkZXIkY2hpbGRDb250ZXhbY29udGV4dFByb3BdID0gUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkLCBfUHJvdmlkZXIkY2hpbGRDb250ZXgpO1xuXG4gIHZhciBDb25zdW1lciA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX0NvbXBvbmVudDIpIHtcbiAgICBfaW5oZXJpdHNMb29zZShDb25zdW1lciwgX0NvbXBvbmVudDIpO1xuXG4gICAgZnVuY3Rpb24gQ29uc3VtZXIoKSB7XG4gICAgICB2YXIgX3RoaXMyO1xuXG4gICAgICBfdGhpczIgPSBfQ29tcG9uZW50Mi5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XG4gICAgICBfdGhpczIuc3RhdGUgPSB7XG4gICAgICAgIHZhbHVlOiBfdGhpczIuZ2V0VmFsdWUoKVxuICAgICAgfTtcblxuICAgICAgX3RoaXMyLm9uVXBkYXRlID0gZnVuY3Rpb24gKG5ld1ZhbHVlLCBjaGFuZ2VkQml0cykge1xuICAgICAgICB2YXIgb2JzZXJ2ZWRCaXRzID0gX3RoaXMyLm9ic2VydmVkQml0cyB8IDA7XG5cbiAgICAgICAgaWYgKChvYnNlcnZlZEJpdHMgJiBjaGFuZ2VkQml0cykgIT09IDApIHtcbiAgICAgICAgICBfdGhpczIuc2V0U3RhdGUoe1xuICAgICAgICAgICAgdmFsdWU6IF90aGlzMi5nZXRWYWx1ZSgpXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH07XG5cbiAgICAgIHJldHVybiBfdGhpczI7XG4gICAgfVxuXG4gICAgdmFyIF9wcm90bzIgPSBDb25zdW1lci5wcm90b3R5cGU7XG5cbiAgICBfcHJvdG8yLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMgPSBmdW5jdGlvbiBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKG5leHRQcm9wcykge1xuICAgICAgdmFyIG9ic2VydmVkQml0cyA9IG5leHRQcm9wcy5vYnNlcnZlZEJpdHM7XG4gICAgICB0aGlzLm9ic2VydmVkQml0cyA9IG9ic2VydmVkQml0cyA9PT0gdW5kZWZpbmVkIHx8IG9ic2VydmVkQml0cyA9PT0gbnVsbCA/IE1BWF9TSUdORURfMzFfQklUX0lOVCA6IG9ic2VydmVkQml0cztcbiAgICB9O1xuXG4gICAgX3Byb3RvMi5jb21wb25lbnREaWRNb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgICAgaWYgKHRoaXMuY29udGV4dFtjb250ZXh0UHJvcF0pIHtcbiAgICAgICAgdGhpcy5jb250ZXh0W2NvbnRleHRQcm9wXS5vbih0aGlzLm9uVXBkYXRlKTtcbiAgICAgIH1cblxuICAgICAgdmFyIG9ic2VydmVkQml0cyA9IHRoaXMucHJvcHMub2JzZXJ2ZWRCaXRzO1xuICAgICAgdGhpcy5vYnNlcnZlZEJpdHMgPSBvYnNlcnZlZEJpdHMgPT09IHVuZGVmaW5lZCB8fCBvYnNlcnZlZEJpdHMgPT09IG51bGwgPyBNQVhfU0lHTkVEXzMxX0JJVF9JTlQgOiBvYnNlcnZlZEJpdHM7XG4gICAgfTtcblxuICAgIF9wcm90bzIuY29tcG9uZW50V2lsbFVubW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICAgIGlmICh0aGlzLmNvbnRleHRbY29udGV4dFByb3BdKSB7XG4gICAgICAgIHRoaXMuY29udGV4dFtjb250ZXh0UHJvcF0ub2ZmKHRoaXMub25VcGRhdGUpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBfcHJvdG8yLmdldFZhbHVlID0gZnVuY3Rpb24gZ2V0VmFsdWUoKSB7XG4gICAgICBpZiAodGhpcy5jb250ZXh0W2NvbnRleHRQcm9wXSkge1xuICAgICAgICByZXR1cm4gdGhpcy5jb250ZXh0W2NvbnRleHRQcm9wXS5nZXQoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBkZWZhdWx0VmFsdWU7XG4gICAgICB9XG4gICAgfTtcblxuICAgIF9wcm90bzIucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgcmV0dXJuIG9ubHlDaGlsZCh0aGlzLnByb3BzLmNoaWxkcmVuKSh0aGlzLnN0YXRlLnZhbHVlKTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIENvbnN1bWVyO1xuICB9KENvbXBvbmVudCk7XG5cbiAgQ29uc3VtZXIuY29udGV4dFR5cGVzID0gKF9Db25zdW1lciRjb250ZXh0VHlwZSA9IHt9LCBfQ29uc3VtZXIkY29udGV4dFR5cGVbY29udGV4dFByb3BdID0gUHJvcFR5cGVzLm9iamVjdCwgX0NvbnN1bWVyJGNvbnRleHRUeXBlKTtcbiAgcmV0dXJuIHtcbiAgICBQcm92aWRlcjogUHJvdmlkZXIsXG4gICAgQ29uc3VtZXI6IENvbnN1bWVyXG4gIH07XG59XG5cbnZhciBpbmRleCA9IFJlYWN0LmNyZWF0ZUNvbnRleHQgfHwgY3JlYXRlUmVhY3RDb250ZXh0O1xuXG5leHBvcnQgZGVmYXVsdCBpbmRleDtcbiIsInZhciBpc2FycmF5ID0gcmVxdWlyZSgnaXNhcnJheScpXG5cbi8qKlxuICogRXhwb3NlIGBwYXRoVG9SZWdleHBgLlxuICovXG5tb2R1bGUuZXhwb3J0cyA9IHBhdGhUb1JlZ2V4cFxubW9kdWxlLmV4cG9ydHMucGFyc2UgPSBwYXJzZVxubW9kdWxlLmV4cG9ydHMuY29tcGlsZSA9IGNvbXBpbGVcbm1vZHVsZS5leHBvcnRzLnRva2Vuc1RvRnVuY3Rpb24gPSB0b2tlbnNUb0Z1bmN0aW9uXG5tb2R1bGUuZXhwb3J0cy50b2tlbnNUb1JlZ0V4cCA9IHRva2Vuc1RvUmVnRXhwXG5cbi8qKlxuICogVGhlIG1haW4gcGF0aCBtYXRjaGluZyByZWdleHAgdXRpbGl0eS5cbiAqXG4gKiBAdHlwZSB7UmVnRXhwfVxuICovXG52YXIgUEFUSF9SRUdFWFAgPSBuZXcgUmVnRXhwKFtcbiAgLy8gTWF0Y2ggZXNjYXBlZCBjaGFyYWN0ZXJzIHRoYXQgd291bGQgb3RoZXJ3aXNlIGFwcGVhciBpbiBmdXR1cmUgbWF0Y2hlcy5cbiAgLy8gVGhpcyBhbGxvd3MgdGhlIHVzZXIgdG8gZXNjYXBlIHNwZWNpYWwgY2hhcmFjdGVycyB0aGF0IHdvbid0IHRyYW5zZm9ybS5cbiAgJyhcXFxcXFxcXC4pJyxcbiAgLy8gTWF0Y2ggRXhwcmVzcy1zdHlsZSBwYXJhbWV0ZXJzIGFuZCB1bi1uYW1lZCBwYXJhbWV0ZXJzIHdpdGggYSBwcmVmaXhcbiAgLy8gYW5kIG9wdGlvbmFsIHN1ZmZpeGVzLiBNYXRjaGVzIGFwcGVhciBhczpcbiAgLy9cbiAgLy8gXCIvOnRlc3QoXFxcXGQrKT9cIiA9PiBbXCIvXCIsIFwidGVzdFwiLCBcIlxcZCtcIiwgdW5kZWZpbmVkLCBcIj9cIiwgdW5kZWZpbmVkXVxuICAvLyBcIi9yb3V0ZShcXFxcZCspXCIgID0+IFt1bmRlZmluZWQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBcIlxcZCtcIiwgdW5kZWZpbmVkLCB1bmRlZmluZWRdXG4gIC8vIFwiLypcIiAgICAgICAgICAgID0+IFtcIi9cIiwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBcIipcIl1cbiAgJyhbXFxcXC8uXSk/KD86KD86XFxcXDooXFxcXHcrKSg/OlxcXFwoKCg/OlxcXFxcXFxcLnxbXlxcXFxcXFxcKCldKSspXFxcXCkpP3xcXFxcKCgoPzpcXFxcXFxcXC58W15cXFxcXFxcXCgpXSkrKVxcXFwpKShbKyo/XSk/fChcXFxcKikpJ1xuXS5qb2luKCd8JyksICdnJylcblxuLyoqXG4gKiBQYXJzZSBhIHN0cmluZyBmb3IgdGhlIHJhdyB0b2tlbnMuXG4gKlxuICogQHBhcmFtICB7c3RyaW5nfSAgc3RyXG4gKiBAcGFyYW0gIHtPYmplY3Q9fSBvcHRpb25zXG4gKiBAcmV0dXJuIHshQXJyYXl9XG4gKi9cbmZ1bmN0aW9uIHBhcnNlIChzdHIsIG9wdGlvbnMpIHtcbiAgdmFyIHRva2VucyA9IFtdXG4gIHZhciBrZXkgPSAwXG4gIHZhciBpbmRleCA9IDBcbiAgdmFyIHBhdGggPSAnJ1xuICB2YXIgZGVmYXVsdERlbGltaXRlciA9IG9wdGlvbnMgJiYgb3B0aW9ucy5kZWxpbWl0ZXIgfHwgJy8nXG4gIHZhciByZXNcblxuICB3aGlsZSAoKHJlcyA9IFBBVEhfUkVHRVhQLmV4ZWMoc3RyKSkgIT0gbnVsbCkge1xuICAgIHZhciBtID0gcmVzWzBdXG4gICAgdmFyIGVzY2FwZWQgPSByZXNbMV1cbiAgICB2YXIgb2Zmc2V0ID0gcmVzLmluZGV4XG4gICAgcGF0aCArPSBzdHIuc2xpY2UoaW5kZXgsIG9mZnNldClcbiAgICBpbmRleCA9IG9mZnNldCArIG0ubGVuZ3RoXG5cbiAgICAvLyBJZ25vcmUgYWxyZWFkeSBlc2NhcGVkIHNlcXVlbmNlcy5cbiAgICBpZiAoZXNjYXBlZCkge1xuICAgICAgcGF0aCArPSBlc2NhcGVkWzFdXG4gICAgICBjb250aW51ZVxuICAgIH1cblxuICAgIHZhciBuZXh0ID0gc3RyW2luZGV4XVxuICAgIHZhciBwcmVmaXggPSByZXNbMl1cbiAgICB2YXIgbmFtZSA9IHJlc1szXVxuICAgIHZhciBjYXB0dXJlID0gcmVzWzRdXG4gICAgdmFyIGdyb3VwID0gcmVzWzVdXG4gICAgdmFyIG1vZGlmaWVyID0gcmVzWzZdXG4gICAgdmFyIGFzdGVyaXNrID0gcmVzWzddXG5cbiAgICAvLyBQdXNoIHRoZSBjdXJyZW50IHBhdGggb250byB0aGUgdG9rZW5zLlxuICAgIGlmIChwYXRoKSB7XG4gICAgICB0b2tlbnMucHVzaChwYXRoKVxuICAgICAgcGF0aCA9ICcnXG4gICAgfVxuXG4gICAgdmFyIHBhcnRpYWwgPSBwcmVmaXggIT0gbnVsbCAmJiBuZXh0ICE9IG51bGwgJiYgbmV4dCAhPT0gcHJlZml4XG4gICAgdmFyIHJlcGVhdCA9IG1vZGlmaWVyID09PSAnKycgfHwgbW9kaWZpZXIgPT09ICcqJ1xuICAgIHZhciBvcHRpb25hbCA9IG1vZGlmaWVyID09PSAnPycgfHwgbW9kaWZpZXIgPT09ICcqJ1xuICAgIHZhciBkZWxpbWl0ZXIgPSByZXNbMl0gfHwgZGVmYXVsdERlbGltaXRlclxuICAgIHZhciBwYXR0ZXJuID0gY2FwdHVyZSB8fCBncm91cFxuXG4gICAgdG9rZW5zLnB1c2goe1xuICAgICAgbmFtZTogbmFtZSB8fCBrZXkrKyxcbiAgICAgIHByZWZpeDogcHJlZml4IHx8ICcnLFxuICAgICAgZGVsaW1pdGVyOiBkZWxpbWl0ZXIsXG4gICAgICBvcHRpb25hbDogb3B0aW9uYWwsXG4gICAgICByZXBlYXQ6IHJlcGVhdCxcbiAgICAgIHBhcnRpYWw6IHBhcnRpYWwsXG4gICAgICBhc3RlcmlzazogISFhc3RlcmlzayxcbiAgICAgIHBhdHRlcm46IHBhdHRlcm4gPyBlc2NhcGVHcm91cChwYXR0ZXJuKSA6IChhc3RlcmlzayA/ICcuKicgOiAnW14nICsgZXNjYXBlU3RyaW5nKGRlbGltaXRlcikgKyAnXSs/JylcbiAgICB9KVxuICB9XG5cbiAgLy8gTWF0Y2ggYW55IGNoYXJhY3RlcnMgc3RpbGwgcmVtYWluaW5nLlxuICBpZiAoaW5kZXggPCBzdHIubGVuZ3RoKSB7XG4gICAgcGF0aCArPSBzdHIuc3Vic3RyKGluZGV4KVxuICB9XG5cbiAgLy8gSWYgdGhlIHBhdGggZXhpc3RzLCBwdXNoIGl0IG9udG8gdGhlIGVuZC5cbiAgaWYgKHBhdGgpIHtcbiAgICB0b2tlbnMucHVzaChwYXRoKVxuICB9XG5cbiAgcmV0dXJuIHRva2Vuc1xufVxuXG4vKipcbiAqIENvbXBpbGUgYSBzdHJpbmcgdG8gYSB0ZW1wbGF0ZSBmdW5jdGlvbiBmb3IgdGhlIHBhdGguXG4gKlxuICogQHBhcmFtICB7c3RyaW5nfSAgICAgICAgICAgICBzdHJcbiAqIEBwYXJhbSAge09iamVjdD19ICAgICAgICAgICAgb3B0aW9uc1xuICogQHJldHVybiB7IWZ1bmN0aW9uKE9iamVjdD0sIE9iamVjdD0pfVxuICovXG5mdW5jdGlvbiBjb21waWxlIChzdHIsIG9wdGlvbnMpIHtcbiAgcmV0dXJuIHRva2Vuc1RvRnVuY3Rpb24ocGFyc2Uoc3RyLCBvcHRpb25zKSwgb3B0aW9ucylcbn1cblxuLyoqXG4gKiBQcmV0dGllciBlbmNvZGluZyBvZiBVUkkgcGF0aCBzZWdtZW50cy5cbiAqXG4gKiBAcGFyYW0gIHtzdHJpbmd9XG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmZ1bmN0aW9uIGVuY29kZVVSSUNvbXBvbmVudFByZXR0eSAoc3RyKSB7XG4gIHJldHVybiBlbmNvZGVVUkkoc3RyKS5yZXBsYWNlKC9bXFwvPyNdL2csIGZ1bmN0aW9uIChjKSB7XG4gICAgcmV0dXJuICclJyArIGMuY2hhckNvZGVBdCgwKS50b1N0cmluZygxNikudG9VcHBlckNhc2UoKVxuICB9KVxufVxuXG4vKipcbiAqIEVuY29kZSB0aGUgYXN0ZXJpc2sgcGFyYW1ldGVyLiBTaW1pbGFyIHRvIGBwcmV0dHlgLCBidXQgYWxsb3dzIHNsYXNoZXMuXG4gKlxuICogQHBhcmFtICB7c3RyaW5nfVxuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5mdW5jdGlvbiBlbmNvZGVBc3RlcmlzayAoc3RyKSB7XG4gIHJldHVybiBlbmNvZGVVUkkoc3RyKS5yZXBsYWNlKC9bPyNdL2csIGZ1bmN0aW9uIChjKSB7XG4gICAgcmV0dXJuICclJyArIGMuY2hhckNvZGVBdCgwKS50b1N0cmluZygxNikudG9VcHBlckNhc2UoKVxuICB9KVxufVxuXG4vKipcbiAqIEV4cG9zZSBhIG1ldGhvZCBmb3IgdHJhbnNmb3JtaW5nIHRva2VucyBpbnRvIHRoZSBwYXRoIGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiB0b2tlbnNUb0Z1bmN0aW9uICh0b2tlbnMsIG9wdGlvbnMpIHtcbiAgLy8gQ29tcGlsZSBhbGwgdGhlIHRva2VucyBpbnRvIHJlZ2V4cHMuXG4gIHZhciBtYXRjaGVzID0gbmV3IEFycmF5KHRva2Vucy5sZW5ndGgpXG5cbiAgLy8gQ29tcGlsZSBhbGwgdGhlIHBhdHRlcm5zIGJlZm9yZSBjb21waWxhdGlvbi5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCB0b2tlbnMubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAodHlwZW9mIHRva2Vuc1tpXSA9PT0gJ29iamVjdCcpIHtcbiAgICAgIG1hdGNoZXNbaV0gPSBuZXcgUmVnRXhwKCdeKD86JyArIHRva2Vuc1tpXS5wYXR0ZXJuICsgJykkJywgZmxhZ3Mob3B0aW9ucykpXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIChvYmosIG9wdHMpIHtcbiAgICB2YXIgcGF0aCA9ICcnXG4gICAgdmFyIGRhdGEgPSBvYmogfHwge31cbiAgICB2YXIgb3B0aW9ucyA9IG9wdHMgfHwge31cbiAgICB2YXIgZW5jb2RlID0gb3B0aW9ucy5wcmV0dHkgPyBlbmNvZGVVUklDb21wb25lbnRQcmV0dHkgOiBlbmNvZGVVUklDb21wb25lbnRcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdG9rZW5zLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgdG9rZW4gPSB0b2tlbnNbaV1cblxuICAgICAgaWYgKHR5cGVvZiB0b2tlbiA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgcGF0aCArPSB0b2tlblxuXG4gICAgICAgIGNvbnRpbnVlXG4gICAgICB9XG5cbiAgICAgIHZhciB2YWx1ZSA9IGRhdGFbdG9rZW4ubmFtZV1cbiAgICAgIHZhciBzZWdtZW50XG5cbiAgICAgIGlmICh2YWx1ZSA9PSBudWxsKSB7XG4gICAgICAgIGlmICh0b2tlbi5vcHRpb25hbCkge1xuICAgICAgICAgIC8vIFByZXBlbmQgcGFydGlhbCBzZWdtZW50IHByZWZpeGVzLlxuICAgICAgICAgIGlmICh0b2tlbi5wYXJ0aWFsKSB7XG4gICAgICAgICAgICBwYXRoICs9IHRva2VuLnByZWZpeFxuICAgICAgICAgIH1cblxuICAgICAgICAgIGNvbnRpbnVlXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignRXhwZWN0ZWQgXCInICsgdG9rZW4ubmFtZSArICdcIiB0byBiZSBkZWZpbmVkJylcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoaXNhcnJheSh2YWx1ZSkpIHtcbiAgICAgICAgaWYgKCF0b2tlbi5yZXBlYXQpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdFeHBlY3RlZCBcIicgKyB0b2tlbi5uYW1lICsgJ1wiIHRvIG5vdCByZXBlYXQsIGJ1dCByZWNlaXZlZCBgJyArIEpTT04uc3RyaW5naWZ5KHZhbHVlKSArICdgJylcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh2YWx1ZS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICBpZiAodG9rZW4ub3B0aW9uYWwpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlXG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0V4cGVjdGVkIFwiJyArIHRva2VuLm5hbWUgKyAnXCIgdG8gbm90IGJlIGVtcHR5JylcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IHZhbHVlLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgc2VnbWVudCA9IGVuY29kZSh2YWx1ZVtqXSlcblxuICAgICAgICAgIGlmICghbWF0Y2hlc1tpXS50ZXN0KHNlZ21lbnQpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdFeHBlY3RlZCBhbGwgXCInICsgdG9rZW4ubmFtZSArICdcIiB0byBtYXRjaCBcIicgKyB0b2tlbi5wYXR0ZXJuICsgJ1wiLCBidXQgcmVjZWl2ZWQgYCcgKyBKU09OLnN0cmluZ2lmeShzZWdtZW50KSArICdgJylcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBwYXRoICs9IChqID09PSAwID8gdG9rZW4ucHJlZml4IDogdG9rZW4uZGVsaW1pdGVyKSArIHNlZ21lbnRcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnRpbnVlXG4gICAgICB9XG5cbiAgICAgIHNlZ21lbnQgPSB0b2tlbi5hc3RlcmlzayA/IGVuY29kZUFzdGVyaXNrKHZhbHVlKSA6IGVuY29kZSh2YWx1ZSlcblxuICAgICAgaWYgKCFtYXRjaGVzW2ldLnRlc3Qoc2VnbWVudCkpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignRXhwZWN0ZWQgXCInICsgdG9rZW4ubmFtZSArICdcIiB0byBtYXRjaCBcIicgKyB0b2tlbi5wYXR0ZXJuICsgJ1wiLCBidXQgcmVjZWl2ZWQgXCInICsgc2VnbWVudCArICdcIicpXG4gICAgICB9XG5cbiAgICAgIHBhdGggKz0gdG9rZW4ucHJlZml4ICsgc2VnbWVudFxuICAgIH1cblxuICAgIHJldHVybiBwYXRoXG4gIH1cbn1cblxuLyoqXG4gKiBFc2NhcGUgYSByZWd1bGFyIGV4cHJlc3Npb24gc3RyaW5nLlxuICpcbiAqIEBwYXJhbSAge3N0cmluZ30gc3RyXG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmZ1bmN0aW9uIGVzY2FwZVN0cmluZyAoc3RyKSB7XG4gIHJldHVybiBzdHIucmVwbGFjZSgvKFsuKyo/PV4hOiR7fSgpW1xcXXxcXC9cXFxcXSkvZywgJ1xcXFwkMScpXG59XG5cbi8qKlxuICogRXNjYXBlIHRoZSBjYXB0dXJpbmcgZ3JvdXAgYnkgZXNjYXBpbmcgc3BlY2lhbCBjaGFyYWN0ZXJzIGFuZCBtZWFuaW5nLlxuICpcbiAqIEBwYXJhbSAge3N0cmluZ30gZ3JvdXBcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZnVuY3Rpb24gZXNjYXBlR3JvdXAgKGdyb3VwKSB7XG4gIHJldHVybiBncm91cC5yZXBsYWNlKC8oWz0hOiRcXC8oKV0pL2csICdcXFxcJDEnKVxufVxuXG4vKipcbiAqIEF0dGFjaCB0aGUga2V5cyBhcyBhIHByb3BlcnR5IG9mIHRoZSByZWdleHAuXG4gKlxuICogQHBhcmFtICB7IVJlZ0V4cH0gcmVcbiAqIEBwYXJhbSAge0FycmF5fSAgIGtleXNcbiAqIEByZXR1cm4geyFSZWdFeHB9XG4gKi9cbmZ1bmN0aW9uIGF0dGFjaEtleXMgKHJlLCBrZXlzKSB7XG4gIHJlLmtleXMgPSBrZXlzXG4gIHJldHVybiByZVxufVxuXG4vKipcbiAqIEdldCB0aGUgZmxhZ3MgZm9yIGEgcmVnZXhwIGZyb20gdGhlIG9wdGlvbnMuXG4gKlxuICogQHBhcmFtICB7T2JqZWN0fSBvcHRpb25zXG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmZ1bmN0aW9uIGZsYWdzIChvcHRpb25zKSB7XG4gIHJldHVybiBvcHRpb25zICYmIG9wdGlvbnMuc2Vuc2l0aXZlID8gJycgOiAnaSdcbn1cblxuLyoqXG4gKiBQdWxsIG91dCBrZXlzIGZyb20gYSByZWdleHAuXG4gKlxuICogQHBhcmFtICB7IVJlZ0V4cH0gcGF0aFxuICogQHBhcmFtICB7IUFycmF5fSAga2V5c1xuICogQHJldHVybiB7IVJlZ0V4cH1cbiAqL1xuZnVuY3Rpb24gcmVnZXhwVG9SZWdleHAgKHBhdGgsIGtleXMpIHtcbiAgLy8gVXNlIGEgbmVnYXRpdmUgbG9va2FoZWFkIHRvIG1hdGNoIG9ubHkgY2FwdHVyaW5nIGdyb3Vwcy5cbiAgdmFyIGdyb3VwcyA9IHBhdGguc291cmNlLm1hdGNoKC9cXCgoPyFcXD8pL2cpXG5cbiAgaWYgKGdyb3Vwcykge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZ3JvdXBzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBrZXlzLnB1c2goe1xuICAgICAgICBuYW1lOiBpLFxuICAgICAgICBwcmVmaXg6IG51bGwsXG4gICAgICAgIGRlbGltaXRlcjogbnVsbCxcbiAgICAgICAgb3B0aW9uYWw6IGZhbHNlLFxuICAgICAgICByZXBlYXQ6IGZhbHNlLFxuICAgICAgICBwYXJ0aWFsOiBmYWxzZSxcbiAgICAgICAgYXN0ZXJpc2s6IGZhbHNlLFxuICAgICAgICBwYXR0ZXJuOiBudWxsXG4gICAgICB9KVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBhdHRhY2hLZXlzKHBhdGgsIGtleXMpXG59XG5cbi8qKlxuICogVHJhbnNmb3JtIGFuIGFycmF5IGludG8gYSByZWdleHAuXG4gKlxuICogQHBhcmFtICB7IUFycmF5fSAgcGF0aFxuICogQHBhcmFtICB7QXJyYXl9ICAga2V5c1xuICogQHBhcmFtICB7IU9iamVjdH0gb3B0aW9uc1xuICogQHJldHVybiB7IVJlZ0V4cH1cbiAqL1xuZnVuY3Rpb24gYXJyYXlUb1JlZ2V4cCAocGF0aCwga2V5cywgb3B0aW9ucykge1xuICB2YXIgcGFydHMgPSBbXVxuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgcGF0aC5sZW5ndGg7IGkrKykge1xuICAgIHBhcnRzLnB1c2gocGF0aFRvUmVnZXhwKHBhdGhbaV0sIGtleXMsIG9wdGlvbnMpLnNvdXJjZSlcbiAgfVxuXG4gIHZhciByZWdleHAgPSBuZXcgUmVnRXhwKCcoPzonICsgcGFydHMuam9pbignfCcpICsgJyknLCBmbGFncyhvcHRpb25zKSlcblxuICByZXR1cm4gYXR0YWNoS2V5cyhyZWdleHAsIGtleXMpXG59XG5cbi8qKlxuICogQ3JlYXRlIGEgcGF0aCByZWdleHAgZnJvbSBzdHJpbmcgaW5wdXQuXG4gKlxuICogQHBhcmFtICB7c3RyaW5nfSAgcGF0aFxuICogQHBhcmFtICB7IUFycmF5fSAga2V5c1xuICogQHBhcmFtICB7IU9iamVjdH0gb3B0aW9uc1xuICogQHJldHVybiB7IVJlZ0V4cH1cbiAqL1xuZnVuY3Rpb24gc3RyaW5nVG9SZWdleHAgKHBhdGgsIGtleXMsIG9wdGlvbnMpIHtcbiAgcmV0dXJuIHRva2Vuc1RvUmVnRXhwKHBhcnNlKHBhdGgsIG9wdGlvbnMpLCBrZXlzLCBvcHRpb25zKVxufVxuXG4vKipcbiAqIEV4cG9zZSBhIGZ1bmN0aW9uIGZvciB0YWtpbmcgdG9rZW5zIGFuZCByZXR1cm5pbmcgYSBSZWdFeHAuXG4gKlxuICogQHBhcmFtICB7IUFycmF5fSAgICAgICAgICB0b2tlbnNcbiAqIEBwYXJhbSAgeyhBcnJheXxPYmplY3QpPX0ga2V5c1xuICogQHBhcmFtICB7T2JqZWN0PX0gICAgICAgICBvcHRpb25zXG4gKiBAcmV0dXJuIHshUmVnRXhwfVxuICovXG5mdW5jdGlvbiB0b2tlbnNUb1JlZ0V4cCAodG9rZW5zLCBrZXlzLCBvcHRpb25zKSB7XG4gIGlmICghaXNhcnJheShrZXlzKSkge1xuICAgIG9wdGlvbnMgPSAvKiogQHR5cGUgeyFPYmplY3R9ICovIChrZXlzIHx8IG9wdGlvbnMpXG4gICAga2V5cyA9IFtdXG4gIH1cblxuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fVxuXG4gIHZhciBzdHJpY3QgPSBvcHRpb25zLnN0cmljdFxuICB2YXIgZW5kID0gb3B0aW9ucy5lbmQgIT09IGZhbHNlXG4gIHZhciByb3V0ZSA9ICcnXG5cbiAgLy8gSXRlcmF0ZSBvdmVyIHRoZSB0b2tlbnMgYW5kIGNyZWF0ZSBvdXIgcmVnZXhwIHN0cmluZy5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCB0b2tlbnMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgdG9rZW4gPSB0b2tlbnNbaV1cblxuICAgIGlmICh0eXBlb2YgdG9rZW4gPT09ICdzdHJpbmcnKSB7XG4gICAgICByb3V0ZSArPSBlc2NhcGVTdHJpbmcodG9rZW4pXG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBwcmVmaXggPSBlc2NhcGVTdHJpbmcodG9rZW4ucHJlZml4KVxuICAgICAgdmFyIGNhcHR1cmUgPSAnKD86JyArIHRva2VuLnBhdHRlcm4gKyAnKSdcblxuICAgICAga2V5cy5wdXNoKHRva2VuKVxuXG4gICAgICBpZiAodG9rZW4ucmVwZWF0KSB7XG4gICAgICAgIGNhcHR1cmUgKz0gJyg/OicgKyBwcmVmaXggKyBjYXB0dXJlICsgJykqJ1xuICAgICAgfVxuXG4gICAgICBpZiAodG9rZW4ub3B0aW9uYWwpIHtcbiAgICAgICAgaWYgKCF0b2tlbi5wYXJ0aWFsKSB7XG4gICAgICAgICAgY2FwdHVyZSA9ICcoPzonICsgcHJlZml4ICsgJygnICsgY2FwdHVyZSArICcpKT8nXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY2FwdHVyZSA9IHByZWZpeCArICcoJyArIGNhcHR1cmUgKyAnKT8nXG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNhcHR1cmUgPSBwcmVmaXggKyAnKCcgKyBjYXB0dXJlICsgJyknXG4gICAgICB9XG5cbiAgICAgIHJvdXRlICs9IGNhcHR1cmVcbiAgICB9XG4gIH1cblxuICB2YXIgZGVsaW1pdGVyID0gZXNjYXBlU3RyaW5nKG9wdGlvbnMuZGVsaW1pdGVyIHx8ICcvJylcbiAgdmFyIGVuZHNXaXRoRGVsaW1pdGVyID0gcm91dGUuc2xpY2UoLWRlbGltaXRlci5sZW5ndGgpID09PSBkZWxpbWl0ZXJcblxuICAvLyBJbiBub24tc3RyaWN0IG1vZGUgd2UgYWxsb3cgYSBzbGFzaCBhdCB0aGUgZW5kIG9mIG1hdGNoLiBJZiB0aGUgcGF0aCB0b1xuICAvLyBtYXRjaCBhbHJlYWR5IGVuZHMgd2l0aCBhIHNsYXNoLCB3ZSByZW1vdmUgaXQgZm9yIGNvbnNpc3RlbmN5LiBUaGUgc2xhc2hcbiAgLy8gaXMgdmFsaWQgYXQgdGhlIGVuZCBvZiBhIHBhdGggbWF0Y2gsIG5vdCBpbiB0aGUgbWlkZGxlLiBUaGlzIGlzIGltcG9ydGFudFxuICAvLyBpbiBub24tZW5kaW5nIG1vZGUsIHdoZXJlIFwiL3Rlc3QvXCIgc2hvdWxkbid0IG1hdGNoIFwiL3Rlc3QvL3JvdXRlXCIuXG4gIGlmICghc3RyaWN0KSB7XG4gICAgcm91dGUgPSAoZW5kc1dpdGhEZWxpbWl0ZXIgPyByb3V0ZS5zbGljZSgwLCAtZGVsaW1pdGVyLmxlbmd0aCkgOiByb3V0ZSkgKyAnKD86JyArIGRlbGltaXRlciArICcoPz0kKSk/J1xuICB9XG5cbiAgaWYgKGVuZCkge1xuICAgIHJvdXRlICs9ICckJ1xuICB9IGVsc2Uge1xuICAgIC8vIEluIG5vbi1lbmRpbmcgbW9kZSwgd2UgbmVlZCB0aGUgY2FwdHVyaW5nIGdyb3VwcyB0byBtYXRjaCBhcyBtdWNoIGFzXG4gICAgLy8gcG9zc2libGUgYnkgdXNpbmcgYSBwb3NpdGl2ZSBsb29rYWhlYWQgdG8gdGhlIGVuZCBvciBuZXh0IHBhdGggc2VnbWVudC5cbiAgICByb3V0ZSArPSBzdHJpY3QgJiYgZW5kc1dpdGhEZWxpbWl0ZXIgPyAnJyA6ICcoPz0nICsgZGVsaW1pdGVyICsgJ3wkKSdcbiAgfVxuXG4gIHJldHVybiBhdHRhY2hLZXlzKG5ldyBSZWdFeHAoJ14nICsgcm91dGUsIGZsYWdzKG9wdGlvbnMpKSwga2V5cylcbn1cblxuLyoqXG4gKiBOb3JtYWxpemUgdGhlIGdpdmVuIHBhdGggc3RyaW5nLCByZXR1cm5pbmcgYSByZWd1bGFyIGV4cHJlc3Npb24uXG4gKlxuICogQW4gZW1wdHkgYXJyYXkgY2FuIGJlIHBhc3NlZCBpbiBmb3IgdGhlIGtleXMsIHdoaWNoIHdpbGwgaG9sZCB0aGVcbiAqIHBsYWNlaG9sZGVyIGtleSBkZXNjcmlwdGlvbnMuIEZvciBleGFtcGxlLCB1c2luZyBgL3VzZXIvOmlkYCwgYGtleXNgIHdpbGxcbiAqIGNvbnRhaW4gYFt7IG5hbWU6ICdpZCcsIGRlbGltaXRlcjogJy8nLCBvcHRpb25hbDogZmFsc2UsIHJlcGVhdDogZmFsc2UgfV1gLlxuICpcbiAqIEBwYXJhbSAgeyhzdHJpbmd8UmVnRXhwfEFycmF5KX0gcGF0aFxuICogQHBhcmFtICB7KEFycmF5fE9iamVjdCk9fSAgICAgICBrZXlzXG4gKiBAcGFyYW0gIHtPYmplY3Q9fSAgICAgICAgICAgICAgIG9wdGlvbnNcbiAqIEByZXR1cm4geyFSZWdFeHB9XG4gKi9cbmZ1bmN0aW9uIHBhdGhUb1JlZ2V4cCAocGF0aCwga2V5cywgb3B0aW9ucykge1xuICBpZiAoIWlzYXJyYXkoa2V5cykpIHtcbiAgICBvcHRpb25zID0gLyoqIEB0eXBlIHshT2JqZWN0fSAqLyAoa2V5cyB8fCBvcHRpb25zKVxuICAgIGtleXMgPSBbXVxuICB9XG5cbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge31cblxuICBpZiAocGF0aCBpbnN0YW5jZW9mIFJlZ0V4cCkge1xuICAgIHJldHVybiByZWdleHBUb1JlZ2V4cChwYXRoLCAvKiogQHR5cGUgeyFBcnJheX0gKi8gKGtleXMpKVxuICB9XG5cbiAgaWYgKGlzYXJyYXkocGF0aCkpIHtcbiAgICByZXR1cm4gYXJyYXlUb1JlZ2V4cCgvKiogQHR5cGUgeyFBcnJheX0gKi8gKHBhdGgpLCAvKiogQHR5cGUgeyFBcnJheX0gKi8gKGtleXMpLCBvcHRpb25zKVxuICB9XG5cbiAgcmV0dXJuIHN0cmluZ1RvUmVnZXhwKC8qKiBAdHlwZSB7c3RyaW5nfSAqLyAocGF0aCksIC8qKiBAdHlwZSB7IUFycmF5fSAqLyAoa2V5cyksIG9wdGlvbnMpXG59XG4iLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG5cbnZhciBfcmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJyZWFjdFwiKSk7XG5cbnZhciBfY3JlYXRlU3ZnSWNvbiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vdXRpbHMvY3JlYXRlU3ZnSWNvblwiKSk7XG5cbnZhciBfZGVmYXVsdCA9ICgwLCBfY3JlYXRlU3ZnSWNvbi5kZWZhdWx0KShfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwicGF0aFwiLCB7XG4gIGQ6IFwiTTIwIDRINGMtMS4xIDAtMS45OS45LTEuOTkgMkwyIDE4YzAgMS4xLjkgMiAyIDJoMTZjMS4xIDAgMi0uOSAyLTJWNmMwLTEuMS0uOS0yLTItMnptMCA0bC04IDUtOC01VjZsOCA1IDgtNXYyelwiXG59KSwgJ01haWwnKTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwO1xuXG52YXIgX3JlYWN0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicmVhY3RcIikpO1xuXG52YXIgX2NyZWF0ZVN2Z0ljb24gPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL3V0aWxzL2NyZWF0ZVN2Z0ljb25cIikpO1xuXG52YXIgX2RlZmF1bHQgPSAoMCwgX2NyZWF0ZVN2Z0ljb24uZGVmYXVsdCkoX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChcInBhdGhcIiwge1xuICBkOiBcIk0xMiAyMmMxLjEgMCAyLS45IDItMmgtNGMwIDEuMS44OSAyIDIgMnptNi02di01YzAtMy4wNy0xLjY0LTUuNjQtNC41LTYuMzJWNGMwLS44My0uNjctMS41LTEuNS0xLjVzLTEuNS42Ny0xLjUgMS41di42OEM3LjYzIDUuMzYgNiA3LjkyIDYgMTF2NWwtMiAydjFoMTZ2LTFsLTItMnpcIlxufSksICdOb3RpZmljYXRpb25zJyk7XG5cbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0OyIsIi8qXG5vYmplY3QtYXNzaWduXG4oYykgU2luZHJlIFNvcmh1c1xuQGxpY2Vuc2UgTUlUXG4qL1xuXG4ndXNlIHN0cmljdCc7XG4vKiBlc2xpbnQtZGlzYWJsZSBuby11bnVzZWQtdmFycyAqL1xudmFyIGdldE93blByb3BlcnR5U3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHM7XG52YXIgaGFzT3duUHJvcGVydHkgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xudmFyIHByb3BJc0VudW1lcmFibGUgPSBPYmplY3QucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlO1xuXG5mdW5jdGlvbiB0b09iamVjdCh2YWwpIHtcblx0aWYgKHZhbCA9PT0gbnVsbCB8fCB2YWwgPT09IHVuZGVmaW5lZCkge1xuXHRcdHRocm93IG5ldyBUeXBlRXJyb3IoJ09iamVjdC5hc3NpZ24gY2Fubm90IGJlIGNhbGxlZCB3aXRoIG51bGwgb3IgdW5kZWZpbmVkJyk7XG5cdH1cblxuXHRyZXR1cm4gT2JqZWN0KHZhbCk7XG59XG5cbmZ1bmN0aW9uIHNob3VsZFVzZU5hdGl2ZSgpIHtcblx0dHJ5IHtcblx0XHRpZiAoIU9iamVjdC5hc3NpZ24pIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHQvLyBEZXRlY3QgYnVnZ3kgcHJvcGVydHkgZW51bWVyYXRpb24gb3JkZXIgaW4gb2xkZXIgVjggdmVyc2lvbnMuXG5cblx0XHQvLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvdjgvaXNzdWVzL2RldGFpbD9pZD00MTE4XG5cdFx0dmFyIHRlc3QxID0gbmV3IFN0cmluZygnYWJjJyk7ICAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5ldy13cmFwcGVyc1xuXHRcdHRlc3QxWzVdID0gJ2RlJztcblx0XHRpZiAoT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXModGVzdDEpWzBdID09PSAnNScpIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHQvLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvdjgvaXNzdWVzL2RldGFpbD9pZD0zMDU2XG5cdFx0dmFyIHRlc3QyID0ge307XG5cdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCAxMDsgaSsrKSB7XG5cdFx0XHR0ZXN0MlsnXycgKyBTdHJpbmcuZnJvbUNoYXJDb2RlKGkpXSA9IGk7XG5cdFx0fVxuXHRcdHZhciBvcmRlcjIgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh0ZXN0MikubWFwKGZ1bmN0aW9uIChuKSB7XG5cdFx0XHRyZXR1cm4gdGVzdDJbbl07XG5cdFx0fSk7XG5cdFx0aWYgKG9yZGVyMi5qb2luKCcnKSAhPT0gJzAxMjM0NTY3ODknKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0Ly8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9MzA1NlxuXHRcdHZhciB0ZXN0MyA9IHt9O1xuXHRcdCdhYmNkZWZnaGlqa2xtbm9wcXJzdCcuc3BsaXQoJycpLmZvckVhY2goZnVuY3Rpb24gKGxldHRlcikge1xuXHRcdFx0dGVzdDNbbGV0dGVyXSA9IGxldHRlcjtcblx0XHR9KTtcblx0XHRpZiAoT2JqZWN0LmtleXMoT2JqZWN0LmFzc2lnbih7fSwgdGVzdDMpKS5qb2luKCcnKSAhPT1cblx0XHRcdFx0J2FiY2RlZmdoaWprbG1ub3BxcnN0Jykge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdHJldHVybiB0cnVlO1xuXHR9IGNhdGNoIChlcnIpIHtcblx0XHQvLyBXZSBkb24ndCBleHBlY3QgYW55IG9mIHRoZSBhYm92ZSB0byB0aHJvdywgYnV0IGJldHRlciB0byBiZSBzYWZlLlxuXHRcdHJldHVybiBmYWxzZTtcblx0fVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHNob3VsZFVzZU5hdGl2ZSgpID8gT2JqZWN0LmFzc2lnbiA6IGZ1bmN0aW9uICh0YXJnZXQsIHNvdXJjZSkge1xuXHR2YXIgZnJvbTtcblx0dmFyIHRvID0gdG9PYmplY3QodGFyZ2V0KTtcblx0dmFyIHN5bWJvbHM7XG5cblx0Zm9yICh2YXIgcyA9IDE7IHMgPCBhcmd1bWVudHMubGVuZ3RoOyBzKyspIHtcblx0XHRmcm9tID0gT2JqZWN0KGFyZ3VtZW50c1tzXSk7XG5cblx0XHRmb3IgKHZhciBrZXkgaW4gZnJvbSkge1xuXHRcdFx0aWYgKGhhc093blByb3BlcnR5LmNhbGwoZnJvbSwga2V5KSkge1xuXHRcdFx0XHR0b1trZXldID0gZnJvbVtrZXldO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGlmIChnZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHtcblx0XHRcdHN5bWJvbHMgPSBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMoZnJvbSk7XG5cdFx0XHRmb3IgKHZhciBpID0gMDsgaSA8IHN5bWJvbHMubGVuZ3RoOyBpKyspIHtcblx0XHRcdFx0aWYgKHByb3BJc0VudW1lcmFibGUuY2FsbChmcm9tLCBzeW1ib2xzW2ldKSkge1xuXHRcdFx0XHRcdHRvW3N5bWJvbHNbaV1dID0gZnJvbVtzeW1ib2xzW2ldXTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHJldHVybiB0bztcbn07XG4iLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzXCI7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGNsc3ggZnJvbSAnY2xzeCc7XG5pbXBvcnQgd2l0aFN0eWxlcyBmcm9tICcuLi9zdHlsZXMvd2l0aFN0eWxlcyc7XG5pbXBvcnQgY2FwaXRhbGl6ZSBmcm9tICcuLi91dGlscy9jYXBpdGFsaXplJztcbmV4cG9ydCB2YXIgc3R5bGVzID0gZnVuY3Rpb24gc3R5bGVzKHRoZW1lKSB7XG4gIHJldHVybiB7XG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudC4gKi9cbiAgICByb290OiB7XG4gICAgICB1c2VyU2VsZWN0OiAnbm9uZScsXG4gICAgICB3aWR0aDogJzFlbScsXG4gICAgICBoZWlnaHQ6ICcxZW0nLFxuICAgICAgZGlzcGxheTogJ2lubGluZS1ibG9jaycsXG4gICAgICBmaWxsOiAnY3VycmVudENvbG9yJyxcbiAgICAgIGZsZXhTaHJpbms6IDAsXG4gICAgICBmb250U2l6ZTogdGhlbWUudHlwb2dyYXBoeS5weFRvUmVtKDI0KSxcbiAgICAgIHRyYW5zaXRpb246IHRoZW1lLnRyYW5zaXRpb25zLmNyZWF0ZSgnZmlsbCcsIHtcbiAgICAgICAgZHVyYXRpb246IHRoZW1lLnRyYW5zaXRpb25zLmR1cmF0aW9uLnNob3J0ZXJcbiAgICAgIH0pXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGNvbG9yPVwicHJpbWFyeVwiYC4gKi9cbiAgICBjb2xvclByaW1hcnk6IHtcbiAgICAgIGNvbG9yOiB0aGVtZS5wYWxldHRlLnByaW1hcnkubWFpblxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBjb2xvcj1cInNlY29uZGFyeVwiYC4gKi9cbiAgICBjb2xvclNlY29uZGFyeToge1xuICAgICAgY29sb3I6IHRoZW1lLnBhbGV0dGUuc2Vjb25kYXJ5Lm1haW5cbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgY29sb3I9XCJhY3Rpb25cImAuICovXG4gICAgY29sb3JBY3Rpb246IHtcbiAgICAgIGNvbG9yOiB0aGVtZS5wYWxldHRlLmFjdGlvbi5hY3RpdmVcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgY29sb3I9XCJlcnJvclwiYC4gKi9cbiAgICBjb2xvckVycm9yOiB7XG4gICAgICBjb2xvcjogdGhlbWUucGFsZXR0ZS5lcnJvci5tYWluXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGNvbG9yPVwiZGlzYWJsZWRcImAuICovXG4gICAgY29sb3JEaXNhYmxlZDoge1xuICAgICAgY29sb3I6IHRoZW1lLnBhbGV0dGUuYWN0aW9uLmRpc2FibGVkXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGZvbnRTaXplPVwiaW5oZXJpdFwiYC4gKi9cbiAgICBmb250U2l6ZUluaGVyaXQ6IHtcbiAgICAgIGZvbnRTaXplOiAnaW5oZXJpdCdcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgZm9udFNpemU9XCJzbWFsbFwiYC4gKi9cbiAgICBmb250U2l6ZVNtYWxsOiB7XG4gICAgICBmb250U2l6ZTogdGhlbWUudHlwb2dyYXBoeS5weFRvUmVtKDIwKVxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBmb250U2l6ZT1cImxhcmdlXCJgLiAqL1xuICAgIGZvbnRTaXplTGFyZ2U6IHtcbiAgICAgIGZvbnRTaXplOiB0aGVtZS50eXBvZ3JhcGh5LnB4VG9SZW0oMzUpXG4gICAgfVxuICB9O1xufTtcbnZhciBTdmdJY29uID0gLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gU3ZnSWNvbihwcm9wcywgcmVmKSB7XG4gIHZhciBjaGlsZHJlbiA9IHByb3BzLmNoaWxkcmVuLFxuICAgICAgY2xhc3NlcyA9IHByb3BzLmNsYXNzZXMsXG4gICAgICBjbGFzc05hbWUgPSBwcm9wcy5jbGFzc05hbWUsXG4gICAgICBfcHJvcHMkY29sb3IgPSBwcm9wcy5jb2xvcixcbiAgICAgIGNvbG9yID0gX3Byb3BzJGNvbG9yID09PSB2b2lkIDAgPyAnaW5oZXJpdCcgOiBfcHJvcHMkY29sb3IsXG4gICAgICBfcHJvcHMkY29tcG9uZW50ID0gcHJvcHMuY29tcG9uZW50LFxuICAgICAgQ29tcG9uZW50ID0gX3Byb3BzJGNvbXBvbmVudCA9PT0gdm9pZCAwID8gJ3N2ZycgOiBfcHJvcHMkY29tcG9uZW50LFxuICAgICAgX3Byb3BzJGZvbnRTaXplID0gcHJvcHMuZm9udFNpemUsXG4gICAgICBmb250U2l6ZSA9IF9wcm9wcyRmb250U2l6ZSA9PT0gdm9pZCAwID8gJ2RlZmF1bHQnIDogX3Byb3BzJGZvbnRTaXplLFxuICAgICAgaHRtbENvbG9yID0gcHJvcHMuaHRtbENvbG9yLFxuICAgICAgdGl0bGVBY2Nlc3MgPSBwcm9wcy50aXRsZUFjY2VzcyxcbiAgICAgIF9wcm9wcyR2aWV3Qm94ID0gcHJvcHMudmlld0JveCxcbiAgICAgIHZpZXdCb3ggPSBfcHJvcHMkdmlld0JveCA9PT0gdm9pZCAwID8gJzAgMCAyNCAyNCcgOiBfcHJvcHMkdmlld0JveCxcbiAgICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKHByb3BzLCBbXCJjaGlsZHJlblwiLCBcImNsYXNzZXNcIiwgXCJjbGFzc05hbWVcIiwgXCJjb2xvclwiLCBcImNvbXBvbmVudFwiLCBcImZvbnRTaXplXCIsIFwiaHRtbENvbG9yXCIsIFwidGl0bGVBY2Nlc3NcIiwgXCJ2aWV3Qm94XCJdKTtcblxuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoQ29tcG9uZW50LCBfZXh0ZW5kcyh7XG4gICAgY2xhc3NOYW1lOiBjbHN4KGNsYXNzZXMucm9vdCwgY2xhc3NOYW1lLCBjb2xvciAhPT0gJ2luaGVyaXQnICYmIGNsYXNzZXNbXCJjb2xvclwiLmNvbmNhdChjYXBpdGFsaXplKGNvbG9yKSldLCBmb250U2l6ZSAhPT0gJ2RlZmF1bHQnICYmIGNsYXNzZXNbXCJmb250U2l6ZVwiLmNvbmNhdChjYXBpdGFsaXplKGZvbnRTaXplKSldKSxcbiAgICBmb2N1c2FibGU6IFwiZmFsc2VcIixcbiAgICB2aWV3Qm94OiB2aWV3Qm94LFxuICAgIGNvbG9yOiBodG1sQ29sb3IsXG4gICAgXCJhcmlhLWhpZGRlblwiOiB0aXRsZUFjY2VzcyA/IHVuZGVmaW5lZCA6IHRydWUsXG4gICAgcm9sZTogdGl0bGVBY2Nlc3MgPyAnaW1nJyA6IHVuZGVmaW5lZCxcbiAgICByZWY6IHJlZlxuICB9LCBvdGhlciksIGNoaWxkcmVuLCB0aXRsZUFjY2VzcyA/IC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwidGl0bGVcIiwgbnVsbCwgdGl0bGVBY2Nlc3MpIDogbnVsbCk7XG59KTtcbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFN2Z0ljb24ucHJvcFR5cGVzID0ge1xuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBXYXJuaW5nIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIC8vIHwgVGhlc2UgUHJvcFR5cGVzIGFyZSBnZW5lcmF0ZWQgZnJvbSB0aGUgVHlwZVNjcmlwdCB0eXBlIGRlZmluaXRpb25zIHxcbiAgLy8gfCAgICAgVG8gdXBkYXRlIHRoZW0gZWRpdCB0aGUgZC50cyBmaWxlIGFuZCBydW4gXCJ5YXJuIHByb3B0eXBlc1wiICAgICB8XG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuICAvKipcbiAgICogTm9kZSBwYXNzZWQgaW50byB0aGUgU1ZHIGVsZW1lbnQuXG4gICAqL1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG5cbiAgLyoqXG4gICAqIE92ZXJyaWRlIG9yIGV4dGVuZCB0aGUgc3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICogU2VlIFtDU1MgQVBJXSgjY3NzKSBiZWxvdyBmb3IgbW9yZSBkZXRhaWxzLlxuICAgKi9cbiAgY2xhc3NlczogUHJvcFR5cGVzLm9iamVjdCxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBUaGUgY29sb3Igb2YgdGhlIGNvbXBvbmVudC4gSXQgc3VwcG9ydHMgdGhvc2UgdGhlbWUgY29sb3JzIHRoYXQgbWFrZSBzZW5zZSBmb3IgdGhpcyBjb21wb25lbnQuXG4gICAqIFlvdSBjYW4gdXNlIHRoZSBgaHRtbENvbG9yYCBwcm9wIHRvIGFwcGx5IGEgY29sb3IgYXR0cmlidXRlIHRvIHRoZSBTVkcgZWxlbWVudC5cbiAgICovXG4gIGNvbG9yOiBQcm9wVHlwZXMub25lT2YoWydhY3Rpb24nLCAnZGlzYWJsZWQnLCAnZXJyb3InLCAnaW5oZXJpdCcsICdwcmltYXJ5JywgJ3NlY29uZGFyeSddKSxcblxuICAvKipcbiAgICogVGhlIGNvbXBvbmVudCB1c2VkIGZvciB0aGUgcm9vdCBub2RlLlxuICAgKiBFaXRoZXIgYSBzdHJpbmcgdG8gdXNlIGEgSFRNTCBlbGVtZW50IG9yIGEgY29tcG9uZW50LlxuICAgKi9cbiAgY29tcG9uZW50OiBQcm9wVHlwZXNcbiAgLyogQHR5cGVzY3JpcHQtdG8tcHJvcHR5cGVzLWlnbm9yZSAqL1xuICAuZWxlbWVudFR5cGUsXG5cbiAgLyoqXG4gICAqIFRoZSBmb250U2l6ZSBhcHBsaWVkIHRvIHRoZSBpY29uLiBEZWZhdWx0cyB0byAyNHB4LCBidXQgY2FuIGJlIGNvbmZpZ3VyZSB0byBpbmhlcml0IGZvbnQgc2l6ZS5cbiAgICovXG4gIGZvbnRTaXplOiBQcm9wVHlwZXMub25lT2YoWydkZWZhdWx0JywgJ2luaGVyaXQnLCAnbGFyZ2UnLCAnc21hbGwnXSksXG5cbiAgLyoqXG4gICAqIEFwcGxpZXMgYSBjb2xvciBhdHRyaWJ1dGUgdG8gdGhlIFNWRyBlbGVtZW50LlxuICAgKi9cbiAgaHRtbENvbG9yOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBUaGUgc2hhcGUtcmVuZGVyaW5nIGF0dHJpYnV0ZS4gVGhlIGJlaGF2aW9yIG9mIHRoZSBkaWZmZXJlbnQgb3B0aW9ucyBpcyBkZXNjcmliZWQgb24gdGhlXG4gICAqIFtNRE4gV2ViIERvY3NdKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL1NWRy9BdHRyaWJ1dGUvc2hhcGUtcmVuZGVyaW5nKS5cbiAgICogSWYgeW91IGFyZSBoYXZpbmcgaXNzdWVzIHdpdGggYmx1cnJ5IGljb25zIHlvdSBzaG91bGQgaW52ZXN0aWdhdGUgdGhpcyBwcm9wZXJ0eS5cbiAgICovXG4gIHNoYXBlUmVuZGVyaW5nOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBQcm92aWRlcyBhIGh1bWFuLXJlYWRhYmxlIHRpdGxlIGZvciB0aGUgZWxlbWVudCB0aGF0IGNvbnRhaW5zIGl0LlxuICAgKiBodHRwczovL3d3dy53My5vcmcvVFIvU1ZHLWFjY2Vzcy8jRXF1aXZhbGVudFxuICAgKi9cbiAgdGl0bGVBY2Nlc3M6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIEFsbG93cyB5b3UgdG8gcmVkZWZpbmUgd2hhdCB0aGUgY29vcmRpbmF0ZXMgd2l0aG91dCB1bml0cyBtZWFuIGluc2lkZSBhbiBTVkcgZWxlbWVudC5cbiAgICogRm9yIGV4YW1wbGUsIGlmIHRoZSBTVkcgZWxlbWVudCBpcyA1MDAgKHdpZHRoKSBieSAyMDAgKGhlaWdodCksXG4gICAqIGFuZCB5b3UgcGFzcyB2aWV3Qm94PVwiMCAwIDUwIDIwXCIsXG4gICAqIHRoaXMgbWVhbnMgdGhhdCB0aGUgY29vcmRpbmF0ZXMgaW5zaWRlIHRoZSBTVkcgd2lsbCBnbyBmcm9tIHRoZSB0b3AgbGVmdCBjb3JuZXIgKDAsMClcbiAgICogdG8gYm90dG9tIHJpZ2h0ICg1MCwyMCkgYW5kIGVhY2ggdW5pdCB3aWxsIGJlIHdvcnRoIDEwcHguXG4gICAqL1xuICB2aWV3Qm94OiBQcm9wVHlwZXMuc3RyaW5nXG59IDogdm9pZCAwO1xuU3ZnSWNvbi5tdWlOYW1lID0gJ1N2Z0ljb24nO1xuZXhwb3J0IGRlZmF1bHQgd2l0aFN0eWxlcyhzdHlsZXMsIHtcbiAgbmFtZTogJ011aVN2Z0ljb24nXG59KShTdmdJY29uKTsiLCJleHBvcnQgeyBkZWZhdWx0IH0gZnJvbSAnLi9TdmdJY29uJzsiLCJmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikge1xuICByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDoge1xuICAgIGRlZmF1bHQ6IG9ialxuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQ7IiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTQtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbi8qKlxuICogU2ltaWxhciB0byBpbnZhcmlhbnQgYnV0IG9ubHkgbG9ncyBhIHdhcm5pbmcgaWYgdGhlIGNvbmRpdGlvbiBpcyBub3QgbWV0LlxuICogVGhpcyBjYW4gYmUgdXNlZCB0byBsb2cgaXNzdWVzIGluIGRldmVsb3BtZW50IGVudmlyb25tZW50cyBpbiBjcml0aWNhbFxuICogcGF0aHMuIFJlbW92aW5nIHRoZSBsb2dnaW5nIGNvZGUgZm9yIHByb2R1Y3Rpb24gZW52aXJvbm1lbnRzIHdpbGwga2VlcCB0aGVcbiAqIHNhbWUgbG9naWMgYW5kIGZvbGxvdyB0aGUgc2FtZSBjb2RlIHBhdGhzLlxuICovXG5cbnZhciBfX0RFVl9fID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJztcblxudmFyIHdhcm5pbmcgPSBmdW5jdGlvbigpIHt9O1xuXG5pZiAoX19ERVZfXykge1xuICB2YXIgcHJpbnRXYXJuaW5nID0gZnVuY3Rpb24gcHJpbnRXYXJuaW5nKGZvcm1hdCwgYXJncykge1xuICAgIHZhciBsZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgIGFyZ3MgPSBuZXcgQXJyYXkobGVuID4gMSA/IGxlbiAtIDEgOiAwKTtcbiAgICBmb3IgKHZhciBrZXkgPSAxOyBrZXkgPCBsZW47IGtleSsrKSB7XG4gICAgICBhcmdzW2tleSAtIDFdID0gYXJndW1lbnRzW2tleV07XG4gICAgfVxuICAgIHZhciBhcmdJbmRleCA9IDA7XG4gICAgdmFyIG1lc3NhZ2UgPSAnV2FybmluZzogJyArXG4gICAgICBmb3JtYXQucmVwbGFjZSgvJXMvZywgZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBhcmdzW2FyZ0luZGV4KytdO1xuICAgICAgfSk7XG4gICAgaWYgKHR5cGVvZiBjb25zb2xlICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgY29uc29sZS5lcnJvcihtZXNzYWdlKTtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgIC8vIC0tLSBXZWxjb21lIHRvIGRlYnVnZ2luZyBSZWFjdCAtLS1cbiAgICAgIC8vIFRoaXMgZXJyb3Igd2FzIHRocm93biBhcyBhIGNvbnZlbmllbmNlIHNvIHRoYXQgeW91IGNhbiB1c2UgdGhpcyBzdGFja1xuICAgICAgLy8gdG8gZmluZCB0aGUgY2FsbHNpdGUgdGhhdCBjYXVzZWQgdGhpcyB3YXJuaW5nIHRvIGZpcmUuXG4gICAgICB0aHJvdyBuZXcgRXJyb3IobWVzc2FnZSk7XG4gICAgfSBjYXRjaCAoeCkge31cbiAgfVxuXG4gIHdhcm5pbmcgPSBmdW5jdGlvbihjb25kaXRpb24sIGZvcm1hdCwgYXJncykge1xuICAgIHZhciBsZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgIGFyZ3MgPSBuZXcgQXJyYXkobGVuID4gMiA/IGxlbiAtIDIgOiAwKTtcbiAgICBmb3IgKHZhciBrZXkgPSAyOyBrZXkgPCBsZW47IGtleSsrKSB7XG4gICAgICBhcmdzW2tleSAtIDJdID0gYXJndW1lbnRzW2tleV07XG4gICAgfVxuICAgIGlmIChmb3JtYXQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAgICdgd2FybmluZyhjb25kaXRpb24sIGZvcm1hdCwgLi4uYXJncylgIHJlcXVpcmVzIGEgd2FybmluZyAnICtcbiAgICAgICAgICAnbWVzc2FnZSBhcmd1bWVudCdcbiAgICAgICk7XG4gICAgfVxuICAgIGlmICghY29uZGl0aW9uKSB7XG4gICAgICBwcmludFdhcm5pbmcuYXBwbHkobnVsbCwgW2Zvcm1hdF0uY29uY2F0KGFyZ3MpKTtcbiAgICB9XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gd2FybmluZztcbiIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwO1xudmFyIF9kZWZhdWx0ID0ge1xuICBSRVNJU1RBTkNFX0NPRUY6IDAuNixcbiAgLy8gVGhpcyB2YWx1ZSBpcyBjbG9zZWQgdG8gd2hhdCBicm93c2VycyBhcmUgdXNpbmcgaW50ZXJuYWxseSB0b1xuICAvLyB0cmlnZ2VyIGEgbmF0aXZlIHNjcm9sbC5cbiAgVU5DRVJUQUlOVFlfVEhSRVNIT0xEOiAzIC8vIHB4XG5cbn07XG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDsiLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZ2V0Qm91bmRQb3NpdGlvbiA9IGdldEJvdW5kUG9zaXRpb247XG5leHBvcnRzLnNuYXBUb0dyaWQgPSBzbmFwVG9HcmlkO1xuZXhwb3J0cy5jYW5EcmFnWCA9IGNhbkRyYWdYO1xuZXhwb3J0cy5jYW5EcmFnWSA9IGNhbkRyYWdZO1xuZXhwb3J0cy5nZXRDb250cm9sUG9zaXRpb24gPSBnZXRDb250cm9sUG9zaXRpb247XG5leHBvcnRzLmNyZWF0ZUNvcmVEYXRhID0gY3JlYXRlQ29yZURhdGE7XG5leHBvcnRzLmNyZWF0ZURyYWdnYWJsZURhdGEgPSBjcmVhdGVEcmFnZ2FibGVEYXRhO1xuXG52YXIgX3NoaW1zID0gcmVxdWlyZShcIi4vc2hpbXNcIik7XG5cbnZhciBfZG9tRm5zID0gcmVxdWlyZShcIi4vZG9tRm5zXCIpO1xuXG5mdW5jdGlvbiBnZXRCb3VuZFBvc2l0aW9uKGRyYWdnYWJsZVxuLyo6IERyYWdnYWJsZSovXG4sIHhcbi8qOiBudW1iZXIqL1xuLCB5XG4vKjogbnVtYmVyKi9cbilcbi8qOiBbbnVtYmVyLCBudW1iZXJdKi9cbntcbiAgLy8gSWYgbm8gYm91bmRzLCBzaG9ydC1jaXJjdWl0IGFuZCBtb3ZlIG9uXG4gIGlmICghZHJhZ2dhYmxlLnByb3BzLmJvdW5kcykgcmV0dXJuIFt4LCB5XTsgLy8gQ2xvbmUgbmV3IGJvdW5kc1xuXG4gIHZhciBib3VuZHMgPSBkcmFnZ2FibGUucHJvcHMuYm91bmRzO1xuICBib3VuZHMgPSB0eXBlb2YgYm91bmRzID09PSAnc3RyaW5nJyA/IGJvdW5kcyA6IGNsb25lQm91bmRzKGJvdW5kcyk7XG4gIHZhciBub2RlID0gZmluZERPTU5vZGUoZHJhZ2dhYmxlKTtcblxuICBpZiAodHlwZW9mIGJvdW5kcyA9PT0gJ3N0cmluZycpIHtcbiAgICB2YXIgb3duZXJEb2N1bWVudCA9IG5vZGUub3duZXJEb2N1bWVudDtcbiAgICB2YXIgb3duZXJXaW5kb3cgPSBvd25lckRvY3VtZW50LmRlZmF1bHRWaWV3O1xuICAgIHZhciBib3VuZE5vZGU7XG5cbiAgICBpZiAoYm91bmRzID09PSAncGFyZW50Jykge1xuICAgICAgYm91bmROb2RlID0gbm9kZS5wYXJlbnROb2RlO1xuICAgIH0gZWxzZSB7XG4gICAgICBib3VuZE5vZGUgPSBvd25lckRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoYm91bmRzKTtcbiAgICB9XG5cbiAgICBpZiAoIShib3VuZE5vZGUgaW5zdGFuY2VvZiBvd25lcldpbmRvdy5IVE1MRWxlbWVudCkpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignQm91bmRzIHNlbGVjdG9yIFwiJyArIGJvdW5kcyArICdcIiBjb3VsZCBub3QgZmluZCBhbiBlbGVtZW50LicpO1xuICAgIH1cblxuICAgIHZhciBub2RlU3R5bGUgPSBvd25lcldpbmRvdy5nZXRDb21wdXRlZFN0eWxlKG5vZGUpO1xuICAgIHZhciBib3VuZE5vZGVTdHlsZSA9IG93bmVyV2luZG93LmdldENvbXB1dGVkU3R5bGUoYm91bmROb2RlKTsgLy8gQ29tcHV0ZSBib3VuZHMuIFRoaXMgaXMgYSBwYWluIHdpdGggcGFkZGluZyBhbmQgb2Zmc2V0cyBidXQgdGhpcyBnZXRzIGl0IGV4YWN0bHkgcmlnaHQuXG5cbiAgICBib3VuZHMgPSB7XG4gICAgICBsZWZ0OiAtbm9kZS5vZmZzZXRMZWZ0ICsgKDAsIF9zaGltcy5pbnQpKGJvdW5kTm9kZVN0eWxlLnBhZGRpbmdMZWZ0KSArICgwLCBfc2hpbXMuaW50KShub2RlU3R5bGUubWFyZ2luTGVmdCksXG4gICAgICB0b3A6IC1ub2RlLm9mZnNldFRvcCArICgwLCBfc2hpbXMuaW50KShib3VuZE5vZGVTdHlsZS5wYWRkaW5nVG9wKSArICgwLCBfc2hpbXMuaW50KShub2RlU3R5bGUubWFyZ2luVG9wKSxcbiAgICAgIHJpZ2h0OiAoMCwgX2RvbUZucy5pbm5lcldpZHRoKShib3VuZE5vZGUpIC0gKDAsIF9kb21GbnMub3V0ZXJXaWR0aCkobm9kZSkgLSBub2RlLm9mZnNldExlZnQgKyAoMCwgX3NoaW1zLmludCkoYm91bmROb2RlU3R5bGUucGFkZGluZ1JpZ2h0KSAtICgwLCBfc2hpbXMuaW50KShub2RlU3R5bGUubWFyZ2luUmlnaHQpLFxuICAgICAgYm90dG9tOiAoMCwgX2RvbUZucy5pbm5lckhlaWdodCkoYm91bmROb2RlKSAtICgwLCBfZG9tRm5zLm91dGVySGVpZ2h0KShub2RlKSAtIG5vZGUub2Zmc2V0VG9wICsgKDAsIF9zaGltcy5pbnQpKGJvdW5kTm9kZVN0eWxlLnBhZGRpbmdCb3R0b20pIC0gKDAsIF9zaGltcy5pbnQpKG5vZGVTdHlsZS5tYXJnaW5Cb3R0b20pXG4gICAgfTtcbiAgfSAvLyBLZWVwIHggYW5kIHkgYmVsb3cgcmlnaHQgYW5kIGJvdHRvbSBsaW1pdHMuLi5cblxuXG4gIGlmICgoMCwgX3NoaW1zLmlzTnVtKShib3VuZHMucmlnaHQpKSB4ID0gTWF0aC5taW4oeCwgYm91bmRzLnJpZ2h0KTtcbiAgaWYgKCgwLCBfc2hpbXMuaXNOdW0pKGJvdW5kcy5ib3R0b20pKSB5ID0gTWF0aC5taW4oeSwgYm91bmRzLmJvdHRvbSk7IC8vIEJ1dCBhYm92ZSBsZWZ0IGFuZCB0b3AgbGltaXRzLlxuXG4gIGlmICgoMCwgX3NoaW1zLmlzTnVtKShib3VuZHMubGVmdCkpIHggPSBNYXRoLm1heCh4LCBib3VuZHMubGVmdCk7XG4gIGlmICgoMCwgX3NoaW1zLmlzTnVtKShib3VuZHMudG9wKSkgeSA9IE1hdGgubWF4KHksIGJvdW5kcy50b3ApO1xuICByZXR1cm4gW3gsIHldO1xufVxuXG5mdW5jdGlvbiBzbmFwVG9HcmlkKGdyaWRcbi8qOiBbbnVtYmVyLCBudW1iZXJdKi9cbiwgcGVuZGluZ1hcbi8qOiBudW1iZXIqL1xuLCBwZW5kaW5nWVxuLyo6IG51bWJlciovXG4pXG4vKjogW251bWJlciwgbnVtYmVyXSovXG57XG4gIHZhciB4ID0gTWF0aC5yb3VuZChwZW5kaW5nWCAvIGdyaWRbMF0pICogZ3JpZFswXTtcbiAgdmFyIHkgPSBNYXRoLnJvdW5kKHBlbmRpbmdZIC8gZ3JpZFsxXSkgKiBncmlkWzFdO1xuICByZXR1cm4gW3gsIHldO1xufVxuXG5mdW5jdGlvbiBjYW5EcmFnWChkcmFnZ2FibGVcbi8qOiBEcmFnZ2FibGUqL1xuKVxuLyo6IGJvb2xlYW4qL1xue1xuICByZXR1cm4gZHJhZ2dhYmxlLnByb3BzLmF4aXMgPT09ICdib3RoJyB8fCBkcmFnZ2FibGUucHJvcHMuYXhpcyA9PT0gJ3gnO1xufVxuXG5mdW5jdGlvbiBjYW5EcmFnWShkcmFnZ2FibGVcbi8qOiBEcmFnZ2FibGUqL1xuKVxuLyo6IGJvb2xlYW4qL1xue1xuICByZXR1cm4gZHJhZ2dhYmxlLnByb3BzLmF4aXMgPT09ICdib3RoJyB8fCBkcmFnZ2FibGUucHJvcHMuYXhpcyA9PT0gJ3knO1xufSAvLyBHZXQge3gsIHl9IHBvc2l0aW9ucyBmcm9tIGV2ZW50LlxuXG5cbmZ1bmN0aW9uIGdldENvbnRyb2xQb3NpdGlvbihlXG4vKjogTW91c2VUb3VjaEV2ZW50Ki9cbiwgdG91Y2hJZGVudGlmaWVyXG4vKjogP251bWJlciovXG4sIGRyYWdnYWJsZUNvcmVcbi8qOiBEcmFnZ2FibGVDb3JlKi9cbilcbi8qOiA/Q29udHJvbFBvc2l0aW9uKi9cbntcbiAgdmFyIHRvdWNoT2JqID0gdHlwZW9mIHRvdWNoSWRlbnRpZmllciA9PT0gJ251bWJlcicgPyAoMCwgX2RvbUZucy5nZXRUb3VjaCkoZSwgdG91Y2hJZGVudGlmaWVyKSA6IG51bGw7XG4gIGlmICh0eXBlb2YgdG91Y2hJZGVudGlmaWVyID09PSAnbnVtYmVyJyAmJiAhdG91Y2hPYmopIHJldHVybiBudWxsOyAvLyBub3QgdGhlIHJpZ2h0IHRvdWNoXG5cbiAgdmFyIG5vZGUgPSBmaW5kRE9NTm9kZShkcmFnZ2FibGVDb3JlKTsgLy8gVXNlciBjYW4gcHJvdmlkZSBhbiBvZmZzZXRQYXJlbnQgaWYgZGVzaXJlZC5cblxuICB2YXIgb2Zmc2V0UGFyZW50ID0gZHJhZ2dhYmxlQ29yZS5wcm9wcy5vZmZzZXRQYXJlbnQgfHwgbm9kZS5vZmZzZXRQYXJlbnQgfHwgbm9kZS5vd25lckRvY3VtZW50LmJvZHk7XG4gIHJldHVybiAoMCwgX2RvbUZucy5vZmZzZXRYWUZyb21QYXJlbnQpKHRvdWNoT2JqIHx8IGUsIG9mZnNldFBhcmVudCwgZHJhZ2dhYmxlQ29yZS5wcm9wcy5zY2FsZSk7XG59IC8vIENyZWF0ZSBhbiBkYXRhIG9iamVjdCBleHBvc2VkIGJ5IDxEcmFnZ2FibGVDb3JlPidzIGV2ZW50c1xuXG5cbmZ1bmN0aW9uIGNyZWF0ZUNvcmVEYXRhKGRyYWdnYWJsZVxuLyo6IERyYWdnYWJsZUNvcmUqL1xuLCB4XG4vKjogbnVtYmVyKi9cbiwgeVxuLyo6IG51bWJlciovXG4pXG4vKjogRHJhZ2dhYmxlRGF0YSovXG57XG4gIHZhciBzdGF0ZSA9IGRyYWdnYWJsZS5zdGF0ZTtcbiAgdmFyIGlzU3RhcnQgPSAhKDAsIF9zaGltcy5pc051bSkoc3RhdGUubGFzdFgpO1xuICB2YXIgbm9kZSA9IGZpbmRET01Ob2RlKGRyYWdnYWJsZSk7XG5cbiAgaWYgKGlzU3RhcnQpIHtcbiAgICAvLyBJZiB0aGlzIGlzIG91ciBmaXJzdCBtb3ZlLCB1c2UgdGhlIHggYW5kIHkgYXMgbGFzdCBjb29yZHMuXG4gICAgcmV0dXJuIHtcbiAgICAgIG5vZGU6IG5vZGUsXG4gICAgICBkZWx0YVg6IDAsXG4gICAgICBkZWx0YVk6IDAsXG4gICAgICBsYXN0WDogeCxcbiAgICAgIGxhc3RZOiB5LFxuICAgICAgeDogeCxcbiAgICAgIHk6IHlcbiAgICB9O1xuICB9IGVsc2Uge1xuICAgIC8vIE90aGVyd2lzZSBjYWxjdWxhdGUgcHJvcGVyIHZhbHVlcy5cbiAgICByZXR1cm4ge1xuICAgICAgbm9kZTogbm9kZSxcbiAgICAgIGRlbHRhWDogeCAtIHN0YXRlLmxhc3RYLFxuICAgICAgZGVsdGFZOiB5IC0gc3RhdGUubGFzdFksXG4gICAgICBsYXN0WDogc3RhdGUubGFzdFgsXG4gICAgICBsYXN0WTogc3RhdGUubGFzdFksXG4gICAgICB4OiB4LFxuICAgICAgeTogeVxuICAgIH07XG4gIH1cbn0gLy8gQ3JlYXRlIGFuIGRhdGEgZXhwb3NlZCBieSA8RHJhZ2dhYmxlPidzIGV2ZW50c1xuXG5cbmZ1bmN0aW9uIGNyZWF0ZURyYWdnYWJsZURhdGEoZHJhZ2dhYmxlXG4vKjogRHJhZ2dhYmxlKi9cbiwgY29yZURhdGFcbi8qOiBEcmFnZ2FibGVEYXRhKi9cbilcbi8qOiBEcmFnZ2FibGVEYXRhKi9cbntcbiAgdmFyIHNjYWxlID0gZHJhZ2dhYmxlLnByb3BzLnNjYWxlO1xuICByZXR1cm4ge1xuICAgIG5vZGU6IGNvcmVEYXRhLm5vZGUsXG4gICAgeDogZHJhZ2dhYmxlLnN0YXRlLnggKyBjb3JlRGF0YS5kZWx0YVggLyBzY2FsZSxcbiAgICB5OiBkcmFnZ2FibGUuc3RhdGUueSArIGNvcmVEYXRhLmRlbHRhWSAvIHNjYWxlLFxuICAgIGRlbHRhWDogY29yZURhdGEuZGVsdGFYIC8gc2NhbGUsXG4gICAgZGVsdGFZOiBjb3JlRGF0YS5kZWx0YVkgLyBzY2FsZSxcbiAgICBsYXN0WDogZHJhZ2dhYmxlLnN0YXRlLngsXG4gICAgbGFzdFk6IGRyYWdnYWJsZS5zdGF0ZS55XG4gIH07XG59IC8vIEEgbG90IGZhc3RlciB0aGFuIHN0cmluZ2lmeS9wYXJzZVxuXG5cbmZ1bmN0aW9uIGNsb25lQm91bmRzKGJvdW5kc1xuLyo6IEJvdW5kcyovXG4pXG4vKjogQm91bmRzKi9cbntcbiAgcmV0dXJuIHtcbiAgICBsZWZ0OiBib3VuZHMubGVmdCxcbiAgICB0b3A6IGJvdW5kcy50b3AsXG4gICAgcmlnaHQ6IGJvdW5kcy5yaWdodCxcbiAgICBib3R0b206IGJvdW5kcy5ib3R0b21cbiAgfTtcbn1cblxuZnVuY3Rpb24gZmluZERPTU5vZGUoZHJhZ2dhYmxlXG4vKjogRHJhZ2dhYmxlIHwgRHJhZ2dhYmxlQ29yZSovXG4pXG4vKjogSFRNTEVsZW1lbnQqL1xue1xuICB2YXIgbm9kZSA9IGRyYWdnYWJsZS5maW5kRE9NTm9kZSgpO1xuXG4gIGlmICghbm9kZSkge1xuICAgIHRocm93IG5ldyBFcnJvcignPERyYWdnYWJsZUNvcmU+OiBVbm1vdW50ZWQgZHVyaW5nIGV2ZW50IScpO1xuICB9IC8vICRGbG93SWdub3JlIHdlIGNhbid0IGFzc2VydCBvbiBIVE1MRWxlbWVudCBkdWUgdG8gdGVzdHMuLi4gRklYTUVcblxuXG4gIHJldHVybiBub2RlO1xufSIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gbG9nO1xuXG4vKmVzbGludCBuby1jb25zb2xlOjAqL1xuZnVuY3Rpb24gbG9nKCkge1xuICB2YXIgX2NvbnNvbGU7XG5cbiAgaWYgKHVuZGVmaW5lZCkgKF9jb25zb2xlID0gY29uc29sZSkubG9nLmFwcGx5KF9jb25zb2xlLCBhcmd1bWVudHMpO1xufSIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHN5bWJvbE9ic2VydmFibGVQb255ZmlsbChyb290KSB7XG5cdHZhciByZXN1bHQ7XG5cdHZhciBTeW1ib2wgPSByb290LlN5bWJvbDtcblxuXHRpZiAodHlwZW9mIFN5bWJvbCA9PT0gJ2Z1bmN0aW9uJykge1xuXHRcdGlmIChTeW1ib2wub2JzZXJ2YWJsZSkge1xuXHRcdFx0cmVzdWx0ID0gU3ltYm9sLm9ic2VydmFibGU7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHJlc3VsdCA9IFN5bWJvbCgnb2JzZXJ2YWJsZScpO1xuXHRcdFx0U3ltYm9sLm9ic2VydmFibGUgPSByZXN1bHQ7XG5cdFx0fVxuXHR9IGVsc2Uge1xuXHRcdHJlc3VsdCA9ICdAQG9ic2VydmFibGUnO1xuXHR9XG5cblx0cmV0dXJuIHJlc3VsdDtcbn07XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfaXRlcmFibGVUb0FycmF5KGl0ZXIpIHtcbiAgaWYgKHR5cGVvZiBTeW1ib2wgIT09IFwidW5kZWZpbmVkXCIgJiYgU3ltYm9sLml0ZXJhdG9yIGluIE9iamVjdChpdGVyKSkgcmV0dXJuIEFycmF5LmZyb20oaXRlcik7XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX2FycmF5V2l0aEhvbGVzKGFycikge1xuICBpZiAoQXJyYXkuaXNBcnJheShhcnIpKSByZXR1cm4gYXJyO1xufSIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9ub25JdGVyYWJsZVJlc3QoKSB7XG4gIHRocm93IG5ldyBUeXBlRXJyb3IoXCJJbnZhbGlkIGF0dGVtcHQgdG8gZGVzdHJ1Y3R1cmUgbm9uLWl0ZXJhYmxlIGluc3RhbmNlLlxcbkluIG9yZGVyIHRvIGJlIGl0ZXJhYmxlLCBub24tYXJyYXkgb2JqZWN0cyBtdXN0IGhhdmUgYSBbU3ltYm9sLml0ZXJhdG9yXSgpIG1ldGhvZC5cIik7XG59IiwiLyoqIVxuICogQGZpbGVPdmVydmlldyBLaWNrYXNzIGxpYnJhcnkgdG8gY3JlYXRlIGFuZCBwbGFjZSBwb3BwZXJzIG5lYXIgdGhlaXIgcmVmZXJlbmNlIGVsZW1lbnRzLlxuICogQHZlcnNpb24gMS4xNi4xLWx0c1xuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAoYykgMjAxNiBGZWRlcmljbyBaaXZvbG8gYW5kIGNvbnRyaWJ1dG9yc1xuICpcbiAqIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcbiAqIG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWxcbiAqIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHNcbiAqIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGxcbiAqIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpc1xuICogZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczpcbiAqXG4gKiBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpbiBhbGxcbiAqIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4gKlxuICogVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxuICogSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXG4gKiBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcbiAqIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcbiAqIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXG4gKiBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRVxuICogU09GVFdBUkUuXG4gKi9cbnZhciBpc0Jyb3dzZXIgPSB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgZG9jdW1lbnQgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBuYXZpZ2F0b3IgIT09ICd1bmRlZmluZWQnO1xuXG52YXIgdGltZW91dER1cmF0aW9uID0gZnVuY3Rpb24gKCkge1xuICB2YXIgbG9uZ2VyVGltZW91dEJyb3dzZXJzID0gWydFZGdlJywgJ1RyaWRlbnQnLCAnRmlyZWZveCddO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGxvbmdlclRpbWVvdXRCcm93c2Vycy5sZW5ndGg7IGkgKz0gMSkge1xuICAgIGlmIChpc0Jyb3dzZXIgJiYgbmF2aWdhdG9yLnVzZXJBZ2VudC5pbmRleE9mKGxvbmdlclRpbWVvdXRCcm93c2Vyc1tpXSkgPj0gMCkge1xuICAgICAgcmV0dXJuIDE7XG4gICAgfVxuICB9XG4gIHJldHVybiAwO1xufSgpO1xuXG5mdW5jdGlvbiBtaWNyb3Rhc2tEZWJvdW5jZShmbikge1xuICB2YXIgY2FsbGVkID0gZmFsc2U7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKGNhbGxlZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjYWxsZWQgPSB0cnVlO1xuICAgIHdpbmRvdy5Qcm9taXNlLnJlc29sdmUoKS50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgIGNhbGxlZCA9IGZhbHNlO1xuICAgICAgZm4oKTtcbiAgICB9KTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gdGFza0RlYm91bmNlKGZuKSB7XG4gIHZhciBzY2hlZHVsZWQgPSBmYWxzZTtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoIXNjaGVkdWxlZCkge1xuICAgICAgc2NoZWR1bGVkID0gdHJ1ZTtcbiAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICBzY2hlZHVsZWQgPSBmYWxzZTtcbiAgICAgICAgZm4oKTtcbiAgICAgIH0sIHRpbWVvdXREdXJhdGlvbik7XG4gICAgfVxuICB9O1xufVxuXG52YXIgc3VwcG9ydHNNaWNyb1Rhc2tzID0gaXNCcm93c2VyICYmIHdpbmRvdy5Qcm9taXNlO1xuXG4vKipcbiogQ3JlYXRlIGEgZGVib3VuY2VkIHZlcnNpb24gb2YgYSBtZXRob2QsIHRoYXQncyBhc3luY2hyb25vdXNseSBkZWZlcnJlZFxuKiBidXQgY2FsbGVkIGluIHRoZSBtaW5pbXVtIHRpbWUgcG9zc2libGUuXG4qXG4qIEBtZXRob2RcbiogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuKiBAYXJndW1lbnQge0Z1bmN0aW9ufSBmblxuKiBAcmV0dXJucyB7RnVuY3Rpb259XG4qL1xudmFyIGRlYm91bmNlID0gc3VwcG9ydHNNaWNyb1Rhc2tzID8gbWljcm90YXNrRGVib3VuY2UgOiB0YXNrRGVib3VuY2U7XG5cbi8qKlxuICogQ2hlY2sgaWYgdGhlIGdpdmVuIHZhcmlhYmxlIGlzIGEgZnVuY3Rpb25cbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBhcmd1bWVudCB7QW55fSBmdW5jdGlvblRvQ2hlY2sgLSB2YXJpYWJsZSB0byBjaGVja1xuICogQHJldHVybnMge0Jvb2xlYW59IGFuc3dlciB0bzogaXMgYSBmdW5jdGlvbj9cbiAqL1xuZnVuY3Rpb24gaXNGdW5jdGlvbihmdW5jdGlvblRvQ2hlY2spIHtcbiAgdmFyIGdldFR5cGUgPSB7fTtcbiAgcmV0dXJuIGZ1bmN0aW9uVG9DaGVjayAmJiBnZXRUeXBlLnRvU3RyaW5nLmNhbGwoZnVuY3Rpb25Ub0NoZWNrKSA9PT0gJ1tvYmplY3QgRnVuY3Rpb25dJztcbn1cblxuLyoqXG4gKiBHZXQgQ1NTIGNvbXB1dGVkIHByb3BlcnR5IG9mIHRoZSBnaXZlbiBlbGVtZW50XG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAYXJndW1lbnQge0VlbWVudH0gZWxlbWVudFxuICogQGFyZ3VtZW50IHtTdHJpbmd9IHByb3BlcnR5XG4gKi9cbmZ1bmN0aW9uIGdldFN0eWxlQ29tcHV0ZWRQcm9wZXJ0eShlbGVtZW50LCBwcm9wZXJ0eSkge1xuICBpZiAoZWxlbWVudC5ub2RlVHlwZSAhPT0gMSkge1xuICAgIHJldHVybiBbXTtcbiAgfVxuICAvLyBOT1RFOiAxIERPTSBhY2Nlc3MgaGVyZVxuICB2YXIgd2luZG93ID0gZWxlbWVudC5vd25lckRvY3VtZW50LmRlZmF1bHRWaWV3O1xuICB2YXIgY3NzID0gd2luZG93LmdldENvbXB1dGVkU3R5bGUoZWxlbWVudCwgbnVsbCk7XG4gIHJldHVybiBwcm9wZXJ0eSA/IGNzc1twcm9wZXJ0eV0gOiBjc3M7XG59XG5cbi8qKlxuICogUmV0dXJucyB0aGUgcGFyZW50Tm9kZSBvciB0aGUgaG9zdCBvZiB0aGUgZWxlbWVudFxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQGFyZ3VtZW50IHtFbGVtZW50fSBlbGVtZW50XG4gKiBAcmV0dXJucyB7RWxlbWVudH0gcGFyZW50XG4gKi9cbmZ1bmN0aW9uIGdldFBhcmVudE5vZGUoZWxlbWVudCkge1xuICBpZiAoZWxlbWVudC5ub2RlTmFtZSA9PT0gJ0hUTUwnKSB7XG4gICAgcmV0dXJuIGVsZW1lbnQ7XG4gIH1cbiAgcmV0dXJuIGVsZW1lbnQucGFyZW50Tm9kZSB8fCBlbGVtZW50Lmhvc3Q7XG59XG5cbi8qKlxuICogUmV0dXJucyB0aGUgc2Nyb2xsaW5nIHBhcmVudCBvZiB0aGUgZ2l2ZW4gZWxlbWVudFxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQGFyZ3VtZW50IHtFbGVtZW50fSBlbGVtZW50XG4gKiBAcmV0dXJucyB7RWxlbWVudH0gc2Nyb2xsIHBhcmVudFxuICovXG5mdW5jdGlvbiBnZXRTY3JvbGxQYXJlbnQoZWxlbWVudCkge1xuICAvLyBSZXR1cm4gYm9keSwgYGdldFNjcm9sbGAgd2lsbCB0YWtlIGNhcmUgdG8gZ2V0IHRoZSBjb3JyZWN0IGBzY3JvbGxUb3BgIGZyb20gaXRcbiAgaWYgKCFlbGVtZW50KSB7XG4gICAgcmV0dXJuIGRvY3VtZW50LmJvZHk7XG4gIH1cblxuICBzd2l0Y2ggKGVsZW1lbnQubm9kZU5hbWUpIHtcbiAgICBjYXNlICdIVE1MJzpcbiAgICBjYXNlICdCT0RZJzpcbiAgICAgIHJldHVybiBlbGVtZW50Lm93bmVyRG9jdW1lbnQuYm9keTtcbiAgICBjYXNlICcjZG9jdW1lbnQnOlxuICAgICAgcmV0dXJuIGVsZW1lbnQuYm9keTtcbiAgfVxuXG4gIC8vIEZpcmVmb3ggd2FudCB1cyB0byBjaGVjayBgLXhgIGFuZCBgLXlgIHZhcmlhdGlvbnMgYXMgd2VsbFxuXG4gIHZhciBfZ2V0U3R5bGVDb21wdXRlZFByb3AgPSBnZXRTdHlsZUNvbXB1dGVkUHJvcGVydHkoZWxlbWVudCksXG4gICAgICBvdmVyZmxvdyA9IF9nZXRTdHlsZUNvbXB1dGVkUHJvcC5vdmVyZmxvdyxcbiAgICAgIG92ZXJmbG93WCA9IF9nZXRTdHlsZUNvbXB1dGVkUHJvcC5vdmVyZmxvd1gsXG4gICAgICBvdmVyZmxvd1kgPSBfZ2V0U3R5bGVDb21wdXRlZFByb3Aub3ZlcmZsb3dZO1xuXG4gIGlmICgvKGF1dG98c2Nyb2xsfG92ZXJsYXkpLy50ZXN0KG92ZXJmbG93ICsgb3ZlcmZsb3dZICsgb3ZlcmZsb3dYKSkge1xuICAgIHJldHVybiBlbGVtZW50O1xuICB9XG5cbiAgcmV0dXJuIGdldFNjcm9sbFBhcmVudChnZXRQYXJlbnROb2RlKGVsZW1lbnQpKTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIHRoZSByZWZlcmVuY2Ugbm9kZSBvZiB0aGUgcmVmZXJlbmNlIG9iamVjdCwgb3IgdGhlIHJlZmVyZW5jZSBvYmplY3QgaXRzZWxmLlxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQHBhcmFtIHtFbGVtZW50fE9iamVjdH0gcmVmZXJlbmNlIC0gdGhlIHJlZmVyZW5jZSBlbGVtZW50ICh0aGUgcG9wcGVyIHdpbGwgYmUgcmVsYXRpdmUgdG8gdGhpcylcbiAqIEByZXR1cm5zIHtFbGVtZW50fSBwYXJlbnRcbiAqL1xuZnVuY3Rpb24gZ2V0UmVmZXJlbmNlTm9kZShyZWZlcmVuY2UpIHtcbiAgcmV0dXJuIHJlZmVyZW5jZSAmJiByZWZlcmVuY2UucmVmZXJlbmNlTm9kZSA/IHJlZmVyZW5jZS5yZWZlcmVuY2VOb2RlIDogcmVmZXJlbmNlO1xufVxuXG52YXIgaXNJRTExID0gaXNCcm93c2VyICYmICEhKHdpbmRvdy5NU0lucHV0TWV0aG9kQ29udGV4dCAmJiBkb2N1bWVudC5kb2N1bWVudE1vZGUpO1xudmFyIGlzSUUxMCA9IGlzQnJvd3NlciAmJiAvTVNJRSAxMC8udGVzdChuYXZpZ2F0b3IudXNlckFnZW50KTtcblxuLyoqXG4gKiBEZXRlcm1pbmVzIGlmIHRoZSBicm93c2VyIGlzIEludGVybmV0IEV4cGxvcmVyXG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAcGFyYW0ge051bWJlcn0gdmVyc2lvbiB0byBjaGVja1xuICogQHJldHVybnMge0Jvb2xlYW59IGlzSUVcbiAqL1xuZnVuY3Rpb24gaXNJRSh2ZXJzaW9uKSB7XG4gIGlmICh2ZXJzaW9uID09PSAxMSkge1xuICAgIHJldHVybiBpc0lFMTE7XG4gIH1cbiAgaWYgKHZlcnNpb24gPT09IDEwKSB7XG4gICAgcmV0dXJuIGlzSUUxMDtcbiAgfVxuICByZXR1cm4gaXNJRTExIHx8IGlzSUUxMDtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBvZmZzZXQgcGFyZW50IG9mIHRoZSBnaXZlbiBlbGVtZW50XG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAYXJndW1lbnQge0VsZW1lbnR9IGVsZW1lbnRcbiAqIEByZXR1cm5zIHtFbGVtZW50fSBvZmZzZXQgcGFyZW50XG4gKi9cbmZ1bmN0aW9uIGdldE9mZnNldFBhcmVudChlbGVtZW50KSB7XG4gIGlmICghZWxlbWVudCkge1xuICAgIHJldHVybiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG4gIH1cblxuICB2YXIgbm9PZmZzZXRQYXJlbnQgPSBpc0lFKDEwKSA/IGRvY3VtZW50LmJvZHkgOiBudWxsO1xuXG4gIC8vIE5PVEU6IDEgRE9NIGFjY2VzcyBoZXJlXG4gIHZhciBvZmZzZXRQYXJlbnQgPSBlbGVtZW50Lm9mZnNldFBhcmVudCB8fCBudWxsO1xuICAvLyBTa2lwIGhpZGRlbiBlbGVtZW50cyB3aGljaCBkb24ndCBoYXZlIGFuIG9mZnNldFBhcmVudFxuICB3aGlsZSAob2Zmc2V0UGFyZW50ID09PSBub09mZnNldFBhcmVudCAmJiBlbGVtZW50Lm5leHRFbGVtZW50U2libGluZykge1xuICAgIG9mZnNldFBhcmVudCA9IChlbGVtZW50ID0gZWxlbWVudC5uZXh0RWxlbWVudFNpYmxpbmcpLm9mZnNldFBhcmVudDtcbiAgfVxuXG4gIHZhciBub2RlTmFtZSA9IG9mZnNldFBhcmVudCAmJiBvZmZzZXRQYXJlbnQubm9kZU5hbWU7XG5cbiAgaWYgKCFub2RlTmFtZSB8fCBub2RlTmFtZSA9PT0gJ0JPRFknIHx8IG5vZGVOYW1lID09PSAnSFRNTCcpIHtcbiAgICByZXR1cm4gZWxlbWVudCA/IGVsZW1lbnQub3duZXJEb2N1bWVudC5kb2N1bWVudEVsZW1lbnQgOiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG4gIH1cblxuICAvLyAub2Zmc2V0UGFyZW50IHdpbGwgcmV0dXJuIHRoZSBjbG9zZXN0IFRILCBURCBvciBUQUJMRSBpbiBjYXNlXG4gIC8vIG5vIG9mZnNldFBhcmVudCBpcyBwcmVzZW50LCBJIGhhdGUgdGhpcyBqb2IuLi5cbiAgaWYgKFsnVEgnLCAnVEQnLCAnVEFCTEUnXS5pbmRleE9mKG9mZnNldFBhcmVudC5ub2RlTmFtZSkgIT09IC0xICYmIGdldFN0eWxlQ29tcHV0ZWRQcm9wZXJ0eShvZmZzZXRQYXJlbnQsICdwb3NpdGlvbicpID09PSAnc3RhdGljJykge1xuICAgIHJldHVybiBnZXRPZmZzZXRQYXJlbnQob2Zmc2V0UGFyZW50KTtcbiAgfVxuXG4gIHJldHVybiBvZmZzZXRQYXJlbnQ7XG59XG5cbmZ1bmN0aW9uIGlzT2Zmc2V0Q29udGFpbmVyKGVsZW1lbnQpIHtcbiAgdmFyIG5vZGVOYW1lID0gZWxlbWVudC5ub2RlTmFtZTtcblxuICBpZiAobm9kZU5hbWUgPT09ICdCT0RZJykge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICByZXR1cm4gbm9kZU5hbWUgPT09ICdIVE1MJyB8fCBnZXRPZmZzZXRQYXJlbnQoZWxlbWVudC5maXJzdEVsZW1lbnRDaGlsZCkgPT09IGVsZW1lbnQ7XG59XG5cbi8qKlxuICogRmluZHMgdGhlIHJvb3Qgbm9kZSAoZG9jdW1lbnQsIHNoYWRvd0RPTSByb290KSBvZiB0aGUgZ2l2ZW4gZWxlbWVudFxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQGFyZ3VtZW50IHtFbGVtZW50fSBub2RlXG4gKiBAcmV0dXJucyB7RWxlbWVudH0gcm9vdCBub2RlXG4gKi9cbmZ1bmN0aW9uIGdldFJvb3Qobm9kZSkge1xuICBpZiAobm9kZS5wYXJlbnROb2RlICE9PSBudWxsKSB7XG4gICAgcmV0dXJuIGdldFJvb3Qobm9kZS5wYXJlbnROb2RlKTtcbiAgfVxuXG4gIHJldHVybiBub2RlO1xufVxuXG4vKipcbiAqIEZpbmRzIHRoZSBvZmZzZXQgcGFyZW50IGNvbW1vbiB0byB0aGUgdHdvIHByb3ZpZGVkIG5vZGVzXG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAYXJndW1lbnQge0VsZW1lbnR9IGVsZW1lbnQxXG4gKiBAYXJndW1lbnQge0VsZW1lbnR9IGVsZW1lbnQyXG4gKiBAcmV0dXJucyB7RWxlbWVudH0gY29tbW9uIG9mZnNldCBwYXJlbnRcbiAqL1xuZnVuY3Rpb24gZmluZENvbW1vbk9mZnNldFBhcmVudChlbGVtZW50MSwgZWxlbWVudDIpIHtcbiAgLy8gVGhpcyBjaGVjayBpcyBuZWVkZWQgdG8gYXZvaWQgZXJyb3JzIGluIGNhc2Ugb25lIG9mIHRoZSBlbGVtZW50cyBpc24ndCBkZWZpbmVkIGZvciBhbnkgcmVhc29uXG4gIGlmICghZWxlbWVudDEgfHwgIWVsZW1lbnQxLm5vZGVUeXBlIHx8ICFlbGVtZW50MiB8fCAhZWxlbWVudDIubm9kZVR5cGUpIHtcbiAgICByZXR1cm4gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xuICB9XG5cbiAgLy8gSGVyZSB3ZSBtYWtlIHN1cmUgdG8gZ2l2ZSBhcyBcInN0YXJ0XCIgdGhlIGVsZW1lbnQgdGhhdCBjb21lcyBmaXJzdCBpbiB0aGUgRE9NXG4gIHZhciBvcmRlciA9IGVsZW1lbnQxLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKGVsZW1lbnQyKSAmIE5vZGUuRE9DVU1FTlRfUE9TSVRJT05fRk9MTE9XSU5HO1xuICB2YXIgc3RhcnQgPSBvcmRlciA/IGVsZW1lbnQxIDogZWxlbWVudDI7XG4gIHZhciBlbmQgPSBvcmRlciA/IGVsZW1lbnQyIDogZWxlbWVudDE7XG5cbiAgLy8gR2V0IGNvbW1vbiBhbmNlc3RvciBjb250YWluZXJcbiAgdmFyIHJhbmdlID0gZG9jdW1lbnQuY3JlYXRlUmFuZ2UoKTtcbiAgcmFuZ2Uuc2V0U3RhcnQoc3RhcnQsIDApO1xuICByYW5nZS5zZXRFbmQoZW5kLCAwKTtcbiAgdmFyIGNvbW1vbkFuY2VzdG9yQ29udGFpbmVyID0gcmFuZ2UuY29tbW9uQW5jZXN0b3JDb250YWluZXI7XG5cbiAgLy8gQm90aCBub2RlcyBhcmUgaW5zaWRlICNkb2N1bWVudFxuXG4gIGlmIChlbGVtZW50MSAhPT0gY29tbW9uQW5jZXN0b3JDb250YWluZXIgJiYgZWxlbWVudDIgIT09IGNvbW1vbkFuY2VzdG9yQ29udGFpbmVyIHx8IHN0YXJ0LmNvbnRhaW5zKGVuZCkpIHtcbiAgICBpZiAoaXNPZmZzZXRDb250YWluZXIoY29tbW9uQW5jZXN0b3JDb250YWluZXIpKSB7XG4gICAgICByZXR1cm4gY29tbW9uQW5jZXN0b3JDb250YWluZXI7XG4gICAgfVxuXG4gICAgcmV0dXJuIGdldE9mZnNldFBhcmVudChjb21tb25BbmNlc3RvckNvbnRhaW5lcik7XG4gIH1cblxuICAvLyBvbmUgb2YgdGhlIG5vZGVzIGlzIGluc2lkZSBzaGFkb3dET00sIGZpbmQgd2hpY2ggb25lXG4gIHZhciBlbGVtZW50MXJvb3QgPSBnZXRSb290KGVsZW1lbnQxKTtcbiAgaWYgKGVsZW1lbnQxcm9vdC5ob3N0KSB7XG4gICAgcmV0dXJuIGZpbmRDb21tb25PZmZzZXRQYXJlbnQoZWxlbWVudDFyb290Lmhvc3QsIGVsZW1lbnQyKTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gZmluZENvbW1vbk9mZnNldFBhcmVudChlbGVtZW50MSwgZ2V0Um9vdChlbGVtZW50MikuaG9zdCk7XG4gIH1cbn1cblxuLyoqXG4gKiBHZXRzIHRoZSBzY3JvbGwgdmFsdWUgb2YgdGhlIGdpdmVuIGVsZW1lbnQgaW4gdGhlIGdpdmVuIHNpZGUgKHRvcCBhbmQgbGVmdClcbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBhcmd1bWVudCB7RWxlbWVudH0gZWxlbWVudFxuICogQGFyZ3VtZW50IHtTdHJpbmd9IHNpZGUgYHRvcGAgb3IgYGxlZnRgXG4gKiBAcmV0dXJucyB7bnVtYmVyfSBhbW91bnQgb2Ygc2Nyb2xsZWQgcGl4ZWxzXG4gKi9cbmZ1bmN0aW9uIGdldFNjcm9sbChlbGVtZW50KSB7XG4gIHZhciBzaWRlID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiAndG9wJztcblxuICB2YXIgdXBwZXJTaWRlID0gc2lkZSA9PT0gJ3RvcCcgPyAnc2Nyb2xsVG9wJyA6ICdzY3JvbGxMZWZ0JztcbiAgdmFyIG5vZGVOYW1lID0gZWxlbWVudC5ub2RlTmFtZTtcblxuICBpZiAobm9kZU5hbWUgPT09ICdCT0RZJyB8fCBub2RlTmFtZSA9PT0gJ0hUTUwnKSB7XG4gICAgdmFyIGh0bWwgPSBlbGVtZW50Lm93bmVyRG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xuICAgIHZhciBzY3JvbGxpbmdFbGVtZW50ID0gZWxlbWVudC5vd25lckRvY3VtZW50LnNjcm9sbGluZ0VsZW1lbnQgfHwgaHRtbDtcbiAgICByZXR1cm4gc2Nyb2xsaW5nRWxlbWVudFt1cHBlclNpZGVdO1xuICB9XG5cbiAgcmV0dXJuIGVsZW1lbnRbdXBwZXJTaWRlXTtcbn1cblxuLypcbiAqIFN1bSBvciBzdWJ0cmFjdCB0aGUgZWxlbWVudCBzY3JvbGwgdmFsdWVzIChsZWZ0IGFuZCB0b3ApIGZyb20gYSBnaXZlbiByZWN0IG9iamVjdFxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQHBhcmFtIHtPYmplY3R9IHJlY3QgLSBSZWN0IG9iamVjdCB5b3Ugd2FudCB0byBjaGFuZ2VcbiAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IGVsZW1lbnQgLSBUaGUgZWxlbWVudCBmcm9tIHRoZSBmdW5jdGlvbiByZWFkcyB0aGUgc2Nyb2xsIHZhbHVlc1xuICogQHBhcmFtIHtCb29sZWFufSBzdWJ0cmFjdCAtIHNldCB0byB0cnVlIGlmIHlvdSB3YW50IHRvIHN1YnRyYWN0IHRoZSBzY3JvbGwgdmFsdWVzXG4gKiBAcmV0dXJuIHtPYmplY3R9IHJlY3QgLSBUaGUgbW9kaWZpZXIgcmVjdCBvYmplY3RcbiAqL1xuZnVuY3Rpb24gaW5jbHVkZVNjcm9sbChyZWN0LCBlbGVtZW50KSB7XG4gIHZhciBzdWJ0cmFjdCA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDogZmFsc2U7XG5cbiAgdmFyIHNjcm9sbFRvcCA9IGdldFNjcm9sbChlbGVtZW50LCAndG9wJyk7XG4gIHZhciBzY3JvbGxMZWZ0ID0gZ2V0U2Nyb2xsKGVsZW1lbnQsICdsZWZ0Jyk7XG4gIHZhciBtb2RpZmllciA9IHN1YnRyYWN0ID8gLTEgOiAxO1xuICByZWN0LnRvcCArPSBzY3JvbGxUb3AgKiBtb2RpZmllcjtcbiAgcmVjdC5ib3R0b20gKz0gc2Nyb2xsVG9wICogbW9kaWZpZXI7XG4gIHJlY3QubGVmdCArPSBzY3JvbGxMZWZ0ICogbW9kaWZpZXI7XG4gIHJlY3QucmlnaHQgKz0gc2Nyb2xsTGVmdCAqIG1vZGlmaWVyO1xuICByZXR1cm4gcmVjdDtcbn1cblxuLypcbiAqIEhlbHBlciB0byBkZXRlY3QgYm9yZGVycyBvZiBhIGdpdmVuIGVsZW1lbnRcbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBwYXJhbSB7Q1NTU3R5bGVEZWNsYXJhdGlvbn0gc3R5bGVzXG4gKiBSZXN1bHQgb2YgYGdldFN0eWxlQ29tcHV0ZWRQcm9wZXJ0eWAgb24gdGhlIGdpdmVuIGVsZW1lbnRcbiAqIEBwYXJhbSB7U3RyaW5nfSBheGlzIC0gYHhgIG9yIGB5YFxuICogQHJldHVybiB7bnVtYmVyfSBib3JkZXJzIC0gVGhlIGJvcmRlcnMgc2l6ZSBvZiB0aGUgZ2l2ZW4gYXhpc1xuICovXG5cbmZ1bmN0aW9uIGdldEJvcmRlcnNTaXplKHN0eWxlcywgYXhpcykge1xuICB2YXIgc2lkZUEgPSBheGlzID09PSAneCcgPyAnTGVmdCcgOiAnVG9wJztcbiAgdmFyIHNpZGVCID0gc2lkZUEgPT09ICdMZWZ0JyA/ICdSaWdodCcgOiAnQm90dG9tJztcblxuICByZXR1cm4gcGFyc2VGbG9hdChzdHlsZXNbJ2JvcmRlcicgKyBzaWRlQSArICdXaWR0aCddKSArIHBhcnNlRmxvYXQoc3R5bGVzWydib3JkZXInICsgc2lkZUIgKyAnV2lkdGgnXSk7XG59XG5cbmZ1bmN0aW9uIGdldFNpemUoYXhpcywgYm9keSwgaHRtbCwgY29tcHV0ZWRTdHlsZSkge1xuICByZXR1cm4gTWF0aC5tYXgoYm9keVsnb2Zmc2V0JyArIGF4aXNdLCBib2R5WydzY3JvbGwnICsgYXhpc10sIGh0bWxbJ2NsaWVudCcgKyBheGlzXSwgaHRtbFsnb2Zmc2V0JyArIGF4aXNdLCBodG1sWydzY3JvbGwnICsgYXhpc10sIGlzSUUoMTApID8gcGFyc2VJbnQoaHRtbFsnb2Zmc2V0JyArIGF4aXNdKSArIHBhcnNlSW50KGNvbXB1dGVkU3R5bGVbJ21hcmdpbicgKyAoYXhpcyA9PT0gJ0hlaWdodCcgPyAnVG9wJyA6ICdMZWZ0JyldKSArIHBhcnNlSW50KGNvbXB1dGVkU3R5bGVbJ21hcmdpbicgKyAoYXhpcyA9PT0gJ0hlaWdodCcgPyAnQm90dG9tJyA6ICdSaWdodCcpXSkgOiAwKTtcbn1cblxuZnVuY3Rpb24gZ2V0V2luZG93U2l6ZXMoZG9jdW1lbnQpIHtcbiAgdmFyIGJvZHkgPSBkb2N1bWVudC5ib2R5O1xuICB2YXIgaHRtbCA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcbiAgdmFyIGNvbXB1dGVkU3R5bGUgPSBpc0lFKDEwKSAmJiBnZXRDb21wdXRlZFN0eWxlKGh0bWwpO1xuXG4gIHJldHVybiB7XG4gICAgaGVpZ2h0OiBnZXRTaXplKCdIZWlnaHQnLCBib2R5LCBodG1sLCBjb21wdXRlZFN0eWxlKSxcbiAgICB3aWR0aDogZ2V0U2l6ZSgnV2lkdGgnLCBib2R5LCBodG1sLCBjb21wdXRlZFN0eWxlKVxuICB9O1xufVxuXG52YXIgY2xhc3NDYWxsQ2hlY2sgPSBmdW5jdGlvbiAoaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7XG4gIGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTtcbiAgfVxufTtcblxudmFyIGNyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldO1xuICAgICAgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlO1xuICAgICAgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlO1xuICAgICAgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykge1xuICAgIGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7XG4gICAgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7XG4gICAgcmV0dXJuIENvbnN0cnVjdG9yO1xuICB9O1xufSgpO1xuXG5cblxuXG5cbnZhciBkZWZpbmVQcm9wZXJ0eSA9IGZ1bmN0aW9uIChvYmosIGtleSwgdmFsdWUpIHtcbiAgaWYgKGtleSBpbiBvYmopIHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHtcbiAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICB3cml0YWJsZTogdHJ1ZVxuICAgIH0pO1xuICB9IGVsc2Uge1xuICAgIG9ialtrZXldID0gdmFsdWU7XG4gIH1cblxuICByZXR1cm4gb2JqO1xufTtcblxudmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7XG4gIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTtcblxuICAgIGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHtcbiAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7XG4gICAgICAgIHRhcmdldFtrZXldID0gc291cmNlW2tleV07XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRhcmdldDtcbn07XG5cbi8qKlxuICogR2l2ZW4gZWxlbWVudCBvZmZzZXRzLCBnZW5lcmF0ZSBhbiBvdXRwdXQgc2ltaWxhciB0byBnZXRCb3VuZGluZ0NsaWVudFJlY3RcbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBvZmZzZXRzXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBDbGllbnRSZWN0IGxpa2Ugb3V0cHV0XG4gKi9cbmZ1bmN0aW9uIGdldENsaWVudFJlY3Qob2Zmc2V0cykge1xuICByZXR1cm4gX2V4dGVuZHMoe30sIG9mZnNldHMsIHtcbiAgICByaWdodDogb2Zmc2V0cy5sZWZ0ICsgb2Zmc2V0cy53aWR0aCxcbiAgICBib3R0b206IG9mZnNldHMudG9wICsgb2Zmc2V0cy5oZWlnaHRcbiAgfSk7XG59XG5cbi8qKlxuICogR2V0IGJvdW5kaW5nIGNsaWVudCByZWN0IG9mIGdpdmVuIGVsZW1lbnRcbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IGVsZW1lbnRcbiAqIEByZXR1cm4ge09iamVjdH0gY2xpZW50IHJlY3RcbiAqL1xuZnVuY3Rpb24gZ2V0Qm91bmRpbmdDbGllbnRSZWN0KGVsZW1lbnQpIHtcbiAgdmFyIHJlY3QgPSB7fTtcblxuICAvLyBJRTEwIDEwIEZJWDogUGxlYXNlLCBkb24ndCBhc2ssIHRoZSBlbGVtZW50IGlzbid0XG4gIC8vIGNvbnNpZGVyZWQgaW4gRE9NIGluIHNvbWUgY2lyY3Vtc3RhbmNlcy4uLlxuICAvLyBUaGlzIGlzbid0IHJlcHJvZHVjaWJsZSBpbiBJRTEwIGNvbXBhdGliaWxpdHkgbW9kZSBvZiBJRTExXG4gIHRyeSB7XG4gICAgaWYgKGlzSUUoMTApKSB7XG4gICAgICByZWN0ID0gZWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICAgIHZhciBzY3JvbGxUb3AgPSBnZXRTY3JvbGwoZWxlbWVudCwgJ3RvcCcpO1xuICAgICAgdmFyIHNjcm9sbExlZnQgPSBnZXRTY3JvbGwoZWxlbWVudCwgJ2xlZnQnKTtcbiAgICAgIHJlY3QudG9wICs9IHNjcm9sbFRvcDtcbiAgICAgIHJlY3QubGVmdCArPSBzY3JvbGxMZWZ0O1xuICAgICAgcmVjdC5ib3R0b20gKz0gc2Nyb2xsVG9wO1xuICAgICAgcmVjdC5yaWdodCArPSBzY3JvbGxMZWZ0O1xuICAgIH0gZWxzZSB7XG4gICAgICByZWN0ID0gZWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICB9XG4gIH0gY2F0Y2ggKGUpIHt9XG5cbiAgdmFyIHJlc3VsdCA9IHtcbiAgICBsZWZ0OiByZWN0LmxlZnQsXG4gICAgdG9wOiByZWN0LnRvcCxcbiAgICB3aWR0aDogcmVjdC5yaWdodCAtIHJlY3QubGVmdCxcbiAgICBoZWlnaHQ6IHJlY3QuYm90dG9tIC0gcmVjdC50b3BcbiAgfTtcblxuICAvLyBzdWJ0cmFjdCBzY3JvbGxiYXIgc2l6ZSBmcm9tIHNpemVzXG4gIHZhciBzaXplcyA9IGVsZW1lbnQubm9kZU5hbWUgPT09ICdIVE1MJyA/IGdldFdpbmRvd1NpemVzKGVsZW1lbnQub3duZXJEb2N1bWVudCkgOiB7fTtcbiAgdmFyIHdpZHRoID0gc2l6ZXMud2lkdGggfHwgZWxlbWVudC5jbGllbnRXaWR0aCB8fCByZXN1bHQud2lkdGg7XG4gIHZhciBoZWlnaHQgPSBzaXplcy5oZWlnaHQgfHwgZWxlbWVudC5jbGllbnRIZWlnaHQgfHwgcmVzdWx0LmhlaWdodDtcblxuICB2YXIgaG9yaXpTY3JvbGxiYXIgPSBlbGVtZW50Lm9mZnNldFdpZHRoIC0gd2lkdGg7XG4gIHZhciB2ZXJ0U2Nyb2xsYmFyID0gZWxlbWVudC5vZmZzZXRIZWlnaHQgLSBoZWlnaHQ7XG5cbiAgLy8gaWYgYW4gaHlwb3RoZXRpY2FsIHNjcm9sbGJhciBpcyBkZXRlY3RlZCwgd2UgbXVzdCBiZSBzdXJlIGl0J3Mgbm90IGEgYGJvcmRlcmBcbiAgLy8gd2UgbWFrZSB0aGlzIGNoZWNrIGNvbmRpdGlvbmFsIGZvciBwZXJmb3JtYW5jZSByZWFzb25zXG4gIGlmIChob3JpelNjcm9sbGJhciB8fCB2ZXJ0U2Nyb2xsYmFyKSB7XG4gICAgdmFyIHN0eWxlcyA9IGdldFN0eWxlQ29tcHV0ZWRQcm9wZXJ0eShlbGVtZW50KTtcbiAgICBob3JpelNjcm9sbGJhciAtPSBnZXRCb3JkZXJzU2l6ZShzdHlsZXMsICd4Jyk7XG4gICAgdmVydFNjcm9sbGJhciAtPSBnZXRCb3JkZXJzU2l6ZShzdHlsZXMsICd5Jyk7XG5cbiAgICByZXN1bHQud2lkdGggLT0gaG9yaXpTY3JvbGxiYXI7XG4gICAgcmVzdWx0LmhlaWdodCAtPSB2ZXJ0U2Nyb2xsYmFyO1xuICB9XG5cbiAgcmV0dXJuIGdldENsaWVudFJlY3QocmVzdWx0KTtcbn1cblxuZnVuY3Rpb24gZ2V0T2Zmc2V0UmVjdFJlbGF0aXZlVG9BcmJpdHJhcnlOb2RlKGNoaWxkcmVuLCBwYXJlbnQpIHtcbiAgdmFyIGZpeGVkUG9zaXRpb24gPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6IGZhbHNlO1xuXG4gIHZhciBpc0lFMTAgPSBpc0lFKDEwKTtcbiAgdmFyIGlzSFRNTCA9IHBhcmVudC5ub2RlTmFtZSA9PT0gJ0hUTUwnO1xuICB2YXIgY2hpbGRyZW5SZWN0ID0gZ2V0Qm91bmRpbmdDbGllbnRSZWN0KGNoaWxkcmVuKTtcbiAgdmFyIHBhcmVudFJlY3QgPSBnZXRCb3VuZGluZ0NsaWVudFJlY3QocGFyZW50KTtcbiAgdmFyIHNjcm9sbFBhcmVudCA9IGdldFNjcm9sbFBhcmVudChjaGlsZHJlbik7XG5cbiAgdmFyIHN0eWxlcyA9IGdldFN0eWxlQ29tcHV0ZWRQcm9wZXJ0eShwYXJlbnQpO1xuICB2YXIgYm9yZGVyVG9wV2lkdGggPSBwYXJzZUZsb2F0KHN0eWxlcy5ib3JkZXJUb3BXaWR0aCk7XG4gIHZhciBib3JkZXJMZWZ0V2lkdGggPSBwYXJzZUZsb2F0KHN0eWxlcy5ib3JkZXJMZWZ0V2lkdGgpO1xuXG4gIC8vIEluIGNhc2VzIHdoZXJlIHRoZSBwYXJlbnQgaXMgZml4ZWQsIHdlIG11c3QgaWdub3JlIG5lZ2F0aXZlIHNjcm9sbCBpbiBvZmZzZXQgY2FsY1xuICBpZiAoZml4ZWRQb3NpdGlvbiAmJiBpc0hUTUwpIHtcbiAgICBwYXJlbnRSZWN0LnRvcCA9IE1hdGgubWF4KHBhcmVudFJlY3QudG9wLCAwKTtcbiAgICBwYXJlbnRSZWN0LmxlZnQgPSBNYXRoLm1heChwYXJlbnRSZWN0LmxlZnQsIDApO1xuICB9XG4gIHZhciBvZmZzZXRzID0gZ2V0Q2xpZW50UmVjdCh7XG4gICAgdG9wOiBjaGlsZHJlblJlY3QudG9wIC0gcGFyZW50UmVjdC50b3AgLSBib3JkZXJUb3BXaWR0aCxcbiAgICBsZWZ0OiBjaGlsZHJlblJlY3QubGVmdCAtIHBhcmVudFJlY3QubGVmdCAtIGJvcmRlckxlZnRXaWR0aCxcbiAgICB3aWR0aDogY2hpbGRyZW5SZWN0LndpZHRoLFxuICAgIGhlaWdodDogY2hpbGRyZW5SZWN0LmhlaWdodFxuICB9KTtcbiAgb2Zmc2V0cy5tYXJnaW5Ub3AgPSAwO1xuICBvZmZzZXRzLm1hcmdpbkxlZnQgPSAwO1xuXG4gIC8vIFN1YnRyYWN0IG1hcmdpbnMgb2YgZG9jdW1lbnRFbGVtZW50IGluIGNhc2UgaXQncyBiZWluZyB1c2VkIGFzIHBhcmVudFxuICAvLyB3ZSBkbyB0aGlzIG9ubHkgb24gSFRNTCBiZWNhdXNlIGl0J3MgdGhlIG9ubHkgZWxlbWVudCB0aGF0IGJlaGF2ZXNcbiAgLy8gZGlmZmVyZW50bHkgd2hlbiBtYXJnaW5zIGFyZSBhcHBsaWVkIHRvIGl0LiBUaGUgbWFyZ2lucyBhcmUgaW5jbHVkZWQgaW5cbiAgLy8gdGhlIGJveCBvZiB0aGUgZG9jdW1lbnRFbGVtZW50LCBpbiB0aGUgb3RoZXIgY2FzZXMgbm90LlxuICBpZiAoIWlzSUUxMCAmJiBpc0hUTUwpIHtcbiAgICB2YXIgbWFyZ2luVG9wID0gcGFyc2VGbG9hdChzdHlsZXMubWFyZ2luVG9wKTtcbiAgICB2YXIgbWFyZ2luTGVmdCA9IHBhcnNlRmxvYXQoc3R5bGVzLm1hcmdpbkxlZnQpO1xuXG4gICAgb2Zmc2V0cy50b3AgLT0gYm9yZGVyVG9wV2lkdGggLSBtYXJnaW5Ub3A7XG4gICAgb2Zmc2V0cy5ib3R0b20gLT0gYm9yZGVyVG9wV2lkdGggLSBtYXJnaW5Ub3A7XG4gICAgb2Zmc2V0cy5sZWZ0IC09IGJvcmRlckxlZnRXaWR0aCAtIG1hcmdpbkxlZnQ7XG4gICAgb2Zmc2V0cy5yaWdodCAtPSBib3JkZXJMZWZ0V2lkdGggLSBtYXJnaW5MZWZ0O1xuXG4gICAgLy8gQXR0YWNoIG1hcmdpblRvcCBhbmQgbWFyZ2luTGVmdCBiZWNhdXNlIGluIHNvbWUgY2lyY3Vtc3RhbmNlcyB3ZSBtYXkgbmVlZCB0aGVtXG4gICAgb2Zmc2V0cy5tYXJnaW5Ub3AgPSBtYXJnaW5Ub3A7XG4gICAgb2Zmc2V0cy5tYXJnaW5MZWZ0ID0gbWFyZ2luTGVmdDtcbiAgfVxuXG4gIGlmIChpc0lFMTAgJiYgIWZpeGVkUG9zaXRpb24gPyBwYXJlbnQuY29udGFpbnMoc2Nyb2xsUGFyZW50KSA6IHBhcmVudCA9PT0gc2Nyb2xsUGFyZW50ICYmIHNjcm9sbFBhcmVudC5ub2RlTmFtZSAhPT0gJ0JPRFknKSB7XG4gICAgb2Zmc2V0cyA9IGluY2x1ZGVTY3JvbGwob2Zmc2V0cywgcGFyZW50KTtcbiAgfVxuXG4gIHJldHVybiBvZmZzZXRzO1xufVxuXG5mdW5jdGlvbiBnZXRWaWV3cG9ydE9mZnNldFJlY3RSZWxhdGl2ZVRvQXJ0Yml0cmFyeU5vZGUoZWxlbWVudCkge1xuICB2YXIgZXhjbHVkZVNjcm9sbCA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogZmFsc2U7XG5cbiAgdmFyIGh0bWwgPSBlbGVtZW50Lm93bmVyRG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xuICB2YXIgcmVsYXRpdmVPZmZzZXQgPSBnZXRPZmZzZXRSZWN0UmVsYXRpdmVUb0FyYml0cmFyeU5vZGUoZWxlbWVudCwgaHRtbCk7XG4gIHZhciB3aWR0aCA9IE1hdGgubWF4KGh0bWwuY2xpZW50V2lkdGgsIHdpbmRvdy5pbm5lcldpZHRoIHx8IDApO1xuICB2YXIgaGVpZ2h0ID0gTWF0aC5tYXgoaHRtbC5jbGllbnRIZWlnaHQsIHdpbmRvdy5pbm5lckhlaWdodCB8fCAwKTtcblxuICB2YXIgc2Nyb2xsVG9wID0gIWV4Y2x1ZGVTY3JvbGwgPyBnZXRTY3JvbGwoaHRtbCkgOiAwO1xuICB2YXIgc2Nyb2xsTGVmdCA9ICFleGNsdWRlU2Nyb2xsID8gZ2V0U2Nyb2xsKGh0bWwsICdsZWZ0JykgOiAwO1xuXG4gIHZhciBvZmZzZXQgPSB7XG4gICAgdG9wOiBzY3JvbGxUb3AgLSByZWxhdGl2ZU9mZnNldC50b3AgKyByZWxhdGl2ZU9mZnNldC5tYXJnaW5Ub3AsXG4gICAgbGVmdDogc2Nyb2xsTGVmdCAtIHJlbGF0aXZlT2Zmc2V0LmxlZnQgKyByZWxhdGl2ZU9mZnNldC5tYXJnaW5MZWZ0LFxuICAgIHdpZHRoOiB3aWR0aCxcbiAgICBoZWlnaHQ6IGhlaWdodFxuICB9O1xuXG4gIHJldHVybiBnZXRDbGllbnRSZWN0KG9mZnNldCk7XG59XG5cbi8qKlxuICogQ2hlY2sgaWYgdGhlIGdpdmVuIGVsZW1lbnQgaXMgZml4ZWQgb3IgaXMgaW5zaWRlIGEgZml4ZWQgcGFyZW50XG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAYXJndW1lbnQge0VsZW1lbnR9IGVsZW1lbnRcbiAqIEBhcmd1bWVudCB7RWxlbWVudH0gY3VzdG9tQ29udGFpbmVyXG4gKiBAcmV0dXJucyB7Qm9vbGVhbn0gYW5zd2VyIHRvIFwiaXNGaXhlZD9cIlxuICovXG5mdW5jdGlvbiBpc0ZpeGVkKGVsZW1lbnQpIHtcbiAgdmFyIG5vZGVOYW1lID0gZWxlbWVudC5ub2RlTmFtZTtcbiAgaWYgKG5vZGVOYW1lID09PSAnQk9EWScgfHwgbm9kZU5hbWUgPT09ICdIVE1MJykge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBpZiAoZ2V0U3R5bGVDb21wdXRlZFByb3BlcnR5KGVsZW1lbnQsICdwb3NpdGlvbicpID09PSAnZml4ZWQnKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgdmFyIHBhcmVudE5vZGUgPSBnZXRQYXJlbnROb2RlKGVsZW1lbnQpO1xuICBpZiAoIXBhcmVudE5vZGUpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgcmV0dXJuIGlzRml4ZWQocGFyZW50Tm9kZSk7XG59XG5cbi8qKlxuICogRmluZHMgdGhlIGZpcnN0IHBhcmVudCBvZiBhbiBlbGVtZW50IHRoYXQgaGFzIGEgdHJhbnNmb3JtZWQgcHJvcGVydHkgZGVmaW5lZFxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQGFyZ3VtZW50IHtFbGVtZW50fSBlbGVtZW50XG4gKiBAcmV0dXJucyB7RWxlbWVudH0gZmlyc3QgdHJhbnNmb3JtZWQgcGFyZW50IG9yIGRvY3VtZW50RWxlbWVudFxuICovXG5cbmZ1bmN0aW9uIGdldEZpeGVkUG9zaXRpb25PZmZzZXRQYXJlbnQoZWxlbWVudCkge1xuICAvLyBUaGlzIGNoZWNrIGlzIG5lZWRlZCB0byBhdm9pZCBlcnJvcnMgaW4gY2FzZSBvbmUgb2YgdGhlIGVsZW1lbnRzIGlzbid0IGRlZmluZWQgZm9yIGFueSByZWFzb25cbiAgaWYgKCFlbGVtZW50IHx8ICFlbGVtZW50LnBhcmVudEVsZW1lbnQgfHwgaXNJRSgpKSB7XG4gICAgcmV0dXJuIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcbiAgfVxuICB2YXIgZWwgPSBlbGVtZW50LnBhcmVudEVsZW1lbnQ7XG4gIHdoaWxlIChlbCAmJiBnZXRTdHlsZUNvbXB1dGVkUHJvcGVydHkoZWwsICd0cmFuc2Zvcm0nKSA9PT0gJ25vbmUnKSB7XG4gICAgZWwgPSBlbC5wYXJlbnRFbGVtZW50O1xuICB9XG4gIHJldHVybiBlbCB8fCBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG59XG5cbi8qKlxuICogQ29tcHV0ZWQgdGhlIGJvdW5kYXJpZXMgbGltaXRzIGFuZCByZXR1cm4gdGhlbVxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQHBhcmFtIHtIVE1MRWxlbWVudH0gcG9wcGVyXG4gKiBAcGFyYW0ge0hUTUxFbGVtZW50fSByZWZlcmVuY2VcbiAqIEBwYXJhbSB7bnVtYmVyfSBwYWRkaW5nXG4gKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBib3VuZGFyaWVzRWxlbWVudCAtIEVsZW1lbnQgdXNlZCB0byBkZWZpbmUgdGhlIGJvdW5kYXJpZXNcbiAqIEBwYXJhbSB7Qm9vbGVhbn0gZml4ZWRQb3NpdGlvbiAtIElzIGluIGZpeGVkIHBvc2l0aW9uIG1vZGVcbiAqIEByZXR1cm5zIHtPYmplY3R9IENvb3JkaW5hdGVzIG9mIHRoZSBib3VuZGFyaWVzXG4gKi9cbmZ1bmN0aW9uIGdldEJvdW5kYXJpZXMocG9wcGVyLCByZWZlcmVuY2UsIHBhZGRpbmcsIGJvdW5kYXJpZXNFbGVtZW50KSB7XG4gIHZhciBmaXhlZFBvc2l0aW9uID0gYXJndW1lbnRzLmxlbmd0aCA+IDQgJiYgYXJndW1lbnRzWzRdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbNF0gOiBmYWxzZTtcblxuICAvLyBOT1RFOiAxIERPTSBhY2Nlc3MgaGVyZVxuXG4gIHZhciBib3VuZGFyaWVzID0geyB0b3A6IDAsIGxlZnQ6IDAgfTtcbiAgdmFyIG9mZnNldFBhcmVudCA9IGZpeGVkUG9zaXRpb24gPyBnZXRGaXhlZFBvc2l0aW9uT2Zmc2V0UGFyZW50KHBvcHBlcikgOiBmaW5kQ29tbW9uT2Zmc2V0UGFyZW50KHBvcHBlciwgZ2V0UmVmZXJlbmNlTm9kZShyZWZlcmVuY2UpKTtcblxuICAvLyBIYW5kbGUgdmlld3BvcnQgY2FzZVxuICBpZiAoYm91bmRhcmllc0VsZW1lbnQgPT09ICd2aWV3cG9ydCcpIHtcbiAgICBib3VuZGFyaWVzID0gZ2V0Vmlld3BvcnRPZmZzZXRSZWN0UmVsYXRpdmVUb0FydGJpdHJhcnlOb2RlKG9mZnNldFBhcmVudCwgZml4ZWRQb3NpdGlvbik7XG4gIH0gZWxzZSB7XG4gICAgLy8gSGFuZGxlIG90aGVyIGNhc2VzIGJhc2VkIG9uIERPTSBlbGVtZW50IHVzZWQgYXMgYm91bmRhcmllc1xuICAgIHZhciBib3VuZGFyaWVzTm9kZSA9IHZvaWQgMDtcbiAgICBpZiAoYm91bmRhcmllc0VsZW1lbnQgPT09ICdzY3JvbGxQYXJlbnQnKSB7XG4gICAgICBib3VuZGFyaWVzTm9kZSA9IGdldFNjcm9sbFBhcmVudChnZXRQYXJlbnROb2RlKHJlZmVyZW5jZSkpO1xuICAgICAgaWYgKGJvdW5kYXJpZXNOb2RlLm5vZGVOYW1lID09PSAnQk9EWScpIHtcbiAgICAgICAgYm91bmRhcmllc05vZGUgPSBwb3BwZXIub3duZXJEb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChib3VuZGFyaWVzRWxlbWVudCA9PT0gJ3dpbmRvdycpIHtcbiAgICAgIGJvdW5kYXJpZXNOb2RlID0gcG9wcGVyLm93bmVyRG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xuICAgIH0gZWxzZSB7XG4gICAgICBib3VuZGFyaWVzTm9kZSA9IGJvdW5kYXJpZXNFbGVtZW50O1xuICAgIH1cblxuICAgIHZhciBvZmZzZXRzID0gZ2V0T2Zmc2V0UmVjdFJlbGF0aXZlVG9BcmJpdHJhcnlOb2RlKGJvdW5kYXJpZXNOb2RlLCBvZmZzZXRQYXJlbnQsIGZpeGVkUG9zaXRpb24pO1xuXG4gICAgLy8gSW4gY2FzZSBvZiBIVE1MLCB3ZSBuZWVkIGEgZGlmZmVyZW50IGNvbXB1dGF0aW9uXG4gICAgaWYgKGJvdW5kYXJpZXNOb2RlLm5vZGVOYW1lID09PSAnSFRNTCcgJiYgIWlzRml4ZWQob2Zmc2V0UGFyZW50KSkge1xuICAgICAgdmFyIF9nZXRXaW5kb3dTaXplcyA9IGdldFdpbmRvd1NpemVzKHBvcHBlci5vd25lckRvY3VtZW50KSxcbiAgICAgICAgICBoZWlnaHQgPSBfZ2V0V2luZG93U2l6ZXMuaGVpZ2h0LFxuICAgICAgICAgIHdpZHRoID0gX2dldFdpbmRvd1NpemVzLndpZHRoO1xuXG4gICAgICBib3VuZGFyaWVzLnRvcCArPSBvZmZzZXRzLnRvcCAtIG9mZnNldHMubWFyZ2luVG9wO1xuICAgICAgYm91bmRhcmllcy5ib3R0b20gPSBoZWlnaHQgKyBvZmZzZXRzLnRvcDtcbiAgICAgIGJvdW5kYXJpZXMubGVmdCArPSBvZmZzZXRzLmxlZnQgLSBvZmZzZXRzLm1hcmdpbkxlZnQ7XG4gICAgICBib3VuZGFyaWVzLnJpZ2h0ID0gd2lkdGggKyBvZmZzZXRzLmxlZnQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIGZvciBhbGwgdGhlIG90aGVyIERPTSBlbGVtZW50cywgdGhpcyBvbmUgaXMgZ29vZFxuICAgICAgYm91bmRhcmllcyA9IG9mZnNldHM7XG4gICAgfVxuICB9XG5cbiAgLy8gQWRkIHBhZGRpbmdzXG4gIHBhZGRpbmcgPSBwYWRkaW5nIHx8IDA7XG4gIHZhciBpc1BhZGRpbmdOdW1iZXIgPSB0eXBlb2YgcGFkZGluZyA9PT0gJ251bWJlcic7XG4gIGJvdW5kYXJpZXMubGVmdCArPSBpc1BhZGRpbmdOdW1iZXIgPyBwYWRkaW5nIDogcGFkZGluZy5sZWZ0IHx8IDA7XG4gIGJvdW5kYXJpZXMudG9wICs9IGlzUGFkZGluZ051bWJlciA/IHBhZGRpbmcgOiBwYWRkaW5nLnRvcCB8fCAwO1xuICBib3VuZGFyaWVzLnJpZ2h0IC09IGlzUGFkZGluZ051bWJlciA/IHBhZGRpbmcgOiBwYWRkaW5nLnJpZ2h0IHx8IDA7XG4gIGJvdW5kYXJpZXMuYm90dG9tIC09IGlzUGFkZGluZ051bWJlciA/IHBhZGRpbmcgOiBwYWRkaW5nLmJvdHRvbSB8fCAwO1xuXG4gIHJldHVybiBib3VuZGFyaWVzO1xufVxuXG5mdW5jdGlvbiBnZXRBcmVhKF9yZWYpIHtcbiAgdmFyIHdpZHRoID0gX3JlZi53aWR0aCxcbiAgICAgIGhlaWdodCA9IF9yZWYuaGVpZ2h0O1xuXG4gIHJldHVybiB3aWR0aCAqIGhlaWdodDtcbn1cblxuLyoqXG4gKiBVdGlsaXR5IHVzZWQgdG8gdHJhbnNmb3JtIHRoZSBgYXV0b2AgcGxhY2VtZW50IHRvIHRoZSBwbGFjZW1lbnQgd2l0aCBtb3JlXG4gKiBhdmFpbGFibGUgc3BhY2UuXG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAYXJndW1lbnQge09iamVjdH0gZGF0YSAtIFRoZSBkYXRhIG9iamVjdCBnZW5lcmF0ZWQgYnkgdXBkYXRlIG1ldGhvZFxuICogQGFyZ3VtZW50IHtPYmplY3R9IG9wdGlvbnMgLSBNb2RpZmllcnMgY29uZmlndXJhdGlvbiBhbmQgb3B0aW9uc1xuICogQHJldHVybnMge09iamVjdH0gVGhlIGRhdGEgb2JqZWN0LCBwcm9wZXJseSBtb2RpZmllZFxuICovXG5mdW5jdGlvbiBjb21wdXRlQXV0b1BsYWNlbWVudChwbGFjZW1lbnQsIHJlZlJlY3QsIHBvcHBlciwgcmVmZXJlbmNlLCBib3VuZGFyaWVzRWxlbWVudCkge1xuICB2YXIgcGFkZGluZyA9IGFyZ3VtZW50cy5sZW5ndGggPiA1ICYmIGFyZ3VtZW50c1s1XSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzVdIDogMDtcblxuICBpZiAocGxhY2VtZW50LmluZGV4T2YoJ2F1dG8nKSA9PT0gLTEpIHtcbiAgICByZXR1cm4gcGxhY2VtZW50O1xuICB9XG5cbiAgdmFyIGJvdW5kYXJpZXMgPSBnZXRCb3VuZGFyaWVzKHBvcHBlciwgcmVmZXJlbmNlLCBwYWRkaW5nLCBib3VuZGFyaWVzRWxlbWVudCk7XG5cbiAgdmFyIHJlY3RzID0ge1xuICAgIHRvcDoge1xuICAgICAgd2lkdGg6IGJvdW5kYXJpZXMud2lkdGgsXG4gICAgICBoZWlnaHQ6IHJlZlJlY3QudG9wIC0gYm91bmRhcmllcy50b3BcbiAgICB9LFxuICAgIHJpZ2h0OiB7XG4gICAgICB3aWR0aDogYm91bmRhcmllcy5yaWdodCAtIHJlZlJlY3QucmlnaHQsXG4gICAgICBoZWlnaHQ6IGJvdW5kYXJpZXMuaGVpZ2h0XG4gICAgfSxcbiAgICBib3R0b206IHtcbiAgICAgIHdpZHRoOiBib3VuZGFyaWVzLndpZHRoLFxuICAgICAgaGVpZ2h0OiBib3VuZGFyaWVzLmJvdHRvbSAtIHJlZlJlY3QuYm90dG9tXG4gICAgfSxcbiAgICBsZWZ0OiB7XG4gICAgICB3aWR0aDogcmVmUmVjdC5sZWZ0IC0gYm91bmRhcmllcy5sZWZ0LFxuICAgICAgaGVpZ2h0OiBib3VuZGFyaWVzLmhlaWdodFxuICAgIH1cbiAgfTtcblxuICB2YXIgc29ydGVkQXJlYXMgPSBPYmplY3Qua2V5cyhyZWN0cykubWFwKGZ1bmN0aW9uIChrZXkpIHtcbiAgICByZXR1cm4gX2V4dGVuZHMoe1xuICAgICAga2V5OiBrZXlcbiAgICB9LCByZWN0c1trZXldLCB7XG4gICAgICBhcmVhOiBnZXRBcmVhKHJlY3RzW2tleV0pXG4gICAgfSk7XG4gIH0pLnNvcnQoZnVuY3Rpb24gKGEsIGIpIHtcbiAgICByZXR1cm4gYi5hcmVhIC0gYS5hcmVhO1xuICB9KTtcblxuICB2YXIgZmlsdGVyZWRBcmVhcyA9IHNvcnRlZEFyZWFzLmZpbHRlcihmdW5jdGlvbiAoX3JlZjIpIHtcbiAgICB2YXIgd2lkdGggPSBfcmVmMi53aWR0aCxcbiAgICAgICAgaGVpZ2h0ID0gX3JlZjIuaGVpZ2h0O1xuICAgIHJldHVybiB3aWR0aCA+PSBwb3BwZXIuY2xpZW50V2lkdGggJiYgaGVpZ2h0ID49IHBvcHBlci5jbGllbnRIZWlnaHQ7XG4gIH0pO1xuXG4gIHZhciBjb21wdXRlZFBsYWNlbWVudCA9IGZpbHRlcmVkQXJlYXMubGVuZ3RoID4gMCA/IGZpbHRlcmVkQXJlYXNbMF0ua2V5IDogc29ydGVkQXJlYXNbMF0ua2V5O1xuXG4gIHZhciB2YXJpYXRpb24gPSBwbGFjZW1lbnQuc3BsaXQoJy0nKVsxXTtcblxuICByZXR1cm4gY29tcHV0ZWRQbGFjZW1lbnQgKyAodmFyaWF0aW9uID8gJy0nICsgdmFyaWF0aW9uIDogJycpO1xufVxuXG4vKipcbiAqIEdldCBvZmZzZXRzIHRvIHRoZSByZWZlcmVuY2UgZWxlbWVudFxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQHBhcmFtIHtPYmplY3R9IHN0YXRlXG4gKiBAcGFyYW0ge0VsZW1lbnR9IHBvcHBlciAtIHRoZSBwb3BwZXIgZWxlbWVudFxuICogQHBhcmFtIHtFbGVtZW50fSByZWZlcmVuY2UgLSB0aGUgcmVmZXJlbmNlIGVsZW1lbnQgKHRoZSBwb3BwZXIgd2lsbCBiZSByZWxhdGl2ZSB0byB0aGlzKVxuICogQHBhcmFtIHtFbGVtZW50fSBmaXhlZFBvc2l0aW9uIC0gaXMgaW4gZml4ZWQgcG9zaXRpb24gbW9kZVxuICogQHJldHVybnMge09iamVjdH0gQW4gb2JqZWN0IGNvbnRhaW5pbmcgdGhlIG9mZnNldHMgd2hpY2ggd2lsbCBiZSBhcHBsaWVkIHRvIHRoZSBwb3BwZXJcbiAqL1xuZnVuY3Rpb24gZ2V0UmVmZXJlbmNlT2Zmc2V0cyhzdGF0ZSwgcG9wcGVyLCByZWZlcmVuY2UpIHtcbiAgdmFyIGZpeGVkUG9zaXRpb24gPSBhcmd1bWVudHMubGVuZ3RoID4gMyAmJiBhcmd1bWVudHNbM10gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1szXSA6IG51bGw7XG5cbiAgdmFyIGNvbW1vbk9mZnNldFBhcmVudCA9IGZpeGVkUG9zaXRpb24gPyBnZXRGaXhlZFBvc2l0aW9uT2Zmc2V0UGFyZW50KHBvcHBlcikgOiBmaW5kQ29tbW9uT2Zmc2V0UGFyZW50KHBvcHBlciwgZ2V0UmVmZXJlbmNlTm9kZShyZWZlcmVuY2UpKTtcbiAgcmV0dXJuIGdldE9mZnNldFJlY3RSZWxhdGl2ZVRvQXJiaXRyYXJ5Tm9kZShyZWZlcmVuY2UsIGNvbW1vbk9mZnNldFBhcmVudCwgZml4ZWRQb3NpdGlvbik7XG59XG5cbi8qKlxuICogR2V0IHRoZSBvdXRlciBzaXplcyBvZiB0aGUgZ2l2ZW4gZWxlbWVudCAob2Zmc2V0IHNpemUgKyBtYXJnaW5zKVxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQGFyZ3VtZW50IHtFbGVtZW50fSBlbGVtZW50XG4gKiBAcmV0dXJucyB7T2JqZWN0fSBvYmplY3QgY29udGFpbmluZyB3aWR0aCBhbmQgaGVpZ2h0IHByb3BlcnRpZXNcbiAqL1xuZnVuY3Rpb24gZ2V0T3V0ZXJTaXplcyhlbGVtZW50KSB7XG4gIHZhciB3aW5kb3cgPSBlbGVtZW50Lm93bmVyRG9jdW1lbnQuZGVmYXVsdFZpZXc7XG4gIHZhciBzdHlsZXMgPSB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShlbGVtZW50KTtcbiAgdmFyIHggPSBwYXJzZUZsb2F0KHN0eWxlcy5tYXJnaW5Ub3AgfHwgMCkgKyBwYXJzZUZsb2F0KHN0eWxlcy5tYXJnaW5Cb3R0b20gfHwgMCk7XG4gIHZhciB5ID0gcGFyc2VGbG9hdChzdHlsZXMubWFyZ2luTGVmdCB8fCAwKSArIHBhcnNlRmxvYXQoc3R5bGVzLm1hcmdpblJpZ2h0IHx8IDApO1xuICB2YXIgcmVzdWx0ID0ge1xuICAgIHdpZHRoOiBlbGVtZW50Lm9mZnNldFdpZHRoICsgeSxcbiAgICBoZWlnaHQ6IGVsZW1lbnQub2Zmc2V0SGVpZ2h0ICsgeFxuICB9O1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG4vKipcbiAqIEdldCB0aGUgb3Bwb3NpdGUgcGxhY2VtZW50IG9mIHRoZSBnaXZlbiBvbmVcbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBhcmd1bWVudCB7U3RyaW5nfSBwbGFjZW1lbnRcbiAqIEByZXR1cm5zIHtTdHJpbmd9IGZsaXBwZWQgcGxhY2VtZW50XG4gKi9cbmZ1bmN0aW9uIGdldE9wcG9zaXRlUGxhY2VtZW50KHBsYWNlbWVudCkge1xuICB2YXIgaGFzaCA9IHsgbGVmdDogJ3JpZ2h0JywgcmlnaHQ6ICdsZWZ0JywgYm90dG9tOiAndG9wJywgdG9wOiAnYm90dG9tJyB9O1xuICByZXR1cm4gcGxhY2VtZW50LnJlcGxhY2UoL2xlZnR8cmlnaHR8Ym90dG9tfHRvcC9nLCBmdW5jdGlvbiAobWF0Y2hlZCkge1xuICAgIHJldHVybiBoYXNoW21hdGNoZWRdO1xuICB9KTtcbn1cblxuLyoqXG4gKiBHZXQgb2Zmc2V0cyB0byB0aGUgcG9wcGVyXG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAcGFyYW0ge09iamVjdH0gcG9zaXRpb24gLSBDU1MgcG9zaXRpb24gdGhlIFBvcHBlciB3aWxsIGdldCBhcHBsaWVkXG4gKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBwb3BwZXIgLSB0aGUgcG9wcGVyIGVsZW1lbnRcbiAqIEBwYXJhbSB7T2JqZWN0fSByZWZlcmVuY2VPZmZzZXRzIC0gdGhlIHJlZmVyZW5jZSBvZmZzZXRzICh0aGUgcG9wcGVyIHdpbGwgYmUgcmVsYXRpdmUgdG8gdGhpcylcbiAqIEBwYXJhbSB7U3RyaW5nfSBwbGFjZW1lbnQgLSBvbmUgb2YgdGhlIHZhbGlkIHBsYWNlbWVudCBvcHRpb25zXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBwb3BwZXJPZmZzZXRzIC0gQW4gb2JqZWN0IGNvbnRhaW5pbmcgdGhlIG9mZnNldHMgd2hpY2ggd2lsbCBiZSBhcHBsaWVkIHRvIHRoZSBwb3BwZXJcbiAqL1xuZnVuY3Rpb24gZ2V0UG9wcGVyT2Zmc2V0cyhwb3BwZXIsIHJlZmVyZW5jZU9mZnNldHMsIHBsYWNlbWVudCkge1xuICBwbGFjZW1lbnQgPSBwbGFjZW1lbnQuc3BsaXQoJy0nKVswXTtcblxuICAvLyBHZXQgcG9wcGVyIG5vZGUgc2l6ZXNcbiAgdmFyIHBvcHBlclJlY3QgPSBnZXRPdXRlclNpemVzKHBvcHBlcik7XG5cbiAgLy8gQWRkIHBvc2l0aW9uLCB3aWR0aCBhbmQgaGVpZ2h0IHRvIG91ciBvZmZzZXRzIG9iamVjdFxuICB2YXIgcG9wcGVyT2Zmc2V0cyA9IHtcbiAgICB3aWR0aDogcG9wcGVyUmVjdC53aWR0aCxcbiAgICBoZWlnaHQ6IHBvcHBlclJlY3QuaGVpZ2h0XG4gIH07XG5cbiAgLy8gZGVwZW5kaW5nIGJ5IHRoZSBwb3BwZXIgcGxhY2VtZW50IHdlIGhhdmUgdG8gY29tcHV0ZSBpdHMgb2Zmc2V0cyBzbGlnaHRseSBkaWZmZXJlbnRseVxuICB2YXIgaXNIb3JpeiA9IFsncmlnaHQnLCAnbGVmdCddLmluZGV4T2YocGxhY2VtZW50KSAhPT0gLTE7XG4gIHZhciBtYWluU2lkZSA9IGlzSG9yaXogPyAndG9wJyA6ICdsZWZ0JztcbiAgdmFyIHNlY29uZGFyeVNpZGUgPSBpc0hvcml6ID8gJ2xlZnQnIDogJ3RvcCc7XG4gIHZhciBtZWFzdXJlbWVudCA9IGlzSG9yaXogPyAnaGVpZ2h0JyA6ICd3aWR0aCc7XG4gIHZhciBzZWNvbmRhcnlNZWFzdXJlbWVudCA9ICFpc0hvcml6ID8gJ2hlaWdodCcgOiAnd2lkdGgnO1xuXG4gIHBvcHBlck9mZnNldHNbbWFpblNpZGVdID0gcmVmZXJlbmNlT2Zmc2V0c1ttYWluU2lkZV0gKyByZWZlcmVuY2VPZmZzZXRzW21lYXN1cmVtZW50XSAvIDIgLSBwb3BwZXJSZWN0W21lYXN1cmVtZW50XSAvIDI7XG4gIGlmIChwbGFjZW1lbnQgPT09IHNlY29uZGFyeVNpZGUpIHtcbiAgICBwb3BwZXJPZmZzZXRzW3NlY29uZGFyeVNpZGVdID0gcmVmZXJlbmNlT2Zmc2V0c1tzZWNvbmRhcnlTaWRlXSAtIHBvcHBlclJlY3Rbc2Vjb25kYXJ5TWVhc3VyZW1lbnRdO1xuICB9IGVsc2Uge1xuICAgIHBvcHBlck9mZnNldHNbc2Vjb25kYXJ5U2lkZV0gPSByZWZlcmVuY2VPZmZzZXRzW2dldE9wcG9zaXRlUGxhY2VtZW50KHNlY29uZGFyeVNpZGUpXTtcbiAgfVxuXG4gIHJldHVybiBwb3BwZXJPZmZzZXRzO1xufVxuXG4vKipcbiAqIE1pbWljcyB0aGUgYGZpbmRgIG1ldGhvZCBvZiBBcnJheVxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQGFyZ3VtZW50IHtBcnJheX0gYXJyXG4gKiBAYXJndW1lbnQgcHJvcFxuICogQGFyZ3VtZW50IHZhbHVlXG4gKiBAcmV0dXJucyBpbmRleCBvciAtMVxuICovXG5mdW5jdGlvbiBmaW5kKGFyciwgY2hlY2spIHtcbiAgLy8gdXNlIG5hdGl2ZSBmaW5kIGlmIHN1cHBvcnRlZFxuICBpZiAoQXJyYXkucHJvdG90eXBlLmZpbmQpIHtcbiAgICByZXR1cm4gYXJyLmZpbmQoY2hlY2spO1xuICB9XG5cbiAgLy8gdXNlIGBmaWx0ZXJgIHRvIG9idGFpbiB0aGUgc2FtZSBiZWhhdmlvciBvZiBgZmluZGBcbiAgcmV0dXJuIGFyci5maWx0ZXIoY2hlY2spWzBdO1xufVxuXG4vKipcbiAqIFJldHVybiB0aGUgaW5kZXggb2YgdGhlIG1hdGNoaW5nIG9iamVjdFxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQGFyZ3VtZW50IHtBcnJheX0gYXJyXG4gKiBAYXJndW1lbnQgcHJvcFxuICogQGFyZ3VtZW50IHZhbHVlXG4gKiBAcmV0dXJucyBpbmRleCBvciAtMVxuICovXG5mdW5jdGlvbiBmaW5kSW5kZXgoYXJyLCBwcm9wLCB2YWx1ZSkge1xuICAvLyB1c2UgbmF0aXZlIGZpbmRJbmRleCBpZiBzdXBwb3J0ZWRcbiAgaWYgKEFycmF5LnByb3RvdHlwZS5maW5kSW5kZXgpIHtcbiAgICByZXR1cm4gYXJyLmZpbmRJbmRleChmdW5jdGlvbiAoY3VyKSB7XG4gICAgICByZXR1cm4gY3VyW3Byb3BdID09PSB2YWx1ZTtcbiAgICB9KTtcbiAgfVxuXG4gIC8vIHVzZSBgZmluZGAgKyBgaW5kZXhPZmAgaWYgYGZpbmRJbmRleGAgaXNuJ3Qgc3VwcG9ydGVkXG4gIHZhciBtYXRjaCA9IGZpbmQoYXJyLCBmdW5jdGlvbiAob2JqKSB7XG4gICAgcmV0dXJuIG9ialtwcm9wXSA9PT0gdmFsdWU7XG4gIH0pO1xuICByZXR1cm4gYXJyLmluZGV4T2YobWF0Y2gpO1xufVxuXG4vKipcbiAqIExvb3AgdHJvdWdoIHRoZSBsaXN0IG9mIG1vZGlmaWVycyBhbmQgcnVuIHRoZW0gaW4gb3JkZXIsXG4gKiBlYWNoIG9mIHRoZW0gd2lsbCB0aGVuIGVkaXQgdGhlIGRhdGEgb2JqZWN0LlxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQHBhcmFtIHtkYXRhT2JqZWN0fSBkYXRhXG4gKiBAcGFyYW0ge0FycmF5fSBtb2RpZmllcnNcbiAqIEBwYXJhbSB7U3RyaW5nfSBlbmRzIC0gT3B0aW9uYWwgbW9kaWZpZXIgbmFtZSB1c2VkIGFzIHN0b3BwZXJcbiAqIEByZXR1cm5zIHtkYXRhT2JqZWN0fVxuICovXG5mdW5jdGlvbiBydW5Nb2RpZmllcnMobW9kaWZpZXJzLCBkYXRhLCBlbmRzKSB7XG4gIHZhciBtb2RpZmllcnNUb1J1biA9IGVuZHMgPT09IHVuZGVmaW5lZCA/IG1vZGlmaWVycyA6IG1vZGlmaWVycy5zbGljZSgwLCBmaW5kSW5kZXgobW9kaWZpZXJzLCAnbmFtZScsIGVuZHMpKTtcblxuICBtb2RpZmllcnNUb1J1bi5mb3JFYWNoKGZ1bmN0aW9uIChtb2RpZmllcikge1xuICAgIGlmIChtb2RpZmllclsnZnVuY3Rpb24nXSkge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbGluZSBkb3Qtbm90YXRpb25cbiAgICAgIGNvbnNvbGUud2FybignYG1vZGlmaWVyLmZ1bmN0aW9uYCBpcyBkZXByZWNhdGVkLCB1c2UgYG1vZGlmaWVyLmZuYCEnKTtcbiAgICB9XG4gICAgdmFyIGZuID0gbW9kaWZpZXJbJ2Z1bmN0aW9uJ10gfHwgbW9kaWZpZXIuZm47IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgZG90LW5vdGF0aW9uXG4gICAgaWYgKG1vZGlmaWVyLmVuYWJsZWQgJiYgaXNGdW5jdGlvbihmbikpIHtcbiAgICAgIC8vIEFkZCBwcm9wZXJ0aWVzIHRvIG9mZnNldHMgdG8gbWFrZSB0aGVtIGEgY29tcGxldGUgY2xpZW50UmVjdCBvYmplY3RcbiAgICAgIC8vIHdlIGRvIHRoaXMgYmVmb3JlIGVhY2ggbW9kaWZpZXIgdG8gbWFrZSBzdXJlIHRoZSBwcmV2aW91cyBvbmUgZG9lc24ndFxuICAgICAgLy8gbWVzcyB3aXRoIHRoZXNlIHZhbHVlc1xuICAgICAgZGF0YS5vZmZzZXRzLnBvcHBlciA9IGdldENsaWVudFJlY3QoZGF0YS5vZmZzZXRzLnBvcHBlcik7XG4gICAgICBkYXRhLm9mZnNldHMucmVmZXJlbmNlID0gZ2V0Q2xpZW50UmVjdChkYXRhLm9mZnNldHMucmVmZXJlbmNlKTtcblxuICAgICAgZGF0YSA9IGZuKGRhdGEsIG1vZGlmaWVyKTtcbiAgICB9XG4gIH0pO1xuXG4gIHJldHVybiBkYXRhO1xufVxuXG4vKipcbiAqIFVwZGF0ZXMgdGhlIHBvc2l0aW9uIG9mIHRoZSBwb3BwZXIsIGNvbXB1dGluZyB0aGUgbmV3IG9mZnNldHMgYW5kIGFwcGx5aW5nXG4gKiB0aGUgbmV3IHN0eWxlLjxiciAvPlxuICogUHJlZmVyIGBzY2hlZHVsZVVwZGF0ZWAgb3ZlciBgdXBkYXRlYCBiZWNhdXNlIG9mIHBlcmZvcm1hbmNlIHJlYXNvbnMuXG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyXG4gKi9cbmZ1bmN0aW9uIHVwZGF0ZSgpIHtcbiAgLy8gaWYgcG9wcGVyIGlzIGRlc3Ryb3llZCwgZG9uJ3QgcGVyZm9ybSBhbnkgZnVydGhlciB1cGRhdGVcbiAgaWYgKHRoaXMuc3RhdGUuaXNEZXN0cm95ZWQpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICB2YXIgZGF0YSA9IHtcbiAgICBpbnN0YW5jZTogdGhpcyxcbiAgICBzdHlsZXM6IHt9LFxuICAgIGFycm93U3R5bGVzOiB7fSxcbiAgICBhdHRyaWJ1dGVzOiB7fSxcbiAgICBmbGlwcGVkOiBmYWxzZSxcbiAgICBvZmZzZXRzOiB7fVxuICB9O1xuXG4gIC8vIGNvbXB1dGUgcmVmZXJlbmNlIGVsZW1lbnQgb2Zmc2V0c1xuICBkYXRhLm9mZnNldHMucmVmZXJlbmNlID0gZ2V0UmVmZXJlbmNlT2Zmc2V0cyh0aGlzLnN0YXRlLCB0aGlzLnBvcHBlciwgdGhpcy5yZWZlcmVuY2UsIHRoaXMub3B0aW9ucy5wb3NpdGlvbkZpeGVkKTtcblxuICAvLyBjb21wdXRlIGF1dG8gcGxhY2VtZW50LCBzdG9yZSBwbGFjZW1lbnQgaW5zaWRlIHRoZSBkYXRhIG9iamVjdCxcbiAgLy8gbW9kaWZpZXJzIHdpbGwgYmUgYWJsZSB0byBlZGl0IGBwbGFjZW1lbnRgIGlmIG5lZWRlZFxuICAvLyBhbmQgcmVmZXIgdG8gb3JpZ2luYWxQbGFjZW1lbnQgdG8ga25vdyB0aGUgb3JpZ2luYWwgdmFsdWVcbiAgZGF0YS5wbGFjZW1lbnQgPSBjb21wdXRlQXV0b1BsYWNlbWVudCh0aGlzLm9wdGlvbnMucGxhY2VtZW50LCBkYXRhLm9mZnNldHMucmVmZXJlbmNlLCB0aGlzLnBvcHBlciwgdGhpcy5yZWZlcmVuY2UsIHRoaXMub3B0aW9ucy5tb2RpZmllcnMuZmxpcC5ib3VuZGFyaWVzRWxlbWVudCwgdGhpcy5vcHRpb25zLm1vZGlmaWVycy5mbGlwLnBhZGRpbmcpO1xuXG4gIC8vIHN0b3JlIHRoZSBjb21wdXRlZCBwbGFjZW1lbnQgaW5zaWRlIGBvcmlnaW5hbFBsYWNlbWVudGBcbiAgZGF0YS5vcmlnaW5hbFBsYWNlbWVudCA9IGRhdGEucGxhY2VtZW50O1xuXG4gIGRhdGEucG9zaXRpb25GaXhlZCA9IHRoaXMub3B0aW9ucy5wb3NpdGlvbkZpeGVkO1xuXG4gIC8vIGNvbXB1dGUgdGhlIHBvcHBlciBvZmZzZXRzXG4gIGRhdGEub2Zmc2V0cy5wb3BwZXIgPSBnZXRQb3BwZXJPZmZzZXRzKHRoaXMucG9wcGVyLCBkYXRhLm9mZnNldHMucmVmZXJlbmNlLCBkYXRhLnBsYWNlbWVudCk7XG5cbiAgZGF0YS5vZmZzZXRzLnBvcHBlci5wb3NpdGlvbiA9IHRoaXMub3B0aW9ucy5wb3NpdGlvbkZpeGVkID8gJ2ZpeGVkJyA6ICdhYnNvbHV0ZSc7XG5cbiAgLy8gcnVuIHRoZSBtb2RpZmllcnNcbiAgZGF0YSA9IHJ1bk1vZGlmaWVycyh0aGlzLm1vZGlmaWVycywgZGF0YSk7XG5cbiAgLy8gdGhlIGZpcnN0IGB1cGRhdGVgIHdpbGwgY2FsbCBgb25DcmVhdGVgIGNhbGxiYWNrXG4gIC8vIHRoZSBvdGhlciBvbmVzIHdpbGwgY2FsbCBgb25VcGRhdGVgIGNhbGxiYWNrXG4gIGlmICghdGhpcy5zdGF0ZS5pc0NyZWF0ZWQpIHtcbiAgICB0aGlzLnN0YXRlLmlzQ3JlYXRlZCA9IHRydWU7XG4gICAgdGhpcy5vcHRpb25zLm9uQ3JlYXRlKGRhdGEpO1xuICB9IGVsc2Uge1xuICAgIHRoaXMub3B0aW9ucy5vblVwZGF0ZShkYXRhKTtcbiAgfVxufVxuXG4vKipcbiAqIEhlbHBlciB1c2VkIHRvIGtub3cgaWYgdGhlIGdpdmVuIG1vZGlmaWVyIGlzIGVuYWJsZWQuXG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAcmV0dXJucyB7Qm9vbGVhbn1cbiAqL1xuZnVuY3Rpb24gaXNNb2RpZmllckVuYWJsZWQobW9kaWZpZXJzLCBtb2RpZmllck5hbWUpIHtcbiAgcmV0dXJuIG1vZGlmaWVycy5zb21lKGZ1bmN0aW9uIChfcmVmKSB7XG4gICAgdmFyIG5hbWUgPSBfcmVmLm5hbWUsXG4gICAgICAgIGVuYWJsZWQgPSBfcmVmLmVuYWJsZWQ7XG4gICAgcmV0dXJuIGVuYWJsZWQgJiYgbmFtZSA9PT0gbW9kaWZpZXJOYW1lO1xuICB9KTtcbn1cblxuLyoqXG4gKiBHZXQgdGhlIHByZWZpeGVkIHN1cHBvcnRlZCBwcm9wZXJ0eSBuYW1lXG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAYXJndW1lbnQge1N0cmluZ30gcHJvcGVydHkgKGNhbWVsQ2FzZSlcbiAqIEByZXR1cm5zIHtTdHJpbmd9IHByZWZpeGVkIHByb3BlcnR5IChjYW1lbENhc2Ugb3IgUGFzY2FsQ2FzZSwgZGVwZW5kaW5nIG9uIHRoZSB2ZW5kb3IgcHJlZml4KVxuICovXG5mdW5jdGlvbiBnZXRTdXBwb3J0ZWRQcm9wZXJ0eU5hbWUocHJvcGVydHkpIHtcbiAgdmFyIHByZWZpeGVzID0gW2ZhbHNlLCAnbXMnLCAnV2Via2l0JywgJ01veicsICdPJ107XG4gIHZhciB1cHBlclByb3AgPSBwcm9wZXJ0eS5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIHByb3BlcnR5LnNsaWNlKDEpO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgcHJlZml4ZXMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgcHJlZml4ID0gcHJlZml4ZXNbaV07XG4gICAgdmFyIHRvQ2hlY2sgPSBwcmVmaXggPyAnJyArIHByZWZpeCArIHVwcGVyUHJvcCA6IHByb3BlcnR5O1xuICAgIGlmICh0eXBlb2YgZG9jdW1lbnQuYm9keS5zdHlsZVt0b0NoZWNrXSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHJldHVybiB0b0NoZWNrO1xuICAgIH1cbiAgfVxuICByZXR1cm4gbnVsbDtcbn1cblxuLyoqXG4gKiBEZXN0cm95cyB0aGUgcG9wcGVyLlxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlclxuICovXG5mdW5jdGlvbiBkZXN0cm95KCkge1xuICB0aGlzLnN0YXRlLmlzRGVzdHJveWVkID0gdHJ1ZTtcblxuICAvLyB0b3VjaCBET00gb25seSBpZiBgYXBwbHlTdHlsZWAgbW9kaWZpZXIgaXMgZW5hYmxlZFxuICBpZiAoaXNNb2RpZmllckVuYWJsZWQodGhpcy5tb2RpZmllcnMsICdhcHBseVN0eWxlJykpIHtcbiAgICB0aGlzLnBvcHBlci5yZW1vdmVBdHRyaWJ1dGUoJ3gtcGxhY2VtZW50Jyk7XG4gICAgdGhpcy5wb3BwZXIuc3R5bGUucG9zaXRpb24gPSAnJztcbiAgICB0aGlzLnBvcHBlci5zdHlsZS50b3AgPSAnJztcbiAgICB0aGlzLnBvcHBlci5zdHlsZS5sZWZ0ID0gJyc7XG4gICAgdGhpcy5wb3BwZXIuc3R5bGUucmlnaHQgPSAnJztcbiAgICB0aGlzLnBvcHBlci5zdHlsZS5ib3R0b20gPSAnJztcbiAgICB0aGlzLnBvcHBlci5zdHlsZS53aWxsQ2hhbmdlID0gJyc7XG4gICAgdGhpcy5wb3BwZXIuc3R5bGVbZ2V0U3VwcG9ydGVkUHJvcGVydHlOYW1lKCd0cmFuc2Zvcm0nKV0gPSAnJztcbiAgfVxuXG4gIHRoaXMuZGlzYWJsZUV2ZW50TGlzdGVuZXJzKCk7XG5cbiAgLy8gcmVtb3ZlIHRoZSBwb3BwZXIgaWYgdXNlciBleHBsaWNpdGx5IGFza2VkIGZvciB0aGUgZGVsZXRpb24gb24gZGVzdHJveVxuICAvLyBkbyBub3QgdXNlIGByZW1vdmVgIGJlY2F1c2UgSUUxMSBkb2Vzbid0IHN1cHBvcnQgaXRcbiAgaWYgKHRoaXMub3B0aW9ucy5yZW1vdmVPbkRlc3Ryb3kpIHtcbiAgICB0aGlzLnBvcHBlci5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHRoaXMucG9wcGVyKTtcbiAgfVxuICByZXR1cm4gdGhpcztcbn1cblxuLyoqXG4gKiBHZXQgdGhlIHdpbmRvdyBhc3NvY2lhdGVkIHdpdGggdGhlIGVsZW1lbnRcbiAqIEBhcmd1bWVudCB7RWxlbWVudH0gZWxlbWVudFxuICogQHJldHVybnMge1dpbmRvd31cbiAqL1xuZnVuY3Rpb24gZ2V0V2luZG93KGVsZW1lbnQpIHtcbiAgdmFyIG93bmVyRG9jdW1lbnQgPSBlbGVtZW50Lm93bmVyRG9jdW1lbnQ7XG4gIHJldHVybiBvd25lckRvY3VtZW50ID8gb3duZXJEb2N1bWVudC5kZWZhdWx0VmlldyA6IHdpbmRvdztcbn1cblxuZnVuY3Rpb24gYXR0YWNoVG9TY3JvbGxQYXJlbnRzKHNjcm9sbFBhcmVudCwgZXZlbnQsIGNhbGxiYWNrLCBzY3JvbGxQYXJlbnRzKSB7XG4gIHZhciBpc0JvZHkgPSBzY3JvbGxQYXJlbnQubm9kZU5hbWUgPT09ICdCT0RZJztcbiAgdmFyIHRhcmdldCA9IGlzQm9keSA/IHNjcm9sbFBhcmVudC5vd25lckRvY3VtZW50LmRlZmF1bHRWaWV3IDogc2Nyb2xsUGFyZW50O1xuICB0YXJnZXQuYWRkRXZlbnRMaXN0ZW5lcihldmVudCwgY2FsbGJhY2ssIHsgcGFzc2l2ZTogdHJ1ZSB9KTtcblxuICBpZiAoIWlzQm9keSkge1xuICAgIGF0dGFjaFRvU2Nyb2xsUGFyZW50cyhnZXRTY3JvbGxQYXJlbnQodGFyZ2V0LnBhcmVudE5vZGUpLCBldmVudCwgY2FsbGJhY2ssIHNjcm9sbFBhcmVudHMpO1xuICB9XG4gIHNjcm9sbFBhcmVudHMucHVzaCh0YXJnZXQpO1xufVxuXG4vKipcbiAqIFNldHVwIG5lZWRlZCBldmVudCBsaXN0ZW5lcnMgdXNlZCB0byB1cGRhdGUgdGhlIHBvcHBlciBwb3NpdGlvblxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gc2V0dXBFdmVudExpc3RlbmVycyhyZWZlcmVuY2UsIG9wdGlvbnMsIHN0YXRlLCB1cGRhdGVCb3VuZCkge1xuICAvLyBSZXNpemUgZXZlbnQgbGlzdGVuZXIgb24gd2luZG93XG4gIHN0YXRlLnVwZGF0ZUJvdW5kID0gdXBkYXRlQm91bmQ7XG4gIGdldFdpbmRvdyhyZWZlcmVuY2UpLmFkZEV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIHN0YXRlLnVwZGF0ZUJvdW5kLCB7IHBhc3NpdmU6IHRydWUgfSk7XG5cbiAgLy8gU2Nyb2xsIGV2ZW50IGxpc3RlbmVyIG9uIHNjcm9sbCBwYXJlbnRzXG4gIHZhciBzY3JvbGxFbGVtZW50ID0gZ2V0U2Nyb2xsUGFyZW50KHJlZmVyZW5jZSk7XG4gIGF0dGFjaFRvU2Nyb2xsUGFyZW50cyhzY3JvbGxFbGVtZW50LCAnc2Nyb2xsJywgc3RhdGUudXBkYXRlQm91bmQsIHN0YXRlLnNjcm9sbFBhcmVudHMpO1xuICBzdGF0ZS5zY3JvbGxFbGVtZW50ID0gc2Nyb2xsRWxlbWVudDtcbiAgc3RhdGUuZXZlbnRzRW5hYmxlZCA9IHRydWU7XG5cbiAgcmV0dXJuIHN0YXRlO1xufVxuXG4vKipcbiAqIEl0IHdpbGwgYWRkIHJlc2l6ZS9zY3JvbGwgZXZlbnRzIGFuZCBzdGFydCByZWNhbGN1bGF0aW5nXG4gKiBwb3NpdGlvbiBvZiB0aGUgcG9wcGVyIGVsZW1lbnQgd2hlbiB0aGV5IGFyZSB0cmlnZ2VyZWQuXG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyXG4gKi9cbmZ1bmN0aW9uIGVuYWJsZUV2ZW50TGlzdGVuZXJzKCkge1xuICBpZiAoIXRoaXMuc3RhdGUuZXZlbnRzRW5hYmxlZCkge1xuICAgIHRoaXMuc3RhdGUgPSBzZXR1cEV2ZW50TGlzdGVuZXJzKHRoaXMucmVmZXJlbmNlLCB0aGlzLm9wdGlvbnMsIHRoaXMuc3RhdGUsIHRoaXMuc2NoZWR1bGVVcGRhdGUpO1xuICB9XG59XG5cbi8qKlxuICogUmVtb3ZlIGV2ZW50IGxpc3RlbmVycyB1c2VkIHRvIHVwZGF0ZSB0aGUgcG9wcGVyIHBvc2l0aW9uXG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiByZW1vdmVFdmVudExpc3RlbmVycyhyZWZlcmVuY2UsIHN0YXRlKSB7XG4gIC8vIFJlbW92ZSByZXNpemUgZXZlbnQgbGlzdGVuZXIgb24gd2luZG93XG4gIGdldFdpbmRvdyhyZWZlcmVuY2UpLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIHN0YXRlLnVwZGF0ZUJvdW5kKTtcblxuICAvLyBSZW1vdmUgc2Nyb2xsIGV2ZW50IGxpc3RlbmVyIG9uIHNjcm9sbCBwYXJlbnRzXG4gIHN0YXRlLnNjcm9sbFBhcmVudHMuZm9yRWFjaChmdW5jdGlvbiAodGFyZ2V0KSB7XG4gICAgdGFyZ2V0LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Njcm9sbCcsIHN0YXRlLnVwZGF0ZUJvdW5kKTtcbiAgfSk7XG5cbiAgLy8gUmVzZXQgc3RhdGVcbiAgc3RhdGUudXBkYXRlQm91bmQgPSBudWxsO1xuICBzdGF0ZS5zY3JvbGxQYXJlbnRzID0gW107XG4gIHN0YXRlLnNjcm9sbEVsZW1lbnQgPSBudWxsO1xuICBzdGF0ZS5ldmVudHNFbmFibGVkID0gZmFsc2U7XG4gIHJldHVybiBzdGF0ZTtcbn1cblxuLyoqXG4gKiBJdCB3aWxsIHJlbW92ZSByZXNpemUvc2Nyb2xsIGV2ZW50cyBhbmQgd29uJ3QgcmVjYWxjdWxhdGUgcG9wcGVyIHBvc2l0aW9uXG4gKiB3aGVuIHRoZXkgYXJlIHRyaWdnZXJlZC4gSXQgYWxzbyB3b24ndCB0cmlnZ2VyIGBvblVwZGF0ZWAgY2FsbGJhY2sgYW55bW9yZSxcbiAqIHVubGVzcyB5b3UgY2FsbCBgdXBkYXRlYCBtZXRob2QgbWFudWFsbHkuXG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyXG4gKi9cbmZ1bmN0aW9uIGRpc2FibGVFdmVudExpc3RlbmVycygpIHtcbiAgaWYgKHRoaXMuc3RhdGUuZXZlbnRzRW5hYmxlZCkge1xuICAgIGNhbmNlbEFuaW1hdGlvbkZyYW1lKHRoaXMuc2NoZWR1bGVVcGRhdGUpO1xuICAgIHRoaXMuc3RhdGUgPSByZW1vdmVFdmVudExpc3RlbmVycyh0aGlzLnJlZmVyZW5jZSwgdGhpcy5zdGF0ZSk7XG4gIH1cbn1cblxuLyoqXG4gKiBUZWxscyBpZiBhIGdpdmVuIGlucHV0IGlzIGEgbnVtYmVyXG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAcGFyYW0geyp9IGlucHV0IHRvIGNoZWNrXG4gKiBAcmV0dXJuIHtCb29sZWFufVxuICovXG5mdW5jdGlvbiBpc051bWVyaWMobikge1xuICByZXR1cm4gbiAhPT0gJycgJiYgIWlzTmFOKHBhcnNlRmxvYXQobikpICYmIGlzRmluaXRlKG4pO1xufVxuXG4vKipcbiAqIFNldCB0aGUgc3R5bGUgdG8gdGhlIGdpdmVuIHBvcHBlclxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQGFyZ3VtZW50IHtFbGVtZW50fSBlbGVtZW50IC0gRWxlbWVudCB0byBhcHBseSB0aGUgc3R5bGUgdG9cbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBzdHlsZXNcbiAqIE9iamVjdCB3aXRoIGEgbGlzdCBvZiBwcm9wZXJ0aWVzIGFuZCB2YWx1ZXMgd2hpY2ggd2lsbCBiZSBhcHBsaWVkIHRvIHRoZSBlbGVtZW50XG4gKi9cbmZ1bmN0aW9uIHNldFN0eWxlcyhlbGVtZW50LCBzdHlsZXMpIHtcbiAgT2JqZWN0LmtleXMoc3R5bGVzKS5mb3JFYWNoKGZ1bmN0aW9uIChwcm9wKSB7XG4gICAgdmFyIHVuaXQgPSAnJztcbiAgICAvLyBhZGQgdW5pdCBpZiB0aGUgdmFsdWUgaXMgbnVtZXJpYyBhbmQgaXMgb25lIG9mIHRoZSBmb2xsb3dpbmdcbiAgICBpZiAoWyd3aWR0aCcsICdoZWlnaHQnLCAndG9wJywgJ3JpZ2h0JywgJ2JvdHRvbScsICdsZWZ0J10uaW5kZXhPZihwcm9wKSAhPT0gLTEgJiYgaXNOdW1lcmljKHN0eWxlc1twcm9wXSkpIHtcbiAgICAgIHVuaXQgPSAncHgnO1xuICAgIH1cbiAgICBlbGVtZW50LnN0eWxlW3Byb3BdID0gc3R5bGVzW3Byb3BdICsgdW5pdDtcbiAgfSk7XG59XG5cbi8qKlxuICogU2V0IHRoZSBhdHRyaWJ1dGVzIHRvIHRoZSBnaXZlbiBwb3BwZXJcbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBhcmd1bWVudCB7RWxlbWVudH0gZWxlbWVudCAtIEVsZW1lbnQgdG8gYXBwbHkgdGhlIGF0dHJpYnV0ZXMgdG9cbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBzdHlsZXNcbiAqIE9iamVjdCB3aXRoIGEgbGlzdCBvZiBwcm9wZXJ0aWVzIGFuZCB2YWx1ZXMgd2hpY2ggd2lsbCBiZSBhcHBsaWVkIHRvIHRoZSBlbGVtZW50XG4gKi9cbmZ1bmN0aW9uIHNldEF0dHJpYnV0ZXMoZWxlbWVudCwgYXR0cmlidXRlcykge1xuICBPYmplY3Qua2V5cyhhdHRyaWJ1dGVzKS5mb3JFYWNoKGZ1bmN0aW9uIChwcm9wKSB7XG4gICAgdmFyIHZhbHVlID0gYXR0cmlidXRlc1twcm9wXTtcbiAgICBpZiAodmFsdWUgIT09IGZhbHNlKSB7XG4gICAgICBlbGVtZW50LnNldEF0dHJpYnV0ZShwcm9wLCBhdHRyaWJ1dGVzW3Byb3BdKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZWxlbWVudC5yZW1vdmVBdHRyaWJ1dGUocHJvcCk7XG4gICAgfVxuICB9KTtcbn1cblxuLyoqXG4gKiBAZnVuY3Rpb25cbiAqIEBtZW1iZXJvZiBNb2RpZmllcnNcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBkYXRhIC0gVGhlIGRhdGEgb2JqZWN0IGdlbmVyYXRlZCBieSBgdXBkYXRlYCBtZXRob2RcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBkYXRhLnN0eWxlcyAtIExpc3Qgb2Ygc3R5bGUgcHJvcGVydGllcyAtIHZhbHVlcyB0byBhcHBseSB0byBwb3BwZXIgZWxlbWVudFxuICogQGFyZ3VtZW50IHtPYmplY3R9IGRhdGEuYXR0cmlidXRlcyAtIExpc3Qgb2YgYXR0cmlidXRlIHByb3BlcnRpZXMgLSB2YWx1ZXMgdG8gYXBwbHkgdG8gcG9wcGVyIGVsZW1lbnRcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBvcHRpb25zIC0gTW9kaWZpZXJzIGNvbmZpZ3VyYXRpb24gYW5kIG9wdGlvbnNcbiAqIEByZXR1cm5zIHtPYmplY3R9IFRoZSBzYW1lIGRhdGEgb2JqZWN0XG4gKi9cbmZ1bmN0aW9uIGFwcGx5U3R5bGUoZGF0YSkge1xuICAvLyBhbnkgcHJvcGVydHkgcHJlc2VudCBpbiBgZGF0YS5zdHlsZXNgIHdpbGwgYmUgYXBwbGllZCB0byB0aGUgcG9wcGVyLFxuICAvLyBpbiB0aGlzIHdheSB3ZSBjYW4gbWFrZSB0aGUgM3JkIHBhcnR5IG1vZGlmaWVycyBhZGQgY3VzdG9tIHN0eWxlcyB0byBpdFxuICAvLyBCZSBhd2FyZSwgbW9kaWZpZXJzIGNvdWxkIG92ZXJyaWRlIHRoZSBwcm9wZXJ0aWVzIGRlZmluZWQgaW4gdGhlIHByZXZpb3VzXG4gIC8vIGxpbmVzIG9mIHRoaXMgbW9kaWZpZXIhXG4gIHNldFN0eWxlcyhkYXRhLmluc3RhbmNlLnBvcHBlciwgZGF0YS5zdHlsZXMpO1xuXG4gIC8vIGFueSBwcm9wZXJ0eSBwcmVzZW50IGluIGBkYXRhLmF0dHJpYnV0ZXNgIHdpbGwgYmUgYXBwbGllZCB0byB0aGUgcG9wcGVyLFxuICAvLyB0aGV5IHdpbGwgYmUgc2V0IGFzIEhUTUwgYXR0cmlidXRlcyBvZiB0aGUgZWxlbWVudFxuICBzZXRBdHRyaWJ1dGVzKGRhdGEuaW5zdGFuY2UucG9wcGVyLCBkYXRhLmF0dHJpYnV0ZXMpO1xuXG4gIC8vIGlmIGFycm93RWxlbWVudCBpcyBkZWZpbmVkIGFuZCBhcnJvd1N0eWxlcyBoYXMgc29tZSBwcm9wZXJ0aWVzXG4gIGlmIChkYXRhLmFycm93RWxlbWVudCAmJiBPYmplY3Qua2V5cyhkYXRhLmFycm93U3R5bGVzKS5sZW5ndGgpIHtcbiAgICBzZXRTdHlsZXMoZGF0YS5hcnJvd0VsZW1lbnQsIGRhdGEuYXJyb3dTdHlsZXMpO1xuICB9XG5cbiAgcmV0dXJuIGRhdGE7XG59XG5cbi8qKlxuICogU2V0IHRoZSB4LXBsYWNlbWVudCBhdHRyaWJ1dGUgYmVmb3JlIGV2ZXJ5dGhpbmcgZWxzZSBiZWNhdXNlIGl0IGNvdWxkIGJlIHVzZWRcbiAqIHRvIGFkZCBtYXJnaW5zIHRvIHRoZSBwb3BwZXIgbWFyZ2lucyBuZWVkcyB0byBiZSBjYWxjdWxhdGVkIHRvIGdldCB0aGVcbiAqIGNvcnJlY3QgcG9wcGVyIG9mZnNldHMuXG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLm1vZGlmaWVyc1xuICogQHBhcmFtIHtIVE1MRWxlbWVudH0gcmVmZXJlbmNlIC0gVGhlIHJlZmVyZW5jZSBlbGVtZW50IHVzZWQgdG8gcG9zaXRpb24gdGhlIHBvcHBlclxuICogQHBhcmFtIHtIVE1MRWxlbWVudH0gcG9wcGVyIC0gVGhlIEhUTUwgZWxlbWVudCB1c2VkIGFzIHBvcHBlclxuICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgLSBQb3BwZXIuanMgb3B0aW9uc1xuICovXG5mdW5jdGlvbiBhcHBseVN0eWxlT25Mb2FkKHJlZmVyZW5jZSwgcG9wcGVyLCBvcHRpb25zLCBtb2RpZmllck9wdGlvbnMsIHN0YXRlKSB7XG4gIC8vIGNvbXB1dGUgcmVmZXJlbmNlIGVsZW1lbnQgb2Zmc2V0c1xuICB2YXIgcmVmZXJlbmNlT2Zmc2V0cyA9IGdldFJlZmVyZW5jZU9mZnNldHMoc3RhdGUsIHBvcHBlciwgcmVmZXJlbmNlLCBvcHRpb25zLnBvc2l0aW9uRml4ZWQpO1xuXG4gIC8vIGNvbXB1dGUgYXV0byBwbGFjZW1lbnQsIHN0b3JlIHBsYWNlbWVudCBpbnNpZGUgdGhlIGRhdGEgb2JqZWN0LFxuICAvLyBtb2RpZmllcnMgd2lsbCBiZSBhYmxlIHRvIGVkaXQgYHBsYWNlbWVudGAgaWYgbmVlZGVkXG4gIC8vIGFuZCByZWZlciB0byBvcmlnaW5hbFBsYWNlbWVudCB0byBrbm93IHRoZSBvcmlnaW5hbCB2YWx1ZVxuICB2YXIgcGxhY2VtZW50ID0gY29tcHV0ZUF1dG9QbGFjZW1lbnQob3B0aW9ucy5wbGFjZW1lbnQsIHJlZmVyZW5jZU9mZnNldHMsIHBvcHBlciwgcmVmZXJlbmNlLCBvcHRpb25zLm1vZGlmaWVycy5mbGlwLmJvdW5kYXJpZXNFbGVtZW50LCBvcHRpb25zLm1vZGlmaWVycy5mbGlwLnBhZGRpbmcpO1xuXG4gIHBvcHBlci5zZXRBdHRyaWJ1dGUoJ3gtcGxhY2VtZW50JywgcGxhY2VtZW50KTtcblxuICAvLyBBcHBseSBgcG9zaXRpb25gIHRvIHBvcHBlciBiZWZvcmUgYW55dGhpbmcgZWxzZSBiZWNhdXNlXG4gIC8vIHdpdGhvdXQgdGhlIHBvc2l0aW9uIGFwcGxpZWQgd2UgY2FuJ3QgZ3VhcmFudGVlIGNvcnJlY3QgY29tcHV0YXRpb25zXG4gIHNldFN0eWxlcyhwb3BwZXIsIHsgcG9zaXRpb246IG9wdGlvbnMucG9zaXRpb25GaXhlZCA/ICdmaXhlZCcgOiAnYWJzb2x1dGUnIH0pO1xuXG4gIHJldHVybiBvcHRpb25zO1xufVxuXG4vKipcbiAqIEBmdW5jdGlvblxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQGFyZ3VtZW50IHtPYmplY3R9IGRhdGEgLSBUaGUgZGF0YSBvYmplY3QgZ2VuZXJhdGVkIGJ5IGB1cGRhdGVgIG1ldGhvZFxuICogQGFyZ3VtZW50IHtCb29sZWFufSBzaG91bGRSb3VuZCAtIElmIHRoZSBvZmZzZXRzIHNob3VsZCBiZSByb3VuZGVkIGF0IGFsbFxuICogQHJldHVybnMge09iamVjdH0gVGhlIHBvcHBlcidzIHBvc2l0aW9uIG9mZnNldHMgcm91bmRlZFxuICpcbiAqIFRoZSB0YWxlIG9mIHBpeGVsLXBlcmZlY3QgcG9zaXRpb25pbmcuIEl0J3Mgc3RpbGwgbm90IDEwMCUgcGVyZmVjdCwgYnV0IGFzXG4gKiBnb29kIGFzIGl0IGNhbiBiZSB3aXRoaW4gcmVhc29uLlxuICogRGlzY3Vzc2lvbiBoZXJlOiBodHRwczovL2dpdGh1Yi5jb20vRmV6VnJhc3RhL3BvcHBlci5qcy9wdWxsLzcxNVxuICpcbiAqIExvdyBEUEkgc2NyZWVucyBjYXVzZSBhIHBvcHBlciB0byBiZSBibHVycnkgaWYgbm90IHVzaW5nIGZ1bGwgcGl4ZWxzIChTYWZhcmlcbiAqIGFzIHdlbGwgb24gSGlnaCBEUEkgc2NyZWVucykuXG4gKlxuICogRmlyZWZveCBwcmVmZXJzIG5vIHJvdW5kaW5nIGZvciBwb3NpdGlvbmluZyBhbmQgZG9lcyBub3QgaGF2ZSBibHVycmluZXNzIG9uXG4gKiBoaWdoIERQSSBzY3JlZW5zLlxuICpcbiAqIE9ubHkgaG9yaXpvbnRhbCBwbGFjZW1lbnQgYW5kIGxlZnQvcmlnaHQgdmFsdWVzIG5lZWQgdG8gYmUgY29uc2lkZXJlZC5cbiAqL1xuZnVuY3Rpb24gZ2V0Um91bmRlZE9mZnNldHMoZGF0YSwgc2hvdWxkUm91bmQpIHtcbiAgdmFyIF9kYXRhJG9mZnNldHMgPSBkYXRhLm9mZnNldHMsXG4gICAgICBwb3BwZXIgPSBfZGF0YSRvZmZzZXRzLnBvcHBlcixcbiAgICAgIHJlZmVyZW5jZSA9IF9kYXRhJG9mZnNldHMucmVmZXJlbmNlO1xuICB2YXIgcm91bmQgPSBNYXRoLnJvdW5kLFxuICAgICAgZmxvb3IgPSBNYXRoLmZsb29yO1xuXG4gIHZhciBub1JvdW5kID0gZnVuY3Rpb24gbm9Sb3VuZCh2KSB7XG4gICAgcmV0dXJuIHY7XG4gIH07XG5cbiAgdmFyIHJlZmVyZW5jZVdpZHRoID0gcm91bmQocmVmZXJlbmNlLndpZHRoKTtcbiAgdmFyIHBvcHBlcldpZHRoID0gcm91bmQocG9wcGVyLndpZHRoKTtcblxuICB2YXIgaXNWZXJ0aWNhbCA9IFsnbGVmdCcsICdyaWdodCddLmluZGV4T2YoZGF0YS5wbGFjZW1lbnQpICE9PSAtMTtcbiAgdmFyIGlzVmFyaWF0aW9uID0gZGF0YS5wbGFjZW1lbnQuaW5kZXhPZignLScpICE9PSAtMTtcbiAgdmFyIHNhbWVXaWR0aFBhcml0eSA9IHJlZmVyZW5jZVdpZHRoICUgMiA9PT0gcG9wcGVyV2lkdGggJSAyO1xuICB2YXIgYm90aE9kZFdpZHRoID0gcmVmZXJlbmNlV2lkdGggJSAyID09PSAxICYmIHBvcHBlcldpZHRoICUgMiA9PT0gMTtcblxuICB2YXIgaG9yaXpvbnRhbFRvSW50ZWdlciA9ICFzaG91bGRSb3VuZCA/IG5vUm91bmQgOiBpc1ZlcnRpY2FsIHx8IGlzVmFyaWF0aW9uIHx8IHNhbWVXaWR0aFBhcml0eSA/IHJvdW5kIDogZmxvb3I7XG4gIHZhciB2ZXJ0aWNhbFRvSW50ZWdlciA9ICFzaG91bGRSb3VuZCA/IG5vUm91bmQgOiByb3VuZDtcblxuICByZXR1cm4ge1xuICAgIGxlZnQ6IGhvcml6b250YWxUb0ludGVnZXIoYm90aE9kZFdpZHRoICYmICFpc1ZhcmlhdGlvbiAmJiBzaG91bGRSb3VuZCA/IHBvcHBlci5sZWZ0IC0gMSA6IHBvcHBlci5sZWZ0KSxcbiAgICB0b3A6IHZlcnRpY2FsVG9JbnRlZ2VyKHBvcHBlci50b3ApLFxuICAgIGJvdHRvbTogdmVydGljYWxUb0ludGVnZXIocG9wcGVyLmJvdHRvbSksXG4gICAgcmlnaHQ6IGhvcml6b250YWxUb0ludGVnZXIocG9wcGVyLnJpZ2h0KVxuICB9O1xufVxuXG52YXIgaXNGaXJlZm94ID0gaXNCcm93c2VyICYmIC9GaXJlZm94L2kudGVzdChuYXZpZ2F0b3IudXNlckFnZW50KTtcblxuLyoqXG4gKiBAZnVuY3Rpb25cbiAqIEBtZW1iZXJvZiBNb2RpZmllcnNcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBkYXRhIC0gVGhlIGRhdGEgb2JqZWN0IGdlbmVyYXRlZCBieSBgdXBkYXRlYCBtZXRob2RcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBvcHRpb25zIC0gTW9kaWZpZXJzIGNvbmZpZ3VyYXRpb24gYW5kIG9wdGlvbnNcbiAqIEByZXR1cm5zIHtPYmplY3R9IFRoZSBkYXRhIG9iamVjdCwgcHJvcGVybHkgbW9kaWZpZWRcbiAqL1xuZnVuY3Rpb24gY29tcHV0ZVN0eWxlKGRhdGEsIG9wdGlvbnMpIHtcbiAgdmFyIHggPSBvcHRpb25zLngsXG4gICAgICB5ID0gb3B0aW9ucy55O1xuICB2YXIgcG9wcGVyID0gZGF0YS5vZmZzZXRzLnBvcHBlcjtcblxuICAvLyBSZW1vdmUgdGhpcyBsZWdhY3kgc3VwcG9ydCBpbiBQb3BwZXIuanMgdjJcblxuICB2YXIgbGVnYWN5R3B1QWNjZWxlcmF0aW9uT3B0aW9uID0gZmluZChkYXRhLmluc3RhbmNlLm1vZGlmaWVycywgZnVuY3Rpb24gKG1vZGlmaWVyKSB7XG4gICAgcmV0dXJuIG1vZGlmaWVyLm5hbWUgPT09ICdhcHBseVN0eWxlJztcbiAgfSkuZ3B1QWNjZWxlcmF0aW9uO1xuICBpZiAobGVnYWN5R3B1QWNjZWxlcmF0aW9uT3B0aW9uICE9PSB1bmRlZmluZWQpIHtcbiAgICBjb25zb2xlLndhcm4oJ1dBUk5JTkc6IGBncHVBY2NlbGVyYXRpb25gIG9wdGlvbiBtb3ZlZCB0byBgY29tcHV0ZVN0eWxlYCBtb2RpZmllciBhbmQgd2lsbCBub3QgYmUgc3VwcG9ydGVkIGluIGZ1dHVyZSB2ZXJzaW9ucyBvZiBQb3BwZXIuanMhJyk7XG4gIH1cbiAgdmFyIGdwdUFjY2VsZXJhdGlvbiA9IGxlZ2FjeUdwdUFjY2VsZXJhdGlvbk9wdGlvbiAhPT0gdW5kZWZpbmVkID8gbGVnYWN5R3B1QWNjZWxlcmF0aW9uT3B0aW9uIDogb3B0aW9ucy5ncHVBY2NlbGVyYXRpb247XG5cbiAgdmFyIG9mZnNldFBhcmVudCA9IGdldE9mZnNldFBhcmVudChkYXRhLmluc3RhbmNlLnBvcHBlcik7XG4gIHZhciBvZmZzZXRQYXJlbnRSZWN0ID0gZ2V0Qm91bmRpbmdDbGllbnRSZWN0KG9mZnNldFBhcmVudCk7XG5cbiAgLy8gU3R5bGVzXG4gIHZhciBzdHlsZXMgPSB7XG4gICAgcG9zaXRpb246IHBvcHBlci5wb3NpdGlvblxuICB9O1xuXG4gIHZhciBvZmZzZXRzID0gZ2V0Um91bmRlZE9mZnNldHMoZGF0YSwgd2luZG93LmRldmljZVBpeGVsUmF0aW8gPCAyIHx8ICFpc0ZpcmVmb3gpO1xuXG4gIHZhciBzaWRlQSA9IHggPT09ICdib3R0b20nID8gJ3RvcCcgOiAnYm90dG9tJztcbiAgdmFyIHNpZGVCID0geSA9PT0gJ3JpZ2h0JyA/ICdsZWZ0JyA6ICdyaWdodCc7XG5cbiAgLy8gaWYgZ3B1QWNjZWxlcmF0aW9uIGlzIHNldCB0byBgdHJ1ZWAgYW5kIHRyYW5zZm9ybSBpcyBzdXBwb3J0ZWQsXG4gIC8vICB3ZSB1c2UgYHRyYW5zbGF0ZTNkYCB0byBhcHBseSB0aGUgcG9zaXRpb24gdG8gdGhlIHBvcHBlciB3ZVxuICAvLyBhdXRvbWF0aWNhbGx5IHVzZSB0aGUgc3VwcG9ydGVkIHByZWZpeGVkIHZlcnNpb24gaWYgbmVlZGVkXG4gIHZhciBwcmVmaXhlZFByb3BlcnR5ID0gZ2V0U3VwcG9ydGVkUHJvcGVydHlOYW1lKCd0cmFuc2Zvcm0nKTtcblxuICAvLyBub3csIGxldCdzIG1ha2UgYSBzdGVwIGJhY2sgYW5kIGxvb2sgYXQgdGhpcyBjb2RlIGNsb3NlbHkgKHd0Zj8pXG4gIC8vIElmIHRoZSBjb250ZW50IG9mIHRoZSBwb3BwZXIgZ3Jvd3Mgb25jZSBpdCdzIGJlZW4gcG9zaXRpb25lZCwgaXRcbiAgLy8gbWF5IGhhcHBlbiB0aGF0IHRoZSBwb3BwZXIgZ2V0cyBtaXNwbGFjZWQgYmVjYXVzZSBvZiB0aGUgbmV3IGNvbnRlbnRcbiAgLy8gb3ZlcmZsb3dpbmcgaXRzIHJlZmVyZW5jZSBlbGVtZW50XG4gIC8vIFRvIGF2b2lkIHRoaXMgcHJvYmxlbSwgd2UgcHJvdmlkZSB0d28gb3B0aW9ucyAoeCBhbmQgeSksIHdoaWNoIGFsbG93XG4gIC8vIHRoZSBjb25zdW1lciB0byBkZWZpbmUgdGhlIG9mZnNldCBvcmlnaW4uXG4gIC8vIElmIHdlIHBvc2l0aW9uIGEgcG9wcGVyIG9uIHRvcCBvZiBhIHJlZmVyZW5jZSBlbGVtZW50LCB3ZSBjYW4gc2V0XG4gIC8vIGB4YCB0byBgdG9wYCB0byBtYWtlIHRoZSBwb3BwZXIgZ3JvdyB0b3dhcmRzIGl0cyB0b3AgaW5zdGVhZCBvZlxuICAvLyBpdHMgYm90dG9tLlxuICB2YXIgbGVmdCA9IHZvaWQgMCxcbiAgICAgIHRvcCA9IHZvaWQgMDtcbiAgaWYgKHNpZGVBID09PSAnYm90dG9tJykge1xuICAgIC8vIHdoZW4gb2Zmc2V0UGFyZW50IGlzIDxodG1sPiB0aGUgcG9zaXRpb25pbmcgaXMgcmVsYXRpdmUgdG8gdGhlIGJvdHRvbSBvZiB0aGUgc2NyZWVuIChleGNsdWRpbmcgdGhlIHNjcm9sbGJhcilcbiAgICAvLyBhbmQgbm90IHRoZSBib3R0b20gb2YgdGhlIGh0bWwgZWxlbWVudFxuICAgIGlmIChvZmZzZXRQYXJlbnQubm9kZU5hbWUgPT09ICdIVE1MJykge1xuICAgICAgdG9wID0gLW9mZnNldFBhcmVudC5jbGllbnRIZWlnaHQgKyBvZmZzZXRzLmJvdHRvbTtcbiAgICB9IGVsc2Uge1xuICAgICAgdG9wID0gLW9mZnNldFBhcmVudFJlY3QuaGVpZ2h0ICsgb2Zmc2V0cy5ib3R0b207XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHRvcCA9IG9mZnNldHMudG9wO1xuICB9XG4gIGlmIChzaWRlQiA9PT0gJ3JpZ2h0Jykge1xuICAgIGlmIChvZmZzZXRQYXJlbnQubm9kZU5hbWUgPT09ICdIVE1MJykge1xuICAgICAgbGVmdCA9IC1vZmZzZXRQYXJlbnQuY2xpZW50V2lkdGggKyBvZmZzZXRzLnJpZ2h0O1xuICAgIH0gZWxzZSB7XG4gICAgICBsZWZ0ID0gLW9mZnNldFBhcmVudFJlY3Qud2lkdGggKyBvZmZzZXRzLnJpZ2h0O1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBsZWZ0ID0gb2Zmc2V0cy5sZWZ0O1xuICB9XG4gIGlmIChncHVBY2NlbGVyYXRpb24gJiYgcHJlZml4ZWRQcm9wZXJ0eSkge1xuICAgIHN0eWxlc1twcmVmaXhlZFByb3BlcnR5XSA9ICd0cmFuc2xhdGUzZCgnICsgbGVmdCArICdweCwgJyArIHRvcCArICdweCwgMCknO1xuICAgIHN0eWxlc1tzaWRlQV0gPSAwO1xuICAgIHN0eWxlc1tzaWRlQl0gPSAwO1xuICAgIHN0eWxlcy53aWxsQ2hhbmdlID0gJ3RyYW5zZm9ybSc7XG4gIH0gZWxzZSB7XG4gICAgLy8gb3Rod2VyaXNlLCB3ZSB1c2UgdGhlIHN0YW5kYXJkIGB0b3BgLCBgbGVmdGAsIGBib3R0b21gIGFuZCBgcmlnaHRgIHByb3BlcnRpZXNcbiAgICB2YXIgaW52ZXJ0VG9wID0gc2lkZUEgPT09ICdib3R0b20nID8gLTEgOiAxO1xuICAgIHZhciBpbnZlcnRMZWZ0ID0gc2lkZUIgPT09ICdyaWdodCcgPyAtMSA6IDE7XG4gICAgc3R5bGVzW3NpZGVBXSA9IHRvcCAqIGludmVydFRvcDtcbiAgICBzdHlsZXNbc2lkZUJdID0gbGVmdCAqIGludmVydExlZnQ7XG4gICAgc3R5bGVzLndpbGxDaGFuZ2UgPSBzaWRlQSArICcsICcgKyBzaWRlQjtcbiAgfVxuXG4gIC8vIEF0dHJpYnV0ZXNcbiAgdmFyIGF0dHJpYnV0ZXMgPSB7XG4gICAgJ3gtcGxhY2VtZW50JzogZGF0YS5wbGFjZW1lbnRcbiAgfTtcblxuICAvLyBVcGRhdGUgYGRhdGFgIGF0dHJpYnV0ZXMsIHN0eWxlcyBhbmQgYXJyb3dTdHlsZXNcbiAgZGF0YS5hdHRyaWJ1dGVzID0gX2V4dGVuZHMoe30sIGF0dHJpYnV0ZXMsIGRhdGEuYXR0cmlidXRlcyk7XG4gIGRhdGEuc3R5bGVzID0gX2V4dGVuZHMoe30sIHN0eWxlcywgZGF0YS5zdHlsZXMpO1xuICBkYXRhLmFycm93U3R5bGVzID0gX2V4dGVuZHMoe30sIGRhdGEub2Zmc2V0cy5hcnJvdywgZGF0YS5hcnJvd1N0eWxlcyk7XG5cbiAgcmV0dXJuIGRhdGE7XG59XG5cbi8qKlxuICogSGVscGVyIHVzZWQgdG8ga25vdyBpZiB0aGUgZ2l2ZW4gbW9kaWZpZXIgZGVwZW5kcyBmcm9tIGFub3RoZXIgb25lLjxiciAvPlxuICogSXQgY2hlY2tzIGlmIHRoZSBuZWVkZWQgbW9kaWZpZXIgaXMgbGlzdGVkIGFuZCBlbmFibGVkLlxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQHBhcmFtIHtBcnJheX0gbW9kaWZpZXJzIC0gbGlzdCBvZiBtb2RpZmllcnNcbiAqIEBwYXJhbSB7U3RyaW5nfSByZXF1ZXN0aW5nTmFtZSAtIG5hbWUgb2YgcmVxdWVzdGluZyBtb2RpZmllclxuICogQHBhcmFtIHtTdHJpbmd9IHJlcXVlc3RlZE5hbWUgLSBuYW1lIG9mIHJlcXVlc3RlZCBtb2RpZmllclxuICogQHJldHVybnMge0Jvb2xlYW59XG4gKi9cbmZ1bmN0aW9uIGlzTW9kaWZpZXJSZXF1aXJlZChtb2RpZmllcnMsIHJlcXVlc3RpbmdOYW1lLCByZXF1ZXN0ZWROYW1lKSB7XG4gIHZhciByZXF1ZXN0aW5nID0gZmluZChtb2RpZmllcnMsIGZ1bmN0aW9uIChfcmVmKSB7XG4gICAgdmFyIG5hbWUgPSBfcmVmLm5hbWU7XG4gICAgcmV0dXJuIG5hbWUgPT09IHJlcXVlc3RpbmdOYW1lO1xuICB9KTtcblxuICB2YXIgaXNSZXF1aXJlZCA9ICEhcmVxdWVzdGluZyAmJiBtb2RpZmllcnMuc29tZShmdW5jdGlvbiAobW9kaWZpZXIpIHtcbiAgICByZXR1cm4gbW9kaWZpZXIubmFtZSA9PT0gcmVxdWVzdGVkTmFtZSAmJiBtb2RpZmllci5lbmFibGVkICYmIG1vZGlmaWVyLm9yZGVyIDwgcmVxdWVzdGluZy5vcmRlcjtcbiAgfSk7XG5cbiAgaWYgKCFpc1JlcXVpcmVkKSB7XG4gICAgdmFyIF9yZXF1ZXN0aW5nID0gJ2AnICsgcmVxdWVzdGluZ05hbWUgKyAnYCc7XG4gICAgdmFyIHJlcXVlc3RlZCA9ICdgJyArIHJlcXVlc3RlZE5hbWUgKyAnYCc7XG4gICAgY29uc29sZS53YXJuKHJlcXVlc3RlZCArICcgbW9kaWZpZXIgaXMgcmVxdWlyZWQgYnkgJyArIF9yZXF1ZXN0aW5nICsgJyBtb2RpZmllciBpbiBvcmRlciB0byB3b3JrLCBiZSBzdXJlIHRvIGluY2x1ZGUgaXQgYmVmb3JlICcgKyBfcmVxdWVzdGluZyArICchJyk7XG4gIH1cbiAgcmV0dXJuIGlzUmVxdWlyZWQ7XG59XG5cbi8qKlxuICogQGZ1bmN0aW9uXG4gKiBAbWVtYmVyb2YgTW9kaWZpZXJzXG4gKiBAYXJndW1lbnQge09iamVjdH0gZGF0YSAtIFRoZSBkYXRhIG9iamVjdCBnZW5lcmF0ZWQgYnkgdXBkYXRlIG1ldGhvZFxuICogQGFyZ3VtZW50IHtPYmplY3R9IG9wdGlvbnMgLSBNb2RpZmllcnMgY29uZmlndXJhdGlvbiBhbmQgb3B0aW9uc1xuICogQHJldHVybnMge09iamVjdH0gVGhlIGRhdGEgb2JqZWN0LCBwcm9wZXJseSBtb2RpZmllZFxuICovXG5mdW5jdGlvbiBhcnJvdyhkYXRhLCBvcHRpb25zKSB7XG4gIHZhciBfZGF0YSRvZmZzZXRzJGFycm93O1xuXG4gIC8vIGFycm93IGRlcGVuZHMgb24ga2VlcFRvZ2V0aGVyIGluIG9yZGVyIHRvIHdvcmtcbiAgaWYgKCFpc01vZGlmaWVyUmVxdWlyZWQoZGF0YS5pbnN0YW5jZS5tb2RpZmllcnMsICdhcnJvdycsICdrZWVwVG9nZXRoZXInKSkge1xuICAgIHJldHVybiBkYXRhO1xuICB9XG5cbiAgdmFyIGFycm93RWxlbWVudCA9IG9wdGlvbnMuZWxlbWVudDtcblxuICAvLyBpZiBhcnJvd0VsZW1lbnQgaXMgYSBzdHJpbmcsIHN1cHBvc2UgaXQncyBhIENTUyBzZWxlY3RvclxuICBpZiAodHlwZW9mIGFycm93RWxlbWVudCA9PT0gJ3N0cmluZycpIHtcbiAgICBhcnJvd0VsZW1lbnQgPSBkYXRhLmluc3RhbmNlLnBvcHBlci5xdWVyeVNlbGVjdG9yKGFycm93RWxlbWVudCk7XG5cbiAgICAvLyBpZiBhcnJvd0VsZW1lbnQgaXMgbm90IGZvdW5kLCBkb24ndCBydW4gdGhlIG1vZGlmaWVyXG4gICAgaWYgKCFhcnJvd0VsZW1lbnQpIHtcbiAgICAgIHJldHVybiBkYXRhO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICAvLyBpZiB0aGUgYXJyb3dFbGVtZW50IGlzbid0IGEgcXVlcnkgc2VsZWN0b3Igd2UgbXVzdCBjaGVjayB0aGF0IHRoZVxuICAgIC8vIHByb3ZpZGVkIERPTSBub2RlIGlzIGNoaWxkIG9mIGl0cyBwb3BwZXIgbm9kZVxuICAgIGlmICghZGF0YS5pbnN0YW5jZS5wb3BwZXIuY29udGFpbnMoYXJyb3dFbGVtZW50KSkge1xuICAgICAgY29uc29sZS53YXJuKCdXQVJOSU5HOiBgYXJyb3cuZWxlbWVudGAgbXVzdCBiZSBjaGlsZCBvZiBpdHMgcG9wcGVyIGVsZW1lbnQhJyk7XG4gICAgICByZXR1cm4gZGF0YTtcbiAgICB9XG4gIH1cblxuICB2YXIgcGxhY2VtZW50ID0gZGF0YS5wbGFjZW1lbnQuc3BsaXQoJy0nKVswXTtcbiAgdmFyIF9kYXRhJG9mZnNldHMgPSBkYXRhLm9mZnNldHMsXG4gICAgICBwb3BwZXIgPSBfZGF0YSRvZmZzZXRzLnBvcHBlcixcbiAgICAgIHJlZmVyZW5jZSA9IF9kYXRhJG9mZnNldHMucmVmZXJlbmNlO1xuXG4gIHZhciBpc1ZlcnRpY2FsID0gWydsZWZ0JywgJ3JpZ2h0J10uaW5kZXhPZihwbGFjZW1lbnQpICE9PSAtMTtcblxuICB2YXIgbGVuID0gaXNWZXJ0aWNhbCA/ICdoZWlnaHQnIDogJ3dpZHRoJztcbiAgdmFyIHNpZGVDYXBpdGFsaXplZCA9IGlzVmVydGljYWwgPyAnVG9wJyA6ICdMZWZ0JztcbiAgdmFyIHNpZGUgPSBzaWRlQ2FwaXRhbGl6ZWQudG9Mb3dlckNhc2UoKTtcbiAgdmFyIGFsdFNpZGUgPSBpc1ZlcnRpY2FsID8gJ2xlZnQnIDogJ3RvcCc7XG4gIHZhciBvcFNpZGUgPSBpc1ZlcnRpY2FsID8gJ2JvdHRvbScgOiAncmlnaHQnO1xuICB2YXIgYXJyb3dFbGVtZW50U2l6ZSA9IGdldE91dGVyU2l6ZXMoYXJyb3dFbGVtZW50KVtsZW5dO1xuXG4gIC8vXG4gIC8vIGV4dGVuZHMga2VlcFRvZ2V0aGVyIGJlaGF2aW9yIG1ha2luZyBzdXJlIHRoZSBwb3BwZXIgYW5kIGl0c1xuICAvLyByZWZlcmVuY2UgaGF2ZSBlbm91Z2ggcGl4ZWxzIGluIGNvbmp1bmN0aW9uXG4gIC8vXG5cbiAgLy8gdG9wL2xlZnQgc2lkZVxuICBpZiAocmVmZXJlbmNlW29wU2lkZV0gLSBhcnJvd0VsZW1lbnRTaXplIDwgcG9wcGVyW3NpZGVdKSB7XG4gICAgZGF0YS5vZmZzZXRzLnBvcHBlcltzaWRlXSAtPSBwb3BwZXJbc2lkZV0gLSAocmVmZXJlbmNlW29wU2lkZV0gLSBhcnJvd0VsZW1lbnRTaXplKTtcbiAgfVxuICAvLyBib3R0b20vcmlnaHQgc2lkZVxuICBpZiAocmVmZXJlbmNlW3NpZGVdICsgYXJyb3dFbGVtZW50U2l6ZSA+IHBvcHBlcltvcFNpZGVdKSB7XG4gICAgZGF0YS5vZmZzZXRzLnBvcHBlcltzaWRlXSArPSByZWZlcmVuY2Vbc2lkZV0gKyBhcnJvd0VsZW1lbnRTaXplIC0gcG9wcGVyW29wU2lkZV07XG4gIH1cbiAgZGF0YS5vZmZzZXRzLnBvcHBlciA9IGdldENsaWVudFJlY3QoZGF0YS5vZmZzZXRzLnBvcHBlcik7XG5cbiAgLy8gY29tcHV0ZSBjZW50ZXIgb2YgdGhlIHBvcHBlclxuICB2YXIgY2VudGVyID0gcmVmZXJlbmNlW3NpZGVdICsgcmVmZXJlbmNlW2xlbl0gLyAyIC0gYXJyb3dFbGVtZW50U2l6ZSAvIDI7XG5cbiAgLy8gQ29tcHV0ZSB0aGUgc2lkZVZhbHVlIHVzaW5nIHRoZSB1cGRhdGVkIHBvcHBlciBvZmZzZXRzXG4gIC8vIHRha2UgcG9wcGVyIG1hcmdpbiBpbiBhY2NvdW50IGJlY2F1c2Ugd2UgZG9uJ3QgaGF2ZSB0aGlzIGluZm8gYXZhaWxhYmxlXG4gIHZhciBjc3MgPSBnZXRTdHlsZUNvbXB1dGVkUHJvcGVydHkoZGF0YS5pbnN0YW5jZS5wb3BwZXIpO1xuICB2YXIgcG9wcGVyTWFyZ2luU2lkZSA9IHBhcnNlRmxvYXQoY3NzWydtYXJnaW4nICsgc2lkZUNhcGl0YWxpemVkXSk7XG4gIHZhciBwb3BwZXJCb3JkZXJTaWRlID0gcGFyc2VGbG9hdChjc3NbJ2JvcmRlcicgKyBzaWRlQ2FwaXRhbGl6ZWQgKyAnV2lkdGgnXSk7XG4gIHZhciBzaWRlVmFsdWUgPSBjZW50ZXIgLSBkYXRhLm9mZnNldHMucG9wcGVyW3NpZGVdIC0gcG9wcGVyTWFyZ2luU2lkZSAtIHBvcHBlckJvcmRlclNpZGU7XG5cbiAgLy8gcHJldmVudCBhcnJvd0VsZW1lbnQgZnJvbSBiZWluZyBwbGFjZWQgbm90IGNvbnRpZ3VvdXNseSB0byBpdHMgcG9wcGVyXG4gIHNpZGVWYWx1ZSA9IE1hdGgubWF4KE1hdGgubWluKHBvcHBlcltsZW5dIC0gYXJyb3dFbGVtZW50U2l6ZSwgc2lkZVZhbHVlKSwgMCk7XG5cbiAgZGF0YS5hcnJvd0VsZW1lbnQgPSBhcnJvd0VsZW1lbnQ7XG4gIGRhdGEub2Zmc2V0cy5hcnJvdyA9IChfZGF0YSRvZmZzZXRzJGFycm93ID0ge30sIGRlZmluZVByb3BlcnR5KF9kYXRhJG9mZnNldHMkYXJyb3csIHNpZGUsIE1hdGgucm91bmQoc2lkZVZhbHVlKSksIGRlZmluZVByb3BlcnR5KF9kYXRhJG9mZnNldHMkYXJyb3csIGFsdFNpZGUsICcnKSwgX2RhdGEkb2Zmc2V0cyRhcnJvdyk7XG5cbiAgcmV0dXJuIGRhdGE7XG59XG5cbi8qKlxuICogR2V0IHRoZSBvcHBvc2l0ZSBwbGFjZW1lbnQgdmFyaWF0aW9uIG9mIHRoZSBnaXZlbiBvbmVcbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBhcmd1bWVudCB7U3RyaW5nfSBwbGFjZW1lbnQgdmFyaWF0aW9uXG4gKiBAcmV0dXJucyB7U3RyaW5nfSBmbGlwcGVkIHBsYWNlbWVudCB2YXJpYXRpb25cbiAqL1xuZnVuY3Rpb24gZ2V0T3Bwb3NpdGVWYXJpYXRpb24odmFyaWF0aW9uKSB7XG4gIGlmICh2YXJpYXRpb24gPT09ICdlbmQnKSB7XG4gICAgcmV0dXJuICdzdGFydCc7XG4gIH0gZWxzZSBpZiAodmFyaWF0aW9uID09PSAnc3RhcnQnKSB7XG4gICAgcmV0dXJuICdlbmQnO1xuICB9XG4gIHJldHVybiB2YXJpYXRpb247XG59XG5cbi8qKlxuICogTGlzdCBvZiBhY2NlcHRlZCBwbGFjZW1lbnRzIHRvIHVzZSBhcyB2YWx1ZXMgb2YgdGhlIGBwbGFjZW1lbnRgIG9wdGlvbi48YnIgLz5cbiAqIFZhbGlkIHBsYWNlbWVudHMgYXJlOlxuICogLSBgYXV0b2BcbiAqIC0gYHRvcGBcbiAqIC0gYHJpZ2h0YFxuICogLSBgYm90dG9tYFxuICogLSBgbGVmdGBcbiAqXG4gKiBFYWNoIHBsYWNlbWVudCBjYW4gaGF2ZSBhIHZhcmlhdGlvbiBmcm9tIHRoaXMgbGlzdDpcbiAqIC0gYC1zdGFydGBcbiAqIC0gYC1lbmRgXG4gKlxuICogVmFyaWF0aW9ucyBhcmUgaW50ZXJwcmV0ZWQgZWFzaWx5IGlmIHlvdSB0aGluayBvZiB0aGVtIGFzIHRoZSBsZWZ0IHRvIHJpZ2h0XG4gKiB3cml0dGVuIGxhbmd1YWdlcy4gSG9yaXpvbnRhbGx5IChgdG9wYCBhbmQgYGJvdHRvbWApLCBgc3RhcnRgIGlzIGxlZnQgYW5kIGBlbmRgXG4gKiBpcyByaWdodC48YnIgLz5cbiAqIFZlcnRpY2FsbHkgKGBsZWZ0YCBhbmQgYHJpZ2h0YCksIGBzdGFydGAgaXMgdG9wIGFuZCBgZW5kYCBpcyBib3R0b20uXG4gKlxuICogU29tZSB2YWxpZCBleGFtcGxlcyBhcmU6XG4gKiAtIGB0b3AtZW5kYCAob24gdG9wIG9mIHJlZmVyZW5jZSwgcmlnaHQgYWxpZ25lZClcbiAqIC0gYHJpZ2h0LXN0YXJ0YCAob24gcmlnaHQgb2YgcmVmZXJlbmNlLCB0b3AgYWxpZ25lZClcbiAqIC0gYGJvdHRvbWAgKG9uIGJvdHRvbSwgY2VudGVyZWQpXG4gKiAtIGBhdXRvLWVuZGAgKG9uIHRoZSBzaWRlIHdpdGggbW9yZSBzcGFjZSBhdmFpbGFibGUsIGFsaWdubWVudCBkZXBlbmRzIGJ5IHBsYWNlbWVudClcbiAqXG4gKiBAc3RhdGljXG4gKiBAdHlwZSB7QXJyYXl9XG4gKiBAZW51bSB7U3RyaW5nfVxuICogQHJlYWRvbmx5XG4gKiBAbWV0aG9kIHBsYWNlbWVudHNcbiAqIEBtZW1iZXJvZiBQb3BwZXJcbiAqL1xudmFyIHBsYWNlbWVudHMgPSBbJ2F1dG8tc3RhcnQnLCAnYXV0bycsICdhdXRvLWVuZCcsICd0b3Atc3RhcnQnLCAndG9wJywgJ3RvcC1lbmQnLCAncmlnaHQtc3RhcnQnLCAncmlnaHQnLCAncmlnaHQtZW5kJywgJ2JvdHRvbS1lbmQnLCAnYm90dG9tJywgJ2JvdHRvbS1zdGFydCcsICdsZWZ0LWVuZCcsICdsZWZ0JywgJ2xlZnQtc3RhcnQnXTtcblxuLy8gR2V0IHJpZCBvZiBgYXV0b2AgYGF1dG8tc3RhcnRgIGFuZCBgYXV0by1lbmRgXG52YXIgdmFsaWRQbGFjZW1lbnRzID0gcGxhY2VtZW50cy5zbGljZSgzKTtcblxuLyoqXG4gKiBHaXZlbiBhbiBpbml0aWFsIHBsYWNlbWVudCwgcmV0dXJucyBhbGwgdGhlIHN1YnNlcXVlbnQgcGxhY2VtZW50c1xuICogY2xvY2t3aXNlIChvciBjb3VudGVyLWNsb2Nrd2lzZSkuXG4gKlxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQGFyZ3VtZW50IHtTdHJpbmd9IHBsYWNlbWVudCAtIEEgdmFsaWQgcGxhY2VtZW50IChpdCBhY2NlcHRzIHZhcmlhdGlvbnMpXG4gKiBAYXJndW1lbnQge0Jvb2xlYW59IGNvdW50ZXIgLSBTZXQgdG8gdHJ1ZSB0byB3YWxrIHRoZSBwbGFjZW1lbnRzIGNvdW50ZXJjbG9ja3dpc2VcbiAqIEByZXR1cm5zIHtBcnJheX0gcGxhY2VtZW50cyBpbmNsdWRpbmcgdGhlaXIgdmFyaWF0aW9uc1xuICovXG5mdW5jdGlvbiBjbG9ja3dpc2UocGxhY2VtZW50KSB7XG4gIHZhciBjb3VudGVyID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiBmYWxzZTtcblxuICB2YXIgaW5kZXggPSB2YWxpZFBsYWNlbWVudHMuaW5kZXhPZihwbGFjZW1lbnQpO1xuICB2YXIgYXJyID0gdmFsaWRQbGFjZW1lbnRzLnNsaWNlKGluZGV4ICsgMSkuY29uY2F0KHZhbGlkUGxhY2VtZW50cy5zbGljZSgwLCBpbmRleCkpO1xuICByZXR1cm4gY291bnRlciA/IGFyci5yZXZlcnNlKCkgOiBhcnI7XG59XG5cbnZhciBCRUhBVklPUlMgPSB7XG4gIEZMSVA6ICdmbGlwJyxcbiAgQ0xPQ0tXSVNFOiAnY2xvY2t3aXNlJyxcbiAgQ09VTlRFUkNMT0NLV0lTRTogJ2NvdW50ZXJjbG9ja3dpc2UnXG59O1xuXG4vKipcbiAqIEBmdW5jdGlvblxuICogQG1lbWJlcm9mIE1vZGlmaWVyc1xuICogQGFyZ3VtZW50IHtPYmplY3R9IGRhdGEgLSBUaGUgZGF0YSBvYmplY3QgZ2VuZXJhdGVkIGJ5IHVwZGF0ZSBtZXRob2RcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBvcHRpb25zIC0gTW9kaWZpZXJzIGNvbmZpZ3VyYXRpb24gYW5kIG9wdGlvbnNcbiAqIEByZXR1cm5zIHtPYmplY3R9IFRoZSBkYXRhIG9iamVjdCwgcHJvcGVybHkgbW9kaWZpZWRcbiAqL1xuZnVuY3Rpb24gZmxpcChkYXRhLCBvcHRpb25zKSB7XG4gIC8vIGlmIGBpbm5lcmAgbW9kaWZpZXIgaXMgZW5hYmxlZCwgd2UgY2FuJ3QgdXNlIHRoZSBgZmxpcGAgbW9kaWZpZXJcbiAgaWYgKGlzTW9kaWZpZXJFbmFibGVkKGRhdGEuaW5zdGFuY2UubW9kaWZpZXJzLCAnaW5uZXInKSkge1xuICAgIHJldHVybiBkYXRhO1xuICB9XG5cbiAgaWYgKGRhdGEuZmxpcHBlZCAmJiBkYXRhLnBsYWNlbWVudCA9PT0gZGF0YS5vcmlnaW5hbFBsYWNlbWVudCkge1xuICAgIC8vIHNlZW1zIGxpa2UgZmxpcCBpcyB0cnlpbmcgdG8gbG9vcCwgcHJvYmFibHkgdGhlcmUncyBub3QgZW5vdWdoIHNwYWNlIG9uIGFueSBvZiB0aGUgZmxpcHBhYmxlIHNpZGVzXG4gICAgcmV0dXJuIGRhdGE7XG4gIH1cblxuICB2YXIgYm91bmRhcmllcyA9IGdldEJvdW5kYXJpZXMoZGF0YS5pbnN0YW5jZS5wb3BwZXIsIGRhdGEuaW5zdGFuY2UucmVmZXJlbmNlLCBvcHRpb25zLnBhZGRpbmcsIG9wdGlvbnMuYm91bmRhcmllc0VsZW1lbnQsIGRhdGEucG9zaXRpb25GaXhlZCk7XG5cbiAgdmFyIHBsYWNlbWVudCA9IGRhdGEucGxhY2VtZW50LnNwbGl0KCctJylbMF07XG4gIHZhciBwbGFjZW1lbnRPcHBvc2l0ZSA9IGdldE9wcG9zaXRlUGxhY2VtZW50KHBsYWNlbWVudCk7XG4gIHZhciB2YXJpYXRpb24gPSBkYXRhLnBsYWNlbWVudC5zcGxpdCgnLScpWzFdIHx8ICcnO1xuXG4gIHZhciBmbGlwT3JkZXIgPSBbXTtcblxuICBzd2l0Y2ggKG9wdGlvbnMuYmVoYXZpb3IpIHtcbiAgICBjYXNlIEJFSEFWSU9SUy5GTElQOlxuICAgICAgZmxpcE9yZGVyID0gW3BsYWNlbWVudCwgcGxhY2VtZW50T3Bwb3NpdGVdO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBCRUhBVklPUlMuQ0xPQ0tXSVNFOlxuICAgICAgZmxpcE9yZGVyID0gY2xvY2t3aXNlKHBsYWNlbWVudCk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIEJFSEFWSU9SUy5DT1VOVEVSQ0xPQ0tXSVNFOlxuICAgICAgZmxpcE9yZGVyID0gY2xvY2t3aXNlKHBsYWNlbWVudCwgdHJ1ZSk7XG4gICAgICBicmVhaztcbiAgICBkZWZhdWx0OlxuICAgICAgZmxpcE9yZGVyID0gb3B0aW9ucy5iZWhhdmlvcjtcbiAgfVxuXG4gIGZsaXBPcmRlci5mb3JFYWNoKGZ1bmN0aW9uIChzdGVwLCBpbmRleCkge1xuICAgIGlmIChwbGFjZW1lbnQgIT09IHN0ZXAgfHwgZmxpcE9yZGVyLmxlbmd0aCA9PT0gaW5kZXggKyAxKSB7XG4gICAgICByZXR1cm4gZGF0YTtcbiAgICB9XG5cbiAgICBwbGFjZW1lbnQgPSBkYXRhLnBsYWNlbWVudC5zcGxpdCgnLScpWzBdO1xuICAgIHBsYWNlbWVudE9wcG9zaXRlID0gZ2V0T3Bwb3NpdGVQbGFjZW1lbnQocGxhY2VtZW50KTtcblxuICAgIHZhciBwb3BwZXJPZmZzZXRzID0gZGF0YS5vZmZzZXRzLnBvcHBlcjtcbiAgICB2YXIgcmVmT2Zmc2V0cyA9IGRhdGEub2Zmc2V0cy5yZWZlcmVuY2U7XG5cbiAgICAvLyB1c2luZyBmbG9vciBiZWNhdXNlIHRoZSByZWZlcmVuY2Ugb2Zmc2V0cyBtYXkgY29udGFpbiBkZWNpbWFscyB3ZSBhcmUgbm90IGdvaW5nIHRvIGNvbnNpZGVyIGhlcmVcbiAgICB2YXIgZmxvb3IgPSBNYXRoLmZsb29yO1xuICAgIHZhciBvdmVybGFwc1JlZiA9IHBsYWNlbWVudCA9PT0gJ2xlZnQnICYmIGZsb29yKHBvcHBlck9mZnNldHMucmlnaHQpID4gZmxvb3IocmVmT2Zmc2V0cy5sZWZ0KSB8fCBwbGFjZW1lbnQgPT09ICdyaWdodCcgJiYgZmxvb3IocG9wcGVyT2Zmc2V0cy5sZWZ0KSA8IGZsb29yKHJlZk9mZnNldHMucmlnaHQpIHx8IHBsYWNlbWVudCA9PT0gJ3RvcCcgJiYgZmxvb3IocG9wcGVyT2Zmc2V0cy5ib3R0b20pID4gZmxvb3IocmVmT2Zmc2V0cy50b3ApIHx8IHBsYWNlbWVudCA9PT0gJ2JvdHRvbScgJiYgZmxvb3IocG9wcGVyT2Zmc2V0cy50b3ApIDwgZmxvb3IocmVmT2Zmc2V0cy5ib3R0b20pO1xuXG4gICAgdmFyIG92ZXJmbG93c0xlZnQgPSBmbG9vcihwb3BwZXJPZmZzZXRzLmxlZnQpIDwgZmxvb3IoYm91bmRhcmllcy5sZWZ0KTtcbiAgICB2YXIgb3ZlcmZsb3dzUmlnaHQgPSBmbG9vcihwb3BwZXJPZmZzZXRzLnJpZ2h0KSA+IGZsb29yKGJvdW5kYXJpZXMucmlnaHQpO1xuICAgIHZhciBvdmVyZmxvd3NUb3AgPSBmbG9vcihwb3BwZXJPZmZzZXRzLnRvcCkgPCBmbG9vcihib3VuZGFyaWVzLnRvcCk7XG4gICAgdmFyIG92ZXJmbG93c0JvdHRvbSA9IGZsb29yKHBvcHBlck9mZnNldHMuYm90dG9tKSA+IGZsb29yKGJvdW5kYXJpZXMuYm90dG9tKTtcblxuICAgIHZhciBvdmVyZmxvd3NCb3VuZGFyaWVzID0gcGxhY2VtZW50ID09PSAnbGVmdCcgJiYgb3ZlcmZsb3dzTGVmdCB8fCBwbGFjZW1lbnQgPT09ICdyaWdodCcgJiYgb3ZlcmZsb3dzUmlnaHQgfHwgcGxhY2VtZW50ID09PSAndG9wJyAmJiBvdmVyZmxvd3NUb3AgfHwgcGxhY2VtZW50ID09PSAnYm90dG9tJyAmJiBvdmVyZmxvd3NCb3R0b207XG5cbiAgICAvLyBmbGlwIHRoZSB2YXJpYXRpb24gaWYgcmVxdWlyZWRcbiAgICB2YXIgaXNWZXJ0aWNhbCA9IFsndG9wJywgJ2JvdHRvbSddLmluZGV4T2YocGxhY2VtZW50KSAhPT0gLTE7XG5cbiAgICAvLyBmbGlwcyB2YXJpYXRpb24gaWYgcmVmZXJlbmNlIGVsZW1lbnQgb3ZlcmZsb3dzIGJvdW5kYXJpZXNcbiAgICB2YXIgZmxpcHBlZFZhcmlhdGlvbkJ5UmVmID0gISFvcHRpb25zLmZsaXBWYXJpYXRpb25zICYmIChpc1ZlcnRpY2FsICYmIHZhcmlhdGlvbiA9PT0gJ3N0YXJ0JyAmJiBvdmVyZmxvd3NMZWZ0IHx8IGlzVmVydGljYWwgJiYgdmFyaWF0aW9uID09PSAnZW5kJyAmJiBvdmVyZmxvd3NSaWdodCB8fCAhaXNWZXJ0aWNhbCAmJiB2YXJpYXRpb24gPT09ICdzdGFydCcgJiYgb3ZlcmZsb3dzVG9wIHx8ICFpc1ZlcnRpY2FsICYmIHZhcmlhdGlvbiA9PT0gJ2VuZCcgJiYgb3ZlcmZsb3dzQm90dG9tKTtcblxuICAgIC8vIGZsaXBzIHZhcmlhdGlvbiBpZiBwb3BwZXIgY29udGVudCBvdmVyZmxvd3MgYm91bmRhcmllc1xuICAgIHZhciBmbGlwcGVkVmFyaWF0aW9uQnlDb250ZW50ID0gISFvcHRpb25zLmZsaXBWYXJpYXRpb25zQnlDb250ZW50ICYmIChpc1ZlcnRpY2FsICYmIHZhcmlhdGlvbiA9PT0gJ3N0YXJ0JyAmJiBvdmVyZmxvd3NSaWdodCB8fCBpc1ZlcnRpY2FsICYmIHZhcmlhdGlvbiA9PT0gJ2VuZCcgJiYgb3ZlcmZsb3dzTGVmdCB8fCAhaXNWZXJ0aWNhbCAmJiB2YXJpYXRpb24gPT09ICdzdGFydCcgJiYgb3ZlcmZsb3dzQm90dG9tIHx8ICFpc1ZlcnRpY2FsICYmIHZhcmlhdGlvbiA9PT0gJ2VuZCcgJiYgb3ZlcmZsb3dzVG9wKTtcblxuICAgIHZhciBmbGlwcGVkVmFyaWF0aW9uID0gZmxpcHBlZFZhcmlhdGlvbkJ5UmVmIHx8IGZsaXBwZWRWYXJpYXRpb25CeUNvbnRlbnQ7XG5cbiAgICBpZiAob3ZlcmxhcHNSZWYgfHwgb3ZlcmZsb3dzQm91bmRhcmllcyB8fCBmbGlwcGVkVmFyaWF0aW9uKSB7XG4gICAgICAvLyB0aGlzIGJvb2xlYW4gdG8gZGV0ZWN0IGFueSBmbGlwIGxvb3BcbiAgICAgIGRhdGEuZmxpcHBlZCA9IHRydWU7XG5cbiAgICAgIGlmIChvdmVybGFwc1JlZiB8fCBvdmVyZmxvd3NCb3VuZGFyaWVzKSB7XG4gICAgICAgIHBsYWNlbWVudCA9IGZsaXBPcmRlcltpbmRleCArIDFdO1xuICAgICAgfVxuXG4gICAgICBpZiAoZmxpcHBlZFZhcmlhdGlvbikge1xuICAgICAgICB2YXJpYXRpb24gPSBnZXRPcHBvc2l0ZVZhcmlhdGlvbih2YXJpYXRpb24pO1xuICAgICAgfVxuXG4gICAgICBkYXRhLnBsYWNlbWVudCA9IHBsYWNlbWVudCArICh2YXJpYXRpb24gPyAnLScgKyB2YXJpYXRpb24gOiAnJyk7XG5cbiAgICAgIC8vIHRoaXMgb2JqZWN0IGNvbnRhaW5zIGBwb3NpdGlvbmAsIHdlIHdhbnQgdG8gcHJlc2VydmUgaXQgYWxvbmcgd2l0aFxuICAgICAgLy8gYW55IGFkZGl0aW9uYWwgcHJvcGVydHkgd2UgbWF5IGFkZCBpbiB0aGUgZnV0dXJlXG4gICAgICBkYXRhLm9mZnNldHMucG9wcGVyID0gX2V4dGVuZHMoe30sIGRhdGEub2Zmc2V0cy5wb3BwZXIsIGdldFBvcHBlck9mZnNldHMoZGF0YS5pbnN0YW5jZS5wb3BwZXIsIGRhdGEub2Zmc2V0cy5yZWZlcmVuY2UsIGRhdGEucGxhY2VtZW50KSk7XG5cbiAgICAgIGRhdGEgPSBydW5Nb2RpZmllcnMoZGF0YS5pbnN0YW5jZS5tb2RpZmllcnMsIGRhdGEsICdmbGlwJyk7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIGRhdGE7XG59XG5cbi8qKlxuICogQGZ1bmN0aW9uXG4gKiBAbWVtYmVyb2YgTW9kaWZpZXJzXG4gKiBAYXJndW1lbnQge09iamVjdH0gZGF0YSAtIFRoZSBkYXRhIG9iamVjdCBnZW5lcmF0ZWQgYnkgdXBkYXRlIG1ldGhvZFxuICogQGFyZ3VtZW50IHtPYmplY3R9IG9wdGlvbnMgLSBNb2RpZmllcnMgY29uZmlndXJhdGlvbiBhbmQgb3B0aW9uc1xuICogQHJldHVybnMge09iamVjdH0gVGhlIGRhdGEgb2JqZWN0LCBwcm9wZXJseSBtb2RpZmllZFxuICovXG5mdW5jdGlvbiBrZWVwVG9nZXRoZXIoZGF0YSkge1xuICB2YXIgX2RhdGEkb2Zmc2V0cyA9IGRhdGEub2Zmc2V0cyxcbiAgICAgIHBvcHBlciA9IF9kYXRhJG9mZnNldHMucG9wcGVyLFxuICAgICAgcmVmZXJlbmNlID0gX2RhdGEkb2Zmc2V0cy5yZWZlcmVuY2U7XG5cbiAgdmFyIHBsYWNlbWVudCA9IGRhdGEucGxhY2VtZW50LnNwbGl0KCctJylbMF07XG4gIHZhciBmbG9vciA9IE1hdGguZmxvb3I7XG4gIHZhciBpc1ZlcnRpY2FsID0gWyd0b3AnLCAnYm90dG9tJ10uaW5kZXhPZihwbGFjZW1lbnQpICE9PSAtMTtcbiAgdmFyIHNpZGUgPSBpc1ZlcnRpY2FsID8gJ3JpZ2h0JyA6ICdib3R0b20nO1xuICB2YXIgb3BTaWRlID0gaXNWZXJ0aWNhbCA/ICdsZWZ0JyA6ICd0b3AnO1xuICB2YXIgbWVhc3VyZW1lbnQgPSBpc1ZlcnRpY2FsID8gJ3dpZHRoJyA6ICdoZWlnaHQnO1xuXG4gIGlmIChwb3BwZXJbc2lkZV0gPCBmbG9vcihyZWZlcmVuY2Vbb3BTaWRlXSkpIHtcbiAgICBkYXRhLm9mZnNldHMucG9wcGVyW29wU2lkZV0gPSBmbG9vcihyZWZlcmVuY2Vbb3BTaWRlXSkgLSBwb3BwZXJbbWVhc3VyZW1lbnRdO1xuICB9XG4gIGlmIChwb3BwZXJbb3BTaWRlXSA+IGZsb29yKHJlZmVyZW5jZVtzaWRlXSkpIHtcbiAgICBkYXRhLm9mZnNldHMucG9wcGVyW29wU2lkZV0gPSBmbG9vcihyZWZlcmVuY2Vbc2lkZV0pO1xuICB9XG5cbiAgcmV0dXJuIGRhdGE7XG59XG5cbi8qKlxuICogQ29udmVydHMgYSBzdHJpbmcgY29udGFpbmluZyB2YWx1ZSArIHVuaXQgaW50byBhIHB4IHZhbHVlIG51bWJlclxuICogQGZ1bmN0aW9uXG4gKiBAbWVtYmVyb2Yge21vZGlmaWVyc35vZmZzZXR9XG4gKiBAcHJpdmF0ZVxuICogQGFyZ3VtZW50IHtTdHJpbmd9IHN0ciAtIFZhbHVlICsgdW5pdCBzdHJpbmdcbiAqIEBhcmd1bWVudCB7U3RyaW5nfSBtZWFzdXJlbWVudCAtIGBoZWlnaHRgIG9yIGB3aWR0aGBcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBwb3BwZXJPZmZzZXRzXG4gKiBAYXJndW1lbnQge09iamVjdH0gcmVmZXJlbmNlT2Zmc2V0c1xuICogQHJldHVybnMge051bWJlcnxTdHJpbmd9XG4gKiBWYWx1ZSBpbiBwaXhlbHMsIG9yIG9yaWdpbmFsIHN0cmluZyBpZiBubyB2YWx1ZXMgd2VyZSBleHRyYWN0ZWRcbiAqL1xuZnVuY3Rpb24gdG9WYWx1ZShzdHIsIG1lYXN1cmVtZW50LCBwb3BwZXJPZmZzZXRzLCByZWZlcmVuY2VPZmZzZXRzKSB7XG4gIC8vIHNlcGFyYXRlIHZhbHVlIGZyb20gdW5pdFxuICB2YXIgc3BsaXQgPSBzdHIubWF0Y2goLygoPzpcXC18XFwrKT9cXGQqXFwuP1xcZCopKC4qKS8pO1xuICB2YXIgdmFsdWUgPSArc3BsaXRbMV07XG4gIHZhciB1bml0ID0gc3BsaXRbMl07XG5cbiAgLy8gSWYgaXQncyBub3QgYSBudW1iZXIgaXQncyBhbiBvcGVyYXRvciwgSSBndWVzc1xuICBpZiAoIXZhbHVlKSB7XG4gICAgcmV0dXJuIHN0cjtcbiAgfVxuXG4gIGlmICh1bml0LmluZGV4T2YoJyUnKSA9PT0gMCkge1xuICAgIHZhciBlbGVtZW50ID0gdm9pZCAwO1xuICAgIHN3aXRjaCAodW5pdCkge1xuICAgICAgY2FzZSAnJXAnOlxuICAgICAgICBlbGVtZW50ID0gcG9wcGVyT2Zmc2V0cztcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICclJzpcbiAgICAgIGNhc2UgJyVyJzpcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGVsZW1lbnQgPSByZWZlcmVuY2VPZmZzZXRzO1xuICAgIH1cblxuICAgIHZhciByZWN0ID0gZ2V0Q2xpZW50UmVjdChlbGVtZW50KTtcbiAgICByZXR1cm4gcmVjdFttZWFzdXJlbWVudF0gLyAxMDAgKiB2YWx1ZTtcbiAgfSBlbHNlIGlmICh1bml0ID09PSAndmgnIHx8IHVuaXQgPT09ICd2dycpIHtcbiAgICAvLyBpZiBpcyBhIHZoIG9yIHZ3LCB3ZSBjYWxjdWxhdGUgdGhlIHNpemUgYmFzZWQgb24gdGhlIHZpZXdwb3J0XG4gICAgdmFyIHNpemUgPSB2b2lkIDA7XG4gICAgaWYgKHVuaXQgPT09ICd2aCcpIHtcbiAgICAgIHNpemUgPSBNYXRoLm1heChkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xpZW50SGVpZ2h0LCB3aW5kb3cuaW5uZXJIZWlnaHQgfHwgMCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHNpemUgPSBNYXRoLm1heChkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xpZW50V2lkdGgsIHdpbmRvdy5pbm5lcldpZHRoIHx8IDApO1xuICAgIH1cbiAgICByZXR1cm4gc2l6ZSAvIDEwMCAqIHZhbHVlO1xuICB9IGVsc2Uge1xuICAgIC8vIGlmIGlzIGFuIGV4cGxpY2l0IHBpeGVsIHVuaXQsIHdlIGdldCByaWQgb2YgdGhlIHVuaXQgYW5kIGtlZXAgdGhlIHZhbHVlXG4gICAgLy8gaWYgaXMgYW4gaW1wbGljaXQgdW5pdCwgaXQncyBweCwgYW5kIHdlIHJldHVybiBqdXN0IHRoZSB2YWx1ZVxuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxufVxuXG4vKipcbiAqIFBhcnNlIGFuIGBvZmZzZXRgIHN0cmluZyB0byBleHRyYXBvbGF0ZSBgeGAgYW5kIGB5YCBudW1lcmljIG9mZnNldHMuXG4gKiBAZnVuY3Rpb25cbiAqIEBtZW1iZXJvZiB7bW9kaWZpZXJzfm9mZnNldH1cbiAqIEBwcml2YXRlXG4gKiBAYXJndW1lbnQge1N0cmluZ30gb2Zmc2V0XG4gKiBAYXJndW1lbnQge09iamVjdH0gcG9wcGVyT2Zmc2V0c1xuICogQGFyZ3VtZW50IHtPYmplY3R9IHJlZmVyZW5jZU9mZnNldHNcbiAqIEBhcmd1bWVudCB7U3RyaW5nfSBiYXNlUGxhY2VtZW50XG4gKiBAcmV0dXJucyB7QXJyYXl9IGEgdHdvIGNlbGxzIGFycmF5IHdpdGggeCBhbmQgeSBvZmZzZXRzIGluIG51bWJlcnNcbiAqL1xuZnVuY3Rpb24gcGFyc2VPZmZzZXQob2Zmc2V0LCBwb3BwZXJPZmZzZXRzLCByZWZlcmVuY2VPZmZzZXRzLCBiYXNlUGxhY2VtZW50KSB7XG4gIHZhciBvZmZzZXRzID0gWzAsIDBdO1xuXG4gIC8vIFVzZSBoZWlnaHQgaWYgcGxhY2VtZW50IGlzIGxlZnQgb3IgcmlnaHQgYW5kIGluZGV4IGlzIDAgb3RoZXJ3aXNlIHVzZSB3aWR0aFxuICAvLyBpbiB0aGlzIHdheSB0aGUgZmlyc3Qgb2Zmc2V0IHdpbGwgdXNlIGFuIGF4aXMgYW5kIHRoZSBzZWNvbmQgb25lXG4gIC8vIHdpbGwgdXNlIHRoZSBvdGhlciBvbmVcbiAgdmFyIHVzZUhlaWdodCA9IFsncmlnaHQnLCAnbGVmdCddLmluZGV4T2YoYmFzZVBsYWNlbWVudCkgIT09IC0xO1xuXG4gIC8vIFNwbGl0IHRoZSBvZmZzZXQgc3RyaW5nIHRvIG9idGFpbiBhIGxpc3Qgb2YgdmFsdWVzIGFuZCBvcGVyYW5kc1xuICAvLyBUaGUgcmVnZXggYWRkcmVzc2VzIHZhbHVlcyB3aXRoIHRoZSBwbHVzIG9yIG1pbnVzIHNpZ24gaW4gZnJvbnQgKCsxMCwgLTIwLCBldGMpXG4gIHZhciBmcmFnbWVudHMgPSBvZmZzZXQuc3BsaXQoLyhcXCt8XFwtKS8pLm1hcChmdW5jdGlvbiAoZnJhZykge1xuICAgIHJldHVybiBmcmFnLnRyaW0oKTtcbiAgfSk7XG5cbiAgLy8gRGV0ZWN0IGlmIHRoZSBvZmZzZXQgc3RyaW5nIGNvbnRhaW5zIGEgcGFpciBvZiB2YWx1ZXMgb3IgYSBzaW5nbGUgb25lXG4gIC8vIHRoZXkgY291bGQgYmUgc2VwYXJhdGVkIGJ5IGNvbW1hIG9yIHNwYWNlXG4gIHZhciBkaXZpZGVyID0gZnJhZ21lbnRzLmluZGV4T2YoZmluZChmcmFnbWVudHMsIGZ1bmN0aW9uIChmcmFnKSB7XG4gICAgcmV0dXJuIGZyYWcuc2VhcmNoKC8sfFxccy8pICE9PSAtMTtcbiAgfSkpO1xuXG4gIGlmIChmcmFnbWVudHNbZGl2aWRlcl0gJiYgZnJhZ21lbnRzW2RpdmlkZXJdLmluZGV4T2YoJywnKSA9PT0gLTEpIHtcbiAgICBjb25zb2xlLndhcm4oJ09mZnNldHMgc2VwYXJhdGVkIGJ5IHdoaXRlIHNwYWNlKHMpIGFyZSBkZXByZWNhdGVkLCB1c2UgYSBjb21tYSAoLCkgaW5zdGVhZC4nKTtcbiAgfVxuXG4gIC8vIElmIGRpdmlkZXIgaXMgZm91bmQsIHdlIGRpdmlkZSB0aGUgbGlzdCBvZiB2YWx1ZXMgYW5kIG9wZXJhbmRzIHRvIGRpdmlkZVxuICAvLyB0aGVtIGJ5IG9mc2V0IFggYW5kIFkuXG4gIHZhciBzcGxpdFJlZ2V4ID0gL1xccyosXFxzKnxcXHMrLztcbiAgdmFyIG9wcyA9IGRpdmlkZXIgIT09IC0xID8gW2ZyYWdtZW50cy5zbGljZSgwLCBkaXZpZGVyKS5jb25jYXQoW2ZyYWdtZW50c1tkaXZpZGVyXS5zcGxpdChzcGxpdFJlZ2V4KVswXV0pLCBbZnJhZ21lbnRzW2RpdmlkZXJdLnNwbGl0KHNwbGl0UmVnZXgpWzFdXS5jb25jYXQoZnJhZ21lbnRzLnNsaWNlKGRpdmlkZXIgKyAxKSldIDogW2ZyYWdtZW50c107XG5cbiAgLy8gQ29udmVydCB0aGUgdmFsdWVzIHdpdGggdW5pdHMgdG8gYWJzb2x1dGUgcGl4ZWxzIHRvIGFsbG93IG91ciBjb21wdXRhdGlvbnNcbiAgb3BzID0gb3BzLm1hcChmdW5jdGlvbiAob3AsIGluZGV4KSB7XG4gICAgLy8gTW9zdCBvZiB0aGUgdW5pdHMgcmVseSBvbiB0aGUgb3JpZW50YXRpb24gb2YgdGhlIHBvcHBlclxuICAgIHZhciBtZWFzdXJlbWVudCA9IChpbmRleCA9PT0gMSA/ICF1c2VIZWlnaHQgOiB1c2VIZWlnaHQpID8gJ2hlaWdodCcgOiAnd2lkdGgnO1xuICAgIHZhciBtZXJnZVdpdGhQcmV2aW91cyA9IGZhbHNlO1xuICAgIHJldHVybiBvcFxuICAgIC8vIFRoaXMgYWdncmVnYXRlcyBhbnkgYCtgIG9yIGAtYCBzaWduIHRoYXQgYXJlbid0IGNvbnNpZGVyZWQgb3BlcmF0b3JzXG4gICAgLy8gZS5nLjogMTAgKyArNSA9PiBbMTAsICssICs1XVxuICAgIC5yZWR1Y2UoZnVuY3Rpb24gKGEsIGIpIHtcbiAgICAgIGlmIChhW2EubGVuZ3RoIC0gMV0gPT09ICcnICYmIFsnKycsICctJ10uaW5kZXhPZihiKSAhPT0gLTEpIHtcbiAgICAgICAgYVthLmxlbmd0aCAtIDFdID0gYjtcbiAgICAgICAgbWVyZ2VXaXRoUHJldmlvdXMgPSB0cnVlO1xuICAgICAgICByZXR1cm4gYTtcbiAgICAgIH0gZWxzZSBpZiAobWVyZ2VXaXRoUHJldmlvdXMpIHtcbiAgICAgICAgYVthLmxlbmd0aCAtIDFdICs9IGI7XG4gICAgICAgIG1lcmdlV2l0aFByZXZpb3VzID0gZmFsc2U7XG4gICAgICAgIHJldHVybiBhO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGEuY29uY2F0KGIpO1xuICAgICAgfVxuICAgIH0sIFtdKVxuICAgIC8vIEhlcmUgd2UgY29udmVydCB0aGUgc3RyaW5nIHZhbHVlcyBpbnRvIG51bWJlciB2YWx1ZXMgKGluIHB4KVxuICAgIC5tYXAoZnVuY3Rpb24gKHN0cikge1xuICAgICAgcmV0dXJuIHRvVmFsdWUoc3RyLCBtZWFzdXJlbWVudCwgcG9wcGVyT2Zmc2V0cywgcmVmZXJlbmNlT2Zmc2V0cyk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIC8vIExvb3AgdHJvdWdoIHRoZSBvZmZzZXRzIGFycmF5cyBhbmQgZXhlY3V0ZSB0aGUgb3BlcmF0aW9uc1xuICBvcHMuZm9yRWFjaChmdW5jdGlvbiAob3AsIGluZGV4KSB7XG4gICAgb3AuZm9yRWFjaChmdW5jdGlvbiAoZnJhZywgaW5kZXgyKSB7XG4gICAgICBpZiAoaXNOdW1lcmljKGZyYWcpKSB7XG4gICAgICAgIG9mZnNldHNbaW5kZXhdICs9IGZyYWcgKiAob3BbaW5kZXgyIC0gMV0gPT09ICctJyA/IC0xIDogMSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH0pO1xuICByZXR1cm4gb2Zmc2V0cztcbn1cblxuLyoqXG4gKiBAZnVuY3Rpb25cbiAqIEBtZW1iZXJvZiBNb2RpZmllcnNcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBkYXRhIC0gVGhlIGRhdGEgb2JqZWN0IGdlbmVyYXRlZCBieSB1cGRhdGUgbWV0aG9kXG4gKiBAYXJndW1lbnQge09iamVjdH0gb3B0aW9ucyAtIE1vZGlmaWVycyBjb25maWd1cmF0aW9uIGFuZCBvcHRpb25zXG4gKiBAYXJndW1lbnQge051bWJlcnxTdHJpbmd9IG9wdGlvbnMub2Zmc2V0PTBcbiAqIFRoZSBvZmZzZXQgdmFsdWUgYXMgZGVzY3JpYmVkIGluIHRoZSBtb2RpZmllciBkZXNjcmlwdGlvblxuICogQHJldHVybnMge09iamVjdH0gVGhlIGRhdGEgb2JqZWN0LCBwcm9wZXJseSBtb2RpZmllZFxuICovXG5mdW5jdGlvbiBvZmZzZXQoZGF0YSwgX3JlZikge1xuICB2YXIgb2Zmc2V0ID0gX3JlZi5vZmZzZXQ7XG4gIHZhciBwbGFjZW1lbnQgPSBkYXRhLnBsYWNlbWVudCxcbiAgICAgIF9kYXRhJG9mZnNldHMgPSBkYXRhLm9mZnNldHMsXG4gICAgICBwb3BwZXIgPSBfZGF0YSRvZmZzZXRzLnBvcHBlcixcbiAgICAgIHJlZmVyZW5jZSA9IF9kYXRhJG9mZnNldHMucmVmZXJlbmNlO1xuXG4gIHZhciBiYXNlUGxhY2VtZW50ID0gcGxhY2VtZW50LnNwbGl0KCctJylbMF07XG5cbiAgdmFyIG9mZnNldHMgPSB2b2lkIDA7XG4gIGlmIChpc051bWVyaWMoK29mZnNldCkpIHtcbiAgICBvZmZzZXRzID0gWytvZmZzZXQsIDBdO1xuICB9IGVsc2Uge1xuICAgIG9mZnNldHMgPSBwYXJzZU9mZnNldChvZmZzZXQsIHBvcHBlciwgcmVmZXJlbmNlLCBiYXNlUGxhY2VtZW50KTtcbiAgfVxuXG4gIGlmIChiYXNlUGxhY2VtZW50ID09PSAnbGVmdCcpIHtcbiAgICBwb3BwZXIudG9wICs9IG9mZnNldHNbMF07XG4gICAgcG9wcGVyLmxlZnQgLT0gb2Zmc2V0c1sxXTtcbiAgfSBlbHNlIGlmIChiYXNlUGxhY2VtZW50ID09PSAncmlnaHQnKSB7XG4gICAgcG9wcGVyLnRvcCArPSBvZmZzZXRzWzBdO1xuICAgIHBvcHBlci5sZWZ0ICs9IG9mZnNldHNbMV07XG4gIH0gZWxzZSBpZiAoYmFzZVBsYWNlbWVudCA9PT0gJ3RvcCcpIHtcbiAgICBwb3BwZXIubGVmdCArPSBvZmZzZXRzWzBdO1xuICAgIHBvcHBlci50b3AgLT0gb2Zmc2V0c1sxXTtcbiAgfSBlbHNlIGlmIChiYXNlUGxhY2VtZW50ID09PSAnYm90dG9tJykge1xuICAgIHBvcHBlci5sZWZ0ICs9IG9mZnNldHNbMF07XG4gICAgcG9wcGVyLnRvcCArPSBvZmZzZXRzWzFdO1xuICB9XG5cbiAgZGF0YS5wb3BwZXIgPSBwb3BwZXI7XG4gIHJldHVybiBkYXRhO1xufVxuXG4vKipcbiAqIEBmdW5jdGlvblxuICogQG1lbWJlcm9mIE1vZGlmaWVyc1xuICogQGFyZ3VtZW50IHtPYmplY3R9IGRhdGEgLSBUaGUgZGF0YSBvYmplY3QgZ2VuZXJhdGVkIGJ5IGB1cGRhdGVgIG1ldGhvZFxuICogQGFyZ3VtZW50IHtPYmplY3R9IG9wdGlvbnMgLSBNb2RpZmllcnMgY29uZmlndXJhdGlvbiBhbmQgb3B0aW9uc1xuICogQHJldHVybnMge09iamVjdH0gVGhlIGRhdGEgb2JqZWN0LCBwcm9wZXJseSBtb2RpZmllZFxuICovXG5mdW5jdGlvbiBwcmV2ZW50T3ZlcmZsb3coZGF0YSwgb3B0aW9ucykge1xuICB2YXIgYm91bmRhcmllc0VsZW1lbnQgPSBvcHRpb25zLmJvdW5kYXJpZXNFbGVtZW50IHx8IGdldE9mZnNldFBhcmVudChkYXRhLmluc3RhbmNlLnBvcHBlcik7XG5cbiAgLy8gSWYgb2Zmc2V0UGFyZW50IGlzIHRoZSByZWZlcmVuY2UgZWxlbWVudCwgd2UgcmVhbGx5IHdhbnQgdG9cbiAgLy8gZ28gb25lIHN0ZXAgdXAgYW5kIHVzZSB0aGUgbmV4dCBvZmZzZXRQYXJlbnQgYXMgcmVmZXJlbmNlIHRvXG4gIC8vIGF2b2lkIHRvIG1ha2UgdGhpcyBtb2RpZmllciBjb21wbGV0ZWx5IHVzZWxlc3MgYW5kIGxvb2sgbGlrZSBicm9rZW5cbiAgaWYgKGRhdGEuaW5zdGFuY2UucmVmZXJlbmNlID09PSBib3VuZGFyaWVzRWxlbWVudCkge1xuICAgIGJvdW5kYXJpZXNFbGVtZW50ID0gZ2V0T2Zmc2V0UGFyZW50KGJvdW5kYXJpZXNFbGVtZW50KTtcbiAgfVxuXG4gIC8vIE5PVEU6IERPTSBhY2Nlc3MgaGVyZVxuICAvLyByZXNldHMgdGhlIHBvcHBlcidzIHBvc2l0aW9uIHNvIHRoYXQgdGhlIGRvY3VtZW50IHNpemUgY2FuIGJlIGNhbGN1bGF0ZWQgZXhjbHVkaW5nXG4gIC8vIHRoZSBzaXplIG9mIHRoZSBwb3BwZXIgZWxlbWVudCBpdHNlbGZcbiAgdmFyIHRyYW5zZm9ybVByb3AgPSBnZXRTdXBwb3J0ZWRQcm9wZXJ0eU5hbWUoJ3RyYW5zZm9ybScpO1xuICB2YXIgcG9wcGVyU3R5bGVzID0gZGF0YS5pbnN0YW5jZS5wb3BwZXIuc3R5bGU7IC8vIGFzc2lnbm1lbnQgdG8gaGVscCBtaW5pZmljYXRpb25cbiAgdmFyIHRvcCA9IHBvcHBlclN0eWxlcy50b3AsXG4gICAgICBsZWZ0ID0gcG9wcGVyU3R5bGVzLmxlZnQsXG4gICAgICB0cmFuc2Zvcm0gPSBwb3BwZXJTdHlsZXNbdHJhbnNmb3JtUHJvcF07XG5cbiAgcG9wcGVyU3R5bGVzLnRvcCA9ICcnO1xuICBwb3BwZXJTdHlsZXMubGVmdCA9ICcnO1xuICBwb3BwZXJTdHlsZXNbdHJhbnNmb3JtUHJvcF0gPSAnJztcblxuICB2YXIgYm91bmRhcmllcyA9IGdldEJvdW5kYXJpZXMoZGF0YS5pbnN0YW5jZS5wb3BwZXIsIGRhdGEuaW5zdGFuY2UucmVmZXJlbmNlLCBvcHRpb25zLnBhZGRpbmcsIGJvdW5kYXJpZXNFbGVtZW50LCBkYXRhLnBvc2l0aW9uRml4ZWQpO1xuXG4gIC8vIE5PVEU6IERPTSBhY2Nlc3MgaGVyZVxuICAvLyByZXN0b3JlcyB0aGUgb3JpZ2luYWwgc3R5bGUgcHJvcGVydGllcyBhZnRlciB0aGUgb2Zmc2V0cyBoYXZlIGJlZW4gY29tcHV0ZWRcbiAgcG9wcGVyU3R5bGVzLnRvcCA9IHRvcDtcbiAgcG9wcGVyU3R5bGVzLmxlZnQgPSBsZWZ0O1xuICBwb3BwZXJTdHlsZXNbdHJhbnNmb3JtUHJvcF0gPSB0cmFuc2Zvcm07XG5cbiAgb3B0aW9ucy5ib3VuZGFyaWVzID0gYm91bmRhcmllcztcblxuICB2YXIgb3JkZXIgPSBvcHRpb25zLnByaW9yaXR5O1xuICB2YXIgcG9wcGVyID0gZGF0YS5vZmZzZXRzLnBvcHBlcjtcblxuICB2YXIgY2hlY2sgPSB7XG4gICAgcHJpbWFyeTogZnVuY3Rpb24gcHJpbWFyeShwbGFjZW1lbnQpIHtcbiAgICAgIHZhciB2YWx1ZSA9IHBvcHBlcltwbGFjZW1lbnRdO1xuICAgICAgaWYgKHBvcHBlcltwbGFjZW1lbnRdIDwgYm91bmRhcmllc1twbGFjZW1lbnRdICYmICFvcHRpb25zLmVzY2FwZVdpdGhSZWZlcmVuY2UpIHtcbiAgICAgICAgdmFsdWUgPSBNYXRoLm1heChwb3BwZXJbcGxhY2VtZW50XSwgYm91bmRhcmllc1twbGFjZW1lbnRdKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBkZWZpbmVQcm9wZXJ0eSh7fSwgcGxhY2VtZW50LCB2YWx1ZSk7XG4gICAgfSxcbiAgICBzZWNvbmRhcnk6IGZ1bmN0aW9uIHNlY29uZGFyeShwbGFjZW1lbnQpIHtcbiAgICAgIHZhciBtYWluU2lkZSA9IHBsYWNlbWVudCA9PT0gJ3JpZ2h0JyA/ICdsZWZ0JyA6ICd0b3AnO1xuICAgICAgdmFyIHZhbHVlID0gcG9wcGVyW21haW5TaWRlXTtcbiAgICAgIGlmIChwb3BwZXJbcGxhY2VtZW50XSA+IGJvdW5kYXJpZXNbcGxhY2VtZW50XSAmJiAhb3B0aW9ucy5lc2NhcGVXaXRoUmVmZXJlbmNlKSB7XG4gICAgICAgIHZhbHVlID0gTWF0aC5taW4ocG9wcGVyW21haW5TaWRlXSwgYm91bmRhcmllc1twbGFjZW1lbnRdIC0gKHBsYWNlbWVudCA9PT0gJ3JpZ2h0JyA/IHBvcHBlci53aWR0aCA6IHBvcHBlci5oZWlnaHQpKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBkZWZpbmVQcm9wZXJ0eSh7fSwgbWFpblNpZGUsIHZhbHVlKTtcbiAgICB9XG4gIH07XG5cbiAgb3JkZXIuZm9yRWFjaChmdW5jdGlvbiAocGxhY2VtZW50KSB7XG4gICAgdmFyIHNpZGUgPSBbJ2xlZnQnLCAndG9wJ10uaW5kZXhPZihwbGFjZW1lbnQpICE9PSAtMSA/ICdwcmltYXJ5JyA6ICdzZWNvbmRhcnknO1xuICAgIHBvcHBlciA9IF9leHRlbmRzKHt9LCBwb3BwZXIsIGNoZWNrW3NpZGVdKHBsYWNlbWVudCkpO1xuICB9KTtcblxuICBkYXRhLm9mZnNldHMucG9wcGVyID0gcG9wcGVyO1xuXG4gIHJldHVybiBkYXRhO1xufVxuXG4vKipcbiAqIEBmdW5jdGlvblxuICogQG1lbWJlcm9mIE1vZGlmaWVyc1xuICogQGFyZ3VtZW50IHtPYmplY3R9IGRhdGEgLSBUaGUgZGF0YSBvYmplY3QgZ2VuZXJhdGVkIGJ5IGB1cGRhdGVgIG1ldGhvZFxuICogQGFyZ3VtZW50IHtPYmplY3R9IG9wdGlvbnMgLSBNb2RpZmllcnMgY29uZmlndXJhdGlvbiBhbmQgb3B0aW9uc1xuICogQHJldHVybnMge09iamVjdH0gVGhlIGRhdGEgb2JqZWN0LCBwcm9wZXJseSBtb2RpZmllZFxuICovXG5mdW5jdGlvbiBzaGlmdChkYXRhKSB7XG4gIHZhciBwbGFjZW1lbnQgPSBkYXRhLnBsYWNlbWVudDtcbiAgdmFyIGJhc2VQbGFjZW1lbnQgPSBwbGFjZW1lbnQuc3BsaXQoJy0nKVswXTtcbiAgdmFyIHNoaWZ0dmFyaWF0aW9uID0gcGxhY2VtZW50LnNwbGl0KCctJylbMV07XG5cbiAgLy8gaWYgc2hpZnQgc2hpZnR2YXJpYXRpb24gaXMgc3BlY2lmaWVkLCBydW4gdGhlIG1vZGlmaWVyXG4gIGlmIChzaGlmdHZhcmlhdGlvbikge1xuICAgIHZhciBfZGF0YSRvZmZzZXRzID0gZGF0YS5vZmZzZXRzLFxuICAgICAgICByZWZlcmVuY2UgPSBfZGF0YSRvZmZzZXRzLnJlZmVyZW5jZSxcbiAgICAgICAgcG9wcGVyID0gX2RhdGEkb2Zmc2V0cy5wb3BwZXI7XG5cbiAgICB2YXIgaXNWZXJ0aWNhbCA9IFsnYm90dG9tJywgJ3RvcCddLmluZGV4T2YoYmFzZVBsYWNlbWVudCkgIT09IC0xO1xuICAgIHZhciBzaWRlID0gaXNWZXJ0aWNhbCA/ICdsZWZ0JyA6ICd0b3AnO1xuICAgIHZhciBtZWFzdXJlbWVudCA9IGlzVmVydGljYWwgPyAnd2lkdGgnIDogJ2hlaWdodCc7XG5cbiAgICB2YXIgc2hpZnRPZmZzZXRzID0ge1xuICAgICAgc3RhcnQ6IGRlZmluZVByb3BlcnR5KHt9LCBzaWRlLCByZWZlcmVuY2Vbc2lkZV0pLFxuICAgICAgZW5kOiBkZWZpbmVQcm9wZXJ0eSh7fSwgc2lkZSwgcmVmZXJlbmNlW3NpZGVdICsgcmVmZXJlbmNlW21lYXN1cmVtZW50XSAtIHBvcHBlclttZWFzdXJlbWVudF0pXG4gICAgfTtcblxuICAgIGRhdGEub2Zmc2V0cy5wb3BwZXIgPSBfZXh0ZW5kcyh7fSwgcG9wcGVyLCBzaGlmdE9mZnNldHNbc2hpZnR2YXJpYXRpb25dKTtcbiAgfVxuXG4gIHJldHVybiBkYXRhO1xufVxuXG4vKipcbiAqIEBmdW5jdGlvblxuICogQG1lbWJlcm9mIE1vZGlmaWVyc1xuICogQGFyZ3VtZW50IHtPYmplY3R9IGRhdGEgLSBUaGUgZGF0YSBvYmplY3QgZ2VuZXJhdGVkIGJ5IHVwZGF0ZSBtZXRob2RcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBvcHRpb25zIC0gTW9kaWZpZXJzIGNvbmZpZ3VyYXRpb24gYW5kIG9wdGlvbnNcbiAqIEByZXR1cm5zIHtPYmplY3R9IFRoZSBkYXRhIG9iamVjdCwgcHJvcGVybHkgbW9kaWZpZWRcbiAqL1xuZnVuY3Rpb24gaGlkZShkYXRhKSB7XG4gIGlmICghaXNNb2RpZmllclJlcXVpcmVkKGRhdGEuaW5zdGFuY2UubW9kaWZpZXJzLCAnaGlkZScsICdwcmV2ZW50T3ZlcmZsb3cnKSkge1xuICAgIHJldHVybiBkYXRhO1xuICB9XG5cbiAgdmFyIHJlZlJlY3QgPSBkYXRhLm9mZnNldHMucmVmZXJlbmNlO1xuICB2YXIgYm91bmQgPSBmaW5kKGRhdGEuaW5zdGFuY2UubW9kaWZpZXJzLCBmdW5jdGlvbiAobW9kaWZpZXIpIHtcbiAgICByZXR1cm4gbW9kaWZpZXIubmFtZSA9PT0gJ3ByZXZlbnRPdmVyZmxvdyc7XG4gIH0pLmJvdW5kYXJpZXM7XG5cbiAgaWYgKHJlZlJlY3QuYm90dG9tIDwgYm91bmQudG9wIHx8IHJlZlJlY3QubGVmdCA+IGJvdW5kLnJpZ2h0IHx8IHJlZlJlY3QudG9wID4gYm91bmQuYm90dG9tIHx8IHJlZlJlY3QucmlnaHQgPCBib3VuZC5sZWZ0KSB7XG4gICAgLy8gQXZvaWQgdW5uZWNlc3NhcnkgRE9NIGFjY2VzcyBpZiB2aXNpYmlsaXR5IGhhc24ndCBjaGFuZ2VkXG4gICAgaWYgKGRhdGEuaGlkZSA9PT0gdHJ1ZSkge1xuICAgICAgcmV0dXJuIGRhdGE7XG4gICAgfVxuXG4gICAgZGF0YS5oaWRlID0gdHJ1ZTtcbiAgICBkYXRhLmF0dHJpYnV0ZXNbJ3gtb3V0LW9mLWJvdW5kYXJpZXMnXSA9ICcnO1xuICB9IGVsc2Uge1xuICAgIC8vIEF2b2lkIHVubmVjZXNzYXJ5IERPTSBhY2Nlc3MgaWYgdmlzaWJpbGl0eSBoYXNuJ3QgY2hhbmdlZFxuICAgIGlmIChkYXRhLmhpZGUgPT09IGZhbHNlKSB7XG4gICAgICByZXR1cm4gZGF0YTtcbiAgICB9XG5cbiAgICBkYXRhLmhpZGUgPSBmYWxzZTtcbiAgICBkYXRhLmF0dHJpYnV0ZXNbJ3gtb3V0LW9mLWJvdW5kYXJpZXMnXSA9IGZhbHNlO1xuICB9XG5cbiAgcmV0dXJuIGRhdGE7XG59XG5cbi8qKlxuICogQGZ1bmN0aW9uXG4gKiBAbWVtYmVyb2YgTW9kaWZpZXJzXG4gKiBAYXJndW1lbnQge09iamVjdH0gZGF0YSAtIFRoZSBkYXRhIG9iamVjdCBnZW5lcmF0ZWQgYnkgYHVwZGF0ZWAgbWV0aG9kXG4gKiBAYXJndW1lbnQge09iamVjdH0gb3B0aW9ucyAtIE1vZGlmaWVycyBjb25maWd1cmF0aW9uIGFuZCBvcHRpb25zXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBUaGUgZGF0YSBvYmplY3QsIHByb3Blcmx5IG1vZGlmaWVkXG4gKi9cbmZ1bmN0aW9uIGlubmVyKGRhdGEpIHtcbiAgdmFyIHBsYWNlbWVudCA9IGRhdGEucGxhY2VtZW50O1xuICB2YXIgYmFzZVBsYWNlbWVudCA9IHBsYWNlbWVudC5zcGxpdCgnLScpWzBdO1xuICB2YXIgX2RhdGEkb2Zmc2V0cyA9IGRhdGEub2Zmc2V0cyxcbiAgICAgIHBvcHBlciA9IF9kYXRhJG9mZnNldHMucG9wcGVyLFxuICAgICAgcmVmZXJlbmNlID0gX2RhdGEkb2Zmc2V0cy5yZWZlcmVuY2U7XG5cbiAgdmFyIGlzSG9yaXogPSBbJ2xlZnQnLCAncmlnaHQnXS5pbmRleE9mKGJhc2VQbGFjZW1lbnQpICE9PSAtMTtcblxuICB2YXIgc3VidHJhY3RMZW5ndGggPSBbJ3RvcCcsICdsZWZ0J10uaW5kZXhPZihiYXNlUGxhY2VtZW50KSA9PT0gLTE7XG5cbiAgcG9wcGVyW2lzSG9yaXogPyAnbGVmdCcgOiAndG9wJ10gPSByZWZlcmVuY2VbYmFzZVBsYWNlbWVudF0gLSAoc3VidHJhY3RMZW5ndGggPyBwb3BwZXJbaXNIb3JpeiA/ICd3aWR0aCcgOiAnaGVpZ2h0J10gOiAwKTtcblxuICBkYXRhLnBsYWNlbWVudCA9IGdldE9wcG9zaXRlUGxhY2VtZW50KHBsYWNlbWVudCk7XG4gIGRhdGEub2Zmc2V0cy5wb3BwZXIgPSBnZXRDbGllbnRSZWN0KHBvcHBlcik7XG5cbiAgcmV0dXJuIGRhdGE7XG59XG5cbi8qKlxuICogTW9kaWZpZXIgZnVuY3Rpb24sIGVhY2ggbW9kaWZpZXIgY2FuIGhhdmUgYSBmdW5jdGlvbiBvZiB0aGlzIHR5cGUgYXNzaWduZWRcbiAqIHRvIGl0cyBgZm5gIHByb3BlcnR5LjxiciAvPlxuICogVGhlc2UgZnVuY3Rpb25zIHdpbGwgYmUgY2FsbGVkIG9uIGVhY2ggdXBkYXRlLCB0aGlzIG1lYW5zIHRoYXQgeW91IG11c3RcbiAqIG1ha2Ugc3VyZSB0aGV5IGFyZSBwZXJmb3JtYW50IGVub3VnaCB0byBhdm9pZCBwZXJmb3JtYW5jZSBib3R0bGVuZWNrcy5cbiAqXG4gKiBAZnVuY3Rpb24gTW9kaWZpZXJGblxuICogQGFyZ3VtZW50IHtkYXRhT2JqZWN0fSBkYXRhIC0gVGhlIGRhdGEgb2JqZWN0IGdlbmVyYXRlZCBieSBgdXBkYXRlYCBtZXRob2RcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBvcHRpb25zIC0gTW9kaWZpZXJzIGNvbmZpZ3VyYXRpb24gYW5kIG9wdGlvbnNcbiAqIEByZXR1cm5zIHtkYXRhT2JqZWN0fSBUaGUgZGF0YSBvYmplY3QsIHByb3Blcmx5IG1vZGlmaWVkXG4gKi9cblxuLyoqXG4gKiBNb2RpZmllcnMgYXJlIHBsdWdpbnMgdXNlZCB0byBhbHRlciB0aGUgYmVoYXZpb3Igb2YgeW91ciBwb3BwZXJzLjxiciAvPlxuICogUG9wcGVyLmpzIHVzZXMgYSBzZXQgb2YgOSBtb2RpZmllcnMgdG8gcHJvdmlkZSBhbGwgdGhlIGJhc2ljIGZ1bmN0aW9uYWxpdGllc1xuICogbmVlZGVkIGJ5IHRoZSBsaWJyYXJ5LlxuICpcbiAqIFVzdWFsbHkgeW91IGRvbid0IHdhbnQgdG8gb3ZlcnJpZGUgdGhlIGBvcmRlcmAsIGBmbmAgYW5kIGBvbkxvYWRgIHByb3BzLlxuICogQWxsIHRoZSBvdGhlciBwcm9wZXJ0aWVzIGFyZSBjb25maWd1cmF0aW9ucyB0aGF0IGNvdWxkIGJlIHR3ZWFrZWQuXG4gKiBAbmFtZXNwYWNlIG1vZGlmaWVyc1xuICovXG52YXIgbW9kaWZpZXJzID0ge1xuICAvKipcbiAgICogTW9kaWZpZXIgdXNlZCB0byBzaGlmdCB0aGUgcG9wcGVyIG9uIHRoZSBzdGFydCBvciBlbmQgb2YgaXRzIHJlZmVyZW5jZVxuICAgKiBlbGVtZW50LjxiciAvPlxuICAgKiBJdCB3aWxsIHJlYWQgdGhlIHZhcmlhdGlvbiBvZiB0aGUgYHBsYWNlbWVudGAgcHJvcGVydHkuPGJyIC8+XG4gICAqIEl0IGNhbiBiZSBvbmUgZWl0aGVyIGAtZW5kYCBvciBgLXN0YXJ0YC5cbiAgICogQG1lbWJlcm9mIG1vZGlmaWVyc1xuICAgKiBAaW5uZXJcbiAgICovXG4gIHNoaWZ0OiB7XG4gICAgLyoqIEBwcm9wIHtudW1iZXJ9IG9yZGVyPTEwMCAtIEluZGV4IHVzZWQgdG8gZGVmaW5lIHRoZSBvcmRlciBvZiBleGVjdXRpb24gKi9cbiAgICBvcmRlcjogMTAwLFxuICAgIC8qKiBAcHJvcCB7Qm9vbGVhbn0gZW5hYmxlZD10cnVlIC0gV2hldGhlciB0aGUgbW9kaWZpZXIgaXMgZW5hYmxlZCBvciBub3QgKi9cbiAgICBlbmFibGVkOiB0cnVlLFxuICAgIC8qKiBAcHJvcCB7TW9kaWZpZXJGbn0gKi9cbiAgICBmbjogc2hpZnRcbiAgfSxcblxuICAvKipcbiAgICogVGhlIGBvZmZzZXRgIG1vZGlmaWVyIGNhbiBzaGlmdCB5b3VyIHBvcHBlciBvbiBib3RoIGl0cyBheGlzLlxuICAgKlxuICAgKiBJdCBhY2NlcHRzIHRoZSBmb2xsb3dpbmcgdW5pdHM6XG4gICAqIC0gYHB4YCBvciB1bml0LWxlc3MsIGludGVycHJldGVkIGFzIHBpeGVsc1xuICAgKiAtIGAlYCBvciBgJXJgLCBwZXJjZW50YWdlIHJlbGF0aXZlIHRvIHRoZSBsZW5ndGggb2YgdGhlIHJlZmVyZW5jZSBlbGVtZW50XG4gICAqIC0gYCVwYCwgcGVyY2VudGFnZSByZWxhdGl2ZSB0byB0aGUgbGVuZ3RoIG9mIHRoZSBwb3BwZXIgZWxlbWVudFxuICAgKiAtIGB2d2AsIENTUyB2aWV3cG9ydCB3aWR0aCB1bml0XG4gICAqIC0gYHZoYCwgQ1NTIHZpZXdwb3J0IGhlaWdodCB1bml0XG4gICAqXG4gICAqIEZvciBsZW5ndGggaXMgaW50ZW5kZWQgdGhlIG1haW4gYXhpcyByZWxhdGl2ZSB0byB0aGUgcGxhY2VtZW50IG9mIHRoZSBwb3BwZXIuPGJyIC8+XG4gICAqIFRoaXMgbWVhbnMgdGhhdCBpZiB0aGUgcGxhY2VtZW50IGlzIGB0b3BgIG9yIGBib3R0b21gLCB0aGUgbGVuZ3RoIHdpbGwgYmUgdGhlXG4gICAqIGB3aWR0aGAuIEluIGNhc2Ugb2YgYGxlZnRgIG9yIGByaWdodGAsIGl0IHdpbGwgYmUgdGhlIGBoZWlnaHRgLlxuICAgKlxuICAgKiBZb3UgY2FuIHByb3ZpZGUgYSBzaW5nbGUgdmFsdWUgKGFzIGBOdW1iZXJgIG9yIGBTdHJpbmdgKSwgb3IgYSBwYWlyIG9mIHZhbHVlc1xuICAgKiBhcyBgU3RyaW5nYCBkaXZpZGVkIGJ5IGEgY29tbWEgb3Igb25lIChvciBtb3JlKSB3aGl0ZSBzcGFjZXMuPGJyIC8+XG4gICAqIFRoZSBsYXR0ZXIgaXMgYSBkZXByZWNhdGVkIG1ldGhvZCBiZWNhdXNlIGl0IGxlYWRzIHRvIGNvbmZ1c2lvbiBhbmQgd2lsbCBiZVxuICAgKiByZW1vdmVkIGluIHYyLjxiciAvPlxuICAgKiBBZGRpdGlvbmFsbHksIGl0IGFjY2VwdHMgYWRkaXRpb25zIGFuZCBzdWJ0cmFjdGlvbnMgYmV0d2VlbiBkaWZmZXJlbnQgdW5pdHMuXG4gICAqIE5vdGUgdGhhdCBtdWx0aXBsaWNhdGlvbnMgYW5kIGRpdmlzaW9ucyBhcmVuJ3Qgc3VwcG9ydGVkLlxuICAgKlxuICAgKiBWYWxpZCBleGFtcGxlcyBhcmU6XG4gICAqIGBgYFxuICAgKiAxMFxuICAgKiAnMTAlJ1xuICAgKiAnMTAsIDEwJ1xuICAgKiAnMTAlLCAxMCdcbiAgICogJzEwICsgMTAlJ1xuICAgKiAnMTAgLSA1dmggKyAzJSdcbiAgICogJy0xMHB4ICsgNXZoLCA1cHggLSA2JSdcbiAgICogYGBgXG4gICAqID4gKipOQioqOiBJZiB5b3UgZGVzaXJlIHRvIGFwcGx5IG9mZnNldHMgdG8geW91ciBwb3BwZXJzIGluIGEgd2F5IHRoYXQgbWF5IG1ha2UgdGhlbSBvdmVybGFwXG4gICAqID4gd2l0aCB0aGVpciByZWZlcmVuY2UgZWxlbWVudCwgdW5mb3J0dW5hdGVseSwgeW91IHdpbGwgaGF2ZSB0byBkaXNhYmxlIHRoZSBgZmxpcGAgbW9kaWZpZXIuXG4gICAqID4gWW91IGNhbiByZWFkIG1vcmUgb24gdGhpcyBhdCB0aGlzIFtpc3N1ZV0oaHR0cHM6Ly9naXRodWIuY29tL0ZlelZyYXN0YS9wb3BwZXIuanMvaXNzdWVzLzM3MykuXG4gICAqXG4gICAqIEBtZW1iZXJvZiBtb2RpZmllcnNcbiAgICogQGlubmVyXG4gICAqL1xuICBvZmZzZXQ6IHtcbiAgICAvKiogQHByb3Age251bWJlcn0gb3JkZXI9MjAwIC0gSW5kZXggdXNlZCB0byBkZWZpbmUgdGhlIG9yZGVyIG9mIGV4ZWN1dGlvbiAqL1xuICAgIG9yZGVyOiAyMDAsXG4gICAgLyoqIEBwcm9wIHtCb29sZWFufSBlbmFibGVkPXRydWUgLSBXaGV0aGVyIHRoZSBtb2RpZmllciBpcyBlbmFibGVkIG9yIG5vdCAqL1xuICAgIGVuYWJsZWQ6IHRydWUsXG4gICAgLyoqIEBwcm9wIHtNb2RpZmllckZufSAqL1xuICAgIGZuOiBvZmZzZXQsXG4gICAgLyoqIEBwcm9wIHtOdW1iZXJ8U3RyaW5nfSBvZmZzZXQ9MFxuICAgICAqIFRoZSBvZmZzZXQgdmFsdWUgYXMgZGVzY3JpYmVkIGluIHRoZSBtb2RpZmllciBkZXNjcmlwdGlvblxuICAgICAqL1xuICAgIG9mZnNldDogMFxuICB9LFxuXG4gIC8qKlxuICAgKiBNb2RpZmllciB1c2VkIHRvIHByZXZlbnQgdGhlIHBvcHBlciBmcm9tIGJlaW5nIHBvc2l0aW9uZWQgb3V0c2lkZSB0aGUgYm91bmRhcnkuXG4gICAqXG4gICAqIEEgc2NlbmFyaW8gZXhpc3RzIHdoZXJlIHRoZSByZWZlcmVuY2UgaXRzZWxmIGlzIG5vdCB3aXRoaW4gdGhlIGJvdW5kYXJpZXMuPGJyIC8+XG4gICAqIFdlIGNhbiBzYXkgaXQgaGFzIFwiZXNjYXBlZCB0aGUgYm91bmRhcmllc1wiIOKAlCBvciBqdXN0IFwiZXNjYXBlZFwiLjxiciAvPlxuICAgKiBJbiB0aGlzIGNhc2Ugd2UgbmVlZCB0byBkZWNpZGUgd2hldGhlciB0aGUgcG9wcGVyIHNob3VsZCBlaXRoZXI6XG4gICAqXG4gICAqIC0gZGV0YWNoIGZyb20gdGhlIHJlZmVyZW5jZSBhbmQgcmVtYWluIFwidHJhcHBlZFwiIGluIHRoZSBib3VuZGFyaWVzLCBvclxuICAgKiAtIGlmIGl0IHNob3VsZCBpZ25vcmUgdGhlIGJvdW5kYXJ5IGFuZCBcImVzY2FwZSB3aXRoIGl0cyByZWZlcmVuY2VcIlxuICAgKlxuICAgKiBXaGVuIGBlc2NhcGVXaXRoUmVmZXJlbmNlYCBpcyBzZXQgdG9gdHJ1ZWAgYW5kIHJlZmVyZW5jZSBpcyBjb21wbGV0ZWx5XG4gICAqIG91dHNpZGUgaXRzIGJvdW5kYXJpZXMsIHRoZSBwb3BwZXIgd2lsbCBvdmVyZmxvdyAob3IgY29tcGxldGVseSBsZWF2ZSlcbiAgICogdGhlIGJvdW5kYXJpZXMgaW4gb3JkZXIgdG8gcmVtYWluIGF0dGFjaGVkIHRvIHRoZSBlZGdlIG9mIHRoZSByZWZlcmVuY2UuXG4gICAqXG4gICAqIEBtZW1iZXJvZiBtb2RpZmllcnNcbiAgICogQGlubmVyXG4gICAqL1xuICBwcmV2ZW50T3ZlcmZsb3c6IHtcbiAgICAvKiogQHByb3Age251bWJlcn0gb3JkZXI9MzAwIC0gSW5kZXggdXNlZCB0byBkZWZpbmUgdGhlIG9yZGVyIG9mIGV4ZWN1dGlvbiAqL1xuICAgIG9yZGVyOiAzMDAsXG4gICAgLyoqIEBwcm9wIHtCb29sZWFufSBlbmFibGVkPXRydWUgLSBXaGV0aGVyIHRoZSBtb2RpZmllciBpcyBlbmFibGVkIG9yIG5vdCAqL1xuICAgIGVuYWJsZWQ6IHRydWUsXG4gICAgLyoqIEBwcm9wIHtNb2RpZmllckZufSAqL1xuICAgIGZuOiBwcmV2ZW50T3ZlcmZsb3csXG4gICAgLyoqXG4gICAgICogQHByb3Age0FycmF5fSBbcHJpb3JpdHk9WydsZWZ0JywncmlnaHQnLCd0b3AnLCdib3R0b20nXV1cbiAgICAgKiBQb3BwZXIgd2lsbCB0cnkgdG8gcHJldmVudCBvdmVyZmxvdyBmb2xsb3dpbmcgdGhlc2UgcHJpb3JpdGllcyBieSBkZWZhdWx0LFxuICAgICAqIHRoZW4sIGl0IGNvdWxkIG92ZXJmbG93IG9uIHRoZSBsZWZ0IGFuZCBvbiB0b3Agb2YgdGhlIGBib3VuZGFyaWVzRWxlbWVudGBcbiAgICAgKi9cbiAgICBwcmlvcml0eTogWydsZWZ0JywgJ3JpZ2h0JywgJ3RvcCcsICdib3R0b20nXSxcbiAgICAvKipcbiAgICAgKiBAcHJvcCB7bnVtYmVyfSBwYWRkaW5nPTVcbiAgICAgKiBBbW91bnQgb2YgcGl4ZWwgdXNlZCB0byBkZWZpbmUgYSBtaW5pbXVtIGRpc3RhbmNlIGJldHdlZW4gdGhlIGJvdW5kYXJpZXNcbiAgICAgKiBhbmQgdGhlIHBvcHBlci4gVGhpcyBtYWtlcyBzdXJlIHRoZSBwb3BwZXIgYWx3YXlzIGhhcyBhIGxpdHRsZSBwYWRkaW5nXG4gICAgICogYmV0d2VlbiB0aGUgZWRnZXMgb2YgaXRzIGNvbnRhaW5lclxuICAgICAqL1xuICAgIHBhZGRpbmc6IDUsXG4gICAgLyoqXG4gICAgICogQHByb3Age1N0cmluZ3xIVE1MRWxlbWVudH0gYm91bmRhcmllc0VsZW1lbnQ9J3Njcm9sbFBhcmVudCdcbiAgICAgKiBCb3VuZGFyaWVzIHVzZWQgYnkgdGhlIG1vZGlmaWVyLiBDYW4gYmUgYHNjcm9sbFBhcmVudGAsIGB3aW5kb3dgLFxuICAgICAqIGB2aWV3cG9ydGAgb3IgYW55IERPTSBlbGVtZW50LlxuICAgICAqL1xuICAgIGJvdW5kYXJpZXNFbGVtZW50OiAnc2Nyb2xsUGFyZW50J1xuICB9LFxuXG4gIC8qKlxuICAgKiBNb2RpZmllciB1c2VkIHRvIG1ha2Ugc3VyZSB0aGUgcmVmZXJlbmNlIGFuZCBpdHMgcG9wcGVyIHN0YXkgbmVhciBlYWNoIG90aGVyXG4gICAqIHdpdGhvdXQgbGVhdmluZyBhbnkgZ2FwIGJldHdlZW4gdGhlIHR3by4gRXNwZWNpYWxseSB1c2VmdWwgd2hlbiB0aGUgYXJyb3cgaXNcbiAgICogZW5hYmxlZCBhbmQgeW91IHdhbnQgdG8gZW5zdXJlIHRoYXQgaXQgcG9pbnRzIHRvIGl0cyByZWZlcmVuY2UgZWxlbWVudC5cbiAgICogSXQgY2FyZXMgb25seSBhYm91dCB0aGUgZmlyc3QgYXhpcy4gWW91IGNhbiBzdGlsbCBoYXZlIHBvcHBlcnMgd2l0aCBtYXJnaW5cbiAgICogYmV0d2VlbiB0aGUgcG9wcGVyIGFuZCBpdHMgcmVmZXJlbmNlIGVsZW1lbnQuXG4gICAqIEBtZW1iZXJvZiBtb2RpZmllcnNcbiAgICogQGlubmVyXG4gICAqL1xuICBrZWVwVG9nZXRoZXI6IHtcbiAgICAvKiogQHByb3Age251bWJlcn0gb3JkZXI9NDAwIC0gSW5kZXggdXNlZCB0byBkZWZpbmUgdGhlIG9yZGVyIG9mIGV4ZWN1dGlvbiAqL1xuICAgIG9yZGVyOiA0MDAsXG4gICAgLyoqIEBwcm9wIHtCb29sZWFufSBlbmFibGVkPXRydWUgLSBXaGV0aGVyIHRoZSBtb2RpZmllciBpcyBlbmFibGVkIG9yIG5vdCAqL1xuICAgIGVuYWJsZWQ6IHRydWUsXG4gICAgLyoqIEBwcm9wIHtNb2RpZmllckZufSAqL1xuICAgIGZuOiBrZWVwVG9nZXRoZXJcbiAgfSxcblxuICAvKipcbiAgICogVGhpcyBtb2RpZmllciBpcyB1c2VkIHRvIG1vdmUgdGhlIGBhcnJvd0VsZW1lbnRgIG9mIHRoZSBwb3BwZXIgdG8gbWFrZVxuICAgKiBzdXJlIGl0IGlzIHBvc2l0aW9uZWQgYmV0d2VlbiB0aGUgcmVmZXJlbmNlIGVsZW1lbnQgYW5kIGl0cyBwb3BwZXIgZWxlbWVudC5cbiAgICogSXQgd2lsbCByZWFkIHRoZSBvdXRlciBzaXplIG9mIHRoZSBgYXJyb3dFbGVtZW50YCBub2RlIHRvIGRldGVjdCBob3cgbWFueVxuICAgKiBwaXhlbHMgb2YgY29uanVuY3Rpb24gYXJlIG5lZWRlZC5cbiAgICpcbiAgICogSXQgaGFzIG5vIGVmZmVjdCBpZiBubyBgYXJyb3dFbGVtZW50YCBpcyBwcm92aWRlZC5cbiAgICogQG1lbWJlcm9mIG1vZGlmaWVyc1xuICAgKiBAaW5uZXJcbiAgICovXG4gIGFycm93OiB7XG4gICAgLyoqIEBwcm9wIHtudW1iZXJ9IG9yZGVyPTUwMCAtIEluZGV4IHVzZWQgdG8gZGVmaW5lIHRoZSBvcmRlciBvZiBleGVjdXRpb24gKi9cbiAgICBvcmRlcjogNTAwLFxuICAgIC8qKiBAcHJvcCB7Qm9vbGVhbn0gZW5hYmxlZD10cnVlIC0gV2hldGhlciB0aGUgbW9kaWZpZXIgaXMgZW5hYmxlZCBvciBub3QgKi9cbiAgICBlbmFibGVkOiB0cnVlLFxuICAgIC8qKiBAcHJvcCB7TW9kaWZpZXJGbn0gKi9cbiAgICBmbjogYXJyb3csXG4gICAgLyoqIEBwcm9wIHtTdHJpbmd8SFRNTEVsZW1lbnR9IGVsZW1lbnQ9J1t4LWFycm93XScgLSBTZWxlY3RvciBvciBub2RlIHVzZWQgYXMgYXJyb3cgKi9cbiAgICBlbGVtZW50OiAnW3gtYXJyb3ddJ1xuICB9LFxuXG4gIC8qKlxuICAgKiBNb2RpZmllciB1c2VkIHRvIGZsaXAgdGhlIHBvcHBlcidzIHBsYWNlbWVudCB3aGVuIGl0IHN0YXJ0cyB0byBvdmVybGFwIGl0c1xuICAgKiByZWZlcmVuY2UgZWxlbWVudC5cbiAgICpcbiAgICogUmVxdWlyZXMgdGhlIGBwcmV2ZW50T3ZlcmZsb3dgIG1vZGlmaWVyIGJlZm9yZSBpdCBpbiBvcmRlciB0byB3b3JrLlxuICAgKlxuICAgKiAqKk5PVEU6KiogdGhpcyBtb2RpZmllciB3aWxsIGludGVycnVwdCB0aGUgY3VycmVudCB1cGRhdGUgY3ljbGUgYW5kIHdpbGxcbiAgICogcmVzdGFydCBpdCBpZiBpdCBkZXRlY3RzIHRoZSBuZWVkIHRvIGZsaXAgdGhlIHBsYWNlbWVudC5cbiAgICogQG1lbWJlcm9mIG1vZGlmaWVyc1xuICAgKiBAaW5uZXJcbiAgICovXG4gIGZsaXA6IHtcbiAgICAvKiogQHByb3Age251bWJlcn0gb3JkZXI9NjAwIC0gSW5kZXggdXNlZCB0byBkZWZpbmUgdGhlIG9yZGVyIG9mIGV4ZWN1dGlvbiAqL1xuICAgIG9yZGVyOiA2MDAsXG4gICAgLyoqIEBwcm9wIHtCb29sZWFufSBlbmFibGVkPXRydWUgLSBXaGV0aGVyIHRoZSBtb2RpZmllciBpcyBlbmFibGVkIG9yIG5vdCAqL1xuICAgIGVuYWJsZWQ6IHRydWUsXG4gICAgLyoqIEBwcm9wIHtNb2RpZmllckZufSAqL1xuICAgIGZuOiBmbGlwLFxuICAgIC8qKlxuICAgICAqIEBwcm9wIHtTdHJpbmd8QXJyYXl9IGJlaGF2aW9yPSdmbGlwJ1xuICAgICAqIFRoZSBiZWhhdmlvciB1c2VkIHRvIGNoYW5nZSB0aGUgcG9wcGVyJ3MgcGxhY2VtZW50LiBJdCBjYW4gYmUgb25lIG9mXG4gICAgICogYGZsaXBgLCBgY2xvY2t3aXNlYCwgYGNvdW50ZXJjbG9ja3dpc2VgIG9yIGFuIGFycmF5IHdpdGggYSBsaXN0IG9mIHZhbGlkXG4gICAgICogcGxhY2VtZW50cyAod2l0aCBvcHRpb25hbCB2YXJpYXRpb25zKVxuICAgICAqL1xuICAgIGJlaGF2aW9yOiAnZmxpcCcsXG4gICAgLyoqXG4gICAgICogQHByb3Age251bWJlcn0gcGFkZGluZz01XG4gICAgICogVGhlIHBvcHBlciB3aWxsIGZsaXAgaWYgaXQgaGl0cyB0aGUgZWRnZXMgb2YgdGhlIGBib3VuZGFyaWVzRWxlbWVudGBcbiAgICAgKi9cbiAgICBwYWRkaW5nOiA1LFxuICAgIC8qKlxuICAgICAqIEBwcm9wIHtTdHJpbmd8SFRNTEVsZW1lbnR9IGJvdW5kYXJpZXNFbGVtZW50PSd2aWV3cG9ydCdcbiAgICAgKiBUaGUgZWxlbWVudCB3aGljaCB3aWxsIGRlZmluZSB0aGUgYm91bmRhcmllcyBvZiB0aGUgcG9wcGVyIHBvc2l0aW9uLlxuICAgICAqIFRoZSBwb3BwZXIgd2lsbCBuZXZlciBiZSBwbGFjZWQgb3V0c2lkZSBvZiB0aGUgZGVmaW5lZCBib3VuZGFyaWVzXG4gICAgICogKGV4Y2VwdCBpZiBga2VlcFRvZ2V0aGVyYCBpcyBlbmFibGVkKVxuICAgICAqL1xuICAgIGJvdW5kYXJpZXNFbGVtZW50OiAndmlld3BvcnQnLFxuICAgIC8qKlxuICAgICAqIEBwcm9wIHtCb29sZWFufSBmbGlwVmFyaWF0aW9ucz1mYWxzZVxuICAgICAqIFRoZSBwb3BwZXIgd2lsbCBzd2l0Y2ggcGxhY2VtZW50IHZhcmlhdGlvbiBiZXR3ZWVuIGAtc3RhcnRgIGFuZCBgLWVuZGAgd2hlblxuICAgICAqIHRoZSByZWZlcmVuY2UgZWxlbWVudCBvdmVybGFwcyBpdHMgYm91bmRhcmllcy5cbiAgICAgKlxuICAgICAqIFRoZSBvcmlnaW5hbCBwbGFjZW1lbnQgc2hvdWxkIGhhdmUgYSBzZXQgdmFyaWF0aW9uLlxuICAgICAqL1xuICAgIGZsaXBWYXJpYXRpb25zOiBmYWxzZSxcbiAgICAvKipcbiAgICAgKiBAcHJvcCB7Qm9vbGVhbn0gZmxpcFZhcmlhdGlvbnNCeUNvbnRlbnQ9ZmFsc2VcbiAgICAgKiBUaGUgcG9wcGVyIHdpbGwgc3dpdGNoIHBsYWNlbWVudCB2YXJpYXRpb24gYmV0d2VlbiBgLXN0YXJ0YCBhbmQgYC1lbmRgIHdoZW5cbiAgICAgKiB0aGUgcG9wcGVyIGVsZW1lbnQgb3ZlcmxhcHMgaXRzIHJlZmVyZW5jZSBib3VuZGFyaWVzLlxuICAgICAqXG4gICAgICogVGhlIG9yaWdpbmFsIHBsYWNlbWVudCBzaG91bGQgaGF2ZSBhIHNldCB2YXJpYXRpb24uXG4gICAgICovXG4gICAgZmxpcFZhcmlhdGlvbnNCeUNvbnRlbnQ6IGZhbHNlXG4gIH0sXG5cbiAgLyoqXG4gICAqIE1vZGlmaWVyIHVzZWQgdG8gbWFrZSB0aGUgcG9wcGVyIGZsb3cgdG93YXJkIHRoZSBpbm5lciBvZiB0aGUgcmVmZXJlbmNlIGVsZW1lbnQuXG4gICAqIEJ5IGRlZmF1bHQsIHdoZW4gdGhpcyBtb2RpZmllciBpcyBkaXNhYmxlZCwgdGhlIHBvcHBlciB3aWxsIGJlIHBsYWNlZCBvdXRzaWRlXG4gICAqIHRoZSByZWZlcmVuY2UgZWxlbWVudC5cbiAgICogQG1lbWJlcm9mIG1vZGlmaWVyc1xuICAgKiBAaW5uZXJcbiAgICovXG4gIGlubmVyOiB7XG4gICAgLyoqIEBwcm9wIHtudW1iZXJ9IG9yZGVyPTcwMCAtIEluZGV4IHVzZWQgdG8gZGVmaW5lIHRoZSBvcmRlciBvZiBleGVjdXRpb24gKi9cbiAgICBvcmRlcjogNzAwLFxuICAgIC8qKiBAcHJvcCB7Qm9vbGVhbn0gZW5hYmxlZD1mYWxzZSAtIFdoZXRoZXIgdGhlIG1vZGlmaWVyIGlzIGVuYWJsZWQgb3Igbm90ICovXG4gICAgZW5hYmxlZDogZmFsc2UsXG4gICAgLyoqIEBwcm9wIHtNb2RpZmllckZufSAqL1xuICAgIGZuOiBpbm5lclxuICB9LFxuXG4gIC8qKlxuICAgKiBNb2RpZmllciB1c2VkIHRvIGhpZGUgdGhlIHBvcHBlciB3aGVuIGl0cyByZWZlcmVuY2UgZWxlbWVudCBpcyBvdXRzaWRlIG9mIHRoZVxuICAgKiBwb3BwZXIgYm91bmRhcmllcy4gSXQgd2lsbCBzZXQgYSBgeC1vdXQtb2YtYm91bmRhcmllc2AgYXR0cmlidXRlIHdoaWNoIGNhblxuICAgKiBiZSB1c2VkIHRvIGhpZGUgd2l0aCBhIENTUyBzZWxlY3RvciB0aGUgcG9wcGVyIHdoZW4gaXRzIHJlZmVyZW5jZSBpc1xuICAgKiBvdXQgb2YgYm91bmRhcmllcy5cbiAgICpcbiAgICogUmVxdWlyZXMgdGhlIGBwcmV2ZW50T3ZlcmZsb3dgIG1vZGlmaWVyIGJlZm9yZSBpdCBpbiBvcmRlciB0byB3b3JrLlxuICAgKiBAbWVtYmVyb2YgbW9kaWZpZXJzXG4gICAqIEBpbm5lclxuICAgKi9cbiAgaGlkZToge1xuICAgIC8qKiBAcHJvcCB7bnVtYmVyfSBvcmRlcj04MDAgLSBJbmRleCB1c2VkIHRvIGRlZmluZSB0aGUgb3JkZXIgb2YgZXhlY3V0aW9uICovXG4gICAgb3JkZXI6IDgwMCxcbiAgICAvKiogQHByb3Age0Jvb2xlYW59IGVuYWJsZWQ9dHJ1ZSAtIFdoZXRoZXIgdGhlIG1vZGlmaWVyIGlzIGVuYWJsZWQgb3Igbm90ICovXG4gICAgZW5hYmxlZDogdHJ1ZSxcbiAgICAvKiogQHByb3Age01vZGlmaWVyRm59ICovXG4gICAgZm46IGhpZGVcbiAgfSxcblxuICAvKipcbiAgICogQ29tcHV0ZXMgdGhlIHN0eWxlIHRoYXQgd2lsbCBiZSBhcHBsaWVkIHRvIHRoZSBwb3BwZXIgZWxlbWVudCB0byBnZXRzXG4gICAqIHByb3Blcmx5IHBvc2l0aW9uZWQuXG4gICAqXG4gICAqIE5vdGUgdGhhdCB0aGlzIG1vZGlmaWVyIHdpbGwgbm90IHRvdWNoIHRoZSBET00sIGl0IGp1c3QgcHJlcGFyZXMgdGhlIHN0eWxlc1xuICAgKiBzbyB0aGF0IGBhcHBseVN0eWxlYCBtb2RpZmllciBjYW4gYXBwbHkgaXQuIFRoaXMgc2VwYXJhdGlvbiBpcyB1c2VmdWxcbiAgICogaW4gY2FzZSB5b3UgbmVlZCB0byByZXBsYWNlIGBhcHBseVN0eWxlYCB3aXRoIGEgY3VzdG9tIGltcGxlbWVudGF0aW9uLlxuICAgKlxuICAgKiBUaGlzIG1vZGlmaWVyIGhhcyBgODUwYCBhcyBgb3JkZXJgIHZhbHVlIHRvIG1haW50YWluIGJhY2t3YXJkIGNvbXBhdGliaWxpdHlcbiAgICogd2l0aCBwcmV2aW91cyB2ZXJzaW9ucyBvZiBQb3BwZXIuanMuIEV4cGVjdCB0aGUgbW9kaWZpZXJzIG9yZGVyaW5nIG1ldGhvZFxuICAgKiB0byBjaGFuZ2UgaW4gZnV0dXJlIG1ham9yIHZlcnNpb25zIG9mIHRoZSBsaWJyYXJ5LlxuICAgKlxuICAgKiBAbWVtYmVyb2YgbW9kaWZpZXJzXG4gICAqIEBpbm5lclxuICAgKi9cbiAgY29tcHV0ZVN0eWxlOiB7XG4gICAgLyoqIEBwcm9wIHtudW1iZXJ9IG9yZGVyPTg1MCAtIEluZGV4IHVzZWQgdG8gZGVmaW5lIHRoZSBvcmRlciBvZiBleGVjdXRpb24gKi9cbiAgICBvcmRlcjogODUwLFxuICAgIC8qKiBAcHJvcCB7Qm9vbGVhbn0gZW5hYmxlZD10cnVlIC0gV2hldGhlciB0aGUgbW9kaWZpZXIgaXMgZW5hYmxlZCBvciBub3QgKi9cbiAgICBlbmFibGVkOiB0cnVlLFxuICAgIC8qKiBAcHJvcCB7TW9kaWZpZXJGbn0gKi9cbiAgICBmbjogY29tcHV0ZVN0eWxlLFxuICAgIC8qKlxuICAgICAqIEBwcm9wIHtCb29sZWFufSBncHVBY2NlbGVyYXRpb249dHJ1ZVxuICAgICAqIElmIHRydWUsIGl0IHVzZXMgdGhlIENTUyAzRCB0cmFuc2Zvcm1hdGlvbiB0byBwb3NpdGlvbiB0aGUgcG9wcGVyLlxuICAgICAqIE90aGVyd2lzZSwgaXQgd2lsbCB1c2UgdGhlIGB0b3BgIGFuZCBgbGVmdGAgcHJvcGVydGllc1xuICAgICAqL1xuICAgIGdwdUFjY2VsZXJhdGlvbjogdHJ1ZSxcbiAgICAvKipcbiAgICAgKiBAcHJvcCB7c3RyaW5nfSBbeD0nYm90dG9tJ11cbiAgICAgKiBXaGVyZSB0byBhbmNob3IgdGhlIFggYXhpcyAoYGJvdHRvbWAgb3IgYHRvcGApLiBBS0EgWCBvZmZzZXQgb3JpZ2luLlxuICAgICAqIENoYW5nZSB0aGlzIGlmIHlvdXIgcG9wcGVyIHNob3VsZCBncm93IGluIGEgZGlyZWN0aW9uIGRpZmZlcmVudCBmcm9tIGBib3R0b21gXG4gICAgICovXG4gICAgeDogJ2JvdHRvbScsXG4gICAgLyoqXG4gICAgICogQHByb3Age3N0cmluZ30gW3g9J2xlZnQnXVxuICAgICAqIFdoZXJlIHRvIGFuY2hvciB0aGUgWSBheGlzIChgbGVmdGAgb3IgYHJpZ2h0YCkuIEFLQSBZIG9mZnNldCBvcmlnaW4uXG4gICAgICogQ2hhbmdlIHRoaXMgaWYgeW91ciBwb3BwZXIgc2hvdWxkIGdyb3cgaW4gYSBkaXJlY3Rpb24gZGlmZmVyZW50IGZyb20gYHJpZ2h0YFxuICAgICAqL1xuICAgIHk6ICdyaWdodCdcbiAgfSxcblxuICAvKipcbiAgICogQXBwbGllcyB0aGUgY29tcHV0ZWQgc3R5bGVzIHRvIHRoZSBwb3BwZXIgZWxlbWVudC5cbiAgICpcbiAgICogQWxsIHRoZSBET00gbWFuaXB1bGF0aW9ucyBhcmUgbGltaXRlZCB0byB0aGlzIG1vZGlmaWVyLiBUaGlzIGlzIHVzZWZ1bCBpbiBjYXNlXG4gICAqIHlvdSB3YW50IHRvIGludGVncmF0ZSBQb3BwZXIuanMgaW5zaWRlIGEgZnJhbWV3b3JrIG9yIHZpZXcgbGlicmFyeSBhbmQgeW91XG4gICAqIHdhbnQgdG8gZGVsZWdhdGUgYWxsIHRoZSBET00gbWFuaXB1bGF0aW9ucyB0byBpdC5cbiAgICpcbiAgICogTm90ZSB0aGF0IGlmIHlvdSBkaXNhYmxlIHRoaXMgbW9kaWZpZXIsIHlvdSBtdXN0IG1ha2Ugc3VyZSB0aGUgcG9wcGVyIGVsZW1lbnRcbiAgICogaGFzIGl0cyBwb3NpdGlvbiBzZXQgdG8gYGFic29sdXRlYCBiZWZvcmUgUG9wcGVyLmpzIGNhbiBkbyBpdHMgd29yayFcbiAgICpcbiAgICogSnVzdCBkaXNhYmxlIHRoaXMgbW9kaWZpZXIgYW5kIGRlZmluZSB5b3VyIG93biB0byBhY2hpZXZlIHRoZSBkZXNpcmVkIGVmZmVjdC5cbiAgICpcbiAgICogQG1lbWJlcm9mIG1vZGlmaWVyc1xuICAgKiBAaW5uZXJcbiAgICovXG4gIGFwcGx5U3R5bGU6IHtcbiAgICAvKiogQHByb3Age251bWJlcn0gb3JkZXI9OTAwIC0gSW5kZXggdXNlZCB0byBkZWZpbmUgdGhlIG9yZGVyIG9mIGV4ZWN1dGlvbiAqL1xuICAgIG9yZGVyOiA5MDAsXG4gICAgLyoqIEBwcm9wIHtCb29sZWFufSBlbmFibGVkPXRydWUgLSBXaGV0aGVyIHRoZSBtb2RpZmllciBpcyBlbmFibGVkIG9yIG5vdCAqL1xuICAgIGVuYWJsZWQ6IHRydWUsXG4gICAgLyoqIEBwcm9wIHtNb2RpZmllckZufSAqL1xuICAgIGZuOiBhcHBseVN0eWxlLFxuICAgIC8qKiBAcHJvcCB7RnVuY3Rpb259ICovXG4gICAgb25Mb2FkOiBhcHBseVN0eWxlT25Mb2FkLFxuICAgIC8qKlxuICAgICAqIEBkZXByZWNhdGVkIHNpbmNlIHZlcnNpb24gMS4xMC4wLCB0aGUgcHJvcGVydHkgbW92ZWQgdG8gYGNvbXB1dGVTdHlsZWAgbW9kaWZpZXJcbiAgICAgKiBAcHJvcCB7Qm9vbGVhbn0gZ3B1QWNjZWxlcmF0aW9uPXRydWVcbiAgICAgKiBJZiB0cnVlLCBpdCB1c2VzIHRoZSBDU1MgM0QgdHJhbnNmb3JtYXRpb24gdG8gcG9zaXRpb24gdGhlIHBvcHBlci5cbiAgICAgKiBPdGhlcndpc2UsIGl0IHdpbGwgdXNlIHRoZSBgdG9wYCBhbmQgYGxlZnRgIHByb3BlcnRpZXNcbiAgICAgKi9cbiAgICBncHVBY2NlbGVyYXRpb246IHVuZGVmaW5lZFxuICB9XG59O1xuXG4vKipcbiAqIFRoZSBgZGF0YU9iamVjdGAgaXMgYW4gb2JqZWN0IGNvbnRhaW5pbmcgYWxsIHRoZSBpbmZvcm1hdGlvbiB1c2VkIGJ5IFBvcHBlci5qcy5cbiAqIFRoaXMgb2JqZWN0IGlzIHBhc3NlZCB0byBtb2RpZmllcnMgYW5kIHRvIHRoZSBgb25DcmVhdGVgIGFuZCBgb25VcGRhdGVgIGNhbGxiYWNrcy5cbiAqIEBuYW1lIGRhdGFPYmplY3RcbiAqIEBwcm9wZXJ0eSB7T2JqZWN0fSBkYXRhLmluc3RhbmNlIFRoZSBQb3BwZXIuanMgaW5zdGFuY2VcbiAqIEBwcm9wZXJ0eSB7U3RyaW5nfSBkYXRhLnBsYWNlbWVudCBQbGFjZW1lbnQgYXBwbGllZCB0byBwb3BwZXJcbiAqIEBwcm9wZXJ0eSB7U3RyaW5nfSBkYXRhLm9yaWdpbmFsUGxhY2VtZW50IFBsYWNlbWVudCBvcmlnaW5hbGx5IGRlZmluZWQgb24gaW5pdFxuICogQHByb3BlcnR5IHtCb29sZWFufSBkYXRhLmZsaXBwZWQgVHJ1ZSBpZiBwb3BwZXIgaGFzIGJlZW4gZmxpcHBlZCBieSBmbGlwIG1vZGlmaWVyXG4gKiBAcHJvcGVydHkge0Jvb2xlYW59IGRhdGEuaGlkZSBUcnVlIGlmIHRoZSByZWZlcmVuY2UgZWxlbWVudCBpcyBvdXQgb2YgYm91bmRhcmllcywgdXNlZnVsIHRvIGtub3cgd2hlbiB0byBoaWRlIHRoZSBwb3BwZXJcbiAqIEBwcm9wZXJ0eSB7SFRNTEVsZW1lbnR9IGRhdGEuYXJyb3dFbGVtZW50IE5vZGUgdXNlZCBhcyBhcnJvdyBieSBhcnJvdyBtb2RpZmllclxuICogQHByb3BlcnR5IHtPYmplY3R9IGRhdGEuc3R5bGVzIEFueSBDU1MgcHJvcGVydHkgZGVmaW5lZCBoZXJlIHdpbGwgYmUgYXBwbGllZCB0byB0aGUgcG9wcGVyLiBJdCBleHBlY3RzIHRoZSBKYXZhU2NyaXB0IG5vbWVuY2xhdHVyZSAoZWcuIGBtYXJnaW5Cb3R0b21gKVxuICogQHByb3BlcnR5IHtPYmplY3R9IGRhdGEuYXJyb3dTdHlsZXMgQW55IENTUyBwcm9wZXJ0eSBkZWZpbmVkIGhlcmUgd2lsbCBiZSBhcHBsaWVkIHRvIHRoZSBwb3BwZXIgYXJyb3cuIEl0IGV4cGVjdHMgdGhlIEphdmFTY3JpcHQgbm9tZW5jbGF0dXJlIChlZy4gYG1hcmdpbkJvdHRvbWApXG4gKiBAcHJvcGVydHkge09iamVjdH0gZGF0YS5ib3VuZGFyaWVzIE9mZnNldHMgb2YgdGhlIHBvcHBlciBib3VuZGFyaWVzXG4gKiBAcHJvcGVydHkge09iamVjdH0gZGF0YS5vZmZzZXRzIFRoZSBtZWFzdXJlbWVudHMgb2YgcG9wcGVyLCByZWZlcmVuY2UgYW5kIGFycm93IGVsZW1lbnRzXG4gKiBAcHJvcGVydHkge09iamVjdH0gZGF0YS5vZmZzZXRzLnBvcHBlciBgdG9wYCwgYGxlZnRgLCBgd2lkdGhgLCBgaGVpZ2h0YCB2YWx1ZXNcbiAqIEBwcm9wZXJ0eSB7T2JqZWN0fSBkYXRhLm9mZnNldHMucmVmZXJlbmNlIGB0b3BgLCBgbGVmdGAsIGB3aWR0aGAsIGBoZWlnaHRgIHZhbHVlc1xuICogQHByb3BlcnR5IHtPYmplY3R9IGRhdGEub2Zmc2V0cy5hcnJvd10gYHRvcGAgYW5kIGBsZWZ0YCBvZmZzZXRzLCBvbmx5IG9uZSBvZiB0aGVtIHdpbGwgYmUgZGlmZmVyZW50IGZyb20gMFxuICovXG5cbi8qKlxuICogRGVmYXVsdCBvcHRpb25zIHByb3ZpZGVkIHRvIFBvcHBlci5qcyBjb25zdHJ1Y3Rvci48YnIgLz5cbiAqIFRoZXNlIGNhbiBiZSBvdmVycmlkZGVuIHVzaW5nIHRoZSBgb3B0aW9uc2AgYXJndW1lbnQgb2YgUG9wcGVyLmpzLjxiciAvPlxuICogVG8gb3ZlcnJpZGUgYW4gb3B0aW9uLCBzaW1wbHkgcGFzcyBhbiBvYmplY3Qgd2l0aCB0aGUgc2FtZVxuICogc3RydWN0dXJlIG9mIHRoZSBgb3B0aW9uc2Agb2JqZWN0LCBhcyB0aGUgM3JkIGFyZ3VtZW50LiBGb3IgZXhhbXBsZTpcbiAqIGBgYFxuICogbmV3IFBvcHBlcihyZWYsIHBvcCwge1xuICogICBtb2RpZmllcnM6IHtcbiAqICAgICBwcmV2ZW50T3ZlcmZsb3c6IHsgZW5hYmxlZDogZmFsc2UgfVxuICogICB9XG4gKiB9KVxuICogYGBgXG4gKiBAdHlwZSB7T2JqZWN0fVxuICogQHN0YXRpY1xuICogQG1lbWJlcm9mIFBvcHBlclxuICovXG52YXIgRGVmYXVsdHMgPSB7XG4gIC8qKlxuICAgKiBQb3BwZXIncyBwbGFjZW1lbnQuXG4gICAqIEBwcm9wIHtQb3BwZXIucGxhY2VtZW50c30gcGxhY2VtZW50PSdib3R0b20nXG4gICAqL1xuICBwbGFjZW1lbnQ6ICdib3R0b20nLFxuXG4gIC8qKlxuICAgKiBTZXQgdGhpcyB0byB0cnVlIGlmIHlvdSB3YW50IHBvcHBlciB0byBwb3NpdGlvbiBpdCBzZWxmIGluICdmaXhlZCcgbW9kZVxuICAgKiBAcHJvcCB7Qm9vbGVhbn0gcG9zaXRpb25GaXhlZD1mYWxzZVxuICAgKi9cbiAgcG9zaXRpb25GaXhlZDogZmFsc2UsXG5cbiAgLyoqXG4gICAqIFdoZXRoZXIgZXZlbnRzIChyZXNpemUsIHNjcm9sbCkgYXJlIGluaXRpYWxseSBlbmFibGVkLlxuICAgKiBAcHJvcCB7Qm9vbGVhbn0gZXZlbnRzRW5hYmxlZD10cnVlXG4gICAqL1xuICBldmVudHNFbmFibGVkOiB0cnVlLFxuXG4gIC8qKlxuICAgKiBTZXQgdG8gdHJ1ZSBpZiB5b3Ugd2FudCB0byBhdXRvbWF0aWNhbGx5IHJlbW92ZSB0aGUgcG9wcGVyIHdoZW5cbiAgICogeW91IGNhbGwgdGhlIGBkZXN0cm95YCBtZXRob2QuXG4gICAqIEBwcm9wIHtCb29sZWFufSByZW1vdmVPbkRlc3Ryb3k9ZmFsc2VcbiAgICovXG4gIHJlbW92ZU9uRGVzdHJveTogZmFsc2UsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGNhbGxlZCB3aGVuIHRoZSBwb3BwZXIgaXMgY3JlYXRlZC48YnIgLz5cbiAgICogQnkgZGVmYXVsdCwgaXQgaXMgc2V0IHRvIG5vLW9wLjxiciAvPlxuICAgKiBBY2Nlc3MgUG9wcGVyLmpzIGluc3RhbmNlIHdpdGggYGRhdGEuaW5zdGFuY2VgLlxuICAgKiBAcHJvcCB7b25DcmVhdGV9XG4gICAqL1xuICBvbkNyZWF0ZTogZnVuY3Rpb24gb25DcmVhdGUoKSB7fSxcblxuICAvKipcbiAgICogQ2FsbGJhY2sgY2FsbGVkIHdoZW4gdGhlIHBvcHBlciBpcyB1cGRhdGVkLiBUaGlzIGNhbGxiYWNrIGlzIG5vdCBjYWxsZWRcbiAgICogb24gdGhlIGluaXRpYWxpemF0aW9uL2NyZWF0aW9uIG9mIHRoZSBwb3BwZXIsIGJ1dCBvbmx5IG9uIHN1YnNlcXVlbnRcbiAgICogdXBkYXRlcy48YnIgLz5cbiAgICogQnkgZGVmYXVsdCwgaXQgaXMgc2V0IHRvIG5vLW9wLjxiciAvPlxuICAgKiBBY2Nlc3MgUG9wcGVyLmpzIGluc3RhbmNlIHdpdGggYGRhdGEuaW5zdGFuY2VgLlxuICAgKiBAcHJvcCB7b25VcGRhdGV9XG4gICAqL1xuICBvblVwZGF0ZTogZnVuY3Rpb24gb25VcGRhdGUoKSB7fSxcblxuICAvKipcbiAgICogTGlzdCBvZiBtb2RpZmllcnMgdXNlZCB0byBtb2RpZnkgdGhlIG9mZnNldHMgYmVmb3JlIHRoZXkgYXJlIGFwcGxpZWQgdG8gdGhlIHBvcHBlci5cbiAgICogVGhleSBwcm92aWRlIG1vc3Qgb2YgdGhlIGZ1bmN0aW9uYWxpdGllcyBvZiBQb3BwZXIuanMuXG4gICAqIEBwcm9wIHttb2RpZmllcnN9XG4gICAqL1xuICBtb2RpZmllcnM6IG1vZGlmaWVyc1xufTtcblxuLyoqXG4gKiBAY2FsbGJhY2sgb25DcmVhdGVcbiAqIEBwYXJhbSB7ZGF0YU9iamVjdH0gZGF0YVxuICovXG5cbi8qKlxuICogQGNhbGxiYWNrIG9uVXBkYXRlXG4gKiBAcGFyYW0ge2RhdGFPYmplY3R9IGRhdGFcbiAqL1xuXG4vLyBVdGlsc1xuLy8gTWV0aG9kc1xudmFyIFBvcHBlciA9IGZ1bmN0aW9uICgpIHtcbiAgLyoqXG4gICAqIENyZWF0ZXMgYSBuZXcgUG9wcGVyLmpzIGluc3RhbmNlLlxuICAgKiBAY2xhc3MgUG9wcGVyXG4gICAqIEBwYXJhbSB7RWxlbWVudHxyZWZlcmVuY2VPYmplY3R9IHJlZmVyZW5jZSAtIFRoZSByZWZlcmVuY2UgZWxlbWVudCB1c2VkIHRvIHBvc2l0aW9uIHRoZSBwb3BwZXJcbiAgICogQHBhcmFtIHtFbGVtZW50fSBwb3BwZXIgLSBUaGUgSFRNTCAvIFhNTCBlbGVtZW50IHVzZWQgYXMgdGhlIHBvcHBlclxuICAgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyAtIFlvdXIgY3VzdG9tIG9wdGlvbnMgdG8gb3ZlcnJpZGUgdGhlIG9uZXMgZGVmaW5lZCBpbiBbRGVmYXVsdHNdKCNkZWZhdWx0cylcbiAgICogQHJldHVybiB7T2JqZWN0fSBpbnN0YW5jZSAtIFRoZSBnZW5lcmF0ZWQgUG9wcGVyLmpzIGluc3RhbmNlXG4gICAqL1xuICBmdW5jdGlvbiBQb3BwZXIocmVmZXJlbmNlLCBwb3BwZXIpIHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6IHt9O1xuICAgIGNsYXNzQ2FsbENoZWNrKHRoaXMsIFBvcHBlcik7XG5cbiAgICB0aGlzLnNjaGVkdWxlVXBkYXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHJlcXVlc3RBbmltYXRpb25GcmFtZShfdGhpcy51cGRhdGUpO1xuICAgIH07XG5cbiAgICAvLyBtYWtlIHVwZGF0ZSgpIGRlYm91bmNlZCwgc28gdGhhdCBpdCBvbmx5IHJ1bnMgYXQgbW9zdCBvbmNlLXBlci10aWNrXG4gICAgdGhpcy51cGRhdGUgPSBkZWJvdW5jZSh0aGlzLnVwZGF0ZS5iaW5kKHRoaXMpKTtcblxuICAgIC8vIHdpdGgge30gd2UgY3JlYXRlIGEgbmV3IG9iamVjdCB3aXRoIHRoZSBvcHRpb25zIGluc2lkZSBpdFxuICAgIHRoaXMub3B0aW9ucyA9IF9leHRlbmRzKHt9LCBQb3BwZXIuRGVmYXVsdHMsIG9wdGlvbnMpO1xuXG4gICAgLy8gaW5pdCBzdGF0ZVxuICAgIHRoaXMuc3RhdGUgPSB7XG4gICAgICBpc0Rlc3Ryb3llZDogZmFsc2UsXG4gICAgICBpc0NyZWF0ZWQ6IGZhbHNlLFxuICAgICAgc2Nyb2xsUGFyZW50czogW11cbiAgICB9O1xuXG4gICAgLy8gZ2V0IHJlZmVyZW5jZSBhbmQgcG9wcGVyIGVsZW1lbnRzIChhbGxvdyBqUXVlcnkgd3JhcHBlcnMpXG4gICAgdGhpcy5yZWZlcmVuY2UgPSByZWZlcmVuY2UgJiYgcmVmZXJlbmNlLmpxdWVyeSA/IHJlZmVyZW5jZVswXSA6IHJlZmVyZW5jZTtcbiAgICB0aGlzLnBvcHBlciA9IHBvcHBlciAmJiBwb3BwZXIuanF1ZXJ5ID8gcG9wcGVyWzBdIDogcG9wcGVyO1xuXG4gICAgLy8gRGVlcCBtZXJnZSBtb2RpZmllcnMgb3B0aW9uc1xuICAgIHRoaXMub3B0aW9ucy5tb2RpZmllcnMgPSB7fTtcbiAgICBPYmplY3Qua2V5cyhfZXh0ZW5kcyh7fSwgUG9wcGVyLkRlZmF1bHRzLm1vZGlmaWVycywgb3B0aW9ucy5tb2RpZmllcnMpKS5mb3JFYWNoKGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgICBfdGhpcy5vcHRpb25zLm1vZGlmaWVyc1tuYW1lXSA9IF9leHRlbmRzKHt9LCBQb3BwZXIuRGVmYXVsdHMubW9kaWZpZXJzW25hbWVdIHx8IHt9LCBvcHRpb25zLm1vZGlmaWVycyA/IG9wdGlvbnMubW9kaWZpZXJzW25hbWVdIDoge30pO1xuICAgIH0pO1xuXG4gICAgLy8gUmVmYWN0b3JpbmcgbW9kaWZpZXJzJyBsaXN0IChPYmplY3QgPT4gQXJyYXkpXG4gICAgdGhpcy5tb2RpZmllcnMgPSBPYmplY3Qua2V5cyh0aGlzLm9wdGlvbnMubW9kaWZpZXJzKS5tYXAoZnVuY3Rpb24gKG5hbWUpIHtcbiAgICAgIHJldHVybiBfZXh0ZW5kcyh7XG4gICAgICAgIG5hbWU6IG5hbWVcbiAgICAgIH0sIF90aGlzLm9wdGlvbnMubW9kaWZpZXJzW25hbWVdKTtcbiAgICB9KVxuICAgIC8vIHNvcnQgdGhlIG1vZGlmaWVycyBieSBvcmRlclxuICAgIC5zb3J0KGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgICByZXR1cm4gYS5vcmRlciAtIGIub3JkZXI7XG4gICAgfSk7XG5cbiAgICAvLyBtb2RpZmllcnMgaGF2ZSB0aGUgYWJpbGl0eSB0byBleGVjdXRlIGFyYml0cmFyeSBjb2RlIHdoZW4gUG9wcGVyLmpzIGdldCBpbml0ZWRcbiAgICAvLyBzdWNoIGNvZGUgaXMgZXhlY3V0ZWQgaW4gdGhlIHNhbWUgb3JkZXIgb2YgaXRzIG1vZGlmaWVyXG4gICAgLy8gdGhleSBjb3VsZCBhZGQgbmV3IHByb3BlcnRpZXMgdG8gdGhlaXIgb3B0aW9ucyBjb25maWd1cmF0aW9uXG4gICAgLy8gQkUgQVdBUkU6IGRvbid0IGFkZCBvcHRpb25zIHRvIGBvcHRpb25zLm1vZGlmaWVycy5uYW1lYCBidXQgdG8gYG1vZGlmaWVyT3B0aW9uc2AhXG4gICAgdGhpcy5tb2RpZmllcnMuZm9yRWFjaChmdW5jdGlvbiAobW9kaWZpZXJPcHRpb25zKSB7XG4gICAgICBpZiAobW9kaWZpZXJPcHRpb25zLmVuYWJsZWQgJiYgaXNGdW5jdGlvbihtb2RpZmllck9wdGlvbnMub25Mb2FkKSkge1xuICAgICAgICBtb2RpZmllck9wdGlvbnMub25Mb2FkKF90aGlzLnJlZmVyZW5jZSwgX3RoaXMucG9wcGVyLCBfdGhpcy5vcHRpb25zLCBtb2RpZmllck9wdGlvbnMsIF90aGlzLnN0YXRlKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIC8vIGZpcmUgdGhlIGZpcnN0IHVwZGF0ZSB0byBwb3NpdGlvbiB0aGUgcG9wcGVyIGluIHRoZSByaWdodCBwbGFjZVxuICAgIHRoaXMudXBkYXRlKCk7XG5cbiAgICB2YXIgZXZlbnRzRW5hYmxlZCA9IHRoaXMub3B0aW9ucy5ldmVudHNFbmFibGVkO1xuICAgIGlmIChldmVudHNFbmFibGVkKSB7XG4gICAgICAvLyBzZXR1cCBldmVudCBsaXN0ZW5lcnMsIHRoZXkgd2lsbCB0YWtlIGNhcmUgb2YgdXBkYXRlIHRoZSBwb3NpdGlvbiBpbiBzcGVjaWZpYyBzaXR1YXRpb25zXG4gICAgICB0aGlzLmVuYWJsZUV2ZW50TGlzdGVuZXJzKCk7XG4gICAgfVxuXG4gICAgdGhpcy5zdGF0ZS5ldmVudHNFbmFibGVkID0gZXZlbnRzRW5hYmxlZDtcbiAgfVxuXG4gIC8vIFdlIGNhbid0IHVzZSBjbGFzcyBwcm9wZXJ0aWVzIGJlY2F1c2UgdGhleSBkb24ndCBnZXQgbGlzdGVkIGluIHRoZVxuICAvLyBjbGFzcyBwcm90b3R5cGUgYW5kIGJyZWFrIHN0dWZmIGxpa2UgU2lub24gc3R1YnNcblxuXG4gIGNyZWF0ZUNsYXNzKFBvcHBlciwgW3tcbiAgICBrZXk6ICd1cGRhdGUnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiB1cGRhdGUkJDEoKSB7XG4gICAgICByZXR1cm4gdXBkYXRlLmNhbGwodGhpcyk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnZGVzdHJveScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGRlc3Ryb3kkJDEoKSB7XG4gICAgICByZXR1cm4gZGVzdHJveS5jYWxsKHRoaXMpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2VuYWJsZUV2ZW50TGlzdGVuZXJzJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gZW5hYmxlRXZlbnRMaXN0ZW5lcnMkJDEoKSB7XG4gICAgICByZXR1cm4gZW5hYmxlRXZlbnRMaXN0ZW5lcnMuY2FsbCh0aGlzKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdkaXNhYmxlRXZlbnRMaXN0ZW5lcnMnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBkaXNhYmxlRXZlbnRMaXN0ZW5lcnMkJDEoKSB7XG4gICAgICByZXR1cm4gZGlzYWJsZUV2ZW50TGlzdGVuZXJzLmNhbGwodGhpcyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2NoZWR1bGVzIGFuIHVwZGF0ZS4gSXQgd2lsbCBydW4gb24gdGhlIG5leHQgVUkgdXBkYXRlIGF2YWlsYWJsZS5cbiAgICAgKiBAbWV0aG9kIHNjaGVkdWxlVXBkYXRlXG4gICAgICogQG1lbWJlcm9mIFBvcHBlclxuICAgICAqL1xuXG5cbiAgICAvKipcbiAgICAgKiBDb2xsZWN0aW9uIG9mIHV0aWxpdGllcyB1c2VmdWwgd2hlbiB3cml0aW5nIGN1c3RvbSBtb2RpZmllcnMuXG4gICAgICogU3RhcnRpbmcgZnJvbSB2ZXJzaW9uIDEuNywgdGhpcyBtZXRob2QgaXMgYXZhaWxhYmxlIG9ubHkgaWYgeW91XG4gICAgICogaW5jbHVkZSBgcG9wcGVyLXV0aWxzLmpzYCBiZWZvcmUgYHBvcHBlci5qc2AuXG4gICAgICpcbiAgICAgKiAqKkRFUFJFQ0FUSU9OKio6IFRoaXMgd2F5IHRvIGFjY2VzcyBQb3BwZXJVdGlscyBpcyBkZXByZWNhdGVkXG4gICAgICogYW5kIHdpbGwgYmUgcmVtb3ZlZCBpbiB2MiEgVXNlIHRoZSBQb3BwZXJVdGlscyBtb2R1bGUgZGlyZWN0bHkgaW5zdGVhZC5cbiAgICAgKiBEdWUgdG8gdGhlIGhpZ2ggaW5zdGFiaWxpdHkgb2YgdGhlIG1ldGhvZHMgY29udGFpbmVkIGluIFV0aWxzLCB3ZSBjYW4ndFxuICAgICAqIGd1YXJhbnRlZSB0aGVtIHRvIGZvbGxvdyBzZW12ZXIuIFVzZSB0aGVtIGF0IHlvdXIgb3duIHJpc2shXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBwcml2YXRlXG4gICAgICogQHR5cGUge09iamVjdH1cbiAgICAgKiBAZGVwcmVjYXRlZCBzaW5jZSB2ZXJzaW9uIDEuOFxuICAgICAqIEBtZW1iZXIgVXRpbHNcbiAgICAgKiBAbWVtYmVyb2YgUG9wcGVyXG4gICAgICovXG5cbiAgfV0pO1xuICByZXR1cm4gUG9wcGVyO1xufSgpO1xuXG4vKipcbiAqIFRoZSBgcmVmZXJlbmNlT2JqZWN0YCBpcyBhbiBvYmplY3QgdGhhdCBwcm92aWRlcyBhbiBpbnRlcmZhY2UgY29tcGF0aWJsZSB3aXRoIFBvcHBlci5qc1xuICogYW5kIGxldHMgeW91IHVzZSBpdCBhcyByZXBsYWNlbWVudCBvZiBhIHJlYWwgRE9NIG5vZGUuPGJyIC8+XG4gKiBZb3UgY2FuIHVzZSB0aGlzIG1ldGhvZCB0byBwb3NpdGlvbiBhIHBvcHBlciByZWxhdGl2ZWx5IHRvIGEgc2V0IG9mIGNvb3JkaW5hdGVzXG4gKiBpbiBjYXNlIHlvdSBkb24ndCBoYXZlIGEgRE9NIG5vZGUgdG8gdXNlIGFzIHJlZmVyZW5jZS5cbiAqXG4gKiBgYGBcbiAqIG5ldyBQb3BwZXIocmVmZXJlbmNlT2JqZWN0LCBwb3BwZXJOb2RlKTtcbiAqIGBgYFxuICpcbiAqIE5COiBUaGlzIGZlYXR1cmUgaXNuJ3Qgc3VwcG9ydGVkIGluIEludGVybmV0IEV4cGxvcmVyIDEwLlxuICogQG5hbWUgcmVmZXJlbmNlT2JqZWN0XG4gKiBAcHJvcGVydHkge0Z1bmN0aW9ufSBkYXRhLmdldEJvdW5kaW5nQ2xpZW50UmVjdFxuICogQSBmdW5jdGlvbiB0aGF0IHJldHVybnMgYSBzZXQgb2YgY29vcmRpbmF0ZXMgY29tcGF0aWJsZSB3aXRoIHRoZSBuYXRpdmUgYGdldEJvdW5kaW5nQ2xpZW50UmVjdGAgbWV0aG9kLlxuICogQHByb3BlcnR5IHtudW1iZXJ9IGRhdGEuY2xpZW50V2lkdGhcbiAqIEFuIEVTNiBnZXR0ZXIgdGhhdCB3aWxsIHJldHVybiB0aGUgd2lkdGggb2YgdGhlIHZpcnR1YWwgcmVmZXJlbmNlIGVsZW1lbnQuXG4gKiBAcHJvcGVydHkge251bWJlcn0gZGF0YS5jbGllbnRIZWlnaHRcbiAqIEFuIEVTNiBnZXR0ZXIgdGhhdCB3aWxsIHJldHVybiB0aGUgaGVpZ2h0IG9mIHRoZSB2aXJ0dWFsIHJlZmVyZW5jZSBlbGVtZW50LlxuICovXG5cblxuUG9wcGVyLlV0aWxzID0gKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnID8gd2luZG93IDogZ2xvYmFsKS5Qb3BwZXJVdGlscztcblBvcHBlci5wbGFjZW1lbnRzID0gcGxhY2VtZW50cztcblBvcHBlci5EZWZhdWx0cyA9IERlZmF1bHRzO1xuXG5leHBvcnQgZGVmYXVsdCBQb3BwZXI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1wb3BwZXIuanMubWFwXG4iLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG5cbnZhciBfcmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJyZWFjdFwiKSk7XG5cbnZhciBfY3JlYXRlU3ZnSWNvbiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vdXRpbHMvY3JlYXRlU3ZnSWNvblwiKSk7XG5cbnZhciBfZGVmYXVsdCA9ICgwLCBfY3JlYXRlU3ZnSWNvbi5kZWZhdWx0KShfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwicGF0aFwiLCB7XG4gIGQ6IFwiTTE5IDEzaC02djZoLTJ2LTZINXYtMmg2VjVoMnY2aDZ2MnpcIlxufSksICdBZGQnKTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwO1xuXG52YXIgX3JlYWN0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicmVhY3RcIikpO1xuXG52YXIgX2NyZWF0ZVN2Z0ljb24gPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL3V0aWxzL2NyZWF0ZVN2Z0ljb25cIikpO1xuXG52YXIgX2RlZmF1bHQgPSAoMCwgX2NyZWF0ZVN2Z0ljb24uZGVmYXVsdCkoX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChcInBhdGhcIiwge1xuICBkOiBcIk0xMiAyQzYuNDggMiAyIDYuNDggMiAxMnM0LjQ4IDEwIDEwIDEwIDEwLTQuNDggMTAtMTBTMTcuNTIgMiAxMiAyem0wIDNjMS42NiAwIDMgMS4zNCAzIDNzLTEuMzQgMy0zIDMtMy0xLjM0LTMtMyAxLjM0LTMgMy0zem0wIDE0LjJjLTIuNSAwLTQuNzEtMS4yOC02LTMuMjIuMDMtMS45OSA0LTMuMDggNi0zLjA4IDEuOTkgMCA1Ljk3IDEuMDkgNiAzLjA4LTEuMjkgMS45NC0zLjUgMy4yMi02IDMuMjJ6XCJcbn0pLCAnQWNjb3VudENpcmNsZScpO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG5cbnZhciBfcmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJyZWFjdFwiKSk7XG5cbnZhciBfY3JlYXRlU3ZnSWNvbiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vdXRpbHMvY3JlYXRlU3ZnSWNvblwiKSk7XG5cbnZhciBfZGVmYXVsdCA9ICgwLCBfY3JlYXRlU3ZnSWNvbi5kZWZhdWx0KShfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9yZWFjdC5kZWZhdWx0LkZyYWdtZW50LCBudWxsLCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwiY2lyY2xlXCIsIHtcbiAgY3g6IFwiMTJcIixcbiAgY3k6IFwiMTJcIixcbiAgcjogXCIzLjJcIlxufSksIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJwYXRoXCIsIHtcbiAgZDogXCJNOSAyTDcuMTcgNEg0Yy0xLjEgMC0yIC45LTIgMnYxMmMwIDEuMS45IDIgMiAyaDE2YzEuMSAwIDItLjkgMi0yVjZjMC0xLjEtLjktMi0yLTJoLTMuMTdMMTUgMkg5em0zIDE1Yy0yLjc2IDAtNS0yLjI0LTUtNXMyLjI0LTUgNS01IDUgMi4yNCA1IDUtMi4yNCA1LTUgNXpcIlxufSkpLCAnUGhvdG9DYW1lcmEnKTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwO1xuXG52YXIgX3JlYWN0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicmVhY3RcIikpO1xuXG52YXIgX2NyZWF0ZVN2Z0ljb24gPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL3V0aWxzL2NyZWF0ZVN2Z0ljb25cIikpO1xuXG52YXIgX2RlZmF1bHQgPSAoMCwgX2NyZWF0ZVN2Z0ljb24uZGVmYXVsdCkoX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChcInBhdGhcIiwge1xuICBkOiBcIk0xMCAyMHYtNmg0djZoNXYtOGgzTDEyIDMgMiAxMmgzdjh6XCJcbn0pLCAnSG9tZScpO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG5cbnZhciBfcmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJyZWFjdFwiKSk7XG5cbnZhciBfY3JlYXRlU3ZnSWNvbiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vdXRpbHMvY3JlYXRlU3ZnSWNvblwiKSk7XG5cbnZhciBfZGVmYXVsdCA9ICgwLCBfY3JlYXRlU3ZnSWNvbi5kZWZhdWx0KShfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwicGF0aFwiLCB7XG4gIGQ6IFwiTTEyIDEyYzIuMjEgMCA0LTEuNzkgNC00cy0xLjc5LTQtNC00LTQgMS43OS00IDQgMS43OSA0IDQgNHptMCAyYy0yLjY3IDAtOCAxLjM0LTggNHYyaDE2di0yYzAtMi42Ni01LjMzLTQtOC00elwiXG59KSwgJ1BlcnNvbicpO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG5cbnZhciBfcmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJyZWFjdFwiKSk7XG5cbnZhciBfY3JlYXRlU3ZnSWNvbiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vdXRpbHMvY3JlYXRlU3ZnSWNvblwiKSk7XG5cbnZhciBfZGVmYXVsdCA9ICgwLCBfY3JlYXRlU3ZnSWNvbi5kZWZhdWx0KShfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwicGF0aFwiLCB7XG4gIGQ6IFwiTTEyIDJDNi40OCAyIDIgNi40OCAyIDEyczQuNDggMTAgMTAgMTAgMTAtNC40OCAxMC0xMFMxNy41MiAyIDEyIDJ6bTEgMTVoLTJ2LTZoMnY2em0wLThoLTJWN2gydjJ6XCJcbn0pLCAnSW5mbycpO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9yZXF1aXJlID0gcmVxdWlyZSgnLi9EcmFnZ2FibGUnKSxcbiAgICBEcmFnZ2FibGUgPSBfcmVxdWlyZS5kZWZhdWx0LFxuICAgIERyYWdnYWJsZUNvcmUgPSBfcmVxdWlyZS5EcmFnZ2FibGVDb3JlOyAvLyBQcmV2aW91cyB2ZXJzaW9ucyBvZiB0aGlzIGxpYiBleHBvcnRlZCA8RHJhZ2dhYmxlPiBhcyB0aGUgcm9vdCBleHBvcnQuIEFzIHRvIG5vLS8vIHRoZW0sIG9yIFR5cGVTY3JpcHQsIHdlIGV4cG9ydCAqYm90aCogYXMgdGhlIHJvb3QgYW5kIGFzICdkZWZhdWx0Jy5cbi8vIFNlZSBodHRwczovL2dpdGh1Yi5jb20vbXphYnJpc2tpZS9yZWFjdC1kcmFnZ2FibGUvcHVsbC8yNTRcbi8vIGFuZCBodHRwczovL2dpdGh1Yi5jb20vbXphYnJpc2tpZS9yZWFjdC1kcmFnZ2FibGUvaXNzdWVzLzI2NlxuXG5cbm1vZHVsZS5leHBvcnRzID0gRHJhZ2dhYmxlO1xubW9kdWxlLmV4cG9ydHMuZGVmYXVsdCA9IERyYWdnYWJsZTtcbm1vZHVsZS5leHBvcnRzLkRyYWdnYWJsZUNvcmUgPSBEcmFnZ2FibGVDb3JlOyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcblxudmFyIF9yZWFjdCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInJlYWN0XCIpKTtcblxudmFyIF9jcmVhdGVTdmdJY29uID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi91dGlscy9jcmVhdGVTdmdJY29uXCIpKTtcblxudmFyIF9kZWZhdWx0ID0gKDAsIF9jcmVhdGVTdmdJY29uLmRlZmF1bHQpKF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJwYXRoXCIsIHtcbiAgZDogXCJNMTIgOGMxLjEgMCAyLS45IDItMnMtLjktMi0yLTItMiAuOS0yIDIgLjkgMiAyIDJ6bTAgMmMtMS4xIDAtMiAuOS0yIDJzLjkgMiAyIDIgMi0uOSAyLTItLjktMi0yLTJ6bTAgNmMtMS4xIDAtMiAuOS0yIDJzLjkgMiAyIDIgMi0uOSAyLTItLjktMi0yLTJ6XCJcbn0pLCAnTW9yZVZlcnQnKTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwO1xuXG52YXIgX3JlYWN0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicmVhY3RcIikpO1xuXG52YXIgX2NyZWF0ZVN2Z0ljb24gPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL3V0aWxzL2NyZWF0ZVN2Z0ljb25cIikpO1xuXG52YXIgX2RlZmF1bHQgPSAoMCwgX2NyZWF0ZVN2Z0ljb24uZGVmYXVsdCkoX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChcInBhdGhcIiwge1xuICBkOiBcIk0xOSA2LjQxTDE3LjU5IDUgMTIgMTAuNTkgNi40MSA1IDUgNi40MSAxMC41OSAxMiA1IDE3LjU5IDYuNDEgMTkgMTIgMTMuNDEgMTcuNTkgMTkgMTkgMTcuNTkgMTMuNDEgMTJ6XCJcbn0pLCAnQ2xvc2UnKTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBjb21wb3NlID0gcmVxdWlyZSgncmVkdXgnKS5jb21wb3NlO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0cy5jb21wb3NlV2l0aERldlRvb2xzID0gKFxuICB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB3aW5kb3cuX19SRURVWF9ERVZUT09MU19FWFRFTlNJT05fQ09NUE9TRV9fID9cbiAgICB3aW5kb3cuX19SRURVWF9ERVZUT09MU19FWFRFTlNJT05fQ09NUE9TRV9fIDpcbiAgICBmdW5jdGlvbigpIHtcbiAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAwKSByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgaWYgKHR5cGVvZiBhcmd1bWVudHNbMF0gPT09ICdvYmplY3QnKSByZXR1cm4gY29tcG9zZTtcbiAgICAgIHJldHVybiBjb21wb3NlLmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7XG4gICAgfVxuKTtcblxuZXhwb3J0cy5kZXZUb29sc0VuaGFuY2VyID0gKFxuICB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB3aW5kb3cuX19SRURVWF9ERVZUT09MU19FWFRFTlNJT05fXyA/XG4gICAgd2luZG93Ll9fUkVEVVhfREVWVE9PTFNfRVhURU5TSU9OX18gOlxuICAgIGZ1bmN0aW9uKCkgeyByZXR1cm4gZnVuY3Rpb24obm9vcCkgeyByZXR1cm4gbm9vcDsgfSB9XG4pO1xuIiwiIWZ1bmN0aW9uKGUsdCl7XCJvYmplY3RcIj09dHlwZW9mIGV4cG9ydHMmJlwidW5kZWZpbmVkXCIhPXR5cGVvZiBtb2R1bGU/dChleHBvcnRzKTpcImZ1bmN0aW9uXCI9PXR5cGVvZiBkZWZpbmUmJmRlZmluZS5hbWQ/ZGVmaW5lKFtcImV4cG9ydHNcIl0sdCk6dChlLnJlZHV4TG9nZ2VyPWUucmVkdXhMb2dnZXJ8fHt9KX0odGhpcyxmdW5jdGlvbihlKXtcInVzZSBzdHJpY3RcIjtmdW5jdGlvbiB0KGUsdCl7ZS5zdXBlcl89dCxlLnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKHQucHJvdG90eXBlLHtjb25zdHJ1Y3Rvcjp7dmFsdWU6ZSxlbnVtZXJhYmxlOiExLHdyaXRhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMH19KX1mdW5jdGlvbiByKGUsdCl7T2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsXCJraW5kXCIse3ZhbHVlOmUsZW51bWVyYWJsZTohMH0pLHQmJnQubGVuZ3RoJiZPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcyxcInBhdGhcIix7dmFsdWU6dCxlbnVtZXJhYmxlOiEwfSl9ZnVuY3Rpb24gbihlLHQscil7bi5zdXBlcl8uY2FsbCh0aGlzLFwiRVwiLGUpLE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLFwibGhzXCIse3ZhbHVlOnQsZW51bWVyYWJsZTohMH0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLFwicmhzXCIse3ZhbHVlOnIsZW51bWVyYWJsZTohMH0pfWZ1bmN0aW9uIG8oZSx0KXtvLnN1cGVyXy5jYWxsKHRoaXMsXCJOXCIsZSksT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsXCJyaHNcIix7dmFsdWU6dCxlbnVtZXJhYmxlOiEwfSl9ZnVuY3Rpb24gaShlLHQpe2kuc3VwZXJfLmNhbGwodGhpcyxcIkRcIixlKSxPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcyxcImxoc1wiLHt2YWx1ZTp0LGVudW1lcmFibGU6ITB9KX1mdW5jdGlvbiBhKGUsdCxyKXthLnN1cGVyXy5jYWxsKHRoaXMsXCJBXCIsZSksT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsXCJpbmRleFwiLHt2YWx1ZTp0LGVudW1lcmFibGU6ITB9KSxPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcyxcIml0ZW1cIix7dmFsdWU6cixlbnVtZXJhYmxlOiEwfSl9ZnVuY3Rpb24gZihlLHQscil7dmFyIG49ZS5zbGljZSgocnx8dCkrMXx8ZS5sZW5ndGgpO3JldHVybiBlLmxlbmd0aD10PDA/ZS5sZW5ndGgrdDp0LGUucHVzaC5hcHBseShlLG4pLGV9ZnVuY3Rpb24gdShlKXt2YXIgdD1cInVuZGVmaW5lZFwiPT10eXBlb2YgZT9cInVuZGVmaW5lZFwiOk4oZSk7cmV0dXJuXCJvYmplY3RcIiE9PXQ/dDplPT09TWF0aD9cIm1hdGhcIjpudWxsPT09ZT9cIm51bGxcIjpBcnJheS5pc0FycmF5KGUpP1wiYXJyYXlcIjpcIltvYmplY3QgRGF0ZV1cIj09PU9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChlKT9cImRhdGVcIjpcImZ1bmN0aW9uXCI9PXR5cGVvZiBlLnRvU3RyaW5nJiYvXlxcLy4qXFwvLy50ZXN0KGUudG9TdHJpbmcoKSk/XCJyZWdleHBcIjpcIm9iamVjdFwifWZ1bmN0aW9uIGwoZSx0LHIsYyxzLGQscCl7cz1zfHxbXSxwPXB8fFtdO3ZhciBnPXMuc2xpY2UoMCk7aWYoXCJ1bmRlZmluZWRcIiE9dHlwZW9mIGQpe2lmKGMpe2lmKFwiZnVuY3Rpb25cIj09dHlwZW9mIGMmJmMoZyxkKSlyZXR1cm47aWYoXCJvYmplY3RcIj09PShcInVuZGVmaW5lZFwiPT10eXBlb2YgYz9cInVuZGVmaW5lZFwiOk4oYykpKXtpZihjLnByZWZpbHRlciYmYy5wcmVmaWx0ZXIoZyxkKSlyZXR1cm47aWYoYy5ub3JtYWxpemUpe3ZhciBoPWMubm9ybWFsaXplKGcsZCxlLHQpO2gmJihlPWhbMF0sdD1oWzFdKX19fWcucHVzaChkKX1cInJlZ2V4cFwiPT09dShlKSYmXCJyZWdleHBcIj09PXUodCkmJihlPWUudG9TdHJpbmcoKSx0PXQudG9TdHJpbmcoKSk7dmFyIHk9XCJ1bmRlZmluZWRcIj09dHlwZW9mIGU/XCJ1bmRlZmluZWRcIjpOKGUpLHY9XCJ1bmRlZmluZWRcIj09dHlwZW9mIHQ/XCJ1bmRlZmluZWRcIjpOKHQpLGI9XCJ1bmRlZmluZWRcIiE9PXl8fHAmJnBbcC5sZW5ndGgtMV0ubGhzJiZwW3AubGVuZ3RoLTFdLmxocy5oYXNPd25Qcm9wZXJ0eShkKSxtPVwidW5kZWZpbmVkXCIhPT12fHxwJiZwW3AubGVuZ3RoLTFdLnJocyYmcFtwLmxlbmd0aC0xXS5yaHMuaGFzT3duUHJvcGVydHkoZCk7aWYoIWImJm0pcihuZXcgbyhnLHQpKTtlbHNlIGlmKCFtJiZiKXIobmV3IGkoZyxlKSk7ZWxzZSBpZih1KGUpIT09dSh0KSlyKG5ldyBuKGcsZSx0KSk7ZWxzZSBpZihcImRhdGVcIj09PXUoZSkmJmUtdCE9PTApcihuZXcgbihnLGUsdCkpO2Vsc2UgaWYoXCJvYmplY3RcIj09PXkmJm51bGwhPT1lJiZudWxsIT09dClpZihwLmZpbHRlcihmdW5jdGlvbih0KXtyZXR1cm4gdC5saHM9PT1lfSkubGVuZ3RoKWUhPT10JiZyKG5ldyBuKGcsZSx0KSk7ZWxzZXtpZihwLnB1c2goe2xoczplLHJoczp0fSksQXJyYXkuaXNBcnJheShlKSl7dmFyIHc7ZS5sZW5ndGg7Zm9yKHc9MDt3PGUubGVuZ3RoO3crKyl3Pj10Lmxlbmd0aD9yKG5ldyBhKGcsdyxuZXcgaSh2b2lkIDAsZVt3XSkpKTpsKGVbd10sdFt3XSxyLGMsZyx3LHApO2Zvcig7dzx0Lmxlbmd0aDspcihuZXcgYShnLHcsbmV3IG8odm9pZCAwLHRbdysrXSkpKX1lbHNle3ZhciB4PU9iamVjdC5rZXlzKGUpLFM9T2JqZWN0LmtleXModCk7eC5mb3JFYWNoKGZ1bmN0aW9uKG4sbyl7dmFyIGk9Uy5pbmRleE9mKG4pO2k+PTA/KGwoZVtuXSx0W25dLHIsYyxnLG4scCksUz1mKFMsaSkpOmwoZVtuXSx2b2lkIDAscixjLGcsbixwKX0pLFMuZm9yRWFjaChmdW5jdGlvbihlKXtsKHZvaWQgMCx0W2VdLHIsYyxnLGUscCl9KX1wLmxlbmd0aD1wLmxlbmd0aC0xfWVsc2UgZSE9PXQmJihcIm51bWJlclwiPT09eSYmaXNOYU4oZSkmJmlzTmFOKHQpfHxyKG5ldyBuKGcsZSx0KSkpfWZ1bmN0aW9uIGMoZSx0LHIsbil7cmV0dXJuIG49bnx8W10sbChlLHQsZnVuY3Rpb24oZSl7ZSYmbi5wdXNoKGUpfSxyKSxuLmxlbmd0aD9uOnZvaWQgMH1mdW5jdGlvbiBzKGUsdCxyKXtpZihyLnBhdGgmJnIucGF0aC5sZW5ndGgpe3ZhciBuLG89ZVt0XSxpPXIucGF0aC5sZW5ndGgtMTtmb3Iobj0wO248aTtuKyspbz1vW3IucGF0aFtuXV07c3dpdGNoKHIua2luZCl7Y2FzZVwiQVwiOnMob1tyLnBhdGhbbl1dLHIuaW5kZXgsci5pdGVtKTticmVhaztjYXNlXCJEXCI6ZGVsZXRlIG9bci5wYXRoW25dXTticmVhaztjYXNlXCJFXCI6Y2FzZVwiTlwiOm9bci5wYXRoW25dXT1yLnJoc319ZWxzZSBzd2l0Y2goci5raW5kKXtjYXNlXCJBXCI6cyhlW3RdLHIuaW5kZXgsci5pdGVtKTticmVhaztjYXNlXCJEXCI6ZT1mKGUsdCk7YnJlYWs7Y2FzZVwiRVwiOmNhc2VcIk5cIjplW3RdPXIucmhzfXJldHVybiBlfWZ1bmN0aW9uIGQoZSx0LHIpe2lmKGUmJnQmJnImJnIua2luZCl7Zm9yKHZhciBuPWUsbz0tMSxpPXIucGF0aD9yLnBhdGgubGVuZ3RoLTE6MDsrK288aTspXCJ1bmRlZmluZWRcIj09dHlwZW9mIG5bci5wYXRoW29dXSYmKG5bci5wYXRoW29dXT1cIm51bWJlclwiPT10eXBlb2Ygci5wYXRoW29dP1tdOnt9KSxuPW5bci5wYXRoW29dXTtzd2l0Y2goci5raW5kKXtjYXNlXCJBXCI6cyhyLnBhdGg/bltyLnBhdGhbb11dOm4sci5pbmRleCxyLml0ZW0pO2JyZWFrO2Nhc2VcIkRcIjpkZWxldGUgbltyLnBhdGhbb11dO2JyZWFrO2Nhc2VcIkVcIjpjYXNlXCJOXCI6bltyLnBhdGhbb11dPXIucmhzfX19ZnVuY3Rpb24gcChlLHQscil7aWYoci5wYXRoJiZyLnBhdGgubGVuZ3RoKXt2YXIgbixvPWVbdF0saT1yLnBhdGgubGVuZ3RoLTE7Zm9yKG49MDtuPGk7bisrKW89b1tyLnBhdGhbbl1dO3N3aXRjaChyLmtpbmQpe2Nhc2VcIkFcIjpwKG9bci5wYXRoW25dXSxyLmluZGV4LHIuaXRlbSk7YnJlYWs7Y2FzZVwiRFwiOm9bci5wYXRoW25dXT1yLmxoczticmVhaztjYXNlXCJFXCI6b1tyLnBhdGhbbl1dPXIubGhzO2JyZWFrO2Nhc2VcIk5cIjpkZWxldGUgb1tyLnBhdGhbbl1dfX1lbHNlIHN3aXRjaChyLmtpbmQpe2Nhc2VcIkFcIjpwKGVbdF0sci5pbmRleCxyLml0ZW0pO2JyZWFrO2Nhc2VcIkRcIjplW3RdPXIubGhzO2JyZWFrO2Nhc2VcIkVcIjplW3RdPXIubGhzO2JyZWFrO2Nhc2VcIk5cIjplPWYoZSx0KX1yZXR1cm4gZX1mdW5jdGlvbiBnKGUsdCxyKXtpZihlJiZ0JiZyJiZyLmtpbmQpe3ZhciBuLG8saT1lO2ZvcihvPXIucGF0aC5sZW5ndGgtMSxuPTA7bjxvO24rKylcInVuZGVmaW5lZFwiPT10eXBlb2YgaVtyLnBhdGhbbl1dJiYoaVtyLnBhdGhbbl1dPXt9KSxpPWlbci5wYXRoW25dXTtzd2l0Y2goci5raW5kKXtjYXNlXCJBXCI6cChpW3IucGF0aFtuXV0sci5pbmRleCxyLml0ZW0pO2JyZWFrO2Nhc2VcIkRcIjppW3IucGF0aFtuXV09ci5saHM7YnJlYWs7Y2FzZVwiRVwiOmlbci5wYXRoW25dXT1yLmxoczticmVhaztjYXNlXCJOXCI6ZGVsZXRlIGlbci5wYXRoW25dXX19fWZ1bmN0aW9uIGgoZSx0LHIpe2lmKGUmJnQpe3ZhciBuPWZ1bmN0aW9uKG4pe3ImJiFyKGUsdCxuKXx8ZChlLHQsbil9O2woZSx0LG4pfX1mdW5jdGlvbiB5KGUpe3JldHVyblwiY29sb3I6IFwiK0ZbZV0uY29sb3IrXCI7IGZvbnQtd2VpZ2h0OiBib2xkXCJ9ZnVuY3Rpb24gdihlKXt2YXIgdD1lLmtpbmQscj1lLnBhdGgsbj1lLmxocyxvPWUucmhzLGk9ZS5pbmRleCxhPWUuaXRlbTtzd2l0Y2godCl7Y2FzZVwiRVwiOnJldHVybltyLmpvaW4oXCIuXCIpLG4sXCLihpJcIixvXTtjYXNlXCJOXCI6cmV0dXJuW3Iuam9pbihcIi5cIiksb107Y2FzZVwiRFwiOnJldHVybltyLmpvaW4oXCIuXCIpXTtjYXNlXCJBXCI6cmV0dXJuW3Iuam9pbihcIi5cIikrXCJbXCIraStcIl1cIixhXTtkZWZhdWx0OnJldHVybltdfX1mdW5jdGlvbiBiKGUsdCxyLG4pe3ZhciBvPWMoZSx0KTt0cnl7bj9yLmdyb3VwQ29sbGFwc2VkKFwiZGlmZlwiKTpyLmdyb3VwKFwiZGlmZlwiKX1jYXRjaChlKXtyLmxvZyhcImRpZmZcIil9bz9vLmZvckVhY2goZnVuY3Rpb24oZSl7dmFyIHQ9ZS5raW5kLG49dihlKTtyLmxvZy5hcHBseShyLFtcIiVjIFwiK0ZbdF0udGV4dCx5KHQpXS5jb25jYXQoUChuKSkpfSk6ci5sb2coXCLigJTigJQgbm8gZGlmZiDigJTigJRcIik7dHJ5e3IuZ3JvdXBFbmQoKX1jYXRjaChlKXtyLmxvZyhcIuKAlOKAlCBkaWZmIGVuZCDigJTigJQgXCIpfX1mdW5jdGlvbiBtKGUsdCxyLG4pe3N3aXRjaChcInVuZGVmaW5lZFwiPT10eXBlb2YgZT9cInVuZGVmaW5lZFwiOk4oZSkpe2Nhc2VcIm9iamVjdFwiOnJldHVyblwiZnVuY3Rpb25cIj09dHlwZW9mIGVbbl0/ZVtuXS5hcHBseShlLFAocikpOmVbbl07Y2FzZVwiZnVuY3Rpb25cIjpyZXR1cm4gZSh0KTtkZWZhdWx0OnJldHVybiBlfX1mdW5jdGlvbiB3KGUpe3ZhciB0PWUudGltZXN0YW1wLHI9ZS5kdXJhdGlvbjtyZXR1cm4gZnVuY3Rpb24oZSxuLG8pe3ZhciBpPVtcImFjdGlvblwiXTtyZXR1cm4gaS5wdXNoKFwiJWNcIitTdHJpbmcoZS50eXBlKSksdCYmaS5wdXNoKFwiJWNAIFwiK24pLHImJmkucHVzaChcIiVjKGluIFwiK28udG9GaXhlZCgyKStcIiBtcylcIiksaS5qb2luKFwiIFwiKX19ZnVuY3Rpb24geChlLHQpe3ZhciByPXQubG9nZ2VyLG49dC5hY3Rpb25UcmFuc2Zvcm1lcixvPXQudGl0bGVGb3JtYXR0ZXIsaT12b2lkIDA9PT1vP3codCk6byxhPXQuY29sbGFwc2VkLGY9dC5jb2xvcnMsdT10LmxldmVsLGw9dC5kaWZmLGM9XCJ1bmRlZmluZWRcIj09dHlwZW9mIHQudGl0bGVGb3JtYXR0ZXI7ZS5mb3JFYWNoKGZ1bmN0aW9uKG8scyl7dmFyIGQ9by5zdGFydGVkLHA9by5zdGFydGVkVGltZSxnPW8uYWN0aW9uLGg9by5wcmV2U3RhdGUseT1vLmVycm9yLHY9by50b29rLHc9by5uZXh0U3RhdGUseD1lW3MrMV07eCYmKHc9eC5wcmV2U3RhdGUsdj14LnN0YXJ0ZWQtZCk7dmFyIFM9bihnKSxrPVwiZnVuY3Rpb25cIj09dHlwZW9mIGE/YShmdW5jdGlvbigpe3JldHVybiB3fSxnLG8pOmEsaj1EKHApLEU9Zi50aXRsZT9cImNvbG9yOiBcIitmLnRpdGxlKFMpK1wiO1wiOlwiXCIsQT1bXCJjb2xvcjogZ3JheTsgZm9udC13ZWlnaHQ6IGxpZ2h0ZXI7XCJdO0EucHVzaChFKSx0LnRpbWVzdGFtcCYmQS5wdXNoKFwiY29sb3I6IGdyYXk7IGZvbnQtd2VpZ2h0OiBsaWdodGVyO1wiKSx0LmR1cmF0aW9uJiZBLnB1c2goXCJjb2xvcjogZ3JheTsgZm9udC13ZWlnaHQ6IGxpZ2h0ZXI7XCIpO3ZhciBPPWkoUyxqLHYpO3RyeXtrP2YudGl0bGUmJmM/ci5ncm91cENvbGxhcHNlZC5hcHBseShyLFtcIiVjIFwiK09dLmNvbmNhdChBKSk6ci5ncm91cENvbGxhcHNlZChPKTpmLnRpdGxlJiZjP3IuZ3JvdXAuYXBwbHkocixbXCIlYyBcIitPXS5jb25jYXQoQSkpOnIuZ3JvdXAoTyl9Y2F0Y2goZSl7ci5sb2coTyl9dmFyIE49bSh1LFMsW2hdLFwicHJldlN0YXRlXCIpLFA9bSh1LFMsW1NdLFwiYWN0aW9uXCIpLEM9bSh1LFMsW3ksaF0sXCJlcnJvclwiKSxGPW0odSxTLFt3XSxcIm5leHRTdGF0ZVwiKTtpZihOKWlmKGYucHJldlN0YXRlKXt2YXIgTD1cImNvbG9yOiBcIitmLnByZXZTdGF0ZShoKStcIjsgZm9udC13ZWlnaHQ6IGJvbGRcIjtyW05dKFwiJWMgcHJldiBzdGF0ZVwiLEwsaCl9ZWxzZSByW05dKFwicHJldiBzdGF0ZVwiLGgpO2lmKFApaWYoZi5hY3Rpb24pe3ZhciBUPVwiY29sb3I6IFwiK2YuYWN0aW9uKFMpK1wiOyBmb250LXdlaWdodDogYm9sZFwiO3JbUF0oXCIlYyBhY3Rpb24gICAgXCIsVCxTKX1lbHNlIHJbUF0oXCJhY3Rpb24gICAgXCIsUyk7aWYoeSYmQylpZihmLmVycm9yKXt2YXIgTT1cImNvbG9yOiBcIitmLmVycm9yKHksaCkrXCI7IGZvbnQtd2VpZ2h0OiBib2xkO1wiO3JbQ10oXCIlYyBlcnJvciAgICAgXCIsTSx5KX1lbHNlIHJbQ10oXCJlcnJvciAgICAgXCIseSk7aWYoRilpZihmLm5leHRTdGF0ZSl7dmFyIF89XCJjb2xvcjogXCIrZi5uZXh0U3RhdGUodykrXCI7IGZvbnQtd2VpZ2h0OiBib2xkXCI7cltGXShcIiVjIG5leHQgc3RhdGVcIixfLHcpfWVsc2UgcltGXShcIm5leHQgc3RhdGVcIix3KTtsJiZiKGgsdyxyLGspO3RyeXtyLmdyb3VwRW5kKCl9Y2F0Y2goZSl7ci5sb2coXCLigJTigJQgbG9nIGVuZCDigJTigJRcIil9fSl9ZnVuY3Rpb24gUygpe3ZhciBlPWFyZ3VtZW50cy5sZW5ndGg+MCYmdm9pZCAwIT09YXJndW1lbnRzWzBdP2FyZ3VtZW50c1swXTp7fSx0PU9iamVjdC5hc3NpZ24oe30sTCxlKSxyPXQubG9nZ2VyLG49dC5zdGF0ZVRyYW5zZm9ybWVyLG89dC5lcnJvclRyYW5zZm9ybWVyLGk9dC5wcmVkaWNhdGUsYT10LmxvZ0Vycm9ycyxmPXQuZGlmZlByZWRpY2F0ZTtpZihcInVuZGVmaW5lZFwiPT10eXBlb2YgcilyZXR1cm4gZnVuY3Rpb24oKXtyZXR1cm4gZnVuY3Rpb24oZSl7cmV0dXJuIGZ1bmN0aW9uKHQpe3JldHVybiBlKHQpfX19O2lmKGUuZ2V0U3RhdGUmJmUuZGlzcGF0Y2gpcmV0dXJuIGNvbnNvbGUuZXJyb3IoXCJbcmVkdXgtbG9nZ2VyXSByZWR1eC1sb2dnZXIgbm90IGluc3RhbGxlZC4gTWFrZSBzdXJlIHRvIHBhc3MgbG9nZ2VyIGluc3RhbmNlIGFzIG1pZGRsZXdhcmU6XFxuLy8gTG9nZ2VyIHdpdGggZGVmYXVsdCBvcHRpb25zXFxuaW1wb3J0IHsgbG9nZ2VyIH0gZnJvbSAncmVkdXgtbG9nZ2VyJ1xcbmNvbnN0IHN0b3JlID0gY3JlYXRlU3RvcmUoXFxuICByZWR1Y2VyLFxcbiAgYXBwbHlNaWRkbGV3YXJlKGxvZ2dlcilcXG4pXFxuLy8gT3IgeW91IGNhbiBjcmVhdGUgeW91ciBvd24gbG9nZ2VyIHdpdGggY3VzdG9tIG9wdGlvbnMgaHR0cDovL2JpdC5seS9yZWR1eC1sb2dnZXItb3B0aW9uc1xcbmltcG9ydCBjcmVhdGVMb2dnZXIgZnJvbSAncmVkdXgtbG9nZ2VyJ1xcbmNvbnN0IGxvZ2dlciA9IGNyZWF0ZUxvZ2dlcih7XFxuICAvLyAuLi5vcHRpb25zXFxufSk7XFxuY29uc3Qgc3RvcmUgPSBjcmVhdGVTdG9yZShcXG4gIHJlZHVjZXIsXFxuICBhcHBseU1pZGRsZXdhcmUobG9nZ2VyKVxcbilcXG5cIiksZnVuY3Rpb24oKXtyZXR1cm4gZnVuY3Rpb24oZSl7cmV0dXJuIGZ1bmN0aW9uKHQpe3JldHVybiBlKHQpfX19O3ZhciB1PVtdO3JldHVybiBmdW5jdGlvbihlKXt2YXIgcj1lLmdldFN0YXRlO3JldHVybiBmdW5jdGlvbihlKXtyZXR1cm4gZnVuY3Rpb24obCl7aWYoXCJmdW5jdGlvblwiPT10eXBlb2YgaSYmIWkocixsKSlyZXR1cm4gZShsKTt2YXIgYz17fTt1LnB1c2goYyksYy5zdGFydGVkPU8ubm93KCksYy5zdGFydGVkVGltZT1uZXcgRGF0ZSxjLnByZXZTdGF0ZT1uKHIoKSksYy5hY3Rpb249bDt2YXIgcz12b2lkIDA7aWYoYSl0cnl7cz1lKGwpfWNhdGNoKGUpe2MuZXJyb3I9byhlKX1lbHNlIHM9ZShsKTtjLnRvb2s9Ty5ub3coKS1jLnN0YXJ0ZWQsYy5uZXh0U3RhdGU9bihyKCkpO3ZhciBkPXQuZGlmZiYmXCJmdW5jdGlvblwiPT10eXBlb2YgZj9mKHIsbCk6dC5kaWZmO2lmKHgodSxPYmplY3QuYXNzaWduKHt9LHQse2RpZmY6ZH0pKSx1Lmxlbmd0aD0wLGMuZXJyb3IpdGhyb3cgYy5lcnJvcjtyZXR1cm4gc319fX12YXIgayxqLEU9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gbmV3IEFycmF5KHQrMSkuam9pbihlKX0sQT1mdW5jdGlvbihlLHQpe3JldHVybiBFKFwiMFwiLHQtZS50b1N0cmluZygpLmxlbmd0aCkrZX0sRD1mdW5jdGlvbihlKXtyZXR1cm4gQShlLmdldEhvdXJzKCksMikrXCI6XCIrQShlLmdldE1pbnV0ZXMoKSwyKStcIjpcIitBKGUuZ2V0U2Vjb25kcygpLDIpK1wiLlwiK0EoZS5nZXRNaWxsaXNlY29uZHMoKSwzKX0sTz1cInVuZGVmaW5lZFwiIT10eXBlb2YgcGVyZm9ybWFuY2UmJm51bGwhPT1wZXJmb3JtYW5jZSYmXCJmdW5jdGlvblwiPT10eXBlb2YgcGVyZm9ybWFuY2Uubm93P3BlcmZvcm1hbmNlOkRhdGUsTj1cImZ1bmN0aW9uXCI9PXR5cGVvZiBTeW1ib2wmJlwic3ltYm9sXCI9PXR5cGVvZiBTeW1ib2wuaXRlcmF0b3I/ZnVuY3Rpb24oZSl7cmV0dXJuIHR5cGVvZiBlfTpmdW5jdGlvbihlKXtyZXR1cm4gZSYmXCJmdW5jdGlvblwiPT10eXBlb2YgU3ltYm9sJiZlLmNvbnN0cnVjdG9yPT09U3ltYm9sJiZlIT09U3ltYm9sLnByb3RvdHlwZT9cInN5bWJvbFwiOnR5cGVvZiBlfSxQPWZ1bmN0aW9uKGUpe2lmKEFycmF5LmlzQXJyYXkoZSkpe2Zvcih2YXIgdD0wLHI9QXJyYXkoZS5sZW5ndGgpO3Q8ZS5sZW5ndGg7dCsrKXJbdF09ZVt0XTtyZXR1cm4gcn1yZXR1cm4gQXJyYXkuZnJvbShlKX0sQz1bXTtrPVwib2JqZWN0XCI9PT0oXCJ1bmRlZmluZWRcIj09dHlwZW9mIGdsb2JhbD9cInVuZGVmaW5lZFwiOk4oZ2xvYmFsKSkmJmdsb2JhbD9nbG9iYWw6XCJ1bmRlZmluZWRcIiE9dHlwZW9mIHdpbmRvdz93aW5kb3c6e30saj1rLkRlZXBEaWZmLGomJkMucHVzaChmdW5jdGlvbigpe1widW5kZWZpbmVkXCIhPXR5cGVvZiBqJiZrLkRlZXBEaWZmPT09YyYmKGsuRGVlcERpZmY9aixqPXZvaWQgMCl9KSx0KG4sciksdChvLHIpLHQoaSxyKSx0KGEsciksT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoYyx7ZGlmZjp7dmFsdWU6YyxlbnVtZXJhYmxlOiEwfSxvYnNlcnZhYmxlRGlmZjp7dmFsdWU6bCxlbnVtZXJhYmxlOiEwfSxhcHBseURpZmY6e3ZhbHVlOmgsZW51bWVyYWJsZTohMH0sYXBwbHlDaGFuZ2U6e3ZhbHVlOmQsZW51bWVyYWJsZTohMH0scmV2ZXJ0Q2hhbmdlOnt2YWx1ZTpnLGVudW1lcmFibGU6ITB9LGlzQ29uZmxpY3Q6e3ZhbHVlOmZ1bmN0aW9uKCl7cmV0dXJuXCJ1bmRlZmluZWRcIiE9dHlwZW9mIGp9LGVudW1lcmFibGU6ITB9LG5vQ29uZmxpY3Q6e3ZhbHVlOmZ1bmN0aW9uKCl7cmV0dXJuIEMmJihDLmZvckVhY2goZnVuY3Rpb24oZSl7ZSgpfSksQz1udWxsKSxjfSxlbnVtZXJhYmxlOiEwfX0pO3ZhciBGPXtFOntjb2xvcjpcIiMyMTk2RjNcIix0ZXh0OlwiQ0hBTkdFRDpcIn0sTjp7Y29sb3I6XCIjNENBRjUwXCIsdGV4dDpcIkFEREVEOlwifSxEOntjb2xvcjpcIiNGNDQzMzZcIix0ZXh0OlwiREVMRVRFRDpcIn0sQTp7Y29sb3I6XCIjMjE5NkYzXCIsdGV4dDpcIkFSUkFZOlwifX0sTD17bGV2ZWw6XCJsb2dcIixsb2dnZXI6Y29uc29sZSxsb2dFcnJvcnM6ITAsY29sbGFwc2VkOnZvaWQgMCxwcmVkaWNhdGU6dm9pZCAwLGR1cmF0aW9uOiExLHRpbWVzdGFtcDohMCxzdGF0ZVRyYW5zZm9ybWVyOmZ1bmN0aW9uKGUpe3JldHVybiBlfSxhY3Rpb25UcmFuc2Zvcm1lcjpmdW5jdGlvbihlKXtyZXR1cm4gZX0sZXJyb3JUcmFuc2Zvcm1lcjpmdW5jdGlvbihlKXtyZXR1cm4gZX0sY29sb3JzOnt0aXRsZTpmdW5jdGlvbigpe3JldHVyblwiaW5oZXJpdFwifSxwcmV2U3RhdGU6ZnVuY3Rpb24oKXtyZXR1cm5cIiM5RTlFOUVcIn0sYWN0aW9uOmZ1bmN0aW9uKCl7cmV0dXJuXCIjMDNBOUY0XCJ9LG5leHRTdGF0ZTpmdW5jdGlvbigpe3JldHVyblwiIzRDQUY1MFwifSxlcnJvcjpmdW5jdGlvbigpe3JldHVyblwiI0YyMDQwNFwifX0sZGlmZjohMSxkaWZmUHJlZGljYXRlOnZvaWQgMCx0cmFuc2Zvcm1lcjp2b2lkIDB9LFQ9ZnVuY3Rpb24oKXt2YXIgZT1hcmd1bWVudHMubGVuZ3RoPjAmJnZvaWQgMCE9PWFyZ3VtZW50c1swXT9hcmd1bWVudHNbMF06e30sdD1lLmRpc3BhdGNoLHI9ZS5nZXRTdGF0ZTtyZXR1cm5cImZ1bmN0aW9uXCI9PXR5cGVvZiB0fHxcImZ1bmN0aW9uXCI9PXR5cGVvZiByP1MoKSh7ZGlzcGF0Y2g6dCxnZXRTdGF0ZTpyfSk6dm9pZCBjb25zb2xlLmVycm9yKFwiXFxuW3JlZHV4LWxvZ2dlciB2M10gQlJFQUtJTkcgQ0hBTkdFXFxuW3JlZHV4LWxvZ2dlciB2M10gU2luY2UgMy4wLjAgcmVkdXgtbG9nZ2VyIGV4cG9ydHMgYnkgZGVmYXVsdCBsb2dnZXIgd2l0aCBkZWZhdWx0IHNldHRpbmdzLlxcbltyZWR1eC1sb2dnZXIgdjNdIENoYW5nZVxcbltyZWR1eC1sb2dnZXIgdjNdIGltcG9ydCBjcmVhdGVMb2dnZXIgZnJvbSAncmVkdXgtbG9nZ2VyJ1xcbltyZWR1eC1sb2dnZXIgdjNdIHRvXFxuW3JlZHV4LWxvZ2dlciB2M10gaW1wb3J0IHsgY3JlYXRlTG9nZ2VyIH0gZnJvbSAncmVkdXgtbG9nZ2VyJ1xcblwiKX07ZS5kZWZhdWx0cz1MLGUuY3JlYXRlTG9nZ2VyPVMsZS5sb2dnZXI9VCxlLmRlZmF1bHQ9VCxPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KX0pO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG5cbnZhciBfY3JlYXRlV2ViU3RvcmFnZSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vY3JlYXRlV2ViU3RvcmFnZVwiKSk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbnZhciBfZGVmYXVsdCA9ICgwLCBfY3JlYXRlV2ViU3RvcmFnZS5kZWZhdWx0KSgnbG9jYWwnKTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qXG4gIE1JVCBMaWNlbnNlIGh0dHA6Ly93d3cub3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvbWl0LWxpY2Vuc2UucGhwXG4gIEF1dGhvciBUb2JpYXMgS29wcGVycyBAc29rcmFcbiovXG4vLyBjc3MgYmFzZSBjb2RlLCBpbmplY3RlZCBieSB0aGUgY3NzLWxvYWRlclxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGZ1bmMtbmFtZXNcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHVzZVNvdXJjZU1hcCkge1xuICB2YXIgbGlzdCA9IFtdOyAvLyByZXR1cm4gdGhlIGxpc3Qgb2YgbW9kdWxlcyBhcyBjc3Mgc3RyaW5nXG5cbiAgbGlzdC50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgIHJldHVybiB0aGlzLm1hcChmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgdmFyIGNvbnRlbnQgPSBjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKGl0ZW0sIHVzZVNvdXJjZU1hcCk7XG5cbiAgICAgIGlmIChpdGVtWzJdKSB7XG4gICAgICAgIHJldHVybiBcIkBtZWRpYSBcIi5jb25jYXQoaXRlbVsyXSwgXCIge1wiKS5jb25jYXQoY29udGVudCwgXCJ9XCIpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gY29udGVudDtcbiAgICB9KS5qb2luKCcnKTtcbiAgfTsgLy8gaW1wb3J0IGEgbGlzdCBvZiBtb2R1bGVzIGludG8gdGhlIGxpc3RcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGZ1bmMtbmFtZXNcblxuXG4gIGxpc3QuaSA9IGZ1bmN0aW9uIChtb2R1bGVzLCBtZWRpYVF1ZXJ5LCBkZWR1cGUpIHtcbiAgICBpZiAodHlwZW9mIG1vZHVsZXMgPT09ICdzdHJpbmcnKSB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcGFyYW0tcmVhc3NpZ25cbiAgICAgIG1vZHVsZXMgPSBbW251bGwsIG1vZHVsZXMsICcnXV07XG4gICAgfVxuXG4gICAgdmFyIGFscmVhZHlJbXBvcnRlZE1vZHVsZXMgPSB7fTtcblxuICAgIGlmIChkZWR1cGUpIHtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcHJlZmVyLWRlc3RydWN0dXJpbmdcbiAgICAgICAgdmFyIGlkID0gdGhpc1tpXVswXTtcblxuICAgICAgICBpZiAoaWQgIT0gbnVsbCkge1xuICAgICAgICAgIGFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaWRdID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBtb2R1bGVzLmxlbmd0aDsgX2krKykge1xuICAgICAgdmFyIGl0ZW0gPSBbXS5jb25jYXQobW9kdWxlc1tfaV0pO1xuXG4gICAgICBpZiAoZGVkdXBlICYmIGFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaXRlbVswXV0pIHtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnRpbnVlXG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICBpZiAobWVkaWFRdWVyeSkge1xuICAgICAgICBpZiAoIWl0ZW1bMl0pIHtcbiAgICAgICAgICBpdGVtWzJdID0gbWVkaWFRdWVyeTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpdGVtWzJdID0gXCJcIi5jb25jYXQobWVkaWFRdWVyeSwgXCIgYW5kIFwiKS5jb25jYXQoaXRlbVsyXSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgbGlzdC5wdXNoKGl0ZW0pO1xuICAgIH1cbiAgfTtcblxuICByZXR1cm4gbGlzdDtcbn07XG5cbmZ1bmN0aW9uIGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcoaXRlbSwgdXNlU291cmNlTWFwKSB7XG4gIHZhciBjb250ZW50ID0gaXRlbVsxXSB8fCAnJzsgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHByZWZlci1kZXN0cnVjdHVyaW5nXG5cbiAgdmFyIGNzc01hcHBpbmcgPSBpdGVtWzNdO1xuXG4gIGlmICghY3NzTWFwcGluZykge1xuICAgIHJldHVybiBjb250ZW50O1xuICB9XG5cbiAgaWYgKHVzZVNvdXJjZU1hcCAmJiB0eXBlb2YgYnRvYSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHZhciBzb3VyY2VNYXBwaW5nID0gdG9Db21tZW50KGNzc01hcHBpbmcpO1xuICAgIHZhciBzb3VyY2VVUkxzID0gY3NzTWFwcGluZy5zb3VyY2VzLm1hcChmdW5jdGlvbiAoc291cmNlKSB7XG4gICAgICByZXR1cm4gXCIvKiMgc291cmNlVVJMPVwiLmNvbmNhdChjc3NNYXBwaW5nLnNvdXJjZVJvb3QgfHwgJycpLmNvbmNhdChzb3VyY2UsIFwiICovXCIpO1xuICAgIH0pO1xuICAgIHJldHVybiBbY29udGVudF0uY29uY2F0KHNvdXJjZVVSTHMpLmNvbmNhdChbc291cmNlTWFwcGluZ10pLmpvaW4oJ1xcbicpO1xuICB9XG5cbiAgcmV0dXJuIFtjb250ZW50XS5qb2luKCdcXG4nKTtcbn0gLy8gQWRhcHRlZCBmcm9tIGNvbnZlcnQtc291cmNlLW1hcCAoTUlUKVxuXG5cbmZ1bmN0aW9uIHRvQ29tbWVudChzb3VyY2VNYXApIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVuZGVmXG4gIHZhciBiYXNlNjQgPSBidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShzb3VyY2VNYXApKSkpO1xuICB2YXIgZGF0YSA9IFwic291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsXCIuY29uY2F0KGJhc2U2NCk7XG4gIHJldHVybiBcIi8qIyBcIi5jb25jYXQoZGF0YSwgXCIgKi9cIik7XG59IiwiLyoqXG4gKiBXQVJOSU5HOiBEb24ndCBpbXBvcnQgdGhpcyBkaXJlY3RseS5cbiAqIFVzZSBgTXVpRXJyb3JgIGZyb20gYEBtYXRlcmlhbC11aS91dGlscy9tYWNyb3MvTXVpRXJyb3IubWFjcm9gIGluc3RlYWQuXG4gKiBAcGFyYW0ge251bWJlcn0gY29kZVxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBmb3JtYXRNdWlFcnJvck1lc3NhZ2UoY29kZSkge1xuICAvLyBBcHBseSBiYWJlbC1wbHVnaW4tdHJhbnNmb3JtLXRlbXBsYXRlLWxpdGVyYWxzIGluIGxvb3NlIG1vZGVcbiAgLy8gbG9vc2UgbW9kZSBpcyBzYWZlIGlmZiB3ZSdyZSBjb25jYXRlbmF0aW5nIHByaW1pdGl2ZXNcbiAgLy8gc2VlIGh0dHBzOi8vYmFiZWxqcy5pby9kb2NzL2VuL2JhYmVsLXBsdWdpbi10cmFuc2Zvcm0tdGVtcGxhdGUtbGl0ZXJhbHMjbG9vc2VcblxuICAvKiBlc2xpbnQtZGlzYWJsZSBwcmVmZXItdGVtcGxhdGUgKi9cbiAgdmFyIHVybCA9ICdodHRwczovL21hdGVyaWFsLXVpLmNvbS9wcm9kdWN0aW9uLWVycm9yLz9jb2RlPScgKyBjb2RlO1xuXG4gIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgLy8gcmVzdCBwYXJhbXMgb3Zlci10cmFuc3BpbGUgZm9yIHRoaXMgY2FzZVxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBwcmVmZXItcmVzdC1wYXJhbXNcbiAgICB1cmwgKz0gJyZhcmdzW109JyArIGVuY29kZVVSSUNvbXBvbmVudChhcmd1bWVudHNbaV0pO1xuICB9XG5cbiAgcmV0dXJuICdNaW5pZmllZCBNYXRlcmlhbC1VSSBlcnJvciAjJyArIGNvZGUgKyAnOyB2aXNpdCAnICsgdXJsICsgJyBmb3IgdGhlIGZ1bGwgbWVzc2FnZS4nO1xuICAvKiBlc2xpbnQtZW5hYmxlIHByZWZlci10ZW1wbGF0ZSAqL1xufSIsIi8qKiBAbGljZW5zZSBSZWFjdCB2MTYuMTMuMVxuICogcmVhY3QucHJvZHVjdGlvbi5taW4uanNcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7dmFyIGw9cmVxdWlyZShcIm9iamVjdC1hc3NpZ25cIiksbj1cImZ1bmN0aW9uXCI9PT10eXBlb2YgU3ltYm9sJiZTeW1ib2wuZm9yLHA9bj9TeW1ib2wuZm9yKFwicmVhY3QuZWxlbWVudFwiKTo2MDEwMyxxPW4/U3ltYm9sLmZvcihcInJlYWN0LnBvcnRhbFwiKTo2MDEwNixyPW4/U3ltYm9sLmZvcihcInJlYWN0LmZyYWdtZW50XCIpOjYwMTA3LHQ9bj9TeW1ib2wuZm9yKFwicmVhY3Quc3RyaWN0X21vZGVcIik6NjAxMDgsdT1uP1N5bWJvbC5mb3IoXCJyZWFjdC5wcm9maWxlclwiKTo2MDExNCx2PW4/U3ltYm9sLmZvcihcInJlYWN0LnByb3ZpZGVyXCIpOjYwMTA5LHc9bj9TeW1ib2wuZm9yKFwicmVhY3QuY29udGV4dFwiKTo2MDExMCx4PW4/U3ltYm9sLmZvcihcInJlYWN0LmZvcndhcmRfcmVmXCIpOjYwMTEyLHk9bj9TeW1ib2wuZm9yKFwicmVhY3Quc3VzcGVuc2VcIik6NjAxMTMsej1uP1N5bWJvbC5mb3IoXCJyZWFjdC5tZW1vXCIpOjYwMTE1LEE9bj9TeW1ib2wuZm9yKFwicmVhY3QubGF6eVwiKTpcbjYwMTE2LEI9XCJmdW5jdGlvblwiPT09dHlwZW9mIFN5bWJvbCYmU3ltYm9sLml0ZXJhdG9yO2Z1bmN0aW9uIEMoYSl7Zm9yKHZhciBiPVwiaHR0cHM6Ly9yZWFjdGpzLm9yZy9kb2NzL2Vycm9yLWRlY29kZXIuaHRtbD9pbnZhcmlhbnQ9XCIrYSxjPTE7Yzxhcmd1bWVudHMubGVuZ3RoO2MrKyliKz1cIiZhcmdzW109XCIrZW5jb2RlVVJJQ29tcG9uZW50KGFyZ3VtZW50c1tjXSk7cmV0dXJuXCJNaW5pZmllZCBSZWFjdCBlcnJvciAjXCIrYStcIjsgdmlzaXQgXCIrYitcIiBmb3IgdGhlIGZ1bGwgbWVzc2FnZSBvciB1c2UgdGhlIG5vbi1taW5pZmllZCBkZXYgZW52aXJvbm1lbnQgZm9yIGZ1bGwgZXJyb3JzIGFuZCBhZGRpdGlvbmFsIGhlbHBmdWwgd2FybmluZ3MuXCJ9XG52YXIgRD17aXNNb3VudGVkOmZ1bmN0aW9uKCl7cmV0dXJuITF9LGVucXVldWVGb3JjZVVwZGF0ZTpmdW5jdGlvbigpe30sZW5xdWV1ZVJlcGxhY2VTdGF0ZTpmdW5jdGlvbigpe30sZW5xdWV1ZVNldFN0YXRlOmZ1bmN0aW9uKCl7fX0sRT17fTtmdW5jdGlvbiBGKGEsYixjKXt0aGlzLnByb3BzPWE7dGhpcy5jb250ZXh0PWI7dGhpcy5yZWZzPUU7dGhpcy51cGRhdGVyPWN8fER9Ri5wcm90b3R5cGUuaXNSZWFjdENvbXBvbmVudD17fTtGLnByb3RvdHlwZS5zZXRTdGF0ZT1mdW5jdGlvbihhLGIpe2lmKFwib2JqZWN0XCIhPT10eXBlb2YgYSYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGEmJm51bGwhPWEpdGhyb3cgRXJyb3IoQyg4NSkpO3RoaXMudXBkYXRlci5lbnF1ZXVlU2V0U3RhdGUodGhpcyxhLGIsXCJzZXRTdGF0ZVwiKX07Ri5wcm90b3R5cGUuZm9yY2VVcGRhdGU9ZnVuY3Rpb24oYSl7dGhpcy51cGRhdGVyLmVucXVldWVGb3JjZVVwZGF0ZSh0aGlzLGEsXCJmb3JjZVVwZGF0ZVwiKX07XG5mdW5jdGlvbiBHKCl7fUcucHJvdG90eXBlPUYucHJvdG90eXBlO2Z1bmN0aW9uIEgoYSxiLGMpe3RoaXMucHJvcHM9YTt0aGlzLmNvbnRleHQ9Yjt0aGlzLnJlZnM9RTt0aGlzLnVwZGF0ZXI9Y3x8RH12YXIgST1ILnByb3RvdHlwZT1uZXcgRztJLmNvbnN0cnVjdG9yPUg7bChJLEYucHJvdG90eXBlKTtJLmlzUHVyZVJlYWN0Q29tcG9uZW50PSEwO3ZhciBKPXtjdXJyZW50Om51bGx9LEs9T2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eSxMPXtrZXk6ITAscmVmOiEwLF9fc2VsZjohMCxfX3NvdXJjZTohMH07XG5mdW5jdGlvbiBNKGEsYixjKXt2YXIgZSxkPXt9LGc9bnVsbCxrPW51bGw7aWYobnVsbCE9Yilmb3IoZSBpbiB2b2lkIDAhPT1iLnJlZiYmKGs9Yi5yZWYpLHZvaWQgMCE9PWIua2V5JiYoZz1cIlwiK2Iua2V5KSxiKUsuY2FsbChiLGUpJiYhTC5oYXNPd25Qcm9wZXJ0eShlKSYmKGRbZV09YltlXSk7dmFyIGY9YXJndW1lbnRzLmxlbmd0aC0yO2lmKDE9PT1mKWQuY2hpbGRyZW49YztlbHNlIGlmKDE8Zil7Zm9yKHZhciBoPUFycmF5KGYpLG09MDttPGY7bSsrKWhbbV09YXJndW1lbnRzW20rMl07ZC5jaGlsZHJlbj1ofWlmKGEmJmEuZGVmYXVsdFByb3BzKWZvcihlIGluIGY9YS5kZWZhdWx0UHJvcHMsZil2b2lkIDA9PT1kW2VdJiYoZFtlXT1mW2VdKTtyZXR1cm57JCR0eXBlb2Y6cCx0eXBlOmEsa2V5OmcscmVmOmsscHJvcHM6ZCxfb3duZXI6Si5jdXJyZW50fX1cbmZ1bmN0aW9uIE4oYSxiKXtyZXR1cm57JCR0eXBlb2Y6cCx0eXBlOmEudHlwZSxrZXk6YixyZWY6YS5yZWYscHJvcHM6YS5wcm9wcyxfb3duZXI6YS5fb3duZXJ9fWZ1bmN0aW9uIE8oYSl7cmV0dXJuXCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSYmYS4kJHR5cGVvZj09PXB9ZnVuY3Rpb24gZXNjYXBlKGEpe3ZhciBiPXtcIj1cIjpcIj0wXCIsXCI6XCI6XCI9MlwifTtyZXR1cm5cIiRcIisoXCJcIithKS5yZXBsYWNlKC9bPTpdL2csZnVuY3Rpb24oYSl7cmV0dXJuIGJbYV19KX12YXIgUD0vXFwvKy9nLFE9W107ZnVuY3Rpb24gUihhLGIsYyxlKXtpZihRLmxlbmd0aCl7dmFyIGQ9US5wb3AoKTtkLnJlc3VsdD1hO2Qua2V5UHJlZml4PWI7ZC5mdW5jPWM7ZC5jb250ZXh0PWU7ZC5jb3VudD0wO3JldHVybiBkfXJldHVybntyZXN1bHQ6YSxrZXlQcmVmaXg6YixmdW5jOmMsY29udGV4dDplLGNvdW50OjB9fVxuZnVuY3Rpb24gUyhhKXthLnJlc3VsdD1udWxsO2Eua2V5UHJlZml4PW51bGw7YS5mdW5jPW51bGw7YS5jb250ZXh0PW51bGw7YS5jb3VudD0wOzEwPlEubGVuZ3RoJiZRLnB1c2goYSl9XG5mdW5jdGlvbiBUKGEsYixjLGUpe3ZhciBkPXR5cGVvZiBhO2lmKFwidW5kZWZpbmVkXCI9PT1kfHxcImJvb2xlYW5cIj09PWQpYT1udWxsO3ZhciBnPSExO2lmKG51bGw9PT1hKWc9ITA7ZWxzZSBzd2l0Y2goZCl7Y2FzZSBcInN0cmluZ1wiOmNhc2UgXCJudW1iZXJcIjpnPSEwO2JyZWFrO2Nhc2UgXCJvYmplY3RcIjpzd2l0Y2goYS4kJHR5cGVvZil7Y2FzZSBwOmNhc2UgcTpnPSEwfX1pZihnKXJldHVybiBjKGUsYSxcIlwiPT09Yj9cIi5cIitVKGEsMCk6YiksMTtnPTA7Yj1cIlwiPT09Yj9cIi5cIjpiK1wiOlwiO2lmKEFycmF5LmlzQXJyYXkoYSkpZm9yKHZhciBrPTA7azxhLmxlbmd0aDtrKyspe2Q9YVtrXTt2YXIgZj1iK1UoZCxrKTtnKz1UKGQsZixjLGUpfWVsc2UgaWYobnVsbD09PWF8fFwib2JqZWN0XCIhPT10eXBlb2YgYT9mPW51bGw6KGY9QiYmYVtCXXx8YVtcIkBAaXRlcmF0b3JcIl0sZj1cImZ1bmN0aW9uXCI9PT10eXBlb2YgZj9mOm51bGwpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBmKWZvcihhPWYuY2FsbChhKSxrPVxuMDshKGQ9YS5uZXh0KCkpLmRvbmU7KWQ9ZC52YWx1ZSxmPWIrVShkLGsrKyksZys9VChkLGYsYyxlKTtlbHNlIGlmKFwib2JqZWN0XCI9PT1kKXRocm93IGM9XCJcIithLEVycm9yKEMoMzEsXCJbb2JqZWN0IE9iamVjdF1cIj09PWM/XCJvYmplY3Qgd2l0aCBrZXlzIHtcIitPYmplY3Qua2V5cyhhKS5qb2luKFwiLCBcIikrXCJ9XCI6YyxcIlwiKSk7cmV0dXJuIGd9ZnVuY3Rpb24gVihhLGIsYyl7cmV0dXJuIG51bGw9PWE/MDpUKGEsXCJcIixiLGMpfWZ1bmN0aW9uIFUoYSxiKXtyZXR1cm5cIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hJiZudWxsIT1hLmtleT9lc2NhcGUoYS5rZXkpOmIudG9TdHJpbmcoMzYpfWZ1bmN0aW9uIFcoYSxiKXthLmZ1bmMuY2FsbChhLmNvbnRleHQsYixhLmNvdW50KyspfVxuZnVuY3Rpb24gYWEoYSxiLGMpe3ZhciBlPWEucmVzdWx0LGQ9YS5rZXlQcmVmaXg7YT1hLmZ1bmMuY2FsbChhLmNvbnRleHQsYixhLmNvdW50KyspO0FycmF5LmlzQXJyYXkoYSk/WChhLGUsYyxmdW5jdGlvbihhKXtyZXR1cm4gYX0pOm51bGwhPWEmJihPKGEpJiYoYT1OKGEsZCsoIWEua2V5fHxiJiZiLmtleT09PWEua2V5P1wiXCI6KFwiXCIrYS5rZXkpLnJlcGxhY2UoUCxcIiQmL1wiKStcIi9cIikrYykpLGUucHVzaChhKSl9ZnVuY3Rpb24gWChhLGIsYyxlLGQpe3ZhciBnPVwiXCI7bnVsbCE9YyYmKGc9KFwiXCIrYykucmVwbGFjZShQLFwiJCYvXCIpK1wiL1wiKTtiPVIoYixnLGUsZCk7VihhLGFhLGIpO1MoYil9dmFyIFk9e2N1cnJlbnQ6bnVsbH07ZnVuY3Rpb24gWigpe3ZhciBhPVkuY3VycmVudDtpZihudWxsPT09YSl0aHJvdyBFcnJvcihDKDMyMSkpO3JldHVybiBhfVxudmFyIGJhPXtSZWFjdEN1cnJlbnREaXNwYXRjaGVyOlksUmVhY3RDdXJyZW50QmF0Y2hDb25maWc6e3N1c3BlbnNlOm51bGx9LFJlYWN0Q3VycmVudE93bmVyOkosSXNTb21lUmVuZGVyZXJBY3Rpbmc6e2N1cnJlbnQ6ITF9LGFzc2lnbjpsfTtleHBvcnRzLkNoaWxkcmVuPXttYXA6ZnVuY3Rpb24oYSxiLGMpe2lmKG51bGw9PWEpcmV0dXJuIGE7dmFyIGU9W107WChhLGUsbnVsbCxiLGMpO3JldHVybiBlfSxmb3JFYWNoOmZ1bmN0aW9uKGEsYixjKXtpZihudWxsPT1hKXJldHVybiBhO2I9UihudWxsLG51bGwsYixjKTtWKGEsVyxiKTtTKGIpfSxjb3VudDpmdW5jdGlvbihhKXtyZXR1cm4gVihhLGZ1bmN0aW9uKCl7cmV0dXJuIG51bGx9LG51bGwpfSx0b0FycmF5OmZ1bmN0aW9uKGEpe3ZhciBiPVtdO1goYSxiLG51bGwsZnVuY3Rpb24oYSl7cmV0dXJuIGF9KTtyZXR1cm4gYn0sb25seTpmdW5jdGlvbihhKXtpZighTyhhKSl0aHJvdyBFcnJvcihDKDE0MykpO3JldHVybiBhfX07XG5leHBvcnRzLkNvbXBvbmVudD1GO2V4cG9ydHMuRnJhZ21lbnQ9cjtleHBvcnRzLlByb2ZpbGVyPXU7ZXhwb3J0cy5QdXJlQ29tcG9uZW50PUg7ZXhwb3J0cy5TdHJpY3RNb2RlPXQ7ZXhwb3J0cy5TdXNwZW5zZT15O2V4cG9ydHMuX19TRUNSRVRfSU5URVJOQUxTX0RPX05PVF9VU0VfT1JfWU9VX1dJTExfQkVfRklSRUQ9YmE7XG5leHBvcnRzLmNsb25lRWxlbWVudD1mdW5jdGlvbihhLGIsYyl7aWYobnVsbD09PWF8fHZvaWQgMD09PWEpdGhyb3cgRXJyb3IoQygyNjcsYSkpO3ZhciBlPWwoe30sYS5wcm9wcyksZD1hLmtleSxnPWEucmVmLGs9YS5fb3duZXI7aWYobnVsbCE9Yil7dm9pZCAwIT09Yi5yZWYmJihnPWIucmVmLGs9Si5jdXJyZW50KTt2b2lkIDAhPT1iLmtleSYmKGQ9XCJcIitiLmtleSk7aWYoYS50eXBlJiZhLnR5cGUuZGVmYXVsdFByb3BzKXZhciBmPWEudHlwZS5kZWZhdWx0UHJvcHM7Zm9yKGggaW4gYilLLmNhbGwoYixoKSYmIUwuaGFzT3duUHJvcGVydHkoaCkmJihlW2hdPXZvaWQgMD09PWJbaF0mJnZvaWQgMCE9PWY/ZltoXTpiW2hdKX12YXIgaD1hcmd1bWVudHMubGVuZ3RoLTI7aWYoMT09PWgpZS5jaGlsZHJlbj1jO2Vsc2UgaWYoMTxoKXtmPUFycmF5KGgpO2Zvcih2YXIgbT0wO208aDttKyspZlttXT1hcmd1bWVudHNbbSsyXTtlLmNoaWxkcmVuPWZ9cmV0dXJueyQkdHlwZW9mOnAsdHlwZTphLnR5cGUsXG5rZXk6ZCxyZWY6Zyxwcm9wczplLF9vd25lcjprfX07ZXhwb3J0cy5jcmVhdGVDb250ZXh0PWZ1bmN0aW9uKGEsYil7dm9pZCAwPT09YiYmKGI9bnVsbCk7YT17JCR0eXBlb2Y6dyxfY2FsY3VsYXRlQ2hhbmdlZEJpdHM6YixfY3VycmVudFZhbHVlOmEsX2N1cnJlbnRWYWx1ZTI6YSxfdGhyZWFkQ291bnQ6MCxQcm92aWRlcjpudWxsLENvbnN1bWVyOm51bGx9O2EuUHJvdmlkZXI9eyQkdHlwZW9mOnYsX2NvbnRleHQ6YX07cmV0dXJuIGEuQ29uc3VtZXI9YX07ZXhwb3J0cy5jcmVhdGVFbGVtZW50PU07ZXhwb3J0cy5jcmVhdGVGYWN0b3J5PWZ1bmN0aW9uKGEpe3ZhciBiPU0uYmluZChudWxsLGEpO2IudHlwZT1hO3JldHVybiBifTtleHBvcnRzLmNyZWF0ZVJlZj1mdW5jdGlvbigpe3JldHVybntjdXJyZW50Om51bGx9fTtleHBvcnRzLmZvcndhcmRSZWY9ZnVuY3Rpb24oYSl7cmV0dXJueyQkdHlwZW9mOngscmVuZGVyOmF9fTtleHBvcnRzLmlzVmFsaWRFbGVtZW50PU87XG5leHBvcnRzLmxhenk9ZnVuY3Rpb24oYSl7cmV0dXJueyQkdHlwZW9mOkEsX2N0b3I6YSxfc3RhdHVzOi0xLF9yZXN1bHQ6bnVsbH19O2V4cG9ydHMubWVtbz1mdW5jdGlvbihhLGIpe3JldHVybnskJHR5cGVvZjp6LHR5cGU6YSxjb21wYXJlOnZvaWQgMD09PWI/bnVsbDpifX07ZXhwb3J0cy51c2VDYWxsYmFjaz1mdW5jdGlvbihhLGIpe3JldHVybiBaKCkudXNlQ2FsbGJhY2soYSxiKX07ZXhwb3J0cy51c2VDb250ZXh0PWZ1bmN0aW9uKGEsYil7cmV0dXJuIFooKS51c2VDb250ZXh0KGEsYil9O2V4cG9ydHMudXNlRGVidWdWYWx1ZT1mdW5jdGlvbigpe307ZXhwb3J0cy51c2VFZmZlY3Q9ZnVuY3Rpb24oYSxiKXtyZXR1cm4gWigpLnVzZUVmZmVjdChhLGIpfTtleHBvcnRzLnVzZUltcGVyYXRpdmVIYW5kbGU9ZnVuY3Rpb24oYSxiLGMpe3JldHVybiBaKCkudXNlSW1wZXJhdGl2ZUhhbmRsZShhLGIsYyl9O1xuZXhwb3J0cy51c2VMYXlvdXRFZmZlY3Q9ZnVuY3Rpb24oYSxiKXtyZXR1cm4gWigpLnVzZUxheW91dEVmZmVjdChhLGIpfTtleHBvcnRzLnVzZU1lbW89ZnVuY3Rpb24oYSxiKXtyZXR1cm4gWigpLnVzZU1lbW8oYSxiKX07ZXhwb3J0cy51c2VSZWR1Y2VyPWZ1bmN0aW9uKGEsYixjKXtyZXR1cm4gWigpLnVzZVJlZHVjZXIoYSxiLGMpfTtleHBvcnRzLnVzZVJlZj1mdW5jdGlvbihhKXtyZXR1cm4gWigpLnVzZVJlZihhKX07ZXhwb3J0cy51c2VTdGF0ZT1mdW5jdGlvbihhKXtyZXR1cm4gWigpLnVzZVN0YXRlKGEpfTtleHBvcnRzLnZlcnNpb249XCIxNi4xMy4xXCI7XG4iLCIvKiogQGxpY2Vuc2UgUmVhY3QgdjE2LjEzLjFcbiAqIHJlYWN0LWRvbS5wcm9kdWN0aW9uLm1pbi5qc1xuICpcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbi8qXG4gTW9kZXJuaXpyIDMuMC4wcHJlIChDdXN0b20gQnVpbGQpIHwgTUlUXG4qL1xuJ3VzZSBzdHJpY3QnO3ZhciBhYT1yZXF1aXJlKFwicmVhY3RcIiksbj1yZXF1aXJlKFwib2JqZWN0LWFzc2lnblwiKSxyPXJlcXVpcmUoXCJzY2hlZHVsZXJcIik7ZnVuY3Rpb24gdShhKXtmb3IodmFyIGI9XCJodHRwczovL3JlYWN0anMub3JnL2RvY3MvZXJyb3ItZGVjb2Rlci5odG1sP2ludmFyaWFudD1cIithLGM9MTtjPGFyZ3VtZW50cy5sZW5ndGg7YysrKWIrPVwiJmFyZ3NbXT1cIitlbmNvZGVVUklDb21wb25lbnQoYXJndW1lbnRzW2NdKTtyZXR1cm5cIk1pbmlmaWVkIFJlYWN0IGVycm9yICNcIithK1wiOyB2aXNpdCBcIitiK1wiIGZvciB0aGUgZnVsbCBtZXNzYWdlIG9yIHVzZSB0aGUgbm9uLW1pbmlmaWVkIGRldiBlbnZpcm9ubWVudCBmb3IgZnVsbCBlcnJvcnMgYW5kIGFkZGl0aW9uYWwgaGVscGZ1bCB3YXJuaW5ncy5cIn1pZighYWEpdGhyb3cgRXJyb3IodSgyMjcpKTtcbmZ1bmN0aW9uIGJhKGEsYixjLGQsZSxmLGcsaCxrKXt2YXIgbD1BcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsMyk7dHJ5e2IuYXBwbHkoYyxsKX1jYXRjaChtKXt0aGlzLm9uRXJyb3IobSl9fXZhciBkYT0hMSxlYT1udWxsLGZhPSExLGhhPW51bGwsaWE9e29uRXJyb3I6ZnVuY3Rpb24oYSl7ZGE9ITA7ZWE9YX19O2Z1bmN0aW9uIGphKGEsYixjLGQsZSxmLGcsaCxrKXtkYT0hMTtlYT1udWxsO2JhLmFwcGx5KGlhLGFyZ3VtZW50cyl9ZnVuY3Rpb24ga2EoYSxiLGMsZCxlLGYsZyxoLGspe2phLmFwcGx5KHRoaXMsYXJndW1lbnRzKTtpZihkYSl7aWYoZGEpe3ZhciBsPWVhO2RhPSExO2VhPW51bGx9ZWxzZSB0aHJvdyBFcnJvcih1KDE5OCkpO2ZhfHwoZmE9ITAsaGE9bCl9fXZhciBsYT1udWxsLG1hPW51bGwsbmE9bnVsbDtcbmZ1bmN0aW9uIG9hKGEsYixjKXt2YXIgZD1hLnR5cGV8fFwidW5rbm93bi1ldmVudFwiO2EuY3VycmVudFRhcmdldD1uYShjKTtrYShkLGIsdm9pZCAwLGEpO2EuY3VycmVudFRhcmdldD1udWxsfXZhciBwYT1udWxsLHFhPXt9O1xuZnVuY3Rpb24gcmEoKXtpZihwYSlmb3IodmFyIGEgaW4gcWEpe3ZhciBiPXFhW2FdLGM9cGEuaW5kZXhPZihhKTtpZighKC0xPGMpKXRocm93IEVycm9yKHUoOTYsYSkpO2lmKCFzYVtjXSl7aWYoIWIuZXh0cmFjdEV2ZW50cyl0aHJvdyBFcnJvcih1KDk3LGEpKTtzYVtjXT1iO2M9Yi5ldmVudFR5cGVzO2Zvcih2YXIgZCBpbiBjKXt2YXIgZT12b2lkIDA7dmFyIGY9Y1tkXSxnPWIsaD1kO2lmKHRhLmhhc093blByb3BlcnR5KGgpKXRocm93IEVycm9yKHUoOTksaCkpO3RhW2hdPWY7dmFyIGs9Zi5waGFzZWRSZWdpc3RyYXRpb25OYW1lcztpZihrKXtmb3IoZSBpbiBrKWsuaGFzT3duUHJvcGVydHkoZSkmJnVhKGtbZV0sZyxoKTtlPSEwfWVsc2UgZi5yZWdpc3RyYXRpb25OYW1lPyh1YShmLnJlZ2lzdHJhdGlvbk5hbWUsZyxoKSxlPSEwKTplPSExO2lmKCFlKXRocm93IEVycm9yKHUoOTgsZCxhKSk7fX19fVxuZnVuY3Rpb24gdWEoYSxiLGMpe2lmKHZhW2FdKXRocm93IEVycm9yKHUoMTAwLGEpKTt2YVthXT1iO3dhW2FdPWIuZXZlbnRUeXBlc1tjXS5kZXBlbmRlbmNpZXN9dmFyIHNhPVtdLHRhPXt9LHZhPXt9LHdhPXt9O2Z1bmN0aW9uIHhhKGEpe3ZhciBiPSExLGM7Zm9yKGMgaW4gYSlpZihhLmhhc093blByb3BlcnR5KGMpKXt2YXIgZD1hW2NdO2lmKCFxYS5oYXNPd25Qcm9wZXJ0eShjKXx8cWFbY10hPT1kKXtpZihxYVtjXSl0aHJvdyBFcnJvcih1KDEwMixjKSk7cWFbY109ZDtiPSEwfX1iJiZyYSgpfXZhciB5YT0hKFwidW5kZWZpbmVkXCI9PT10eXBlb2Ygd2luZG93fHxcInVuZGVmaW5lZFwiPT09dHlwZW9mIHdpbmRvdy5kb2N1bWVudHx8XCJ1bmRlZmluZWRcIj09PXR5cGVvZiB3aW5kb3cuZG9jdW1lbnQuY3JlYXRlRWxlbWVudCksemE9bnVsbCxBYT1udWxsLEJhPW51bGw7XG5mdW5jdGlvbiBDYShhKXtpZihhPW1hKGEpKXtpZihcImZ1bmN0aW9uXCIhPT10eXBlb2YgemEpdGhyb3cgRXJyb3IodSgyODApKTt2YXIgYj1hLnN0YXRlTm9kZTtiJiYoYj1sYShiKSx6YShhLnN0YXRlTm9kZSxhLnR5cGUsYikpfX1mdW5jdGlvbiBEYShhKXtBYT9CYT9CYS5wdXNoKGEpOkJhPVthXTpBYT1hfWZ1bmN0aW9uIEVhKCl7aWYoQWEpe3ZhciBhPUFhLGI9QmE7QmE9QWE9bnVsbDtDYShhKTtpZihiKWZvcihhPTA7YTxiLmxlbmd0aDthKyspQ2EoYlthXSl9fWZ1bmN0aW9uIEZhKGEsYil7cmV0dXJuIGEoYil9ZnVuY3Rpb24gR2EoYSxiLGMsZCxlKXtyZXR1cm4gYShiLGMsZCxlKX1mdW5jdGlvbiBIYSgpe312YXIgSWE9RmEsSmE9ITEsS2E9ITE7ZnVuY3Rpb24gTGEoKXtpZihudWxsIT09QWF8fG51bGwhPT1CYSlIYSgpLEVhKCl9XG5mdW5jdGlvbiBNYShhLGIsYyl7aWYoS2EpcmV0dXJuIGEoYixjKTtLYT0hMDt0cnl7cmV0dXJuIElhKGEsYixjKX1maW5hbGx5e0thPSExLExhKCl9fXZhciBOYT0vXls6QS1aX2EtelxcdTAwQzAtXFx1MDBENlxcdTAwRDgtXFx1MDBGNlxcdTAwRjgtXFx1MDJGRlxcdTAzNzAtXFx1MDM3RFxcdTAzN0YtXFx1MUZGRlxcdTIwMEMtXFx1MjAwRFxcdTIwNzAtXFx1MjE4RlxcdTJDMDAtXFx1MkZFRlxcdTMwMDEtXFx1RDdGRlxcdUY5MDAtXFx1RkRDRlxcdUZERjAtXFx1RkZGRF1bOkEtWl9hLXpcXHUwMEMwLVxcdTAwRDZcXHUwMEQ4LVxcdTAwRjZcXHUwMEY4LVxcdTAyRkZcXHUwMzcwLVxcdTAzN0RcXHUwMzdGLVxcdTFGRkZcXHUyMDBDLVxcdTIwMERcXHUyMDcwLVxcdTIxOEZcXHUyQzAwLVxcdTJGRUZcXHUzMDAxLVxcdUQ3RkZcXHVGOTAwLVxcdUZEQ0ZcXHVGREYwLVxcdUZGRkRcXC0uMC05XFx1MDBCN1xcdTAzMDAtXFx1MDM2RlxcdTIwM0YtXFx1MjA0MF0qJC8sT2E9T2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eSxQYT17fSxRYT17fTtcbmZ1bmN0aW9uIFJhKGEpe2lmKE9hLmNhbGwoUWEsYSkpcmV0dXJuITA7aWYoT2EuY2FsbChQYSxhKSlyZXR1cm4hMTtpZihOYS50ZXN0KGEpKXJldHVybiBRYVthXT0hMDtQYVthXT0hMDtyZXR1cm4hMX1mdW5jdGlvbiBTYShhLGIsYyxkKXtpZihudWxsIT09YyYmMD09PWMudHlwZSlyZXR1cm4hMTtzd2l0Y2godHlwZW9mIGIpe2Nhc2UgXCJmdW5jdGlvblwiOmNhc2UgXCJzeW1ib2xcIjpyZXR1cm4hMDtjYXNlIFwiYm9vbGVhblwiOmlmKGQpcmV0dXJuITE7aWYobnVsbCE9PWMpcmV0dXJuIWMuYWNjZXB0c0Jvb2xlYW5zO2E9YS50b0xvd2VyQ2FzZSgpLnNsaWNlKDAsNSk7cmV0dXJuXCJkYXRhLVwiIT09YSYmXCJhcmlhLVwiIT09YTtkZWZhdWx0OnJldHVybiExfX1cbmZ1bmN0aW9uIFRhKGEsYixjLGQpe2lmKG51bGw9PT1ifHxcInVuZGVmaW5lZFwiPT09dHlwZW9mIGJ8fFNhKGEsYixjLGQpKXJldHVybiEwO2lmKGQpcmV0dXJuITE7aWYobnVsbCE9PWMpc3dpdGNoKGMudHlwZSl7Y2FzZSAzOnJldHVybiFiO2Nhc2UgNDpyZXR1cm4hMT09PWI7Y2FzZSA1OnJldHVybiBpc05hTihiKTtjYXNlIDY6cmV0dXJuIGlzTmFOKGIpfHwxPmJ9cmV0dXJuITF9ZnVuY3Rpb24gdihhLGIsYyxkLGUsZil7dGhpcy5hY2NlcHRzQm9vbGVhbnM9Mj09PWJ8fDM9PT1ifHw0PT09Yjt0aGlzLmF0dHJpYnV0ZU5hbWU9ZDt0aGlzLmF0dHJpYnV0ZU5hbWVzcGFjZT1lO3RoaXMubXVzdFVzZVByb3BlcnR5PWM7dGhpcy5wcm9wZXJ0eU5hbWU9YTt0aGlzLnR5cGU9Yjt0aGlzLnNhbml0aXplVVJMPWZ9dmFyIEM9e307XG5cImNoaWxkcmVuIGRhbmdlcm91c2x5U2V0SW5uZXJIVE1MIGRlZmF1bHRWYWx1ZSBkZWZhdWx0Q2hlY2tlZCBpbm5lckhUTUwgc3VwcHJlc3NDb250ZW50RWRpdGFibGVXYXJuaW5nIHN1cHByZXNzSHlkcmF0aW9uV2FybmluZyBzdHlsZVwiLnNwbGl0KFwiIFwiKS5mb3JFYWNoKGZ1bmN0aW9uKGEpe0NbYV09bmV3IHYoYSwwLCExLGEsbnVsbCwhMSl9KTtbW1wiYWNjZXB0Q2hhcnNldFwiLFwiYWNjZXB0LWNoYXJzZXRcIl0sW1wiY2xhc3NOYW1lXCIsXCJjbGFzc1wiXSxbXCJodG1sRm9yXCIsXCJmb3JcIl0sW1wiaHR0cEVxdWl2XCIsXCJodHRwLWVxdWl2XCJdXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3ZhciBiPWFbMF07Q1tiXT1uZXcgdihiLDEsITEsYVsxXSxudWxsLCExKX0pO1tcImNvbnRlbnRFZGl0YWJsZVwiLFwiZHJhZ2dhYmxlXCIsXCJzcGVsbENoZWNrXCIsXCJ2YWx1ZVwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe0NbYV09bmV3IHYoYSwyLCExLGEudG9Mb3dlckNhc2UoKSxudWxsLCExKX0pO1xuW1wiYXV0b1JldmVyc2VcIixcImV4dGVybmFsUmVzb3VyY2VzUmVxdWlyZWRcIixcImZvY3VzYWJsZVwiLFwicHJlc2VydmVBbHBoYVwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe0NbYV09bmV3IHYoYSwyLCExLGEsbnVsbCwhMSl9KTtcImFsbG93RnVsbFNjcmVlbiBhc3luYyBhdXRvRm9jdXMgYXV0b1BsYXkgY29udHJvbHMgZGVmYXVsdCBkZWZlciBkaXNhYmxlZCBkaXNhYmxlUGljdHVyZUluUGljdHVyZSBmb3JtTm9WYWxpZGF0ZSBoaWRkZW4gbG9vcCBub01vZHVsZSBub1ZhbGlkYXRlIG9wZW4gcGxheXNJbmxpbmUgcmVhZE9ubHkgcmVxdWlyZWQgcmV2ZXJzZWQgc2NvcGVkIHNlYW1sZXNzIGl0ZW1TY29wZVwiLnNwbGl0KFwiIFwiKS5mb3JFYWNoKGZ1bmN0aW9uKGEpe0NbYV09bmV3IHYoYSwzLCExLGEudG9Mb3dlckNhc2UoKSxudWxsLCExKX0pO1xuW1wiY2hlY2tlZFwiLFwibXVsdGlwbGVcIixcIm11dGVkXCIsXCJzZWxlY3RlZFwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe0NbYV09bmV3IHYoYSwzLCEwLGEsbnVsbCwhMSl9KTtbXCJjYXB0dXJlXCIsXCJkb3dubG9hZFwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe0NbYV09bmV3IHYoYSw0LCExLGEsbnVsbCwhMSl9KTtbXCJjb2xzXCIsXCJyb3dzXCIsXCJzaXplXCIsXCJzcGFuXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7Q1thXT1uZXcgdihhLDYsITEsYSxudWxsLCExKX0pO1tcInJvd1NwYW5cIixcInN0YXJ0XCJdLmZvckVhY2goZnVuY3Rpb24oYSl7Q1thXT1uZXcgdihhLDUsITEsYS50b0xvd2VyQ2FzZSgpLG51bGwsITEpfSk7dmFyIFVhPS9bXFwtOl0oW2Etel0pL2c7ZnVuY3Rpb24gVmEoYSl7cmV0dXJuIGFbMV0udG9VcHBlckNhc2UoKX1cblwiYWNjZW50LWhlaWdodCBhbGlnbm1lbnQtYmFzZWxpbmUgYXJhYmljLWZvcm0gYmFzZWxpbmUtc2hpZnQgY2FwLWhlaWdodCBjbGlwLXBhdGggY2xpcC1ydWxlIGNvbG9yLWludGVycG9sYXRpb24gY29sb3ItaW50ZXJwb2xhdGlvbi1maWx0ZXJzIGNvbG9yLXByb2ZpbGUgY29sb3ItcmVuZGVyaW5nIGRvbWluYW50LWJhc2VsaW5lIGVuYWJsZS1iYWNrZ3JvdW5kIGZpbGwtb3BhY2l0eSBmaWxsLXJ1bGUgZmxvb2QtY29sb3IgZmxvb2Qtb3BhY2l0eSBmb250LWZhbWlseSBmb250LXNpemUgZm9udC1zaXplLWFkanVzdCBmb250LXN0cmV0Y2ggZm9udC1zdHlsZSBmb250LXZhcmlhbnQgZm9udC13ZWlnaHQgZ2x5cGgtbmFtZSBnbHlwaC1vcmllbnRhdGlvbi1ob3Jpem9udGFsIGdseXBoLW9yaWVudGF0aW9uLXZlcnRpY2FsIGhvcml6LWFkdi14IGhvcml6LW9yaWdpbi14IGltYWdlLXJlbmRlcmluZyBsZXR0ZXItc3BhY2luZyBsaWdodGluZy1jb2xvciBtYXJrZXItZW5kIG1hcmtlci1taWQgbWFya2VyLXN0YXJ0IG92ZXJsaW5lLXBvc2l0aW9uIG92ZXJsaW5lLXRoaWNrbmVzcyBwYWludC1vcmRlciBwYW5vc2UtMSBwb2ludGVyLWV2ZW50cyByZW5kZXJpbmctaW50ZW50IHNoYXBlLXJlbmRlcmluZyBzdG9wLWNvbG9yIHN0b3Atb3BhY2l0eSBzdHJpa2V0aHJvdWdoLXBvc2l0aW9uIHN0cmlrZXRocm91Z2gtdGhpY2tuZXNzIHN0cm9rZS1kYXNoYXJyYXkgc3Ryb2tlLWRhc2hvZmZzZXQgc3Ryb2tlLWxpbmVjYXAgc3Ryb2tlLWxpbmVqb2luIHN0cm9rZS1taXRlcmxpbWl0IHN0cm9rZS1vcGFjaXR5IHN0cm9rZS13aWR0aCB0ZXh0LWFuY2hvciB0ZXh0LWRlY29yYXRpb24gdGV4dC1yZW5kZXJpbmcgdW5kZXJsaW5lLXBvc2l0aW9uIHVuZGVybGluZS10aGlja25lc3MgdW5pY29kZS1iaWRpIHVuaWNvZGUtcmFuZ2UgdW5pdHMtcGVyLWVtIHYtYWxwaGFiZXRpYyB2LWhhbmdpbmcgdi1pZGVvZ3JhcGhpYyB2LW1hdGhlbWF0aWNhbCB2ZWN0b3ItZWZmZWN0IHZlcnQtYWR2LXkgdmVydC1vcmlnaW4teCB2ZXJ0LW9yaWdpbi15IHdvcmQtc3BhY2luZyB3cml0aW5nLW1vZGUgeG1sbnM6eGxpbmsgeC1oZWlnaHRcIi5zcGxpdChcIiBcIikuZm9yRWFjaChmdW5jdGlvbihhKXt2YXIgYj1hLnJlcGxhY2UoVWEsXG5WYSk7Q1tiXT1uZXcgdihiLDEsITEsYSxudWxsLCExKX0pO1wieGxpbms6YWN0dWF0ZSB4bGluazphcmNyb2xlIHhsaW5rOnJvbGUgeGxpbms6c2hvdyB4bGluazp0aXRsZSB4bGluazp0eXBlXCIuc3BsaXQoXCIgXCIpLmZvckVhY2goZnVuY3Rpb24oYSl7dmFyIGI9YS5yZXBsYWNlKFVhLFZhKTtDW2JdPW5ldyB2KGIsMSwhMSxhLFwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGlua1wiLCExKX0pO1tcInhtbDpiYXNlXCIsXCJ4bWw6bGFuZ1wiLFwieG1sOnNwYWNlXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7dmFyIGI9YS5yZXBsYWNlKFVhLFZhKTtDW2JdPW5ldyB2KGIsMSwhMSxhLFwiaHR0cDovL3d3dy53My5vcmcvWE1MLzE5OTgvbmFtZXNwYWNlXCIsITEpfSk7W1widGFiSW5kZXhcIixcImNyb3NzT3JpZ2luXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7Q1thXT1uZXcgdihhLDEsITEsYS50b0xvd2VyQ2FzZSgpLG51bGwsITEpfSk7XG5DLnhsaW5rSHJlZj1uZXcgdihcInhsaW5rSHJlZlwiLDEsITEsXCJ4bGluazpocmVmXCIsXCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rXCIsITApO1tcInNyY1wiLFwiaHJlZlwiLFwiYWN0aW9uXCIsXCJmb3JtQWN0aW9uXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7Q1thXT1uZXcgdihhLDEsITEsYS50b0xvd2VyQ2FzZSgpLG51bGwsITApfSk7dmFyIFdhPWFhLl9fU0VDUkVUX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1lPVV9XSUxMX0JFX0ZJUkVEO1dhLmhhc093blByb3BlcnR5KFwiUmVhY3RDdXJyZW50RGlzcGF0Y2hlclwiKXx8KFdhLlJlYWN0Q3VycmVudERpc3BhdGNoZXI9e2N1cnJlbnQ6bnVsbH0pO1dhLmhhc093blByb3BlcnR5KFwiUmVhY3RDdXJyZW50QmF0Y2hDb25maWdcIil8fChXYS5SZWFjdEN1cnJlbnRCYXRjaENvbmZpZz17c3VzcGVuc2U6bnVsbH0pO1xuZnVuY3Rpb24gWGEoYSxiLGMsZCl7dmFyIGU9Qy5oYXNPd25Qcm9wZXJ0eShiKT9DW2JdOm51bGw7dmFyIGY9bnVsbCE9PWU/MD09PWUudHlwZTpkPyExOiEoMjxiLmxlbmd0aCl8fFwib1wiIT09YlswXSYmXCJPXCIhPT1iWzBdfHxcIm5cIiE9PWJbMV0mJlwiTlwiIT09YlsxXT8hMTohMDtmfHwoVGEoYixjLGUsZCkmJihjPW51bGwpLGR8fG51bGw9PT1lP1JhKGIpJiYobnVsbD09PWM/YS5yZW1vdmVBdHRyaWJ1dGUoYik6YS5zZXRBdHRyaWJ1dGUoYixcIlwiK2MpKTplLm11c3RVc2VQcm9wZXJ0eT9hW2UucHJvcGVydHlOYW1lXT1udWxsPT09Yz8zPT09ZS50eXBlPyExOlwiXCI6YzooYj1lLmF0dHJpYnV0ZU5hbWUsZD1lLmF0dHJpYnV0ZU5hbWVzcGFjZSxudWxsPT09Yz9hLnJlbW92ZUF0dHJpYnV0ZShiKTooZT1lLnR5cGUsYz0zPT09ZXx8ND09PWUmJiEwPT09Yz9cIlwiOlwiXCIrYyxkP2Euc2V0QXR0cmlidXRlTlMoZCxiLGMpOmEuc2V0QXR0cmlidXRlKGIsYykpKSl9XG52YXIgWWE9L14oLiopW1xcXFxcXC9dLyxFPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBTeW1ib2wmJlN5bWJvbC5mb3IsWmE9RT9TeW1ib2wuZm9yKFwicmVhY3QuZWxlbWVudFwiKTo2MDEwMywkYT1FP1N5bWJvbC5mb3IoXCJyZWFjdC5wb3J0YWxcIik6NjAxMDYsYWI9RT9TeW1ib2wuZm9yKFwicmVhY3QuZnJhZ21lbnRcIik6NjAxMDcsYmI9RT9TeW1ib2wuZm9yKFwicmVhY3Quc3RyaWN0X21vZGVcIik6NjAxMDgsY2I9RT9TeW1ib2wuZm9yKFwicmVhY3QucHJvZmlsZXJcIik6NjAxMTQsZGI9RT9TeW1ib2wuZm9yKFwicmVhY3QucHJvdmlkZXJcIik6NjAxMDksZWI9RT9TeW1ib2wuZm9yKFwicmVhY3QuY29udGV4dFwiKTo2MDExMCxmYj1FP1N5bWJvbC5mb3IoXCJyZWFjdC5jb25jdXJyZW50X21vZGVcIik6NjAxMTEsZ2I9RT9TeW1ib2wuZm9yKFwicmVhY3QuZm9yd2FyZF9yZWZcIik6NjAxMTIsaGI9RT9TeW1ib2wuZm9yKFwicmVhY3Quc3VzcGVuc2VcIik6NjAxMTMsaWI9RT9TeW1ib2wuZm9yKFwicmVhY3Quc3VzcGVuc2VfbGlzdFwiKTpcbjYwMTIwLGpiPUU/U3ltYm9sLmZvcihcInJlYWN0Lm1lbW9cIik6NjAxMTUsa2I9RT9TeW1ib2wuZm9yKFwicmVhY3QubGF6eVwiKTo2MDExNixsYj1FP1N5bWJvbC5mb3IoXCJyZWFjdC5ibG9ja1wiKTo2MDEyMSxtYj1cImZ1bmN0aW9uXCI9PT10eXBlb2YgU3ltYm9sJiZTeW1ib2wuaXRlcmF0b3I7ZnVuY3Rpb24gbmIoYSl7aWYobnVsbD09PWF8fFwib2JqZWN0XCIhPT10eXBlb2YgYSlyZXR1cm4gbnVsbDthPW1iJiZhW21iXXx8YVtcIkBAaXRlcmF0b3JcIl07cmV0dXJuXCJmdW5jdGlvblwiPT09dHlwZW9mIGE/YTpudWxsfWZ1bmN0aW9uIG9iKGEpe2lmKC0xPT09YS5fc3RhdHVzKXthLl9zdGF0dXM9MDt2YXIgYj1hLl9jdG9yO2I9YigpO2EuX3Jlc3VsdD1iO2IudGhlbihmdW5jdGlvbihiKXswPT09YS5fc3RhdHVzJiYoYj1iLmRlZmF1bHQsYS5fc3RhdHVzPTEsYS5fcmVzdWx0PWIpfSxmdW5jdGlvbihiKXswPT09YS5fc3RhdHVzJiYoYS5fc3RhdHVzPTIsYS5fcmVzdWx0PWIpfSl9fVxuZnVuY3Rpb24gcGIoYSl7aWYobnVsbD09YSlyZXR1cm4gbnVsbDtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYSlyZXR1cm4gYS5kaXNwbGF5TmFtZXx8YS5uYW1lfHxudWxsO2lmKFwic3RyaW5nXCI9PT10eXBlb2YgYSlyZXR1cm4gYTtzd2l0Y2goYSl7Y2FzZSBhYjpyZXR1cm5cIkZyYWdtZW50XCI7Y2FzZSAkYTpyZXR1cm5cIlBvcnRhbFwiO2Nhc2UgY2I6cmV0dXJuXCJQcm9maWxlclwiO2Nhc2UgYmI6cmV0dXJuXCJTdHJpY3RNb2RlXCI7Y2FzZSBoYjpyZXR1cm5cIlN1c3BlbnNlXCI7Y2FzZSBpYjpyZXR1cm5cIlN1c3BlbnNlTGlzdFwifWlmKFwib2JqZWN0XCI9PT10eXBlb2YgYSlzd2l0Y2goYS4kJHR5cGVvZil7Y2FzZSBlYjpyZXR1cm5cIkNvbnRleHQuQ29uc3VtZXJcIjtjYXNlIGRiOnJldHVyblwiQ29udGV4dC5Qcm92aWRlclwiO2Nhc2UgZ2I6dmFyIGI9YS5yZW5kZXI7Yj1iLmRpc3BsYXlOYW1lfHxiLm5hbWV8fFwiXCI7cmV0dXJuIGEuZGlzcGxheU5hbWV8fChcIlwiIT09Yj9cIkZvcndhcmRSZWYoXCIrYitcIilcIjpcblwiRm9yd2FyZFJlZlwiKTtjYXNlIGpiOnJldHVybiBwYihhLnR5cGUpO2Nhc2UgbGI6cmV0dXJuIHBiKGEucmVuZGVyKTtjYXNlIGtiOmlmKGE9MT09PWEuX3N0YXR1cz9hLl9yZXN1bHQ6bnVsbClyZXR1cm4gcGIoYSl9cmV0dXJuIG51bGx9ZnVuY3Rpb24gcWIoYSl7dmFyIGI9XCJcIjtkb3thOnN3aXRjaChhLnRhZyl7Y2FzZSAzOmNhc2UgNDpjYXNlIDY6Y2FzZSA3OmNhc2UgMTA6Y2FzZSA5OnZhciBjPVwiXCI7YnJlYWsgYTtkZWZhdWx0OnZhciBkPWEuX2RlYnVnT3duZXIsZT1hLl9kZWJ1Z1NvdXJjZSxmPXBiKGEudHlwZSk7Yz1udWxsO2QmJihjPXBiKGQudHlwZSkpO2Q9ZjtmPVwiXCI7ZT9mPVwiIChhdCBcIitlLmZpbGVOYW1lLnJlcGxhY2UoWWEsXCJcIikrXCI6XCIrZS5saW5lTnVtYmVyK1wiKVwiOmMmJihmPVwiIChjcmVhdGVkIGJ5IFwiK2MrXCIpXCIpO2M9XCJcXG4gICAgaW4gXCIrKGR8fFwiVW5rbm93blwiKStmfWIrPWM7YT1hLnJldHVybn13aGlsZShhKTtyZXR1cm4gYn1cbmZ1bmN0aW9uIHJiKGEpe3N3aXRjaCh0eXBlb2YgYSl7Y2FzZSBcImJvb2xlYW5cIjpjYXNlIFwibnVtYmVyXCI6Y2FzZSBcIm9iamVjdFwiOmNhc2UgXCJzdHJpbmdcIjpjYXNlIFwidW5kZWZpbmVkXCI6cmV0dXJuIGE7ZGVmYXVsdDpyZXR1cm5cIlwifX1mdW5jdGlvbiBzYihhKXt2YXIgYj1hLnR5cGU7cmV0dXJuKGE9YS5ub2RlTmFtZSkmJlwiaW5wdXRcIj09PWEudG9Mb3dlckNhc2UoKSYmKFwiY2hlY2tib3hcIj09PWJ8fFwicmFkaW9cIj09PWIpfVxuZnVuY3Rpb24gdGIoYSl7dmFyIGI9c2IoYSk/XCJjaGVja2VkXCI6XCJ2YWx1ZVwiLGM9T2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihhLmNvbnN0cnVjdG9yLnByb3RvdHlwZSxiKSxkPVwiXCIrYVtiXTtpZighYS5oYXNPd25Qcm9wZXJ0eShiKSYmXCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBjJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgYy5nZXQmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBjLnNldCl7dmFyIGU9Yy5nZXQsZj1jLnNldDtPYmplY3QuZGVmaW5lUHJvcGVydHkoYSxiLHtjb25maWd1cmFibGU6ITAsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIGUuY2FsbCh0aGlzKX0sc2V0OmZ1bmN0aW9uKGEpe2Q9XCJcIithO2YuY2FsbCh0aGlzLGEpfX0pO09iamVjdC5kZWZpbmVQcm9wZXJ0eShhLGIse2VudW1lcmFibGU6Yy5lbnVtZXJhYmxlfSk7cmV0dXJue2dldFZhbHVlOmZ1bmN0aW9uKCl7cmV0dXJuIGR9LHNldFZhbHVlOmZ1bmN0aW9uKGEpe2Q9XCJcIithfSxzdG9wVHJhY2tpbmc6ZnVuY3Rpb24oKXthLl92YWx1ZVRyYWNrZXI9XG5udWxsO2RlbGV0ZSBhW2JdfX19fWZ1bmN0aW9uIHhiKGEpe2EuX3ZhbHVlVHJhY2tlcnx8KGEuX3ZhbHVlVHJhY2tlcj10YihhKSl9ZnVuY3Rpb24geWIoYSl7aWYoIWEpcmV0dXJuITE7dmFyIGI9YS5fdmFsdWVUcmFja2VyO2lmKCFiKXJldHVybiEwO3ZhciBjPWIuZ2V0VmFsdWUoKTt2YXIgZD1cIlwiO2EmJihkPXNiKGEpP2EuY2hlY2tlZD9cInRydWVcIjpcImZhbHNlXCI6YS52YWx1ZSk7YT1kO3JldHVybiBhIT09Yz8oYi5zZXRWYWx1ZShhKSwhMCk6ITF9ZnVuY3Rpb24gemIoYSxiKXt2YXIgYz1iLmNoZWNrZWQ7cmV0dXJuIG4oe30sYix7ZGVmYXVsdENoZWNrZWQ6dm9pZCAwLGRlZmF1bHRWYWx1ZTp2b2lkIDAsdmFsdWU6dm9pZCAwLGNoZWNrZWQ6bnVsbCE9Yz9jOmEuX3dyYXBwZXJTdGF0ZS5pbml0aWFsQ2hlY2tlZH0pfVxuZnVuY3Rpb24gQWIoYSxiKXt2YXIgYz1udWxsPT1iLmRlZmF1bHRWYWx1ZT9cIlwiOmIuZGVmYXVsdFZhbHVlLGQ9bnVsbCE9Yi5jaGVja2VkP2IuY2hlY2tlZDpiLmRlZmF1bHRDaGVja2VkO2M9cmIobnVsbCE9Yi52YWx1ZT9iLnZhbHVlOmMpO2EuX3dyYXBwZXJTdGF0ZT17aW5pdGlhbENoZWNrZWQ6ZCxpbml0aWFsVmFsdWU6Yyxjb250cm9sbGVkOlwiY2hlY2tib3hcIj09PWIudHlwZXx8XCJyYWRpb1wiPT09Yi50eXBlP251bGwhPWIuY2hlY2tlZDpudWxsIT1iLnZhbHVlfX1mdW5jdGlvbiBCYihhLGIpe2I9Yi5jaGVja2VkO251bGwhPWImJlhhKGEsXCJjaGVja2VkXCIsYiwhMSl9XG5mdW5jdGlvbiBDYihhLGIpe0JiKGEsYik7dmFyIGM9cmIoYi52YWx1ZSksZD1iLnR5cGU7aWYobnVsbCE9YylpZihcIm51bWJlclwiPT09ZCl7aWYoMD09PWMmJlwiXCI9PT1hLnZhbHVlfHxhLnZhbHVlIT1jKWEudmFsdWU9XCJcIitjfWVsc2UgYS52YWx1ZSE9PVwiXCIrYyYmKGEudmFsdWU9XCJcIitjKTtlbHNlIGlmKFwic3VibWl0XCI9PT1kfHxcInJlc2V0XCI9PT1kKXthLnJlbW92ZUF0dHJpYnV0ZShcInZhbHVlXCIpO3JldHVybn1iLmhhc093blByb3BlcnR5KFwidmFsdWVcIik/RGIoYSxiLnR5cGUsYyk6Yi5oYXNPd25Qcm9wZXJ0eShcImRlZmF1bHRWYWx1ZVwiKSYmRGIoYSxiLnR5cGUscmIoYi5kZWZhdWx0VmFsdWUpKTtudWxsPT1iLmNoZWNrZWQmJm51bGwhPWIuZGVmYXVsdENoZWNrZWQmJihhLmRlZmF1bHRDaGVja2VkPSEhYi5kZWZhdWx0Q2hlY2tlZCl9XG5mdW5jdGlvbiBFYihhLGIsYyl7aWYoYi5oYXNPd25Qcm9wZXJ0eShcInZhbHVlXCIpfHxiLmhhc093blByb3BlcnR5KFwiZGVmYXVsdFZhbHVlXCIpKXt2YXIgZD1iLnR5cGU7aWYoIShcInN1Ym1pdFwiIT09ZCYmXCJyZXNldFwiIT09ZHx8dm9pZCAwIT09Yi52YWx1ZSYmbnVsbCE9PWIudmFsdWUpKXJldHVybjtiPVwiXCIrYS5fd3JhcHBlclN0YXRlLmluaXRpYWxWYWx1ZTtjfHxiPT09YS52YWx1ZXx8KGEudmFsdWU9Yik7YS5kZWZhdWx0VmFsdWU9Yn1jPWEubmFtZTtcIlwiIT09YyYmKGEubmFtZT1cIlwiKTthLmRlZmF1bHRDaGVja2VkPSEhYS5fd3JhcHBlclN0YXRlLmluaXRpYWxDaGVja2VkO1wiXCIhPT1jJiYoYS5uYW1lPWMpfVxuZnVuY3Rpb24gRGIoYSxiLGMpe2lmKFwibnVtYmVyXCIhPT1ifHxhLm93bmVyRG9jdW1lbnQuYWN0aXZlRWxlbWVudCE9PWEpbnVsbD09Yz9hLmRlZmF1bHRWYWx1ZT1cIlwiK2EuX3dyYXBwZXJTdGF0ZS5pbml0aWFsVmFsdWU6YS5kZWZhdWx0VmFsdWUhPT1cIlwiK2MmJihhLmRlZmF1bHRWYWx1ZT1cIlwiK2MpfWZ1bmN0aW9uIEZiKGEpe3ZhciBiPVwiXCI7YWEuQ2hpbGRyZW4uZm9yRWFjaChhLGZ1bmN0aW9uKGEpe251bGwhPWEmJihiKz1hKX0pO3JldHVybiBifWZ1bmN0aW9uIEdiKGEsYil7YT1uKHtjaGlsZHJlbjp2b2lkIDB9LGIpO2lmKGI9RmIoYi5jaGlsZHJlbikpYS5jaGlsZHJlbj1iO3JldHVybiBhfVxuZnVuY3Rpb24gSGIoYSxiLGMsZCl7YT1hLm9wdGlvbnM7aWYoYil7Yj17fTtmb3IodmFyIGU9MDtlPGMubGVuZ3RoO2UrKyliW1wiJFwiK2NbZV1dPSEwO2ZvcihjPTA7YzxhLmxlbmd0aDtjKyspZT1iLmhhc093blByb3BlcnR5KFwiJFwiK2FbY10udmFsdWUpLGFbY10uc2VsZWN0ZWQhPT1lJiYoYVtjXS5zZWxlY3RlZD1lKSxlJiZkJiYoYVtjXS5kZWZhdWx0U2VsZWN0ZWQ9ITApfWVsc2V7Yz1cIlwiK3JiKGMpO2I9bnVsbDtmb3IoZT0wO2U8YS5sZW5ndGg7ZSsrKXtpZihhW2VdLnZhbHVlPT09Yyl7YVtlXS5zZWxlY3RlZD0hMDtkJiYoYVtlXS5kZWZhdWx0U2VsZWN0ZWQ9ITApO3JldHVybn1udWxsIT09Ynx8YVtlXS5kaXNhYmxlZHx8KGI9YVtlXSl9bnVsbCE9PWImJihiLnNlbGVjdGVkPSEwKX19XG5mdW5jdGlvbiBJYihhLGIpe2lmKG51bGwhPWIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwpdGhyb3cgRXJyb3IodSg5MSkpO3JldHVybiBuKHt9LGIse3ZhbHVlOnZvaWQgMCxkZWZhdWx0VmFsdWU6dm9pZCAwLGNoaWxkcmVuOlwiXCIrYS5fd3JhcHBlclN0YXRlLmluaXRpYWxWYWx1ZX0pfWZ1bmN0aW9uIEpiKGEsYil7dmFyIGM9Yi52YWx1ZTtpZihudWxsPT1jKXtjPWIuY2hpbGRyZW47Yj1iLmRlZmF1bHRWYWx1ZTtpZihudWxsIT1jKXtpZihudWxsIT1iKXRocm93IEVycm9yKHUoOTIpKTtpZihBcnJheS5pc0FycmF5KGMpKXtpZighKDE+PWMubGVuZ3RoKSl0aHJvdyBFcnJvcih1KDkzKSk7Yz1jWzBdfWI9Y31udWxsPT1iJiYoYj1cIlwiKTtjPWJ9YS5fd3JhcHBlclN0YXRlPXtpbml0aWFsVmFsdWU6cmIoYyl9fVxuZnVuY3Rpb24gS2IoYSxiKXt2YXIgYz1yYihiLnZhbHVlKSxkPXJiKGIuZGVmYXVsdFZhbHVlKTtudWxsIT1jJiYoYz1cIlwiK2MsYyE9PWEudmFsdWUmJihhLnZhbHVlPWMpLG51bGw9PWIuZGVmYXVsdFZhbHVlJiZhLmRlZmF1bHRWYWx1ZSE9PWMmJihhLmRlZmF1bHRWYWx1ZT1jKSk7bnVsbCE9ZCYmKGEuZGVmYXVsdFZhbHVlPVwiXCIrZCl9ZnVuY3Rpb24gTGIoYSl7dmFyIGI9YS50ZXh0Q29udGVudDtiPT09YS5fd3JhcHBlclN0YXRlLmluaXRpYWxWYWx1ZSYmXCJcIiE9PWImJm51bGwhPT1iJiYoYS52YWx1ZT1iKX12YXIgTWI9e2h0bWw6XCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sXCIsbWF0aG1sOlwiaHR0cDovL3d3dy53My5vcmcvMTk5OC9NYXRoL01hdGhNTFwiLHN2ZzpcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCJ9O1xuZnVuY3Rpb24gTmIoYSl7c3dpdGNoKGEpe2Nhc2UgXCJzdmdcIjpyZXR1cm5cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCI7Y2FzZSBcIm1hdGhcIjpyZXR1cm5cImh0dHA6Ly93d3cudzMub3JnLzE5OTgvTWF0aC9NYXRoTUxcIjtkZWZhdWx0OnJldHVyblwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbFwifX1mdW5jdGlvbiBPYihhLGIpe3JldHVybiBudWxsPT1hfHxcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIj09PWE/TmIoYik6XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiPT09YSYmXCJmb3JlaWduT2JqZWN0XCI9PT1iP1wiaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbFwiOmF9XG52YXIgUGIsUWI9ZnVuY3Rpb24oYSl7cmV0dXJuXCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBNU0FwcCYmTVNBcHAuZXhlY1Vuc2FmZUxvY2FsRnVuY3Rpb24/ZnVuY3Rpb24oYixjLGQsZSl7TVNBcHAuZXhlY1Vuc2FmZUxvY2FsRnVuY3Rpb24oZnVuY3Rpb24oKXtyZXR1cm4gYShiLGMsZCxlKX0pfTphfShmdW5jdGlvbihhLGIpe2lmKGEubmFtZXNwYWNlVVJJIT09TWIuc3ZnfHxcImlubmVySFRNTFwiaW4gYSlhLmlubmVySFRNTD1iO2Vsc2V7UGI9UGJ8fGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7UGIuaW5uZXJIVE1MPVwiPHN2Zz5cIitiLnZhbHVlT2YoKS50b1N0cmluZygpK1wiPC9zdmc+XCI7Zm9yKGI9UGIuZmlyc3RDaGlsZDthLmZpcnN0Q2hpbGQ7KWEucmVtb3ZlQ2hpbGQoYS5maXJzdENoaWxkKTtmb3IoO2IuZmlyc3RDaGlsZDspYS5hcHBlbmRDaGlsZChiLmZpcnN0Q2hpbGQpfX0pO1xuZnVuY3Rpb24gUmIoYSxiKXtpZihiKXt2YXIgYz1hLmZpcnN0Q2hpbGQ7aWYoYyYmYz09PWEubGFzdENoaWxkJiYzPT09Yy5ub2RlVHlwZSl7Yy5ub2RlVmFsdWU9YjtyZXR1cm59fWEudGV4dENvbnRlbnQ9Yn1mdW5jdGlvbiBTYihhLGIpe3ZhciBjPXt9O2NbYS50b0xvd2VyQ2FzZSgpXT1iLnRvTG93ZXJDYXNlKCk7Y1tcIldlYmtpdFwiK2FdPVwid2Via2l0XCIrYjtjW1wiTW96XCIrYV09XCJtb3pcIitiO3JldHVybiBjfXZhciBUYj17YW5pbWF0aW9uZW5kOlNiKFwiQW5pbWF0aW9uXCIsXCJBbmltYXRpb25FbmRcIiksYW5pbWF0aW9uaXRlcmF0aW9uOlNiKFwiQW5pbWF0aW9uXCIsXCJBbmltYXRpb25JdGVyYXRpb25cIiksYW5pbWF0aW9uc3RhcnQ6U2IoXCJBbmltYXRpb25cIixcIkFuaW1hdGlvblN0YXJ0XCIpLHRyYW5zaXRpb25lbmQ6U2IoXCJUcmFuc2l0aW9uXCIsXCJUcmFuc2l0aW9uRW5kXCIpfSxVYj17fSxWYj17fTtcbnlhJiYoVmI9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKS5zdHlsZSxcIkFuaW1hdGlvbkV2ZW50XCJpbiB3aW5kb3d8fChkZWxldGUgVGIuYW5pbWF0aW9uZW5kLmFuaW1hdGlvbixkZWxldGUgVGIuYW5pbWF0aW9uaXRlcmF0aW9uLmFuaW1hdGlvbixkZWxldGUgVGIuYW5pbWF0aW9uc3RhcnQuYW5pbWF0aW9uKSxcIlRyYW5zaXRpb25FdmVudFwiaW4gd2luZG93fHxkZWxldGUgVGIudHJhbnNpdGlvbmVuZC50cmFuc2l0aW9uKTtmdW5jdGlvbiBXYihhKXtpZihVYlthXSlyZXR1cm4gVWJbYV07aWYoIVRiW2FdKXJldHVybiBhO3ZhciBiPVRiW2FdLGM7Zm9yKGMgaW4gYilpZihiLmhhc093blByb3BlcnR5KGMpJiZjIGluIFZiKXJldHVybiBVYlthXT1iW2NdO3JldHVybiBhfVxudmFyIFhiPVdiKFwiYW5pbWF0aW9uZW5kXCIpLFliPVdiKFwiYW5pbWF0aW9uaXRlcmF0aW9uXCIpLFpiPVdiKFwiYW5pbWF0aW9uc3RhcnRcIiksJGI9V2IoXCJ0cmFuc2l0aW9uZW5kXCIpLGFjPVwiYWJvcnQgY2FucGxheSBjYW5wbGF5dGhyb3VnaCBkdXJhdGlvbmNoYW5nZSBlbXB0aWVkIGVuY3J5cHRlZCBlbmRlZCBlcnJvciBsb2FkZWRkYXRhIGxvYWRlZG1ldGFkYXRhIGxvYWRzdGFydCBwYXVzZSBwbGF5IHBsYXlpbmcgcHJvZ3Jlc3MgcmF0ZWNoYW5nZSBzZWVrZWQgc2Vla2luZyBzdGFsbGVkIHN1c3BlbmQgdGltZXVwZGF0ZSB2b2x1bWVjaGFuZ2Ugd2FpdGluZ1wiLnNwbGl0KFwiIFwiKSxiYz1uZXcgKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBXZWFrTWFwP1dlYWtNYXA6TWFwKTtmdW5jdGlvbiBjYyhhKXt2YXIgYj1iYy5nZXQoYSk7dm9pZCAwPT09YiYmKGI9bmV3IE1hcCxiYy5zZXQoYSxiKSk7cmV0dXJuIGJ9XG5mdW5jdGlvbiBkYyhhKXt2YXIgYj1hLGM9YTtpZihhLmFsdGVybmF0ZSlmb3IoO2IucmV0dXJuOyliPWIucmV0dXJuO2Vsc2V7YT1iO2RvIGI9YSwwIT09KGIuZWZmZWN0VGFnJjEwMjYpJiYoYz1iLnJldHVybiksYT1iLnJldHVybjt3aGlsZShhKX1yZXR1cm4gMz09PWIudGFnP2M6bnVsbH1mdW5jdGlvbiBlYyhhKXtpZigxMz09PWEudGFnKXt2YXIgYj1hLm1lbW9pemVkU3RhdGU7bnVsbD09PWImJihhPWEuYWx0ZXJuYXRlLG51bGwhPT1hJiYoYj1hLm1lbW9pemVkU3RhdGUpKTtpZihudWxsIT09YilyZXR1cm4gYi5kZWh5ZHJhdGVkfXJldHVybiBudWxsfWZ1bmN0aW9uIGZjKGEpe2lmKGRjKGEpIT09YSl0aHJvdyBFcnJvcih1KDE4OCkpO31cbmZ1bmN0aW9uIGdjKGEpe3ZhciBiPWEuYWx0ZXJuYXRlO2lmKCFiKXtiPWRjKGEpO2lmKG51bGw9PT1iKXRocm93IEVycm9yKHUoMTg4KSk7cmV0dXJuIGIhPT1hP251bGw6YX1mb3IodmFyIGM9YSxkPWI7Oyl7dmFyIGU9Yy5yZXR1cm47aWYobnVsbD09PWUpYnJlYWs7dmFyIGY9ZS5hbHRlcm5hdGU7aWYobnVsbD09PWYpe2Q9ZS5yZXR1cm47aWYobnVsbCE9PWQpe2M9ZDtjb250aW51ZX1icmVha31pZihlLmNoaWxkPT09Zi5jaGlsZCl7Zm9yKGY9ZS5jaGlsZDtmOyl7aWYoZj09PWMpcmV0dXJuIGZjKGUpLGE7aWYoZj09PWQpcmV0dXJuIGZjKGUpLGI7Zj1mLnNpYmxpbmd9dGhyb3cgRXJyb3IodSgxODgpKTt9aWYoYy5yZXR1cm4hPT1kLnJldHVybiljPWUsZD1mO2Vsc2V7Zm9yKHZhciBnPSExLGg9ZS5jaGlsZDtoOyl7aWYoaD09PWMpe2c9ITA7Yz1lO2Q9ZjticmVha31pZihoPT09ZCl7Zz0hMDtkPWU7Yz1mO2JyZWFrfWg9aC5zaWJsaW5nfWlmKCFnKXtmb3IoaD1mLmNoaWxkO2g7KXtpZihoPT09XG5jKXtnPSEwO2M9ZjtkPWU7YnJlYWt9aWYoaD09PWQpe2c9ITA7ZD1mO2M9ZTticmVha31oPWguc2libGluZ31pZighZyl0aHJvdyBFcnJvcih1KDE4OSkpO319aWYoYy5hbHRlcm5hdGUhPT1kKXRocm93IEVycm9yKHUoMTkwKSk7fWlmKDMhPT1jLnRhZyl0aHJvdyBFcnJvcih1KDE4OCkpO3JldHVybiBjLnN0YXRlTm9kZS5jdXJyZW50PT09Yz9hOmJ9ZnVuY3Rpb24gaGMoYSl7YT1nYyhhKTtpZighYSlyZXR1cm4gbnVsbDtmb3IodmFyIGI9YTs7KXtpZig1PT09Yi50YWd8fDY9PT1iLnRhZylyZXR1cm4gYjtpZihiLmNoaWxkKWIuY2hpbGQucmV0dXJuPWIsYj1iLmNoaWxkO2Vsc2V7aWYoYj09PWEpYnJlYWs7Zm9yKDshYi5zaWJsaW5nOyl7aWYoIWIucmV0dXJufHxiLnJldHVybj09PWEpcmV0dXJuIG51bGw7Yj1iLnJldHVybn1iLnNpYmxpbmcucmV0dXJuPWIucmV0dXJuO2I9Yi5zaWJsaW5nfX1yZXR1cm4gbnVsbH1cbmZ1bmN0aW9uIGljKGEsYil7aWYobnVsbD09Yil0aHJvdyBFcnJvcih1KDMwKSk7aWYobnVsbD09YSlyZXR1cm4gYjtpZihBcnJheS5pc0FycmF5KGEpKXtpZihBcnJheS5pc0FycmF5KGIpKXJldHVybiBhLnB1c2guYXBwbHkoYSxiKSxhO2EucHVzaChiKTtyZXR1cm4gYX1yZXR1cm4gQXJyYXkuaXNBcnJheShiKT9bYV0uY29uY2F0KGIpOlthLGJdfWZ1bmN0aW9uIGpjKGEsYixjKXtBcnJheS5pc0FycmF5KGEpP2EuZm9yRWFjaChiLGMpOmEmJmIuY2FsbChjLGEpfXZhciBrYz1udWxsO1xuZnVuY3Rpb24gbGMoYSl7aWYoYSl7dmFyIGI9YS5fZGlzcGF0Y2hMaXN0ZW5lcnMsYz1hLl9kaXNwYXRjaEluc3RhbmNlcztpZihBcnJheS5pc0FycmF5KGIpKWZvcih2YXIgZD0wO2Q8Yi5sZW5ndGgmJiFhLmlzUHJvcGFnYXRpb25TdG9wcGVkKCk7ZCsrKW9hKGEsYltkXSxjW2RdKTtlbHNlIGImJm9hKGEsYixjKTthLl9kaXNwYXRjaExpc3RlbmVycz1udWxsO2EuX2Rpc3BhdGNoSW5zdGFuY2VzPW51bGw7YS5pc1BlcnNpc3RlbnQoKXx8YS5jb25zdHJ1Y3Rvci5yZWxlYXNlKGEpfX1mdW5jdGlvbiBtYyhhKXtudWxsIT09YSYmKGtjPWljKGtjLGEpKTthPWtjO2tjPW51bGw7aWYoYSl7amMoYSxsYyk7aWYoa2MpdGhyb3cgRXJyb3IodSg5NSkpO2lmKGZhKXRocm93IGE9aGEsZmE9ITEsaGE9bnVsbCxhO319XG5mdW5jdGlvbiBuYyhhKXthPWEudGFyZ2V0fHxhLnNyY0VsZW1lbnR8fHdpbmRvdzthLmNvcnJlc3BvbmRpbmdVc2VFbGVtZW50JiYoYT1hLmNvcnJlc3BvbmRpbmdVc2VFbGVtZW50KTtyZXR1cm4gMz09PWEubm9kZVR5cGU/YS5wYXJlbnROb2RlOmF9ZnVuY3Rpb24gb2MoYSl7aWYoIXlhKXJldHVybiExO2E9XCJvblwiK2E7dmFyIGI9YSBpbiBkb2N1bWVudDtifHwoYj1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpLGIuc2V0QXR0cmlidXRlKGEsXCJyZXR1cm47XCIpLGI9XCJmdW5jdGlvblwiPT09dHlwZW9mIGJbYV0pO3JldHVybiBifXZhciBwYz1bXTtmdW5jdGlvbiBxYyhhKXthLnRvcExldmVsVHlwZT1udWxsO2EubmF0aXZlRXZlbnQ9bnVsbDthLnRhcmdldEluc3Q9bnVsbDthLmFuY2VzdG9ycy5sZW5ndGg9MDsxMD5wYy5sZW5ndGgmJnBjLnB1c2goYSl9XG5mdW5jdGlvbiByYyhhLGIsYyxkKXtpZihwYy5sZW5ndGgpe3ZhciBlPXBjLnBvcCgpO2UudG9wTGV2ZWxUeXBlPWE7ZS5ldmVudFN5c3RlbUZsYWdzPWQ7ZS5uYXRpdmVFdmVudD1iO2UudGFyZ2V0SW5zdD1jO3JldHVybiBlfXJldHVybnt0b3BMZXZlbFR5cGU6YSxldmVudFN5c3RlbUZsYWdzOmQsbmF0aXZlRXZlbnQ6Yix0YXJnZXRJbnN0OmMsYW5jZXN0b3JzOltdfX1cbmZ1bmN0aW9uIHNjKGEpe3ZhciBiPWEudGFyZ2V0SW5zdCxjPWI7ZG97aWYoIWMpe2EuYW5jZXN0b3JzLnB1c2goYyk7YnJlYWt9dmFyIGQ9YztpZigzPT09ZC50YWcpZD1kLnN0YXRlTm9kZS5jb250YWluZXJJbmZvO2Vsc2V7Zm9yKDtkLnJldHVybjspZD1kLnJldHVybjtkPTMhPT1kLnRhZz9udWxsOmQuc3RhdGVOb2RlLmNvbnRhaW5lckluZm99aWYoIWQpYnJlYWs7Yj1jLnRhZzs1IT09YiYmNiE9PWJ8fGEuYW5jZXN0b3JzLnB1c2goYyk7Yz10YyhkKX13aGlsZShjKTtmb3IoYz0wO2M8YS5hbmNlc3RvcnMubGVuZ3RoO2MrKyl7Yj1hLmFuY2VzdG9yc1tjXTt2YXIgZT1uYyhhLm5hdGl2ZUV2ZW50KTtkPWEudG9wTGV2ZWxUeXBlO3ZhciBmPWEubmF0aXZlRXZlbnQsZz1hLmV2ZW50U3lzdGVtRmxhZ3M7MD09PWMmJihnfD02NCk7Zm9yKHZhciBoPW51bGwsaz0wO2s8c2EubGVuZ3RoO2srKyl7dmFyIGw9c2Fba107bCYmKGw9bC5leHRyYWN0RXZlbnRzKGQsYixmLGUsZykpJiYoaD1cbmljKGgsbCkpfW1jKGgpfX1mdW5jdGlvbiB1YyhhLGIsYyl7aWYoIWMuaGFzKGEpKXtzd2l0Y2goYSl7Y2FzZSBcInNjcm9sbFwiOnZjKGIsXCJzY3JvbGxcIiwhMCk7YnJlYWs7Y2FzZSBcImZvY3VzXCI6Y2FzZSBcImJsdXJcIjp2YyhiLFwiZm9jdXNcIiwhMCk7dmMoYixcImJsdXJcIiwhMCk7Yy5zZXQoXCJibHVyXCIsbnVsbCk7Yy5zZXQoXCJmb2N1c1wiLG51bGwpO2JyZWFrO2Nhc2UgXCJjYW5jZWxcIjpjYXNlIFwiY2xvc2VcIjpvYyhhKSYmdmMoYixhLCEwKTticmVhaztjYXNlIFwiaW52YWxpZFwiOmNhc2UgXCJzdWJtaXRcIjpjYXNlIFwicmVzZXRcIjpicmVhaztkZWZhdWx0Oi0xPT09YWMuaW5kZXhPZihhKSYmRihhLGIpfWMuc2V0KGEsbnVsbCl9fVxudmFyIHdjLHhjLHljLHpjPSExLEFjPVtdLEJjPW51bGwsQ2M9bnVsbCxEYz1udWxsLEVjPW5ldyBNYXAsRmM9bmV3IE1hcCxHYz1bXSxIYz1cIm1vdXNlZG93biBtb3VzZXVwIHRvdWNoY2FuY2VsIHRvdWNoZW5kIHRvdWNoc3RhcnQgYXV4Y2xpY2sgZGJsY2xpY2sgcG9pbnRlcmNhbmNlbCBwb2ludGVyZG93biBwb2ludGVydXAgZHJhZ2VuZCBkcmFnc3RhcnQgZHJvcCBjb21wb3NpdGlvbmVuZCBjb21wb3NpdGlvbnN0YXJ0IGtleWRvd24ga2V5cHJlc3Mga2V5dXAgaW5wdXQgdGV4dElucHV0IGNsb3NlIGNhbmNlbCBjb3B5IGN1dCBwYXN0ZSBjbGljayBjaGFuZ2UgY29udGV4dG1lbnUgcmVzZXQgc3VibWl0XCIuc3BsaXQoXCIgXCIpLEljPVwiZm9jdXMgYmx1ciBkcmFnZW50ZXIgZHJhZ2xlYXZlIG1vdXNlb3ZlciBtb3VzZW91dCBwb2ludGVyb3ZlciBwb2ludGVyb3V0IGdvdHBvaW50ZXJjYXB0dXJlIGxvc3Rwb2ludGVyY2FwdHVyZVwiLnNwbGl0KFwiIFwiKTtcbmZ1bmN0aW9uIEpjKGEsYil7dmFyIGM9Y2MoYik7SGMuZm9yRWFjaChmdW5jdGlvbihhKXt1YyhhLGIsYyl9KTtJYy5mb3JFYWNoKGZ1bmN0aW9uKGEpe3VjKGEsYixjKX0pfWZ1bmN0aW9uIEtjKGEsYixjLGQsZSl7cmV0dXJue2Jsb2NrZWRPbjphLHRvcExldmVsVHlwZTpiLGV2ZW50U3lzdGVtRmxhZ3M6Y3wzMixuYXRpdmVFdmVudDplLGNvbnRhaW5lcjpkfX1cbmZ1bmN0aW9uIExjKGEsYil7c3dpdGNoKGEpe2Nhc2UgXCJmb2N1c1wiOmNhc2UgXCJibHVyXCI6QmM9bnVsbDticmVhaztjYXNlIFwiZHJhZ2VudGVyXCI6Y2FzZSBcImRyYWdsZWF2ZVwiOkNjPW51bGw7YnJlYWs7Y2FzZSBcIm1vdXNlb3ZlclwiOmNhc2UgXCJtb3VzZW91dFwiOkRjPW51bGw7YnJlYWs7Y2FzZSBcInBvaW50ZXJvdmVyXCI6Y2FzZSBcInBvaW50ZXJvdXRcIjpFYy5kZWxldGUoYi5wb2ludGVySWQpO2JyZWFrO2Nhc2UgXCJnb3Rwb2ludGVyY2FwdHVyZVwiOmNhc2UgXCJsb3N0cG9pbnRlcmNhcHR1cmVcIjpGYy5kZWxldGUoYi5wb2ludGVySWQpfX1mdW5jdGlvbiBNYyhhLGIsYyxkLGUsZil7aWYobnVsbD09PWF8fGEubmF0aXZlRXZlbnQhPT1mKXJldHVybiBhPUtjKGIsYyxkLGUsZiksbnVsbCE9PWImJihiPU5jKGIpLG51bGwhPT1iJiZ4YyhiKSksYTthLmV2ZW50U3lzdGVtRmxhZ3N8PWQ7cmV0dXJuIGF9XG5mdW5jdGlvbiBPYyhhLGIsYyxkLGUpe3N3aXRjaChiKXtjYXNlIFwiZm9jdXNcIjpyZXR1cm4gQmM9TWMoQmMsYSxiLGMsZCxlKSwhMDtjYXNlIFwiZHJhZ2VudGVyXCI6cmV0dXJuIENjPU1jKENjLGEsYixjLGQsZSksITA7Y2FzZSBcIm1vdXNlb3ZlclwiOnJldHVybiBEYz1NYyhEYyxhLGIsYyxkLGUpLCEwO2Nhc2UgXCJwb2ludGVyb3ZlclwiOnZhciBmPWUucG9pbnRlcklkO0VjLnNldChmLE1jKEVjLmdldChmKXx8bnVsbCxhLGIsYyxkLGUpKTtyZXR1cm4hMDtjYXNlIFwiZ290cG9pbnRlcmNhcHR1cmVcIjpyZXR1cm4gZj1lLnBvaW50ZXJJZCxGYy5zZXQoZixNYyhGYy5nZXQoZil8fG51bGwsYSxiLGMsZCxlKSksITB9cmV0dXJuITF9XG5mdW5jdGlvbiBQYyhhKXt2YXIgYj10YyhhLnRhcmdldCk7aWYobnVsbCE9PWIpe3ZhciBjPWRjKGIpO2lmKG51bGwhPT1jKWlmKGI9Yy50YWcsMTM9PT1iKXtpZihiPWVjKGMpLG51bGwhPT1iKXthLmJsb2NrZWRPbj1iO3IudW5zdGFibGVfcnVuV2l0aFByaW9yaXR5KGEucHJpb3JpdHksZnVuY3Rpb24oKXt5YyhjKX0pO3JldHVybn19ZWxzZSBpZigzPT09YiYmYy5zdGF0ZU5vZGUuaHlkcmF0ZSl7YS5ibG9ja2VkT249Mz09PWMudGFnP2Muc3RhdGVOb2RlLmNvbnRhaW5lckluZm86bnVsbDtyZXR1cm59fWEuYmxvY2tlZE9uPW51bGx9ZnVuY3Rpb24gUWMoYSl7aWYobnVsbCE9PWEuYmxvY2tlZE9uKXJldHVybiExO3ZhciBiPVJjKGEudG9wTGV2ZWxUeXBlLGEuZXZlbnRTeXN0ZW1GbGFncyxhLmNvbnRhaW5lcixhLm5hdGl2ZUV2ZW50KTtpZihudWxsIT09Yil7dmFyIGM9TmMoYik7bnVsbCE9PWMmJnhjKGMpO2EuYmxvY2tlZE9uPWI7cmV0dXJuITF9cmV0dXJuITB9XG5mdW5jdGlvbiBTYyhhLGIsYyl7UWMoYSkmJmMuZGVsZXRlKGIpfWZ1bmN0aW9uIFRjKCl7Zm9yKHpjPSExOzA8QWMubGVuZ3RoOyl7dmFyIGE9QWNbMF07aWYobnVsbCE9PWEuYmxvY2tlZE9uKXthPU5jKGEuYmxvY2tlZE9uKTtudWxsIT09YSYmd2MoYSk7YnJlYWt9dmFyIGI9UmMoYS50b3BMZXZlbFR5cGUsYS5ldmVudFN5c3RlbUZsYWdzLGEuY29udGFpbmVyLGEubmF0aXZlRXZlbnQpO251bGwhPT1iP2EuYmxvY2tlZE9uPWI6QWMuc2hpZnQoKX1udWxsIT09QmMmJlFjKEJjKSYmKEJjPW51bGwpO251bGwhPT1DYyYmUWMoQ2MpJiYoQ2M9bnVsbCk7bnVsbCE9PURjJiZRYyhEYykmJihEYz1udWxsKTtFYy5mb3JFYWNoKFNjKTtGYy5mb3JFYWNoKFNjKX1mdW5jdGlvbiBVYyhhLGIpe2EuYmxvY2tlZE9uPT09YiYmKGEuYmxvY2tlZE9uPW51bGwsemN8fCh6Yz0hMCxyLnVuc3RhYmxlX3NjaGVkdWxlQ2FsbGJhY2soci51bnN0YWJsZV9Ob3JtYWxQcmlvcml0eSxUYykpKX1cbmZ1bmN0aW9uIFZjKGEpe2Z1bmN0aW9uIGIoYil7cmV0dXJuIFVjKGIsYSl9aWYoMDxBYy5sZW5ndGgpe1VjKEFjWzBdLGEpO2Zvcih2YXIgYz0xO2M8QWMubGVuZ3RoO2MrKyl7dmFyIGQ9QWNbY107ZC5ibG9ja2VkT249PT1hJiYoZC5ibG9ja2VkT249bnVsbCl9fW51bGwhPT1CYyYmVWMoQmMsYSk7bnVsbCE9PUNjJiZVYyhDYyxhKTtudWxsIT09RGMmJlVjKERjLGEpO0VjLmZvckVhY2goYik7RmMuZm9yRWFjaChiKTtmb3IoYz0wO2M8R2MubGVuZ3RoO2MrKylkPUdjW2NdLGQuYmxvY2tlZE9uPT09YSYmKGQuYmxvY2tlZE9uPW51bGwpO2Zvcig7MDxHYy5sZW5ndGgmJihjPUdjWzBdLG51bGw9PT1jLmJsb2NrZWRPbik7KVBjKGMpLG51bGw9PT1jLmJsb2NrZWRPbiYmR2Muc2hpZnQoKX1cbnZhciBXYz17fSxZYz1uZXcgTWFwLFpjPW5ldyBNYXAsJGM9W1wiYWJvcnRcIixcImFib3J0XCIsWGIsXCJhbmltYXRpb25FbmRcIixZYixcImFuaW1hdGlvbkl0ZXJhdGlvblwiLFpiLFwiYW5pbWF0aW9uU3RhcnRcIixcImNhbnBsYXlcIixcImNhblBsYXlcIixcImNhbnBsYXl0aHJvdWdoXCIsXCJjYW5QbGF5VGhyb3VnaFwiLFwiZHVyYXRpb25jaGFuZ2VcIixcImR1cmF0aW9uQ2hhbmdlXCIsXCJlbXB0aWVkXCIsXCJlbXB0aWVkXCIsXCJlbmNyeXB0ZWRcIixcImVuY3J5cHRlZFwiLFwiZW5kZWRcIixcImVuZGVkXCIsXCJlcnJvclwiLFwiZXJyb3JcIixcImdvdHBvaW50ZXJjYXB0dXJlXCIsXCJnb3RQb2ludGVyQ2FwdHVyZVwiLFwibG9hZFwiLFwibG9hZFwiLFwibG9hZGVkZGF0YVwiLFwibG9hZGVkRGF0YVwiLFwibG9hZGVkbWV0YWRhdGFcIixcImxvYWRlZE1ldGFkYXRhXCIsXCJsb2Fkc3RhcnRcIixcImxvYWRTdGFydFwiLFwibG9zdHBvaW50ZXJjYXB0dXJlXCIsXCJsb3N0UG9pbnRlckNhcHR1cmVcIixcInBsYXlpbmdcIixcInBsYXlpbmdcIixcInByb2dyZXNzXCIsXCJwcm9ncmVzc1wiLFwic2Vla2luZ1wiLFxuXCJzZWVraW5nXCIsXCJzdGFsbGVkXCIsXCJzdGFsbGVkXCIsXCJzdXNwZW5kXCIsXCJzdXNwZW5kXCIsXCJ0aW1ldXBkYXRlXCIsXCJ0aW1lVXBkYXRlXCIsJGIsXCJ0cmFuc2l0aW9uRW5kXCIsXCJ3YWl0aW5nXCIsXCJ3YWl0aW5nXCJdO2Z1bmN0aW9uIGFkKGEsYil7Zm9yKHZhciBjPTA7YzxhLmxlbmd0aDtjKz0yKXt2YXIgZD1hW2NdLGU9YVtjKzFdLGY9XCJvblwiKyhlWzBdLnRvVXBwZXJDYXNlKCkrZS5zbGljZSgxKSk7Zj17cGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6e2J1YmJsZWQ6ZixjYXB0dXJlZDpmK1wiQ2FwdHVyZVwifSxkZXBlbmRlbmNpZXM6W2RdLGV2ZW50UHJpb3JpdHk6Yn07WmMuc2V0KGQsYik7WWMuc2V0KGQsZik7V2NbZV09Zn19XG5hZChcImJsdXIgYmx1ciBjYW5jZWwgY2FuY2VsIGNsaWNrIGNsaWNrIGNsb3NlIGNsb3NlIGNvbnRleHRtZW51IGNvbnRleHRNZW51IGNvcHkgY29weSBjdXQgY3V0IGF1eGNsaWNrIGF1eENsaWNrIGRibGNsaWNrIGRvdWJsZUNsaWNrIGRyYWdlbmQgZHJhZ0VuZCBkcmFnc3RhcnQgZHJhZ1N0YXJ0IGRyb3AgZHJvcCBmb2N1cyBmb2N1cyBpbnB1dCBpbnB1dCBpbnZhbGlkIGludmFsaWQga2V5ZG93biBrZXlEb3duIGtleXByZXNzIGtleVByZXNzIGtleXVwIGtleVVwIG1vdXNlZG93biBtb3VzZURvd24gbW91c2V1cCBtb3VzZVVwIHBhc3RlIHBhc3RlIHBhdXNlIHBhdXNlIHBsYXkgcGxheSBwb2ludGVyY2FuY2VsIHBvaW50ZXJDYW5jZWwgcG9pbnRlcmRvd24gcG9pbnRlckRvd24gcG9pbnRlcnVwIHBvaW50ZXJVcCByYXRlY2hhbmdlIHJhdGVDaGFuZ2UgcmVzZXQgcmVzZXQgc2Vla2VkIHNlZWtlZCBzdWJtaXQgc3VibWl0IHRvdWNoY2FuY2VsIHRvdWNoQ2FuY2VsIHRvdWNoZW5kIHRvdWNoRW5kIHRvdWNoc3RhcnQgdG91Y2hTdGFydCB2b2x1bWVjaGFuZ2Ugdm9sdW1lQ2hhbmdlXCIuc3BsaXQoXCIgXCIpLDApO1xuYWQoXCJkcmFnIGRyYWcgZHJhZ2VudGVyIGRyYWdFbnRlciBkcmFnZXhpdCBkcmFnRXhpdCBkcmFnbGVhdmUgZHJhZ0xlYXZlIGRyYWdvdmVyIGRyYWdPdmVyIG1vdXNlbW92ZSBtb3VzZU1vdmUgbW91c2VvdXQgbW91c2VPdXQgbW91c2VvdmVyIG1vdXNlT3ZlciBwb2ludGVybW92ZSBwb2ludGVyTW92ZSBwb2ludGVyb3V0IHBvaW50ZXJPdXQgcG9pbnRlcm92ZXIgcG9pbnRlck92ZXIgc2Nyb2xsIHNjcm9sbCB0b2dnbGUgdG9nZ2xlIHRvdWNobW92ZSB0b3VjaE1vdmUgd2hlZWwgd2hlZWxcIi5zcGxpdChcIiBcIiksMSk7YWQoJGMsMik7Zm9yKHZhciBiZD1cImNoYW5nZSBzZWxlY3Rpb25jaGFuZ2UgdGV4dElucHV0IGNvbXBvc2l0aW9uc3RhcnQgY29tcG9zaXRpb25lbmQgY29tcG9zaXRpb251cGRhdGVcIi5zcGxpdChcIiBcIiksY2Q9MDtjZDxiZC5sZW5ndGg7Y2QrKylaYy5zZXQoYmRbY2RdLDApO1xudmFyIGRkPXIudW5zdGFibGVfVXNlckJsb2NraW5nUHJpb3JpdHksZWQ9ci51bnN0YWJsZV9ydW5XaXRoUHJpb3JpdHksZmQ9ITA7ZnVuY3Rpb24gRihhLGIpe3ZjKGIsYSwhMSl9ZnVuY3Rpb24gdmMoYSxiLGMpe3ZhciBkPVpjLmdldChiKTtzd2l0Y2godm9pZCAwPT09ZD8yOmQpe2Nhc2UgMDpkPWdkLmJpbmQobnVsbCxiLDEsYSk7YnJlYWs7Y2FzZSAxOmQ9aGQuYmluZChudWxsLGIsMSxhKTticmVhaztkZWZhdWx0OmQ9aWQuYmluZChudWxsLGIsMSxhKX1jP2EuYWRkRXZlbnRMaXN0ZW5lcihiLGQsITApOmEuYWRkRXZlbnRMaXN0ZW5lcihiLGQsITEpfWZ1bmN0aW9uIGdkKGEsYixjLGQpe0phfHxIYSgpO3ZhciBlPWlkLGY9SmE7SmE9ITA7dHJ5e0dhKGUsYSxiLGMsZCl9ZmluYWxseXsoSmE9Zil8fExhKCl9fWZ1bmN0aW9uIGhkKGEsYixjLGQpe2VkKGRkLGlkLmJpbmQobnVsbCxhLGIsYyxkKSl9XG5mdW5jdGlvbiBpZChhLGIsYyxkKXtpZihmZClpZigwPEFjLmxlbmd0aCYmLTE8SGMuaW5kZXhPZihhKSlhPUtjKG51bGwsYSxiLGMsZCksQWMucHVzaChhKTtlbHNle3ZhciBlPVJjKGEsYixjLGQpO2lmKG51bGw9PT1lKUxjKGEsZCk7ZWxzZSBpZigtMTxIYy5pbmRleE9mKGEpKWE9S2MoZSxhLGIsYyxkKSxBYy5wdXNoKGEpO2Vsc2UgaWYoIU9jKGUsYSxiLGMsZCkpe0xjKGEsZCk7YT1yYyhhLGQsbnVsbCxiKTt0cnl7TWEoc2MsYSl9ZmluYWxseXtxYyhhKX19fX1cbmZ1bmN0aW9uIFJjKGEsYixjLGQpe2M9bmMoZCk7Yz10YyhjKTtpZihudWxsIT09Yyl7dmFyIGU9ZGMoYyk7aWYobnVsbD09PWUpYz1udWxsO2Vsc2V7dmFyIGY9ZS50YWc7aWYoMTM9PT1mKXtjPWVjKGUpO2lmKG51bGwhPT1jKXJldHVybiBjO2M9bnVsbH1lbHNlIGlmKDM9PT1mKXtpZihlLnN0YXRlTm9kZS5oeWRyYXRlKXJldHVybiAzPT09ZS50YWc/ZS5zdGF0ZU5vZGUuY29udGFpbmVySW5mbzpudWxsO2M9bnVsbH1lbHNlIGUhPT1jJiYoYz1udWxsKX19YT1yYyhhLGQsYyxiKTt0cnl7TWEoc2MsYSl9ZmluYWxseXtxYyhhKX1yZXR1cm4gbnVsbH1cbnZhciBqZD17YW5pbWF0aW9uSXRlcmF0aW9uQ291bnQ6ITAsYm9yZGVySW1hZ2VPdXRzZXQ6ITAsYm9yZGVySW1hZ2VTbGljZTohMCxib3JkZXJJbWFnZVdpZHRoOiEwLGJveEZsZXg6ITAsYm94RmxleEdyb3VwOiEwLGJveE9yZGluYWxHcm91cDohMCxjb2x1bW5Db3VudDohMCxjb2x1bW5zOiEwLGZsZXg6ITAsZmxleEdyb3c6ITAsZmxleFBvc2l0aXZlOiEwLGZsZXhTaHJpbms6ITAsZmxleE5lZ2F0aXZlOiEwLGZsZXhPcmRlcjohMCxncmlkQXJlYTohMCxncmlkUm93OiEwLGdyaWRSb3dFbmQ6ITAsZ3JpZFJvd1NwYW46ITAsZ3JpZFJvd1N0YXJ0OiEwLGdyaWRDb2x1bW46ITAsZ3JpZENvbHVtbkVuZDohMCxncmlkQ29sdW1uU3BhbjohMCxncmlkQ29sdW1uU3RhcnQ6ITAsZm9udFdlaWdodDohMCxsaW5lQ2xhbXA6ITAsbGluZUhlaWdodDohMCxvcGFjaXR5OiEwLG9yZGVyOiEwLG9ycGhhbnM6ITAsdGFiU2l6ZTohMCx3aWRvd3M6ITAsekluZGV4OiEwLHpvb206ITAsZmlsbE9wYWNpdHk6ITAsXG5mbG9vZE9wYWNpdHk6ITAsc3RvcE9wYWNpdHk6ITAsc3Ryb2tlRGFzaGFycmF5OiEwLHN0cm9rZURhc2hvZmZzZXQ6ITAsc3Ryb2tlTWl0ZXJsaW1pdDohMCxzdHJva2VPcGFjaXR5OiEwLHN0cm9rZVdpZHRoOiEwfSxrZD1bXCJXZWJraXRcIixcIm1zXCIsXCJNb3pcIixcIk9cIl07T2JqZWN0LmtleXMoamQpLmZvckVhY2goZnVuY3Rpb24oYSl7a2QuZm9yRWFjaChmdW5jdGlvbihiKXtiPWIrYS5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSthLnN1YnN0cmluZygxKTtqZFtiXT1qZFthXX0pfSk7ZnVuY3Rpb24gbGQoYSxiLGMpe3JldHVybiBudWxsPT1ifHxcImJvb2xlYW5cIj09PXR5cGVvZiBifHxcIlwiPT09Yj9cIlwiOmN8fFwibnVtYmVyXCIhPT10eXBlb2YgYnx8MD09PWJ8fGpkLmhhc093blByb3BlcnR5KGEpJiZqZFthXT8oXCJcIitiKS50cmltKCk6YitcInB4XCJ9XG5mdW5jdGlvbiBtZChhLGIpe2E9YS5zdHlsZTtmb3IodmFyIGMgaW4gYilpZihiLmhhc093blByb3BlcnR5KGMpKXt2YXIgZD0wPT09Yy5pbmRleE9mKFwiLS1cIiksZT1sZChjLGJbY10sZCk7XCJmbG9hdFwiPT09YyYmKGM9XCJjc3NGbG9hdFwiKTtkP2Euc2V0UHJvcGVydHkoYyxlKTphW2NdPWV9fXZhciBuZD1uKHttZW51aXRlbTohMH0se2FyZWE6ITAsYmFzZTohMCxicjohMCxjb2w6ITAsZW1iZWQ6ITAsaHI6ITAsaW1nOiEwLGlucHV0OiEwLGtleWdlbjohMCxsaW5rOiEwLG1ldGE6ITAscGFyYW06ITAsc291cmNlOiEwLHRyYWNrOiEwLHdicjohMH0pO1xuZnVuY3Rpb24gb2QoYSxiKXtpZihiKXtpZihuZFthXSYmKG51bGwhPWIuY2hpbGRyZW58fG51bGwhPWIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwpKXRocm93IEVycm9yKHUoMTM3LGEsXCJcIikpO2lmKG51bGwhPWIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwpe2lmKG51bGwhPWIuY2hpbGRyZW4pdGhyb3cgRXJyb3IodSg2MCkpO2lmKCEoXCJvYmplY3RcIj09PXR5cGVvZiBiLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MJiZcIl9faHRtbFwiaW4gYi5kYW5nZXJvdXNseVNldElubmVySFRNTCkpdGhyb3cgRXJyb3IodSg2MSkpO31pZihudWxsIT1iLnN0eWxlJiZcIm9iamVjdFwiIT09dHlwZW9mIGIuc3R5bGUpdGhyb3cgRXJyb3IodSg2MixcIlwiKSk7fX1cbmZ1bmN0aW9uIHBkKGEsYil7aWYoLTE9PT1hLmluZGV4T2YoXCItXCIpKXJldHVyblwic3RyaW5nXCI9PT10eXBlb2YgYi5pcztzd2l0Y2goYSl7Y2FzZSBcImFubm90YXRpb24teG1sXCI6Y2FzZSBcImNvbG9yLXByb2ZpbGVcIjpjYXNlIFwiZm9udC1mYWNlXCI6Y2FzZSBcImZvbnQtZmFjZS1zcmNcIjpjYXNlIFwiZm9udC1mYWNlLXVyaVwiOmNhc2UgXCJmb250LWZhY2UtZm9ybWF0XCI6Y2FzZSBcImZvbnQtZmFjZS1uYW1lXCI6Y2FzZSBcIm1pc3NpbmctZ2x5cGhcIjpyZXR1cm4hMTtkZWZhdWx0OnJldHVybiEwfX12YXIgcWQ9TWIuaHRtbDtmdW5jdGlvbiByZChhLGIpe2E9OT09PWEubm9kZVR5cGV8fDExPT09YS5ub2RlVHlwZT9hOmEub3duZXJEb2N1bWVudDt2YXIgYz1jYyhhKTtiPXdhW2JdO2Zvcih2YXIgZD0wO2Q8Yi5sZW5ndGg7ZCsrKXVjKGJbZF0sYSxjKX1mdW5jdGlvbiBzZCgpe31cbmZ1bmN0aW9uIHRkKGEpe2E9YXx8KFwidW5kZWZpbmVkXCIhPT10eXBlb2YgZG9jdW1lbnQ/ZG9jdW1lbnQ6dm9pZCAwKTtpZihcInVuZGVmaW5lZFwiPT09dHlwZW9mIGEpcmV0dXJuIG51bGw7dHJ5e3JldHVybiBhLmFjdGl2ZUVsZW1lbnR8fGEuYm9keX1jYXRjaChiKXtyZXR1cm4gYS5ib2R5fX1mdW5jdGlvbiB1ZChhKXtmb3IoO2EmJmEuZmlyc3RDaGlsZDspYT1hLmZpcnN0Q2hpbGQ7cmV0dXJuIGF9ZnVuY3Rpb24gdmQoYSxiKXt2YXIgYz11ZChhKTthPTA7Zm9yKHZhciBkO2M7KXtpZigzPT09Yy5ub2RlVHlwZSl7ZD1hK2MudGV4dENvbnRlbnQubGVuZ3RoO2lmKGE8PWImJmQ+PWIpcmV0dXJue25vZGU6YyxvZmZzZXQ6Yi1hfTthPWR9YTp7Zm9yKDtjOyl7aWYoYy5uZXh0U2libGluZyl7Yz1jLm5leHRTaWJsaW5nO2JyZWFrIGF9Yz1jLnBhcmVudE5vZGV9Yz12b2lkIDB9Yz11ZChjKX19XG5mdW5jdGlvbiB3ZChhLGIpe3JldHVybiBhJiZiP2E9PT1iPyEwOmEmJjM9PT1hLm5vZGVUeXBlPyExOmImJjM9PT1iLm5vZGVUeXBlP3dkKGEsYi5wYXJlbnROb2RlKTpcImNvbnRhaW5zXCJpbiBhP2EuY29udGFpbnMoYik6YS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbj8hIShhLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKGIpJjE2KTohMTohMX1mdW5jdGlvbiB4ZCgpe2Zvcih2YXIgYT13aW5kb3csYj10ZCgpO2IgaW5zdGFuY2VvZiBhLkhUTUxJRnJhbWVFbGVtZW50Oyl7dHJ5e3ZhciBjPVwic3RyaW5nXCI9PT10eXBlb2YgYi5jb250ZW50V2luZG93LmxvY2F0aW9uLmhyZWZ9Y2F0Y2goZCl7Yz0hMX1pZihjKWE9Yi5jb250ZW50V2luZG93O2Vsc2UgYnJlYWs7Yj10ZChhLmRvY3VtZW50KX1yZXR1cm4gYn1cbmZ1bmN0aW9uIHlkKGEpe3ZhciBiPWEmJmEubm9kZU5hbWUmJmEubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtyZXR1cm4gYiYmKFwiaW5wdXRcIj09PWImJihcInRleHRcIj09PWEudHlwZXx8XCJzZWFyY2hcIj09PWEudHlwZXx8XCJ0ZWxcIj09PWEudHlwZXx8XCJ1cmxcIj09PWEudHlwZXx8XCJwYXNzd29yZFwiPT09YS50eXBlKXx8XCJ0ZXh0YXJlYVwiPT09Ynx8XCJ0cnVlXCI9PT1hLmNvbnRlbnRFZGl0YWJsZSl9dmFyIHpkPVwiJFwiLEFkPVwiLyRcIixCZD1cIiQ/XCIsQ2Q9XCIkIVwiLERkPW51bGwsRWQ9bnVsbDtmdW5jdGlvbiBGZChhLGIpe3N3aXRjaChhKXtjYXNlIFwiYnV0dG9uXCI6Y2FzZSBcImlucHV0XCI6Y2FzZSBcInNlbGVjdFwiOmNhc2UgXCJ0ZXh0YXJlYVwiOnJldHVybiEhYi5hdXRvRm9jdXN9cmV0dXJuITF9XG5mdW5jdGlvbiBHZChhLGIpe3JldHVyblwidGV4dGFyZWFcIj09PWF8fFwib3B0aW9uXCI9PT1hfHxcIm5vc2NyaXB0XCI9PT1hfHxcInN0cmluZ1wiPT09dHlwZW9mIGIuY2hpbGRyZW58fFwibnVtYmVyXCI9PT10eXBlb2YgYi5jaGlsZHJlbnx8XCJvYmplY3RcIj09PXR5cGVvZiBiLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MJiZudWxsIT09Yi5kYW5nZXJvdXNseVNldElubmVySFRNTCYmbnVsbCE9Yi5kYW5nZXJvdXNseVNldElubmVySFRNTC5fX2h0bWx9dmFyIEhkPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBzZXRUaW1lb3V0P3NldFRpbWVvdXQ6dm9pZCAwLElkPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBjbGVhclRpbWVvdXQ/Y2xlYXJUaW1lb3V0OnZvaWQgMDtmdW5jdGlvbiBKZChhKXtmb3IoO251bGwhPWE7YT1hLm5leHRTaWJsaW5nKXt2YXIgYj1hLm5vZGVUeXBlO2lmKDE9PT1ifHwzPT09YilicmVha31yZXR1cm4gYX1cbmZ1bmN0aW9uIEtkKGEpe2E9YS5wcmV2aW91c1NpYmxpbmc7Zm9yKHZhciBiPTA7YTspe2lmKDg9PT1hLm5vZGVUeXBlKXt2YXIgYz1hLmRhdGE7aWYoYz09PXpkfHxjPT09Q2R8fGM9PT1CZCl7aWYoMD09PWIpcmV0dXJuIGE7Yi0tfWVsc2UgYz09PUFkJiZiKyt9YT1hLnByZXZpb3VzU2libGluZ31yZXR1cm4gbnVsbH12YXIgTGQ9TWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc2xpY2UoMiksTWQ9XCJfX3JlYWN0SW50ZXJuYWxJbnN0YW5jZSRcIitMZCxOZD1cIl9fcmVhY3RFdmVudEhhbmRsZXJzJFwiK0xkLE9kPVwiX19yZWFjdENvbnRhaW5lcmUkXCIrTGQ7XG5mdW5jdGlvbiB0YyhhKXt2YXIgYj1hW01kXTtpZihiKXJldHVybiBiO2Zvcih2YXIgYz1hLnBhcmVudE5vZGU7Yzspe2lmKGI9Y1tPZF18fGNbTWRdKXtjPWIuYWx0ZXJuYXRlO2lmKG51bGwhPT1iLmNoaWxkfHxudWxsIT09YyYmbnVsbCE9PWMuY2hpbGQpZm9yKGE9S2QoYSk7bnVsbCE9PWE7KXtpZihjPWFbTWRdKXJldHVybiBjO2E9S2QoYSl9cmV0dXJuIGJ9YT1jO2M9YS5wYXJlbnROb2RlfXJldHVybiBudWxsfWZ1bmN0aW9uIE5jKGEpe2E9YVtNZF18fGFbT2RdO3JldHVybiFhfHw1IT09YS50YWcmJjYhPT1hLnRhZyYmMTMhPT1hLnRhZyYmMyE9PWEudGFnP251bGw6YX1mdW5jdGlvbiBQZChhKXtpZig1PT09YS50YWd8fDY9PT1hLnRhZylyZXR1cm4gYS5zdGF0ZU5vZGU7dGhyb3cgRXJyb3IodSgzMykpO31mdW5jdGlvbiBRZChhKXtyZXR1cm4gYVtOZF18fG51bGx9XG5mdW5jdGlvbiBSZChhKXtkbyBhPWEucmV0dXJuO3doaWxlKGEmJjUhPT1hLnRhZyk7cmV0dXJuIGE/YTpudWxsfVxuZnVuY3Rpb24gU2QoYSxiKXt2YXIgYz1hLnN0YXRlTm9kZTtpZighYylyZXR1cm4gbnVsbDt2YXIgZD1sYShjKTtpZighZClyZXR1cm4gbnVsbDtjPWRbYl07YTpzd2l0Y2goYil7Y2FzZSBcIm9uQ2xpY2tcIjpjYXNlIFwib25DbGlja0NhcHR1cmVcIjpjYXNlIFwib25Eb3VibGVDbGlja1wiOmNhc2UgXCJvbkRvdWJsZUNsaWNrQ2FwdHVyZVwiOmNhc2UgXCJvbk1vdXNlRG93blwiOmNhc2UgXCJvbk1vdXNlRG93bkNhcHR1cmVcIjpjYXNlIFwib25Nb3VzZU1vdmVcIjpjYXNlIFwib25Nb3VzZU1vdmVDYXB0dXJlXCI6Y2FzZSBcIm9uTW91c2VVcFwiOmNhc2UgXCJvbk1vdXNlVXBDYXB0dXJlXCI6Y2FzZSBcIm9uTW91c2VFbnRlclwiOihkPSFkLmRpc2FibGVkKXx8KGE9YS50eXBlLGQ9IShcImJ1dHRvblwiPT09YXx8XCJpbnB1dFwiPT09YXx8XCJzZWxlY3RcIj09PWF8fFwidGV4dGFyZWFcIj09PWEpKTthPSFkO2JyZWFrIGE7ZGVmYXVsdDphPSExfWlmKGEpcmV0dXJuIG51bGw7aWYoYyYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGMpdGhyb3cgRXJyb3IodSgyMzEsXG5iLHR5cGVvZiBjKSk7cmV0dXJuIGN9ZnVuY3Rpb24gVGQoYSxiLGMpe2lmKGI9U2QoYSxjLmRpc3BhdGNoQ29uZmlnLnBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzW2JdKSljLl9kaXNwYXRjaExpc3RlbmVycz1pYyhjLl9kaXNwYXRjaExpc3RlbmVycyxiKSxjLl9kaXNwYXRjaEluc3RhbmNlcz1pYyhjLl9kaXNwYXRjaEluc3RhbmNlcyxhKX1mdW5jdGlvbiBVZChhKXtpZihhJiZhLmRpc3BhdGNoQ29uZmlnLnBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzKXtmb3IodmFyIGI9YS5fdGFyZ2V0SW5zdCxjPVtdO2I7KWMucHVzaChiKSxiPVJkKGIpO2ZvcihiPWMubGVuZ3RoOzA8Yi0tOylUZChjW2JdLFwiY2FwdHVyZWRcIixhKTtmb3IoYj0wO2I8Yy5sZW5ndGg7YisrKVRkKGNbYl0sXCJidWJibGVkXCIsYSl9fVxuZnVuY3Rpb24gVmQoYSxiLGMpe2EmJmMmJmMuZGlzcGF0Y2hDb25maWcucmVnaXN0cmF0aW9uTmFtZSYmKGI9U2QoYSxjLmRpc3BhdGNoQ29uZmlnLnJlZ2lzdHJhdGlvbk5hbWUpKSYmKGMuX2Rpc3BhdGNoTGlzdGVuZXJzPWljKGMuX2Rpc3BhdGNoTGlzdGVuZXJzLGIpLGMuX2Rpc3BhdGNoSW5zdGFuY2VzPWljKGMuX2Rpc3BhdGNoSW5zdGFuY2VzLGEpKX1mdW5jdGlvbiBXZChhKXthJiZhLmRpc3BhdGNoQ29uZmlnLnJlZ2lzdHJhdGlvbk5hbWUmJlZkKGEuX3RhcmdldEluc3QsbnVsbCxhKX1mdW5jdGlvbiBYZChhKXtqYyhhLFVkKX12YXIgWWQ9bnVsbCxaZD1udWxsLCRkPW51bGw7XG5mdW5jdGlvbiBhZSgpe2lmKCRkKXJldHVybiAkZDt2YXIgYSxiPVpkLGM9Yi5sZW5ndGgsZCxlPVwidmFsdWVcImluIFlkP1lkLnZhbHVlOllkLnRleHRDb250ZW50LGY9ZS5sZW5ndGg7Zm9yKGE9MDthPGMmJmJbYV09PT1lW2FdO2ErKyk7dmFyIGc9Yy1hO2ZvcihkPTE7ZDw9ZyYmYltjLWRdPT09ZVtmLWRdO2QrKyk7cmV0dXJuICRkPWUuc2xpY2UoYSwxPGQ/MS1kOnZvaWQgMCl9ZnVuY3Rpb24gYmUoKXtyZXR1cm4hMH1mdW5jdGlvbiBjZSgpe3JldHVybiExfVxuZnVuY3Rpb24gRyhhLGIsYyxkKXt0aGlzLmRpc3BhdGNoQ29uZmlnPWE7dGhpcy5fdGFyZ2V0SW5zdD1iO3RoaXMubmF0aXZlRXZlbnQ9YzthPXRoaXMuY29uc3RydWN0b3IuSW50ZXJmYWNlO2Zvcih2YXIgZSBpbiBhKWEuaGFzT3duUHJvcGVydHkoZSkmJigoYj1hW2VdKT90aGlzW2VdPWIoYyk6XCJ0YXJnZXRcIj09PWU/dGhpcy50YXJnZXQ9ZDp0aGlzW2VdPWNbZV0pO3RoaXMuaXNEZWZhdWx0UHJldmVudGVkPShudWxsIT1jLmRlZmF1bHRQcmV2ZW50ZWQ/Yy5kZWZhdWx0UHJldmVudGVkOiExPT09Yy5yZXR1cm5WYWx1ZSk/YmU6Y2U7dGhpcy5pc1Byb3BhZ2F0aW9uU3RvcHBlZD1jZTtyZXR1cm4gdGhpc31cbm4oRy5wcm90b3R5cGUse3ByZXZlbnREZWZhdWx0OmZ1bmN0aW9uKCl7dGhpcy5kZWZhdWx0UHJldmVudGVkPSEwO3ZhciBhPXRoaXMubmF0aXZlRXZlbnQ7YSYmKGEucHJldmVudERlZmF1bHQ/YS5wcmV2ZW50RGVmYXVsdCgpOlwidW5rbm93blwiIT09dHlwZW9mIGEucmV0dXJuVmFsdWUmJihhLnJldHVyblZhbHVlPSExKSx0aGlzLmlzRGVmYXVsdFByZXZlbnRlZD1iZSl9LHN0b3BQcm9wYWdhdGlvbjpmdW5jdGlvbigpe3ZhciBhPXRoaXMubmF0aXZlRXZlbnQ7YSYmKGEuc3RvcFByb3BhZ2F0aW9uP2Euc3RvcFByb3BhZ2F0aW9uKCk6XCJ1bmtub3duXCIhPT10eXBlb2YgYS5jYW5jZWxCdWJibGUmJihhLmNhbmNlbEJ1YmJsZT0hMCksdGhpcy5pc1Byb3BhZ2F0aW9uU3RvcHBlZD1iZSl9LHBlcnNpc3Q6ZnVuY3Rpb24oKXt0aGlzLmlzUGVyc2lzdGVudD1iZX0saXNQZXJzaXN0ZW50OmNlLGRlc3RydWN0b3I6ZnVuY3Rpb24oKXt2YXIgYT10aGlzLmNvbnN0cnVjdG9yLkludGVyZmFjZSxcbmI7Zm9yKGIgaW4gYSl0aGlzW2JdPW51bGw7dGhpcy5uYXRpdmVFdmVudD10aGlzLl90YXJnZXRJbnN0PXRoaXMuZGlzcGF0Y2hDb25maWc9bnVsbDt0aGlzLmlzUHJvcGFnYXRpb25TdG9wcGVkPXRoaXMuaXNEZWZhdWx0UHJldmVudGVkPWNlO3RoaXMuX2Rpc3BhdGNoSW5zdGFuY2VzPXRoaXMuX2Rpc3BhdGNoTGlzdGVuZXJzPW51bGx9fSk7Ry5JbnRlcmZhY2U9e3R5cGU6bnVsbCx0YXJnZXQ6bnVsbCxjdXJyZW50VGFyZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIG51bGx9LGV2ZW50UGhhc2U6bnVsbCxidWJibGVzOm51bGwsY2FuY2VsYWJsZTpudWxsLHRpbWVTdGFtcDpmdW5jdGlvbihhKXtyZXR1cm4gYS50aW1lU3RhbXB8fERhdGUubm93KCl9LGRlZmF1bHRQcmV2ZW50ZWQ6bnVsbCxpc1RydXN0ZWQ6bnVsbH07XG5HLmV4dGVuZD1mdW5jdGlvbihhKXtmdW5jdGlvbiBiKCl7fWZ1bmN0aW9uIGMoKXtyZXR1cm4gZC5hcHBseSh0aGlzLGFyZ3VtZW50cyl9dmFyIGQ9dGhpcztiLnByb3RvdHlwZT1kLnByb3RvdHlwZTt2YXIgZT1uZXcgYjtuKGUsYy5wcm90b3R5cGUpO2MucHJvdG90eXBlPWU7Yy5wcm90b3R5cGUuY29uc3RydWN0b3I9YztjLkludGVyZmFjZT1uKHt9LGQuSW50ZXJmYWNlLGEpO2MuZXh0ZW5kPWQuZXh0ZW5kO2RlKGMpO3JldHVybiBjfTtkZShHKTtmdW5jdGlvbiBlZShhLGIsYyxkKXtpZih0aGlzLmV2ZW50UG9vbC5sZW5ndGgpe3ZhciBlPXRoaXMuZXZlbnRQb29sLnBvcCgpO3RoaXMuY2FsbChlLGEsYixjLGQpO3JldHVybiBlfXJldHVybiBuZXcgdGhpcyhhLGIsYyxkKX1cbmZ1bmN0aW9uIGZlKGEpe2lmKCEoYSBpbnN0YW5jZW9mIHRoaXMpKXRocm93IEVycm9yKHUoMjc5KSk7YS5kZXN0cnVjdG9yKCk7MTA+dGhpcy5ldmVudFBvb2wubGVuZ3RoJiZ0aGlzLmV2ZW50UG9vbC5wdXNoKGEpfWZ1bmN0aW9uIGRlKGEpe2EuZXZlbnRQb29sPVtdO2EuZ2V0UG9vbGVkPWVlO2EucmVsZWFzZT1mZX12YXIgZ2U9Ry5leHRlbmQoe2RhdGE6bnVsbH0pLGhlPUcuZXh0ZW5kKHtkYXRhOm51bGx9KSxpZT1bOSwxMywyNywzMl0samU9eWEmJlwiQ29tcG9zaXRpb25FdmVudFwiaW4gd2luZG93LGtlPW51bGw7eWEmJlwiZG9jdW1lbnRNb2RlXCJpbiBkb2N1bWVudCYmKGtlPWRvY3VtZW50LmRvY3VtZW50TW9kZSk7XG52YXIgbGU9eWEmJlwiVGV4dEV2ZW50XCJpbiB3aW5kb3cmJiFrZSxtZT15YSYmKCFqZXx8a2UmJjg8a2UmJjExPj1rZSksbmU9U3RyaW5nLmZyb21DaGFyQ29kZSgzMiksb2U9e2JlZm9yZUlucHV0OntwaGFzZWRSZWdpc3RyYXRpb25OYW1lczp7YnViYmxlZDpcIm9uQmVmb3JlSW5wdXRcIixjYXB0dXJlZDpcIm9uQmVmb3JlSW5wdXRDYXB0dXJlXCJ9LGRlcGVuZGVuY2llczpbXCJjb21wb3NpdGlvbmVuZFwiLFwia2V5cHJlc3NcIixcInRleHRJbnB1dFwiLFwicGFzdGVcIl19LGNvbXBvc2l0aW9uRW5kOntwaGFzZWRSZWdpc3RyYXRpb25OYW1lczp7YnViYmxlZDpcIm9uQ29tcG9zaXRpb25FbmRcIixjYXB0dXJlZDpcIm9uQ29tcG9zaXRpb25FbmRDYXB0dXJlXCJ9LGRlcGVuZGVuY2llczpcImJsdXIgY29tcG9zaXRpb25lbmQga2V5ZG93biBrZXlwcmVzcyBrZXl1cCBtb3VzZWRvd25cIi5zcGxpdChcIiBcIil9LGNvbXBvc2l0aW9uU3RhcnQ6e3BoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOntidWJibGVkOlwib25Db21wb3NpdGlvblN0YXJ0XCIsXG5jYXB0dXJlZDpcIm9uQ29tcG9zaXRpb25TdGFydENhcHR1cmVcIn0sZGVwZW5kZW5jaWVzOlwiYmx1ciBjb21wb3NpdGlvbnN0YXJ0IGtleWRvd24ga2V5cHJlc3Mga2V5dXAgbW91c2Vkb3duXCIuc3BsaXQoXCIgXCIpfSxjb21wb3NpdGlvblVwZGF0ZTp7cGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6e2J1YmJsZWQ6XCJvbkNvbXBvc2l0aW9uVXBkYXRlXCIsY2FwdHVyZWQ6XCJvbkNvbXBvc2l0aW9uVXBkYXRlQ2FwdHVyZVwifSxkZXBlbmRlbmNpZXM6XCJibHVyIGNvbXBvc2l0aW9udXBkYXRlIGtleWRvd24ga2V5cHJlc3Mga2V5dXAgbW91c2Vkb3duXCIuc3BsaXQoXCIgXCIpfX0scGU9ITE7XG5mdW5jdGlvbiBxZShhLGIpe3N3aXRjaChhKXtjYXNlIFwia2V5dXBcIjpyZXR1cm4tMSE9PWllLmluZGV4T2YoYi5rZXlDb2RlKTtjYXNlIFwia2V5ZG93blwiOnJldHVybiAyMjkhPT1iLmtleUNvZGU7Y2FzZSBcImtleXByZXNzXCI6Y2FzZSBcIm1vdXNlZG93blwiOmNhc2UgXCJibHVyXCI6cmV0dXJuITA7ZGVmYXVsdDpyZXR1cm4hMX19ZnVuY3Rpb24gcmUoYSl7YT1hLmRldGFpbDtyZXR1cm5cIm9iamVjdFwiPT09dHlwZW9mIGEmJlwiZGF0YVwiaW4gYT9hLmRhdGE6bnVsbH12YXIgc2U9ITE7ZnVuY3Rpb24gdGUoYSxiKXtzd2l0Y2goYSl7Y2FzZSBcImNvbXBvc2l0aW9uZW5kXCI6cmV0dXJuIHJlKGIpO2Nhc2UgXCJrZXlwcmVzc1wiOmlmKDMyIT09Yi53aGljaClyZXR1cm4gbnVsbDtwZT0hMDtyZXR1cm4gbmU7Y2FzZSBcInRleHRJbnB1dFwiOnJldHVybiBhPWIuZGF0YSxhPT09bmUmJnBlP251bGw6YTtkZWZhdWx0OnJldHVybiBudWxsfX1cbmZ1bmN0aW9uIHVlKGEsYil7aWYoc2UpcmV0dXJuXCJjb21wb3NpdGlvbmVuZFwiPT09YXx8IWplJiZxZShhLGIpPyhhPWFlKCksJGQ9WmQ9WWQ9bnVsbCxzZT0hMSxhKTpudWxsO3N3aXRjaChhKXtjYXNlIFwicGFzdGVcIjpyZXR1cm4gbnVsbDtjYXNlIFwia2V5cHJlc3NcIjppZighKGIuY3RybEtleXx8Yi5hbHRLZXl8fGIubWV0YUtleSl8fGIuY3RybEtleSYmYi5hbHRLZXkpe2lmKGIuY2hhciYmMTxiLmNoYXIubGVuZ3RoKXJldHVybiBiLmNoYXI7aWYoYi53aGljaClyZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZShiLndoaWNoKX1yZXR1cm4gbnVsbDtjYXNlIFwiY29tcG9zaXRpb25lbmRcIjpyZXR1cm4gbWUmJlwia29cIiE9PWIubG9jYWxlP251bGw6Yi5kYXRhO2RlZmF1bHQ6cmV0dXJuIG51bGx9fVxudmFyIHZlPXtldmVudFR5cGVzOm9lLGV4dHJhY3RFdmVudHM6ZnVuY3Rpb24oYSxiLGMsZCl7dmFyIGU7aWYoamUpYjp7c3dpdGNoKGEpe2Nhc2UgXCJjb21wb3NpdGlvbnN0YXJ0XCI6dmFyIGY9b2UuY29tcG9zaXRpb25TdGFydDticmVhayBiO2Nhc2UgXCJjb21wb3NpdGlvbmVuZFwiOmY9b2UuY29tcG9zaXRpb25FbmQ7YnJlYWsgYjtjYXNlIFwiY29tcG9zaXRpb251cGRhdGVcIjpmPW9lLmNvbXBvc2l0aW9uVXBkYXRlO2JyZWFrIGJ9Zj12b2lkIDB9ZWxzZSBzZT9xZShhLGMpJiYoZj1vZS5jb21wb3NpdGlvbkVuZCk6XCJrZXlkb3duXCI9PT1hJiYyMjk9PT1jLmtleUNvZGUmJihmPW9lLmNvbXBvc2l0aW9uU3RhcnQpO2Y/KG1lJiZcImtvXCIhPT1jLmxvY2FsZSYmKHNlfHxmIT09b2UuY29tcG9zaXRpb25TdGFydD9mPT09b2UuY29tcG9zaXRpb25FbmQmJnNlJiYoZT1hZSgpKTooWWQ9ZCxaZD1cInZhbHVlXCJpbiBZZD9ZZC52YWx1ZTpZZC50ZXh0Q29udGVudCxzZT0hMCkpLGY9Z2UuZ2V0UG9vbGVkKGYsXG5iLGMsZCksZT9mLmRhdGE9ZTooZT1yZShjKSxudWxsIT09ZSYmKGYuZGF0YT1lKSksWGQoZiksZT1mKTplPW51bGw7KGE9bGU/dGUoYSxjKTp1ZShhLGMpKT8oYj1oZS5nZXRQb29sZWQob2UuYmVmb3JlSW5wdXQsYixjLGQpLGIuZGF0YT1hLFhkKGIpKTpiPW51bGw7cmV0dXJuIG51bGw9PT1lP2I6bnVsbD09PWI/ZTpbZSxiXX19LHdlPXtjb2xvcjohMCxkYXRlOiEwLGRhdGV0aW1lOiEwLFwiZGF0ZXRpbWUtbG9jYWxcIjohMCxlbWFpbDohMCxtb250aDohMCxudW1iZXI6ITAscGFzc3dvcmQ6ITAscmFuZ2U6ITAsc2VhcmNoOiEwLHRlbDohMCx0ZXh0OiEwLHRpbWU6ITAsdXJsOiEwLHdlZWs6ITB9O2Z1bmN0aW9uIHhlKGEpe3ZhciBiPWEmJmEubm9kZU5hbWUmJmEubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtyZXR1cm5cImlucHV0XCI9PT1iPyEhd2VbYS50eXBlXTpcInRleHRhcmVhXCI9PT1iPyEwOiExfVxudmFyIHllPXtjaGFuZ2U6e3BoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOntidWJibGVkOlwib25DaGFuZ2VcIixjYXB0dXJlZDpcIm9uQ2hhbmdlQ2FwdHVyZVwifSxkZXBlbmRlbmNpZXM6XCJibHVyIGNoYW5nZSBjbGljayBmb2N1cyBpbnB1dCBrZXlkb3duIGtleXVwIHNlbGVjdGlvbmNoYW5nZVwiLnNwbGl0KFwiIFwiKX19O2Z1bmN0aW9uIHplKGEsYixjKXthPUcuZ2V0UG9vbGVkKHllLmNoYW5nZSxhLGIsYyk7YS50eXBlPVwiY2hhbmdlXCI7RGEoYyk7WGQoYSk7cmV0dXJuIGF9dmFyIEFlPW51bGwsQmU9bnVsbDtmdW5jdGlvbiBDZShhKXttYyhhKX1mdW5jdGlvbiBEZShhKXt2YXIgYj1QZChhKTtpZih5YihiKSlyZXR1cm4gYX1mdW5jdGlvbiBFZShhLGIpe2lmKFwiY2hhbmdlXCI9PT1hKXJldHVybiBifXZhciBGZT0hMTt5YSYmKEZlPW9jKFwiaW5wdXRcIikmJighZG9jdW1lbnQuZG9jdW1lbnRNb2RlfHw5PGRvY3VtZW50LmRvY3VtZW50TW9kZSkpO1xuZnVuY3Rpb24gR2UoKXtBZSYmKEFlLmRldGFjaEV2ZW50KFwib25wcm9wZXJ0eWNoYW5nZVwiLEhlKSxCZT1BZT1udWxsKX1mdW5jdGlvbiBIZShhKXtpZihcInZhbHVlXCI9PT1hLnByb3BlcnR5TmFtZSYmRGUoQmUpKWlmKGE9emUoQmUsYSxuYyhhKSksSmEpbWMoYSk7ZWxzZXtKYT0hMDt0cnl7RmEoQ2UsYSl9ZmluYWxseXtKYT0hMSxMYSgpfX19ZnVuY3Rpb24gSWUoYSxiLGMpe1wiZm9jdXNcIj09PWE/KEdlKCksQWU9YixCZT1jLEFlLmF0dGFjaEV2ZW50KFwib25wcm9wZXJ0eWNoYW5nZVwiLEhlKSk6XCJibHVyXCI9PT1hJiZHZSgpfWZ1bmN0aW9uIEplKGEpe2lmKFwic2VsZWN0aW9uY2hhbmdlXCI9PT1hfHxcImtleXVwXCI9PT1hfHxcImtleWRvd25cIj09PWEpcmV0dXJuIERlKEJlKX1mdW5jdGlvbiBLZShhLGIpe2lmKFwiY2xpY2tcIj09PWEpcmV0dXJuIERlKGIpfWZ1bmN0aW9uIExlKGEsYil7aWYoXCJpbnB1dFwiPT09YXx8XCJjaGFuZ2VcIj09PWEpcmV0dXJuIERlKGIpfVxudmFyIE1lPXtldmVudFR5cGVzOnllLF9pc0lucHV0RXZlbnRTdXBwb3J0ZWQ6RmUsZXh0cmFjdEV2ZW50czpmdW5jdGlvbihhLGIsYyxkKXt2YXIgZT1iP1BkKGIpOndpbmRvdyxmPWUubm9kZU5hbWUmJmUubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtpZihcInNlbGVjdFwiPT09Znx8XCJpbnB1dFwiPT09ZiYmXCJmaWxlXCI9PT1lLnR5cGUpdmFyIGc9RWU7ZWxzZSBpZih4ZShlKSlpZihGZSlnPUxlO2Vsc2V7Zz1KZTt2YXIgaD1JZX1lbHNlKGY9ZS5ub2RlTmFtZSkmJlwiaW5wdXRcIj09PWYudG9Mb3dlckNhc2UoKSYmKFwiY2hlY2tib3hcIj09PWUudHlwZXx8XCJyYWRpb1wiPT09ZS50eXBlKSYmKGc9S2UpO2lmKGcmJihnPWcoYSxiKSkpcmV0dXJuIHplKGcsYyxkKTtoJiZoKGEsZSxiKTtcImJsdXJcIj09PWEmJihhPWUuX3dyYXBwZXJTdGF0ZSkmJmEuY29udHJvbGxlZCYmXCJudW1iZXJcIj09PWUudHlwZSYmRGIoZSxcIm51bWJlclwiLGUudmFsdWUpfX0sTmU9Ry5leHRlbmQoe3ZpZXc6bnVsbCxkZXRhaWw6bnVsbH0pLFxuT2U9e0FsdDpcImFsdEtleVwiLENvbnRyb2w6XCJjdHJsS2V5XCIsTWV0YTpcIm1ldGFLZXlcIixTaGlmdDpcInNoaWZ0S2V5XCJ9O2Z1bmN0aW9uIFBlKGEpe3ZhciBiPXRoaXMubmF0aXZlRXZlbnQ7cmV0dXJuIGIuZ2V0TW9kaWZpZXJTdGF0ZT9iLmdldE1vZGlmaWVyU3RhdGUoYSk6KGE9T2VbYV0pPyEhYlthXTohMX1mdW5jdGlvbiBRZSgpe3JldHVybiBQZX1cbnZhciBSZT0wLFNlPTAsVGU9ITEsVWU9ITEsVmU9TmUuZXh0ZW5kKHtzY3JlZW5YOm51bGwsc2NyZWVuWTpudWxsLGNsaWVudFg6bnVsbCxjbGllbnRZOm51bGwscGFnZVg6bnVsbCxwYWdlWTpudWxsLGN0cmxLZXk6bnVsbCxzaGlmdEtleTpudWxsLGFsdEtleTpudWxsLG1ldGFLZXk6bnVsbCxnZXRNb2RpZmllclN0YXRlOlFlLGJ1dHRvbjpudWxsLGJ1dHRvbnM6bnVsbCxyZWxhdGVkVGFyZ2V0OmZ1bmN0aW9uKGEpe3JldHVybiBhLnJlbGF0ZWRUYXJnZXR8fChhLmZyb21FbGVtZW50PT09YS5zcmNFbGVtZW50P2EudG9FbGVtZW50OmEuZnJvbUVsZW1lbnQpfSxtb3ZlbWVudFg6ZnVuY3Rpb24oYSl7aWYoXCJtb3ZlbWVudFhcImluIGEpcmV0dXJuIGEubW92ZW1lbnRYO3ZhciBiPVJlO1JlPWEuc2NyZWVuWDtyZXR1cm4gVGU/XCJtb3VzZW1vdmVcIj09PWEudHlwZT9hLnNjcmVlblgtYjowOihUZT0hMCwwKX0sbW92ZW1lbnRZOmZ1bmN0aW9uKGEpe2lmKFwibW92ZW1lbnRZXCJpbiBhKXJldHVybiBhLm1vdmVtZW50WTtcbnZhciBiPVNlO1NlPWEuc2NyZWVuWTtyZXR1cm4gVWU/XCJtb3VzZW1vdmVcIj09PWEudHlwZT9hLnNjcmVlblktYjowOihVZT0hMCwwKX19KSxXZT1WZS5leHRlbmQoe3BvaW50ZXJJZDpudWxsLHdpZHRoOm51bGwsaGVpZ2h0Om51bGwscHJlc3N1cmU6bnVsbCx0YW5nZW50aWFsUHJlc3N1cmU6bnVsbCx0aWx0WDpudWxsLHRpbHRZOm51bGwsdHdpc3Q6bnVsbCxwb2ludGVyVHlwZTpudWxsLGlzUHJpbWFyeTpudWxsfSksWGU9e21vdXNlRW50ZXI6e3JlZ2lzdHJhdGlvbk5hbWU6XCJvbk1vdXNlRW50ZXJcIixkZXBlbmRlbmNpZXM6W1wibW91c2VvdXRcIixcIm1vdXNlb3ZlclwiXX0sbW91c2VMZWF2ZTp7cmVnaXN0cmF0aW9uTmFtZTpcIm9uTW91c2VMZWF2ZVwiLGRlcGVuZGVuY2llczpbXCJtb3VzZW91dFwiLFwibW91c2VvdmVyXCJdfSxwb2ludGVyRW50ZXI6e3JlZ2lzdHJhdGlvbk5hbWU6XCJvblBvaW50ZXJFbnRlclwiLGRlcGVuZGVuY2llczpbXCJwb2ludGVyb3V0XCIsXCJwb2ludGVyb3ZlclwiXX0scG9pbnRlckxlYXZlOntyZWdpc3RyYXRpb25OYW1lOlwib25Qb2ludGVyTGVhdmVcIixcbmRlcGVuZGVuY2llczpbXCJwb2ludGVyb3V0XCIsXCJwb2ludGVyb3ZlclwiXX19LFllPXtldmVudFR5cGVzOlhlLGV4dHJhY3RFdmVudHM6ZnVuY3Rpb24oYSxiLGMsZCxlKXt2YXIgZj1cIm1vdXNlb3ZlclwiPT09YXx8XCJwb2ludGVyb3ZlclwiPT09YSxnPVwibW91c2VvdXRcIj09PWF8fFwicG9pbnRlcm91dFwiPT09YTtpZihmJiYwPT09KGUmMzIpJiYoYy5yZWxhdGVkVGFyZ2V0fHxjLmZyb21FbGVtZW50KXx8IWcmJiFmKXJldHVybiBudWxsO2Y9ZC53aW5kb3c9PT1kP2Q6KGY9ZC5vd25lckRvY3VtZW50KT9mLmRlZmF1bHRWaWV3fHxmLnBhcmVudFdpbmRvdzp3aW5kb3c7aWYoZyl7aWYoZz1iLGI9KGI9Yy5yZWxhdGVkVGFyZ2V0fHxjLnRvRWxlbWVudCk/dGMoYik6bnVsbCxudWxsIT09Yil7dmFyIGg9ZGMoYik7aWYoYiE9PWh8fDUhPT1iLnRhZyYmNiE9PWIudGFnKWI9bnVsbH19ZWxzZSBnPW51bGw7aWYoZz09PWIpcmV0dXJuIG51bGw7aWYoXCJtb3VzZW91dFwiPT09YXx8XCJtb3VzZW92ZXJcIj09PVxuYSl7dmFyIGs9VmU7dmFyIGw9WGUubW91c2VMZWF2ZTt2YXIgbT1YZS5tb3VzZUVudGVyO3ZhciBwPVwibW91c2VcIn1lbHNlIGlmKFwicG9pbnRlcm91dFwiPT09YXx8XCJwb2ludGVyb3ZlclwiPT09YSlrPVdlLGw9WGUucG9pbnRlckxlYXZlLG09WGUucG9pbnRlckVudGVyLHA9XCJwb2ludGVyXCI7YT1udWxsPT1nP2Y6UGQoZyk7Zj1udWxsPT1iP2Y6UGQoYik7bD1rLmdldFBvb2xlZChsLGcsYyxkKTtsLnR5cGU9cCtcImxlYXZlXCI7bC50YXJnZXQ9YTtsLnJlbGF0ZWRUYXJnZXQ9ZjtjPWsuZ2V0UG9vbGVkKG0sYixjLGQpO2MudHlwZT1wK1wiZW50ZXJcIjtjLnRhcmdldD1mO2MucmVsYXRlZFRhcmdldD1hO2Q9ZztwPWI7aWYoZCYmcClhOntrPWQ7bT1wO2c9MDtmb3IoYT1rO2E7YT1SZChhKSlnKys7YT0wO2ZvcihiPW07YjtiPVJkKGIpKWErKztmb3IoOzA8Zy1hOylrPVJkKGspLGctLTtmb3IoOzA8YS1nOyltPVJkKG0pLGEtLTtmb3IoO2ctLTspe2lmKGs9PT1tfHxrPT09bS5hbHRlcm5hdGUpYnJlYWsgYTtcbms9UmQoayk7bT1SZChtKX1rPW51bGx9ZWxzZSBrPW51bGw7bT1rO2ZvcihrPVtdO2QmJmQhPT1tOyl7Zz1kLmFsdGVybmF0ZTtpZihudWxsIT09ZyYmZz09PW0pYnJlYWs7ay5wdXNoKGQpO2Q9UmQoZCl9Zm9yKGQ9W107cCYmcCE9PW07KXtnPXAuYWx0ZXJuYXRlO2lmKG51bGwhPT1nJiZnPT09bSlicmVhaztkLnB1c2gocCk7cD1SZChwKX1mb3IocD0wO3A8ay5sZW5ndGg7cCsrKVZkKGtbcF0sXCJidWJibGVkXCIsbCk7Zm9yKHA9ZC5sZW5ndGg7MDxwLS07KVZkKGRbcF0sXCJjYXB0dXJlZFwiLGMpO3JldHVybiAwPT09KGUmNjQpP1tsXTpbbCxjXX19O2Z1bmN0aW9uIFplKGEsYil7cmV0dXJuIGE9PT1iJiYoMCE9PWF8fDEvYT09PTEvYil8fGEhPT1hJiZiIT09Yn12YXIgJGU9XCJmdW5jdGlvblwiPT09dHlwZW9mIE9iamVjdC5pcz9PYmplY3QuaXM6WmUsYWY9T2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcbmZ1bmN0aW9uIGJmKGEsYil7aWYoJGUoYSxiKSlyZXR1cm4hMDtpZihcIm9iamVjdFwiIT09dHlwZW9mIGF8fG51bGw9PT1hfHxcIm9iamVjdFwiIT09dHlwZW9mIGJ8fG51bGw9PT1iKXJldHVybiExO3ZhciBjPU9iamVjdC5rZXlzKGEpLGQ9T2JqZWN0LmtleXMoYik7aWYoYy5sZW5ndGghPT1kLmxlbmd0aClyZXR1cm4hMTtmb3IoZD0wO2Q8Yy5sZW5ndGg7ZCsrKWlmKCFhZi5jYWxsKGIsY1tkXSl8fCEkZShhW2NbZF1dLGJbY1tkXV0pKXJldHVybiExO3JldHVybiEwfVxudmFyIGNmPXlhJiZcImRvY3VtZW50TW9kZVwiaW4gZG9jdW1lbnQmJjExPj1kb2N1bWVudC5kb2N1bWVudE1vZGUsZGY9e3NlbGVjdDp7cGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6e2J1YmJsZWQ6XCJvblNlbGVjdFwiLGNhcHR1cmVkOlwib25TZWxlY3RDYXB0dXJlXCJ9LGRlcGVuZGVuY2llczpcImJsdXIgY29udGV4dG1lbnUgZHJhZ2VuZCBmb2N1cyBrZXlkb3duIGtleXVwIG1vdXNlZG93biBtb3VzZXVwIHNlbGVjdGlvbmNoYW5nZVwiLnNwbGl0KFwiIFwiKX19LGVmPW51bGwsZmY9bnVsbCxnZj1udWxsLGhmPSExO1xuZnVuY3Rpb24gamYoYSxiKXt2YXIgYz1iLndpbmRvdz09PWI/Yi5kb2N1bWVudDo5PT09Yi5ub2RlVHlwZT9iOmIub3duZXJEb2N1bWVudDtpZihoZnx8bnVsbD09ZWZ8fGVmIT09dGQoYykpcmV0dXJuIG51bGw7Yz1lZjtcInNlbGVjdGlvblN0YXJ0XCJpbiBjJiZ5ZChjKT9jPXtzdGFydDpjLnNlbGVjdGlvblN0YXJ0LGVuZDpjLnNlbGVjdGlvbkVuZH06KGM9KGMub3duZXJEb2N1bWVudCYmYy5vd25lckRvY3VtZW50LmRlZmF1bHRWaWV3fHx3aW5kb3cpLmdldFNlbGVjdGlvbigpLGM9e2FuY2hvck5vZGU6Yy5hbmNob3JOb2RlLGFuY2hvck9mZnNldDpjLmFuY2hvck9mZnNldCxmb2N1c05vZGU6Yy5mb2N1c05vZGUsZm9jdXNPZmZzZXQ6Yy5mb2N1c09mZnNldH0pO3JldHVybiBnZiYmYmYoZ2YsYyk/bnVsbDooZ2Y9YyxhPUcuZ2V0UG9vbGVkKGRmLnNlbGVjdCxmZixhLGIpLGEudHlwZT1cInNlbGVjdFwiLGEudGFyZ2V0PWVmLFhkKGEpLGEpfVxudmFyIGtmPXtldmVudFR5cGVzOmRmLGV4dHJhY3RFdmVudHM6ZnVuY3Rpb24oYSxiLGMsZCxlLGYpe2U9Znx8KGQud2luZG93PT09ZD9kLmRvY3VtZW50Ojk9PT1kLm5vZGVUeXBlP2Q6ZC5vd25lckRvY3VtZW50KTtpZighKGY9IWUpKXthOntlPWNjKGUpO2Y9d2Eub25TZWxlY3Q7Zm9yKHZhciBnPTA7ZzxmLmxlbmd0aDtnKyspaWYoIWUuaGFzKGZbZ10pKXtlPSExO2JyZWFrIGF9ZT0hMH1mPSFlfWlmKGYpcmV0dXJuIG51bGw7ZT1iP1BkKGIpOndpbmRvdztzd2l0Y2goYSl7Y2FzZSBcImZvY3VzXCI6aWYoeGUoZSl8fFwidHJ1ZVwiPT09ZS5jb250ZW50RWRpdGFibGUpZWY9ZSxmZj1iLGdmPW51bGw7YnJlYWs7Y2FzZSBcImJsdXJcIjpnZj1mZj1lZj1udWxsO2JyZWFrO2Nhc2UgXCJtb3VzZWRvd25cIjpoZj0hMDticmVhaztjYXNlIFwiY29udGV4dG1lbnVcIjpjYXNlIFwibW91c2V1cFwiOmNhc2UgXCJkcmFnZW5kXCI6cmV0dXJuIGhmPSExLGpmKGMsZCk7Y2FzZSBcInNlbGVjdGlvbmNoYW5nZVwiOmlmKGNmKWJyZWFrO1xuY2FzZSBcImtleWRvd25cIjpjYXNlIFwia2V5dXBcIjpyZXR1cm4gamYoYyxkKX1yZXR1cm4gbnVsbH19LGxmPUcuZXh0ZW5kKHthbmltYXRpb25OYW1lOm51bGwsZWxhcHNlZFRpbWU6bnVsbCxwc2V1ZG9FbGVtZW50Om51bGx9KSxtZj1HLmV4dGVuZCh7Y2xpcGJvYXJkRGF0YTpmdW5jdGlvbihhKXtyZXR1cm5cImNsaXBib2FyZERhdGFcImluIGE/YS5jbGlwYm9hcmREYXRhOndpbmRvdy5jbGlwYm9hcmREYXRhfX0pLG5mPU5lLmV4dGVuZCh7cmVsYXRlZFRhcmdldDpudWxsfSk7ZnVuY3Rpb24gb2YoYSl7dmFyIGI9YS5rZXlDb2RlO1wiY2hhckNvZGVcImluIGE/KGE9YS5jaGFyQ29kZSwwPT09YSYmMTM9PT1iJiYoYT0xMykpOmE9YjsxMD09PWEmJihhPTEzKTtyZXR1cm4gMzI8PWF8fDEzPT09YT9hOjB9XG52YXIgcGY9e0VzYzpcIkVzY2FwZVwiLFNwYWNlYmFyOlwiIFwiLExlZnQ6XCJBcnJvd0xlZnRcIixVcDpcIkFycm93VXBcIixSaWdodDpcIkFycm93UmlnaHRcIixEb3duOlwiQXJyb3dEb3duXCIsRGVsOlwiRGVsZXRlXCIsV2luOlwiT1NcIixNZW51OlwiQ29udGV4dE1lbnVcIixBcHBzOlwiQ29udGV4dE1lbnVcIixTY3JvbGw6XCJTY3JvbGxMb2NrXCIsTW96UHJpbnRhYmxlS2V5OlwiVW5pZGVudGlmaWVkXCJ9LHFmPXs4OlwiQmFja3NwYWNlXCIsOTpcIlRhYlwiLDEyOlwiQ2xlYXJcIiwxMzpcIkVudGVyXCIsMTY6XCJTaGlmdFwiLDE3OlwiQ29udHJvbFwiLDE4OlwiQWx0XCIsMTk6XCJQYXVzZVwiLDIwOlwiQ2Fwc0xvY2tcIiwyNzpcIkVzY2FwZVwiLDMyOlwiIFwiLDMzOlwiUGFnZVVwXCIsMzQ6XCJQYWdlRG93blwiLDM1OlwiRW5kXCIsMzY6XCJIb21lXCIsMzc6XCJBcnJvd0xlZnRcIiwzODpcIkFycm93VXBcIiwzOTpcIkFycm93UmlnaHRcIiw0MDpcIkFycm93RG93blwiLDQ1OlwiSW5zZXJ0XCIsNDY6XCJEZWxldGVcIiwxMTI6XCJGMVwiLDExMzpcIkYyXCIsMTE0OlwiRjNcIiwxMTU6XCJGNFwiLFxuMTE2OlwiRjVcIiwxMTc6XCJGNlwiLDExODpcIkY3XCIsMTE5OlwiRjhcIiwxMjA6XCJGOVwiLDEyMTpcIkYxMFwiLDEyMjpcIkYxMVwiLDEyMzpcIkYxMlwiLDE0NDpcIk51bUxvY2tcIiwxNDU6XCJTY3JvbGxMb2NrXCIsMjI0OlwiTWV0YVwifSxyZj1OZS5leHRlbmQoe2tleTpmdW5jdGlvbihhKXtpZihhLmtleSl7dmFyIGI9cGZbYS5rZXldfHxhLmtleTtpZihcIlVuaWRlbnRpZmllZFwiIT09YilyZXR1cm4gYn1yZXR1cm5cImtleXByZXNzXCI9PT1hLnR5cGU/KGE9b2YoYSksMTM9PT1hP1wiRW50ZXJcIjpTdHJpbmcuZnJvbUNoYXJDb2RlKGEpKTpcImtleWRvd25cIj09PWEudHlwZXx8XCJrZXl1cFwiPT09YS50eXBlP3FmW2Eua2V5Q29kZV18fFwiVW5pZGVudGlmaWVkXCI6XCJcIn0sbG9jYXRpb246bnVsbCxjdHJsS2V5Om51bGwsc2hpZnRLZXk6bnVsbCxhbHRLZXk6bnVsbCxtZXRhS2V5Om51bGwscmVwZWF0Om51bGwsbG9jYWxlOm51bGwsZ2V0TW9kaWZpZXJTdGF0ZTpRZSxjaGFyQ29kZTpmdW5jdGlvbihhKXtyZXR1cm5cImtleXByZXNzXCI9PT1cbmEudHlwZT9vZihhKTowfSxrZXlDb2RlOmZ1bmN0aW9uKGEpe3JldHVyblwia2V5ZG93blwiPT09YS50eXBlfHxcImtleXVwXCI9PT1hLnR5cGU/YS5rZXlDb2RlOjB9LHdoaWNoOmZ1bmN0aW9uKGEpe3JldHVyblwia2V5cHJlc3NcIj09PWEudHlwZT9vZihhKTpcImtleWRvd25cIj09PWEudHlwZXx8XCJrZXl1cFwiPT09YS50eXBlP2Eua2V5Q29kZTowfX0pLHNmPVZlLmV4dGVuZCh7ZGF0YVRyYW5zZmVyOm51bGx9KSx0Zj1OZS5leHRlbmQoe3RvdWNoZXM6bnVsbCx0YXJnZXRUb3VjaGVzOm51bGwsY2hhbmdlZFRvdWNoZXM6bnVsbCxhbHRLZXk6bnVsbCxtZXRhS2V5Om51bGwsY3RybEtleTpudWxsLHNoaWZ0S2V5Om51bGwsZ2V0TW9kaWZpZXJTdGF0ZTpRZX0pLHVmPUcuZXh0ZW5kKHtwcm9wZXJ0eU5hbWU6bnVsbCxlbGFwc2VkVGltZTpudWxsLHBzZXVkb0VsZW1lbnQ6bnVsbH0pLHZmPVZlLmV4dGVuZCh7ZGVsdGFYOmZ1bmN0aW9uKGEpe3JldHVyblwiZGVsdGFYXCJpbiBhP2EuZGVsdGFYOlwid2hlZWxEZWx0YVhcImluXG5hPy1hLndoZWVsRGVsdGFYOjB9LGRlbHRhWTpmdW5jdGlvbihhKXtyZXR1cm5cImRlbHRhWVwiaW4gYT9hLmRlbHRhWTpcIndoZWVsRGVsdGFZXCJpbiBhPy1hLndoZWVsRGVsdGFZOlwid2hlZWxEZWx0YVwiaW4gYT8tYS53aGVlbERlbHRhOjB9LGRlbHRhWjpudWxsLGRlbHRhTW9kZTpudWxsfSksd2Y9e2V2ZW50VHlwZXM6V2MsZXh0cmFjdEV2ZW50czpmdW5jdGlvbihhLGIsYyxkKXt2YXIgZT1ZYy5nZXQoYSk7aWYoIWUpcmV0dXJuIG51bGw7c3dpdGNoKGEpe2Nhc2UgXCJrZXlwcmVzc1wiOmlmKDA9PT1vZihjKSlyZXR1cm4gbnVsbDtjYXNlIFwia2V5ZG93blwiOmNhc2UgXCJrZXl1cFwiOmE9cmY7YnJlYWs7Y2FzZSBcImJsdXJcIjpjYXNlIFwiZm9jdXNcIjphPW5mO2JyZWFrO2Nhc2UgXCJjbGlja1wiOmlmKDI9PT1jLmJ1dHRvbilyZXR1cm4gbnVsbDtjYXNlIFwiYXV4Y2xpY2tcIjpjYXNlIFwiZGJsY2xpY2tcIjpjYXNlIFwibW91c2Vkb3duXCI6Y2FzZSBcIm1vdXNlbW92ZVwiOmNhc2UgXCJtb3VzZXVwXCI6Y2FzZSBcIm1vdXNlb3V0XCI6Y2FzZSBcIm1vdXNlb3ZlclwiOmNhc2UgXCJjb250ZXh0bWVudVwiOmE9XG5WZTticmVhaztjYXNlIFwiZHJhZ1wiOmNhc2UgXCJkcmFnZW5kXCI6Y2FzZSBcImRyYWdlbnRlclwiOmNhc2UgXCJkcmFnZXhpdFwiOmNhc2UgXCJkcmFnbGVhdmVcIjpjYXNlIFwiZHJhZ292ZXJcIjpjYXNlIFwiZHJhZ3N0YXJ0XCI6Y2FzZSBcImRyb3BcIjphPXNmO2JyZWFrO2Nhc2UgXCJ0b3VjaGNhbmNlbFwiOmNhc2UgXCJ0b3VjaGVuZFwiOmNhc2UgXCJ0b3VjaG1vdmVcIjpjYXNlIFwidG91Y2hzdGFydFwiOmE9dGY7YnJlYWs7Y2FzZSBYYjpjYXNlIFliOmNhc2UgWmI6YT1sZjticmVhaztjYXNlICRiOmE9dWY7YnJlYWs7Y2FzZSBcInNjcm9sbFwiOmE9TmU7YnJlYWs7Y2FzZSBcIndoZWVsXCI6YT12ZjticmVhaztjYXNlIFwiY29weVwiOmNhc2UgXCJjdXRcIjpjYXNlIFwicGFzdGVcIjphPW1mO2JyZWFrO2Nhc2UgXCJnb3Rwb2ludGVyY2FwdHVyZVwiOmNhc2UgXCJsb3N0cG9pbnRlcmNhcHR1cmVcIjpjYXNlIFwicG9pbnRlcmNhbmNlbFwiOmNhc2UgXCJwb2ludGVyZG93blwiOmNhc2UgXCJwb2ludGVybW92ZVwiOmNhc2UgXCJwb2ludGVyb3V0XCI6Y2FzZSBcInBvaW50ZXJvdmVyXCI6Y2FzZSBcInBvaW50ZXJ1cFwiOmE9XG5XZTticmVhaztkZWZhdWx0OmE9R31iPWEuZ2V0UG9vbGVkKGUsYixjLGQpO1hkKGIpO3JldHVybiBifX07aWYocGEpdGhyb3cgRXJyb3IodSgxMDEpKTtwYT1BcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChcIlJlc3BvbmRlckV2ZW50UGx1Z2luIFNpbXBsZUV2ZW50UGx1Z2luIEVudGVyTGVhdmVFdmVudFBsdWdpbiBDaGFuZ2VFdmVudFBsdWdpbiBTZWxlY3RFdmVudFBsdWdpbiBCZWZvcmVJbnB1dEV2ZW50UGx1Z2luXCIuc3BsaXQoXCIgXCIpKTtyYSgpO3ZhciB4Zj1OYztsYT1RZDttYT14ZjtuYT1QZDt4YSh7U2ltcGxlRXZlbnRQbHVnaW46d2YsRW50ZXJMZWF2ZUV2ZW50UGx1Z2luOlllLENoYW5nZUV2ZW50UGx1Z2luOk1lLFNlbGVjdEV2ZW50UGx1Z2luOmtmLEJlZm9yZUlucHV0RXZlbnRQbHVnaW46dmV9KTt2YXIgeWY9W10semY9LTE7ZnVuY3Rpb24gSChhKXswPnpmfHwoYS5jdXJyZW50PXlmW3pmXSx5Zlt6Zl09bnVsbCx6Zi0tKX1cbmZ1bmN0aW9uIEkoYSxiKXt6ZisrO3lmW3pmXT1hLmN1cnJlbnQ7YS5jdXJyZW50PWJ9dmFyIEFmPXt9LEo9e2N1cnJlbnQ6QWZ9LEs9e2N1cnJlbnQ6ITF9LEJmPUFmO2Z1bmN0aW9uIENmKGEsYil7dmFyIGM9YS50eXBlLmNvbnRleHRUeXBlcztpZighYylyZXR1cm4gQWY7dmFyIGQ9YS5zdGF0ZU5vZGU7aWYoZCYmZC5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZFVubWFza2VkQ2hpbGRDb250ZXh0PT09YilyZXR1cm4gZC5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1hc2tlZENoaWxkQ29udGV4dDt2YXIgZT17fSxmO2ZvcihmIGluIGMpZVtmXT1iW2ZdO2QmJihhPWEuc3RhdGVOb2RlLGEuX19yZWFjdEludGVybmFsTWVtb2l6ZWRVbm1hc2tlZENoaWxkQ29udGV4dD1iLGEuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNYXNrZWRDaGlsZENvbnRleHQ9ZSk7cmV0dXJuIGV9ZnVuY3Rpb24gTChhKXthPWEuY2hpbGRDb250ZXh0VHlwZXM7cmV0dXJuIG51bGwhPT1hJiZ2b2lkIDAhPT1hfVxuZnVuY3Rpb24gRGYoKXtIKEspO0goSil9ZnVuY3Rpb24gRWYoYSxiLGMpe2lmKEouY3VycmVudCE9PUFmKXRocm93IEVycm9yKHUoMTY4KSk7SShKLGIpO0koSyxjKX1mdW5jdGlvbiBGZihhLGIsYyl7dmFyIGQ9YS5zdGF0ZU5vZGU7YT1iLmNoaWxkQ29udGV4dFR5cGVzO2lmKFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBkLmdldENoaWxkQ29udGV4dClyZXR1cm4gYztkPWQuZ2V0Q2hpbGRDb250ZXh0KCk7Zm9yKHZhciBlIGluIGQpaWYoIShlIGluIGEpKXRocm93IEVycm9yKHUoMTA4LHBiKGIpfHxcIlVua25vd25cIixlKSk7cmV0dXJuIG4oe30sYyx7fSxkKX1mdW5jdGlvbiBHZihhKXthPShhPWEuc3RhdGVOb2RlKSYmYS5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1lcmdlZENoaWxkQ29udGV4dHx8QWY7QmY9Si5jdXJyZW50O0koSixhKTtJKEssSy5jdXJyZW50KTtyZXR1cm4hMH1cbmZ1bmN0aW9uIEhmKGEsYixjKXt2YXIgZD1hLnN0YXRlTm9kZTtpZighZCl0aHJvdyBFcnJvcih1KDE2OSkpO2M/KGE9RmYoYSxiLEJmKSxkLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWVyZ2VkQ2hpbGRDb250ZXh0PWEsSChLKSxIKEopLEkoSixhKSk6SChLKTtJKEssYyl9XG52YXIgSWY9ci51bnN0YWJsZV9ydW5XaXRoUHJpb3JpdHksSmY9ci51bnN0YWJsZV9zY2hlZHVsZUNhbGxiYWNrLEtmPXIudW5zdGFibGVfY2FuY2VsQ2FsbGJhY2ssTGY9ci51bnN0YWJsZV9yZXF1ZXN0UGFpbnQsTWY9ci51bnN0YWJsZV9ub3csTmY9ci51bnN0YWJsZV9nZXRDdXJyZW50UHJpb3JpdHlMZXZlbCxPZj1yLnVuc3RhYmxlX0ltbWVkaWF0ZVByaW9yaXR5LFBmPXIudW5zdGFibGVfVXNlckJsb2NraW5nUHJpb3JpdHksUWY9ci51bnN0YWJsZV9Ob3JtYWxQcmlvcml0eSxSZj1yLnVuc3RhYmxlX0xvd1ByaW9yaXR5LFNmPXIudW5zdGFibGVfSWRsZVByaW9yaXR5LFRmPXt9LFVmPXIudW5zdGFibGVfc2hvdWxkWWllbGQsVmY9dm9pZCAwIT09TGY/TGY6ZnVuY3Rpb24oKXt9LFdmPW51bGwsWGY9bnVsbCxZZj0hMSxaZj1NZigpLCRmPTFFND5aZj9NZjpmdW5jdGlvbigpe3JldHVybiBNZigpLVpmfTtcbmZ1bmN0aW9uIGFnKCl7c3dpdGNoKE5mKCkpe2Nhc2UgT2Y6cmV0dXJuIDk5O2Nhc2UgUGY6cmV0dXJuIDk4O2Nhc2UgUWY6cmV0dXJuIDk3O2Nhc2UgUmY6cmV0dXJuIDk2O2Nhc2UgU2Y6cmV0dXJuIDk1O2RlZmF1bHQ6dGhyb3cgRXJyb3IodSgzMzIpKTt9fWZ1bmN0aW9uIGJnKGEpe3N3aXRjaChhKXtjYXNlIDk5OnJldHVybiBPZjtjYXNlIDk4OnJldHVybiBQZjtjYXNlIDk3OnJldHVybiBRZjtjYXNlIDk2OnJldHVybiBSZjtjYXNlIDk1OnJldHVybiBTZjtkZWZhdWx0OnRocm93IEVycm9yKHUoMzMyKSk7fX1mdW5jdGlvbiBjZyhhLGIpe2E9YmcoYSk7cmV0dXJuIElmKGEsYil9ZnVuY3Rpb24gZGcoYSxiLGMpe2E9YmcoYSk7cmV0dXJuIEpmKGEsYixjKX1mdW5jdGlvbiBlZyhhKXtudWxsPT09V2Y/KFdmPVthXSxYZj1KZihPZixmZykpOldmLnB1c2goYSk7cmV0dXJuIFRmfWZ1bmN0aW9uIGdnKCl7aWYobnVsbCE9PVhmKXt2YXIgYT1YZjtYZj1udWxsO0tmKGEpfWZnKCl9XG5mdW5jdGlvbiBmZygpe2lmKCFZZiYmbnVsbCE9PVdmKXtZZj0hMDt2YXIgYT0wO3RyeXt2YXIgYj1XZjtjZyg5OSxmdW5jdGlvbigpe2Zvcig7YTxiLmxlbmd0aDthKyspe3ZhciBjPWJbYV07ZG8gYz1jKCEwKTt3aGlsZShudWxsIT09Yyl9fSk7V2Y9bnVsbH1jYXRjaChjKXt0aHJvdyBudWxsIT09V2YmJihXZj1XZi5zbGljZShhKzEpKSxKZihPZixnZyksYzt9ZmluYWxseXtZZj0hMX19fWZ1bmN0aW9uIGhnKGEsYixjKXtjLz0xMDtyZXR1cm4gMTA3Mzc0MTgyMS0oKCgxMDczNzQxODIxLWErYi8xMCkvY3wwKSsxKSpjfWZ1bmN0aW9uIGlnKGEsYil7aWYoYSYmYS5kZWZhdWx0UHJvcHMpe2I9bih7fSxiKTthPWEuZGVmYXVsdFByb3BzO2Zvcih2YXIgYyBpbiBhKXZvaWQgMD09PWJbY10mJihiW2NdPWFbY10pfXJldHVybiBifXZhciBqZz17Y3VycmVudDpudWxsfSxrZz1udWxsLGxnPW51bGwsbWc9bnVsbDtmdW5jdGlvbiBuZygpe21nPWxnPWtnPW51bGx9XG5mdW5jdGlvbiBvZyhhKXt2YXIgYj1qZy5jdXJyZW50O0goamcpO2EudHlwZS5fY29udGV4dC5fY3VycmVudFZhbHVlPWJ9ZnVuY3Rpb24gcGcoYSxiKXtmb3IoO251bGwhPT1hOyl7dmFyIGM9YS5hbHRlcm5hdGU7aWYoYS5jaGlsZEV4cGlyYXRpb25UaW1lPGIpYS5jaGlsZEV4cGlyYXRpb25UaW1lPWIsbnVsbCE9PWMmJmMuY2hpbGRFeHBpcmF0aW9uVGltZTxiJiYoYy5jaGlsZEV4cGlyYXRpb25UaW1lPWIpO2Vsc2UgaWYobnVsbCE9PWMmJmMuY2hpbGRFeHBpcmF0aW9uVGltZTxiKWMuY2hpbGRFeHBpcmF0aW9uVGltZT1iO2Vsc2UgYnJlYWs7YT1hLnJldHVybn19ZnVuY3Rpb24gcWcoYSxiKXtrZz1hO21nPWxnPW51bGw7YT1hLmRlcGVuZGVuY2llcztudWxsIT09YSYmbnVsbCE9PWEuZmlyc3RDb250ZXh0JiYoYS5leHBpcmF0aW9uVGltZT49YiYmKHJnPSEwKSxhLmZpcnN0Q29udGV4dD1udWxsKX1cbmZ1bmN0aW9uIHNnKGEsYil7aWYobWchPT1hJiYhMSE9PWImJjAhPT1iKXtpZihcIm51bWJlclwiIT09dHlwZW9mIGJ8fDEwNzM3NDE4MjM9PT1iKW1nPWEsYj0xMDczNzQxODIzO2I9e2NvbnRleHQ6YSxvYnNlcnZlZEJpdHM6YixuZXh0Om51bGx9O2lmKG51bGw9PT1sZyl7aWYobnVsbD09PWtnKXRocm93IEVycm9yKHUoMzA4KSk7bGc9YjtrZy5kZXBlbmRlbmNpZXM9e2V4cGlyYXRpb25UaW1lOjAsZmlyc3RDb250ZXh0OmIscmVzcG9uZGVyczpudWxsfX1lbHNlIGxnPWxnLm5leHQ9Yn1yZXR1cm4gYS5fY3VycmVudFZhbHVlfXZhciB0Zz0hMTtmdW5jdGlvbiB1ZyhhKXthLnVwZGF0ZVF1ZXVlPXtiYXNlU3RhdGU6YS5tZW1vaXplZFN0YXRlLGJhc2VRdWV1ZTpudWxsLHNoYXJlZDp7cGVuZGluZzpudWxsfSxlZmZlY3RzOm51bGx9fVxuZnVuY3Rpb24gdmcoYSxiKXthPWEudXBkYXRlUXVldWU7Yi51cGRhdGVRdWV1ZT09PWEmJihiLnVwZGF0ZVF1ZXVlPXtiYXNlU3RhdGU6YS5iYXNlU3RhdGUsYmFzZVF1ZXVlOmEuYmFzZVF1ZXVlLHNoYXJlZDphLnNoYXJlZCxlZmZlY3RzOmEuZWZmZWN0c30pfWZ1bmN0aW9uIHdnKGEsYil7YT17ZXhwaXJhdGlvblRpbWU6YSxzdXNwZW5zZUNvbmZpZzpiLHRhZzowLHBheWxvYWQ6bnVsbCxjYWxsYmFjazpudWxsLG5leHQ6bnVsbH07cmV0dXJuIGEubmV4dD1hfWZ1bmN0aW9uIHhnKGEsYil7YT1hLnVwZGF0ZVF1ZXVlO2lmKG51bGwhPT1hKXthPWEuc2hhcmVkO3ZhciBjPWEucGVuZGluZztudWxsPT09Yz9iLm5leHQ9YjooYi5uZXh0PWMubmV4dCxjLm5leHQ9Yik7YS5wZW5kaW5nPWJ9fVxuZnVuY3Rpb24geWcoYSxiKXt2YXIgYz1hLmFsdGVybmF0ZTtudWxsIT09YyYmdmcoYyxhKTthPWEudXBkYXRlUXVldWU7Yz1hLmJhc2VRdWV1ZTtudWxsPT09Yz8oYS5iYXNlUXVldWU9Yi5uZXh0PWIsYi5uZXh0PWIpOihiLm5leHQ9Yy5uZXh0LGMubmV4dD1iKX1cbmZ1bmN0aW9uIHpnKGEsYixjLGQpe3ZhciBlPWEudXBkYXRlUXVldWU7dGc9ITE7dmFyIGY9ZS5iYXNlUXVldWUsZz1lLnNoYXJlZC5wZW5kaW5nO2lmKG51bGwhPT1nKXtpZihudWxsIT09Zil7dmFyIGg9Zi5uZXh0O2YubmV4dD1nLm5leHQ7Zy5uZXh0PWh9Zj1nO2Uuc2hhcmVkLnBlbmRpbmc9bnVsbDtoPWEuYWx0ZXJuYXRlO251bGwhPT1oJiYoaD1oLnVwZGF0ZVF1ZXVlLG51bGwhPT1oJiYoaC5iYXNlUXVldWU9ZykpfWlmKG51bGwhPT1mKXtoPWYubmV4dDt2YXIgaz1lLmJhc2VTdGF0ZSxsPTAsbT1udWxsLHA9bnVsbCx4PW51bGw7aWYobnVsbCE9PWgpe3ZhciB6PWg7ZG97Zz16LmV4cGlyYXRpb25UaW1lO2lmKGc8ZCl7dmFyIGNhPXtleHBpcmF0aW9uVGltZTp6LmV4cGlyYXRpb25UaW1lLHN1c3BlbnNlQ29uZmlnOnouc3VzcGVuc2VDb25maWcsdGFnOnoudGFnLHBheWxvYWQ6ei5wYXlsb2FkLGNhbGxiYWNrOnouY2FsbGJhY2ssbmV4dDpudWxsfTtudWxsPT09eD8ocD14PVxuY2EsbT1rKTp4PXgubmV4dD1jYTtnPmwmJihsPWcpfWVsc2V7bnVsbCE9PXgmJih4PXgubmV4dD17ZXhwaXJhdGlvblRpbWU6MTA3Mzc0MTgyMyxzdXNwZW5zZUNvbmZpZzp6LnN1c3BlbnNlQ29uZmlnLHRhZzp6LnRhZyxwYXlsb2FkOnoucGF5bG9hZCxjYWxsYmFjazp6LmNhbGxiYWNrLG5leHQ6bnVsbH0pO0FnKGcsei5zdXNwZW5zZUNvbmZpZyk7YTp7dmFyIEQ9YSx0PXo7Zz1iO2NhPWM7c3dpdGNoKHQudGFnKXtjYXNlIDE6RD10LnBheWxvYWQ7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIEQpe2s9RC5jYWxsKGNhLGssZyk7YnJlYWsgYX1rPUQ7YnJlYWsgYTtjYXNlIDM6RC5lZmZlY3RUYWc9RC5lZmZlY3RUYWcmLTQwOTd8NjQ7Y2FzZSAwOkQ9dC5wYXlsb2FkO2c9XCJmdW5jdGlvblwiPT09dHlwZW9mIEQ/RC5jYWxsKGNhLGssZyk6RDtpZihudWxsPT09Z3x8dm9pZCAwPT09ZylicmVhayBhO2s9bih7fSxrLGcpO2JyZWFrIGE7Y2FzZSAyOnRnPSEwfX1udWxsIT09ei5jYWxsYmFjayYmXG4oYS5lZmZlY3RUYWd8PTMyLGc9ZS5lZmZlY3RzLG51bGw9PT1nP2UuZWZmZWN0cz1bel06Zy5wdXNoKHopKX16PXoubmV4dDtpZihudWxsPT09enx8ej09PWgpaWYoZz1lLnNoYXJlZC5wZW5kaW5nLG51bGw9PT1nKWJyZWFrO2Vsc2Ugej1mLm5leHQ9Zy5uZXh0LGcubmV4dD1oLGUuYmFzZVF1ZXVlPWY9ZyxlLnNoYXJlZC5wZW5kaW5nPW51bGx9d2hpbGUoMSl9bnVsbD09PXg/bT1rOngubmV4dD1wO2UuYmFzZVN0YXRlPW07ZS5iYXNlUXVldWU9eDtCZyhsKTthLmV4cGlyYXRpb25UaW1lPWw7YS5tZW1vaXplZFN0YXRlPWt9fVxuZnVuY3Rpb24gQ2coYSxiLGMpe2E9Yi5lZmZlY3RzO2IuZWZmZWN0cz1udWxsO2lmKG51bGwhPT1hKWZvcihiPTA7YjxhLmxlbmd0aDtiKyspe3ZhciBkPWFbYl0sZT1kLmNhbGxiYWNrO2lmKG51bGwhPT1lKXtkLmNhbGxiYWNrPW51bGw7ZD1lO2U9YztpZihcImZ1bmN0aW9uXCIhPT10eXBlb2YgZCl0aHJvdyBFcnJvcih1KDE5MSxkKSk7ZC5jYWxsKGUpfX19dmFyIERnPVdhLlJlYWN0Q3VycmVudEJhdGNoQ29uZmlnLEVnPShuZXcgYWEuQ29tcG9uZW50KS5yZWZzO2Z1bmN0aW9uIEZnKGEsYixjLGQpe2I9YS5tZW1vaXplZFN0YXRlO2M9YyhkLGIpO2M9bnVsbD09PWN8fHZvaWQgMD09PWM/YjpuKHt9LGIsYyk7YS5tZW1vaXplZFN0YXRlPWM7MD09PWEuZXhwaXJhdGlvblRpbWUmJihhLnVwZGF0ZVF1ZXVlLmJhc2VTdGF0ZT1jKX1cbnZhciBKZz17aXNNb3VudGVkOmZ1bmN0aW9uKGEpe3JldHVybihhPWEuX3JlYWN0SW50ZXJuYWxGaWJlcik/ZGMoYSk9PT1hOiExfSxlbnF1ZXVlU2V0U3RhdGU6ZnVuY3Rpb24oYSxiLGMpe2E9YS5fcmVhY3RJbnRlcm5hbEZpYmVyO3ZhciBkPUdnKCksZT1EZy5zdXNwZW5zZTtkPUhnKGQsYSxlKTtlPXdnKGQsZSk7ZS5wYXlsb2FkPWI7dm9pZCAwIT09YyYmbnVsbCE9PWMmJihlLmNhbGxiYWNrPWMpO3hnKGEsZSk7SWcoYSxkKX0sZW5xdWV1ZVJlcGxhY2VTdGF0ZTpmdW5jdGlvbihhLGIsYyl7YT1hLl9yZWFjdEludGVybmFsRmliZXI7dmFyIGQ9R2coKSxlPURnLnN1c3BlbnNlO2Q9SGcoZCxhLGUpO2U9d2coZCxlKTtlLnRhZz0xO2UucGF5bG9hZD1iO3ZvaWQgMCE9PWMmJm51bGwhPT1jJiYoZS5jYWxsYmFjaz1jKTt4ZyhhLGUpO0lnKGEsZCl9LGVucXVldWVGb3JjZVVwZGF0ZTpmdW5jdGlvbihhLGIpe2E9YS5fcmVhY3RJbnRlcm5hbEZpYmVyO3ZhciBjPUdnKCksZD1EZy5zdXNwZW5zZTtcbmM9SGcoYyxhLGQpO2Q9d2coYyxkKTtkLnRhZz0yO3ZvaWQgMCE9PWImJm51bGwhPT1iJiYoZC5jYWxsYmFjaz1iKTt4ZyhhLGQpO0lnKGEsYyl9fTtmdW5jdGlvbiBLZyhhLGIsYyxkLGUsZixnKXthPWEuc3RhdGVOb2RlO3JldHVyblwiZnVuY3Rpb25cIj09PXR5cGVvZiBhLnNob3VsZENvbXBvbmVudFVwZGF0ZT9hLnNob3VsZENvbXBvbmVudFVwZGF0ZShkLGYsZyk6Yi5wcm90b3R5cGUmJmIucHJvdG90eXBlLmlzUHVyZVJlYWN0Q29tcG9uZW50PyFiZihjLGQpfHwhYmYoZSxmKTohMH1cbmZ1bmN0aW9uIExnKGEsYixjKXt2YXIgZD0hMSxlPUFmO3ZhciBmPWIuY29udGV4dFR5cGU7XCJvYmplY3RcIj09PXR5cGVvZiBmJiZudWxsIT09Zj9mPXNnKGYpOihlPUwoYik/QmY6Si5jdXJyZW50LGQ9Yi5jb250ZXh0VHlwZXMsZj0oZD1udWxsIT09ZCYmdm9pZCAwIT09ZCk/Q2YoYSxlKTpBZik7Yj1uZXcgYihjLGYpO2EubWVtb2l6ZWRTdGF0ZT1udWxsIT09Yi5zdGF0ZSYmdm9pZCAwIT09Yi5zdGF0ZT9iLnN0YXRlOm51bGw7Yi51cGRhdGVyPUpnO2Euc3RhdGVOb2RlPWI7Yi5fcmVhY3RJbnRlcm5hbEZpYmVyPWE7ZCYmKGE9YS5zdGF0ZU5vZGUsYS5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZFVubWFza2VkQ2hpbGRDb250ZXh0PWUsYS5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1hc2tlZENoaWxkQ29udGV4dD1mKTtyZXR1cm4gYn1cbmZ1bmN0aW9uIE1nKGEsYixjLGQpe2E9Yi5zdGF0ZTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgYi5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzJiZiLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMoYyxkKTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgYi5VTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyYmYi5VTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhjLGQpO2Iuc3RhdGUhPT1hJiZKZy5lbnF1ZXVlUmVwbGFjZVN0YXRlKGIsYi5zdGF0ZSxudWxsKX1cbmZ1bmN0aW9uIE5nKGEsYixjLGQpe3ZhciBlPWEuc3RhdGVOb2RlO2UucHJvcHM9YztlLnN0YXRlPWEubWVtb2l6ZWRTdGF0ZTtlLnJlZnM9RWc7dWcoYSk7dmFyIGY9Yi5jb250ZXh0VHlwZTtcIm9iamVjdFwiPT09dHlwZW9mIGYmJm51bGwhPT1mP2UuY29udGV4dD1zZyhmKTooZj1MKGIpP0JmOkouY3VycmVudCxlLmNvbnRleHQ9Q2YoYSxmKSk7emcoYSxjLGUsZCk7ZS5zdGF0ZT1hLm1lbW9pemVkU3RhdGU7Zj1iLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcztcImZ1bmN0aW9uXCI9PT10eXBlb2YgZiYmKEZnKGEsYixmLGMpLGUuc3RhdGU9YS5tZW1vaXplZFN0YXRlKTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgYi5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHN8fFwiZnVuY3Rpb25cIj09PXR5cGVvZiBlLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlfHxcImZ1bmN0aW9uXCIhPT10eXBlb2YgZS5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50JiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgZS5jb21wb25lbnRXaWxsTW91bnR8fFxuKGI9ZS5zdGF0ZSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZS5jb21wb25lbnRXaWxsTW91bnQmJmUuY29tcG9uZW50V2lsbE1vdW50KCksXCJmdW5jdGlvblwiPT09dHlwZW9mIGUuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCYmZS5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50KCksYiE9PWUuc3RhdGUmJkpnLmVucXVldWVSZXBsYWNlU3RhdGUoZSxlLnN0YXRlLG51bGwpLHpnKGEsYyxlLGQpLGUuc3RhdGU9YS5tZW1vaXplZFN0YXRlKTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgZS5jb21wb25lbnREaWRNb3VudCYmKGEuZWZmZWN0VGFnfD00KX12YXIgT2c9QXJyYXkuaXNBcnJheTtcbmZ1bmN0aW9uIFBnKGEsYixjKXthPWMucmVmO2lmKG51bGwhPT1hJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgYSYmXCJvYmplY3RcIiE9PXR5cGVvZiBhKXtpZihjLl9vd25lcil7Yz1jLl9vd25lcjtpZihjKXtpZigxIT09Yy50YWcpdGhyb3cgRXJyb3IodSgzMDkpKTt2YXIgZD1jLnN0YXRlTm9kZX1pZighZCl0aHJvdyBFcnJvcih1KDE0NyxhKSk7dmFyIGU9XCJcIithO2lmKG51bGwhPT1iJiZudWxsIT09Yi5yZWYmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBiLnJlZiYmYi5yZWYuX3N0cmluZ1JlZj09PWUpcmV0dXJuIGIucmVmO2I9ZnVuY3Rpb24oYSl7dmFyIGI9ZC5yZWZzO2I9PT1FZyYmKGI9ZC5yZWZzPXt9KTtudWxsPT09YT9kZWxldGUgYltlXTpiW2VdPWF9O2IuX3N0cmluZ1JlZj1lO3JldHVybiBifWlmKFwic3RyaW5nXCIhPT10eXBlb2YgYSl0aHJvdyBFcnJvcih1KDI4NCkpO2lmKCFjLl9vd25lcil0aHJvdyBFcnJvcih1KDI5MCxhKSk7fXJldHVybiBhfVxuZnVuY3Rpb24gUWcoYSxiKXtpZihcInRleHRhcmVhXCIhPT1hLnR5cGUpdGhyb3cgRXJyb3IodSgzMSxcIltvYmplY3QgT2JqZWN0XVwiPT09T2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGIpP1wib2JqZWN0IHdpdGgga2V5cyB7XCIrT2JqZWN0LmtleXMoYikuam9pbihcIiwgXCIpK1wifVwiOmIsXCJcIikpO31cbmZ1bmN0aW9uIFJnKGEpe2Z1bmN0aW9uIGIoYixjKXtpZihhKXt2YXIgZD1iLmxhc3RFZmZlY3Q7bnVsbCE9PWQ/KGQubmV4dEVmZmVjdD1jLGIubGFzdEVmZmVjdD1jKTpiLmZpcnN0RWZmZWN0PWIubGFzdEVmZmVjdD1jO2MubmV4dEVmZmVjdD1udWxsO2MuZWZmZWN0VGFnPTh9fWZ1bmN0aW9uIGMoYyxkKXtpZighYSlyZXR1cm4gbnVsbDtmb3IoO251bGwhPT1kOyliKGMsZCksZD1kLnNpYmxpbmc7cmV0dXJuIG51bGx9ZnVuY3Rpb24gZChhLGIpe2ZvcihhPW5ldyBNYXA7bnVsbCE9PWI7KW51bGwhPT1iLmtleT9hLnNldChiLmtleSxiKTphLnNldChiLmluZGV4LGIpLGI9Yi5zaWJsaW5nO3JldHVybiBhfWZ1bmN0aW9uIGUoYSxiKXthPVNnKGEsYik7YS5pbmRleD0wO2Euc2libGluZz1udWxsO3JldHVybiBhfWZ1bmN0aW9uIGYoYixjLGQpe2IuaW5kZXg9ZDtpZighYSlyZXR1cm4gYztkPWIuYWx0ZXJuYXRlO2lmKG51bGwhPT1kKXJldHVybiBkPWQuaW5kZXgsZDxjPyhiLmVmZmVjdFRhZz1cbjIsYyk6ZDtiLmVmZmVjdFRhZz0yO3JldHVybiBjfWZ1bmN0aW9uIGcoYil7YSYmbnVsbD09PWIuYWx0ZXJuYXRlJiYoYi5lZmZlY3RUYWc9Mik7cmV0dXJuIGJ9ZnVuY3Rpb24gaChhLGIsYyxkKXtpZihudWxsPT09Ynx8NiE9PWIudGFnKXJldHVybiBiPVRnKGMsYS5tb2RlLGQpLGIucmV0dXJuPWEsYjtiPWUoYixjKTtiLnJldHVybj1hO3JldHVybiBifWZ1bmN0aW9uIGsoYSxiLGMsZCl7aWYobnVsbCE9PWImJmIuZWxlbWVudFR5cGU9PT1jLnR5cGUpcmV0dXJuIGQ9ZShiLGMucHJvcHMpLGQucmVmPVBnKGEsYixjKSxkLnJldHVybj1hLGQ7ZD1VZyhjLnR5cGUsYy5rZXksYy5wcm9wcyxudWxsLGEubW9kZSxkKTtkLnJlZj1QZyhhLGIsYyk7ZC5yZXR1cm49YTtyZXR1cm4gZH1mdW5jdGlvbiBsKGEsYixjLGQpe2lmKG51bGw9PT1ifHw0IT09Yi50YWd8fGIuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8hPT1jLmNvbnRhaW5lckluZm98fGIuc3RhdGVOb2RlLmltcGxlbWVudGF0aW9uIT09XG5jLmltcGxlbWVudGF0aW9uKXJldHVybiBiPVZnKGMsYS5tb2RlLGQpLGIucmV0dXJuPWEsYjtiPWUoYixjLmNoaWxkcmVufHxbXSk7Yi5yZXR1cm49YTtyZXR1cm4gYn1mdW5jdGlvbiBtKGEsYixjLGQsZil7aWYobnVsbD09PWJ8fDchPT1iLnRhZylyZXR1cm4gYj1XZyhjLGEubW9kZSxkLGYpLGIucmV0dXJuPWEsYjtiPWUoYixjKTtiLnJldHVybj1hO3JldHVybiBifWZ1bmN0aW9uIHAoYSxiLGMpe2lmKFwic3RyaW5nXCI9PT10eXBlb2YgYnx8XCJudW1iZXJcIj09PXR5cGVvZiBiKXJldHVybiBiPVRnKFwiXCIrYixhLm1vZGUsYyksYi5yZXR1cm49YSxiO2lmKFwib2JqZWN0XCI9PT10eXBlb2YgYiYmbnVsbCE9PWIpe3N3aXRjaChiLiQkdHlwZW9mKXtjYXNlIFphOnJldHVybiBjPVVnKGIudHlwZSxiLmtleSxiLnByb3BzLG51bGwsYS5tb2RlLGMpLGMucmVmPVBnKGEsbnVsbCxiKSxjLnJldHVybj1hLGM7Y2FzZSAkYTpyZXR1cm4gYj1WZyhiLGEubW9kZSxjKSxiLnJldHVybj1hLGJ9aWYoT2coYil8fFxubmIoYikpcmV0dXJuIGI9V2coYixhLm1vZGUsYyxudWxsKSxiLnJldHVybj1hLGI7UWcoYSxiKX1yZXR1cm4gbnVsbH1mdW5jdGlvbiB4KGEsYixjLGQpe3ZhciBlPW51bGwhPT1iP2Iua2V5Om51bGw7aWYoXCJzdHJpbmdcIj09PXR5cGVvZiBjfHxcIm51bWJlclwiPT09dHlwZW9mIGMpcmV0dXJuIG51bGwhPT1lP251bGw6aChhLGIsXCJcIitjLGQpO2lmKFwib2JqZWN0XCI9PT10eXBlb2YgYyYmbnVsbCE9PWMpe3N3aXRjaChjLiQkdHlwZW9mKXtjYXNlIFphOnJldHVybiBjLmtleT09PWU/Yy50eXBlPT09YWI/bShhLGIsYy5wcm9wcy5jaGlsZHJlbixkLGUpOmsoYSxiLGMsZCk6bnVsbDtjYXNlICRhOnJldHVybiBjLmtleT09PWU/bChhLGIsYyxkKTpudWxsfWlmKE9nKGMpfHxuYihjKSlyZXR1cm4gbnVsbCE9PWU/bnVsbDptKGEsYixjLGQsbnVsbCk7UWcoYSxjKX1yZXR1cm4gbnVsbH1mdW5jdGlvbiB6KGEsYixjLGQsZSl7aWYoXCJzdHJpbmdcIj09PXR5cGVvZiBkfHxcIm51bWJlclwiPT09dHlwZW9mIGQpcmV0dXJuIGE9XG5hLmdldChjKXx8bnVsbCxoKGIsYSxcIlwiK2QsZSk7aWYoXCJvYmplY3RcIj09PXR5cGVvZiBkJiZudWxsIT09ZCl7c3dpdGNoKGQuJCR0eXBlb2Ype2Nhc2UgWmE6cmV0dXJuIGE9YS5nZXQobnVsbD09PWQua2V5P2M6ZC5rZXkpfHxudWxsLGQudHlwZT09PWFiP20oYixhLGQucHJvcHMuY2hpbGRyZW4sZSxkLmtleSk6ayhiLGEsZCxlKTtjYXNlICRhOnJldHVybiBhPWEuZ2V0KG51bGw9PT1kLmtleT9jOmQua2V5KXx8bnVsbCxsKGIsYSxkLGUpfWlmKE9nKGQpfHxuYihkKSlyZXR1cm4gYT1hLmdldChjKXx8bnVsbCxtKGIsYSxkLGUsbnVsbCk7UWcoYixkKX1yZXR1cm4gbnVsbH1mdW5jdGlvbiBjYShlLGcsaCxrKXtmb3IodmFyIGw9bnVsbCx0PW51bGwsbT1nLHk9Zz0wLEE9bnVsbDtudWxsIT09bSYmeTxoLmxlbmd0aDt5Kyspe20uaW5kZXg+eT8oQT1tLG09bnVsbCk6QT1tLnNpYmxpbmc7dmFyIHE9eChlLG0saFt5XSxrKTtpZihudWxsPT09cSl7bnVsbD09PW0mJihtPUEpO2JyZWFrfWEmJlxubSYmbnVsbD09PXEuYWx0ZXJuYXRlJiZiKGUsbSk7Zz1mKHEsZyx5KTtudWxsPT09dD9sPXE6dC5zaWJsaW5nPXE7dD1xO209QX1pZih5PT09aC5sZW5ndGgpcmV0dXJuIGMoZSxtKSxsO2lmKG51bGw9PT1tKXtmb3IoO3k8aC5sZW5ndGg7eSsrKW09cChlLGhbeV0sayksbnVsbCE9PW0mJihnPWYobSxnLHkpLG51bGw9PT10P2w9bTp0LnNpYmxpbmc9bSx0PW0pO3JldHVybiBsfWZvcihtPWQoZSxtKTt5PGgubGVuZ3RoO3krKylBPXoobSxlLHksaFt5XSxrKSxudWxsIT09QSYmKGEmJm51bGwhPT1BLmFsdGVybmF0ZSYmbS5kZWxldGUobnVsbD09PUEua2V5P3k6QS5rZXkpLGc9ZihBLGcseSksbnVsbD09PXQ/bD1BOnQuc2libGluZz1BLHQ9QSk7YSYmbS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3JldHVybiBiKGUsYSl9KTtyZXR1cm4gbH1mdW5jdGlvbiBEKGUsZyxoLGwpe3ZhciBrPW5iKGgpO2lmKFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBrKXRocm93IEVycm9yKHUoMTUwKSk7aD1rLmNhbGwoaCk7XG5pZihudWxsPT1oKXRocm93IEVycm9yKHUoMTUxKSk7Zm9yKHZhciBtPWs9bnVsbCx0PWcseT1nPTAsQT1udWxsLHE9aC5uZXh0KCk7bnVsbCE9PXQmJiFxLmRvbmU7eSsrLHE9aC5uZXh0KCkpe3QuaW5kZXg+eT8oQT10LHQ9bnVsbCk6QT10LnNpYmxpbmc7dmFyIEQ9eChlLHQscS52YWx1ZSxsKTtpZihudWxsPT09RCl7bnVsbD09PXQmJih0PUEpO2JyZWFrfWEmJnQmJm51bGw9PT1ELmFsdGVybmF0ZSYmYihlLHQpO2c9ZihELGcseSk7bnVsbD09PW0/az1EOm0uc2libGluZz1EO209RDt0PUF9aWYocS5kb25lKXJldHVybiBjKGUsdCksaztpZihudWxsPT09dCl7Zm9yKDshcS5kb25lO3krKyxxPWgubmV4dCgpKXE9cChlLHEudmFsdWUsbCksbnVsbCE9PXEmJihnPWYocSxnLHkpLG51bGw9PT1tP2s9cTptLnNpYmxpbmc9cSxtPXEpO3JldHVybiBrfWZvcih0PWQoZSx0KTshcS5kb25lO3krKyxxPWgubmV4dCgpKXE9eih0LGUseSxxLnZhbHVlLGwpLG51bGwhPT1xJiYoYSYmbnVsbCE9PVxucS5hbHRlcm5hdGUmJnQuZGVsZXRlKG51bGw9PT1xLmtleT95OnEua2V5KSxnPWYocSxnLHkpLG51bGw9PT1tP2s9cTptLnNpYmxpbmc9cSxtPXEpO2EmJnQuZm9yRWFjaChmdW5jdGlvbihhKXtyZXR1cm4gYihlLGEpfSk7cmV0dXJuIGt9cmV0dXJuIGZ1bmN0aW9uKGEsZCxmLGgpe3ZhciBrPVwib2JqZWN0XCI9PT10eXBlb2YgZiYmbnVsbCE9PWYmJmYudHlwZT09PWFiJiZudWxsPT09Zi5rZXk7ayYmKGY9Zi5wcm9wcy5jaGlsZHJlbik7dmFyIGw9XCJvYmplY3RcIj09PXR5cGVvZiBmJiZudWxsIT09ZjtpZihsKXN3aXRjaChmLiQkdHlwZW9mKXtjYXNlIFphOmE6e2w9Zi5rZXk7Zm9yKGs9ZDtudWxsIT09azspe2lmKGsua2V5PT09bCl7c3dpdGNoKGsudGFnKXtjYXNlIDc6aWYoZi50eXBlPT09YWIpe2MoYSxrLnNpYmxpbmcpO2Q9ZShrLGYucHJvcHMuY2hpbGRyZW4pO2QucmV0dXJuPWE7YT1kO2JyZWFrIGF9YnJlYWs7ZGVmYXVsdDppZihrLmVsZW1lbnRUeXBlPT09Zi50eXBlKXtjKGEsXG5rLnNpYmxpbmcpO2Q9ZShrLGYucHJvcHMpO2QucmVmPVBnKGEsayxmKTtkLnJldHVybj1hO2E9ZDticmVhayBhfX1jKGEsayk7YnJlYWt9ZWxzZSBiKGEsayk7az1rLnNpYmxpbmd9Zi50eXBlPT09YWI/KGQ9V2coZi5wcm9wcy5jaGlsZHJlbixhLm1vZGUsaCxmLmtleSksZC5yZXR1cm49YSxhPWQpOihoPVVnKGYudHlwZSxmLmtleSxmLnByb3BzLG51bGwsYS5tb2RlLGgpLGgucmVmPVBnKGEsZCxmKSxoLnJldHVybj1hLGE9aCl9cmV0dXJuIGcoYSk7Y2FzZSAkYTphOntmb3Ioaz1mLmtleTtudWxsIT09ZDspe2lmKGQua2V5PT09aylpZig0PT09ZC50YWcmJmQuc3RhdGVOb2RlLmNvbnRhaW5lckluZm89PT1mLmNvbnRhaW5lckluZm8mJmQuc3RhdGVOb2RlLmltcGxlbWVudGF0aW9uPT09Zi5pbXBsZW1lbnRhdGlvbil7YyhhLGQuc2libGluZyk7ZD1lKGQsZi5jaGlsZHJlbnx8W10pO2QucmV0dXJuPWE7YT1kO2JyZWFrIGF9ZWxzZXtjKGEsZCk7YnJlYWt9ZWxzZSBiKGEsZCk7ZD1cbmQuc2libGluZ31kPVZnKGYsYS5tb2RlLGgpO2QucmV0dXJuPWE7YT1kfXJldHVybiBnKGEpfWlmKFwic3RyaW5nXCI9PT10eXBlb2YgZnx8XCJudW1iZXJcIj09PXR5cGVvZiBmKXJldHVybiBmPVwiXCIrZixudWxsIT09ZCYmNj09PWQudGFnPyhjKGEsZC5zaWJsaW5nKSxkPWUoZCxmKSxkLnJldHVybj1hLGE9ZCk6KGMoYSxkKSxkPVRnKGYsYS5tb2RlLGgpLGQucmV0dXJuPWEsYT1kKSxnKGEpO2lmKE9nKGYpKXJldHVybiBjYShhLGQsZixoKTtpZihuYihmKSlyZXR1cm4gRChhLGQsZixoKTtsJiZRZyhhLGYpO2lmKFwidW5kZWZpbmVkXCI9PT10eXBlb2YgZiYmIWspc3dpdGNoKGEudGFnKXtjYXNlIDE6Y2FzZSAwOnRocm93IGE9YS50eXBlLEVycm9yKHUoMTUyLGEuZGlzcGxheU5hbWV8fGEubmFtZXx8XCJDb21wb25lbnRcIikpO31yZXR1cm4gYyhhLGQpfX12YXIgWGc9UmcoITApLFlnPVJnKCExKSxaZz17fSwkZz17Y3VycmVudDpaZ30sYWg9e2N1cnJlbnQ6Wmd9LGJoPXtjdXJyZW50OlpnfTtcbmZ1bmN0aW9uIGNoKGEpe2lmKGE9PT1aZyl0aHJvdyBFcnJvcih1KDE3NCkpO3JldHVybiBhfWZ1bmN0aW9uIGRoKGEsYil7SShiaCxiKTtJKGFoLGEpO0koJGcsWmcpO2E9Yi5ub2RlVHlwZTtzd2l0Y2goYSl7Y2FzZSA5OmNhc2UgMTE6Yj0oYj1iLmRvY3VtZW50RWxlbWVudCk/Yi5uYW1lc3BhY2VVUkk6T2IobnVsbCxcIlwiKTticmVhaztkZWZhdWx0OmE9OD09PWE/Yi5wYXJlbnROb2RlOmIsYj1hLm5hbWVzcGFjZVVSSXx8bnVsbCxhPWEudGFnTmFtZSxiPU9iKGIsYSl9SCgkZyk7SSgkZyxiKX1mdW5jdGlvbiBlaCgpe0goJGcpO0goYWgpO0goYmgpfWZ1bmN0aW9uIGZoKGEpe2NoKGJoLmN1cnJlbnQpO3ZhciBiPWNoKCRnLmN1cnJlbnQpO3ZhciBjPU9iKGIsYS50eXBlKTtiIT09YyYmKEkoYWgsYSksSSgkZyxjKSl9ZnVuY3Rpb24gZ2goYSl7YWguY3VycmVudD09PWEmJihIKCRnKSxIKGFoKSl9dmFyIE09e2N1cnJlbnQ6MH07XG5mdW5jdGlvbiBoaChhKXtmb3IodmFyIGI9YTtudWxsIT09Yjspe2lmKDEzPT09Yi50YWcpe3ZhciBjPWIubWVtb2l6ZWRTdGF0ZTtpZihudWxsIT09YyYmKGM9Yy5kZWh5ZHJhdGVkLG51bGw9PT1jfHxjLmRhdGE9PT1CZHx8Yy5kYXRhPT09Q2QpKXJldHVybiBifWVsc2UgaWYoMTk9PT1iLnRhZyYmdm9pZCAwIT09Yi5tZW1vaXplZFByb3BzLnJldmVhbE9yZGVyKXtpZigwIT09KGIuZWZmZWN0VGFnJjY0KSlyZXR1cm4gYn1lbHNlIGlmKG51bGwhPT1iLmNoaWxkKXtiLmNoaWxkLnJldHVybj1iO2I9Yi5jaGlsZDtjb250aW51ZX1pZihiPT09YSlicmVhaztmb3IoO251bGw9PT1iLnNpYmxpbmc7KXtpZihudWxsPT09Yi5yZXR1cm58fGIucmV0dXJuPT09YSlyZXR1cm4gbnVsbDtiPWIucmV0dXJufWIuc2libGluZy5yZXR1cm49Yi5yZXR1cm47Yj1iLnNpYmxpbmd9cmV0dXJuIG51bGx9ZnVuY3Rpb24gaWgoYSxiKXtyZXR1cm57cmVzcG9uZGVyOmEscHJvcHM6Yn19XG52YXIgamg9V2EuUmVhY3RDdXJyZW50RGlzcGF0Y2hlcixraD1XYS5SZWFjdEN1cnJlbnRCYXRjaENvbmZpZyxsaD0wLE49bnVsbCxPPW51bGwsUD1udWxsLG1oPSExO2Z1bmN0aW9uIFEoKXt0aHJvdyBFcnJvcih1KDMyMSkpO31mdW5jdGlvbiBuaChhLGIpe2lmKG51bGw9PT1iKXJldHVybiExO2Zvcih2YXIgYz0wO2M8Yi5sZW5ndGgmJmM8YS5sZW5ndGg7YysrKWlmKCEkZShhW2NdLGJbY10pKXJldHVybiExO3JldHVybiEwfVxuZnVuY3Rpb24gb2goYSxiLGMsZCxlLGYpe2xoPWY7Tj1iO2IubWVtb2l6ZWRTdGF0ZT1udWxsO2IudXBkYXRlUXVldWU9bnVsbDtiLmV4cGlyYXRpb25UaW1lPTA7amguY3VycmVudD1udWxsPT09YXx8bnVsbD09PWEubWVtb2l6ZWRTdGF0ZT9waDpxaDthPWMoZCxlKTtpZihiLmV4cGlyYXRpb25UaW1lPT09bGgpe2Y9MDtkb3tiLmV4cGlyYXRpb25UaW1lPTA7aWYoISgyNT5mKSl0aHJvdyBFcnJvcih1KDMwMSkpO2YrPTE7UD1PPW51bGw7Yi51cGRhdGVRdWV1ZT1udWxsO2poLmN1cnJlbnQ9cmg7YT1jKGQsZSl9d2hpbGUoYi5leHBpcmF0aW9uVGltZT09PWxoKX1qaC5jdXJyZW50PXNoO2I9bnVsbCE9PU8mJm51bGwhPT1PLm5leHQ7bGg9MDtQPU89Tj1udWxsO21oPSExO2lmKGIpdGhyb3cgRXJyb3IodSgzMDApKTtyZXR1cm4gYX1cbmZ1bmN0aW9uIHRoKCl7dmFyIGE9e21lbW9pemVkU3RhdGU6bnVsbCxiYXNlU3RhdGU6bnVsbCxiYXNlUXVldWU6bnVsbCxxdWV1ZTpudWxsLG5leHQ6bnVsbH07bnVsbD09PVA/Ti5tZW1vaXplZFN0YXRlPVA9YTpQPVAubmV4dD1hO3JldHVybiBQfWZ1bmN0aW9uIHVoKCl7aWYobnVsbD09PU8pe3ZhciBhPU4uYWx0ZXJuYXRlO2E9bnVsbCE9PWE/YS5tZW1vaXplZFN0YXRlOm51bGx9ZWxzZSBhPU8ubmV4dDt2YXIgYj1udWxsPT09UD9OLm1lbW9pemVkU3RhdGU6UC5uZXh0O2lmKG51bGwhPT1iKVA9YixPPWE7ZWxzZXtpZihudWxsPT09YSl0aHJvdyBFcnJvcih1KDMxMCkpO089YTthPXttZW1vaXplZFN0YXRlOk8ubWVtb2l6ZWRTdGF0ZSxiYXNlU3RhdGU6Ty5iYXNlU3RhdGUsYmFzZVF1ZXVlOk8uYmFzZVF1ZXVlLHF1ZXVlOk8ucXVldWUsbmV4dDpudWxsfTtudWxsPT09UD9OLm1lbW9pemVkU3RhdGU9UD1hOlA9UC5uZXh0PWF9cmV0dXJuIFB9XG5mdW5jdGlvbiB2aChhLGIpe3JldHVyblwiZnVuY3Rpb25cIj09PXR5cGVvZiBiP2IoYSk6Yn1cbmZ1bmN0aW9uIHdoKGEpe3ZhciBiPXVoKCksYz1iLnF1ZXVlO2lmKG51bGw9PT1jKXRocm93IEVycm9yKHUoMzExKSk7Yy5sYXN0UmVuZGVyZWRSZWR1Y2VyPWE7dmFyIGQ9TyxlPWQuYmFzZVF1ZXVlLGY9Yy5wZW5kaW5nO2lmKG51bGwhPT1mKXtpZihudWxsIT09ZSl7dmFyIGc9ZS5uZXh0O2UubmV4dD1mLm5leHQ7Zi5uZXh0PWd9ZC5iYXNlUXVldWU9ZT1mO2MucGVuZGluZz1udWxsfWlmKG51bGwhPT1lKXtlPWUubmV4dDtkPWQuYmFzZVN0YXRlO3ZhciBoPWc9Zj1udWxsLGs9ZTtkb3t2YXIgbD1rLmV4cGlyYXRpb25UaW1lO2lmKGw8bGgpe3ZhciBtPXtleHBpcmF0aW9uVGltZTprLmV4cGlyYXRpb25UaW1lLHN1c3BlbnNlQ29uZmlnOmsuc3VzcGVuc2VDb25maWcsYWN0aW9uOmsuYWN0aW9uLGVhZ2VyUmVkdWNlcjprLmVhZ2VyUmVkdWNlcixlYWdlclN0YXRlOmsuZWFnZXJTdGF0ZSxuZXh0Om51bGx9O251bGw9PT1oPyhnPWg9bSxmPWQpOmg9aC5uZXh0PW07bD5OLmV4cGlyYXRpb25UaW1lJiZcbihOLmV4cGlyYXRpb25UaW1lPWwsQmcobCkpfWVsc2UgbnVsbCE9PWgmJihoPWgubmV4dD17ZXhwaXJhdGlvblRpbWU6MTA3Mzc0MTgyMyxzdXNwZW5zZUNvbmZpZzprLnN1c3BlbnNlQ29uZmlnLGFjdGlvbjprLmFjdGlvbixlYWdlclJlZHVjZXI6ay5lYWdlclJlZHVjZXIsZWFnZXJTdGF0ZTprLmVhZ2VyU3RhdGUsbmV4dDpudWxsfSksQWcobCxrLnN1c3BlbnNlQ29uZmlnKSxkPWsuZWFnZXJSZWR1Y2VyPT09YT9rLmVhZ2VyU3RhdGU6YShkLGsuYWN0aW9uKTtrPWsubmV4dH13aGlsZShudWxsIT09ayYmayE9PWUpO251bGw9PT1oP2Y9ZDpoLm5leHQ9ZzskZShkLGIubWVtb2l6ZWRTdGF0ZSl8fChyZz0hMCk7Yi5tZW1vaXplZFN0YXRlPWQ7Yi5iYXNlU3RhdGU9ZjtiLmJhc2VRdWV1ZT1oO2MubGFzdFJlbmRlcmVkU3RhdGU9ZH1yZXR1cm5bYi5tZW1vaXplZFN0YXRlLGMuZGlzcGF0Y2hdfVxuZnVuY3Rpb24geGgoYSl7dmFyIGI9dWgoKSxjPWIucXVldWU7aWYobnVsbD09PWMpdGhyb3cgRXJyb3IodSgzMTEpKTtjLmxhc3RSZW5kZXJlZFJlZHVjZXI9YTt2YXIgZD1jLmRpc3BhdGNoLGU9Yy5wZW5kaW5nLGY9Yi5tZW1vaXplZFN0YXRlO2lmKG51bGwhPT1lKXtjLnBlbmRpbmc9bnVsbDt2YXIgZz1lPWUubmV4dDtkbyBmPWEoZixnLmFjdGlvbiksZz1nLm5leHQ7d2hpbGUoZyE9PWUpOyRlKGYsYi5tZW1vaXplZFN0YXRlKXx8KHJnPSEwKTtiLm1lbW9pemVkU3RhdGU9ZjtudWxsPT09Yi5iYXNlUXVldWUmJihiLmJhc2VTdGF0ZT1mKTtjLmxhc3RSZW5kZXJlZFN0YXRlPWZ9cmV0dXJuW2YsZF19XG5mdW5jdGlvbiB5aChhKXt2YXIgYj10aCgpO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBhJiYoYT1hKCkpO2IubWVtb2l6ZWRTdGF0ZT1iLmJhc2VTdGF0ZT1hO2E9Yi5xdWV1ZT17cGVuZGluZzpudWxsLGRpc3BhdGNoOm51bGwsbGFzdFJlbmRlcmVkUmVkdWNlcjp2aCxsYXN0UmVuZGVyZWRTdGF0ZTphfTthPWEuZGlzcGF0Y2g9emguYmluZChudWxsLE4sYSk7cmV0dXJuW2IubWVtb2l6ZWRTdGF0ZSxhXX1mdW5jdGlvbiBBaChhLGIsYyxkKXthPXt0YWc6YSxjcmVhdGU6YixkZXN0cm95OmMsZGVwczpkLG5leHQ6bnVsbH07Yj1OLnVwZGF0ZVF1ZXVlO251bGw9PT1iPyhiPXtsYXN0RWZmZWN0Om51bGx9LE4udXBkYXRlUXVldWU9YixiLmxhc3RFZmZlY3Q9YS5uZXh0PWEpOihjPWIubGFzdEVmZmVjdCxudWxsPT09Yz9iLmxhc3RFZmZlY3Q9YS5uZXh0PWE6KGQ9Yy5uZXh0LGMubmV4dD1hLGEubmV4dD1kLGIubGFzdEVmZmVjdD1hKSk7cmV0dXJuIGF9XG5mdW5jdGlvbiBCaCgpe3JldHVybiB1aCgpLm1lbW9pemVkU3RhdGV9ZnVuY3Rpb24gQ2goYSxiLGMsZCl7dmFyIGU9dGgoKTtOLmVmZmVjdFRhZ3w9YTtlLm1lbW9pemVkU3RhdGU9QWgoMXxiLGMsdm9pZCAwLHZvaWQgMD09PWQ/bnVsbDpkKX1mdW5jdGlvbiBEaChhLGIsYyxkKXt2YXIgZT11aCgpO2Q9dm9pZCAwPT09ZD9udWxsOmQ7dmFyIGY9dm9pZCAwO2lmKG51bGwhPT1PKXt2YXIgZz1PLm1lbW9pemVkU3RhdGU7Zj1nLmRlc3Ryb3k7aWYobnVsbCE9PWQmJm5oKGQsZy5kZXBzKSl7QWgoYixjLGYsZCk7cmV0dXJufX1OLmVmZmVjdFRhZ3w9YTtlLm1lbW9pemVkU3RhdGU9QWgoMXxiLGMsZixkKX1mdW5jdGlvbiBFaChhLGIpe3JldHVybiBDaCg1MTYsNCxhLGIpfWZ1bmN0aW9uIEZoKGEsYil7cmV0dXJuIERoKDUxNiw0LGEsYil9ZnVuY3Rpb24gR2goYSxiKXtyZXR1cm4gRGgoNCwyLGEsYil9XG5mdW5jdGlvbiBIaChhLGIpe2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBiKXJldHVybiBhPWEoKSxiKGEpLGZ1bmN0aW9uKCl7YihudWxsKX07aWYobnVsbCE9PWImJnZvaWQgMCE9PWIpcmV0dXJuIGE9YSgpLGIuY3VycmVudD1hLGZ1bmN0aW9uKCl7Yi5jdXJyZW50PW51bGx9fWZ1bmN0aW9uIEloKGEsYixjKXtjPW51bGwhPT1jJiZ2b2lkIDAhPT1jP2MuY29uY2F0KFthXSk6bnVsbDtyZXR1cm4gRGgoNCwyLEhoLmJpbmQobnVsbCxiLGEpLGMpfWZ1bmN0aW9uIEpoKCl7fWZ1bmN0aW9uIEtoKGEsYil7dGgoKS5tZW1vaXplZFN0YXRlPVthLHZvaWQgMD09PWI/bnVsbDpiXTtyZXR1cm4gYX1mdW5jdGlvbiBMaChhLGIpe3ZhciBjPXVoKCk7Yj12b2lkIDA9PT1iP251bGw6Yjt2YXIgZD1jLm1lbW9pemVkU3RhdGU7aWYobnVsbCE9PWQmJm51bGwhPT1iJiZuaChiLGRbMV0pKXJldHVybiBkWzBdO2MubWVtb2l6ZWRTdGF0ZT1bYSxiXTtyZXR1cm4gYX1cbmZ1bmN0aW9uIE1oKGEsYil7dmFyIGM9dWgoKTtiPXZvaWQgMD09PWI/bnVsbDpiO3ZhciBkPWMubWVtb2l6ZWRTdGF0ZTtpZihudWxsIT09ZCYmbnVsbCE9PWImJm5oKGIsZFsxXSkpcmV0dXJuIGRbMF07YT1hKCk7Yy5tZW1vaXplZFN0YXRlPVthLGJdO3JldHVybiBhfWZ1bmN0aW9uIE5oKGEsYixjKXt2YXIgZD1hZygpO2NnKDk4PmQ/OTg6ZCxmdW5jdGlvbigpe2EoITApfSk7Y2coOTc8ZD85NzpkLGZ1bmN0aW9uKCl7dmFyIGQ9a2guc3VzcGVuc2U7a2guc3VzcGVuc2U9dm9pZCAwPT09Yj9udWxsOmI7dHJ5e2EoITEpLGMoKX1maW5hbGx5e2toLnN1c3BlbnNlPWR9fSl9XG5mdW5jdGlvbiB6aChhLGIsYyl7dmFyIGQ9R2coKSxlPURnLnN1c3BlbnNlO2Q9SGcoZCxhLGUpO2U9e2V4cGlyYXRpb25UaW1lOmQsc3VzcGVuc2VDb25maWc6ZSxhY3Rpb246YyxlYWdlclJlZHVjZXI6bnVsbCxlYWdlclN0YXRlOm51bGwsbmV4dDpudWxsfTt2YXIgZj1iLnBlbmRpbmc7bnVsbD09PWY/ZS5uZXh0PWU6KGUubmV4dD1mLm5leHQsZi5uZXh0PWUpO2IucGVuZGluZz1lO2Y9YS5hbHRlcm5hdGU7aWYoYT09PU58fG51bGwhPT1mJiZmPT09TiltaD0hMCxlLmV4cGlyYXRpb25UaW1lPWxoLE4uZXhwaXJhdGlvblRpbWU9bGg7ZWxzZXtpZigwPT09YS5leHBpcmF0aW9uVGltZSYmKG51bGw9PT1mfHwwPT09Zi5leHBpcmF0aW9uVGltZSkmJihmPWIubGFzdFJlbmRlcmVkUmVkdWNlcixudWxsIT09ZikpdHJ5e3ZhciBnPWIubGFzdFJlbmRlcmVkU3RhdGUsaD1mKGcsYyk7ZS5lYWdlclJlZHVjZXI9ZjtlLmVhZ2VyU3RhdGU9aDtpZigkZShoLGcpKXJldHVybn1jYXRjaChrKXt9ZmluYWxseXt9SWcoYSxcbmQpfX1cbnZhciBzaD17cmVhZENvbnRleHQ6c2csdXNlQ2FsbGJhY2s6USx1c2VDb250ZXh0OlEsdXNlRWZmZWN0OlEsdXNlSW1wZXJhdGl2ZUhhbmRsZTpRLHVzZUxheW91dEVmZmVjdDpRLHVzZU1lbW86USx1c2VSZWR1Y2VyOlEsdXNlUmVmOlEsdXNlU3RhdGU6USx1c2VEZWJ1Z1ZhbHVlOlEsdXNlUmVzcG9uZGVyOlEsdXNlRGVmZXJyZWRWYWx1ZTpRLHVzZVRyYW5zaXRpb246UX0scGg9e3JlYWRDb250ZXh0OnNnLHVzZUNhbGxiYWNrOktoLHVzZUNvbnRleHQ6c2csdXNlRWZmZWN0OkVoLHVzZUltcGVyYXRpdmVIYW5kbGU6ZnVuY3Rpb24oYSxiLGMpe2M9bnVsbCE9PWMmJnZvaWQgMCE9PWM/Yy5jb25jYXQoW2FdKTpudWxsO3JldHVybiBDaCg0LDIsSGguYmluZChudWxsLGIsYSksYyl9LHVzZUxheW91dEVmZmVjdDpmdW5jdGlvbihhLGIpe3JldHVybiBDaCg0LDIsYSxiKX0sdXNlTWVtbzpmdW5jdGlvbihhLGIpe3ZhciBjPXRoKCk7Yj12b2lkIDA9PT1iP251bGw6YjthPWEoKTtjLm1lbW9pemVkU3RhdGU9W2EsXG5iXTtyZXR1cm4gYX0sdXNlUmVkdWNlcjpmdW5jdGlvbihhLGIsYyl7dmFyIGQ9dGgoKTtiPXZvaWQgMCE9PWM/YyhiKTpiO2QubWVtb2l6ZWRTdGF0ZT1kLmJhc2VTdGF0ZT1iO2E9ZC5xdWV1ZT17cGVuZGluZzpudWxsLGRpc3BhdGNoOm51bGwsbGFzdFJlbmRlcmVkUmVkdWNlcjphLGxhc3RSZW5kZXJlZFN0YXRlOmJ9O2E9YS5kaXNwYXRjaD16aC5iaW5kKG51bGwsTixhKTtyZXR1cm5bZC5tZW1vaXplZFN0YXRlLGFdfSx1c2VSZWY6ZnVuY3Rpb24oYSl7dmFyIGI9dGgoKTthPXtjdXJyZW50OmF9O3JldHVybiBiLm1lbW9pemVkU3RhdGU9YX0sdXNlU3RhdGU6eWgsdXNlRGVidWdWYWx1ZTpKaCx1c2VSZXNwb25kZXI6aWgsdXNlRGVmZXJyZWRWYWx1ZTpmdW5jdGlvbihhLGIpe3ZhciBjPXloKGEpLGQ9Y1swXSxlPWNbMV07RWgoZnVuY3Rpb24oKXt2YXIgYz1raC5zdXNwZW5zZTtraC5zdXNwZW5zZT12b2lkIDA9PT1iP251bGw6Yjt0cnl7ZShhKX1maW5hbGx5e2toLnN1c3BlbnNlPVxuY319LFthLGJdKTtyZXR1cm4gZH0sdXNlVHJhbnNpdGlvbjpmdW5jdGlvbihhKXt2YXIgYj15aCghMSksYz1iWzBdO2I9YlsxXTtyZXR1cm5bS2goTmguYmluZChudWxsLGIsYSksW2IsYV0pLGNdfX0scWg9e3JlYWRDb250ZXh0OnNnLHVzZUNhbGxiYWNrOkxoLHVzZUNvbnRleHQ6c2csdXNlRWZmZWN0OkZoLHVzZUltcGVyYXRpdmVIYW5kbGU6SWgsdXNlTGF5b3V0RWZmZWN0OkdoLHVzZU1lbW86TWgsdXNlUmVkdWNlcjp3aCx1c2VSZWY6QmgsdXNlU3RhdGU6ZnVuY3Rpb24oKXtyZXR1cm4gd2godmgpfSx1c2VEZWJ1Z1ZhbHVlOkpoLHVzZVJlc3BvbmRlcjppaCx1c2VEZWZlcnJlZFZhbHVlOmZ1bmN0aW9uKGEsYil7dmFyIGM9d2godmgpLGQ9Y1swXSxlPWNbMV07RmgoZnVuY3Rpb24oKXt2YXIgYz1raC5zdXNwZW5zZTtraC5zdXNwZW5zZT12b2lkIDA9PT1iP251bGw6Yjt0cnl7ZShhKX1maW5hbGx5e2toLnN1c3BlbnNlPWN9fSxbYSxiXSk7cmV0dXJuIGR9LHVzZVRyYW5zaXRpb246ZnVuY3Rpb24oYSl7dmFyIGI9XG53aCh2aCksYz1iWzBdO2I9YlsxXTtyZXR1cm5bTGgoTmguYmluZChudWxsLGIsYSksW2IsYV0pLGNdfX0scmg9e3JlYWRDb250ZXh0OnNnLHVzZUNhbGxiYWNrOkxoLHVzZUNvbnRleHQ6c2csdXNlRWZmZWN0OkZoLHVzZUltcGVyYXRpdmVIYW5kbGU6SWgsdXNlTGF5b3V0RWZmZWN0OkdoLHVzZU1lbW86TWgsdXNlUmVkdWNlcjp4aCx1c2VSZWY6QmgsdXNlU3RhdGU6ZnVuY3Rpb24oKXtyZXR1cm4geGgodmgpfSx1c2VEZWJ1Z1ZhbHVlOkpoLHVzZVJlc3BvbmRlcjppaCx1c2VEZWZlcnJlZFZhbHVlOmZ1bmN0aW9uKGEsYil7dmFyIGM9eGgodmgpLGQ9Y1swXSxlPWNbMV07RmgoZnVuY3Rpb24oKXt2YXIgYz1raC5zdXNwZW5zZTtraC5zdXNwZW5zZT12b2lkIDA9PT1iP251bGw6Yjt0cnl7ZShhKX1maW5hbGx5e2toLnN1c3BlbnNlPWN9fSxbYSxiXSk7cmV0dXJuIGR9LHVzZVRyYW5zaXRpb246ZnVuY3Rpb24oYSl7dmFyIGI9eGgodmgpLGM9YlswXTtiPWJbMV07cmV0dXJuW0xoKE5oLmJpbmQobnVsbCxcbmIsYSksW2IsYV0pLGNdfX0sT2g9bnVsbCxQaD1udWxsLFFoPSExO2Z1bmN0aW9uIFJoKGEsYil7dmFyIGM9U2goNSxudWxsLG51bGwsMCk7Yy5lbGVtZW50VHlwZT1cIkRFTEVURURcIjtjLnR5cGU9XCJERUxFVEVEXCI7Yy5zdGF0ZU5vZGU9YjtjLnJldHVybj1hO2MuZWZmZWN0VGFnPTg7bnVsbCE9PWEubGFzdEVmZmVjdD8oYS5sYXN0RWZmZWN0Lm5leHRFZmZlY3Q9YyxhLmxhc3RFZmZlY3Q9Yyk6YS5maXJzdEVmZmVjdD1hLmxhc3RFZmZlY3Q9Y31cbmZ1bmN0aW9uIFRoKGEsYil7c3dpdGNoKGEudGFnKXtjYXNlIDU6dmFyIGM9YS50eXBlO2I9MSE9PWIubm9kZVR5cGV8fGMudG9Mb3dlckNhc2UoKSE9PWIubm9kZU5hbWUudG9Mb3dlckNhc2UoKT9udWxsOmI7cmV0dXJuIG51bGwhPT1iPyhhLnN0YXRlTm9kZT1iLCEwKTohMTtjYXNlIDY6cmV0dXJuIGI9XCJcIj09PWEucGVuZGluZ1Byb3BzfHwzIT09Yi5ub2RlVHlwZT9udWxsOmIsbnVsbCE9PWI/KGEuc3RhdGVOb2RlPWIsITApOiExO2Nhc2UgMTM6cmV0dXJuITE7ZGVmYXVsdDpyZXR1cm4hMX19XG5mdW5jdGlvbiBVaChhKXtpZihRaCl7dmFyIGI9UGg7aWYoYil7dmFyIGM9YjtpZighVGgoYSxiKSl7Yj1KZChjLm5leHRTaWJsaW5nKTtpZighYnx8IVRoKGEsYikpe2EuZWZmZWN0VGFnPWEuZWZmZWN0VGFnJi0xMDI1fDI7UWg9ITE7T2g9YTtyZXR1cm59UmgoT2gsYyl9T2g9YTtQaD1KZChiLmZpcnN0Q2hpbGQpfWVsc2UgYS5lZmZlY3RUYWc9YS5lZmZlY3RUYWcmLTEwMjV8MixRaD0hMSxPaD1hfX1mdW5jdGlvbiBWaChhKXtmb3IoYT1hLnJldHVybjtudWxsIT09YSYmNSE9PWEudGFnJiYzIT09YS50YWcmJjEzIT09YS50YWc7KWE9YS5yZXR1cm47T2g9YX1cbmZ1bmN0aW9uIFdoKGEpe2lmKGEhPT1PaClyZXR1cm4hMTtpZighUWgpcmV0dXJuIFZoKGEpLFFoPSEwLCExO3ZhciBiPWEudHlwZTtpZig1IT09YS50YWd8fFwiaGVhZFwiIT09YiYmXCJib2R5XCIhPT1iJiYhR2QoYixhLm1lbW9pemVkUHJvcHMpKWZvcihiPVBoO2I7KVJoKGEsYiksYj1KZChiLm5leHRTaWJsaW5nKTtWaChhKTtpZigxMz09PWEudGFnKXthPWEubWVtb2l6ZWRTdGF0ZTthPW51bGwhPT1hP2EuZGVoeWRyYXRlZDpudWxsO2lmKCFhKXRocm93IEVycm9yKHUoMzE3KSk7YTp7YT1hLm5leHRTaWJsaW5nO2ZvcihiPTA7YTspe2lmKDg9PT1hLm5vZGVUeXBlKXt2YXIgYz1hLmRhdGE7aWYoYz09PUFkKXtpZigwPT09Yil7UGg9SmQoYS5uZXh0U2libGluZyk7YnJlYWsgYX1iLS19ZWxzZSBjIT09emQmJmMhPT1DZCYmYyE9PUJkfHxiKyt9YT1hLm5leHRTaWJsaW5nfVBoPW51bGx9fWVsc2UgUGg9T2g/SmQoYS5zdGF0ZU5vZGUubmV4dFNpYmxpbmcpOm51bGw7cmV0dXJuITB9XG5mdW5jdGlvbiBYaCgpe1BoPU9oPW51bGw7UWg9ITF9dmFyIFloPVdhLlJlYWN0Q3VycmVudE93bmVyLHJnPSExO2Z1bmN0aW9uIFIoYSxiLGMsZCl7Yi5jaGlsZD1udWxsPT09YT9ZZyhiLG51bGwsYyxkKTpYZyhiLGEuY2hpbGQsYyxkKX1mdW5jdGlvbiBaaChhLGIsYyxkLGUpe2M9Yy5yZW5kZXI7dmFyIGY9Yi5yZWY7cWcoYixlKTtkPW9oKGEsYixjLGQsZixlKTtpZihudWxsIT09YSYmIXJnKXJldHVybiBiLnVwZGF0ZVF1ZXVlPWEudXBkYXRlUXVldWUsYi5lZmZlY3RUYWcmPS01MTcsYS5leHBpcmF0aW9uVGltZTw9ZSYmKGEuZXhwaXJhdGlvblRpbWU9MCksJGgoYSxiLGUpO2IuZWZmZWN0VGFnfD0xO1IoYSxiLGQsZSk7cmV0dXJuIGIuY2hpbGR9XG5mdW5jdGlvbiBhaShhLGIsYyxkLGUsZil7aWYobnVsbD09PWEpe3ZhciBnPWMudHlwZTtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZyYmIWJpKGcpJiZ2b2lkIDA9PT1nLmRlZmF1bHRQcm9wcyYmbnVsbD09PWMuY29tcGFyZSYmdm9pZCAwPT09Yy5kZWZhdWx0UHJvcHMpcmV0dXJuIGIudGFnPTE1LGIudHlwZT1nLGNpKGEsYixnLGQsZSxmKTthPVVnKGMudHlwZSxudWxsLGQsbnVsbCxiLm1vZGUsZik7YS5yZWY9Yi5yZWY7YS5yZXR1cm49YjtyZXR1cm4gYi5jaGlsZD1hfWc9YS5jaGlsZDtpZihlPGYmJihlPWcubWVtb2l6ZWRQcm9wcyxjPWMuY29tcGFyZSxjPW51bGwhPT1jP2M6YmYsYyhlLGQpJiZhLnJlZj09PWIucmVmKSlyZXR1cm4gJGgoYSxiLGYpO2IuZWZmZWN0VGFnfD0xO2E9U2coZyxkKTthLnJlZj1iLnJlZjthLnJldHVybj1iO3JldHVybiBiLmNoaWxkPWF9XG5mdW5jdGlvbiBjaShhLGIsYyxkLGUsZil7cmV0dXJuIG51bGwhPT1hJiZiZihhLm1lbW9pemVkUHJvcHMsZCkmJmEucmVmPT09Yi5yZWYmJihyZz0hMSxlPGYpPyhiLmV4cGlyYXRpb25UaW1lPWEuZXhwaXJhdGlvblRpbWUsJGgoYSxiLGYpKTpkaShhLGIsYyxkLGYpfWZ1bmN0aW9uIGVpKGEsYil7dmFyIGM9Yi5yZWY7aWYobnVsbD09PWEmJm51bGwhPT1jfHxudWxsIT09YSYmYS5yZWYhPT1jKWIuZWZmZWN0VGFnfD0xMjh9ZnVuY3Rpb24gZGkoYSxiLGMsZCxlKXt2YXIgZj1MKGMpP0JmOkouY3VycmVudDtmPUNmKGIsZik7cWcoYixlKTtjPW9oKGEsYixjLGQsZixlKTtpZihudWxsIT09YSYmIXJnKXJldHVybiBiLnVwZGF0ZVF1ZXVlPWEudXBkYXRlUXVldWUsYi5lZmZlY3RUYWcmPS01MTcsYS5leHBpcmF0aW9uVGltZTw9ZSYmKGEuZXhwaXJhdGlvblRpbWU9MCksJGgoYSxiLGUpO2IuZWZmZWN0VGFnfD0xO1IoYSxiLGMsZSk7cmV0dXJuIGIuY2hpbGR9XG5mdW5jdGlvbiBmaShhLGIsYyxkLGUpe2lmKEwoYykpe3ZhciBmPSEwO0dmKGIpfWVsc2UgZj0hMTtxZyhiLGUpO2lmKG51bGw9PT1iLnN0YXRlTm9kZSludWxsIT09YSYmKGEuYWx0ZXJuYXRlPW51bGwsYi5hbHRlcm5hdGU9bnVsbCxiLmVmZmVjdFRhZ3w9MiksTGcoYixjLGQpLE5nKGIsYyxkLGUpLGQ9ITA7ZWxzZSBpZihudWxsPT09YSl7dmFyIGc9Yi5zdGF0ZU5vZGUsaD1iLm1lbW9pemVkUHJvcHM7Zy5wcm9wcz1oO3ZhciBrPWcuY29udGV4dCxsPWMuY29udGV4dFR5cGU7XCJvYmplY3RcIj09PXR5cGVvZiBsJiZudWxsIT09bD9sPXNnKGwpOihsPUwoYyk/QmY6Si5jdXJyZW50LGw9Q2YoYixsKSk7dmFyIG09Yy5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMscD1cImZ1bmN0aW9uXCI9PT10eXBlb2YgbXx8XCJmdW5jdGlvblwiPT09dHlwZW9mIGcuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGU7cHx8XCJmdW5jdGlvblwiIT09dHlwZW9mIGcuVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMmJlxuXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wc3x8KGghPT1kfHxrIT09bCkmJk1nKGIsZyxkLGwpO3RnPSExO3ZhciB4PWIubWVtb2l6ZWRTdGF0ZTtnLnN0YXRlPXg7emcoYixkLGcsZSk7az1iLm1lbW9pemVkU3RhdGU7aCE9PWR8fHghPT1rfHxLLmN1cnJlbnR8fHRnPyhcImZ1bmN0aW9uXCI9PT10eXBlb2YgbSYmKEZnKGIsYyxtLGQpLGs9Yi5tZW1vaXplZFN0YXRlKSwoaD10Z3x8S2coYixjLGgsZCx4LGssbCkpPyhwfHxcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50JiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5jb21wb25lbnRXaWxsTW91bnR8fChcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5jb21wb25lbnRXaWxsTW91bnQmJmcuY29tcG9uZW50V2lsbE1vdW50KCksXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCYmZy5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50KCkpLFwiZnVuY3Rpb25cIj09PVxudHlwZW9mIGcuY29tcG9uZW50RGlkTW91bnQmJihiLmVmZmVjdFRhZ3w9NCkpOihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5jb21wb25lbnREaWRNb3VudCYmKGIuZWZmZWN0VGFnfD00KSxiLm1lbW9pemVkUHJvcHM9ZCxiLm1lbW9pemVkU3RhdGU9ayksZy5wcm9wcz1kLGcuc3RhdGU9ayxnLmNvbnRleHQ9bCxkPWgpOihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5jb21wb25lbnREaWRNb3VudCYmKGIuZWZmZWN0VGFnfD00KSxkPSExKX1lbHNlIGc9Yi5zdGF0ZU5vZGUsdmcoYSxiKSxoPWIubWVtb2l6ZWRQcm9wcyxnLnByb3BzPWIudHlwZT09PWIuZWxlbWVudFR5cGU/aDppZyhiLnR5cGUsaCksaz1nLmNvbnRleHQsbD1jLmNvbnRleHRUeXBlLFwib2JqZWN0XCI9PT10eXBlb2YgbCYmbnVsbCE9PWw/bD1zZyhsKToobD1MKGMpP0JmOkouY3VycmVudCxsPUNmKGIsbCkpLG09Yy5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMsKHA9XCJmdW5jdGlvblwiPT09dHlwZW9mIG18fFwiZnVuY3Rpb25cIj09PVxudHlwZW9mIGcuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUpfHxcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5VTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wc3x8KGghPT1kfHxrIT09bCkmJk1nKGIsZyxkLGwpLHRnPSExLGs9Yi5tZW1vaXplZFN0YXRlLGcuc3RhdGU9ayx6ZyhiLGQsZyxlKSx4PWIubWVtb2l6ZWRTdGF0ZSxoIT09ZHx8ayE9PXh8fEsuY3VycmVudHx8dGc/KFwiZnVuY3Rpb25cIj09PXR5cGVvZiBtJiYoRmcoYixjLG0sZCkseD1iLm1lbW9pemVkU3RhdGUpLChtPXRnfHxLZyhiLGMsaCxkLGsseCxsKSk/KHB8fFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLlVOU0FGRV9jb21wb25lbnRXaWxsVXBkYXRlJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5jb21wb25lbnRXaWxsVXBkYXRlfHwoXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuY29tcG9uZW50V2lsbFVwZGF0ZSYmZy5jb21wb25lbnRXaWxsVXBkYXRlKGQsXG54LGwpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLlVOU0FGRV9jb21wb25lbnRXaWxsVXBkYXRlJiZnLlVOU0FGRV9jb21wb25lbnRXaWxsVXBkYXRlKGQseCxsKSksXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuY29tcG9uZW50RGlkVXBkYXRlJiYoYi5lZmZlY3RUYWd8PTQpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlJiYoYi5lZmZlY3RUYWd8PTI1NikpOihcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5jb21wb25lbnREaWRVcGRhdGV8fGg9PT1hLm1lbW9pemVkUHJvcHMmJms9PT1hLm1lbW9pemVkU3RhdGV8fChiLmVmZmVjdFRhZ3w9NCksXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGV8fGg9PT1hLm1lbW9pemVkUHJvcHMmJms9PT1hLm1lbW9pemVkU3RhdGV8fChiLmVmZmVjdFRhZ3w9MjU2KSxiLm1lbW9pemVkUHJvcHM9ZCxiLm1lbW9pemVkU3RhdGU9eCksZy5wcm9wcz1kLGcuc3RhdGU9eCxnLmNvbnRleHQ9bCxkPW0pOlxuKFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmNvbXBvbmVudERpZFVwZGF0ZXx8aD09PWEubWVtb2l6ZWRQcm9wcyYmaz09PWEubWVtb2l6ZWRTdGF0ZXx8KGIuZWZmZWN0VGFnfD00KSxcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZXx8aD09PWEubWVtb2l6ZWRQcm9wcyYmaz09PWEubWVtb2l6ZWRTdGF0ZXx8KGIuZWZmZWN0VGFnfD0yNTYpLGQ9ITEpO3JldHVybiBnaShhLGIsYyxkLGYsZSl9XG5mdW5jdGlvbiBnaShhLGIsYyxkLGUsZil7ZWkoYSxiKTt2YXIgZz0wIT09KGIuZWZmZWN0VGFnJjY0KTtpZighZCYmIWcpcmV0dXJuIGUmJkhmKGIsYywhMSksJGgoYSxiLGYpO2Q9Yi5zdGF0ZU5vZGU7WWguY3VycmVudD1iO3ZhciBoPWcmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBjLmdldERlcml2ZWRTdGF0ZUZyb21FcnJvcj9udWxsOmQucmVuZGVyKCk7Yi5lZmZlY3RUYWd8PTE7bnVsbCE9PWEmJmc/KGIuY2hpbGQ9WGcoYixhLmNoaWxkLG51bGwsZiksYi5jaGlsZD1YZyhiLG51bGwsaCxmKSk6UihhLGIsaCxmKTtiLm1lbW9pemVkU3RhdGU9ZC5zdGF0ZTtlJiZIZihiLGMsITApO3JldHVybiBiLmNoaWxkfWZ1bmN0aW9uIGhpKGEpe3ZhciBiPWEuc3RhdGVOb2RlO2IucGVuZGluZ0NvbnRleHQ/RWYoYSxiLnBlbmRpbmdDb250ZXh0LGIucGVuZGluZ0NvbnRleHQhPT1iLmNvbnRleHQpOmIuY29udGV4dCYmRWYoYSxiLmNvbnRleHQsITEpO2RoKGEsYi5jb250YWluZXJJbmZvKX1cbnZhciBpaT17ZGVoeWRyYXRlZDpudWxsLHJldHJ5VGltZTowfTtcbmZ1bmN0aW9uIGppKGEsYixjKXt2YXIgZD1iLm1vZGUsZT1iLnBlbmRpbmdQcm9wcyxmPU0uY3VycmVudCxnPSExLGg7KGg9MCE9PShiLmVmZmVjdFRhZyY2NCkpfHwoaD0wIT09KGYmMikmJihudWxsPT09YXx8bnVsbCE9PWEubWVtb2l6ZWRTdGF0ZSkpO2g/KGc9ITAsYi5lZmZlY3RUYWcmPS02NSk6bnVsbCE9PWEmJm51bGw9PT1hLm1lbW9pemVkU3RhdGV8fHZvaWQgMD09PWUuZmFsbGJhY2t8fCEwPT09ZS51bnN0YWJsZV9hdm9pZFRoaXNGYWxsYmFja3x8KGZ8PTEpO0koTSxmJjEpO2lmKG51bGw9PT1hKXt2b2lkIDAhPT1lLmZhbGxiYWNrJiZVaChiKTtpZihnKXtnPWUuZmFsbGJhY2s7ZT1XZyhudWxsLGQsMCxudWxsKTtlLnJldHVybj1iO2lmKDA9PT0oYi5tb2RlJjIpKWZvcihhPW51bGwhPT1iLm1lbW9pemVkU3RhdGU/Yi5jaGlsZC5jaGlsZDpiLmNoaWxkLGUuY2hpbGQ9YTtudWxsIT09YTspYS5yZXR1cm49ZSxhPWEuc2libGluZztjPVdnKGcsZCxjLG51bGwpO2MucmV0dXJuPVxuYjtlLnNpYmxpbmc9YztiLm1lbW9pemVkU3RhdGU9aWk7Yi5jaGlsZD1lO3JldHVybiBjfWQ9ZS5jaGlsZHJlbjtiLm1lbW9pemVkU3RhdGU9bnVsbDtyZXR1cm4gYi5jaGlsZD1ZZyhiLG51bGwsZCxjKX1pZihudWxsIT09YS5tZW1vaXplZFN0YXRlKXthPWEuY2hpbGQ7ZD1hLnNpYmxpbmc7aWYoZyl7ZT1lLmZhbGxiYWNrO2M9U2coYSxhLnBlbmRpbmdQcm9wcyk7Yy5yZXR1cm49YjtpZigwPT09KGIubW9kZSYyKSYmKGc9bnVsbCE9PWIubWVtb2l6ZWRTdGF0ZT9iLmNoaWxkLmNoaWxkOmIuY2hpbGQsZyE9PWEuY2hpbGQpKWZvcihjLmNoaWxkPWc7bnVsbCE9PWc7KWcucmV0dXJuPWMsZz1nLnNpYmxpbmc7ZD1TZyhkLGUpO2QucmV0dXJuPWI7Yy5zaWJsaW5nPWQ7Yy5jaGlsZEV4cGlyYXRpb25UaW1lPTA7Yi5tZW1vaXplZFN0YXRlPWlpO2IuY2hpbGQ9YztyZXR1cm4gZH1jPVhnKGIsYS5jaGlsZCxlLmNoaWxkcmVuLGMpO2IubWVtb2l6ZWRTdGF0ZT1udWxsO3JldHVybiBiLmNoaWxkPVxuY31hPWEuY2hpbGQ7aWYoZyl7Zz1lLmZhbGxiYWNrO2U9V2cobnVsbCxkLDAsbnVsbCk7ZS5yZXR1cm49YjtlLmNoaWxkPWE7bnVsbCE9PWEmJihhLnJldHVybj1lKTtpZigwPT09KGIubW9kZSYyKSlmb3IoYT1udWxsIT09Yi5tZW1vaXplZFN0YXRlP2IuY2hpbGQuY2hpbGQ6Yi5jaGlsZCxlLmNoaWxkPWE7bnVsbCE9PWE7KWEucmV0dXJuPWUsYT1hLnNpYmxpbmc7Yz1XZyhnLGQsYyxudWxsKTtjLnJldHVybj1iO2Uuc2libGluZz1jO2MuZWZmZWN0VGFnfD0yO2UuY2hpbGRFeHBpcmF0aW9uVGltZT0wO2IubWVtb2l6ZWRTdGF0ZT1paTtiLmNoaWxkPWU7cmV0dXJuIGN9Yi5tZW1vaXplZFN0YXRlPW51bGw7cmV0dXJuIGIuY2hpbGQ9WGcoYixhLGUuY2hpbGRyZW4sYyl9XG5mdW5jdGlvbiBraShhLGIpe2EuZXhwaXJhdGlvblRpbWU8YiYmKGEuZXhwaXJhdGlvblRpbWU9Yik7dmFyIGM9YS5hbHRlcm5hdGU7bnVsbCE9PWMmJmMuZXhwaXJhdGlvblRpbWU8YiYmKGMuZXhwaXJhdGlvblRpbWU9Yik7cGcoYS5yZXR1cm4sYil9ZnVuY3Rpb24gbGkoYSxiLGMsZCxlLGYpe3ZhciBnPWEubWVtb2l6ZWRTdGF0ZTtudWxsPT09Zz9hLm1lbW9pemVkU3RhdGU9e2lzQmFja3dhcmRzOmIscmVuZGVyaW5nOm51bGwscmVuZGVyaW5nU3RhcnRUaW1lOjAsbGFzdDpkLHRhaWw6Yyx0YWlsRXhwaXJhdGlvbjowLHRhaWxNb2RlOmUsbGFzdEVmZmVjdDpmfTooZy5pc0JhY2t3YXJkcz1iLGcucmVuZGVyaW5nPW51bGwsZy5yZW5kZXJpbmdTdGFydFRpbWU9MCxnLmxhc3Q9ZCxnLnRhaWw9YyxnLnRhaWxFeHBpcmF0aW9uPTAsZy50YWlsTW9kZT1lLGcubGFzdEVmZmVjdD1mKX1cbmZ1bmN0aW9uIG1pKGEsYixjKXt2YXIgZD1iLnBlbmRpbmdQcm9wcyxlPWQucmV2ZWFsT3JkZXIsZj1kLnRhaWw7UihhLGIsZC5jaGlsZHJlbixjKTtkPU0uY3VycmVudDtpZigwIT09KGQmMikpZD1kJjF8MixiLmVmZmVjdFRhZ3w9NjQ7ZWxzZXtpZihudWxsIT09YSYmMCE9PShhLmVmZmVjdFRhZyY2NCkpYTpmb3IoYT1iLmNoaWxkO251bGwhPT1hOyl7aWYoMTM9PT1hLnRhZyludWxsIT09YS5tZW1vaXplZFN0YXRlJiZraShhLGMpO2Vsc2UgaWYoMTk9PT1hLnRhZylraShhLGMpO2Vsc2UgaWYobnVsbCE9PWEuY2hpbGQpe2EuY2hpbGQucmV0dXJuPWE7YT1hLmNoaWxkO2NvbnRpbnVlfWlmKGE9PT1iKWJyZWFrIGE7Zm9yKDtudWxsPT09YS5zaWJsaW5nOyl7aWYobnVsbD09PWEucmV0dXJufHxhLnJldHVybj09PWIpYnJlYWsgYTthPWEucmV0dXJufWEuc2libGluZy5yZXR1cm49YS5yZXR1cm47YT1hLnNpYmxpbmd9ZCY9MX1JKE0sZCk7aWYoMD09PShiLm1vZGUmMikpYi5tZW1vaXplZFN0YXRlPVxubnVsbDtlbHNlIHN3aXRjaChlKXtjYXNlIFwiZm9yd2FyZHNcIjpjPWIuY2hpbGQ7Zm9yKGU9bnVsbDtudWxsIT09YzspYT1jLmFsdGVybmF0ZSxudWxsIT09YSYmbnVsbD09PWhoKGEpJiYoZT1jKSxjPWMuc2libGluZztjPWU7bnVsbD09PWM/KGU9Yi5jaGlsZCxiLmNoaWxkPW51bGwpOihlPWMuc2libGluZyxjLnNpYmxpbmc9bnVsbCk7bGkoYiwhMSxlLGMsZixiLmxhc3RFZmZlY3QpO2JyZWFrO2Nhc2UgXCJiYWNrd2FyZHNcIjpjPW51bGw7ZT1iLmNoaWxkO2ZvcihiLmNoaWxkPW51bGw7bnVsbCE9PWU7KXthPWUuYWx0ZXJuYXRlO2lmKG51bGwhPT1hJiZudWxsPT09aGgoYSkpe2IuY2hpbGQ9ZTticmVha31hPWUuc2libGluZztlLnNpYmxpbmc9YztjPWU7ZT1hfWxpKGIsITAsYyxudWxsLGYsYi5sYXN0RWZmZWN0KTticmVhaztjYXNlIFwidG9nZXRoZXJcIjpsaShiLCExLG51bGwsbnVsbCx2b2lkIDAsYi5sYXN0RWZmZWN0KTticmVhaztkZWZhdWx0OmIubWVtb2l6ZWRTdGF0ZT1udWxsfXJldHVybiBiLmNoaWxkfVxuZnVuY3Rpb24gJGgoYSxiLGMpe251bGwhPT1hJiYoYi5kZXBlbmRlbmNpZXM9YS5kZXBlbmRlbmNpZXMpO3ZhciBkPWIuZXhwaXJhdGlvblRpbWU7MCE9PWQmJkJnKGQpO2lmKGIuY2hpbGRFeHBpcmF0aW9uVGltZTxjKXJldHVybiBudWxsO2lmKG51bGwhPT1hJiZiLmNoaWxkIT09YS5jaGlsZCl0aHJvdyBFcnJvcih1KDE1MykpO2lmKG51bGwhPT1iLmNoaWxkKXthPWIuY2hpbGQ7Yz1TZyhhLGEucGVuZGluZ1Byb3BzKTtiLmNoaWxkPWM7Zm9yKGMucmV0dXJuPWI7bnVsbCE9PWEuc2libGluZzspYT1hLnNpYmxpbmcsYz1jLnNpYmxpbmc9U2coYSxhLnBlbmRpbmdQcm9wcyksYy5yZXR1cm49YjtjLnNpYmxpbmc9bnVsbH1yZXR1cm4gYi5jaGlsZH12YXIgbmksb2kscGkscWk7XG5uaT1mdW5jdGlvbihhLGIpe2Zvcih2YXIgYz1iLmNoaWxkO251bGwhPT1jOyl7aWYoNT09PWMudGFnfHw2PT09Yy50YWcpYS5hcHBlbmRDaGlsZChjLnN0YXRlTm9kZSk7ZWxzZSBpZig0IT09Yy50YWcmJm51bGwhPT1jLmNoaWxkKXtjLmNoaWxkLnJldHVybj1jO2M9Yy5jaGlsZDtjb250aW51ZX1pZihjPT09YilicmVhaztmb3IoO251bGw9PT1jLnNpYmxpbmc7KXtpZihudWxsPT09Yy5yZXR1cm58fGMucmV0dXJuPT09YilyZXR1cm47Yz1jLnJldHVybn1jLnNpYmxpbmcucmV0dXJuPWMucmV0dXJuO2M9Yy5zaWJsaW5nfX07b2k9ZnVuY3Rpb24oKXt9O1xucGk9ZnVuY3Rpb24oYSxiLGMsZCxlKXt2YXIgZj1hLm1lbW9pemVkUHJvcHM7aWYoZiE9PWQpe3ZhciBnPWIuc3RhdGVOb2RlO2NoKCRnLmN1cnJlbnQpO2E9bnVsbDtzd2l0Y2goYyl7Y2FzZSBcImlucHV0XCI6Zj16YihnLGYpO2Q9emIoZyxkKTthPVtdO2JyZWFrO2Nhc2UgXCJvcHRpb25cIjpmPUdiKGcsZik7ZD1HYihnLGQpO2E9W107YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmY9bih7fSxmLHt2YWx1ZTp2b2lkIDB9KTtkPW4oe30sZCx7dmFsdWU6dm9pZCAwfSk7YT1bXTticmVhaztjYXNlIFwidGV4dGFyZWFcIjpmPUliKGcsZik7ZD1JYihnLGQpO2E9W107YnJlYWs7ZGVmYXVsdDpcImZ1bmN0aW9uXCIhPT10eXBlb2YgZi5vbkNsaWNrJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgZC5vbkNsaWNrJiYoZy5vbmNsaWNrPXNkKX1vZChjLGQpO3ZhciBoLGs7Yz1udWxsO2ZvcihoIGluIGYpaWYoIWQuaGFzT3duUHJvcGVydHkoaCkmJmYuaGFzT3duUHJvcGVydHkoaCkmJm51bGwhPWZbaF0paWYoXCJzdHlsZVwiPT09XG5oKWZvcihrIGluIGc9ZltoXSxnKWcuaGFzT3duUHJvcGVydHkoaykmJihjfHwoYz17fSksY1trXT1cIlwiKTtlbHNlXCJkYW5nZXJvdXNseVNldElubmVySFRNTFwiIT09aCYmXCJjaGlsZHJlblwiIT09aCYmXCJzdXBwcmVzc0NvbnRlbnRFZGl0YWJsZVdhcm5pbmdcIiE9PWgmJlwic3VwcHJlc3NIeWRyYXRpb25XYXJuaW5nXCIhPT1oJiZcImF1dG9Gb2N1c1wiIT09aCYmKHZhLmhhc093blByb3BlcnR5KGgpP2F8fChhPVtdKTooYT1hfHxbXSkucHVzaChoLG51bGwpKTtmb3IoaCBpbiBkKXt2YXIgbD1kW2hdO2c9bnVsbCE9Zj9mW2hdOnZvaWQgMDtpZihkLmhhc093blByb3BlcnR5KGgpJiZsIT09ZyYmKG51bGwhPWx8fG51bGwhPWcpKWlmKFwic3R5bGVcIj09PWgpaWYoZyl7Zm9yKGsgaW4gZykhZy5oYXNPd25Qcm9wZXJ0eShrKXx8bCYmbC5oYXNPd25Qcm9wZXJ0eShrKXx8KGN8fChjPXt9KSxjW2tdPVwiXCIpO2ZvcihrIGluIGwpbC5oYXNPd25Qcm9wZXJ0eShrKSYmZ1trXSE9PWxba10mJihjfHwoYz17fSksXG5jW2tdPWxba10pfWVsc2UgY3x8KGF8fChhPVtdKSxhLnB1c2goaCxjKSksYz1sO2Vsc2VcImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MXCI9PT1oPyhsPWw/bC5fX2h0bWw6dm9pZCAwLGc9Zz9nLl9faHRtbDp2b2lkIDAsbnVsbCE9bCYmZyE9PWwmJihhPWF8fFtdKS5wdXNoKGgsbCkpOlwiY2hpbGRyZW5cIj09PWg/Zz09PWx8fFwic3RyaW5nXCIhPT10eXBlb2YgbCYmXCJudW1iZXJcIiE9PXR5cGVvZiBsfHwoYT1hfHxbXSkucHVzaChoLFwiXCIrbCk6XCJzdXBwcmVzc0NvbnRlbnRFZGl0YWJsZVdhcm5pbmdcIiE9PWgmJlwic3VwcHJlc3NIeWRyYXRpb25XYXJuaW5nXCIhPT1oJiYodmEuaGFzT3duUHJvcGVydHkoaCk/KG51bGwhPWwmJnJkKGUsaCksYXx8Zz09PWx8fChhPVtdKSk6KGE9YXx8W10pLnB1c2goaCxsKSl9YyYmKGE9YXx8W10pLnB1c2goXCJzdHlsZVwiLGMpO2U9YTtpZihiLnVwZGF0ZVF1ZXVlPWUpYi5lZmZlY3RUYWd8PTR9fTtcbnFpPWZ1bmN0aW9uKGEsYixjLGQpe2MhPT1kJiYoYi5lZmZlY3RUYWd8PTQpfTtmdW5jdGlvbiByaShhLGIpe3N3aXRjaChhLnRhaWxNb2RlKXtjYXNlIFwiaGlkZGVuXCI6Yj1hLnRhaWw7Zm9yKHZhciBjPW51bGw7bnVsbCE9PWI7KW51bGwhPT1iLmFsdGVybmF0ZSYmKGM9YiksYj1iLnNpYmxpbmc7bnVsbD09PWM/YS50YWlsPW51bGw6Yy5zaWJsaW5nPW51bGw7YnJlYWs7Y2FzZSBcImNvbGxhcHNlZFwiOmM9YS50YWlsO2Zvcih2YXIgZD1udWxsO251bGwhPT1jOyludWxsIT09Yy5hbHRlcm5hdGUmJihkPWMpLGM9Yy5zaWJsaW5nO251bGw9PT1kP2J8fG51bGw9PT1hLnRhaWw/YS50YWlsPW51bGw6YS50YWlsLnNpYmxpbmc9bnVsbDpkLnNpYmxpbmc9bnVsbH19XG5mdW5jdGlvbiBzaShhLGIsYyl7dmFyIGQ9Yi5wZW5kaW5nUHJvcHM7c3dpdGNoKGIudGFnKXtjYXNlIDI6Y2FzZSAxNjpjYXNlIDE1OmNhc2UgMDpjYXNlIDExOmNhc2UgNzpjYXNlIDg6Y2FzZSAxMjpjYXNlIDk6Y2FzZSAxNDpyZXR1cm4gbnVsbDtjYXNlIDE6cmV0dXJuIEwoYi50eXBlKSYmRGYoKSxudWxsO2Nhc2UgMzpyZXR1cm4gZWgoKSxIKEspLEgoSiksYz1iLnN0YXRlTm9kZSxjLnBlbmRpbmdDb250ZXh0JiYoYy5jb250ZXh0PWMucGVuZGluZ0NvbnRleHQsYy5wZW5kaW5nQ29udGV4dD1udWxsKSxudWxsIT09YSYmbnVsbCE9PWEuY2hpbGR8fCFXaChiKXx8KGIuZWZmZWN0VGFnfD00KSxvaShiKSxudWxsO2Nhc2UgNTpnaChiKTtjPWNoKGJoLmN1cnJlbnQpO3ZhciBlPWIudHlwZTtpZihudWxsIT09YSYmbnVsbCE9Yi5zdGF0ZU5vZGUpcGkoYSxiLGUsZCxjKSxhLnJlZiE9PWIucmVmJiYoYi5lZmZlY3RUYWd8PTEyOCk7ZWxzZXtpZighZCl7aWYobnVsbD09PWIuc3RhdGVOb2RlKXRocm93IEVycm9yKHUoMTY2KSk7XG5yZXR1cm4gbnVsbH1hPWNoKCRnLmN1cnJlbnQpO2lmKFdoKGIpKXtkPWIuc3RhdGVOb2RlO2U9Yi50eXBlO3ZhciBmPWIubWVtb2l6ZWRQcm9wcztkW01kXT1iO2RbTmRdPWY7c3dpdGNoKGUpe2Nhc2UgXCJpZnJhbWVcIjpjYXNlIFwib2JqZWN0XCI6Y2FzZSBcImVtYmVkXCI6RihcImxvYWRcIixkKTticmVhaztjYXNlIFwidmlkZW9cIjpjYXNlIFwiYXVkaW9cIjpmb3IoYT0wO2E8YWMubGVuZ3RoO2ErKylGKGFjW2FdLGQpO2JyZWFrO2Nhc2UgXCJzb3VyY2VcIjpGKFwiZXJyb3JcIixkKTticmVhaztjYXNlIFwiaW1nXCI6Y2FzZSBcImltYWdlXCI6Y2FzZSBcImxpbmtcIjpGKFwiZXJyb3JcIixkKTtGKFwibG9hZFwiLGQpO2JyZWFrO2Nhc2UgXCJmb3JtXCI6RihcInJlc2V0XCIsZCk7RihcInN1Ym1pdFwiLGQpO2JyZWFrO2Nhc2UgXCJkZXRhaWxzXCI6RihcInRvZ2dsZVwiLGQpO2JyZWFrO2Nhc2UgXCJpbnB1dFwiOkFiKGQsZik7RihcImludmFsaWRcIixkKTtyZChjLFwib25DaGFuZ2VcIik7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmQuX3dyYXBwZXJTdGF0ZT1cbnt3YXNNdWx0aXBsZTohIWYubXVsdGlwbGV9O0YoXCJpbnZhbGlkXCIsZCk7cmQoYyxcIm9uQ2hhbmdlXCIpO2JyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOkpiKGQsZiksRihcImludmFsaWRcIixkKSxyZChjLFwib25DaGFuZ2VcIil9b2QoZSxmKTthPW51bGw7Zm9yKHZhciBnIGluIGYpaWYoZi5oYXNPd25Qcm9wZXJ0eShnKSl7dmFyIGg9ZltnXTtcImNoaWxkcmVuXCI9PT1nP1wic3RyaW5nXCI9PT10eXBlb2YgaD9kLnRleHRDb250ZW50IT09aCYmKGE9W1wiY2hpbGRyZW5cIixoXSk6XCJudW1iZXJcIj09PXR5cGVvZiBoJiZkLnRleHRDb250ZW50IT09XCJcIitoJiYoYT1bXCJjaGlsZHJlblwiLFwiXCIraF0pOnZhLmhhc093blByb3BlcnR5KGcpJiZudWxsIT1oJiZyZChjLGcpfXN3aXRjaChlKXtjYXNlIFwiaW5wdXRcIjp4YihkKTtFYihkLGYsITApO2JyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOnhiKGQpO0xiKGQpO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjpjYXNlIFwib3B0aW9uXCI6YnJlYWs7ZGVmYXVsdDpcImZ1bmN0aW9uXCI9PT10eXBlb2YgZi5vbkNsaWNrJiZcbihkLm9uY2xpY2s9c2QpfWM9YTtiLnVwZGF0ZVF1ZXVlPWM7bnVsbCE9PWMmJihiLmVmZmVjdFRhZ3w9NCl9ZWxzZXtnPTk9PT1jLm5vZGVUeXBlP2M6Yy5vd25lckRvY3VtZW50O2E9PT1xZCYmKGE9TmIoZSkpO2E9PT1xZD9cInNjcmlwdFwiPT09ZT8oYT1nLmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiksYS5pbm5lckhUTUw9XCI8c2NyaXB0PlxceDNjL3NjcmlwdD5cIixhPWEucmVtb3ZlQ2hpbGQoYS5maXJzdENoaWxkKSk6XCJzdHJpbmdcIj09PXR5cGVvZiBkLmlzP2E9Zy5jcmVhdGVFbGVtZW50KGUse2lzOmQuaXN9KTooYT1nLmNyZWF0ZUVsZW1lbnQoZSksXCJzZWxlY3RcIj09PWUmJihnPWEsZC5tdWx0aXBsZT9nLm11bHRpcGxlPSEwOmQuc2l6ZSYmKGcuc2l6ZT1kLnNpemUpKSk6YT1nLmNyZWF0ZUVsZW1lbnROUyhhLGUpO2FbTWRdPWI7YVtOZF09ZDtuaShhLGIsITEsITEpO2Iuc3RhdGVOb2RlPWE7Zz1wZChlLGQpO3N3aXRjaChlKXtjYXNlIFwiaWZyYW1lXCI6Y2FzZSBcIm9iamVjdFwiOmNhc2UgXCJlbWJlZFwiOkYoXCJsb2FkXCIsXG5hKTtoPWQ7YnJlYWs7Y2FzZSBcInZpZGVvXCI6Y2FzZSBcImF1ZGlvXCI6Zm9yKGg9MDtoPGFjLmxlbmd0aDtoKyspRihhY1toXSxhKTtoPWQ7YnJlYWs7Y2FzZSBcInNvdXJjZVwiOkYoXCJlcnJvclwiLGEpO2g9ZDticmVhaztjYXNlIFwiaW1nXCI6Y2FzZSBcImltYWdlXCI6Y2FzZSBcImxpbmtcIjpGKFwiZXJyb3JcIixhKTtGKFwibG9hZFwiLGEpO2g9ZDticmVhaztjYXNlIFwiZm9ybVwiOkYoXCJyZXNldFwiLGEpO0YoXCJzdWJtaXRcIixhKTtoPWQ7YnJlYWs7Y2FzZSBcImRldGFpbHNcIjpGKFwidG9nZ2xlXCIsYSk7aD1kO2JyZWFrO2Nhc2UgXCJpbnB1dFwiOkFiKGEsZCk7aD16YihhLGQpO0YoXCJpbnZhbGlkXCIsYSk7cmQoYyxcIm9uQ2hhbmdlXCIpO2JyZWFrO2Nhc2UgXCJvcHRpb25cIjpoPUdiKGEsZCk7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmEuX3dyYXBwZXJTdGF0ZT17d2FzTXVsdGlwbGU6ISFkLm11bHRpcGxlfTtoPW4oe30sZCx7dmFsdWU6dm9pZCAwfSk7RihcImludmFsaWRcIixhKTtyZChjLFwib25DaGFuZ2VcIik7YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6SmIoYSxcbmQpO2g9SWIoYSxkKTtGKFwiaW52YWxpZFwiLGEpO3JkKGMsXCJvbkNoYW5nZVwiKTticmVhaztkZWZhdWx0Omg9ZH1vZChlLGgpO3ZhciBrPWg7Zm9yKGYgaW4gaylpZihrLmhhc093blByb3BlcnR5KGYpKXt2YXIgbD1rW2ZdO1wic3R5bGVcIj09PWY/bWQoYSxsKTpcImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MXCI9PT1mPyhsPWw/bC5fX2h0bWw6dm9pZCAwLG51bGwhPWwmJlFiKGEsbCkpOlwiY2hpbGRyZW5cIj09PWY/XCJzdHJpbmdcIj09PXR5cGVvZiBsPyhcInRleHRhcmVhXCIhPT1lfHxcIlwiIT09bCkmJlJiKGEsbCk6XCJudW1iZXJcIj09PXR5cGVvZiBsJiZSYihhLFwiXCIrbCk6XCJzdXBwcmVzc0NvbnRlbnRFZGl0YWJsZVdhcm5pbmdcIiE9PWYmJlwic3VwcHJlc3NIeWRyYXRpb25XYXJuaW5nXCIhPT1mJiZcImF1dG9Gb2N1c1wiIT09ZiYmKHZhLmhhc093blByb3BlcnR5KGYpP251bGwhPWwmJnJkKGMsZik6bnVsbCE9bCYmWGEoYSxmLGwsZykpfXN3aXRjaChlKXtjYXNlIFwiaW5wdXRcIjp4YihhKTtFYihhLGQsITEpO1xuYnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6eGIoYSk7TGIoYSk7YnJlYWs7Y2FzZSBcIm9wdGlvblwiOm51bGwhPWQudmFsdWUmJmEuc2V0QXR0cmlidXRlKFwidmFsdWVcIixcIlwiK3JiKGQudmFsdWUpKTticmVhaztjYXNlIFwic2VsZWN0XCI6YS5tdWx0aXBsZT0hIWQubXVsdGlwbGU7Yz1kLnZhbHVlO251bGwhPWM/SGIoYSwhIWQubXVsdGlwbGUsYywhMSk6bnVsbCE9ZC5kZWZhdWx0VmFsdWUmJkhiKGEsISFkLm11bHRpcGxlLGQuZGVmYXVsdFZhbHVlLCEwKTticmVhaztkZWZhdWx0OlwiZnVuY3Rpb25cIj09PXR5cGVvZiBoLm9uQ2xpY2smJihhLm9uY2xpY2s9c2QpfUZkKGUsZCkmJihiLmVmZmVjdFRhZ3w9NCl9bnVsbCE9PWIucmVmJiYoYi5lZmZlY3RUYWd8PTEyOCl9cmV0dXJuIG51bGw7Y2FzZSA2OmlmKGEmJm51bGwhPWIuc3RhdGVOb2RlKXFpKGEsYixhLm1lbW9pemVkUHJvcHMsZCk7ZWxzZXtpZihcInN0cmluZ1wiIT09dHlwZW9mIGQmJm51bGw9PT1iLnN0YXRlTm9kZSl0aHJvdyBFcnJvcih1KDE2NikpO1xuYz1jaChiaC5jdXJyZW50KTtjaCgkZy5jdXJyZW50KTtXaChiKT8oYz1iLnN0YXRlTm9kZSxkPWIubWVtb2l6ZWRQcm9wcyxjW01kXT1iLGMubm9kZVZhbHVlIT09ZCYmKGIuZWZmZWN0VGFnfD00KSk6KGM9KDk9PT1jLm5vZGVUeXBlP2M6Yy5vd25lckRvY3VtZW50KS5jcmVhdGVUZXh0Tm9kZShkKSxjW01kXT1iLGIuc3RhdGVOb2RlPWMpfXJldHVybiBudWxsO2Nhc2UgMTM6SChNKTtkPWIubWVtb2l6ZWRTdGF0ZTtpZigwIT09KGIuZWZmZWN0VGFnJjY0KSlyZXR1cm4gYi5leHBpcmF0aW9uVGltZT1jLGI7Yz1udWxsIT09ZDtkPSExO251bGw9PT1hP3ZvaWQgMCE9PWIubWVtb2l6ZWRQcm9wcy5mYWxsYmFjayYmV2goYik6KGU9YS5tZW1vaXplZFN0YXRlLGQ9bnVsbCE9PWUsY3x8bnVsbD09PWV8fChlPWEuY2hpbGQuc2libGluZyxudWxsIT09ZSYmKGY9Yi5maXJzdEVmZmVjdCxudWxsIT09Zj8oYi5maXJzdEVmZmVjdD1lLGUubmV4dEVmZmVjdD1mKTooYi5maXJzdEVmZmVjdD1iLmxhc3RFZmZlY3Q9XG5lLGUubmV4dEVmZmVjdD1udWxsKSxlLmVmZmVjdFRhZz04KSkpO2lmKGMmJiFkJiYwIT09KGIubW9kZSYyKSlpZihudWxsPT09YSYmITAhPT1iLm1lbW9pemVkUHJvcHMudW5zdGFibGVfYXZvaWRUaGlzRmFsbGJhY2t8fDAhPT0oTS5jdXJyZW50JjEpKVM9PT10aSYmKFM9dWkpO2Vsc2V7aWYoUz09PXRpfHxTPT09dWkpUz12aTswIT09d2kmJm51bGwhPT1UJiYoeGkoVCxVKSx5aShULHdpKSl9aWYoY3x8ZCliLmVmZmVjdFRhZ3w9NDtyZXR1cm4gbnVsbDtjYXNlIDQ6cmV0dXJuIGVoKCksb2koYiksbnVsbDtjYXNlIDEwOnJldHVybiBvZyhiKSxudWxsO2Nhc2UgMTc6cmV0dXJuIEwoYi50eXBlKSYmRGYoKSxudWxsO2Nhc2UgMTk6SChNKTtkPWIubWVtb2l6ZWRTdGF0ZTtpZihudWxsPT09ZClyZXR1cm4gbnVsbDtlPTAhPT0oYi5lZmZlY3RUYWcmNjQpO2Y9ZC5yZW5kZXJpbmc7aWYobnVsbD09PWYpaWYoZSlyaShkLCExKTtlbHNle2lmKFMhPT10aXx8bnVsbCE9PWEmJjAhPT0oYS5lZmZlY3RUYWcmXG42NCkpZm9yKGY9Yi5jaGlsZDtudWxsIT09Zjspe2E9aGgoZik7aWYobnVsbCE9PWEpe2IuZWZmZWN0VGFnfD02NDtyaShkLCExKTtlPWEudXBkYXRlUXVldWU7bnVsbCE9PWUmJihiLnVwZGF0ZVF1ZXVlPWUsYi5lZmZlY3RUYWd8PTQpO251bGw9PT1kLmxhc3RFZmZlY3QmJihiLmZpcnN0RWZmZWN0PW51bGwpO2IubGFzdEVmZmVjdD1kLmxhc3RFZmZlY3Q7Zm9yKGQ9Yi5jaGlsZDtudWxsIT09ZDspZT1kLGY9YyxlLmVmZmVjdFRhZyY9MixlLm5leHRFZmZlY3Q9bnVsbCxlLmZpcnN0RWZmZWN0PW51bGwsZS5sYXN0RWZmZWN0PW51bGwsYT1lLmFsdGVybmF0ZSxudWxsPT09YT8oZS5jaGlsZEV4cGlyYXRpb25UaW1lPTAsZS5leHBpcmF0aW9uVGltZT1mLGUuY2hpbGQ9bnVsbCxlLm1lbW9pemVkUHJvcHM9bnVsbCxlLm1lbW9pemVkU3RhdGU9bnVsbCxlLnVwZGF0ZVF1ZXVlPW51bGwsZS5kZXBlbmRlbmNpZXM9bnVsbCk6KGUuY2hpbGRFeHBpcmF0aW9uVGltZT1hLmNoaWxkRXhwaXJhdGlvblRpbWUsXG5lLmV4cGlyYXRpb25UaW1lPWEuZXhwaXJhdGlvblRpbWUsZS5jaGlsZD1hLmNoaWxkLGUubWVtb2l6ZWRQcm9wcz1hLm1lbW9pemVkUHJvcHMsZS5tZW1vaXplZFN0YXRlPWEubWVtb2l6ZWRTdGF0ZSxlLnVwZGF0ZVF1ZXVlPWEudXBkYXRlUXVldWUsZj1hLmRlcGVuZGVuY2llcyxlLmRlcGVuZGVuY2llcz1udWxsPT09Zj9udWxsOntleHBpcmF0aW9uVGltZTpmLmV4cGlyYXRpb25UaW1lLGZpcnN0Q29udGV4dDpmLmZpcnN0Q29udGV4dCxyZXNwb25kZXJzOmYucmVzcG9uZGVyc30pLGQ9ZC5zaWJsaW5nO0koTSxNLmN1cnJlbnQmMXwyKTtyZXR1cm4gYi5jaGlsZH1mPWYuc2libGluZ319ZWxzZXtpZighZSlpZihhPWhoKGYpLG51bGwhPT1hKXtpZihiLmVmZmVjdFRhZ3w9NjQsZT0hMCxjPWEudXBkYXRlUXVldWUsbnVsbCE9PWMmJihiLnVwZGF0ZVF1ZXVlPWMsYi5lZmZlY3RUYWd8PTQpLHJpKGQsITApLG51bGw9PT1kLnRhaWwmJlwiaGlkZGVuXCI9PT1kLnRhaWxNb2RlJiYhZi5hbHRlcm5hdGUpcmV0dXJuIGI9XG5iLmxhc3RFZmZlY3Q9ZC5sYXN0RWZmZWN0LG51bGwhPT1iJiYoYi5uZXh0RWZmZWN0PW51bGwpLG51bGx9ZWxzZSAyKiRmKCktZC5yZW5kZXJpbmdTdGFydFRpbWU+ZC50YWlsRXhwaXJhdGlvbiYmMTxjJiYoYi5lZmZlY3RUYWd8PTY0LGU9ITAscmkoZCwhMSksYi5leHBpcmF0aW9uVGltZT1iLmNoaWxkRXhwaXJhdGlvblRpbWU9Yy0xKTtkLmlzQmFja3dhcmRzPyhmLnNpYmxpbmc9Yi5jaGlsZCxiLmNoaWxkPWYpOihjPWQubGFzdCxudWxsIT09Yz9jLnNpYmxpbmc9ZjpiLmNoaWxkPWYsZC5sYXN0PWYpfXJldHVybiBudWxsIT09ZC50YWlsPygwPT09ZC50YWlsRXhwaXJhdGlvbiYmKGQudGFpbEV4cGlyYXRpb249JGYoKSs1MDApLGM9ZC50YWlsLGQucmVuZGVyaW5nPWMsZC50YWlsPWMuc2libGluZyxkLmxhc3RFZmZlY3Q9Yi5sYXN0RWZmZWN0LGQucmVuZGVyaW5nU3RhcnRUaW1lPSRmKCksYy5zaWJsaW5nPW51bGwsYj1NLmN1cnJlbnQsSShNLGU/YiYxfDI6YiYxKSxjKTpudWxsfXRocm93IEVycm9yKHUoMTU2LFxuYi50YWcpKTt9ZnVuY3Rpb24gemkoYSl7c3dpdGNoKGEudGFnKXtjYXNlIDE6TChhLnR5cGUpJiZEZigpO3ZhciBiPWEuZWZmZWN0VGFnO3JldHVybiBiJjQwOTY/KGEuZWZmZWN0VGFnPWImLTQwOTd8NjQsYSk6bnVsbDtjYXNlIDM6ZWgoKTtIKEspO0goSik7Yj1hLmVmZmVjdFRhZztpZigwIT09KGImNjQpKXRocm93IEVycm9yKHUoMjg1KSk7YS5lZmZlY3RUYWc9YiYtNDA5N3w2NDtyZXR1cm4gYTtjYXNlIDU6cmV0dXJuIGdoKGEpLG51bGw7Y2FzZSAxMzpyZXR1cm4gSChNKSxiPWEuZWZmZWN0VGFnLGImNDA5Nj8oYS5lZmZlY3RUYWc9YiYtNDA5N3w2NCxhKTpudWxsO2Nhc2UgMTk6cmV0dXJuIEgoTSksbnVsbDtjYXNlIDQ6cmV0dXJuIGVoKCksbnVsbDtjYXNlIDEwOnJldHVybiBvZyhhKSxudWxsO2RlZmF1bHQ6cmV0dXJuIG51bGx9fWZ1bmN0aW9uIEFpKGEsYil7cmV0dXJue3ZhbHVlOmEsc291cmNlOmIsc3RhY2s6cWIoYil9fVxudmFyIEJpPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBXZWFrU2V0P1dlYWtTZXQ6U2V0O2Z1bmN0aW9uIENpKGEsYil7dmFyIGM9Yi5zb3VyY2UsZD1iLnN0YWNrO251bGw9PT1kJiZudWxsIT09YyYmKGQ9cWIoYykpO251bGwhPT1jJiZwYihjLnR5cGUpO2I9Yi52YWx1ZTtudWxsIT09YSYmMT09PWEudGFnJiZwYihhLnR5cGUpO3RyeXtjb25zb2xlLmVycm9yKGIpfWNhdGNoKGUpe3NldFRpbWVvdXQoZnVuY3Rpb24oKXt0aHJvdyBlO30pfX1mdW5jdGlvbiBEaShhLGIpe3RyeXtiLnByb3BzPWEubWVtb2l6ZWRQcm9wcyxiLnN0YXRlPWEubWVtb2l6ZWRTdGF0ZSxiLmNvbXBvbmVudFdpbGxVbm1vdW50KCl9Y2F0Y2goYyl7RWkoYSxjKX19ZnVuY3Rpb24gRmkoYSl7dmFyIGI9YS5yZWY7aWYobnVsbCE9PWIpaWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGIpdHJ5e2IobnVsbCl9Y2F0Y2goYyl7RWkoYSxjKX1lbHNlIGIuY3VycmVudD1udWxsfVxuZnVuY3Rpb24gR2koYSxiKXtzd2l0Y2goYi50YWcpe2Nhc2UgMDpjYXNlIDExOmNhc2UgMTU6Y2FzZSAyMjpyZXR1cm47Y2FzZSAxOmlmKGIuZWZmZWN0VGFnJjI1NiYmbnVsbCE9PWEpe3ZhciBjPWEubWVtb2l6ZWRQcm9wcyxkPWEubWVtb2l6ZWRTdGF0ZTthPWIuc3RhdGVOb2RlO2I9YS5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZShiLmVsZW1lbnRUeXBlPT09Yi50eXBlP2M6aWcoYi50eXBlLGMpLGQpO2EuX19yZWFjdEludGVybmFsU25hcHNob3RCZWZvcmVVcGRhdGU9Yn1yZXR1cm47Y2FzZSAzOmNhc2UgNTpjYXNlIDY6Y2FzZSA0OmNhc2UgMTc6cmV0dXJufXRocm93IEVycm9yKHUoMTYzKSk7fVxuZnVuY3Rpb24gSGkoYSxiKXtiPWIudXBkYXRlUXVldWU7Yj1udWxsIT09Yj9iLmxhc3RFZmZlY3Q6bnVsbDtpZihudWxsIT09Yil7dmFyIGM9Yj1iLm5leHQ7ZG97aWYoKGMudGFnJmEpPT09YSl7dmFyIGQ9Yy5kZXN0cm95O2MuZGVzdHJveT12b2lkIDA7dm9pZCAwIT09ZCYmZCgpfWM9Yy5uZXh0fXdoaWxlKGMhPT1iKX19ZnVuY3Rpb24gSWkoYSxiKXtiPWIudXBkYXRlUXVldWU7Yj1udWxsIT09Yj9iLmxhc3RFZmZlY3Q6bnVsbDtpZihudWxsIT09Yil7dmFyIGM9Yj1iLm5leHQ7ZG97aWYoKGMudGFnJmEpPT09YSl7dmFyIGQ9Yy5jcmVhdGU7Yy5kZXN0cm95PWQoKX1jPWMubmV4dH13aGlsZShjIT09Yil9fVxuZnVuY3Rpb24gSmkoYSxiLGMpe3N3aXRjaChjLnRhZyl7Y2FzZSAwOmNhc2UgMTE6Y2FzZSAxNTpjYXNlIDIyOklpKDMsYyk7cmV0dXJuO2Nhc2UgMTphPWMuc3RhdGVOb2RlO2lmKGMuZWZmZWN0VGFnJjQpaWYobnVsbD09PWIpYS5jb21wb25lbnREaWRNb3VudCgpO2Vsc2V7dmFyIGQ9Yy5lbGVtZW50VHlwZT09PWMudHlwZT9iLm1lbW9pemVkUHJvcHM6aWcoYy50eXBlLGIubWVtb2l6ZWRQcm9wcyk7YS5jb21wb25lbnREaWRVcGRhdGUoZCxiLm1lbW9pemVkU3RhdGUsYS5fX3JlYWN0SW50ZXJuYWxTbmFwc2hvdEJlZm9yZVVwZGF0ZSl9Yj1jLnVwZGF0ZVF1ZXVlO251bGwhPT1iJiZDZyhjLGIsYSk7cmV0dXJuO2Nhc2UgMzpiPWMudXBkYXRlUXVldWU7aWYobnVsbCE9PWIpe2E9bnVsbDtpZihudWxsIT09Yy5jaGlsZClzd2l0Y2goYy5jaGlsZC50YWcpe2Nhc2UgNTphPWMuY2hpbGQuc3RhdGVOb2RlO2JyZWFrO2Nhc2UgMTphPWMuY2hpbGQuc3RhdGVOb2RlfUNnKGMsYixhKX1yZXR1cm47XG5jYXNlIDU6YT1jLnN0YXRlTm9kZTtudWxsPT09YiYmYy5lZmZlY3RUYWcmNCYmRmQoYy50eXBlLGMubWVtb2l6ZWRQcm9wcykmJmEuZm9jdXMoKTtyZXR1cm47Y2FzZSA2OnJldHVybjtjYXNlIDQ6cmV0dXJuO2Nhc2UgMTI6cmV0dXJuO2Nhc2UgMTM6bnVsbD09PWMubWVtb2l6ZWRTdGF0ZSYmKGM9Yy5hbHRlcm5hdGUsbnVsbCE9PWMmJihjPWMubWVtb2l6ZWRTdGF0ZSxudWxsIT09YyYmKGM9Yy5kZWh5ZHJhdGVkLG51bGwhPT1jJiZWYyhjKSkpKTtyZXR1cm47Y2FzZSAxOTpjYXNlIDE3OmNhc2UgMjA6Y2FzZSAyMTpyZXR1cm59dGhyb3cgRXJyb3IodSgxNjMpKTt9XG5mdW5jdGlvbiBLaShhLGIsYyl7XCJmdW5jdGlvblwiPT09dHlwZW9mIExpJiZMaShiKTtzd2l0Y2goYi50YWcpe2Nhc2UgMDpjYXNlIDExOmNhc2UgMTQ6Y2FzZSAxNTpjYXNlIDIyOmE9Yi51cGRhdGVRdWV1ZTtpZihudWxsIT09YSYmKGE9YS5sYXN0RWZmZWN0LG51bGwhPT1hKSl7dmFyIGQ9YS5uZXh0O2NnKDk3PGM/OTc6YyxmdW5jdGlvbigpe3ZhciBhPWQ7ZG97dmFyIGM9YS5kZXN0cm95O2lmKHZvaWQgMCE9PWMpe3ZhciBnPWI7dHJ5e2MoKX1jYXRjaChoKXtFaShnLGgpfX1hPWEubmV4dH13aGlsZShhIT09ZCl9KX1icmVhaztjYXNlIDE6RmkoYik7Yz1iLnN0YXRlTm9kZTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgYy5jb21wb25lbnRXaWxsVW5tb3VudCYmRGkoYixjKTticmVhaztjYXNlIDU6RmkoYik7YnJlYWs7Y2FzZSA0Ok1pKGEsYixjKX19XG5mdW5jdGlvbiBOaShhKXt2YXIgYj1hLmFsdGVybmF0ZTthLnJldHVybj1udWxsO2EuY2hpbGQ9bnVsbDthLm1lbW9pemVkU3RhdGU9bnVsbDthLnVwZGF0ZVF1ZXVlPW51bGw7YS5kZXBlbmRlbmNpZXM9bnVsbDthLmFsdGVybmF0ZT1udWxsO2EuZmlyc3RFZmZlY3Q9bnVsbDthLmxhc3RFZmZlY3Q9bnVsbDthLnBlbmRpbmdQcm9wcz1udWxsO2EubWVtb2l6ZWRQcm9wcz1udWxsO2Euc3RhdGVOb2RlPW51bGw7bnVsbCE9PWImJk5pKGIpfWZ1bmN0aW9uIE9pKGEpe3JldHVybiA1PT09YS50YWd8fDM9PT1hLnRhZ3x8ND09PWEudGFnfVxuZnVuY3Rpb24gUGkoYSl7YTp7Zm9yKHZhciBiPWEucmV0dXJuO251bGwhPT1iOyl7aWYoT2koYikpe3ZhciBjPWI7YnJlYWsgYX1iPWIucmV0dXJufXRocm93IEVycm9yKHUoMTYwKSk7fWI9Yy5zdGF0ZU5vZGU7c3dpdGNoKGMudGFnKXtjYXNlIDU6dmFyIGQ9ITE7YnJlYWs7Y2FzZSAzOmI9Yi5jb250YWluZXJJbmZvO2Q9ITA7YnJlYWs7Y2FzZSA0OmI9Yi5jb250YWluZXJJbmZvO2Q9ITA7YnJlYWs7ZGVmYXVsdDp0aHJvdyBFcnJvcih1KDE2MSkpO31jLmVmZmVjdFRhZyYxNiYmKFJiKGIsXCJcIiksYy5lZmZlY3RUYWcmPS0xNyk7YTpiOmZvcihjPWE7Oyl7Zm9yKDtudWxsPT09Yy5zaWJsaW5nOyl7aWYobnVsbD09PWMucmV0dXJufHxPaShjLnJldHVybikpe2M9bnVsbDticmVhayBhfWM9Yy5yZXR1cm59Yy5zaWJsaW5nLnJldHVybj1jLnJldHVybjtmb3IoYz1jLnNpYmxpbmc7NSE9PWMudGFnJiY2IT09Yy50YWcmJjE4IT09Yy50YWc7KXtpZihjLmVmZmVjdFRhZyYyKWNvbnRpbnVlIGI7XG5pZihudWxsPT09Yy5jaGlsZHx8ND09PWMudGFnKWNvbnRpbnVlIGI7ZWxzZSBjLmNoaWxkLnJldHVybj1jLGM9Yy5jaGlsZH1pZighKGMuZWZmZWN0VGFnJjIpKXtjPWMuc3RhdGVOb2RlO2JyZWFrIGF9fWQ/UWkoYSxjLGIpOlJpKGEsYyxiKX1cbmZ1bmN0aW9uIFFpKGEsYixjKXt2YXIgZD1hLnRhZyxlPTU9PT1kfHw2PT09ZDtpZihlKWE9ZT9hLnN0YXRlTm9kZTphLnN0YXRlTm9kZS5pbnN0YW5jZSxiPzg9PT1jLm5vZGVUeXBlP2MucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoYSxiKTpjLmluc2VydEJlZm9yZShhLGIpOig4PT09Yy5ub2RlVHlwZT8oYj1jLnBhcmVudE5vZGUsYi5pbnNlcnRCZWZvcmUoYSxjKSk6KGI9YyxiLmFwcGVuZENoaWxkKGEpKSxjPWMuX3JlYWN0Um9vdENvbnRhaW5lcixudWxsIT09YyYmdm9pZCAwIT09Y3x8bnVsbCE9PWIub25jbGlja3x8KGIub25jbGljaz1zZCkpO2Vsc2UgaWYoNCE9PWQmJihhPWEuY2hpbGQsbnVsbCE9PWEpKWZvcihRaShhLGIsYyksYT1hLnNpYmxpbmc7bnVsbCE9PWE7KVFpKGEsYixjKSxhPWEuc2libGluZ31cbmZ1bmN0aW9uIFJpKGEsYixjKXt2YXIgZD1hLnRhZyxlPTU9PT1kfHw2PT09ZDtpZihlKWE9ZT9hLnN0YXRlTm9kZTphLnN0YXRlTm9kZS5pbnN0YW5jZSxiP2MuaW5zZXJ0QmVmb3JlKGEsYik6Yy5hcHBlbmRDaGlsZChhKTtlbHNlIGlmKDQhPT1kJiYoYT1hLmNoaWxkLG51bGwhPT1hKSlmb3IoUmkoYSxiLGMpLGE9YS5zaWJsaW5nO251bGwhPT1hOylSaShhLGIsYyksYT1hLnNpYmxpbmd9XG5mdW5jdGlvbiBNaShhLGIsYyl7Zm9yKHZhciBkPWIsZT0hMSxmLGc7Oyl7aWYoIWUpe2U9ZC5yZXR1cm47YTpmb3IoOzspe2lmKG51bGw9PT1lKXRocm93IEVycm9yKHUoMTYwKSk7Zj1lLnN0YXRlTm9kZTtzd2l0Y2goZS50YWcpe2Nhc2UgNTpnPSExO2JyZWFrIGE7Y2FzZSAzOmY9Zi5jb250YWluZXJJbmZvO2c9ITA7YnJlYWsgYTtjYXNlIDQ6Zj1mLmNvbnRhaW5lckluZm87Zz0hMDticmVhayBhfWU9ZS5yZXR1cm59ZT0hMH1pZig1PT09ZC50YWd8fDY9PT1kLnRhZyl7YTpmb3IodmFyIGg9YSxrPWQsbD1jLG09azs7KWlmKEtpKGgsbSxsKSxudWxsIT09bS5jaGlsZCYmNCE9PW0udGFnKW0uY2hpbGQucmV0dXJuPW0sbT1tLmNoaWxkO2Vsc2V7aWYobT09PWspYnJlYWsgYTtmb3IoO251bGw9PT1tLnNpYmxpbmc7KXtpZihudWxsPT09bS5yZXR1cm58fG0ucmV0dXJuPT09aylicmVhayBhO209bS5yZXR1cm59bS5zaWJsaW5nLnJldHVybj1tLnJldHVybjttPW0uc2libGluZ31nPyhoPVxuZixrPWQuc3RhdGVOb2RlLDg9PT1oLm5vZGVUeXBlP2gucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChrKTpoLnJlbW92ZUNoaWxkKGspKTpmLnJlbW92ZUNoaWxkKGQuc3RhdGVOb2RlKX1lbHNlIGlmKDQ9PT1kLnRhZyl7aWYobnVsbCE9PWQuY2hpbGQpe2Y9ZC5zdGF0ZU5vZGUuY29udGFpbmVySW5mbztnPSEwO2QuY2hpbGQucmV0dXJuPWQ7ZD1kLmNoaWxkO2NvbnRpbnVlfX1lbHNlIGlmKEtpKGEsZCxjKSxudWxsIT09ZC5jaGlsZCl7ZC5jaGlsZC5yZXR1cm49ZDtkPWQuY2hpbGQ7Y29udGludWV9aWYoZD09PWIpYnJlYWs7Zm9yKDtudWxsPT09ZC5zaWJsaW5nOyl7aWYobnVsbD09PWQucmV0dXJufHxkLnJldHVybj09PWIpcmV0dXJuO2Q9ZC5yZXR1cm47ND09PWQudGFnJiYoZT0hMSl9ZC5zaWJsaW5nLnJldHVybj1kLnJldHVybjtkPWQuc2libGluZ319XG5mdW5jdGlvbiBTaShhLGIpe3N3aXRjaChiLnRhZyl7Y2FzZSAwOmNhc2UgMTE6Y2FzZSAxNDpjYXNlIDE1OmNhc2UgMjI6SGkoMyxiKTtyZXR1cm47Y2FzZSAxOnJldHVybjtjYXNlIDU6dmFyIGM9Yi5zdGF0ZU5vZGU7aWYobnVsbCE9Yyl7dmFyIGQ9Yi5tZW1vaXplZFByb3BzLGU9bnVsbCE9PWE/YS5tZW1vaXplZFByb3BzOmQ7YT1iLnR5cGU7dmFyIGY9Yi51cGRhdGVRdWV1ZTtiLnVwZGF0ZVF1ZXVlPW51bGw7aWYobnVsbCE9PWYpe2NbTmRdPWQ7XCJpbnB1dFwiPT09YSYmXCJyYWRpb1wiPT09ZC50eXBlJiZudWxsIT1kLm5hbWUmJkJiKGMsZCk7cGQoYSxlKTtiPXBkKGEsZCk7Zm9yKGU9MDtlPGYubGVuZ3RoO2UrPTIpe3ZhciBnPWZbZV0saD1mW2UrMV07XCJzdHlsZVwiPT09Zz9tZChjLGgpOlwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUxcIj09PWc/UWIoYyxoKTpcImNoaWxkcmVuXCI9PT1nP1JiKGMsaCk6WGEoYyxnLGgsYil9c3dpdGNoKGEpe2Nhc2UgXCJpbnB1dFwiOkNiKGMsZCk7YnJlYWs7XG5jYXNlIFwidGV4dGFyZWFcIjpLYihjLGQpO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjpiPWMuX3dyYXBwZXJTdGF0ZS53YXNNdWx0aXBsZSxjLl93cmFwcGVyU3RhdGUud2FzTXVsdGlwbGU9ISFkLm11bHRpcGxlLGE9ZC52YWx1ZSxudWxsIT1hP0hiKGMsISFkLm11bHRpcGxlLGEsITEpOmIhPT0hIWQubXVsdGlwbGUmJihudWxsIT1kLmRlZmF1bHRWYWx1ZT9IYihjLCEhZC5tdWx0aXBsZSxkLmRlZmF1bHRWYWx1ZSwhMCk6SGIoYywhIWQubXVsdGlwbGUsZC5tdWx0aXBsZT9bXTpcIlwiLCExKSl9fX1yZXR1cm47Y2FzZSA2OmlmKG51bGw9PT1iLnN0YXRlTm9kZSl0aHJvdyBFcnJvcih1KDE2MikpO2Iuc3RhdGVOb2RlLm5vZGVWYWx1ZT1iLm1lbW9pemVkUHJvcHM7cmV0dXJuO2Nhc2UgMzpiPWIuc3RhdGVOb2RlO2IuaHlkcmF0ZSYmKGIuaHlkcmF0ZT0hMSxWYyhiLmNvbnRhaW5lckluZm8pKTtyZXR1cm47Y2FzZSAxMjpyZXR1cm47Y2FzZSAxMzpjPWI7bnVsbD09PWIubWVtb2l6ZWRTdGF0ZT9cbmQ9ITE6KGQ9ITAsYz1iLmNoaWxkLFRpPSRmKCkpO2lmKG51bGwhPT1jKWE6Zm9yKGE9Yzs7KXtpZig1PT09YS50YWcpZj1hLnN0YXRlTm9kZSxkPyhmPWYuc3R5bGUsXCJmdW5jdGlvblwiPT09dHlwZW9mIGYuc2V0UHJvcGVydHk/Zi5zZXRQcm9wZXJ0eShcImRpc3BsYXlcIixcIm5vbmVcIixcImltcG9ydGFudFwiKTpmLmRpc3BsYXk9XCJub25lXCIpOihmPWEuc3RhdGVOb2RlLGU9YS5tZW1vaXplZFByb3BzLnN0eWxlLGU9dm9pZCAwIT09ZSYmbnVsbCE9PWUmJmUuaGFzT3duUHJvcGVydHkoXCJkaXNwbGF5XCIpP2UuZGlzcGxheTpudWxsLGYuc3R5bGUuZGlzcGxheT1sZChcImRpc3BsYXlcIixlKSk7ZWxzZSBpZig2PT09YS50YWcpYS5zdGF0ZU5vZGUubm9kZVZhbHVlPWQ/XCJcIjphLm1lbW9pemVkUHJvcHM7ZWxzZSBpZigxMz09PWEudGFnJiZudWxsIT09YS5tZW1vaXplZFN0YXRlJiZudWxsPT09YS5tZW1vaXplZFN0YXRlLmRlaHlkcmF0ZWQpe2Y9YS5jaGlsZC5zaWJsaW5nO2YucmV0dXJuPWE7YT1cbmY7Y29udGludWV9ZWxzZSBpZihudWxsIT09YS5jaGlsZCl7YS5jaGlsZC5yZXR1cm49YTthPWEuY2hpbGQ7Y29udGludWV9aWYoYT09PWMpYnJlYWs7Zm9yKDtudWxsPT09YS5zaWJsaW5nOyl7aWYobnVsbD09PWEucmV0dXJufHxhLnJldHVybj09PWMpYnJlYWsgYTthPWEucmV0dXJufWEuc2libGluZy5yZXR1cm49YS5yZXR1cm47YT1hLnNpYmxpbmd9VWkoYik7cmV0dXJuO2Nhc2UgMTk6VWkoYik7cmV0dXJuO2Nhc2UgMTc6cmV0dXJufXRocm93IEVycm9yKHUoMTYzKSk7fWZ1bmN0aW9uIFVpKGEpe3ZhciBiPWEudXBkYXRlUXVldWU7aWYobnVsbCE9PWIpe2EudXBkYXRlUXVldWU9bnVsbDt2YXIgYz1hLnN0YXRlTm9kZTtudWxsPT09YyYmKGM9YS5zdGF0ZU5vZGU9bmV3IEJpKTtiLmZvckVhY2goZnVuY3Rpb24oYil7dmFyIGQ9VmkuYmluZChudWxsLGEsYik7Yy5oYXMoYil8fChjLmFkZChiKSxiLnRoZW4oZCxkKSl9KX19XG52YXIgV2k9XCJmdW5jdGlvblwiPT09dHlwZW9mIFdlYWtNYXA/V2Vha01hcDpNYXA7ZnVuY3Rpb24gWGkoYSxiLGMpe2M9d2coYyxudWxsKTtjLnRhZz0zO2MucGF5bG9hZD17ZWxlbWVudDpudWxsfTt2YXIgZD1iLnZhbHVlO2MuY2FsbGJhY2s9ZnVuY3Rpb24oKXtZaXx8KFlpPSEwLFppPWQpO0NpKGEsYil9O3JldHVybiBjfVxuZnVuY3Rpb24gJGkoYSxiLGMpe2M9d2coYyxudWxsKTtjLnRhZz0zO3ZhciBkPWEudHlwZS5nZXREZXJpdmVkU3RhdGVGcm9tRXJyb3I7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGQpe3ZhciBlPWIudmFsdWU7Yy5wYXlsb2FkPWZ1bmN0aW9uKCl7Q2koYSxiKTtyZXR1cm4gZChlKX19dmFyIGY9YS5zdGF0ZU5vZGU7bnVsbCE9PWYmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBmLmNvbXBvbmVudERpZENhdGNoJiYoYy5jYWxsYmFjaz1mdW5jdGlvbigpe1wiZnVuY3Rpb25cIiE9PXR5cGVvZiBkJiYobnVsbD09PWFqP2FqPW5ldyBTZXQoW3RoaXNdKTphai5hZGQodGhpcyksQ2koYSxiKSk7dmFyIGM9Yi5zdGFjazt0aGlzLmNvbXBvbmVudERpZENhdGNoKGIudmFsdWUse2NvbXBvbmVudFN0YWNrOm51bGwhPT1jP2M6XCJcIn0pfSk7cmV0dXJuIGN9XG52YXIgYmo9TWF0aC5jZWlsLGNqPVdhLlJlYWN0Q3VycmVudERpc3BhdGNoZXIsZGo9V2EuUmVhY3RDdXJyZW50T3duZXIsVj0wLGVqPTgsZmo9MTYsZ2o9MzIsdGk9MCxoaj0xLGlqPTIsdWk9Myx2aT00LGpqPTUsVz1WLFQ9bnVsbCxYPW51bGwsVT0wLFM9dGksa2o9bnVsbCxsaj0xMDczNzQxODIzLG1qPTEwNzM3NDE4MjMsbmo9bnVsbCx3aT0wLG9qPSExLFRpPTAscGo9NTAwLFk9bnVsbCxZaT0hMSxaaT1udWxsLGFqPW51bGwscWo9ITEscmo9bnVsbCxzaj05MCx0aj1udWxsLHVqPTAsdmo9bnVsbCx3aj0wO2Z1bmN0aW9uIEdnKCl7cmV0dXJuKFcmKGZqfGdqKSkhPT1WPzEwNzM3NDE4MjEtKCRmKCkvMTB8MCk6MCE9PXdqP3dqOndqPTEwNzM3NDE4MjEtKCRmKCkvMTB8MCl9XG5mdW5jdGlvbiBIZyhhLGIsYyl7Yj1iLm1vZGU7aWYoMD09PShiJjIpKXJldHVybiAxMDczNzQxODIzO3ZhciBkPWFnKCk7aWYoMD09PShiJjQpKXJldHVybiA5OT09PWQ/MTA3Mzc0MTgyMzoxMDczNzQxODIyO2lmKChXJmZqKSE9PVYpcmV0dXJuIFU7aWYobnVsbCE9PWMpYT1oZyhhLGMudGltZW91dE1zfDB8fDVFMywyNTApO2Vsc2Ugc3dpdGNoKGQpe2Nhc2UgOTk6YT0xMDczNzQxODIzO2JyZWFrO2Nhc2UgOTg6YT1oZyhhLDE1MCwxMDApO2JyZWFrO2Nhc2UgOTc6Y2FzZSA5NjphPWhnKGEsNUUzLDI1MCk7YnJlYWs7Y2FzZSA5NTphPTI7YnJlYWs7ZGVmYXVsdDp0aHJvdyBFcnJvcih1KDMyNikpO31udWxsIT09VCYmYT09PVUmJi0tYTtyZXR1cm4gYX1cbmZ1bmN0aW9uIElnKGEsYil7aWYoNTA8dWopdGhyb3cgdWo9MCx2aj1udWxsLEVycm9yKHUoMTg1KSk7YT14aihhLGIpO2lmKG51bGwhPT1hKXt2YXIgYz1hZygpOzEwNzM3NDE4MjM9PT1iPyhXJmVqKSE9PVYmJihXJihmanxnaikpPT09Vj95aihhKTooWihhKSxXPT09ViYmZ2coKSk6WihhKTsoVyY0KT09PVZ8fDk4IT09YyYmOTkhPT1jfHwobnVsbD09PXRqP3RqPW5ldyBNYXAoW1thLGJdXSk6KGM9dGouZ2V0KGEpLCh2b2lkIDA9PT1jfHxjPmIpJiZ0ai5zZXQoYSxiKSkpfX1cbmZ1bmN0aW9uIHhqKGEsYil7YS5leHBpcmF0aW9uVGltZTxiJiYoYS5leHBpcmF0aW9uVGltZT1iKTt2YXIgYz1hLmFsdGVybmF0ZTtudWxsIT09YyYmYy5leHBpcmF0aW9uVGltZTxiJiYoYy5leHBpcmF0aW9uVGltZT1iKTt2YXIgZD1hLnJldHVybixlPW51bGw7aWYobnVsbD09PWQmJjM9PT1hLnRhZyllPWEuc3RhdGVOb2RlO2Vsc2UgZm9yKDtudWxsIT09ZDspe2M9ZC5hbHRlcm5hdGU7ZC5jaGlsZEV4cGlyYXRpb25UaW1lPGImJihkLmNoaWxkRXhwaXJhdGlvblRpbWU9Yik7bnVsbCE9PWMmJmMuY2hpbGRFeHBpcmF0aW9uVGltZTxiJiYoYy5jaGlsZEV4cGlyYXRpb25UaW1lPWIpO2lmKG51bGw9PT1kLnJldHVybiYmMz09PWQudGFnKXtlPWQuc3RhdGVOb2RlO2JyZWFrfWQ9ZC5yZXR1cm59bnVsbCE9PWUmJihUPT09ZSYmKEJnKGIpLFM9PT12aSYmeGkoZSxVKSkseWkoZSxiKSk7cmV0dXJuIGV9XG5mdW5jdGlvbiB6aihhKXt2YXIgYj1hLmxhc3RFeHBpcmVkVGltZTtpZigwIT09YilyZXR1cm4gYjtiPWEuZmlyc3RQZW5kaW5nVGltZTtpZighQWooYSxiKSlyZXR1cm4gYjt2YXIgYz1hLmxhc3RQaW5nZWRUaW1lO2E9YS5uZXh0S25vd25QZW5kaW5nTGV2ZWw7YT1jPmE/YzphO3JldHVybiAyPj1hJiZiIT09YT8wOmF9XG5mdW5jdGlvbiBaKGEpe2lmKDAhPT1hLmxhc3RFeHBpcmVkVGltZSlhLmNhbGxiYWNrRXhwaXJhdGlvblRpbWU9MTA3Mzc0MTgyMyxhLmNhbGxiYWNrUHJpb3JpdHk9OTksYS5jYWxsYmFja05vZGU9ZWcoeWouYmluZChudWxsLGEpKTtlbHNle3ZhciBiPXpqKGEpLGM9YS5jYWxsYmFja05vZGU7aWYoMD09PWIpbnVsbCE9PWMmJihhLmNhbGxiYWNrTm9kZT1udWxsLGEuY2FsbGJhY2tFeHBpcmF0aW9uVGltZT0wLGEuY2FsbGJhY2tQcmlvcml0eT05MCk7ZWxzZXt2YXIgZD1HZygpOzEwNzM3NDE4MjM9PT1iP2Q9OTk6MT09PWJ8fDI9PT1iP2Q9OTU6KGQ9MTAqKDEwNzM3NDE4MjEtYiktMTAqKDEwNzM3NDE4MjEtZCksZD0wPj1kPzk5OjI1MD49ZD85ODo1MjUwPj1kPzk3Ojk1KTtpZihudWxsIT09Yyl7dmFyIGU9YS5jYWxsYmFja1ByaW9yaXR5O2lmKGEuY2FsbGJhY2tFeHBpcmF0aW9uVGltZT09PWImJmU+PWQpcmV0dXJuO2MhPT1UZiYmS2YoYyl9YS5jYWxsYmFja0V4cGlyYXRpb25UaW1lPVxuYjthLmNhbGxiYWNrUHJpb3JpdHk9ZDtiPTEwNzM3NDE4MjM9PT1iP2VnKHlqLmJpbmQobnVsbCxhKSk6ZGcoZCxCai5iaW5kKG51bGwsYSkse3RpbWVvdXQ6MTAqKDEwNzM3NDE4MjEtYiktJGYoKX0pO2EuY2FsbGJhY2tOb2RlPWJ9fX1cbmZ1bmN0aW9uIEJqKGEsYil7d2o9MDtpZihiKXJldHVybiBiPUdnKCksQ2ooYSxiKSxaKGEpLG51bGw7dmFyIGM9emooYSk7aWYoMCE9PWMpe2I9YS5jYWxsYmFja05vZGU7aWYoKFcmKGZqfGdqKSkhPT1WKXRocm93IEVycm9yKHUoMzI3KSk7RGooKTthPT09VCYmYz09PVV8fEVqKGEsYyk7aWYobnVsbCE9PVgpe3ZhciBkPVc7V3w9Zmo7dmFyIGU9RmooKTtkbyB0cnl7R2ooKTticmVha31jYXRjaChoKXtIaihhLGgpfXdoaWxlKDEpO25nKCk7Vz1kO2NqLmN1cnJlbnQ9ZTtpZihTPT09aGopdGhyb3cgYj1raixFaihhLGMpLHhpKGEsYyksWihhKSxiO2lmKG51bGw9PT1YKXN3aXRjaChlPWEuZmluaXNoZWRXb3JrPWEuY3VycmVudC5hbHRlcm5hdGUsYS5maW5pc2hlZEV4cGlyYXRpb25UaW1lPWMsZD1TLFQ9bnVsbCxkKXtjYXNlIHRpOmNhc2UgaGo6dGhyb3cgRXJyb3IodSgzNDUpKTtjYXNlIGlqOkNqKGEsMjxjPzI6Yyk7YnJlYWs7Y2FzZSB1aTp4aShhLGMpO2Q9YS5sYXN0U3VzcGVuZGVkVGltZTtcbmM9PT1kJiYoYS5uZXh0S25vd25QZW5kaW5nTGV2ZWw9SWooZSkpO2lmKDEwNzM3NDE4MjM9PT1saiYmKGU9VGkrcGotJGYoKSwxMDxlKSl7aWYob2ope3ZhciBmPWEubGFzdFBpbmdlZFRpbWU7aWYoMD09PWZ8fGY+PWMpe2EubGFzdFBpbmdlZFRpbWU9YztFaihhLGMpO2JyZWFrfX1mPXpqKGEpO2lmKDAhPT1mJiZmIT09YylicmVhaztpZigwIT09ZCYmZCE9PWMpe2EubGFzdFBpbmdlZFRpbWU9ZDticmVha31hLnRpbWVvdXRIYW5kbGU9SGQoSmouYmluZChudWxsLGEpLGUpO2JyZWFrfUpqKGEpO2JyZWFrO2Nhc2Ugdmk6eGkoYSxjKTtkPWEubGFzdFN1c3BlbmRlZFRpbWU7Yz09PWQmJihhLm5leHRLbm93blBlbmRpbmdMZXZlbD1JaihlKSk7aWYob2omJihlPWEubGFzdFBpbmdlZFRpbWUsMD09PWV8fGU+PWMpKXthLmxhc3RQaW5nZWRUaW1lPWM7RWooYSxjKTticmVha31lPXpqKGEpO2lmKDAhPT1lJiZlIT09YylicmVhaztpZigwIT09ZCYmZCE9PWMpe2EubGFzdFBpbmdlZFRpbWU9XG5kO2JyZWFrfTEwNzM3NDE4MjMhPT1taj9kPTEwKigxMDczNzQxODIxLW1qKS0kZigpOjEwNzM3NDE4MjM9PT1saj9kPTA6KGQ9MTAqKDEwNzM3NDE4MjEtbGopLTVFMyxlPSRmKCksYz0xMCooMTA3Mzc0MTgyMS1jKS1lLGQ9ZS1kLDA+ZCYmKGQ9MCksZD0oMTIwPmQ/MTIwOjQ4MD5kPzQ4MDoxMDgwPmQ/MTA4MDoxOTIwPmQ/MTkyMDozRTM+ZD8zRTM6NDMyMD5kPzQzMjA6MTk2MCpiaihkLzE5NjApKS1kLGM8ZCYmKGQ9YykpO2lmKDEwPGQpe2EudGltZW91dEhhbmRsZT1IZChKai5iaW5kKG51bGwsYSksZCk7YnJlYWt9SmooYSk7YnJlYWs7Y2FzZSBqajppZigxMDczNzQxODIzIT09bGomJm51bGwhPT1uail7Zj1sajt2YXIgZz1uajtkPWcuYnVzeU1pbkR1cmF0aW9uTXN8MDswPj1kP2Q9MDooZT1nLmJ1c3lEZWxheU1zfDAsZj0kZigpLSgxMCooMTA3Mzc0MTgyMS1mKS0oZy50aW1lb3V0TXN8MHx8NUUzKSksZD1mPD1lPzA6ZStkLWYpO2lmKDEwPGQpe3hpKGEsYyk7YS50aW1lb3V0SGFuZGxlPVxuSGQoSmouYmluZChudWxsLGEpLGQpO2JyZWFrfX1KaihhKTticmVhaztkZWZhdWx0OnRocm93IEVycm9yKHUoMzI5KSk7fVooYSk7aWYoYS5jYWxsYmFja05vZGU9PT1iKXJldHVybiBCai5iaW5kKG51bGwsYSl9fXJldHVybiBudWxsfVxuZnVuY3Rpb24geWooYSl7dmFyIGI9YS5sYXN0RXhwaXJlZFRpbWU7Yj0wIT09Yj9iOjEwNzM3NDE4MjM7aWYoKFcmKGZqfGdqKSkhPT1WKXRocm93IEVycm9yKHUoMzI3KSk7RGooKTthPT09VCYmYj09PVV8fEVqKGEsYik7aWYobnVsbCE9PVgpe3ZhciBjPVc7V3w9Zmo7dmFyIGQ9RmooKTtkbyB0cnl7S2ooKTticmVha31jYXRjaChlKXtIaihhLGUpfXdoaWxlKDEpO25nKCk7Vz1jO2NqLmN1cnJlbnQ9ZDtpZihTPT09aGopdGhyb3cgYz1raixFaihhLGIpLHhpKGEsYiksWihhKSxjO2lmKG51bGwhPT1YKXRocm93IEVycm9yKHUoMjYxKSk7YS5maW5pc2hlZFdvcms9YS5jdXJyZW50LmFsdGVybmF0ZTthLmZpbmlzaGVkRXhwaXJhdGlvblRpbWU9YjtUPW51bGw7SmooYSk7WihhKX1yZXR1cm4gbnVsbH1mdW5jdGlvbiBMaigpe2lmKG51bGwhPT10ail7dmFyIGE9dGo7dGo9bnVsbDthLmZvckVhY2goZnVuY3Rpb24oYSxjKXtDaihjLGEpO1ooYyl9KTtnZygpfX1cbmZ1bmN0aW9uIE1qKGEsYil7dmFyIGM9VztXfD0xO3RyeXtyZXR1cm4gYShiKX1maW5hbGx5e1c9YyxXPT09ViYmZ2coKX19ZnVuY3Rpb24gTmooYSxiKXt2YXIgYz1XO1cmPS0yO1d8PWVqO3RyeXtyZXR1cm4gYShiKX1maW5hbGx5e1c9YyxXPT09ViYmZ2coKX19XG5mdW5jdGlvbiBFaihhLGIpe2EuZmluaXNoZWRXb3JrPW51bGw7YS5maW5pc2hlZEV4cGlyYXRpb25UaW1lPTA7dmFyIGM9YS50aW1lb3V0SGFuZGxlOy0xIT09YyYmKGEudGltZW91dEhhbmRsZT0tMSxJZChjKSk7aWYobnVsbCE9PVgpZm9yKGM9WC5yZXR1cm47bnVsbCE9PWM7KXt2YXIgZD1jO3N3aXRjaChkLnRhZyl7Y2FzZSAxOmQ9ZC50eXBlLmNoaWxkQ29udGV4dFR5cGVzO251bGwhPT1kJiZ2b2lkIDAhPT1kJiZEZigpO2JyZWFrO2Nhc2UgMzplaCgpO0goSyk7SChKKTticmVhaztjYXNlIDU6Z2goZCk7YnJlYWs7Y2FzZSA0OmVoKCk7YnJlYWs7Y2FzZSAxMzpIKE0pO2JyZWFrO2Nhc2UgMTk6SChNKTticmVhaztjYXNlIDEwOm9nKGQpfWM9Yy5yZXR1cm59VD1hO1g9U2coYS5jdXJyZW50LG51bGwpO1U9YjtTPXRpO2tqPW51bGw7bWo9bGo9MTA3Mzc0MTgyMztuaj1udWxsO3dpPTA7b2o9ITF9XG5mdW5jdGlvbiBIaihhLGIpe2Rve3RyeXtuZygpO2poLmN1cnJlbnQ9c2g7aWYobWgpZm9yKHZhciBjPU4ubWVtb2l6ZWRTdGF0ZTtudWxsIT09Yzspe3ZhciBkPWMucXVldWU7bnVsbCE9PWQmJihkLnBlbmRpbmc9bnVsbCk7Yz1jLm5leHR9bGg9MDtQPU89Tj1udWxsO21oPSExO2lmKG51bGw9PT1YfHxudWxsPT09WC5yZXR1cm4pcmV0dXJuIFM9aGosa2o9YixYPW51bGw7YTp7dmFyIGU9YSxmPVgucmV0dXJuLGc9WCxoPWI7Yj1VO2cuZWZmZWN0VGFnfD0yMDQ4O2cuZmlyc3RFZmZlY3Q9Zy5sYXN0RWZmZWN0PW51bGw7aWYobnVsbCE9PWgmJlwib2JqZWN0XCI9PT10eXBlb2YgaCYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGgudGhlbil7dmFyIGs9aDtpZigwPT09KGcubW9kZSYyKSl7dmFyIGw9Zy5hbHRlcm5hdGU7bD8oZy51cGRhdGVRdWV1ZT1sLnVwZGF0ZVF1ZXVlLGcubWVtb2l6ZWRTdGF0ZT1sLm1lbW9pemVkU3RhdGUsZy5leHBpcmF0aW9uVGltZT1sLmV4cGlyYXRpb25UaW1lKTooZy51cGRhdGVRdWV1ZT1cbm51bGwsZy5tZW1vaXplZFN0YXRlPW51bGwpfXZhciBtPTAhPT0oTS5jdXJyZW50JjEpLHA9Zjtkb3t2YXIgeDtpZih4PTEzPT09cC50YWcpe3ZhciB6PXAubWVtb2l6ZWRTdGF0ZTtpZihudWxsIT09eil4PW51bGwhPT16LmRlaHlkcmF0ZWQ/ITA6ITE7ZWxzZXt2YXIgY2E9cC5tZW1vaXplZFByb3BzO3g9dm9pZCAwPT09Y2EuZmFsbGJhY2s/ITE6ITAhPT1jYS51bnN0YWJsZV9hdm9pZFRoaXNGYWxsYmFjaz8hMDptPyExOiEwfX1pZih4KXt2YXIgRD1wLnVwZGF0ZVF1ZXVlO2lmKG51bGw9PT1EKXt2YXIgdD1uZXcgU2V0O3QuYWRkKGspO3AudXBkYXRlUXVldWU9dH1lbHNlIEQuYWRkKGspO2lmKDA9PT0ocC5tb2RlJjIpKXtwLmVmZmVjdFRhZ3w9NjQ7Zy5lZmZlY3RUYWcmPS0yOTgxO2lmKDE9PT1nLnRhZylpZihudWxsPT09Zy5hbHRlcm5hdGUpZy50YWc9MTc7ZWxzZXt2YXIgeT13ZygxMDczNzQxODIzLG51bGwpO3kudGFnPTI7eGcoZyx5KX1nLmV4cGlyYXRpb25UaW1lPTEwNzM3NDE4MjM7XG5icmVhayBhfWg9dm9pZCAwO2c9Yjt2YXIgQT1lLnBpbmdDYWNoZTtudWxsPT09QT8oQT1lLnBpbmdDYWNoZT1uZXcgV2ksaD1uZXcgU2V0LEEuc2V0KGssaCkpOihoPUEuZ2V0KGspLHZvaWQgMD09PWgmJihoPW5ldyBTZXQsQS5zZXQoayxoKSkpO2lmKCFoLmhhcyhnKSl7aC5hZGQoZyk7dmFyIHE9T2ouYmluZChudWxsLGUsayxnKTtrLnRoZW4ocSxxKX1wLmVmZmVjdFRhZ3w9NDA5NjtwLmV4cGlyYXRpb25UaW1lPWI7YnJlYWsgYX1wPXAucmV0dXJufXdoaWxlKG51bGwhPT1wKTtoPUVycm9yKChwYihnLnR5cGUpfHxcIkEgUmVhY3QgY29tcG9uZW50XCIpK1wiIHN1c3BlbmRlZCB3aGlsZSByZW5kZXJpbmcsIGJ1dCBubyBmYWxsYmFjayBVSSB3YXMgc3BlY2lmaWVkLlxcblxcbkFkZCBhIDxTdXNwZW5zZSBmYWxsYmFjaz0uLi4+IGNvbXBvbmVudCBoaWdoZXIgaW4gdGhlIHRyZWUgdG8gcHJvdmlkZSBhIGxvYWRpbmcgaW5kaWNhdG9yIG9yIHBsYWNlaG9sZGVyIHRvIGRpc3BsYXkuXCIrcWIoZykpfVMhPT1cbmpqJiYoUz1paik7aD1BaShoLGcpO3A9Zjtkb3tzd2l0Y2gocC50YWcpe2Nhc2UgMzprPWg7cC5lZmZlY3RUYWd8PTQwOTY7cC5leHBpcmF0aW9uVGltZT1iO3ZhciBCPVhpKHAsayxiKTt5ZyhwLEIpO2JyZWFrIGE7Y2FzZSAxOms9aDt2YXIgdz1wLnR5cGUsdWI9cC5zdGF0ZU5vZGU7aWYoMD09PShwLmVmZmVjdFRhZyY2NCkmJihcImZ1bmN0aW9uXCI9PT10eXBlb2Ygdy5nZXREZXJpdmVkU3RhdGVGcm9tRXJyb3J8fG51bGwhPT11YiYmXCJmdW5jdGlvblwiPT09dHlwZW9mIHViLmNvbXBvbmVudERpZENhdGNoJiYobnVsbD09PWFqfHwhYWouaGFzKHViKSkpKXtwLmVmZmVjdFRhZ3w9NDA5NjtwLmV4cGlyYXRpb25UaW1lPWI7dmFyIHZiPSRpKHAsayxiKTt5ZyhwLHZiKTticmVhayBhfX1wPXAucmV0dXJufXdoaWxlKG51bGwhPT1wKX1YPVBqKFgpfWNhdGNoKFhjKXtiPVhjO2NvbnRpbnVlfWJyZWFrfXdoaWxlKDEpfVxuZnVuY3Rpb24gRmooKXt2YXIgYT1jai5jdXJyZW50O2NqLmN1cnJlbnQ9c2g7cmV0dXJuIG51bGw9PT1hP3NoOmF9ZnVuY3Rpb24gQWcoYSxiKXthPGxqJiYyPGEmJihsaj1hKTtudWxsIT09YiYmYTxtaiYmMjxhJiYobWo9YSxuaj1iKX1mdW5jdGlvbiBCZyhhKXthPndpJiYod2k9YSl9ZnVuY3Rpb24gS2ooKXtmb3IoO251bGwhPT1YOylYPVFqKFgpfWZ1bmN0aW9uIEdqKCl7Zm9yKDtudWxsIT09WCYmIVVmKCk7KVg9UWooWCl9ZnVuY3Rpb24gUWooYSl7dmFyIGI9UmooYS5hbHRlcm5hdGUsYSxVKTthLm1lbW9pemVkUHJvcHM9YS5wZW5kaW5nUHJvcHM7bnVsbD09PWImJihiPVBqKGEpKTtkai5jdXJyZW50PW51bGw7cmV0dXJuIGJ9XG5mdW5jdGlvbiBQaihhKXtYPWE7ZG97dmFyIGI9WC5hbHRlcm5hdGU7YT1YLnJldHVybjtpZigwPT09KFguZWZmZWN0VGFnJjIwNDgpKXtiPXNpKGIsWCxVKTtpZigxPT09VXx8MSE9PVguY2hpbGRFeHBpcmF0aW9uVGltZSl7Zm9yKHZhciBjPTAsZD1YLmNoaWxkO251bGwhPT1kOyl7dmFyIGU9ZC5leHBpcmF0aW9uVGltZSxmPWQuY2hpbGRFeHBpcmF0aW9uVGltZTtlPmMmJihjPWUpO2Y+YyYmKGM9Zik7ZD1kLnNpYmxpbmd9WC5jaGlsZEV4cGlyYXRpb25UaW1lPWN9aWYobnVsbCE9PWIpcmV0dXJuIGI7bnVsbCE9PWEmJjA9PT0oYS5lZmZlY3RUYWcmMjA0OCkmJihudWxsPT09YS5maXJzdEVmZmVjdCYmKGEuZmlyc3RFZmZlY3Q9WC5maXJzdEVmZmVjdCksbnVsbCE9PVgubGFzdEVmZmVjdCYmKG51bGwhPT1hLmxhc3RFZmZlY3QmJihhLmxhc3RFZmZlY3QubmV4dEVmZmVjdD1YLmZpcnN0RWZmZWN0KSxhLmxhc3RFZmZlY3Q9WC5sYXN0RWZmZWN0KSwxPFguZWZmZWN0VGFnJiYobnVsbCE9PVxuYS5sYXN0RWZmZWN0P2EubGFzdEVmZmVjdC5uZXh0RWZmZWN0PVg6YS5maXJzdEVmZmVjdD1YLGEubGFzdEVmZmVjdD1YKSl9ZWxzZXtiPXppKFgpO2lmKG51bGwhPT1iKXJldHVybiBiLmVmZmVjdFRhZyY9MjA0NyxiO251bGwhPT1hJiYoYS5maXJzdEVmZmVjdD1hLmxhc3RFZmZlY3Q9bnVsbCxhLmVmZmVjdFRhZ3w9MjA0OCl9Yj1YLnNpYmxpbmc7aWYobnVsbCE9PWIpcmV0dXJuIGI7WD1hfXdoaWxlKG51bGwhPT1YKTtTPT09dGkmJihTPWpqKTtyZXR1cm4gbnVsbH1mdW5jdGlvbiBJaihhKXt2YXIgYj1hLmV4cGlyYXRpb25UaW1lO2E9YS5jaGlsZEV4cGlyYXRpb25UaW1lO3JldHVybiBiPmE/YjphfWZ1bmN0aW9uIEpqKGEpe3ZhciBiPWFnKCk7Y2coOTksU2ouYmluZChudWxsLGEsYikpO3JldHVybiBudWxsfVxuZnVuY3Rpb24gU2ooYSxiKXtkbyBEaigpO3doaWxlKG51bGwhPT1yaik7aWYoKFcmKGZqfGdqKSkhPT1WKXRocm93IEVycm9yKHUoMzI3KSk7dmFyIGM9YS5maW5pc2hlZFdvcmssZD1hLmZpbmlzaGVkRXhwaXJhdGlvblRpbWU7aWYobnVsbD09PWMpcmV0dXJuIG51bGw7YS5maW5pc2hlZFdvcms9bnVsbDthLmZpbmlzaGVkRXhwaXJhdGlvblRpbWU9MDtpZihjPT09YS5jdXJyZW50KXRocm93IEVycm9yKHUoMTc3KSk7YS5jYWxsYmFja05vZGU9bnVsbDthLmNhbGxiYWNrRXhwaXJhdGlvblRpbWU9MDthLmNhbGxiYWNrUHJpb3JpdHk9OTA7YS5uZXh0S25vd25QZW5kaW5nTGV2ZWw9MDt2YXIgZT1JaihjKTthLmZpcnN0UGVuZGluZ1RpbWU9ZTtkPD1hLmxhc3RTdXNwZW5kZWRUaW1lP2EuZmlyc3RTdXNwZW5kZWRUaW1lPWEubGFzdFN1c3BlbmRlZFRpbWU9YS5uZXh0S25vd25QZW5kaW5nTGV2ZWw9MDpkPD1hLmZpcnN0U3VzcGVuZGVkVGltZSYmKGEuZmlyc3RTdXNwZW5kZWRUaW1lPVxuZC0xKTtkPD1hLmxhc3RQaW5nZWRUaW1lJiYoYS5sYXN0UGluZ2VkVGltZT0wKTtkPD1hLmxhc3RFeHBpcmVkVGltZSYmKGEubGFzdEV4cGlyZWRUaW1lPTApO2E9PT1UJiYoWD1UPW51bGwsVT0wKTsxPGMuZWZmZWN0VGFnP251bGwhPT1jLmxhc3RFZmZlY3Q/KGMubGFzdEVmZmVjdC5uZXh0RWZmZWN0PWMsZT1jLmZpcnN0RWZmZWN0KTplPWM6ZT1jLmZpcnN0RWZmZWN0O2lmKG51bGwhPT1lKXt2YXIgZj1XO1d8PWdqO2RqLmN1cnJlbnQ9bnVsbDtEZD1mZDt2YXIgZz14ZCgpO2lmKHlkKGcpKXtpZihcInNlbGVjdGlvblN0YXJ0XCJpbiBnKXZhciBoPXtzdGFydDpnLnNlbGVjdGlvblN0YXJ0LGVuZDpnLnNlbGVjdGlvbkVuZH07ZWxzZSBhOntoPShoPWcub3duZXJEb2N1bWVudCkmJmguZGVmYXVsdFZpZXd8fHdpbmRvdzt2YXIgaz1oLmdldFNlbGVjdGlvbiYmaC5nZXRTZWxlY3Rpb24oKTtpZihrJiYwIT09ay5yYW5nZUNvdW50KXtoPWsuYW5jaG9yTm9kZTt2YXIgbD1rLmFuY2hvck9mZnNldCxcbm09ay5mb2N1c05vZGU7az1rLmZvY3VzT2Zmc2V0O3RyeXtoLm5vZGVUeXBlLG0ubm9kZVR5cGV9Y2F0Y2god2Ipe2g9bnVsbDticmVhayBhfXZhciBwPTAseD0tMSx6PS0xLGNhPTAsRD0wLHQ9Zyx5PW51bGw7Yjpmb3IoOzspe2Zvcih2YXIgQTs7KXt0IT09aHx8MCE9PWwmJjMhPT10Lm5vZGVUeXBlfHwoeD1wK2wpO3QhPT1tfHwwIT09ayYmMyE9PXQubm9kZVR5cGV8fCh6PXArayk7Mz09PXQubm9kZVR5cGUmJihwKz10Lm5vZGVWYWx1ZS5sZW5ndGgpO2lmKG51bGw9PT0oQT10LmZpcnN0Q2hpbGQpKWJyZWFrO3k9dDt0PUF9Zm9yKDs7KXtpZih0PT09ZylicmVhayBiO3k9PT1oJiYrK2NhPT09bCYmKHg9cCk7eT09PW0mJisrRD09PWsmJih6PXApO2lmKG51bGwhPT0oQT10Lm5leHRTaWJsaW5nKSlicmVhazt0PXk7eT10LnBhcmVudE5vZGV9dD1BfWg9LTE9PT14fHwtMT09PXo/bnVsbDp7c3RhcnQ6eCxlbmQ6en19ZWxzZSBoPW51bGx9aD1ofHx7c3RhcnQ6MCxlbmQ6MH19ZWxzZSBoPVxubnVsbDtFZD17YWN0aXZlRWxlbWVudERldGFjaGVkOm51bGwsZm9jdXNlZEVsZW06ZyxzZWxlY3Rpb25SYW5nZTpofTtmZD0hMTtZPWU7ZG8gdHJ5e1RqKCl9Y2F0Y2god2Ipe2lmKG51bGw9PT1ZKXRocm93IEVycm9yKHUoMzMwKSk7RWkoWSx3Yik7WT1ZLm5leHRFZmZlY3R9d2hpbGUobnVsbCE9PVkpO1k9ZTtkbyB0cnl7Zm9yKGc9YSxoPWI7bnVsbCE9PVk7KXt2YXIgcT1ZLmVmZmVjdFRhZztxJjE2JiZSYihZLnN0YXRlTm9kZSxcIlwiKTtpZihxJjEyOCl7dmFyIEI9WS5hbHRlcm5hdGU7aWYobnVsbCE9PUIpe3ZhciB3PUIucmVmO251bGwhPT13JiYoXCJmdW5jdGlvblwiPT09dHlwZW9mIHc/dyhudWxsKTp3LmN1cnJlbnQ9bnVsbCl9fXN3aXRjaChxJjEwMzgpe2Nhc2UgMjpQaShZKTtZLmVmZmVjdFRhZyY9LTM7YnJlYWs7Y2FzZSA2OlBpKFkpO1kuZWZmZWN0VGFnJj0tMztTaShZLmFsdGVybmF0ZSxZKTticmVhaztjYXNlIDEwMjQ6WS5lZmZlY3RUYWcmPS0xMDI1O2JyZWFrO2Nhc2UgMTAyODpZLmVmZmVjdFRhZyY9XG4tMTAyNTtTaShZLmFsdGVybmF0ZSxZKTticmVhaztjYXNlIDQ6U2koWS5hbHRlcm5hdGUsWSk7YnJlYWs7Y2FzZSA4Omw9WSxNaShnLGwsaCksTmkobCl9WT1ZLm5leHRFZmZlY3R9fWNhdGNoKHdiKXtpZihudWxsPT09WSl0aHJvdyBFcnJvcih1KDMzMCkpO0VpKFksd2IpO1k9WS5uZXh0RWZmZWN0fXdoaWxlKG51bGwhPT1ZKTt3PUVkO0I9eGQoKTtxPXcuZm9jdXNlZEVsZW07aD13LnNlbGVjdGlvblJhbmdlO2lmKEIhPT1xJiZxJiZxLm93bmVyRG9jdW1lbnQmJndkKHEub3duZXJEb2N1bWVudC5kb2N1bWVudEVsZW1lbnQscSkpe251bGwhPT1oJiZ5ZChxKSYmKEI9aC5zdGFydCx3PWguZW5kLHZvaWQgMD09PXcmJih3PUIpLFwic2VsZWN0aW9uU3RhcnRcImluIHE/KHEuc2VsZWN0aW9uU3RhcnQ9QixxLnNlbGVjdGlvbkVuZD1NYXRoLm1pbih3LHEudmFsdWUubGVuZ3RoKSk6KHc9KEI9cS5vd25lckRvY3VtZW50fHxkb2N1bWVudCkmJkIuZGVmYXVsdFZpZXd8fHdpbmRvdyx3LmdldFNlbGVjdGlvbiYmXG4odz13LmdldFNlbGVjdGlvbigpLGw9cS50ZXh0Q29udGVudC5sZW5ndGgsZz1NYXRoLm1pbihoLnN0YXJ0LGwpLGg9dm9pZCAwPT09aC5lbmQ/ZzpNYXRoLm1pbihoLmVuZCxsKSwhdy5leHRlbmQmJmc+aCYmKGw9aCxoPWcsZz1sKSxsPXZkKHEsZyksbT12ZChxLGgpLGwmJm0mJigxIT09dy5yYW5nZUNvdW50fHx3LmFuY2hvck5vZGUhPT1sLm5vZGV8fHcuYW5jaG9yT2Zmc2V0IT09bC5vZmZzZXR8fHcuZm9jdXNOb2RlIT09bS5ub2RlfHx3LmZvY3VzT2Zmc2V0IT09bS5vZmZzZXQpJiYoQj1CLmNyZWF0ZVJhbmdlKCksQi5zZXRTdGFydChsLm5vZGUsbC5vZmZzZXQpLHcucmVtb3ZlQWxsUmFuZ2VzKCksZz5oPyh3LmFkZFJhbmdlKEIpLHcuZXh0ZW5kKG0ubm9kZSxtLm9mZnNldCkpOihCLnNldEVuZChtLm5vZGUsbS5vZmZzZXQpLHcuYWRkUmFuZ2UoQikpKSkpKTtCPVtdO2Zvcih3PXE7dz13LnBhcmVudE5vZGU7KTE9PT13Lm5vZGVUeXBlJiZCLnB1c2goe2VsZW1lbnQ6dyxsZWZ0Oncuc2Nyb2xsTGVmdCxcbnRvcDp3LnNjcm9sbFRvcH0pO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBxLmZvY3VzJiZxLmZvY3VzKCk7Zm9yKHE9MDtxPEIubGVuZ3RoO3ErKyl3PUJbcV0sdy5lbGVtZW50LnNjcm9sbExlZnQ9dy5sZWZ0LHcuZWxlbWVudC5zY3JvbGxUb3A9dy50b3B9ZmQ9ISFEZDtFZD1EZD1udWxsO2EuY3VycmVudD1jO1k9ZTtkbyB0cnl7Zm9yKHE9YTtudWxsIT09WTspe3ZhciB1Yj1ZLmVmZmVjdFRhZzt1YiYzNiYmSmkocSxZLmFsdGVybmF0ZSxZKTtpZih1YiYxMjgpe0I9dm9pZCAwO3ZhciB2Yj1ZLnJlZjtpZihudWxsIT09dmIpe3ZhciBYYz1ZLnN0YXRlTm9kZTtzd2l0Y2goWS50YWcpe2Nhc2UgNTpCPVhjO2JyZWFrO2RlZmF1bHQ6Qj1YY31cImZ1bmN0aW9uXCI9PT10eXBlb2YgdmI/dmIoQik6dmIuY3VycmVudD1CfX1ZPVkubmV4dEVmZmVjdH19Y2F0Y2god2Ipe2lmKG51bGw9PT1ZKXRocm93IEVycm9yKHUoMzMwKSk7RWkoWSx3Yik7WT1ZLm5leHRFZmZlY3R9d2hpbGUobnVsbCE9PVkpO1k9XG5udWxsO1ZmKCk7Vz1mfWVsc2UgYS5jdXJyZW50PWM7aWYocWopcWo9ITEscmo9YSxzaj1iO2Vsc2UgZm9yKFk9ZTtudWxsIT09WTspYj1ZLm5leHRFZmZlY3QsWS5uZXh0RWZmZWN0PW51bGwsWT1iO2I9YS5maXJzdFBlbmRpbmdUaW1lOzA9PT1iJiYoYWo9bnVsbCk7MTA3Mzc0MTgyMz09PWI/YT09PXZqP3VqKys6KHVqPTAsdmo9YSk6dWo9MDtcImZ1bmN0aW9uXCI9PT10eXBlb2YgVWomJlVqKGMuc3RhdGVOb2RlLGQpO1ooYSk7aWYoWWkpdGhyb3cgWWk9ITEsYT1aaSxaaT1udWxsLGE7aWYoKFcmZWopIT09VilyZXR1cm4gbnVsbDtnZygpO3JldHVybiBudWxsfWZ1bmN0aW9uIFRqKCl7Zm9yKDtudWxsIT09WTspe3ZhciBhPVkuZWZmZWN0VGFnOzAhPT0oYSYyNTYpJiZHaShZLmFsdGVybmF0ZSxZKTswPT09KGEmNTEyKXx8cWp8fChxaj0hMCxkZyg5NyxmdW5jdGlvbigpe0RqKCk7cmV0dXJuIG51bGx9KSk7WT1ZLm5leHRFZmZlY3R9fVxuZnVuY3Rpb24gRGooKXtpZig5MCE9PXNqKXt2YXIgYT05Nzxzaj85Nzpzajtzaj05MDtyZXR1cm4gY2coYSxWail9fWZ1bmN0aW9uIFZqKCl7aWYobnVsbD09PXJqKXJldHVybiExO3ZhciBhPXJqO3JqPW51bGw7aWYoKFcmKGZqfGdqKSkhPT1WKXRocm93IEVycm9yKHUoMzMxKSk7dmFyIGI9VztXfD1najtmb3IoYT1hLmN1cnJlbnQuZmlyc3RFZmZlY3Q7bnVsbCE9PWE7KXt0cnl7dmFyIGM9YTtpZigwIT09KGMuZWZmZWN0VGFnJjUxMikpc3dpdGNoKGMudGFnKXtjYXNlIDA6Y2FzZSAxMTpjYXNlIDE1OmNhc2UgMjI6SGkoNSxjKSxJaSg1LGMpfX1jYXRjaChkKXtpZihudWxsPT09YSl0aHJvdyBFcnJvcih1KDMzMCkpO0VpKGEsZCl9Yz1hLm5leHRFZmZlY3Q7YS5uZXh0RWZmZWN0PW51bGw7YT1jfVc9YjtnZygpO3JldHVybiEwfVxuZnVuY3Rpb24gV2ooYSxiLGMpe2I9QWkoYyxiKTtiPVhpKGEsYiwxMDczNzQxODIzKTt4ZyhhLGIpO2E9eGooYSwxMDczNzQxODIzKTtudWxsIT09YSYmWihhKX1mdW5jdGlvbiBFaShhLGIpe2lmKDM9PT1hLnRhZylXaihhLGEsYik7ZWxzZSBmb3IodmFyIGM9YS5yZXR1cm47bnVsbCE9PWM7KXtpZigzPT09Yy50YWcpe1dqKGMsYSxiKTticmVha31lbHNlIGlmKDE9PT1jLnRhZyl7dmFyIGQ9Yy5zdGF0ZU5vZGU7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGMudHlwZS5nZXREZXJpdmVkU3RhdGVGcm9tRXJyb3J8fFwiZnVuY3Rpb25cIj09PXR5cGVvZiBkLmNvbXBvbmVudERpZENhdGNoJiYobnVsbD09PWFqfHwhYWouaGFzKGQpKSl7YT1BaShiLGEpO2E9JGkoYyxhLDEwNzM3NDE4MjMpO3hnKGMsYSk7Yz14aihjLDEwNzM3NDE4MjMpO251bGwhPT1jJiZaKGMpO2JyZWFrfX1jPWMucmV0dXJufX1cbmZ1bmN0aW9uIE9qKGEsYixjKXt2YXIgZD1hLnBpbmdDYWNoZTtudWxsIT09ZCYmZC5kZWxldGUoYik7VD09PWEmJlU9PT1jP1M9PT12aXx8Uz09PXVpJiYxMDczNzQxODIzPT09bGomJiRmKCktVGk8cGo/RWooYSxVKTpvaj0hMDpBaihhLGMpJiYoYj1hLmxhc3RQaW5nZWRUaW1lLDAhPT1iJiZiPGN8fChhLmxhc3RQaW5nZWRUaW1lPWMsWihhKSkpfWZ1bmN0aW9uIFZpKGEsYil7dmFyIGM9YS5zdGF0ZU5vZGU7bnVsbCE9PWMmJmMuZGVsZXRlKGIpO2I9MDswPT09YiYmKGI9R2coKSxiPUhnKGIsYSxudWxsKSk7YT14aihhLGIpO251bGwhPT1hJiZaKGEpfXZhciBSajtcblJqPWZ1bmN0aW9uKGEsYixjKXt2YXIgZD1iLmV4cGlyYXRpb25UaW1lO2lmKG51bGwhPT1hKXt2YXIgZT1iLnBlbmRpbmdQcm9wcztpZihhLm1lbW9pemVkUHJvcHMhPT1lfHxLLmN1cnJlbnQpcmc9ITA7ZWxzZXtpZihkPGMpe3JnPSExO3N3aXRjaChiLnRhZyl7Y2FzZSAzOmhpKGIpO1hoKCk7YnJlYWs7Y2FzZSA1OmZoKGIpO2lmKGIubW9kZSY0JiYxIT09YyYmZS5oaWRkZW4pcmV0dXJuIGIuZXhwaXJhdGlvblRpbWU9Yi5jaGlsZEV4cGlyYXRpb25UaW1lPTEsbnVsbDticmVhaztjYXNlIDE6TChiLnR5cGUpJiZHZihiKTticmVhaztjYXNlIDQ6ZGgoYixiLnN0YXRlTm9kZS5jb250YWluZXJJbmZvKTticmVhaztjYXNlIDEwOmQ9Yi5tZW1vaXplZFByb3BzLnZhbHVlO2U9Yi50eXBlLl9jb250ZXh0O0koamcsZS5fY3VycmVudFZhbHVlKTtlLl9jdXJyZW50VmFsdWU9ZDticmVhaztjYXNlIDEzOmlmKG51bGwhPT1iLm1lbW9pemVkU3RhdGUpe2Q9Yi5jaGlsZC5jaGlsZEV4cGlyYXRpb25UaW1lO1xuaWYoMCE9PWQmJmQ+PWMpcmV0dXJuIGppKGEsYixjKTtJKE0sTS5jdXJyZW50JjEpO2I9JGgoYSxiLGMpO3JldHVybiBudWxsIT09Yj9iLnNpYmxpbmc6bnVsbH1JKE0sTS5jdXJyZW50JjEpO2JyZWFrO2Nhc2UgMTk6ZD1iLmNoaWxkRXhwaXJhdGlvblRpbWU+PWM7aWYoMCE9PShhLmVmZmVjdFRhZyY2NCkpe2lmKGQpcmV0dXJuIG1pKGEsYixjKTtiLmVmZmVjdFRhZ3w9NjR9ZT1iLm1lbW9pemVkU3RhdGU7bnVsbCE9PWUmJihlLnJlbmRlcmluZz1udWxsLGUudGFpbD1udWxsKTtJKE0sTS5jdXJyZW50KTtpZighZClyZXR1cm4gbnVsbH1yZXR1cm4gJGgoYSxiLGMpfXJnPSExfX1lbHNlIHJnPSExO2IuZXhwaXJhdGlvblRpbWU9MDtzd2l0Y2goYi50YWcpe2Nhc2UgMjpkPWIudHlwZTtudWxsIT09YSYmKGEuYWx0ZXJuYXRlPW51bGwsYi5hbHRlcm5hdGU9bnVsbCxiLmVmZmVjdFRhZ3w9Mik7YT1iLnBlbmRpbmdQcm9wcztlPUNmKGIsSi5jdXJyZW50KTtxZyhiLGMpO2U9b2gobnVsbCxcbmIsZCxhLGUsYyk7Yi5lZmZlY3RUYWd8PTE7aWYoXCJvYmplY3RcIj09PXR5cGVvZiBlJiZudWxsIT09ZSYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGUucmVuZGVyJiZ2b2lkIDA9PT1lLiQkdHlwZW9mKXtiLnRhZz0xO2IubWVtb2l6ZWRTdGF0ZT1udWxsO2IudXBkYXRlUXVldWU9bnVsbDtpZihMKGQpKXt2YXIgZj0hMDtHZihiKX1lbHNlIGY9ITE7Yi5tZW1vaXplZFN0YXRlPW51bGwhPT1lLnN0YXRlJiZ2b2lkIDAhPT1lLnN0YXRlP2Uuc3RhdGU6bnVsbDt1ZyhiKTt2YXIgZz1kLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcztcImZ1bmN0aW9uXCI9PT10eXBlb2YgZyYmRmcoYixkLGcsYSk7ZS51cGRhdGVyPUpnO2Iuc3RhdGVOb2RlPWU7ZS5fcmVhY3RJbnRlcm5hbEZpYmVyPWI7TmcoYixkLGEsYyk7Yj1naShudWxsLGIsZCwhMCxmLGMpfWVsc2UgYi50YWc9MCxSKG51bGwsYixlLGMpLGI9Yi5jaGlsZDtyZXR1cm4gYjtjYXNlIDE2OmE6e2U9Yi5lbGVtZW50VHlwZTtudWxsIT09YSYmKGEuYWx0ZXJuYXRlPVxubnVsbCxiLmFsdGVybmF0ZT1udWxsLGIuZWZmZWN0VGFnfD0yKTthPWIucGVuZGluZ1Byb3BzO29iKGUpO2lmKDEhPT1lLl9zdGF0dXMpdGhyb3cgZS5fcmVzdWx0O2U9ZS5fcmVzdWx0O2IudHlwZT1lO2Y9Yi50YWc9WGooZSk7YT1pZyhlLGEpO3N3aXRjaChmKXtjYXNlIDA6Yj1kaShudWxsLGIsZSxhLGMpO2JyZWFrIGE7Y2FzZSAxOmI9ZmkobnVsbCxiLGUsYSxjKTticmVhayBhO2Nhc2UgMTE6Yj1aaChudWxsLGIsZSxhLGMpO2JyZWFrIGE7Y2FzZSAxNDpiPWFpKG51bGwsYixlLGlnKGUudHlwZSxhKSxkLGMpO2JyZWFrIGF9dGhyb3cgRXJyb3IodSgzMDYsZSxcIlwiKSk7fXJldHVybiBiO2Nhc2UgMDpyZXR1cm4gZD1iLnR5cGUsZT1iLnBlbmRpbmdQcm9wcyxlPWIuZWxlbWVudFR5cGU9PT1kP2U6aWcoZCxlKSxkaShhLGIsZCxlLGMpO2Nhc2UgMTpyZXR1cm4gZD1iLnR5cGUsZT1iLnBlbmRpbmdQcm9wcyxlPWIuZWxlbWVudFR5cGU9PT1kP2U6aWcoZCxlKSxmaShhLGIsZCxlLGMpO1xuY2FzZSAzOmhpKGIpO2Q9Yi51cGRhdGVRdWV1ZTtpZihudWxsPT09YXx8bnVsbD09PWQpdGhyb3cgRXJyb3IodSgyODIpKTtkPWIucGVuZGluZ1Byb3BzO2U9Yi5tZW1vaXplZFN0YXRlO2U9bnVsbCE9PWU/ZS5lbGVtZW50Om51bGw7dmcoYSxiKTt6ZyhiLGQsbnVsbCxjKTtkPWIubWVtb2l6ZWRTdGF0ZS5lbGVtZW50O2lmKGQ9PT1lKVhoKCksYj0kaChhLGIsYyk7ZWxzZXtpZihlPWIuc3RhdGVOb2RlLmh5ZHJhdGUpUGg9SmQoYi5zdGF0ZU5vZGUuY29udGFpbmVySW5mby5maXJzdENoaWxkKSxPaD1iLGU9UWg9ITA7aWYoZSlmb3IoYz1ZZyhiLG51bGwsZCxjKSxiLmNoaWxkPWM7YzspYy5lZmZlY3RUYWc9Yy5lZmZlY3RUYWcmLTN8MTAyNCxjPWMuc2libGluZztlbHNlIFIoYSxiLGQsYyksWGgoKTtiPWIuY2hpbGR9cmV0dXJuIGI7Y2FzZSA1OnJldHVybiBmaChiKSxudWxsPT09YSYmVWgoYiksZD1iLnR5cGUsZT1iLnBlbmRpbmdQcm9wcyxmPW51bGwhPT1hP2EubWVtb2l6ZWRQcm9wczpcbm51bGwsZz1lLmNoaWxkcmVuLEdkKGQsZSk/Zz1udWxsOm51bGwhPT1mJiZHZChkLGYpJiYoYi5lZmZlY3RUYWd8PTE2KSxlaShhLGIpLGIubW9kZSY0JiYxIT09YyYmZS5oaWRkZW4/KGIuZXhwaXJhdGlvblRpbWU9Yi5jaGlsZEV4cGlyYXRpb25UaW1lPTEsYj1udWxsKTooUihhLGIsZyxjKSxiPWIuY2hpbGQpLGI7Y2FzZSA2OnJldHVybiBudWxsPT09YSYmVWgoYiksbnVsbDtjYXNlIDEzOnJldHVybiBqaShhLGIsYyk7Y2FzZSA0OnJldHVybiBkaChiLGIuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8pLGQ9Yi5wZW5kaW5nUHJvcHMsbnVsbD09PWE/Yi5jaGlsZD1YZyhiLG51bGwsZCxjKTpSKGEsYixkLGMpLGIuY2hpbGQ7Y2FzZSAxMTpyZXR1cm4gZD1iLnR5cGUsZT1iLnBlbmRpbmdQcm9wcyxlPWIuZWxlbWVudFR5cGU9PT1kP2U6aWcoZCxlKSxaaChhLGIsZCxlLGMpO2Nhc2UgNzpyZXR1cm4gUihhLGIsYi5wZW5kaW5nUHJvcHMsYyksYi5jaGlsZDtjYXNlIDg6cmV0dXJuIFIoYSxcbmIsYi5wZW5kaW5nUHJvcHMuY2hpbGRyZW4sYyksYi5jaGlsZDtjYXNlIDEyOnJldHVybiBSKGEsYixiLnBlbmRpbmdQcm9wcy5jaGlsZHJlbixjKSxiLmNoaWxkO2Nhc2UgMTA6YTp7ZD1iLnR5cGUuX2NvbnRleHQ7ZT1iLnBlbmRpbmdQcm9wcztnPWIubWVtb2l6ZWRQcm9wcztmPWUudmFsdWU7dmFyIGg9Yi50eXBlLl9jb250ZXh0O0koamcsaC5fY3VycmVudFZhbHVlKTtoLl9jdXJyZW50VmFsdWU9ZjtpZihudWxsIT09ZylpZihoPWcudmFsdWUsZj0kZShoLGYpPzA6KFwiZnVuY3Rpb25cIj09PXR5cGVvZiBkLl9jYWxjdWxhdGVDaGFuZ2VkQml0cz9kLl9jYWxjdWxhdGVDaGFuZ2VkQml0cyhoLGYpOjEwNzM3NDE4MjMpfDAsMD09PWYpe2lmKGcuY2hpbGRyZW49PT1lLmNoaWxkcmVuJiYhSy5jdXJyZW50KXtiPSRoKGEsYixjKTticmVhayBhfX1lbHNlIGZvcihoPWIuY2hpbGQsbnVsbCE9PWgmJihoLnJldHVybj1iKTtudWxsIT09aDspe3ZhciBrPWguZGVwZW5kZW5jaWVzO2lmKG51bGwhPT1cbmspe2c9aC5jaGlsZDtmb3IodmFyIGw9ay5maXJzdENvbnRleHQ7bnVsbCE9PWw7KXtpZihsLmNvbnRleHQ9PT1kJiYwIT09KGwub2JzZXJ2ZWRCaXRzJmYpKXsxPT09aC50YWcmJihsPXdnKGMsbnVsbCksbC50YWc9Mix4ZyhoLGwpKTtoLmV4cGlyYXRpb25UaW1lPGMmJihoLmV4cGlyYXRpb25UaW1lPWMpO2w9aC5hbHRlcm5hdGU7bnVsbCE9PWwmJmwuZXhwaXJhdGlvblRpbWU8YyYmKGwuZXhwaXJhdGlvblRpbWU9Yyk7cGcoaC5yZXR1cm4sYyk7ay5leHBpcmF0aW9uVGltZTxjJiYoay5leHBpcmF0aW9uVGltZT1jKTticmVha31sPWwubmV4dH19ZWxzZSBnPTEwPT09aC50YWc/aC50eXBlPT09Yi50eXBlP251bGw6aC5jaGlsZDpoLmNoaWxkO2lmKG51bGwhPT1nKWcucmV0dXJuPWg7ZWxzZSBmb3IoZz1oO251bGwhPT1nOyl7aWYoZz09PWIpe2c9bnVsbDticmVha31oPWcuc2libGluZztpZihudWxsIT09aCl7aC5yZXR1cm49Zy5yZXR1cm47Zz1oO2JyZWFrfWc9Zy5yZXR1cm59aD1cbmd9UihhLGIsZS5jaGlsZHJlbixjKTtiPWIuY2hpbGR9cmV0dXJuIGI7Y2FzZSA5OnJldHVybiBlPWIudHlwZSxmPWIucGVuZGluZ1Byb3BzLGQ9Zi5jaGlsZHJlbixxZyhiLGMpLGU9c2coZSxmLnVuc3RhYmxlX29ic2VydmVkQml0cyksZD1kKGUpLGIuZWZmZWN0VGFnfD0xLFIoYSxiLGQsYyksYi5jaGlsZDtjYXNlIDE0OnJldHVybiBlPWIudHlwZSxmPWlnKGUsYi5wZW5kaW5nUHJvcHMpLGY9aWcoZS50eXBlLGYpLGFpKGEsYixlLGYsZCxjKTtjYXNlIDE1OnJldHVybiBjaShhLGIsYi50eXBlLGIucGVuZGluZ1Byb3BzLGQsYyk7Y2FzZSAxNzpyZXR1cm4gZD1iLnR5cGUsZT1iLnBlbmRpbmdQcm9wcyxlPWIuZWxlbWVudFR5cGU9PT1kP2U6aWcoZCxlKSxudWxsIT09YSYmKGEuYWx0ZXJuYXRlPW51bGwsYi5hbHRlcm5hdGU9bnVsbCxiLmVmZmVjdFRhZ3w9MiksYi50YWc9MSxMKGQpPyhhPSEwLEdmKGIpKTphPSExLHFnKGIsYyksTGcoYixkLGUpLE5nKGIsZCxlLGMpLGdpKG51bGwsXG5iLGQsITAsYSxjKTtjYXNlIDE5OnJldHVybiBtaShhLGIsYyl9dGhyb3cgRXJyb3IodSgxNTYsYi50YWcpKTt9O3ZhciBVaj1udWxsLExpPW51bGw7ZnVuY3Rpb24gWWooYSl7aWYoXCJ1bmRlZmluZWRcIj09PXR5cGVvZiBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18pcmV0dXJuITE7dmFyIGI9X19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fO2lmKGIuaXNEaXNhYmxlZHx8IWIuc3VwcG9ydHNGaWJlcilyZXR1cm4hMDt0cnl7dmFyIGM9Yi5pbmplY3QoYSk7VWo9ZnVuY3Rpb24oYSl7dHJ5e2Iub25Db21taXRGaWJlclJvb3QoYyxhLHZvaWQgMCw2ND09PShhLmN1cnJlbnQuZWZmZWN0VGFnJjY0KSl9Y2F0Y2goZSl7fX07TGk9ZnVuY3Rpb24oYSl7dHJ5e2Iub25Db21taXRGaWJlclVubW91bnQoYyxhKX1jYXRjaChlKXt9fX1jYXRjaChkKXt9cmV0dXJuITB9XG5mdW5jdGlvbiBaaihhLGIsYyxkKXt0aGlzLnRhZz1hO3RoaXMua2V5PWM7dGhpcy5zaWJsaW5nPXRoaXMuY2hpbGQ9dGhpcy5yZXR1cm49dGhpcy5zdGF0ZU5vZGU9dGhpcy50eXBlPXRoaXMuZWxlbWVudFR5cGU9bnVsbDt0aGlzLmluZGV4PTA7dGhpcy5yZWY9bnVsbDt0aGlzLnBlbmRpbmdQcm9wcz1iO3RoaXMuZGVwZW5kZW5jaWVzPXRoaXMubWVtb2l6ZWRTdGF0ZT10aGlzLnVwZGF0ZVF1ZXVlPXRoaXMubWVtb2l6ZWRQcm9wcz1udWxsO3RoaXMubW9kZT1kO3RoaXMuZWZmZWN0VGFnPTA7dGhpcy5sYXN0RWZmZWN0PXRoaXMuZmlyc3RFZmZlY3Q9dGhpcy5uZXh0RWZmZWN0PW51bGw7dGhpcy5jaGlsZEV4cGlyYXRpb25UaW1lPXRoaXMuZXhwaXJhdGlvblRpbWU9MDt0aGlzLmFsdGVybmF0ZT1udWxsfWZ1bmN0aW9uIFNoKGEsYixjLGQpe3JldHVybiBuZXcgWmooYSxiLGMsZCl9XG5mdW5jdGlvbiBiaShhKXthPWEucHJvdG90eXBlO3JldHVybiEoIWF8fCFhLmlzUmVhY3RDb21wb25lbnQpfWZ1bmN0aW9uIFhqKGEpe2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBhKXJldHVybiBiaShhKT8xOjA7aWYodm9pZCAwIT09YSYmbnVsbCE9PWEpe2E9YS4kJHR5cGVvZjtpZihhPT09Z2IpcmV0dXJuIDExO2lmKGE9PT1qYilyZXR1cm4gMTR9cmV0dXJuIDJ9XG5mdW5jdGlvbiBTZyhhLGIpe3ZhciBjPWEuYWx0ZXJuYXRlO251bGw9PT1jPyhjPVNoKGEudGFnLGIsYS5rZXksYS5tb2RlKSxjLmVsZW1lbnRUeXBlPWEuZWxlbWVudFR5cGUsYy50eXBlPWEudHlwZSxjLnN0YXRlTm9kZT1hLnN0YXRlTm9kZSxjLmFsdGVybmF0ZT1hLGEuYWx0ZXJuYXRlPWMpOihjLnBlbmRpbmdQcm9wcz1iLGMuZWZmZWN0VGFnPTAsYy5uZXh0RWZmZWN0PW51bGwsYy5maXJzdEVmZmVjdD1udWxsLGMubGFzdEVmZmVjdD1udWxsKTtjLmNoaWxkRXhwaXJhdGlvblRpbWU9YS5jaGlsZEV4cGlyYXRpb25UaW1lO2MuZXhwaXJhdGlvblRpbWU9YS5leHBpcmF0aW9uVGltZTtjLmNoaWxkPWEuY2hpbGQ7Yy5tZW1vaXplZFByb3BzPWEubWVtb2l6ZWRQcm9wcztjLm1lbW9pemVkU3RhdGU9YS5tZW1vaXplZFN0YXRlO2MudXBkYXRlUXVldWU9YS51cGRhdGVRdWV1ZTtiPWEuZGVwZW5kZW5jaWVzO2MuZGVwZW5kZW5jaWVzPW51bGw9PT1iP251bGw6e2V4cGlyYXRpb25UaW1lOmIuZXhwaXJhdGlvblRpbWUsXG5maXJzdENvbnRleHQ6Yi5maXJzdENvbnRleHQscmVzcG9uZGVyczpiLnJlc3BvbmRlcnN9O2Muc2libGluZz1hLnNpYmxpbmc7Yy5pbmRleD1hLmluZGV4O2MucmVmPWEucmVmO3JldHVybiBjfVxuZnVuY3Rpb24gVWcoYSxiLGMsZCxlLGYpe3ZhciBnPTI7ZD1hO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBhKWJpKGEpJiYoZz0xKTtlbHNlIGlmKFwic3RyaW5nXCI9PT10eXBlb2YgYSlnPTU7ZWxzZSBhOnN3aXRjaChhKXtjYXNlIGFiOnJldHVybiBXZyhjLmNoaWxkcmVuLGUsZixiKTtjYXNlIGZiOmc9ODtlfD03O2JyZWFrO2Nhc2UgYmI6Zz04O2V8PTE7YnJlYWs7Y2FzZSBjYjpyZXR1cm4gYT1TaCgxMixjLGIsZXw4KSxhLmVsZW1lbnRUeXBlPWNiLGEudHlwZT1jYixhLmV4cGlyYXRpb25UaW1lPWYsYTtjYXNlIGhiOnJldHVybiBhPVNoKDEzLGMsYixlKSxhLnR5cGU9aGIsYS5lbGVtZW50VHlwZT1oYixhLmV4cGlyYXRpb25UaW1lPWYsYTtjYXNlIGliOnJldHVybiBhPVNoKDE5LGMsYixlKSxhLmVsZW1lbnRUeXBlPWliLGEuZXhwaXJhdGlvblRpbWU9ZixhO2RlZmF1bHQ6aWYoXCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSlzd2l0Y2goYS4kJHR5cGVvZil7Y2FzZSBkYjpnPVxuMTA7YnJlYWsgYTtjYXNlIGViOmc9OTticmVhayBhO2Nhc2UgZ2I6Zz0xMTticmVhayBhO2Nhc2UgamI6Zz0xNDticmVhayBhO2Nhc2Uga2I6Zz0xNjtkPW51bGw7YnJlYWsgYTtjYXNlIGxiOmc9MjI7YnJlYWsgYX10aHJvdyBFcnJvcih1KDEzMCxudWxsPT1hP2E6dHlwZW9mIGEsXCJcIikpO31iPVNoKGcsYyxiLGUpO2IuZWxlbWVudFR5cGU9YTtiLnR5cGU9ZDtiLmV4cGlyYXRpb25UaW1lPWY7cmV0dXJuIGJ9ZnVuY3Rpb24gV2coYSxiLGMsZCl7YT1TaCg3LGEsZCxiKTthLmV4cGlyYXRpb25UaW1lPWM7cmV0dXJuIGF9ZnVuY3Rpb24gVGcoYSxiLGMpe2E9U2goNixhLG51bGwsYik7YS5leHBpcmF0aW9uVGltZT1jO3JldHVybiBhfVxuZnVuY3Rpb24gVmcoYSxiLGMpe2I9U2goNCxudWxsIT09YS5jaGlsZHJlbj9hLmNoaWxkcmVuOltdLGEua2V5LGIpO2IuZXhwaXJhdGlvblRpbWU9YztiLnN0YXRlTm9kZT17Y29udGFpbmVySW5mbzphLmNvbnRhaW5lckluZm8scGVuZGluZ0NoaWxkcmVuOm51bGwsaW1wbGVtZW50YXRpb246YS5pbXBsZW1lbnRhdGlvbn07cmV0dXJuIGJ9XG5mdW5jdGlvbiBhayhhLGIsYyl7dGhpcy50YWc9Yjt0aGlzLmN1cnJlbnQ9bnVsbDt0aGlzLmNvbnRhaW5lckluZm89YTt0aGlzLnBpbmdDYWNoZT10aGlzLnBlbmRpbmdDaGlsZHJlbj1udWxsO3RoaXMuZmluaXNoZWRFeHBpcmF0aW9uVGltZT0wO3RoaXMuZmluaXNoZWRXb3JrPW51bGw7dGhpcy50aW1lb3V0SGFuZGxlPS0xO3RoaXMucGVuZGluZ0NvbnRleHQ9dGhpcy5jb250ZXh0PW51bGw7dGhpcy5oeWRyYXRlPWM7dGhpcy5jYWxsYmFja05vZGU9bnVsbDt0aGlzLmNhbGxiYWNrUHJpb3JpdHk9OTA7dGhpcy5sYXN0RXhwaXJlZFRpbWU9dGhpcy5sYXN0UGluZ2VkVGltZT10aGlzLm5leHRLbm93blBlbmRpbmdMZXZlbD10aGlzLmxhc3RTdXNwZW5kZWRUaW1lPXRoaXMuZmlyc3RTdXNwZW5kZWRUaW1lPXRoaXMuZmlyc3RQZW5kaW5nVGltZT0wfVxuZnVuY3Rpb24gQWooYSxiKXt2YXIgYz1hLmZpcnN0U3VzcGVuZGVkVGltZTthPWEubGFzdFN1c3BlbmRlZFRpbWU7cmV0dXJuIDAhPT1jJiZjPj1iJiZhPD1ifWZ1bmN0aW9uIHhpKGEsYil7dmFyIGM9YS5maXJzdFN1c3BlbmRlZFRpbWUsZD1hLmxhc3RTdXNwZW5kZWRUaW1lO2M8YiYmKGEuZmlyc3RTdXNwZW5kZWRUaW1lPWIpO2lmKGQ+Ynx8MD09PWMpYS5sYXN0U3VzcGVuZGVkVGltZT1iO2I8PWEubGFzdFBpbmdlZFRpbWUmJihhLmxhc3RQaW5nZWRUaW1lPTApO2I8PWEubGFzdEV4cGlyZWRUaW1lJiYoYS5sYXN0RXhwaXJlZFRpbWU9MCl9XG5mdW5jdGlvbiB5aShhLGIpe2I+YS5maXJzdFBlbmRpbmdUaW1lJiYoYS5maXJzdFBlbmRpbmdUaW1lPWIpO3ZhciBjPWEuZmlyc3RTdXNwZW5kZWRUaW1lOzAhPT1jJiYoYj49Yz9hLmZpcnN0U3VzcGVuZGVkVGltZT1hLmxhc3RTdXNwZW5kZWRUaW1lPWEubmV4dEtub3duUGVuZGluZ0xldmVsPTA6Yj49YS5sYXN0U3VzcGVuZGVkVGltZSYmKGEubGFzdFN1c3BlbmRlZFRpbWU9YisxKSxiPmEubmV4dEtub3duUGVuZGluZ0xldmVsJiYoYS5uZXh0S25vd25QZW5kaW5nTGV2ZWw9YikpfWZ1bmN0aW9uIENqKGEsYil7dmFyIGM9YS5sYXN0RXhwaXJlZFRpbWU7aWYoMD09PWN8fGM+YilhLmxhc3RFeHBpcmVkVGltZT1ifVxuZnVuY3Rpb24gYmsoYSxiLGMsZCl7dmFyIGU9Yi5jdXJyZW50LGY9R2coKSxnPURnLnN1c3BlbnNlO2Y9SGcoZixlLGcpO2E6aWYoYyl7Yz1jLl9yZWFjdEludGVybmFsRmliZXI7Yjp7aWYoZGMoYykhPT1jfHwxIT09Yy50YWcpdGhyb3cgRXJyb3IodSgxNzApKTt2YXIgaD1jO2Rve3N3aXRjaChoLnRhZyl7Y2FzZSAzOmg9aC5zdGF0ZU5vZGUuY29udGV4dDticmVhayBiO2Nhc2UgMTppZihMKGgudHlwZSkpe2g9aC5zdGF0ZU5vZGUuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNZXJnZWRDaGlsZENvbnRleHQ7YnJlYWsgYn19aD1oLnJldHVybn13aGlsZShudWxsIT09aCk7dGhyb3cgRXJyb3IodSgxNzEpKTt9aWYoMT09PWMudGFnKXt2YXIgaz1jLnR5cGU7aWYoTChrKSl7Yz1GZihjLGssaCk7YnJlYWsgYX19Yz1ofWVsc2UgYz1BZjtudWxsPT09Yi5jb250ZXh0P2IuY29udGV4dD1jOmIucGVuZGluZ0NvbnRleHQ9YztiPXdnKGYsZyk7Yi5wYXlsb2FkPXtlbGVtZW50OmF9O2Q9dm9pZCAwPT09XG5kP251bGw6ZDtudWxsIT09ZCYmKGIuY2FsbGJhY2s9ZCk7eGcoZSxiKTtJZyhlLGYpO3JldHVybiBmfWZ1bmN0aW9uIGNrKGEpe2E9YS5jdXJyZW50O2lmKCFhLmNoaWxkKXJldHVybiBudWxsO3N3aXRjaChhLmNoaWxkLnRhZyl7Y2FzZSA1OnJldHVybiBhLmNoaWxkLnN0YXRlTm9kZTtkZWZhdWx0OnJldHVybiBhLmNoaWxkLnN0YXRlTm9kZX19ZnVuY3Rpb24gZGsoYSxiKXthPWEubWVtb2l6ZWRTdGF0ZTtudWxsIT09YSYmbnVsbCE9PWEuZGVoeWRyYXRlZCYmYS5yZXRyeVRpbWU8YiYmKGEucmV0cnlUaW1lPWIpfWZ1bmN0aW9uIGVrKGEsYil7ZGsoYSxiKTsoYT1hLmFsdGVybmF0ZSkmJmRrKGEsYil9XG5mdW5jdGlvbiBmayhhLGIsYyl7Yz1udWxsIT1jJiYhMD09PWMuaHlkcmF0ZTt2YXIgZD1uZXcgYWsoYSxiLGMpLGU9U2goMyxudWxsLG51bGwsMj09PWI/NzoxPT09Yj8zOjApO2QuY3VycmVudD1lO2Uuc3RhdGVOb2RlPWQ7dWcoZSk7YVtPZF09ZC5jdXJyZW50O2MmJjAhPT1iJiZKYyhhLDk9PT1hLm5vZGVUeXBlP2E6YS5vd25lckRvY3VtZW50KTt0aGlzLl9pbnRlcm5hbFJvb3Q9ZH1may5wcm90b3R5cGUucmVuZGVyPWZ1bmN0aW9uKGEpe2JrKGEsdGhpcy5faW50ZXJuYWxSb290LG51bGwsbnVsbCl9O2ZrLnByb3RvdHlwZS51bm1vdW50PWZ1bmN0aW9uKCl7dmFyIGE9dGhpcy5faW50ZXJuYWxSb290LGI9YS5jb250YWluZXJJbmZvO2JrKG51bGwsYSxudWxsLGZ1bmN0aW9uKCl7YltPZF09bnVsbH0pfTtcbmZ1bmN0aW9uIGdrKGEpe3JldHVybiEoIWF8fDEhPT1hLm5vZGVUeXBlJiY5IT09YS5ub2RlVHlwZSYmMTEhPT1hLm5vZGVUeXBlJiYoOCE9PWEubm9kZVR5cGV8fFwiIHJlYWN0LW1vdW50LXBvaW50LXVuc3RhYmxlIFwiIT09YS5ub2RlVmFsdWUpKX1mdW5jdGlvbiBoayhhLGIpe2J8fChiPWE/OT09PWEubm9kZVR5cGU/YS5kb2N1bWVudEVsZW1lbnQ6YS5maXJzdENoaWxkOm51bGwsYj0hKCFifHwxIT09Yi5ub2RlVHlwZXx8IWIuaGFzQXR0cmlidXRlKFwiZGF0YS1yZWFjdHJvb3RcIikpKTtpZighYilmb3IodmFyIGM7Yz1hLmxhc3RDaGlsZDspYS5yZW1vdmVDaGlsZChjKTtyZXR1cm4gbmV3IGZrKGEsMCxiP3toeWRyYXRlOiEwfTp2b2lkIDApfVxuZnVuY3Rpb24gaWsoYSxiLGMsZCxlKXt2YXIgZj1jLl9yZWFjdFJvb3RDb250YWluZXI7aWYoZil7dmFyIGc9Zi5faW50ZXJuYWxSb290O2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBlKXt2YXIgaD1lO2U9ZnVuY3Rpb24oKXt2YXIgYT1jayhnKTtoLmNhbGwoYSl9fWJrKGIsZyxhLGUpfWVsc2V7Zj1jLl9yZWFjdFJvb3RDb250YWluZXI9aGsoYyxkKTtnPWYuX2ludGVybmFsUm9vdDtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZSl7dmFyIGs9ZTtlPWZ1bmN0aW9uKCl7dmFyIGE9Y2soZyk7ay5jYWxsKGEpfX1OaihmdW5jdGlvbigpe2JrKGIsZyxhLGUpfSl9cmV0dXJuIGNrKGcpfWZ1bmN0aW9uIGprKGEsYixjKXt2YXIgZD0zPGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1szXT9hcmd1bWVudHNbM106bnVsbDtyZXR1cm57JCR0eXBlb2Y6JGEsa2V5Om51bGw9PWQ/bnVsbDpcIlwiK2QsY2hpbGRyZW46YSxjb250YWluZXJJbmZvOmIsaW1wbGVtZW50YXRpb246Y319XG53Yz1mdW5jdGlvbihhKXtpZigxMz09PWEudGFnKXt2YXIgYj1oZyhHZygpLDE1MCwxMDApO0lnKGEsYik7ZWsoYSxiKX19O3hjPWZ1bmN0aW9uKGEpezEzPT09YS50YWcmJihJZyhhLDMpLGVrKGEsMykpfTt5Yz1mdW5jdGlvbihhKXtpZigxMz09PWEudGFnKXt2YXIgYj1HZygpO2I9SGcoYixhLG51bGwpO0lnKGEsYik7ZWsoYSxiKX19O1xuemE9ZnVuY3Rpb24oYSxiLGMpe3N3aXRjaChiKXtjYXNlIFwiaW5wdXRcIjpDYihhLGMpO2I9Yy5uYW1lO2lmKFwicmFkaW9cIj09PWMudHlwZSYmbnVsbCE9Yil7Zm9yKGM9YTtjLnBhcmVudE5vZGU7KWM9Yy5wYXJlbnROb2RlO2M9Yy5xdWVyeVNlbGVjdG9yQWxsKFwiaW5wdXRbbmFtZT1cIitKU09OLnN0cmluZ2lmeShcIlwiK2IpKyddW3R5cGU9XCJyYWRpb1wiXScpO2ZvcihiPTA7YjxjLmxlbmd0aDtiKyspe3ZhciBkPWNbYl07aWYoZCE9PWEmJmQuZm9ybT09PWEuZm9ybSl7dmFyIGU9UWQoZCk7aWYoIWUpdGhyb3cgRXJyb3IodSg5MCkpO3liKGQpO0NiKGQsZSl9fX1icmVhaztjYXNlIFwidGV4dGFyZWFcIjpLYihhLGMpO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjpiPWMudmFsdWUsbnVsbCE9YiYmSGIoYSwhIWMubXVsdGlwbGUsYiwhMSl9fTtGYT1NajtcbkdhPWZ1bmN0aW9uKGEsYixjLGQsZSl7dmFyIGY9VztXfD00O3RyeXtyZXR1cm4gY2coOTgsYS5iaW5kKG51bGwsYixjLGQsZSkpfWZpbmFsbHl7Vz1mLFc9PT1WJiZnZygpfX07SGE9ZnVuY3Rpb24oKXsoVyYoMXxmanxnaikpPT09ViYmKExqKCksRGooKSl9O0lhPWZ1bmN0aW9uKGEsYil7dmFyIGM9VztXfD0yO3RyeXtyZXR1cm4gYShiKX1maW5hbGx5e1c9YyxXPT09ViYmZ2coKX19O2Z1bmN0aW9uIGtrKGEsYil7dmFyIGM9Mjxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbMl0/YXJndW1lbnRzWzJdOm51bGw7aWYoIWdrKGIpKXRocm93IEVycm9yKHUoMjAwKSk7cmV0dXJuIGprKGEsYixudWxsLGMpfXZhciBsaz17RXZlbnRzOltOYyxQZCxRZCx4YSx0YSxYZCxmdW5jdGlvbihhKXtqYyhhLFdkKX0sRGEsRWEsaWQsbWMsRGose2N1cnJlbnQ6ITF9XX07XG4oZnVuY3Rpb24oYSl7dmFyIGI9YS5maW5kRmliZXJCeUhvc3RJbnN0YW5jZTtyZXR1cm4gWWoobih7fSxhLHtvdmVycmlkZUhvb2tTdGF0ZTpudWxsLG92ZXJyaWRlUHJvcHM6bnVsbCxzZXRTdXNwZW5zZUhhbmRsZXI6bnVsbCxzY2hlZHVsZVVwZGF0ZTpudWxsLGN1cnJlbnREaXNwYXRjaGVyUmVmOldhLlJlYWN0Q3VycmVudERpc3BhdGNoZXIsZmluZEhvc3RJbnN0YW5jZUJ5RmliZXI6ZnVuY3Rpb24oYSl7YT1oYyhhKTtyZXR1cm4gbnVsbD09PWE/bnVsbDphLnN0YXRlTm9kZX0sZmluZEZpYmVyQnlIb3N0SW5zdGFuY2U6ZnVuY3Rpb24oYSl7cmV0dXJuIGI/YihhKTpudWxsfSxmaW5kSG9zdEluc3RhbmNlc0ZvclJlZnJlc2g6bnVsbCxzY2hlZHVsZVJlZnJlc2g6bnVsbCxzY2hlZHVsZVJvb3Q6bnVsbCxzZXRSZWZyZXNoSGFuZGxlcjpudWxsLGdldEN1cnJlbnRGaWJlcjpudWxsfSkpfSkoe2ZpbmRGaWJlckJ5SG9zdEluc3RhbmNlOnRjLGJ1bmRsZVR5cGU6MCx2ZXJzaW9uOlwiMTYuMTMuMVwiLFxucmVuZGVyZXJQYWNrYWdlTmFtZTpcInJlYWN0LWRvbVwifSk7ZXhwb3J0cy5fX1NFQ1JFVF9JTlRFUk5BTFNfRE9fTk9UX1VTRV9PUl9ZT1VfV0lMTF9CRV9GSVJFRD1saztleHBvcnRzLmNyZWF0ZVBvcnRhbD1raztleHBvcnRzLmZpbmRET01Ob2RlPWZ1bmN0aW9uKGEpe2lmKG51bGw9PWEpcmV0dXJuIG51bGw7aWYoMT09PWEubm9kZVR5cGUpcmV0dXJuIGE7dmFyIGI9YS5fcmVhY3RJbnRlcm5hbEZpYmVyO2lmKHZvaWQgMD09PWIpe2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBhLnJlbmRlcil0aHJvdyBFcnJvcih1KDE4OCkpO3Rocm93IEVycm9yKHUoMjY4LE9iamVjdC5rZXlzKGEpKSk7fWE9aGMoYik7YT1udWxsPT09YT9udWxsOmEuc3RhdGVOb2RlO3JldHVybiBhfTtcbmV4cG9ydHMuZmx1c2hTeW5jPWZ1bmN0aW9uKGEsYil7aWYoKFcmKGZqfGdqKSkhPT1WKXRocm93IEVycm9yKHUoMTg3KSk7dmFyIGM9VztXfD0xO3RyeXtyZXR1cm4gY2coOTksYS5iaW5kKG51bGwsYikpfWZpbmFsbHl7Vz1jLGdnKCl9fTtleHBvcnRzLmh5ZHJhdGU9ZnVuY3Rpb24oYSxiLGMpe2lmKCFnayhiKSl0aHJvdyBFcnJvcih1KDIwMCkpO3JldHVybiBpayhudWxsLGEsYiwhMCxjKX07ZXhwb3J0cy5yZW5kZXI9ZnVuY3Rpb24oYSxiLGMpe2lmKCFnayhiKSl0aHJvdyBFcnJvcih1KDIwMCkpO3JldHVybiBpayhudWxsLGEsYiwhMSxjKX07XG5leHBvcnRzLnVubW91bnRDb21wb25lbnRBdE5vZGU9ZnVuY3Rpb24oYSl7aWYoIWdrKGEpKXRocm93IEVycm9yKHUoNDApKTtyZXR1cm4gYS5fcmVhY3RSb290Q29udGFpbmVyPyhOaihmdW5jdGlvbigpe2lrKG51bGwsbnVsbCxhLCExLGZ1bmN0aW9uKCl7YS5fcmVhY3RSb290Q29udGFpbmVyPW51bGw7YVtPZF09bnVsbH0pfSksITApOiExfTtleHBvcnRzLnVuc3RhYmxlX2JhdGNoZWRVcGRhdGVzPU1qO2V4cG9ydHMudW5zdGFibGVfY3JlYXRlUG9ydGFsPWZ1bmN0aW9uKGEsYil7cmV0dXJuIGtrKGEsYiwyPGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1syXT9hcmd1bWVudHNbMl06bnVsbCl9O1xuZXhwb3J0cy51bnN0YWJsZV9yZW5kZXJTdWJ0cmVlSW50b0NvbnRhaW5lcj1mdW5jdGlvbihhLGIsYyxkKXtpZighZ2soYykpdGhyb3cgRXJyb3IodSgyMDApKTtpZihudWxsPT1hfHx2b2lkIDA9PT1hLl9yZWFjdEludGVybmFsRmliZXIpdGhyb3cgRXJyb3IodSgzOCkpO3JldHVybiBpayhhLGIsYywhMSxkKX07ZXhwb3J0cy52ZXJzaW9uPVwiMTYuMTMuMVwiO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3NjaGVkdWxlci5wcm9kdWN0aW9uLm1pbi5qcycpO1xufSBlbHNlIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9zY2hlZHVsZXIuZGV2ZWxvcG1lbnQuanMnKTtcbn1cbiIsIi8qKiBAbGljZW5zZSBSZWFjdCB2MC4xOS4xXG4gKiBzY2hlZHVsZXIucHJvZHVjdGlvbi5taW4uanNcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7dmFyIGYsZyxoLGssbDtcbmlmKFwidW5kZWZpbmVkXCI9PT10eXBlb2Ygd2luZG93fHxcImZ1bmN0aW9uXCIhPT10eXBlb2YgTWVzc2FnZUNoYW5uZWwpe3ZhciBwPW51bGwscT1udWxsLHQ9ZnVuY3Rpb24oKXtpZihudWxsIT09cCl0cnl7dmFyIGE9ZXhwb3J0cy51bnN0YWJsZV9ub3coKTtwKCEwLGEpO3A9bnVsbH1jYXRjaChiKXt0aHJvdyBzZXRUaW1lb3V0KHQsMCksYjt9fSx1PURhdGUubm93KCk7ZXhwb3J0cy51bnN0YWJsZV9ub3c9ZnVuY3Rpb24oKXtyZXR1cm4gRGF0ZS5ub3coKS11fTtmPWZ1bmN0aW9uKGEpe251bGwhPT1wP3NldFRpbWVvdXQoZiwwLGEpOihwPWEsc2V0VGltZW91dCh0LDApKX07Zz1mdW5jdGlvbihhLGIpe3E9c2V0VGltZW91dChhLGIpfTtoPWZ1bmN0aW9uKCl7Y2xlYXJUaW1lb3V0KHEpfTtrPWZ1bmN0aW9uKCl7cmV0dXJuITF9O2w9ZXhwb3J0cy51bnN0YWJsZV9mb3JjZUZyYW1lUmF0ZT1mdW5jdGlvbigpe319ZWxzZXt2YXIgdz13aW5kb3cucGVyZm9ybWFuY2UseD13aW5kb3cuRGF0ZSxcbnk9d2luZG93LnNldFRpbWVvdXQsej13aW5kb3cuY2xlYXJUaW1lb3V0O2lmKFwidW5kZWZpbmVkXCIhPT10eXBlb2YgY29uc29sZSl7dmFyIEE9d2luZG93LmNhbmNlbEFuaW1hdGlvbkZyYW1lO1wiZnVuY3Rpb25cIiE9PXR5cGVvZiB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lJiZjb25zb2xlLmVycm9yKFwiVGhpcyBicm93c2VyIGRvZXNuJ3Qgc3VwcG9ydCByZXF1ZXN0QW5pbWF0aW9uRnJhbWUuIE1ha2Ugc3VyZSB0aGF0IHlvdSBsb2FkIGEgcG9seWZpbGwgaW4gb2xkZXIgYnJvd3NlcnMuIGh0dHBzOi8vZmIubWUvcmVhY3QtcG9seWZpbGxzXCIpO1wiZnVuY3Rpb25cIiE9PXR5cGVvZiBBJiZjb25zb2xlLmVycm9yKFwiVGhpcyBicm93c2VyIGRvZXNuJ3Qgc3VwcG9ydCBjYW5jZWxBbmltYXRpb25GcmFtZS4gTWFrZSBzdXJlIHRoYXQgeW91IGxvYWQgYSBwb2x5ZmlsbCBpbiBvbGRlciBicm93c2Vycy4gaHR0cHM6Ly9mYi5tZS9yZWFjdC1wb2x5ZmlsbHNcIil9aWYoXCJvYmplY3RcIj09PVxudHlwZW9mIHcmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiB3Lm5vdylleHBvcnRzLnVuc3RhYmxlX25vdz1mdW5jdGlvbigpe3JldHVybiB3Lm5vdygpfTtlbHNle3ZhciBCPXgubm93KCk7ZXhwb3J0cy51bnN0YWJsZV9ub3c9ZnVuY3Rpb24oKXtyZXR1cm4geC5ub3coKS1CfX12YXIgQz0hMSxEPW51bGwsRT0tMSxGPTUsRz0wO2s9ZnVuY3Rpb24oKXtyZXR1cm4gZXhwb3J0cy51bnN0YWJsZV9ub3coKT49R307bD1mdW5jdGlvbigpe307ZXhwb3J0cy51bnN0YWJsZV9mb3JjZUZyYW1lUmF0ZT1mdW5jdGlvbihhKXswPmF8fDEyNTxhP2NvbnNvbGUuZXJyb3IoXCJmb3JjZUZyYW1lUmF0ZSB0YWtlcyBhIHBvc2l0aXZlIGludCBiZXR3ZWVuIDAgYW5kIDEyNSwgZm9yY2luZyBmcmFtZXJhdGVzIGhpZ2hlciB0aGFuIDEyNSBmcHMgaXMgbm90IHVuc3VwcG9ydGVkXCIpOkY9MDxhP01hdGguZmxvb3IoMUUzL2EpOjV9O3ZhciBIPW5ldyBNZXNzYWdlQ2hhbm5lbCxJPUgucG9ydDI7SC5wb3J0MS5vbm1lc3NhZ2U9XG5mdW5jdGlvbigpe2lmKG51bGwhPT1EKXt2YXIgYT1leHBvcnRzLnVuc3RhYmxlX25vdygpO0c9YStGO3RyeXtEKCEwLGEpP0kucG9zdE1lc3NhZ2UobnVsbCk6KEM9ITEsRD1udWxsKX1jYXRjaChiKXt0aHJvdyBJLnBvc3RNZXNzYWdlKG51bGwpLGI7fX1lbHNlIEM9ITF9O2Y9ZnVuY3Rpb24oYSl7RD1hO0N8fChDPSEwLEkucG9zdE1lc3NhZ2UobnVsbCkpfTtnPWZ1bmN0aW9uKGEsYil7RT15KGZ1bmN0aW9uKCl7YShleHBvcnRzLnVuc3RhYmxlX25vdygpKX0sYil9O2g9ZnVuY3Rpb24oKXt6KEUpO0U9LTF9fWZ1bmN0aW9uIEooYSxiKXt2YXIgYz1hLmxlbmd0aDthLnB1c2goYik7YTpmb3IoOzspe3ZhciBkPWMtMT4+PjEsZT1hW2RdO2lmKHZvaWQgMCE9PWUmJjA8SyhlLGIpKWFbZF09YixhW2NdPWUsYz1kO2Vsc2UgYnJlYWsgYX19ZnVuY3Rpb24gTChhKXthPWFbMF07cmV0dXJuIHZvaWQgMD09PWE/bnVsbDphfVxuZnVuY3Rpb24gTShhKXt2YXIgYj1hWzBdO2lmKHZvaWQgMCE9PWIpe3ZhciBjPWEucG9wKCk7aWYoYyE9PWIpe2FbMF09YzthOmZvcih2YXIgZD0wLGU9YS5sZW5ndGg7ZDxlOyl7dmFyIG09MiooZCsxKS0xLG49YVttXSx2PW0rMSxyPWFbdl07aWYodm9pZCAwIT09biYmMD5LKG4sYykpdm9pZCAwIT09ciYmMD5LKHIsbik/KGFbZF09cixhW3ZdPWMsZD12KTooYVtkXT1uLGFbbV09YyxkPW0pO2Vsc2UgaWYodm9pZCAwIT09ciYmMD5LKHIsYykpYVtkXT1yLGFbdl09YyxkPXY7ZWxzZSBicmVhayBhfX1yZXR1cm4gYn1yZXR1cm4gbnVsbH1mdW5jdGlvbiBLKGEsYil7dmFyIGM9YS5zb3J0SW5kZXgtYi5zb3J0SW5kZXg7cmV0dXJuIDAhPT1jP2M6YS5pZC1iLmlkfXZhciBOPVtdLE89W10sUD0xLFE9bnVsbCxSPTMsUz0hMSxUPSExLFU9ITE7XG5mdW5jdGlvbiBWKGEpe2Zvcih2YXIgYj1MKE8pO251bGwhPT1iOyl7aWYobnVsbD09PWIuY2FsbGJhY2spTShPKTtlbHNlIGlmKGIuc3RhcnRUaW1lPD1hKU0oTyksYi5zb3J0SW5kZXg9Yi5leHBpcmF0aW9uVGltZSxKKE4sYik7ZWxzZSBicmVhaztiPUwoTyl9fWZ1bmN0aW9uIFcoYSl7VT0hMTtWKGEpO2lmKCFUKWlmKG51bGwhPT1MKE4pKVQ9ITAsZihYKTtlbHNle3ZhciBiPUwoTyk7bnVsbCE9PWImJmcoVyxiLnN0YXJ0VGltZS1hKX19XG5mdW5jdGlvbiBYKGEsYil7VD0hMTtVJiYoVT0hMSxoKCkpO1M9ITA7dmFyIGM9Ujt0cnl7VihiKTtmb3IoUT1MKE4pO251bGwhPT1RJiYoIShRLmV4cGlyYXRpb25UaW1lPmIpfHxhJiYhaygpKTspe3ZhciBkPVEuY2FsbGJhY2s7aWYobnVsbCE9PWQpe1EuY2FsbGJhY2s9bnVsbDtSPVEucHJpb3JpdHlMZXZlbDt2YXIgZT1kKFEuZXhwaXJhdGlvblRpbWU8PWIpO2I9ZXhwb3J0cy51bnN0YWJsZV9ub3coKTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgZT9RLmNhbGxiYWNrPWU6UT09PUwoTikmJk0oTik7VihiKX1lbHNlIE0oTik7UT1MKE4pfWlmKG51bGwhPT1RKXZhciBtPSEwO2Vsc2V7dmFyIG49TChPKTtudWxsIT09biYmZyhXLG4uc3RhcnRUaW1lLWIpO209ITF9cmV0dXJuIG19ZmluYWxseXtRPW51bGwsUj1jLFM9ITF9fVxuZnVuY3Rpb24gWShhKXtzd2l0Y2goYSl7Y2FzZSAxOnJldHVybi0xO2Nhc2UgMjpyZXR1cm4gMjUwO2Nhc2UgNTpyZXR1cm4gMTA3Mzc0MTgyMztjYXNlIDQ6cmV0dXJuIDFFNDtkZWZhdWx0OnJldHVybiA1RTN9fXZhciBaPWw7ZXhwb3J0cy51bnN0YWJsZV9JZGxlUHJpb3JpdHk9NTtleHBvcnRzLnVuc3RhYmxlX0ltbWVkaWF0ZVByaW9yaXR5PTE7ZXhwb3J0cy51bnN0YWJsZV9Mb3dQcmlvcml0eT00O2V4cG9ydHMudW5zdGFibGVfTm9ybWFsUHJpb3JpdHk9MztleHBvcnRzLnVuc3RhYmxlX1Byb2ZpbGluZz1udWxsO2V4cG9ydHMudW5zdGFibGVfVXNlckJsb2NraW5nUHJpb3JpdHk9MjtleHBvcnRzLnVuc3RhYmxlX2NhbmNlbENhbGxiYWNrPWZ1bmN0aW9uKGEpe2EuY2FsbGJhY2s9bnVsbH07ZXhwb3J0cy51bnN0YWJsZV9jb250aW51ZUV4ZWN1dGlvbj1mdW5jdGlvbigpe1R8fFN8fChUPSEwLGYoWCkpfTtcbmV4cG9ydHMudW5zdGFibGVfZ2V0Q3VycmVudFByaW9yaXR5TGV2ZWw9ZnVuY3Rpb24oKXtyZXR1cm4gUn07ZXhwb3J0cy51bnN0YWJsZV9nZXRGaXJzdENhbGxiYWNrTm9kZT1mdW5jdGlvbigpe3JldHVybiBMKE4pfTtleHBvcnRzLnVuc3RhYmxlX25leHQ9ZnVuY3Rpb24oYSl7c3dpdGNoKFIpe2Nhc2UgMTpjYXNlIDI6Y2FzZSAzOnZhciBiPTM7YnJlYWs7ZGVmYXVsdDpiPVJ9dmFyIGM9UjtSPWI7dHJ5e3JldHVybiBhKCl9ZmluYWxseXtSPWN9fTtleHBvcnRzLnVuc3RhYmxlX3BhdXNlRXhlY3V0aW9uPWZ1bmN0aW9uKCl7fTtleHBvcnRzLnVuc3RhYmxlX3JlcXVlc3RQYWludD1aO2V4cG9ydHMudW5zdGFibGVfcnVuV2l0aFByaW9yaXR5PWZ1bmN0aW9uKGEsYil7c3dpdGNoKGEpe2Nhc2UgMTpjYXNlIDI6Y2FzZSAzOmNhc2UgNDpjYXNlIDU6YnJlYWs7ZGVmYXVsdDphPTN9dmFyIGM9UjtSPWE7dHJ5e3JldHVybiBiKCl9ZmluYWxseXtSPWN9fTtcbmV4cG9ydHMudW5zdGFibGVfc2NoZWR1bGVDYWxsYmFjaz1mdW5jdGlvbihhLGIsYyl7dmFyIGQ9ZXhwb3J0cy51bnN0YWJsZV9ub3coKTtpZihcIm9iamVjdFwiPT09dHlwZW9mIGMmJm51bGwhPT1jKXt2YXIgZT1jLmRlbGF5O2U9XCJudW1iZXJcIj09PXR5cGVvZiBlJiYwPGU/ZCtlOmQ7Yz1cIm51bWJlclwiPT09dHlwZW9mIGMudGltZW91dD9jLnRpbWVvdXQ6WShhKX1lbHNlIGM9WShhKSxlPWQ7Yz1lK2M7YT17aWQ6UCsrLGNhbGxiYWNrOmIscHJpb3JpdHlMZXZlbDphLHN0YXJ0VGltZTplLGV4cGlyYXRpb25UaW1lOmMsc29ydEluZGV4Oi0xfTtlPmQ/KGEuc29ydEluZGV4PWUsSihPLGEpLG51bGw9PT1MKE4pJiZhPT09TChPKSYmKFU/aCgpOlU9ITAsZyhXLGUtZCkpKTooYS5zb3J0SW5kZXg9YyxKKE4sYSksVHx8U3x8KFQ9ITAsZihYKSkpO3JldHVybiBhfTtcbmV4cG9ydHMudW5zdGFibGVfc2hvdWxkWWllbGQ9ZnVuY3Rpb24oKXt2YXIgYT1leHBvcnRzLnVuc3RhYmxlX25vdygpO1YoYSk7dmFyIGI9TChOKTtyZXR1cm4gYiE9PVEmJm51bGwhPT1RJiZudWxsIT09YiYmbnVsbCE9PWIuY2FsbGJhY2smJmIuc3RhcnRUaW1lPD1hJiZiLmV4cGlyYXRpb25UaW1lPFEuZXhwaXJhdGlvblRpbWV8fGsoKX07ZXhwb3J0cy51bnN0YWJsZV93cmFwQ2FsbGJhY2s9ZnVuY3Rpb24oYSl7dmFyIGI9UjtyZXR1cm4gZnVuY3Rpb24oKXt2YXIgYz1SO1I9Yjt0cnl7cmV0dXJuIGEuYXBwbHkodGhpcyxhcmd1bWVudHMpfWZpbmFsbHl7Uj1jfX19O1xuIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBSZWFjdFByb3BUeXBlc1NlY3JldCA9IHJlcXVpcmUoJy4vbGliL1JlYWN0UHJvcFR5cGVzU2VjcmV0Jyk7XG5cbmZ1bmN0aW9uIGVtcHR5RnVuY3Rpb24oKSB7fVxuZnVuY3Rpb24gZW1wdHlGdW5jdGlvbldpdGhSZXNldCgpIHt9XG5lbXB0eUZ1bmN0aW9uV2l0aFJlc2V0LnJlc2V0V2FybmluZ0NhY2hlID0gZW1wdHlGdW5jdGlvbjtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbigpIHtcbiAgZnVuY3Rpb24gc2hpbShwcm9wcywgcHJvcE5hbWUsIGNvbXBvbmVudE5hbWUsIGxvY2F0aW9uLCBwcm9wRnVsbE5hbWUsIHNlY3JldCkge1xuICAgIGlmIChzZWNyZXQgPT09IFJlYWN0UHJvcFR5cGVzU2VjcmV0KSB7XG4gICAgICAvLyBJdCBpcyBzdGlsbCBzYWZlIHdoZW4gY2FsbGVkIGZyb20gUmVhY3QuXG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHZhciBlcnIgPSBuZXcgRXJyb3IoXG4gICAgICAnQ2FsbGluZyBQcm9wVHlwZXMgdmFsaWRhdG9ycyBkaXJlY3RseSBpcyBub3Qgc3VwcG9ydGVkIGJ5IHRoZSBgcHJvcC10eXBlc2AgcGFja2FnZS4gJyArXG4gICAgICAnVXNlIFByb3BUeXBlcy5jaGVja1Byb3BUeXBlcygpIHRvIGNhbGwgdGhlbS4gJyArXG4gICAgICAnUmVhZCBtb3JlIGF0IGh0dHA6Ly9mYi5tZS91c2UtY2hlY2stcHJvcC10eXBlcydcbiAgICApO1xuICAgIGVyci5uYW1lID0gJ0ludmFyaWFudCBWaW9sYXRpb24nO1xuICAgIHRocm93IGVycjtcbiAgfTtcbiAgc2hpbS5pc1JlcXVpcmVkID0gc2hpbTtcbiAgZnVuY3Rpb24gZ2V0U2hpbSgpIHtcbiAgICByZXR1cm4gc2hpbTtcbiAgfTtcbiAgLy8gSW1wb3J0YW50IVxuICAvLyBLZWVwIHRoaXMgbGlzdCBpbiBzeW5jIHdpdGggcHJvZHVjdGlvbiB2ZXJzaW9uIGluIGAuL2ZhY3RvcnlXaXRoVHlwZUNoZWNrZXJzLmpzYC5cbiAgdmFyIFJlYWN0UHJvcFR5cGVzID0ge1xuICAgIGFycmF5OiBzaGltLFxuICAgIGJvb2w6IHNoaW0sXG4gICAgZnVuYzogc2hpbSxcbiAgICBudW1iZXI6IHNoaW0sXG4gICAgb2JqZWN0OiBzaGltLFxuICAgIHN0cmluZzogc2hpbSxcbiAgICBzeW1ib2w6IHNoaW0sXG5cbiAgICBhbnk6IHNoaW0sXG4gICAgYXJyYXlPZjogZ2V0U2hpbSxcbiAgICBlbGVtZW50OiBzaGltLFxuICAgIGVsZW1lbnRUeXBlOiBzaGltLFxuICAgIGluc3RhbmNlT2Y6IGdldFNoaW0sXG4gICAgbm9kZTogc2hpbSxcbiAgICBvYmplY3RPZjogZ2V0U2hpbSxcbiAgICBvbmVPZjogZ2V0U2hpbSxcbiAgICBvbmVPZlR5cGU6IGdldFNoaW0sXG4gICAgc2hhcGU6IGdldFNoaW0sXG4gICAgZXhhY3Q6IGdldFNoaW0sXG5cbiAgICBjaGVja1Byb3BUeXBlczogZW1wdHlGdW5jdGlvbldpdGhSZXNldCxcbiAgICByZXNldFdhcm5pbmdDYWNoZTogZW1wdHlGdW5jdGlvblxuICB9O1xuXG4gIFJlYWN0UHJvcFR5cGVzLlByb3BUeXBlcyA9IFJlYWN0UHJvcFR5cGVzO1xuXG4gIHJldHVybiBSZWFjdFByb3BUeXBlcztcbn07XG4iLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIFJlYWN0UHJvcFR5cGVzU2VjcmV0ID0gJ1NFQ1JFVF9ET19OT1RfUEFTU19USElTX09SX1lPVV9XSUxMX0JFX0ZJUkVEJztcblxubW9kdWxlLmV4cG9ydHMgPSBSZWFjdFByb3BUeXBlc1NlY3JldDtcbiIsIi8qKiBAbGljZW5zZSBSZWFjdCB2MTYuMTMuMVxuICogcmVhY3QtaXMucHJvZHVjdGlvbi5taW4uanNcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7dmFyIGI9XCJmdW5jdGlvblwiPT09dHlwZW9mIFN5bWJvbCYmU3ltYm9sLmZvcixjPWI/U3ltYm9sLmZvcihcInJlYWN0LmVsZW1lbnRcIik6NjAxMDMsZD1iP1N5bWJvbC5mb3IoXCJyZWFjdC5wb3J0YWxcIik6NjAxMDYsZT1iP1N5bWJvbC5mb3IoXCJyZWFjdC5mcmFnbWVudFwiKTo2MDEwNyxmPWI/U3ltYm9sLmZvcihcInJlYWN0LnN0cmljdF9tb2RlXCIpOjYwMTA4LGc9Yj9TeW1ib2wuZm9yKFwicmVhY3QucHJvZmlsZXJcIik6NjAxMTQsaD1iP1N5bWJvbC5mb3IoXCJyZWFjdC5wcm92aWRlclwiKTo2MDEwOSxrPWI/U3ltYm9sLmZvcihcInJlYWN0LmNvbnRleHRcIik6NjAxMTAsbD1iP1N5bWJvbC5mb3IoXCJyZWFjdC5hc3luY19tb2RlXCIpOjYwMTExLG09Yj9TeW1ib2wuZm9yKFwicmVhY3QuY29uY3VycmVudF9tb2RlXCIpOjYwMTExLG49Yj9TeW1ib2wuZm9yKFwicmVhY3QuZm9yd2FyZF9yZWZcIik6NjAxMTIscD1iP1N5bWJvbC5mb3IoXCJyZWFjdC5zdXNwZW5zZVwiKTo2MDExMyxxPWI/XG5TeW1ib2wuZm9yKFwicmVhY3Quc3VzcGVuc2VfbGlzdFwiKTo2MDEyMCxyPWI/U3ltYm9sLmZvcihcInJlYWN0Lm1lbW9cIik6NjAxMTUsdD1iP1N5bWJvbC5mb3IoXCJyZWFjdC5sYXp5XCIpOjYwMTE2LHY9Yj9TeW1ib2wuZm9yKFwicmVhY3QuYmxvY2tcIik6NjAxMjEsdz1iP1N5bWJvbC5mb3IoXCJyZWFjdC5mdW5kYW1lbnRhbFwiKTo2MDExNyx4PWI/U3ltYm9sLmZvcihcInJlYWN0LnJlc3BvbmRlclwiKTo2MDExOCx5PWI/U3ltYm9sLmZvcihcInJlYWN0LnNjb3BlXCIpOjYwMTE5O1xuZnVuY3Rpb24geihhKXtpZihcIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hKXt2YXIgdT1hLiQkdHlwZW9mO3N3aXRjaCh1KXtjYXNlIGM6c3dpdGNoKGE9YS50eXBlLGEpe2Nhc2UgbDpjYXNlIG06Y2FzZSBlOmNhc2UgZzpjYXNlIGY6Y2FzZSBwOnJldHVybiBhO2RlZmF1bHQ6c3dpdGNoKGE9YSYmYS4kJHR5cGVvZixhKXtjYXNlIGs6Y2FzZSBuOmNhc2UgdDpjYXNlIHI6Y2FzZSBoOnJldHVybiBhO2RlZmF1bHQ6cmV0dXJuIHV9fWNhc2UgZDpyZXR1cm4gdX19fWZ1bmN0aW9uIEEoYSl7cmV0dXJuIHooYSk9PT1tfWV4cG9ydHMuQXN5bmNNb2RlPWw7ZXhwb3J0cy5Db25jdXJyZW50TW9kZT1tO2V4cG9ydHMuQ29udGV4dENvbnN1bWVyPWs7ZXhwb3J0cy5Db250ZXh0UHJvdmlkZXI9aDtleHBvcnRzLkVsZW1lbnQ9YztleHBvcnRzLkZvcndhcmRSZWY9bjtleHBvcnRzLkZyYWdtZW50PWU7ZXhwb3J0cy5MYXp5PXQ7ZXhwb3J0cy5NZW1vPXI7ZXhwb3J0cy5Qb3J0YWw9ZDtcbmV4cG9ydHMuUHJvZmlsZXI9ZztleHBvcnRzLlN0cmljdE1vZGU9ZjtleHBvcnRzLlN1c3BlbnNlPXA7ZXhwb3J0cy5pc0FzeW5jTW9kZT1mdW5jdGlvbihhKXtyZXR1cm4gQShhKXx8eihhKT09PWx9O2V4cG9ydHMuaXNDb25jdXJyZW50TW9kZT1BO2V4cG9ydHMuaXNDb250ZXh0Q29uc3VtZXI9ZnVuY3Rpb24oYSl7cmV0dXJuIHooYSk9PT1rfTtleHBvcnRzLmlzQ29udGV4dFByb3ZpZGVyPWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09aH07ZXhwb3J0cy5pc0VsZW1lbnQ9ZnVuY3Rpb24oYSl7cmV0dXJuXCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSYmYS4kJHR5cGVvZj09PWN9O2V4cG9ydHMuaXNGb3J3YXJkUmVmPWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09bn07ZXhwb3J0cy5pc0ZyYWdtZW50PWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09ZX07ZXhwb3J0cy5pc0xhenk9ZnVuY3Rpb24oYSl7cmV0dXJuIHooYSk9PT10fTtcbmV4cG9ydHMuaXNNZW1vPWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09cn07ZXhwb3J0cy5pc1BvcnRhbD1mdW5jdGlvbihhKXtyZXR1cm4geihhKT09PWR9O2V4cG9ydHMuaXNQcm9maWxlcj1mdW5jdGlvbihhKXtyZXR1cm4geihhKT09PWd9O2V4cG9ydHMuaXNTdHJpY3RNb2RlPWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09Zn07ZXhwb3J0cy5pc1N1c3BlbnNlPWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09cH07XG5leHBvcnRzLmlzVmFsaWRFbGVtZW50VHlwZT1mdW5jdGlvbihhKXtyZXR1cm5cInN0cmluZ1wiPT09dHlwZW9mIGF8fFwiZnVuY3Rpb25cIj09PXR5cGVvZiBhfHxhPT09ZXx8YT09PW18fGE9PT1nfHxhPT09Znx8YT09PXB8fGE9PT1xfHxcIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hJiYoYS4kJHR5cGVvZj09PXR8fGEuJCR0eXBlb2Y9PT1yfHxhLiQkdHlwZW9mPT09aHx8YS4kJHR5cGVvZj09PWt8fGEuJCR0eXBlb2Y9PT1ufHxhLiQkdHlwZW9mPT09d3x8YS4kJHR5cGVvZj09PXh8fGEuJCR0eXBlb2Y9PT15fHxhLiQkdHlwZW9mPT09dil9O2V4cG9ydHMudHlwZU9mPXo7XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKG9yaWdpbmFsTW9kdWxlKSB7XG5cdGlmICghb3JpZ2luYWxNb2R1bGUud2VicGFja1BvbHlmaWxsKSB7XG5cdFx0dmFyIG1vZHVsZSA9IE9iamVjdC5jcmVhdGUob3JpZ2luYWxNb2R1bGUpO1xuXHRcdC8vIG1vZHVsZS5wYXJlbnQgPSB1bmRlZmluZWQgYnkgZGVmYXVsdFxuXHRcdGlmICghbW9kdWxlLmNoaWxkcmVuKSBtb2R1bGUuY2hpbGRyZW4gPSBbXTtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobW9kdWxlLCBcImxvYWRlZFwiLCB7XG5cdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuXHRcdFx0Z2V0OiBmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuIG1vZHVsZS5sO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShtb2R1bGUsIFwiaWRcIiwge1xuXHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcblx0XHRcdGdldDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiBtb2R1bGUuaTtcblx0XHRcdH1cblx0XHR9KTtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobW9kdWxlLCBcImV4cG9ydHNcIiwge1xuXHRcdFx0ZW51bWVyYWJsZTogdHJ1ZVxuXHRcdH0pO1xuXHRcdG1vZHVsZS53ZWJwYWNrUG9seWZpbGwgPSAxO1xuXHR9XG5cdHJldHVybiBtb2R1bGU7XG59O1xuIiwiZnVuY3Rpb24gX2V4dGVuZHMoKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHtcbiAgICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTtcblxuICAgICAgZm9yICh2YXIga2V5IGluIHNvdXJjZSkge1xuICAgICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkge1xuICAgICAgICAgIHRhcmdldFtrZXldID0gc291cmNlW2tleV07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdGFyZ2V0O1xuICB9O1xuXG4gIHJldHVybiBfZXh0ZW5kcy5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IF9leHRlbmRzOyIsIi8vIEEgbGlicmFyeSBvZiBzZWVkYWJsZSBSTkdzIGltcGxlbWVudGVkIGluIEphdmFzY3JpcHQuXG4vL1xuLy8gVXNhZ2U6XG4vL1xuLy8gdmFyIHNlZWRyYW5kb20gPSByZXF1aXJlKCdzZWVkcmFuZG9tJyk7XG4vLyB2YXIgcmFuZG9tID0gc2VlZHJhbmRvbSgxKTsgLy8gb3IgYW55IHNlZWQuXG4vLyB2YXIgeCA9IHJhbmRvbSgpOyAgICAgICAvLyAwIDw9IHggPCAxLiAgRXZlcnkgYml0IGlzIHJhbmRvbS5cbi8vIHZhciB4ID0gcmFuZG9tLnF1aWNrKCk7IC8vIDAgPD0geCA8IDEuICAzMiBiaXRzIG9mIHJhbmRvbW5lc3MuXG5cbi8vIGFsZWEsIGEgNTMtYml0IG11bHRpcGx5LXdpdGgtY2FycnkgZ2VuZXJhdG9yIGJ5IEpvaGFubmVzIEJhYWfDuGUuXG4vLyBQZXJpb2Q6IH4yXjExNlxuLy8gUmVwb3J0ZWQgdG8gcGFzcyBhbGwgQmlnQ3J1c2ggdGVzdHMuXG52YXIgYWxlYSA9IHJlcXVpcmUoJy4vbGliL2FsZWEnKTtcblxuLy8geG9yMTI4LCBhIHB1cmUgeG9yLXNoaWZ0IGdlbmVyYXRvciBieSBHZW9yZ2UgTWFyc2FnbGlhLlxuLy8gUGVyaW9kOiAyXjEyOC0xLlxuLy8gUmVwb3J0ZWQgdG8gZmFpbDogTWF0cml4UmFuayBhbmQgTGluZWFyQ29tcC5cbnZhciB4b3IxMjggPSByZXF1aXJlKCcuL2xpYi94b3IxMjgnKTtcblxuLy8geG9yd293LCBHZW9yZ2UgTWFyc2FnbGlhJ3MgMTYwLWJpdCB4b3Itc2hpZnQgY29tYmluZWQgcGx1cyB3ZXlsLlxuLy8gUGVyaW9kOiAyXjE5Mi0yXjMyXG4vLyBSZXBvcnRlZCB0byBmYWlsOiBDb2xsaXNpb25PdmVyLCBTaW1wUG9rZXIsIGFuZCBMaW5lYXJDb21wLlxudmFyIHhvcndvdyA9IHJlcXVpcmUoJy4vbGliL3hvcndvdycpO1xuXG4vLyB4b3JzaGlmdDcsIGJ5IEZyYW7Dp29pcyBQYW5uZXRvbiBhbmQgUGllcnJlIEwnZWN1eWVyLCB0YWtlc1xuLy8gYSBkaWZmZXJlbnQgYXBwcm9hY2g6IGl0IGFkZHMgcm9idXN0bmVzcyBieSBhbGxvd2luZyBtb3JlIHNoaWZ0c1xuLy8gdGhhbiBNYXJzYWdsaWEncyBvcmlnaW5hbCB0aHJlZS4gIEl0IGlzIGEgNy1zaGlmdCBnZW5lcmF0b3Jcbi8vIHdpdGggMjU2IGJpdHMsIHRoYXQgcGFzc2VzIEJpZ0NydXNoIHdpdGggbm8gc3lzdG1hdGljIGZhaWx1cmVzLlxuLy8gUGVyaW9kIDJeMjU2LTEuXG4vLyBObyBzeXN0ZW1hdGljIEJpZ0NydXNoIGZhaWx1cmVzIHJlcG9ydGVkLlxudmFyIHhvcnNoaWZ0NyA9IHJlcXVpcmUoJy4vbGliL3hvcnNoaWZ0NycpO1xuXG4vLyB4b3I0MDk2LCBieSBSaWNoYXJkIEJyZW50LCBpcyBhIDQwOTYtYml0IHhvci1zaGlmdCB3aXRoIGFcbi8vIHZlcnkgbG9uZyBwZXJpb2QgdGhhdCBhbHNvIGFkZHMgYSBXZXlsIGdlbmVyYXRvci4gSXQgYWxzbyBwYXNzZXNcbi8vIEJpZ0NydXNoIHdpdGggbm8gc3lzdGVtYXRpYyBmYWlsdXJlcy4gIEl0cyBsb25nIHBlcmlvZCBtYXlcbi8vIGJlIHVzZWZ1bCBpZiB5b3UgaGF2ZSBtYW55IGdlbmVyYXRvcnMgYW5kIG5lZWQgdG8gYXZvaWRcbi8vIGNvbGxpc2lvbnMuXG4vLyBQZXJpb2Q6IDJeNDEyOC0yXjMyLlxuLy8gTm8gc3lzdGVtYXRpYyBCaWdDcnVzaCBmYWlsdXJlcyByZXBvcnRlZC5cbnZhciB4b3I0MDk2ID0gcmVxdWlyZSgnLi9saWIveG9yNDA5NicpO1xuXG4vLyBUeWNoZS1pLCBieSBTYW11ZWwgTmV2ZXMgYW5kIEZpbGlwZSBBcmF1am8sIGlzIGEgYml0LXNoaWZ0aW5nIHJhbmRvbVxuLy8gbnVtYmVyIGdlbmVyYXRvciBkZXJpdmVkIGZyb20gQ2hhQ2hhLCBhIG1vZGVybiBzdHJlYW0gY2lwaGVyLlxuLy8gaHR0cHM6Ly9lZGVuLmRlaS51Yy5wdC9+c25ldmVzL3B1YnMvMjAxMS1zbmZhMi5wZGZcbi8vIFBlcmlvZDogfjJeMTI3XG4vLyBObyBzeXN0ZW1hdGljIEJpZ0NydXNoIGZhaWx1cmVzIHJlcG9ydGVkLlxudmFyIHR5Y2hlaSA9IHJlcXVpcmUoJy4vbGliL3R5Y2hlaScpO1xuXG4vLyBUaGUgb3JpZ2luYWwgQVJDNC1iYXNlZCBwcm5nIGluY2x1ZGVkIGluIHRoaXMgbGlicmFyeS5cbi8vIFBlcmlvZDogfjJeMTYwMFxudmFyIHNyID0gcmVxdWlyZSgnLi9zZWVkcmFuZG9tJyk7XG5cbnNyLmFsZWEgPSBhbGVhO1xuc3IueG9yMTI4ID0geG9yMTI4O1xuc3IueG9yd293ID0geG9yd293O1xuc3IueG9yc2hpZnQ3ID0geG9yc2hpZnQ3O1xuc3IueG9yNDA5NiA9IHhvcjQwOTY7XG5zci50eWNoZWkgPSB0eWNoZWk7XG5cbm1vZHVsZS5leHBvcnRzID0gc3I7XG4iLCIvLyBBIHBvcnQgb2YgYW4gYWxnb3JpdGhtIGJ5IEpvaGFubmVzIEJhYWfDuGUgPGJhYWdvZUBiYWFnb2UuY29tPiwgMjAxMFxuLy8gaHR0cDovL2JhYWdvZS5jb20vZW4vUmFuZG9tTXVzaW5ncy9qYXZhc2NyaXB0L1xuLy8gaHR0cHM6Ly9naXRodWIuY29tL25xdWlubGFuL2JldHRlci1yYW5kb20tbnVtYmVycy1mb3ItamF2YXNjcmlwdC1taXJyb3Jcbi8vIE9yaWdpbmFsIHdvcmsgaXMgdW5kZXIgTUlUIGxpY2Vuc2UgLVxuXG4vLyBDb3B5cmlnaHQgKEMpIDIwMTAgYnkgSm9oYW5uZXMgQmFhZ8O4ZSA8YmFhZ29lQGJhYWdvZS5vcmc+XG4vL1xuLy8gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weVxuLy8gb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbFxuLy8gaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0c1xuLy8gdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbFxuLy8gY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzXG4vLyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOlxuLy9cbi8vIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkIGluXG4vLyBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbi8vXG4vLyBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SXG4vLyBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSxcbi8vIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRVxuLy8gQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUlxuLy8gTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSxcbi8vIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU5cbi8vIFRIRSBTT0ZUV0FSRS5cblxuXG5cbihmdW5jdGlvbihnbG9iYWwsIG1vZHVsZSwgZGVmaW5lKSB7XG5cbmZ1bmN0aW9uIEFsZWEoc2VlZCkge1xuICB2YXIgbWUgPSB0aGlzLCBtYXNoID0gTWFzaCgpO1xuXG4gIG1lLm5leHQgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgdCA9IDIwOTE2MzkgKiBtZS5zMCArIG1lLmMgKiAyLjMyODMwNjQzNjUzODY5NjNlLTEwOyAvLyAyXi0zMlxuICAgIG1lLnMwID0gbWUuczE7XG4gICAgbWUuczEgPSBtZS5zMjtcbiAgICByZXR1cm4gbWUuczIgPSB0IC0gKG1lLmMgPSB0IHwgMCk7XG4gIH07XG5cbiAgLy8gQXBwbHkgdGhlIHNlZWRpbmcgYWxnb3JpdGhtIGZyb20gQmFhZ29lLlxuICBtZS5jID0gMTtcbiAgbWUuczAgPSBtYXNoKCcgJyk7XG4gIG1lLnMxID0gbWFzaCgnICcpO1xuICBtZS5zMiA9IG1hc2goJyAnKTtcbiAgbWUuczAgLT0gbWFzaChzZWVkKTtcbiAgaWYgKG1lLnMwIDwgMCkgeyBtZS5zMCArPSAxOyB9XG4gIG1lLnMxIC09IG1hc2goc2VlZCk7XG4gIGlmIChtZS5zMSA8IDApIHsgbWUuczEgKz0gMTsgfVxuICBtZS5zMiAtPSBtYXNoKHNlZWQpO1xuICBpZiAobWUuczIgPCAwKSB7IG1lLnMyICs9IDE7IH1cbiAgbWFzaCA9IG51bGw7XG59XG5cbmZ1bmN0aW9uIGNvcHkoZiwgdCkge1xuICB0LmMgPSBmLmM7XG4gIHQuczAgPSBmLnMwO1xuICB0LnMxID0gZi5zMTtcbiAgdC5zMiA9IGYuczI7XG4gIHJldHVybiB0O1xufVxuXG5mdW5jdGlvbiBpbXBsKHNlZWQsIG9wdHMpIHtcbiAgdmFyIHhnID0gbmV3IEFsZWEoc2VlZCksXG4gICAgICBzdGF0ZSA9IG9wdHMgJiYgb3B0cy5zdGF0ZSxcbiAgICAgIHBybmcgPSB4Zy5uZXh0O1xuICBwcm5nLmludDMyID0gZnVuY3Rpb24oKSB7IHJldHVybiAoeGcubmV4dCgpICogMHgxMDAwMDAwMDApIHwgMDsgfVxuICBwcm5nLmRvdWJsZSA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBwcm5nKCkgKyAocHJuZygpICogMHgyMDAwMDAgfCAwKSAqIDEuMTEwMjIzMDI0NjI1MTU2NWUtMTY7IC8vIDJeLTUzXG4gIH07XG4gIHBybmcucXVpY2sgPSBwcm5nO1xuICBpZiAoc3RhdGUpIHtcbiAgICBpZiAodHlwZW9mKHN0YXRlKSA9PSAnb2JqZWN0JykgY29weShzdGF0ZSwgeGcpO1xuICAgIHBybmcuc3RhdGUgPSBmdW5jdGlvbigpIHsgcmV0dXJuIGNvcHkoeGcsIHt9KTsgfVxuICB9XG4gIHJldHVybiBwcm5nO1xufVxuXG5mdW5jdGlvbiBNYXNoKCkge1xuICB2YXIgbiA9IDB4ZWZjODI0OWQ7XG5cbiAgdmFyIG1hc2ggPSBmdW5jdGlvbihkYXRhKSB7XG4gICAgZGF0YSA9IFN0cmluZyhkYXRhKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGRhdGEubGVuZ3RoOyBpKyspIHtcbiAgICAgIG4gKz0gZGF0YS5jaGFyQ29kZUF0KGkpO1xuICAgICAgdmFyIGggPSAwLjAyNTE5NjAzMjgyNDE2OTM4ICogbjtcbiAgICAgIG4gPSBoID4+PiAwO1xuICAgICAgaCAtPSBuO1xuICAgICAgaCAqPSBuO1xuICAgICAgbiA9IGggPj4+IDA7XG4gICAgICBoIC09IG47XG4gICAgICBuICs9IGggKiAweDEwMDAwMDAwMDsgLy8gMl4zMlxuICAgIH1cbiAgICByZXR1cm4gKG4gPj4+IDApICogMi4zMjgzMDY0MzY1Mzg2OTYzZS0xMDsgLy8gMl4tMzJcbiAgfTtcblxuICByZXR1cm4gbWFzaDtcbn1cblxuXG5pZiAobW9kdWxlICYmIG1vZHVsZS5leHBvcnRzKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gaW1wbDtcbn0gZWxzZSBpZiAoZGVmaW5lICYmIGRlZmluZS5hbWQpIHtcbiAgZGVmaW5lKGZ1bmN0aW9uKCkgeyByZXR1cm4gaW1wbDsgfSk7XG59IGVsc2Uge1xuICB0aGlzLmFsZWEgPSBpbXBsO1xufVxuXG59KShcbiAgdGhpcyxcbiAgKHR5cGVvZiBtb2R1bGUpID09ICdvYmplY3QnICYmIG1vZHVsZSwgICAgLy8gcHJlc2VudCBpbiBub2RlLmpzXG4gICh0eXBlb2YgZGVmaW5lKSA9PSAnZnVuY3Rpb24nICYmIGRlZmluZSAgIC8vIHByZXNlbnQgd2l0aCBhbiBBTUQgbG9hZGVyXG4pO1xuXG5cbiIsIi8vIEEgSmF2YXNjcmlwdCBpbXBsZW1lbnRhaW9uIG9mIHRoZSBcInhvcjEyOFwiIHBybmcgYWxnb3JpdGhtIGJ5XG4vLyBHZW9yZ2UgTWFyc2FnbGlhLiAgU2VlIGh0dHA6Ly93d3cuanN0YXRzb2Z0Lm9yZy92MDgvaTE0L3BhcGVyXG5cbihmdW5jdGlvbihnbG9iYWwsIG1vZHVsZSwgZGVmaW5lKSB7XG5cbmZ1bmN0aW9uIFhvckdlbihzZWVkKSB7XG4gIHZhciBtZSA9IHRoaXMsIHN0cnNlZWQgPSAnJztcblxuICBtZS54ID0gMDtcbiAgbWUueSA9IDA7XG4gIG1lLnogPSAwO1xuICBtZS53ID0gMDtcblxuICAvLyBTZXQgdXAgZ2VuZXJhdG9yIGZ1bmN0aW9uLlxuICBtZS5uZXh0ID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHQgPSBtZS54IF4gKG1lLnggPDwgMTEpO1xuICAgIG1lLnggPSBtZS55O1xuICAgIG1lLnkgPSBtZS56O1xuICAgIG1lLnogPSBtZS53O1xuICAgIHJldHVybiBtZS53IF49IChtZS53ID4+PiAxOSkgXiB0IF4gKHQgPj4+IDgpO1xuICB9O1xuXG4gIGlmIChzZWVkID09PSAoc2VlZCB8IDApKSB7XG4gICAgLy8gSW50ZWdlciBzZWVkLlxuICAgIG1lLnggPSBzZWVkO1xuICB9IGVsc2Uge1xuICAgIC8vIFN0cmluZyBzZWVkLlxuICAgIHN0cnNlZWQgKz0gc2VlZDtcbiAgfVxuXG4gIC8vIE1peCBpbiBzdHJpbmcgc2VlZCwgdGhlbiBkaXNjYXJkIGFuIGluaXRpYWwgYmF0Y2ggb2YgNjQgdmFsdWVzLlxuICBmb3IgKHZhciBrID0gMDsgayA8IHN0cnNlZWQubGVuZ3RoICsgNjQ7IGsrKykge1xuICAgIG1lLnggXj0gc3Ryc2VlZC5jaGFyQ29kZUF0KGspIHwgMDtcbiAgICBtZS5uZXh0KCk7XG4gIH1cbn1cblxuZnVuY3Rpb24gY29weShmLCB0KSB7XG4gIHQueCA9IGYueDtcbiAgdC55ID0gZi55O1xuICB0LnogPSBmLno7XG4gIHQudyA9IGYudztcbiAgcmV0dXJuIHQ7XG59XG5cbmZ1bmN0aW9uIGltcGwoc2VlZCwgb3B0cykge1xuICB2YXIgeGcgPSBuZXcgWG9yR2VuKHNlZWQpLFxuICAgICAgc3RhdGUgPSBvcHRzICYmIG9wdHMuc3RhdGUsXG4gICAgICBwcm5nID0gZnVuY3Rpb24oKSB7IHJldHVybiAoeGcubmV4dCgpID4+PiAwKSAvIDB4MTAwMDAwMDAwOyB9O1xuICBwcm5nLmRvdWJsZSA9IGZ1bmN0aW9uKCkge1xuICAgIGRvIHtcbiAgICAgIHZhciB0b3AgPSB4Zy5uZXh0KCkgPj4+IDExLFxuICAgICAgICAgIGJvdCA9ICh4Zy5uZXh0KCkgPj4+IDApIC8gMHgxMDAwMDAwMDAsXG4gICAgICAgICAgcmVzdWx0ID0gKHRvcCArIGJvdCkgLyAoMSA8PCAyMSk7XG4gICAgfSB3aGlsZSAocmVzdWx0ID09PSAwKTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xuICBwcm5nLmludDMyID0geGcubmV4dDtcbiAgcHJuZy5xdWljayA9IHBybmc7XG4gIGlmIChzdGF0ZSkge1xuICAgIGlmICh0eXBlb2Yoc3RhdGUpID09ICdvYmplY3QnKSBjb3B5KHN0YXRlLCB4Zyk7XG4gICAgcHJuZy5zdGF0ZSA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gY29weSh4Zywge30pOyB9XG4gIH1cbiAgcmV0dXJuIHBybmc7XG59XG5cbmlmIChtb2R1bGUgJiYgbW9kdWxlLmV4cG9ydHMpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSBpbXBsO1xufSBlbHNlIGlmIChkZWZpbmUgJiYgZGVmaW5lLmFtZCkge1xuICBkZWZpbmUoZnVuY3Rpb24oKSB7IHJldHVybiBpbXBsOyB9KTtcbn0gZWxzZSB7XG4gIHRoaXMueG9yMTI4ID0gaW1wbDtcbn1cblxufSkoXG4gIHRoaXMsXG4gICh0eXBlb2YgbW9kdWxlKSA9PSAnb2JqZWN0JyAmJiBtb2R1bGUsICAgIC8vIHByZXNlbnQgaW4gbm9kZS5qc1xuICAodHlwZW9mIGRlZmluZSkgPT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUgICAvLyBwcmVzZW50IHdpdGggYW4gQU1EIGxvYWRlclxuKTtcblxuXG4iLCIvLyBBIEphdmFzY3JpcHQgaW1wbGVtZW50YWlvbiBvZiB0aGUgXCJ4b3J3b3dcIiBwcm5nIGFsZ29yaXRobSBieVxuLy8gR2VvcmdlIE1hcnNhZ2xpYS4gIFNlZSBodHRwOi8vd3d3LmpzdGF0c29mdC5vcmcvdjA4L2kxNC9wYXBlclxuXG4oZnVuY3Rpb24oZ2xvYmFsLCBtb2R1bGUsIGRlZmluZSkge1xuXG5mdW5jdGlvbiBYb3JHZW4oc2VlZCkge1xuICB2YXIgbWUgPSB0aGlzLCBzdHJzZWVkID0gJyc7XG5cbiAgLy8gU2V0IHVwIGdlbmVyYXRvciBmdW5jdGlvbi5cbiAgbWUubmV4dCA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciB0ID0gKG1lLnggXiAobWUueCA+Pj4gMikpO1xuICAgIG1lLnggPSBtZS55OyBtZS55ID0gbWUuejsgbWUueiA9IG1lLnc7IG1lLncgPSBtZS52O1xuICAgIHJldHVybiAobWUuZCA9IChtZS5kICsgMzYyNDM3IHwgMCkpICtcbiAgICAgICAobWUudiA9IChtZS52IF4gKG1lLnYgPDwgNCkpIF4gKHQgXiAodCA8PCAxKSkpIHwgMDtcbiAgfTtcblxuICBtZS54ID0gMDtcbiAgbWUueSA9IDA7XG4gIG1lLnogPSAwO1xuICBtZS53ID0gMDtcbiAgbWUudiA9IDA7XG5cbiAgaWYgKHNlZWQgPT09IChzZWVkIHwgMCkpIHtcbiAgICAvLyBJbnRlZ2VyIHNlZWQuXG4gICAgbWUueCA9IHNlZWQ7XG4gIH0gZWxzZSB7XG4gICAgLy8gU3RyaW5nIHNlZWQuXG4gICAgc3Ryc2VlZCArPSBzZWVkO1xuICB9XG5cbiAgLy8gTWl4IGluIHN0cmluZyBzZWVkLCB0aGVuIGRpc2NhcmQgYW4gaW5pdGlhbCBiYXRjaCBvZiA2NCB2YWx1ZXMuXG4gIGZvciAodmFyIGsgPSAwOyBrIDwgc3Ryc2VlZC5sZW5ndGggKyA2NDsgaysrKSB7XG4gICAgbWUueCBePSBzdHJzZWVkLmNoYXJDb2RlQXQoaykgfCAwO1xuICAgIGlmIChrID09IHN0cnNlZWQubGVuZ3RoKSB7XG4gICAgICBtZS5kID0gbWUueCA8PCAxMCBeIG1lLnggPj4+IDQ7XG4gICAgfVxuICAgIG1lLm5leHQoKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBjb3B5KGYsIHQpIHtcbiAgdC54ID0gZi54O1xuICB0LnkgPSBmLnk7XG4gIHQueiA9IGYuejtcbiAgdC53ID0gZi53O1xuICB0LnYgPSBmLnY7XG4gIHQuZCA9IGYuZDtcbiAgcmV0dXJuIHQ7XG59XG5cbmZ1bmN0aW9uIGltcGwoc2VlZCwgb3B0cykge1xuICB2YXIgeGcgPSBuZXcgWG9yR2VuKHNlZWQpLFxuICAgICAgc3RhdGUgPSBvcHRzICYmIG9wdHMuc3RhdGUsXG4gICAgICBwcm5nID0gZnVuY3Rpb24oKSB7IHJldHVybiAoeGcubmV4dCgpID4+PiAwKSAvIDB4MTAwMDAwMDAwOyB9O1xuICBwcm5nLmRvdWJsZSA9IGZ1bmN0aW9uKCkge1xuICAgIGRvIHtcbiAgICAgIHZhciB0b3AgPSB4Zy5uZXh0KCkgPj4+IDExLFxuICAgICAgICAgIGJvdCA9ICh4Zy5uZXh0KCkgPj4+IDApIC8gMHgxMDAwMDAwMDAsXG4gICAgICAgICAgcmVzdWx0ID0gKHRvcCArIGJvdCkgLyAoMSA8PCAyMSk7XG4gICAgfSB3aGlsZSAocmVzdWx0ID09PSAwKTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xuICBwcm5nLmludDMyID0geGcubmV4dDtcbiAgcHJuZy5xdWljayA9IHBybmc7XG4gIGlmIChzdGF0ZSkge1xuICAgIGlmICh0eXBlb2Yoc3RhdGUpID09ICdvYmplY3QnKSBjb3B5KHN0YXRlLCB4Zyk7XG4gICAgcHJuZy5zdGF0ZSA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gY29weSh4Zywge30pOyB9XG4gIH1cbiAgcmV0dXJuIHBybmc7XG59XG5cbmlmIChtb2R1bGUgJiYgbW9kdWxlLmV4cG9ydHMpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSBpbXBsO1xufSBlbHNlIGlmIChkZWZpbmUgJiYgZGVmaW5lLmFtZCkge1xuICBkZWZpbmUoZnVuY3Rpb24oKSB7IHJldHVybiBpbXBsOyB9KTtcbn0gZWxzZSB7XG4gIHRoaXMueG9yd293ID0gaW1wbDtcbn1cblxufSkoXG4gIHRoaXMsXG4gICh0eXBlb2YgbW9kdWxlKSA9PSAnb2JqZWN0JyAmJiBtb2R1bGUsICAgIC8vIHByZXNlbnQgaW4gbm9kZS5qc1xuICAodHlwZW9mIGRlZmluZSkgPT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUgICAvLyBwcmVzZW50IHdpdGggYW4gQU1EIGxvYWRlclxuKTtcblxuXG4iLCIvLyBBIEphdmFzY3JpcHQgaW1wbGVtZW50YWlvbiBvZiB0aGUgXCJ4b3JzaGlmdDdcIiBhbGdvcml0aG0gYnlcbi8vIEZyYW7Dp29pcyBQYW5uZXRvbiBhbmQgUGllcnJlIEwnZWN1eWVyOlxuLy8gXCJPbiB0aGUgWG9yZ3NoaWZ0IFJhbmRvbSBOdW1iZXIgR2VuZXJhdG9yc1wiXG4vLyBodHRwOi8vc2FsdWMuZW5nci51Y29ubi5lZHUvcmVmcy9jcnlwdG8vcm5nL3Bhbm5ldG9uMDVvbnRoZXhvcnNoaWZ0LnBkZlxuXG4oZnVuY3Rpb24oZ2xvYmFsLCBtb2R1bGUsIGRlZmluZSkge1xuXG5mdW5jdGlvbiBYb3JHZW4oc2VlZCkge1xuICB2YXIgbWUgPSB0aGlzO1xuXG4gIC8vIFNldCB1cCBnZW5lcmF0b3IgZnVuY3Rpb24uXG4gIG1lLm5leHQgPSBmdW5jdGlvbigpIHtcbiAgICAvLyBVcGRhdGUgeG9yIGdlbmVyYXRvci5cbiAgICB2YXIgWCA9IG1lLngsIGkgPSBtZS5pLCB0LCB2LCB3O1xuICAgIHQgPSBYW2ldOyB0IF49ICh0ID4+PiA3KTsgdiA9IHQgXiAodCA8PCAyNCk7XG4gICAgdCA9IFhbKGkgKyAxKSAmIDddOyB2IF49IHQgXiAodCA+Pj4gMTApO1xuICAgIHQgPSBYWyhpICsgMykgJiA3XTsgdiBePSB0IF4gKHQgPj4+IDMpO1xuICAgIHQgPSBYWyhpICsgNCkgJiA3XTsgdiBePSB0IF4gKHQgPDwgNyk7XG4gICAgdCA9IFhbKGkgKyA3KSAmIDddOyB0ID0gdCBeICh0IDw8IDEzKTsgdiBePSB0IF4gKHQgPDwgOSk7XG4gICAgWFtpXSA9IHY7XG4gICAgbWUuaSA9IChpICsgMSkgJiA3O1xuICAgIHJldHVybiB2O1xuICB9O1xuXG4gIGZ1bmN0aW9uIGluaXQobWUsIHNlZWQpIHtcbiAgICB2YXIgaiwgdywgWCA9IFtdO1xuXG4gICAgaWYgKHNlZWQgPT09IChzZWVkIHwgMCkpIHtcbiAgICAgIC8vIFNlZWQgc3RhdGUgYXJyYXkgdXNpbmcgYSAzMi1iaXQgaW50ZWdlci5cbiAgICAgIHcgPSBYWzBdID0gc2VlZDtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gU2VlZCBzdGF0ZSB1c2luZyBhIHN0cmluZy5cbiAgICAgIHNlZWQgPSAnJyArIHNlZWQ7XG4gICAgICBmb3IgKGogPSAwOyBqIDwgc2VlZC5sZW5ndGg7ICsraikge1xuICAgICAgICBYW2ogJiA3XSA9IChYW2ogJiA3XSA8PCAxNSkgXlxuICAgICAgICAgICAgKHNlZWQuY2hhckNvZGVBdChqKSArIFhbKGogKyAxKSAmIDddIDw8IDEzKTtcbiAgICAgIH1cbiAgICB9XG4gICAgLy8gRW5mb3JjZSBhbiBhcnJheSBsZW5ndGggb2YgOCwgbm90IGFsbCB6ZXJvZXMuXG4gICAgd2hpbGUgKFgubGVuZ3RoIDwgOCkgWC5wdXNoKDApO1xuICAgIGZvciAoaiA9IDA7IGogPCA4ICYmIFhbal0gPT09IDA7ICsraik7XG4gICAgaWYgKGogPT0gOCkgdyA9IFhbN10gPSAtMTsgZWxzZSB3ID0gWFtqXTtcblxuICAgIG1lLnggPSBYO1xuICAgIG1lLmkgPSAwO1xuXG4gICAgLy8gRGlzY2FyZCBhbiBpbml0aWFsIDI1NiB2YWx1ZXMuXG4gICAgZm9yIChqID0gMjU2OyBqID4gMDsgLS1qKSB7XG4gICAgICBtZS5uZXh0KCk7XG4gICAgfVxuICB9XG5cbiAgaW5pdChtZSwgc2VlZCk7XG59XG5cbmZ1bmN0aW9uIGNvcHkoZiwgdCkge1xuICB0LnggPSBmLnguc2xpY2UoKTtcbiAgdC5pID0gZi5pO1xuICByZXR1cm4gdDtcbn1cblxuZnVuY3Rpb24gaW1wbChzZWVkLCBvcHRzKSB7XG4gIGlmIChzZWVkID09IG51bGwpIHNlZWQgPSArKG5ldyBEYXRlKTtcbiAgdmFyIHhnID0gbmV3IFhvckdlbihzZWVkKSxcbiAgICAgIHN0YXRlID0gb3B0cyAmJiBvcHRzLnN0YXRlLFxuICAgICAgcHJuZyA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gKHhnLm5leHQoKSA+Pj4gMCkgLyAweDEwMDAwMDAwMDsgfTtcbiAgcHJuZy5kb3VibGUgPSBmdW5jdGlvbigpIHtcbiAgICBkbyB7XG4gICAgICB2YXIgdG9wID0geGcubmV4dCgpID4+PiAxMSxcbiAgICAgICAgICBib3QgPSAoeGcubmV4dCgpID4+PiAwKSAvIDB4MTAwMDAwMDAwLFxuICAgICAgICAgIHJlc3VsdCA9ICh0b3AgKyBib3QpIC8gKDEgPDwgMjEpO1xuICAgIH0gd2hpbGUgKHJlc3VsdCA9PT0gMCk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcbiAgcHJuZy5pbnQzMiA9IHhnLm5leHQ7XG4gIHBybmcucXVpY2sgPSBwcm5nO1xuICBpZiAoc3RhdGUpIHtcbiAgICBpZiAoc3RhdGUueCkgY29weShzdGF0ZSwgeGcpO1xuICAgIHBybmcuc3RhdGUgPSBmdW5jdGlvbigpIHsgcmV0dXJuIGNvcHkoeGcsIHt9KTsgfVxuICB9XG4gIHJldHVybiBwcm5nO1xufVxuXG5pZiAobW9kdWxlICYmIG1vZHVsZS5leHBvcnRzKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gaW1wbDtcbn0gZWxzZSBpZiAoZGVmaW5lICYmIGRlZmluZS5hbWQpIHtcbiAgZGVmaW5lKGZ1bmN0aW9uKCkgeyByZXR1cm4gaW1wbDsgfSk7XG59IGVsc2Uge1xuICB0aGlzLnhvcnNoaWZ0NyA9IGltcGw7XG59XG5cbn0pKFxuICB0aGlzLFxuICAodHlwZW9mIG1vZHVsZSkgPT0gJ29iamVjdCcgJiYgbW9kdWxlLCAgICAvLyBwcmVzZW50IGluIG5vZGUuanNcbiAgKHR5cGVvZiBkZWZpbmUpID09ICdmdW5jdGlvbicgJiYgZGVmaW5lICAgLy8gcHJlc2VudCB3aXRoIGFuIEFNRCBsb2FkZXJcbik7XG5cbiIsIi8vIEEgSmF2YXNjcmlwdCBpbXBsZW1lbnRhaW9uIG9mIFJpY2hhcmQgQnJlbnQncyBYb3JnZW5zIHhvcjQwOTYgYWxnb3JpdGhtLlxuLy9cbi8vIFRoaXMgZmFzdCBub24tY3J5cHRvZ3JhcGhpYyByYW5kb20gbnVtYmVyIGdlbmVyYXRvciBpcyBkZXNpZ25lZCBmb3Jcbi8vIHVzZSBpbiBNb250ZS1DYXJsbyBhbGdvcml0aG1zLiBJdCBjb21iaW5lcyBhIGxvbmctcGVyaW9kIHhvcnNoaWZ0XG4vLyBnZW5lcmF0b3Igd2l0aCBhIFdleWwgZ2VuZXJhdG9yLCBhbmQgaXQgcGFzc2VzIGFsbCBjb21tb24gYmF0dGVyaWVzXG4vLyBvZiBzdGFzdGljaWFsIHRlc3RzIGZvciByYW5kb21uZXNzIHdoaWxlIGNvbnN1bWluZyBvbmx5IGEgZmV3IG5hbm9zZWNvbmRzXG4vLyBmb3IgZWFjaCBwcm5nIGdlbmVyYXRlZC4gIEZvciBiYWNrZ3JvdW5kIG9uIHRoZSBnZW5lcmF0b3IsIHNlZSBCcmVudCdzXG4vLyBwYXBlcjogXCJTb21lIGxvbmctcGVyaW9kIHJhbmRvbSBudW1iZXIgZ2VuZXJhdG9ycyB1c2luZyBzaGlmdHMgYW5kIHhvcnMuXCJcbi8vIGh0dHA6Ly9hcnhpdi5vcmcvcGRmLzEwMDQuMzExNXYxLnBkZlxuLy9cbi8vIFVzYWdlOlxuLy9cbi8vIHZhciB4b3I0MDk2ID0gcmVxdWlyZSgneG9yNDA5NicpO1xuLy8gcmFuZG9tID0geG9yNDA5NigxKTsgICAgICAgICAgICAgICAgICAgICAgICAvLyBTZWVkIHdpdGggaW50MzIgb3Igc3RyaW5nLlxuLy8gYXNzZXJ0LmVxdWFsKHJhbmRvbSgpLCAwLjE1MjA0MzY0NTA1Mzg1NDcpOyAvLyAoMCwgMSkgcmFuZ2UsIDUzIGJpdHMuXG4vLyBhc3NlcnQuZXF1YWwocmFuZG9tLmludDMyKCksIDE4MDY1MzQ4OTcpOyAgIC8vIHNpZ25lZCBpbnQzMiwgMzIgYml0cy5cbi8vXG4vLyBGb3Igbm9uemVybyBudW1lcmljIGtleXMsIHRoaXMgaW1wZWxlbWVudGF0aW9uIHByb3ZpZGVzIGEgc2VxdWVuY2Vcbi8vIGlkZW50aWNhbCB0byB0aGF0IGJ5IEJyZW50J3MgeG9yZ2VucyAzIGltcGxlbWVudGFpb24gaW4gQy4gIFRoaXNcbi8vIGltcGxlbWVudGF0aW9uIGFsc28gcHJvdmlkZXMgZm9yIGluaXRhbGl6aW5nIHRoZSBnZW5lcmF0b3Igd2l0aFxuLy8gc3RyaW5nIHNlZWRzLCBvciBmb3Igc2F2aW5nIGFuZCByZXN0b3JpbmcgdGhlIHN0YXRlIG9mIHRoZSBnZW5lcmF0b3IuXG4vL1xuLy8gT24gQ2hyb21lLCB0aGlzIHBybmcgYmVuY2htYXJrcyBhYm91dCAyLjEgdGltZXMgc2xvd2VyIHRoYW5cbi8vIEphdmFzY3JpcHQncyBidWlsdC1pbiBNYXRoLnJhbmRvbSgpLlxuXG4oZnVuY3Rpb24oZ2xvYmFsLCBtb2R1bGUsIGRlZmluZSkge1xuXG5mdW5jdGlvbiBYb3JHZW4oc2VlZCkge1xuICB2YXIgbWUgPSB0aGlzO1xuXG4gIC8vIFNldCB1cCBnZW5lcmF0b3IgZnVuY3Rpb24uXG4gIG1lLm5leHQgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgdyA9IG1lLncsXG4gICAgICAgIFggPSBtZS5YLCBpID0gbWUuaSwgdCwgdjtcbiAgICAvLyBVcGRhdGUgV2V5bCBnZW5lcmF0b3IuXG4gICAgbWUudyA9IHcgPSAodyArIDB4NjFjODg2NDcpIHwgMDtcbiAgICAvLyBVcGRhdGUgeG9yIGdlbmVyYXRvci5cbiAgICB2ID0gWFsoaSArIDM0KSAmIDEyN107XG4gICAgdCA9IFhbaSA9ICgoaSArIDEpICYgMTI3KV07XG4gICAgdiBePSB2IDw8IDEzO1xuICAgIHQgXj0gdCA8PCAxNztcbiAgICB2IF49IHYgPj4+IDE1O1xuICAgIHQgXj0gdCA+Pj4gMTI7XG4gICAgLy8gVXBkYXRlIFhvciBnZW5lcmF0b3IgYXJyYXkgc3RhdGUuXG4gICAgdiA9IFhbaV0gPSB2IF4gdDtcbiAgICBtZS5pID0gaTtcbiAgICAvLyBSZXN1bHQgaXMgdGhlIGNvbWJpbmF0aW9uLlxuICAgIHJldHVybiAodiArICh3IF4gKHcgPj4+IDE2KSkpIHwgMDtcbiAgfTtcblxuICBmdW5jdGlvbiBpbml0KG1lLCBzZWVkKSB7XG4gICAgdmFyIHQsIHYsIGksIGosIHcsIFggPSBbXSwgbGltaXQgPSAxMjg7XG4gICAgaWYgKHNlZWQgPT09IChzZWVkIHwgMCkpIHtcbiAgICAgIC8vIE51bWVyaWMgc2VlZHMgaW5pdGlhbGl6ZSB2LCB3aGljaCBpcyB1c2VkIHRvIGdlbmVyYXRlcyBYLlxuICAgICAgdiA9IHNlZWQ7XG4gICAgICBzZWVkID0gbnVsbDtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gU3RyaW5nIHNlZWRzIGFyZSBtaXhlZCBpbnRvIHYgYW5kIFggb25lIGNoYXJhY3RlciBhdCBhIHRpbWUuXG4gICAgICBzZWVkID0gc2VlZCArICdcXDAnO1xuICAgICAgdiA9IDA7XG4gICAgICBsaW1pdCA9IE1hdGgubWF4KGxpbWl0LCBzZWVkLmxlbmd0aCk7XG4gICAgfVxuICAgIC8vIEluaXRpYWxpemUgY2lyY3VsYXIgYXJyYXkgYW5kIHdleWwgdmFsdWUuXG4gICAgZm9yIChpID0gMCwgaiA9IC0zMjsgaiA8IGxpbWl0OyArK2opIHtcbiAgICAgIC8vIFB1dCB0aGUgdW5pY29kZSBjaGFyYWN0ZXJzIGludG8gdGhlIGFycmF5LCBhbmQgc2h1ZmZsZSB0aGVtLlxuICAgICAgaWYgKHNlZWQpIHYgXj0gc2VlZC5jaGFyQ29kZUF0KChqICsgMzIpICUgc2VlZC5sZW5ndGgpO1xuICAgICAgLy8gQWZ0ZXIgMzIgc2h1ZmZsZXMsIHRha2UgdiBhcyB0aGUgc3RhcnRpbmcgdyB2YWx1ZS5cbiAgICAgIGlmIChqID09PSAwKSB3ID0gdjtcbiAgICAgIHYgXj0gdiA8PCAxMDtcbiAgICAgIHYgXj0gdiA+Pj4gMTU7XG4gICAgICB2IF49IHYgPDwgNDtcbiAgICAgIHYgXj0gdiA+Pj4gMTM7XG4gICAgICBpZiAoaiA+PSAwKSB7XG4gICAgICAgIHcgPSAodyArIDB4NjFjODg2NDcpIHwgMDsgICAgIC8vIFdleWwuXG4gICAgICAgIHQgPSAoWFtqICYgMTI3XSBePSAodiArIHcpKTsgIC8vIENvbWJpbmUgeG9yIGFuZCB3ZXlsIHRvIGluaXQgYXJyYXkuXG4gICAgICAgIGkgPSAoMCA9PSB0KSA/IGkgKyAxIDogMDsgICAgIC8vIENvdW50IHplcm9lcy5cbiAgICAgIH1cbiAgICB9XG4gICAgLy8gV2UgaGF2ZSBkZXRlY3RlZCBhbGwgemVyb2VzOyBtYWtlIHRoZSBrZXkgbm9uemVyby5cbiAgICBpZiAoaSA+PSAxMjgpIHtcbiAgICAgIFhbKHNlZWQgJiYgc2VlZC5sZW5ndGggfHwgMCkgJiAxMjddID0gLTE7XG4gICAgfVxuICAgIC8vIFJ1biB0aGUgZ2VuZXJhdG9yIDUxMiB0aW1lcyB0byBmdXJ0aGVyIG1peCB0aGUgc3RhdGUgYmVmb3JlIHVzaW5nIGl0LlxuICAgIC8vIEZhY3RvcmluZyB0aGlzIGFzIGEgZnVuY3Rpb24gc2xvd3MgdGhlIG1haW4gZ2VuZXJhdG9yLCBzbyBpdCBpcyBqdXN0XG4gICAgLy8gdW5yb2xsZWQgaGVyZS4gIFRoZSB3ZXlsIGdlbmVyYXRvciBpcyBub3QgYWR2YW5jZWQgd2hpbGUgd2FybWluZyB1cC5cbiAgICBpID0gMTI3O1xuICAgIGZvciAoaiA9IDQgKiAxMjg7IGogPiAwOyAtLWopIHtcbiAgICAgIHYgPSBYWyhpICsgMzQpICYgMTI3XTtcbiAgICAgIHQgPSBYW2kgPSAoKGkgKyAxKSAmIDEyNyldO1xuICAgICAgdiBePSB2IDw8IDEzO1xuICAgICAgdCBePSB0IDw8IDE3O1xuICAgICAgdiBePSB2ID4+PiAxNTtcbiAgICAgIHQgXj0gdCA+Pj4gMTI7XG4gICAgICBYW2ldID0gdiBeIHQ7XG4gICAgfVxuICAgIC8vIFN0b3Jpbmcgc3RhdGUgYXMgb2JqZWN0IG1lbWJlcnMgaXMgZmFzdGVyIHRoYW4gdXNpbmcgY2xvc3VyZSB2YXJpYWJsZXMuXG4gICAgbWUudyA9IHc7XG4gICAgbWUuWCA9IFg7XG4gICAgbWUuaSA9IGk7XG4gIH1cblxuICBpbml0KG1lLCBzZWVkKTtcbn1cblxuZnVuY3Rpb24gY29weShmLCB0KSB7XG4gIHQuaSA9IGYuaTtcbiAgdC53ID0gZi53O1xuICB0LlggPSBmLlguc2xpY2UoKTtcbiAgcmV0dXJuIHQ7XG59O1xuXG5mdW5jdGlvbiBpbXBsKHNlZWQsIG9wdHMpIHtcbiAgaWYgKHNlZWQgPT0gbnVsbCkgc2VlZCA9ICsobmV3IERhdGUpO1xuICB2YXIgeGcgPSBuZXcgWG9yR2VuKHNlZWQpLFxuICAgICAgc3RhdGUgPSBvcHRzICYmIG9wdHMuc3RhdGUsXG4gICAgICBwcm5nID0gZnVuY3Rpb24oKSB7IHJldHVybiAoeGcubmV4dCgpID4+PiAwKSAvIDB4MTAwMDAwMDAwOyB9O1xuICBwcm5nLmRvdWJsZSA9IGZ1bmN0aW9uKCkge1xuICAgIGRvIHtcbiAgICAgIHZhciB0b3AgPSB4Zy5uZXh0KCkgPj4+IDExLFxuICAgICAgICAgIGJvdCA9ICh4Zy5uZXh0KCkgPj4+IDApIC8gMHgxMDAwMDAwMDAsXG4gICAgICAgICAgcmVzdWx0ID0gKHRvcCArIGJvdCkgLyAoMSA8PCAyMSk7XG4gICAgfSB3aGlsZSAocmVzdWx0ID09PSAwKTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xuICBwcm5nLmludDMyID0geGcubmV4dDtcbiAgcHJuZy5xdWljayA9IHBybmc7XG4gIGlmIChzdGF0ZSkge1xuICAgIGlmIChzdGF0ZS5YKSBjb3B5KHN0YXRlLCB4Zyk7XG4gICAgcHJuZy5zdGF0ZSA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gY29weSh4Zywge30pOyB9XG4gIH1cbiAgcmV0dXJuIHBybmc7XG59XG5cbmlmIChtb2R1bGUgJiYgbW9kdWxlLmV4cG9ydHMpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSBpbXBsO1xufSBlbHNlIGlmIChkZWZpbmUgJiYgZGVmaW5lLmFtZCkge1xuICBkZWZpbmUoZnVuY3Rpb24oKSB7IHJldHVybiBpbXBsOyB9KTtcbn0gZWxzZSB7XG4gIHRoaXMueG9yNDA5NiA9IGltcGw7XG59XG5cbn0pKFxuICB0aGlzLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyB3aW5kb3cgb2JqZWN0IG9yIGdsb2JhbFxuICAodHlwZW9mIG1vZHVsZSkgPT0gJ29iamVjdCcgJiYgbW9kdWxlLCAgICAvLyBwcmVzZW50IGluIG5vZGUuanNcbiAgKHR5cGVvZiBkZWZpbmUpID09ICdmdW5jdGlvbicgJiYgZGVmaW5lICAgLy8gcHJlc2VudCB3aXRoIGFuIEFNRCBsb2FkZXJcbik7XG4iLCIvLyBBIEphdmFzY3JpcHQgaW1wbGVtZW50YWlvbiBvZiB0aGUgXCJUeWNoZS1pXCIgcHJuZyBhbGdvcml0aG0gYnlcbi8vIFNhbXVlbCBOZXZlcyBhbmQgRmlsaXBlIEFyYXVqby5cbi8vIFNlZSBodHRwczovL2VkZW4uZGVpLnVjLnB0L35zbmV2ZXMvcHVicy8yMDExLXNuZmEyLnBkZlxuXG4oZnVuY3Rpb24oZ2xvYmFsLCBtb2R1bGUsIGRlZmluZSkge1xuXG5mdW5jdGlvbiBYb3JHZW4oc2VlZCkge1xuICB2YXIgbWUgPSB0aGlzLCBzdHJzZWVkID0gJyc7XG5cbiAgLy8gU2V0IHVwIGdlbmVyYXRvciBmdW5jdGlvbi5cbiAgbWUubmV4dCA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBiID0gbWUuYiwgYyA9IG1lLmMsIGQgPSBtZS5kLCBhID0gbWUuYTtcbiAgICBiID0gKGIgPDwgMjUpIF4gKGIgPj4+IDcpIF4gYztcbiAgICBjID0gKGMgLSBkKSB8IDA7XG4gICAgZCA9IChkIDw8IDI0KSBeIChkID4+PiA4KSBeIGE7XG4gICAgYSA9IChhIC0gYikgfCAwO1xuICAgIG1lLmIgPSBiID0gKGIgPDwgMjApIF4gKGIgPj4+IDEyKSBeIGM7XG4gICAgbWUuYyA9IGMgPSAoYyAtIGQpIHwgMDtcbiAgICBtZS5kID0gKGQgPDwgMTYpIF4gKGMgPj4+IDE2KSBeIGE7XG4gICAgcmV0dXJuIG1lLmEgPSAoYSAtIGIpIHwgMDtcbiAgfTtcblxuICAvKiBUaGUgZm9sbG93aW5nIGlzIG5vbi1pbnZlcnRlZCB0eWNoZSwgd2hpY2ggaGFzIGJldHRlciBpbnRlcm5hbFxuICAgKiBiaXQgZGlmZnVzaW9uLCBidXQgd2hpY2ggaXMgYWJvdXQgMjUlIHNsb3dlciB0aGFuIHR5Y2hlLWkgaW4gSlMuXG4gIG1lLm5leHQgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgYSA9IG1lLmEsIGIgPSBtZS5iLCBjID0gbWUuYywgZCA9IG1lLmQ7XG4gICAgYSA9IChtZS5hICsgbWUuYiB8IDApID4+PiAwO1xuICAgIGQgPSBtZS5kIF4gYTsgZCA9IGQgPDwgMTYgXiBkID4+PiAxNjtcbiAgICBjID0gbWUuYyArIGQgfCAwO1xuICAgIGIgPSBtZS5iIF4gYzsgYiA9IGIgPDwgMTIgXiBkID4+PiAyMDtcbiAgICBtZS5hID0gYSA9IGEgKyBiIHwgMDtcbiAgICBkID0gZCBeIGE7IG1lLmQgPSBkID0gZCA8PCA4IF4gZCA+Pj4gMjQ7XG4gICAgbWUuYyA9IGMgPSBjICsgZCB8IDA7XG4gICAgYiA9IGIgXiBjO1xuICAgIHJldHVybiBtZS5iID0gKGIgPDwgNyBeIGIgPj4+IDI1KTtcbiAgfVxuICAqL1xuXG4gIG1lLmEgPSAwO1xuICBtZS5iID0gMDtcbiAgbWUuYyA9IDI2NTQ0MzU3NjkgfCAwO1xuICBtZS5kID0gMTM2NzEzMDU1MTtcblxuICBpZiAoc2VlZCA9PT0gTWF0aC5mbG9vcihzZWVkKSkge1xuICAgIC8vIEludGVnZXIgc2VlZC5cbiAgICBtZS5hID0gKHNlZWQgLyAweDEwMDAwMDAwMCkgfCAwO1xuICAgIG1lLmIgPSBzZWVkIHwgMDtcbiAgfSBlbHNlIHtcbiAgICAvLyBTdHJpbmcgc2VlZC5cbiAgICBzdHJzZWVkICs9IHNlZWQ7XG4gIH1cblxuICAvLyBNaXggaW4gc3RyaW5nIHNlZWQsIHRoZW4gZGlzY2FyZCBhbiBpbml0aWFsIGJhdGNoIG9mIDY0IHZhbHVlcy5cbiAgZm9yICh2YXIgayA9IDA7IGsgPCBzdHJzZWVkLmxlbmd0aCArIDIwOyBrKyspIHtcbiAgICBtZS5iIF49IHN0cnNlZWQuY2hhckNvZGVBdChrKSB8IDA7XG4gICAgbWUubmV4dCgpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGNvcHkoZiwgdCkge1xuICB0LmEgPSBmLmE7XG4gIHQuYiA9IGYuYjtcbiAgdC5jID0gZi5jO1xuICB0LmQgPSBmLmQ7XG4gIHJldHVybiB0O1xufTtcblxuZnVuY3Rpb24gaW1wbChzZWVkLCBvcHRzKSB7XG4gIHZhciB4ZyA9IG5ldyBYb3JHZW4oc2VlZCksXG4gICAgICBzdGF0ZSA9IG9wdHMgJiYgb3B0cy5zdGF0ZSxcbiAgICAgIHBybmcgPSBmdW5jdGlvbigpIHsgcmV0dXJuICh4Zy5uZXh0KCkgPj4+IDApIC8gMHgxMDAwMDAwMDA7IH07XG4gIHBybmcuZG91YmxlID0gZnVuY3Rpb24oKSB7XG4gICAgZG8ge1xuICAgICAgdmFyIHRvcCA9IHhnLm5leHQoKSA+Pj4gMTEsXG4gICAgICAgICAgYm90ID0gKHhnLm5leHQoKSA+Pj4gMCkgLyAweDEwMDAwMDAwMCxcbiAgICAgICAgICByZXN1bHQgPSAodG9wICsgYm90KSAvICgxIDw8IDIxKTtcbiAgICB9IHdoaWxlIChyZXN1bHQgPT09IDApO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG4gIHBybmcuaW50MzIgPSB4Zy5uZXh0O1xuICBwcm5nLnF1aWNrID0gcHJuZztcbiAgaWYgKHN0YXRlKSB7XG4gICAgaWYgKHR5cGVvZihzdGF0ZSkgPT0gJ29iamVjdCcpIGNvcHkoc3RhdGUsIHhnKTtcbiAgICBwcm5nLnN0YXRlID0gZnVuY3Rpb24oKSB7IHJldHVybiBjb3B5KHhnLCB7fSk7IH1cbiAgfVxuICByZXR1cm4gcHJuZztcbn1cblxuaWYgKG1vZHVsZSAmJiBtb2R1bGUuZXhwb3J0cykge1xuICBtb2R1bGUuZXhwb3J0cyA9IGltcGw7XG59IGVsc2UgaWYgKGRlZmluZSAmJiBkZWZpbmUuYW1kKSB7XG4gIGRlZmluZShmdW5jdGlvbigpIHsgcmV0dXJuIGltcGw7IH0pO1xufSBlbHNlIHtcbiAgdGhpcy50eWNoZWkgPSBpbXBsO1xufVxuXG59KShcbiAgdGhpcyxcbiAgKHR5cGVvZiBtb2R1bGUpID09ICdvYmplY3QnICYmIG1vZHVsZSwgICAgLy8gcHJlc2VudCBpbiBub2RlLmpzXG4gICh0eXBlb2YgZGVmaW5lKSA9PSAnZnVuY3Rpb24nICYmIGRlZmluZSAgIC8vIHByZXNlbnQgd2l0aCBhbiBBTUQgbG9hZGVyXG4pO1xuXG5cbiIsIi8qXG5Db3B5cmlnaHQgMjAxOSBEYXZpZCBCYXUuXG5cblBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZ1xuYSBjb3B5IG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlXG5cIlNvZnR3YXJlXCIpLCB0byBkZWFsIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmdcbndpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCxcbmRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0b1xucGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMgZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvXG50aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG5cblRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlXG5pbmNsdWRlZCBpbiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cblxuVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCxcbkVYUFJFU1MgT1IgSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRlxuTUVSQ0hBTlRBQklMSVRZLCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULlxuSU4gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTllcbkNMQUlNLCBEQU1BR0VTIE9SIE9USEVSIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsXG5UT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLCBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRVxuU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEUgU09GVFdBUkUuXG5cbiovXG5cbihmdW5jdGlvbiAoZ2xvYmFsLCBwb29sLCBtYXRoKSB7XG4vL1xuLy8gVGhlIGZvbGxvd2luZyBjb25zdGFudHMgYXJlIHJlbGF0ZWQgdG8gSUVFRSA3NTQgbGltaXRzLlxuLy9cblxudmFyIHdpZHRoID0gMjU2LCAgICAgICAgLy8gZWFjaCBSQzQgb3V0cHV0IGlzIDAgPD0geCA8IDI1NlxuICAgIGNodW5rcyA9IDYsICAgICAgICAgLy8gYXQgbGVhc3Qgc2l4IFJDNCBvdXRwdXRzIGZvciBlYWNoIGRvdWJsZVxuICAgIGRpZ2l0cyA9IDUyLCAgICAgICAgLy8gdGhlcmUgYXJlIDUyIHNpZ25pZmljYW50IGRpZ2l0cyBpbiBhIGRvdWJsZVxuICAgIHJuZ25hbWUgPSAncmFuZG9tJywgLy8gcm5nbmFtZTogbmFtZSBmb3IgTWF0aC5yYW5kb20gYW5kIE1hdGguc2VlZHJhbmRvbVxuICAgIHN0YXJ0ZGVub20gPSBtYXRoLnBvdyh3aWR0aCwgY2h1bmtzKSxcbiAgICBzaWduaWZpY2FuY2UgPSBtYXRoLnBvdygyLCBkaWdpdHMpLFxuICAgIG92ZXJmbG93ID0gc2lnbmlmaWNhbmNlICogMixcbiAgICBtYXNrID0gd2lkdGggLSAxLFxuICAgIG5vZGVjcnlwdG87ICAgICAgICAgLy8gbm9kZS5qcyBjcnlwdG8gbW9kdWxlLCBpbml0aWFsaXplZCBhdCB0aGUgYm90dG9tLlxuXG4vL1xuLy8gc2VlZHJhbmRvbSgpXG4vLyBUaGlzIGlzIHRoZSBzZWVkcmFuZG9tIGZ1bmN0aW9uIGRlc2NyaWJlZCBhYm92ZS5cbi8vXG5mdW5jdGlvbiBzZWVkcmFuZG9tKHNlZWQsIG9wdGlvbnMsIGNhbGxiYWNrKSB7XG4gIHZhciBrZXkgPSBbXTtcbiAgb3B0aW9ucyA9IChvcHRpb25zID09IHRydWUpID8geyBlbnRyb3B5OiB0cnVlIH0gOiAob3B0aW9ucyB8fCB7fSk7XG5cbiAgLy8gRmxhdHRlbiB0aGUgc2VlZCBzdHJpbmcgb3IgYnVpbGQgb25lIGZyb20gbG9jYWwgZW50cm9weSBpZiBuZWVkZWQuXG4gIHZhciBzaG9ydHNlZWQgPSBtaXhrZXkoZmxhdHRlbihcbiAgICBvcHRpb25zLmVudHJvcHkgPyBbc2VlZCwgdG9zdHJpbmcocG9vbCldIDpcbiAgICAoc2VlZCA9PSBudWxsKSA/IGF1dG9zZWVkKCkgOiBzZWVkLCAzKSwga2V5KTtcblxuICAvLyBVc2UgdGhlIHNlZWQgdG8gaW5pdGlhbGl6ZSBhbiBBUkM0IGdlbmVyYXRvci5cbiAgdmFyIGFyYzQgPSBuZXcgQVJDNChrZXkpO1xuXG4gIC8vIFRoaXMgZnVuY3Rpb24gcmV0dXJucyBhIHJhbmRvbSBkb3VibGUgaW4gWzAsIDEpIHRoYXQgY29udGFpbnNcbiAgLy8gcmFuZG9tbmVzcyBpbiBldmVyeSBiaXQgb2YgdGhlIG1hbnRpc3NhIG9mIHRoZSBJRUVFIDc1NCB2YWx1ZS5cbiAgdmFyIHBybmcgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgbiA9IGFyYzQuZyhjaHVua3MpLCAgICAgICAgICAgICAvLyBTdGFydCB3aXRoIGEgbnVtZXJhdG9yIG4gPCAyIF4gNDhcbiAgICAgICAgZCA9IHN0YXJ0ZGVub20sICAgICAgICAgICAgICAgICAvLyAgIGFuZCBkZW5vbWluYXRvciBkID0gMiBeIDQ4LlxuICAgICAgICB4ID0gMDsgICAgICAgICAgICAgICAgICAgICAgICAgIC8vICAgYW5kIG5vICdleHRyYSBsYXN0IGJ5dGUnLlxuICAgIHdoaWxlIChuIDwgc2lnbmlmaWNhbmNlKSB7ICAgICAgICAgIC8vIEZpbGwgdXAgYWxsIHNpZ25pZmljYW50IGRpZ2l0cyBieVxuICAgICAgbiA9IChuICsgeCkgKiB3aWR0aDsgICAgICAgICAgICAgIC8vICAgc2hpZnRpbmcgbnVtZXJhdG9yIGFuZFxuICAgICAgZCAqPSB3aWR0aDsgICAgICAgICAgICAgICAgICAgICAgIC8vICAgZGVub21pbmF0b3IgYW5kIGdlbmVyYXRpbmcgYVxuICAgICAgeCA9IGFyYzQuZygxKTsgICAgICAgICAgICAgICAgICAgIC8vICAgbmV3IGxlYXN0LXNpZ25pZmljYW50LWJ5dGUuXG4gICAgfVxuICAgIHdoaWxlIChuID49IG92ZXJmbG93KSB7ICAgICAgICAgICAgIC8vIFRvIGF2b2lkIHJvdW5kaW5nIHVwLCBiZWZvcmUgYWRkaW5nXG4gICAgICBuIC89IDI7ICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gICBsYXN0IGJ5dGUsIHNoaWZ0IGV2ZXJ5dGhpbmdcbiAgICAgIGQgLz0gMjsgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyAgIHJpZ2h0IHVzaW5nIGludGVnZXIgbWF0aCB1bnRpbFxuICAgICAgeCA+Pj49IDE7ICAgICAgICAgICAgICAgICAgICAgICAgIC8vICAgd2UgaGF2ZSBleGFjdGx5IHRoZSBkZXNpcmVkIGJpdHMuXG4gICAgfVxuICAgIHJldHVybiAobiArIHgpIC8gZDsgICAgICAgICAgICAgICAgIC8vIEZvcm0gdGhlIG51bWJlciB3aXRoaW4gWzAsIDEpLlxuICB9O1xuXG4gIHBybmcuaW50MzIgPSBmdW5jdGlvbigpIHsgcmV0dXJuIGFyYzQuZyg0KSB8IDA7IH1cbiAgcHJuZy5xdWljayA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gYXJjNC5nKDQpIC8gMHgxMDAwMDAwMDA7IH1cbiAgcHJuZy5kb3VibGUgPSBwcm5nO1xuXG4gIC8vIE1peCB0aGUgcmFuZG9tbmVzcyBpbnRvIGFjY3VtdWxhdGVkIGVudHJvcHkuXG4gIG1peGtleSh0b3N0cmluZyhhcmM0LlMpLCBwb29sKTtcblxuICAvLyBDYWxsaW5nIGNvbnZlbnRpb246IHdoYXQgdG8gcmV0dXJuIGFzIGEgZnVuY3Rpb24gb2YgcHJuZywgc2VlZCwgaXNfbWF0aC5cbiAgcmV0dXJuIChvcHRpb25zLnBhc3MgfHwgY2FsbGJhY2sgfHxcbiAgICAgIGZ1bmN0aW9uKHBybmcsIHNlZWQsIGlzX21hdGhfY2FsbCwgc3RhdGUpIHtcbiAgICAgICAgaWYgKHN0YXRlKSB7XG4gICAgICAgICAgLy8gTG9hZCB0aGUgYXJjNCBzdGF0ZSBmcm9tIHRoZSBnaXZlbiBzdGF0ZSBpZiBpdCBoYXMgYW4gUyBhcnJheS5cbiAgICAgICAgICBpZiAoc3RhdGUuUykgeyBjb3B5KHN0YXRlLCBhcmM0KTsgfVxuICAgICAgICAgIC8vIE9ubHkgcHJvdmlkZSB0aGUgLnN0YXRlIG1ldGhvZCBpZiByZXF1ZXN0ZWQgdmlhIG9wdGlvbnMuc3RhdGUuXG4gICAgICAgICAgcHJuZy5zdGF0ZSA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gY29weShhcmM0LCB7fSk7IH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIElmIGNhbGxlZCBhcyBhIG1ldGhvZCBvZiBNYXRoIChNYXRoLnNlZWRyYW5kb20oKSksIG11dGF0ZVxuICAgICAgICAvLyBNYXRoLnJhbmRvbSBiZWNhdXNlIHRoYXQgaXMgaG93IHNlZWRyYW5kb20uanMgaGFzIHdvcmtlZCBzaW5jZSB2MS4wLlxuICAgICAgICBpZiAoaXNfbWF0aF9jYWxsKSB7IG1hdGhbcm5nbmFtZV0gPSBwcm5nOyByZXR1cm4gc2VlZDsgfVxuXG4gICAgICAgIC8vIE90aGVyd2lzZSwgaXQgaXMgYSBuZXdlciBjYWxsaW5nIGNvbnZlbnRpb24sIHNvIHJldHVybiB0aGVcbiAgICAgICAgLy8gcHJuZyBkaXJlY3RseS5cbiAgICAgICAgZWxzZSByZXR1cm4gcHJuZztcbiAgICAgIH0pKFxuICBwcm5nLFxuICBzaG9ydHNlZWQsXG4gICdnbG9iYWwnIGluIG9wdGlvbnMgPyBvcHRpb25zLmdsb2JhbCA6ICh0aGlzID09IG1hdGgpLFxuICBvcHRpb25zLnN0YXRlKTtcbn1cblxuLy9cbi8vIEFSQzRcbi8vXG4vLyBBbiBBUkM0IGltcGxlbWVudGF0aW9uLiAgVGhlIGNvbnN0cnVjdG9yIHRha2VzIGEga2V5IGluIHRoZSBmb3JtIG9mXG4vLyBhbiBhcnJheSBvZiBhdCBtb3N0ICh3aWR0aCkgaW50ZWdlcnMgdGhhdCBzaG91bGQgYmUgMCA8PSB4IDwgKHdpZHRoKS5cbi8vXG4vLyBUaGUgZyhjb3VudCkgbWV0aG9kIHJldHVybnMgYSBwc2V1ZG9yYW5kb20gaW50ZWdlciB0aGF0IGNvbmNhdGVuYXRlc1xuLy8gdGhlIG5leHQgKGNvdW50KSBvdXRwdXRzIGZyb20gQVJDNC4gIEl0cyByZXR1cm4gdmFsdWUgaXMgYSBudW1iZXIgeFxuLy8gdGhhdCBpcyBpbiB0aGUgcmFuZ2UgMCA8PSB4IDwgKHdpZHRoIF4gY291bnQpLlxuLy9cbmZ1bmN0aW9uIEFSQzQoa2V5KSB7XG4gIHZhciB0LCBrZXlsZW4gPSBrZXkubGVuZ3RoLFxuICAgICAgbWUgPSB0aGlzLCBpID0gMCwgaiA9IG1lLmkgPSBtZS5qID0gMCwgcyA9IG1lLlMgPSBbXTtcblxuICAvLyBUaGUgZW1wdHkga2V5IFtdIGlzIHRyZWF0ZWQgYXMgWzBdLlxuICBpZiAoIWtleWxlbikgeyBrZXkgPSBba2V5bGVuKytdOyB9XG5cbiAgLy8gU2V0IHVwIFMgdXNpbmcgdGhlIHN0YW5kYXJkIGtleSBzY2hlZHVsaW5nIGFsZ29yaXRobS5cbiAgd2hpbGUgKGkgPCB3aWR0aCkge1xuICAgIHNbaV0gPSBpKys7XG4gIH1cbiAgZm9yIChpID0gMDsgaSA8IHdpZHRoOyBpKyspIHtcbiAgICBzW2ldID0gc1tqID0gbWFzayAmIChqICsga2V5W2kgJSBrZXlsZW5dICsgKHQgPSBzW2ldKSldO1xuICAgIHNbal0gPSB0O1xuICB9XG5cbiAgLy8gVGhlIFwiZ1wiIG1ldGhvZCByZXR1cm5zIHRoZSBuZXh0IChjb3VudCkgb3V0cHV0cyBhcyBvbmUgbnVtYmVyLlxuICAobWUuZyA9IGZ1bmN0aW9uKGNvdW50KSB7XG4gICAgLy8gVXNpbmcgaW5zdGFuY2UgbWVtYmVycyBpbnN0ZWFkIG9mIGNsb3N1cmUgc3RhdGUgbmVhcmx5IGRvdWJsZXMgc3BlZWQuXG4gICAgdmFyIHQsIHIgPSAwLFxuICAgICAgICBpID0gbWUuaSwgaiA9IG1lLmosIHMgPSBtZS5TO1xuICAgIHdoaWxlIChjb3VudC0tKSB7XG4gICAgICB0ID0gc1tpID0gbWFzayAmIChpICsgMSldO1xuICAgICAgciA9IHIgKiB3aWR0aCArIHNbbWFzayAmICgoc1tpXSA9IHNbaiA9IG1hc2sgJiAoaiArIHQpXSkgKyAoc1tqXSA9IHQpKV07XG4gICAgfVxuICAgIG1lLmkgPSBpOyBtZS5qID0gajtcbiAgICByZXR1cm4gcjtcbiAgICAvLyBGb3Igcm9idXN0IHVucHJlZGljdGFiaWxpdHksIHRoZSBmdW5jdGlvbiBjYWxsIGJlbG93IGF1dG9tYXRpY2FsbHlcbiAgICAvLyBkaXNjYXJkcyBhbiBpbml0aWFsIGJhdGNoIG9mIHZhbHVlcy4gIFRoaXMgaXMgY2FsbGVkIFJDNC1kcm9wWzI1Nl0uXG4gICAgLy8gU2VlIGh0dHA6Ly9nb29nbGUuY29tL3NlYXJjaD9xPXJzYStmbHVocmVyK3Jlc3BvbnNlJmJ0bklcbiAgfSkod2lkdGgpO1xufVxuXG4vL1xuLy8gY29weSgpXG4vLyBDb3BpZXMgaW50ZXJuYWwgc3RhdGUgb2YgQVJDNCB0byBvciBmcm9tIGEgcGxhaW4gb2JqZWN0LlxuLy9cbmZ1bmN0aW9uIGNvcHkoZiwgdCkge1xuICB0LmkgPSBmLmk7XG4gIHQuaiA9IGYuajtcbiAgdC5TID0gZi5TLnNsaWNlKCk7XG4gIHJldHVybiB0O1xufTtcblxuLy9cbi8vIGZsYXR0ZW4oKVxuLy8gQ29udmVydHMgYW4gb2JqZWN0IHRyZWUgdG8gbmVzdGVkIGFycmF5cyBvZiBzdHJpbmdzLlxuLy9cbmZ1bmN0aW9uIGZsYXR0ZW4ob2JqLCBkZXB0aCkge1xuICB2YXIgcmVzdWx0ID0gW10sIHR5cCA9ICh0eXBlb2Ygb2JqKSwgcHJvcDtcbiAgaWYgKGRlcHRoICYmIHR5cCA9PSAnb2JqZWN0Jykge1xuICAgIGZvciAocHJvcCBpbiBvYmopIHtcbiAgICAgIHRyeSB7IHJlc3VsdC5wdXNoKGZsYXR0ZW4ob2JqW3Byb3BdLCBkZXB0aCAtIDEpKTsgfSBjYXRjaCAoZSkge31cbiAgICB9XG4gIH1cbiAgcmV0dXJuIChyZXN1bHQubGVuZ3RoID8gcmVzdWx0IDogdHlwID09ICdzdHJpbmcnID8gb2JqIDogb2JqICsgJ1xcMCcpO1xufVxuXG4vL1xuLy8gbWl4a2V5KClcbi8vIE1peGVzIGEgc3RyaW5nIHNlZWQgaW50byBhIGtleSB0aGF0IGlzIGFuIGFycmF5IG9mIGludGVnZXJzLCBhbmRcbi8vIHJldHVybnMgYSBzaG9ydGVuZWQgc3RyaW5nIHNlZWQgdGhhdCBpcyBlcXVpdmFsZW50IHRvIHRoZSByZXN1bHQga2V5LlxuLy9cbmZ1bmN0aW9uIG1peGtleShzZWVkLCBrZXkpIHtcbiAgdmFyIHN0cmluZ3NlZWQgPSBzZWVkICsgJycsIHNtZWFyLCBqID0gMDtcbiAgd2hpbGUgKGogPCBzdHJpbmdzZWVkLmxlbmd0aCkge1xuICAgIGtleVttYXNrICYgal0gPVxuICAgICAgbWFzayAmICgoc21lYXIgXj0ga2V5W21hc2sgJiBqXSAqIDE5KSArIHN0cmluZ3NlZWQuY2hhckNvZGVBdChqKyspKTtcbiAgfVxuICByZXR1cm4gdG9zdHJpbmcoa2V5KTtcbn1cblxuLy9cbi8vIGF1dG9zZWVkKClcbi8vIFJldHVybnMgYW4gb2JqZWN0IGZvciBhdXRvc2VlZGluZywgdXNpbmcgd2luZG93LmNyeXB0byBhbmQgTm9kZSBjcnlwdG9cbi8vIG1vZHVsZSBpZiBhdmFpbGFibGUuXG4vL1xuZnVuY3Rpb24gYXV0b3NlZWQoKSB7XG4gIHRyeSB7XG4gICAgdmFyIG91dDtcbiAgICBpZiAobm9kZWNyeXB0byAmJiAob3V0ID0gbm9kZWNyeXB0by5yYW5kb21CeXRlcykpIHtcbiAgICAgIC8vIFRoZSB1c2Ugb2YgJ291dCcgdG8gcmVtZW1iZXIgcmFuZG9tQnl0ZXMgbWFrZXMgdGlnaHQgbWluaWZpZWQgY29kZS5cbiAgICAgIG91dCA9IG91dCh3aWR0aCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIG91dCA9IG5ldyBVaW50OEFycmF5KHdpZHRoKTtcbiAgICAgIChnbG9iYWwuY3J5cHRvIHx8IGdsb2JhbC5tc0NyeXB0bykuZ2V0UmFuZG9tVmFsdWVzKG91dCk7XG4gICAgfVxuICAgIHJldHVybiB0b3N0cmluZyhvdXQpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgdmFyIGJyb3dzZXIgPSBnbG9iYWwubmF2aWdhdG9yLFxuICAgICAgICBwbHVnaW5zID0gYnJvd3NlciAmJiBicm93c2VyLnBsdWdpbnM7XG4gICAgcmV0dXJuIFsrbmV3IERhdGUsIGdsb2JhbCwgcGx1Z2lucywgZ2xvYmFsLnNjcmVlbiwgdG9zdHJpbmcocG9vbCldO1xuICB9XG59XG5cbi8vXG4vLyB0b3N0cmluZygpXG4vLyBDb252ZXJ0cyBhbiBhcnJheSBvZiBjaGFyY29kZXMgdG8gYSBzdHJpbmdcbi8vXG5mdW5jdGlvbiB0b3N0cmluZyhhKSB7XG4gIHJldHVybiBTdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KDAsIGEpO1xufVxuXG4vL1xuLy8gV2hlbiBzZWVkcmFuZG9tLmpzIGlzIGxvYWRlZCwgd2UgaW1tZWRpYXRlbHkgbWl4IGEgZmV3IGJpdHNcbi8vIGZyb20gdGhlIGJ1aWx0LWluIFJORyBpbnRvIHRoZSBlbnRyb3B5IHBvb2wuICBCZWNhdXNlIHdlIGRvXG4vLyBub3Qgd2FudCB0byBpbnRlcmZlcmUgd2l0aCBkZXRlcm1pbmlzdGljIFBSTkcgc3RhdGUgbGF0ZXIsXG4vLyBzZWVkcmFuZG9tIHdpbGwgbm90IGNhbGwgbWF0aC5yYW5kb20gb24gaXRzIG93biBhZ2FpbiBhZnRlclxuLy8gaW5pdGlhbGl6YXRpb24uXG4vL1xubWl4a2V5KG1hdGgucmFuZG9tKCksIHBvb2wpO1xuXG4vL1xuLy8gTm9kZWpzIGFuZCBBTUQgc3VwcG9ydDogZXhwb3J0IHRoZSBpbXBsZW1lbnRhdGlvbiBhcyBhIG1vZHVsZSB1c2luZ1xuLy8gZWl0aGVyIGNvbnZlbnRpb24uXG4vL1xuaWYgKCh0eXBlb2YgbW9kdWxlKSA9PSAnb2JqZWN0JyAmJiBtb2R1bGUuZXhwb3J0cykge1xuICBtb2R1bGUuZXhwb3J0cyA9IHNlZWRyYW5kb207XG4gIC8vIFdoZW4gaW4gbm9kZS5qcywgdHJ5IHVzaW5nIGNyeXB0byBwYWNrYWdlIGZvciBhdXRvc2VlZGluZy5cbiAgdHJ5IHtcbiAgICBub2RlY3J5cHRvID0gcmVxdWlyZSgnY3J5cHRvJyk7XG4gIH0gY2F0Y2ggKGV4KSB7fVxufSBlbHNlIGlmICgodHlwZW9mIGRlZmluZSkgPT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kKSB7XG4gIGRlZmluZShmdW5jdGlvbigpIHsgcmV0dXJuIHNlZWRyYW5kb207IH0pO1xufSBlbHNlIHtcbiAgLy8gV2hlbiBpbmNsdWRlZCBhcyBhIHBsYWluIHNjcmlwdCwgc2V0IHVwIE1hdGguc2VlZHJhbmRvbSBnbG9iYWwuXG4gIG1hdGhbJ3NlZWQnICsgcm5nbmFtZV0gPSBzZWVkcmFuZG9tO1xufVxuXG5cbi8vIEVuZCBhbm9ueW1vdXMgc2NvcGUsIGFuZCBwYXNzIGluaXRpYWwgdmFsdWVzLlxufSkoXG4gIC8vIGdsb2JhbDogYHNlbGZgIGluIGJyb3dzZXJzIChpbmNsdWRpbmcgc3RyaWN0IG1vZGUgYW5kIHdlYiB3b3JrZXJzKSxcbiAgLy8gb3RoZXJ3aXNlIGB0aGlzYCBpbiBOb2RlIGFuZCBvdGhlciBlbnZpcm9ubWVudHNcbiAgKHR5cGVvZiBzZWxmICE9PSAndW5kZWZpbmVkJykgPyBzZWxmIDogdGhpcyxcbiAgW10sICAgICAvLyBwb29sOiBlbnRyb3B5IHBvb2wgc3RhcnRzIGVtcHR5XG4gIE1hdGggICAgLy8gbWF0aDogcGFja2FnZSBjb250YWluaW5nIHJhbmRvbSwgcG93LCBhbmQgc2VlZHJhbmRvbVxuKTtcbiIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZ2V0RG9tVHJlZVNoYXBlcyA9IGdldERvbVRyZWVTaGFwZXM7XG5leHBvcnRzLmZpbmROYXRpdmVIYW5kbGVyID0gZmluZE5hdGl2ZUhhbmRsZXI7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG5cbnZhciBfZXh0ZW5kczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2V4dGVuZHNcIikpO1xuXG52YXIgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvb2JqZWN0V2l0aG91dFByb3BlcnRpZXNcIikpO1xuXG52YXIgX2NsYXNzQ2FsbENoZWNrMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2tcIikpO1xuXG52YXIgX2NyZWF0ZUNsYXNzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvY3JlYXRlQ2xhc3NcIikpO1xuXG52YXIgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4yID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuXCIpKTtcblxudmFyIF9nZXRQcm90b3R5cGVPZjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2dldFByb3RvdHlwZU9mXCIpKTtcblxudmFyIF9pbmhlcml0czIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2luaGVyaXRzXCIpKTtcblxudmFyIF9yZWFjdCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInJlYWN0XCIpKTtcblxudmFyIF9wcm9wVHlwZXMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJwcm9wLXR5cGVzXCIpKTtcblxudmFyIF93YXJuaW5nID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwid2FybmluZ1wiKSk7XG5cbnZhciBfcmVhY3RTd2lwZWFibGVWaWV3c0NvcmUgPSByZXF1aXJlKFwicmVhY3Qtc3dpcGVhYmxlLXZpZXdzLWNvcmVcIik7XG5cbmZ1bmN0aW9uIGFkZEV2ZW50TGlzdGVuZXIobm9kZSwgZXZlbnQsIGhhbmRsZXIsIG9wdGlvbnMpIHtcbiAgbm9kZS5hZGRFdmVudExpc3RlbmVyKGV2ZW50LCBoYW5kbGVyLCBvcHRpb25zKTtcbiAgcmV0dXJuIHtcbiAgICByZW1vdmU6IGZ1bmN0aW9uIHJlbW92ZSgpIHtcbiAgICAgIG5vZGUucmVtb3ZlRXZlbnRMaXN0ZW5lcihldmVudCwgaGFuZGxlciwgb3B0aW9ucyk7XG4gICAgfVxuICB9O1xufVxuXG52YXIgc3R5bGVzID0ge1xuICBjb250YWluZXI6IHtcbiAgICBkaXJlY3Rpb246ICdsdHInLFxuICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICB3aWxsQ2hhbmdlOiAndHJhbnNmb3JtJ1xuICB9LFxuICBzbGlkZToge1xuICAgIHdpZHRoOiAnMTAwJScsXG4gICAgV2Via2l0RmxleFNocmluazogMCxcbiAgICBmbGV4U2hyaW5rOiAwLFxuICAgIG92ZXJmbG93OiAnYXV0bydcbiAgfVxufTtcbnZhciBheGlzUHJvcGVydGllcyA9IHtcbiAgcm9vdDoge1xuICAgIHg6IHtcbiAgICAgIG92ZXJmbG93WDogJ2hpZGRlbidcbiAgICB9LFxuICAgICd4LXJldmVyc2UnOiB7XG4gICAgICBvdmVyZmxvd1g6ICdoaWRkZW4nXG4gICAgfSxcbiAgICB5OiB7XG4gICAgICBvdmVyZmxvd1k6ICdoaWRkZW4nXG4gICAgfSxcbiAgICAneS1yZXZlcnNlJzoge1xuICAgICAgb3ZlcmZsb3dZOiAnaGlkZGVuJ1xuICAgIH1cbiAgfSxcbiAgZmxleERpcmVjdGlvbjoge1xuICAgIHg6ICdyb3cnLFxuICAgICd4LXJldmVyc2UnOiAncm93LXJldmVyc2UnLFxuICAgIHk6ICdjb2x1bW4nLFxuICAgICd5LXJldmVyc2UnOiAnY29sdW1uLXJldmVyc2UnXG4gIH0sXG4gIHRyYW5zZm9ybToge1xuICAgIHg6IGZ1bmN0aW9uIHgodHJhbnNsYXRlKSB7XG4gICAgICByZXR1cm4gXCJ0cmFuc2xhdGUoXCIuY29uY2F0KC10cmFuc2xhdGUsIFwiJSwgMClcIik7XG4gICAgfSxcbiAgICAneC1yZXZlcnNlJzogZnVuY3Rpb24geFJldmVyc2UodHJhbnNsYXRlKSB7XG4gICAgICByZXR1cm4gXCJ0cmFuc2xhdGUoXCIuY29uY2F0KHRyYW5zbGF0ZSwgXCIlLCAwKVwiKTtcbiAgICB9LFxuICAgIHk6IGZ1bmN0aW9uIHkodHJhbnNsYXRlKSB7XG4gICAgICByZXR1cm4gXCJ0cmFuc2xhdGUoMCwgXCIuY29uY2F0KC10cmFuc2xhdGUsIFwiJSlcIik7XG4gICAgfSxcbiAgICAneS1yZXZlcnNlJzogZnVuY3Rpb24geVJldmVyc2UodHJhbnNsYXRlKSB7XG4gICAgICByZXR1cm4gXCJ0cmFuc2xhdGUoMCwgXCIuY29uY2F0KHRyYW5zbGF0ZSwgXCIlKVwiKTtcbiAgICB9XG4gIH0sXG4gIGxlbmd0aDoge1xuICAgIHg6ICd3aWR0aCcsXG4gICAgJ3gtcmV2ZXJzZSc6ICd3aWR0aCcsXG4gICAgeTogJ2hlaWdodCcsXG4gICAgJ3ktcmV2ZXJzZSc6ICdoZWlnaHQnXG4gIH0sXG4gIHJvdGF0aW9uTWF0cml4OiB7XG4gICAgeDoge1xuICAgICAgeDogWzEsIDBdLFxuICAgICAgeTogWzAsIDFdXG4gICAgfSxcbiAgICAneC1yZXZlcnNlJzoge1xuICAgICAgeDogWy0xLCAwXSxcbiAgICAgIHk6IFswLCAxXVxuICAgIH0sXG4gICAgeToge1xuICAgICAgeDogWzAsIDFdLFxuICAgICAgeTogWzEsIDBdXG4gICAgfSxcbiAgICAneS1yZXZlcnNlJzoge1xuICAgICAgeDogWzAsIC0xXSxcbiAgICAgIHk6IFsxLCAwXVxuICAgIH1cbiAgfSxcbiAgc2Nyb2xsUG9zaXRpb246IHtcbiAgICB4OiAnc2Nyb2xsTGVmdCcsXG4gICAgJ3gtcmV2ZXJzZSc6ICdzY3JvbGxMZWZ0JyxcbiAgICB5OiAnc2Nyb2xsVG9wJyxcbiAgICAneS1yZXZlcnNlJzogJ3Njcm9sbFRvcCdcbiAgfSxcbiAgc2Nyb2xsTGVuZ3RoOiB7XG4gICAgeDogJ3Njcm9sbFdpZHRoJyxcbiAgICAneC1yZXZlcnNlJzogJ3Njcm9sbFdpZHRoJyxcbiAgICB5OiAnc2Nyb2xsSGVpZ2h0JyxcbiAgICAneS1yZXZlcnNlJzogJ3Njcm9sbEhlaWdodCdcbiAgfSxcbiAgY2xpZW50TGVuZ3RoOiB7XG4gICAgeDogJ2NsaWVudFdpZHRoJyxcbiAgICAneC1yZXZlcnNlJzogJ2NsaWVudFdpZHRoJyxcbiAgICB5OiAnY2xpZW50SGVpZ2h0JyxcbiAgICAneS1yZXZlcnNlJzogJ2NsaWVudEhlaWdodCdcbiAgfVxufTtcblxuZnVuY3Rpb24gY3JlYXRlVHJhbnNpdGlvbihwcm9wZXJ0eSwgb3B0aW9ucykge1xuICB2YXIgZHVyYXRpb24gPSBvcHRpb25zLmR1cmF0aW9uLFxuICAgICAgZWFzZUZ1bmN0aW9uID0gb3B0aW9ucy5lYXNlRnVuY3Rpb24sXG4gICAgICBkZWxheSA9IG9wdGlvbnMuZGVsYXk7XG4gIHJldHVybiBcIlwiLmNvbmNhdChwcm9wZXJ0eSwgXCIgXCIpLmNvbmNhdChkdXJhdGlvbiwgXCIgXCIpLmNvbmNhdChlYXNlRnVuY3Rpb24sIFwiIFwiKS5jb25jYXQoZGVsYXkpO1xufSAvLyBXZSBhcmUgdXNpbmcgYSAyeDIgcm90YXRpb24gbWF0cml4LlxuXG5cbmZ1bmN0aW9uIGFwcGx5Um90YXRpb25NYXRyaXgodG91Y2gsIGF4aXMpIHtcbiAgdmFyIHJvdGF0aW9uTWF0cml4ID0gYXhpc1Byb3BlcnRpZXMucm90YXRpb25NYXRyaXhbYXhpc107XG4gIHJldHVybiB7XG4gICAgcGFnZVg6IHJvdGF0aW9uTWF0cml4LnhbMF0gKiB0b3VjaC5wYWdlWCArIHJvdGF0aW9uTWF0cml4LnhbMV0gKiB0b3VjaC5wYWdlWSxcbiAgICBwYWdlWTogcm90YXRpb25NYXRyaXgueVswXSAqIHRvdWNoLnBhZ2VYICsgcm90YXRpb25NYXRyaXgueVsxXSAqIHRvdWNoLnBhZ2VZXG4gIH07XG59XG5cbmZ1bmN0aW9uIGFkYXB0TW91c2UoZXZlbnQpIHtcbiAgZXZlbnQudG91Y2hlcyA9IFt7XG4gICAgcGFnZVg6IGV2ZW50LnBhZ2VYLFxuICAgIHBhZ2VZOiBldmVudC5wYWdlWVxuICB9XTtcbiAgcmV0dXJuIGV2ZW50O1xufVxuXG5mdW5jdGlvbiBnZXREb21UcmVlU2hhcGVzKGVsZW1lbnQsIHJvb3ROb2RlKSB7XG4gIHZhciBkb21UcmVlU2hhcGVzID0gW107XG5cbiAgd2hpbGUgKGVsZW1lbnQgJiYgZWxlbWVudCAhPT0gcm9vdE5vZGUpIHtcbiAgICAvLyBXZSByZWFjaCBhIFN3aXBlYWJsZSBWaWV3LCBubyBuZWVkIHRvIGxvb2sgaGlnaGVyIGluIHRoZSBkb20gdHJlZS5cbiAgICBpZiAoZWxlbWVudC5oYXNBdHRyaWJ1dGUoJ2RhdGEtc3dpcGVhYmxlJykpIHtcbiAgICAgIGJyZWFrO1xuICAgIH1cblxuICAgIHZhciBzdHlsZSA9IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKGVsZW1lbnQpO1xuXG4gICAgaWYgKCAvLyBJZ25vcmUgdGhlIHNjcm9sbCBjaGlsZHJlbiBpZiB0aGUgZWxlbWVudCBpcyBhYnNvbHV0ZSBwb3NpdGlvbmVkLlxuICAgIHN0eWxlLmdldFByb3BlcnR5VmFsdWUoJ3Bvc2l0aW9uJykgPT09ICdhYnNvbHV0ZScgfHwgLy8gSWdub3JlIHRoZSBzY3JvbGwgY2hpbGRyZW4gaWYgdGhlIGVsZW1lbnQgaGFzIGFuIG92ZXJmbG93WCBoaWRkZW5cbiAgICBzdHlsZS5nZXRQcm9wZXJ0eVZhbHVlKCdvdmVyZmxvdy14JykgPT09ICdoaWRkZW4nKSB7XG4gICAgICBkb21UcmVlU2hhcGVzID0gW107XG4gICAgfSBlbHNlIGlmIChlbGVtZW50LmNsaWVudFdpZHRoID4gMCAmJiBlbGVtZW50LnNjcm9sbFdpZHRoID4gZWxlbWVudC5jbGllbnRXaWR0aCB8fCBlbGVtZW50LmNsaWVudEhlaWdodCA+IDAgJiYgZWxlbWVudC5zY3JvbGxIZWlnaHQgPiBlbGVtZW50LmNsaWVudEhlaWdodCkge1xuICAgICAgLy8gSWdub3JlIHRoZSBub2RlcyB0aGF0IGhhdmUgbm8gd2lkdGguXG4gICAgICAvLyBLZWVwIGVsZW1lbnRzIHdpdGggYSBzY3JvbGxcbiAgICAgIGRvbVRyZWVTaGFwZXMucHVzaCh7XG4gICAgICAgIGVsZW1lbnQ6IGVsZW1lbnQsXG4gICAgICAgIHNjcm9sbFdpZHRoOiBlbGVtZW50LnNjcm9sbFdpZHRoLFxuICAgICAgICBzY3JvbGxIZWlnaHQ6IGVsZW1lbnQuc2Nyb2xsSGVpZ2h0LFxuICAgICAgICBjbGllbnRXaWR0aDogZWxlbWVudC5jbGllbnRXaWR0aCxcbiAgICAgICAgY2xpZW50SGVpZ2h0OiBlbGVtZW50LmNsaWVudEhlaWdodCxcbiAgICAgICAgc2Nyb2xsTGVmdDogZWxlbWVudC5zY3JvbGxMZWZ0LFxuICAgICAgICBzY3JvbGxUb3A6IGVsZW1lbnQuc2Nyb2xsVG9wXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBlbGVtZW50ID0gZWxlbWVudC5wYXJlbnROb2RlO1xuICB9XG5cbiAgcmV0dXJuIGRvbVRyZWVTaGFwZXM7XG59IC8vIFdlIGNhbiBvbmx5IGhhdmUgb25lIG5vZGUgYXQgdGhlIHRpbWUgY2xhaW1pbmcgb3duZXJzaGlwIGZvciBoYW5kbGluZyB0aGUgc3dpcGUuXG4vLyBPdGhlcndpc2UsIHRoZSBVWCB3b3VsZCBiZSBjb25mdXNpbmcuXG4vLyBUaGF0J3Mgd2h5IHdlIHVzZSBhIHNpbmdsZXRvbiBoZXJlLlxuXG5cbnZhciBub2RlV2hvQ2xhaW1lZFRoZVNjcm9sbCA9IG51bGw7XG5cbmZ1bmN0aW9uIGZpbmROYXRpdmVIYW5kbGVyKHBhcmFtcykge1xuICB2YXIgZG9tVHJlZVNoYXBlcyA9IHBhcmFtcy5kb21UcmVlU2hhcGVzLFxuICAgICAgcGFnZVggPSBwYXJhbXMucGFnZVgsXG4gICAgICBzdGFydFggPSBwYXJhbXMuc3RhcnRYLFxuICAgICAgYXhpcyA9IHBhcmFtcy5heGlzO1xuICByZXR1cm4gZG9tVHJlZVNoYXBlcy5zb21lKGZ1bmN0aW9uIChzaGFwZSkge1xuICAgIC8vIERldGVybWluZSBpZiB3ZSBhcmUgZ29pbmcgYmFja3dhcmQgb3IgZm9yd2FyZC5cbiAgICB2YXIgZ29pbmdGb3J3YXJkID0gcGFnZVggPj0gc3RhcnRYO1xuXG4gICAgaWYgKGF4aXMgPT09ICd4JyB8fCBheGlzID09PSAneScpIHtcbiAgICAgIGdvaW5nRm9yd2FyZCA9ICFnb2luZ0ZvcndhcmQ7XG4gICAgfVxuXG4gICAgdmFyIHNjcm9sbFBvc2l0aW9uID0gc2hhcGVbYXhpc1Byb3BlcnRpZXMuc2Nyb2xsUG9zaXRpb25bYXhpc11dO1xuICAgIHZhciBhcmVOb3RBdFN0YXJ0ID0gc2Nyb2xsUG9zaXRpb24gPiAwO1xuICAgIHZhciBhcmVOb3RBdEVuZCA9IHNjcm9sbFBvc2l0aW9uICsgc2hhcGVbYXhpc1Byb3BlcnRpZXMuY2xpZW50TGVuZ3RoW2F4aXNdXSA8IHNoYXBlW2F4aXNQcm9wZXJ0aWVzLnNjcm9sbExlbmd0aFtheGlzXV07XG5cbiAgICBpZiAoZ29pbmdGb3J3YXJkICYmIGFyZU5vdEF0RW5kIHx8ICFnb2luZ0ZvcndhcmQgJiYgYXJlTm90QXRTdGFydCkge1xuICAgICAgbm9kZVdob0NsYWltZWRUaGVTY3JvbGwgPSBzaGFwZS5lbGVtZW50O1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZhbHNlO1xuICB9KTtcbn1cblxudmFyIFN3aXBlYWJsZVZpZXdzID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gICgwLCBfaW5oZXJpdHMyLmRlZmF1bHQpKFN3aXBlYWJsZVZpZXdzLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBTd2lwZWFibGVWaWV3cyhwcm9wcykge1xuICAgIHZhciBfdGhpcztcblxuICAgICgwLCBfY2xhc3NDYWxsQ2hlY2syLmRlZmF1bHQpKHRoaXMsIFN3aXBlYWJsZVZpZXdzKTtcbiAgICBfdGhpcyA9ICgwLCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybjIuZGVmYXVsdCkodGhpcywgKDAsIF9nZXRQcm90b3R5cGVPZjIuZGVmYXVsdCkoU3dpcGVhYmxlVmlld3MpLmNhbGwodGhpcywgcHJvcHMpKTtcbiAgICBfdGhpcy5yb290Tm9kZSA9IG51bGw7XG4gICAgX3RoaXMuY29udGFpbmVyTm9kZSA9IG51bGw7XG4gICAgX3RoaXMuaWdub3JlTmV4dFNjcm9sbEV2ZW50cyA9IGZhbHNlO1xuICAgIF90aGlzLnZpZXdMZW5ndGggPSAwO1xuICAgIF90aGlzLnN0YXJ0WCA9IDA7XG4gICAgX3RoaXMubGFzdFggPSAwO1xuICAgIF90aGlzLnZ4ID0gMDtcbiAgICBfdGhpcy5zdGFydFkgPSAwO1xuICAgIF90aGlzLmlzU3dpcGluZyA9IHVuZGVmaW5lZDtcbiAgICBfdGhpcy5zdGFydGVkID0gZmFsc2U7XG4gICAgX3RoaXMuc3RhcnRJbmRleCA9IDA7XG4gICAgX3RoaXMudHJhbnNpdGlvbkxpc3RlbmVyID0gbnVsbDtcbiAgICBfdGhpcy50b3VjaE1vdmVMaXN0ZW5lciA9IG51bGw7XG4gICAgX3RoaXMuYWN0aXZlU2xpZGUgPSBudWxsO1xuICAgIF90aGlzLmluZGV4Q3VycmVudCA9IG51bGw7XG4gICAgX3RoaXMuZmlyc3RSZW5kZXJUaW1lb3V0ID0gbnVsbDtcblxuICAgIF90aGlzLnNldFJvb3ROb2RlID0gZnVuY3Rpb24gKG5vZGUpIHtcbiAgICAgIF90aGlzLnJvb3ROb2RlID0gbm9kZTtcbiAgICB9O1xuXG4gICAgX3RoaXMuc2V0Q29udGFpbmVyTm9kZSA9IGZ1bmN0aW9uIChub2RlKSB7XG4gICAgICBfdGhpcy5jb250YWluZXJOb2RlID0gbm9kZTtcbiAgICB9O1xuXG4gICAgX3RoaXMuc2V0QWN0aXZlU2xpZGUgPSBmdW5jdGlvbiAobm9kZSkge1xuICAgICAgX3RoaXMuYWN0aXZlU2xpZGUgPSBub2RlO1xuXG4gICAgICBfdGhpcy51cGRhdGVIZWlnaHQoKTtcbiAgICB9O1xuXG4gICAgX3RoaXMuaGFuZGxlU3dpcGVTdGFydCA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgdmFyIGF4aXMgPSBfdGhpcy5wcm9wcy5heGlzO1xuICAgICAgdmFyIHRvdWNoID0gYXBwbHlSb3RhdGlvbk1hdHJpeChldmVudC50b3VjaGVzWzBdLCBheGlzKTtcbiAgICAgIF90aGlzLnZpZXdMZW5ndGggPSBfdGhpcy5yb290Tm9kZS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKVtheGlzUHJvcGVydGllcy5sZW5ndGhbYXhpc11dO1xuICAgICAgX3RoaXMuc3RhcnRYID0gdG91Y2gucGFnZVg7XG4gICAgICBfdGhpcy5sYXN0WCA9IHRvdWNoLnBhZ2VYO1xuICAgICAgX3RoaXMudnggPSAwO1xuICAgICAgX3RoaXMuc3RhcnRZID0gdG91Y2gucGFnZVk7XG4gICAgICBfdGhpcy5pc1N3aXBpbmcgPSB1bmRlZmluZWQ7XG4gICAgICBfdGhpcy5zdGFydGVkID0gdHJ1ZTtcbiAgICAgIHZhciBjb21wdXRlZFN0eWxlID0gd2luZG93LmdldENvbXB1dGVkU3R5bGUoX3RoaXMuY29udGFpbmVyTm9kZSk7XG4gICAgICB2YXIgdHJhbnNmb3JtID0gY29tcHV0ZWRTdHlsZS5nZXRQcm9wZXJ0eVZhbHVlKCctd2Via2l0LXRyYW5zZm9ybScpIHx8IGNvbXB1dGVkU3R5bGUuZ2V0UHJvcGVydHlWYWx1ZSgndHJhbnNmb3JtJyk7XG5cbiAgICAgIGlmICh0cmFuc2Zvcm0gJiYgdHJhbnNmb3JtICE9PSAnbm9uZScpIHtcbiAgICAgICAgdmFyIHRyYW5zZm9ybVZhbHVlcyA9IHRyYW5zZm9ybS5zcGxpdCgnKCcpWzFdLnNwbGl0KCcpJylbMF0uc3BsaXQoJywnKTtcbiAgICAgICAgdmFyIHJvb3RTdHlsZSA9IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKF90aGlzLnJvb3ROb2RlKTtcbiAgICAgICAgdmFyIHRyYW5mb3JtTm9ybWFsaXplZCA9IGFwcGx5Um90YXRpb25NYXRyaXgoe1xuICAgICAgICAgIHBhZ2VYOiBwYXJzZUludCh0cmFuc2Zvcm1WYWx1ZXNbNF0sIDEwKSxcbiAgICAgICAgICBwYWdlWTogcGFyc2VJbnQodHJhbnNmb3JtVmFsdWVzWzVdLCAxMClcbiAgICAgICAgfSwgYXhpcyk7XG4gICAgICAgIF90aGlzLnN0YXJ0SW5kZXggPSAtdHJhbmZvcm1Ob3JtYWxpemVkLnBhZ2VYIC8gKF90aGlzLnZpZXdMZW5ndGggLSBwYXJzZUludChyb290U3R5bGUucGFkZGluZ0xlZnQsIDEwKSAtIHBhcnNlSW50KHJvb3RTdHlsZS5wYWRkaW5nUmlnaHQsIDEwKSkgfHwgMDtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgX3RoaXMuaGFuZGxlU3dpcGVNb3ZlID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAvLyBUaGUgdG91Y2ggc3RhcnQgZXZlbnQgY2FuIGJlIGNhbmNlbC5cbiAgICAgIC8vIE1ha2VzIHN1cmUgd2Ugc2V0IGEgc3RhcnRpbmcgcG9pbnQuXG4gICAgICBpZiAoIV90aGlzLnN0YXJ0ZWQpIHtcbiAgICAgICAgX3RoaXMuaGFuZGxlVG91Y2hTdGFydChldmVudCk7XG5cbiAgICAgICAgcmV0dXJuO1xuICAgICAgfSAvLyBXZSBhcmUgbm90IHN1cHBvc2VkIHRvIGhhbmxkZSB0aGlzIHRvdWNoIG1vdmUuXG5cblxuICAgICAgaWYgKG5vZGVXaG9DbGFpbWVkVGhlU2Nyb2xsICE9PSBudWxsICYmIG5vZGVXaG9DbGFpbWVkVGhlU2Nyb2xsICE9PSBfdGhpcy5yb290Tm9kZSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHZhciBfdGhpcyRwcm9wcyA9IF90aGlzLnByb3BzLFxuICAgICAgICAgIGF4aXMgPSBfdGhpcyRwcm9wcy5heGlzLFxuICAgICAgICAgIGNoaWxkcmVuID0gX3RoaXMkcHJvcHMuY2hpbGRyZW4sXG4gICAgICAgICAgaWdub3JlTmF0aXZlU2Nyb2xsID0gX3RoaXMkcHJvcHMuaWdub3JlTmF0aXZlU2Nyb2xsLFxuICAgICAgICAgIG9uU3dpdGNoaW5nID0gX3RoaXMkcHJvcHMub25Td2l0Y2hpbmcsXG4gICAgICAgICAgcmVzaXN0YW5jZSA9IF90aGlzJHByb3BzLnJlc2lzdGFuY2U7XG4gICAgICB2YXIgdG91Y2ggPSBhcHBseVJvdGF0aW9uTWF0cml4KGV2ZW50LnRvdWNoZXNbMF0sIGF4aXMpOyAvLyBXZSBkb24ndCBrbm93IHlldC5cblxuICAgICAgaWYgKF90aGlzLmlzU3dpcGluZyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHZhciBkeCA9IE1hdGguYWJzKHRvdWNoLnBhZ2VYIC0gX3RoaXMuc3RhcnRYKTtcbiAgICAgICAgdmFyIGR5ID0gTWF0aC5hYnModG91Y2gucGFnZVkgLSBfdGhpcy5zdGFydFkpO1xuICAgICAgICB2YXIgaXNTd2lwaW5nID0gZHggPiBkeSAmJiBkeCA+IF9yZWFjdFN3aXBlYWJsZVZpZXdzQ29yZS5jb25zdGFudC5VTkNFUlRBSU5UWV9USFJFU0hPTEQ7IC8vIFdlIGxldCB0aGUgcGFyZW50IGhhbmRsZSB0aGUgc2Nyb2xsLlxuXG4gICAgICAgIGlmICghcmVzaXN0YW5jZSAmJiAoYXhpcyA9PT0gJ3knIHx8IGF4aXMgPT09ICd5LXJldmVyc2UnKSAmJiAoX3RoaXMuaW5kZXhDdXJyZW50ID09PSAwICYmIF90aGlzLnN0YXJ0WCA8IHRvdWNoLnBhZ2VYIHx8IF90aGlzLmluZGV4Q3VycmVudCA9PT0gX3JlYWN0LmRlZmF1bHQuQ2hpbGRyZW4uY291bnQoX3RoaXMucHJvcHMuY2hpbGRyZW4pIC0gMSAmJiBfdGhpcy5zdGFydFggPiB0b3VjaC5wYWdlWCkpIHtcbiAgICAgICAgICBfdGhpcy5pc1N3aXBpbmcgPSBmYWxzZTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH0gLy8gV2UgYXJlIGxpa2VseSB0byBiZSBzd2lwaW5nLCBsZXQncyBwcmV2ZW50IHRoZSBzY3JvbGwgZXZlbnQuXG5cblxuICAgICAgICBpZiAoZHggPiBkeSkge1xuICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoaXNTd2lwaW5nID09PSB0cnVlIHx8IGR5ID4gX3JlYWN0U3dpcGVhYmxlVmlld3NDb3JlLmNvbnN0YW50LlVOQ0VSVEFJTlRZX1RIUkVTSE9MRCkge1xuICAgICAgICAgIF90aGlzLmlzU3dpcGluZyA9IGlzU3dpcGluZztcbiAgICAgICAgICBfdGhpcy5zdGFydFggPSB0b3VjaC5wYWdlWDsgLy8gU2hpZnQgdGhlIHN0YXJ0aW5nIHBvaW50LlxuXG4gICAgICAgICAgcmV0dXJuOyAvLyBMZXQncyB3YWl0IHRoZSBuZXh0IHRvdWNoIGV2ZW50IHRvIG1vdmUgc29tZXRoaW5nLlxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChfdGhpcy5pc1N3aXBpbmcgIT09IHRydWUpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfSAvLyBXZSBhcmUgc3dpcGluZywgbGV0J3MgcHJldmVudCB0aGUgc2Nyb2xsIGV2ZW50LlxuXG5cbiAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7IC8vIExvdyBQYXNzIGZpbHRlci5cblxuICAgICAgX3RoaXMudnggPSBfdGhpcy52eCAqIDAuNSArICh0b3VjaC5wYWdlWCAtIF90aGlzLmxhc3RYKSAqIDAuNTtcbiAgICAgIF90aGlzLmxhc3RYID0gdG91Y2gucGFnZVg7XG5cbiAgICAgIHZhciBfY29tcHV0ZUluZGV4ID0gKDAsIF9yZWFjdFN3aXBlYWJsZVZpZXdzQ29yZS5jb21wdXRlSW5kZXgpKHtcbiAgICAgICAgY2hpbGRyZW46IGNoaWxkcmVuLFxuICAgICAgICByZXNpc3RhbmNlOiByZXNpc3RhbmNlLFxuICAgICAgICBwYWdlWDogdG91Y2gucGFnZVgsXG4gICAgICAgIHN0YXJ0SW5kZXg6IF90aGlzLnN0YXJ0SW5kZXgsXG4gICAgICAgIHN0YXJ0WDogX3RoaXMuc3RhcnRYLFxuICAgICAgICB2aWV3TGVuZ3RoOiBfdGhpcy52aWV3TGVuZ3RoXG4gICAgICB9KSxcbiAgICAgICAgICBpbmRleCA9IF9jb21wdXRlSW5kZXguaW5kZXgsXG4gICAgICAgICAgc3RhcnRYID0gX2NvbXB1dGVJbmRleC5zdGFydFg7IC8vIEFkZCBzdXBwb3J0IGZvciBuYXRpdmUgc2Nyb2xsIGVsZW1lbnRzLlxuXG5cbiAgICAgIGlmIChub2RlV2hvQ2xhaW1lZFRoZVNjcm9sbCA9PT0gbnVsbCAmJiAhaWdub3JlTmF0aXZlU2Nyb2xsKSB7XG4gICAgICAgIHZhciBkb21UcmVlU2hhcGVzID0gZ2V0RG9tVHJlZVNoYXBlcyhldmVudC50YXJnZXQsIF90aGlzLnJvb3ROb2RlKTtcbiAgICAgICAgdmFyIGhhc0ZvdW5kTmF0aXZlSGFuZGxlciA9IGZpbmROYXRpdmVIYW5kbGVyKHtcbiAgICAgICAgICBkb21UcmVlU2hhcGVzOiBkb21UcmVlU2hhcGVzLFxuICAgICAgICAgIHN0YXJ0WDogX3RoaXMuc3RhcnRYLFxuICAgICAgICAgIHBhZ2VYOiB0b3VjaC5wYWdlWCxcbiAgICAgICAgICBheGlzOiBheGlzXG4gICAgICAgIH0pOyAvLyBXZSBhYm9ydCB0aGUgdG91Y2ggbW92ZSBoYW5kbGVyLlxuXG4gICAgICAgIGlmIChoYXNGb3VuZE5hdGl2ZUhhbmRsZXIpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgIH0gLy8gV2UgYXJlIG1vdmluZyB0b3dhcmQgdGhlIGVkZ2VzLlxuXG5cbiAgICAgIGlmIChzdGFydFgpIHtcbiAgICAgICAgX3RoaXMuc3RhcnRYID0gc3RhcnRYO1xuICAgICAgfSBlbHNlIGlmIChub2RlV2hvQ2xhaW1lZFRoZVNjcm9sbCA9PT0gbnVsbCkge1xuICAgICAgICBub2RlV2hvQ2xhaW1lZFRoZVNjcm9sbCA9IF90aGlzLnJvb3ROb2RlO1xuICAgICAgfVxuXG4gICAgICBfdGhpcy5zZXRJbmRleEN1cnJlbnQoaW5kZXgpO1xuXG4gICAgICB2YXIgY2FsbGJhY2sgPSBmdW5jdGlvbiBjYWxsYmFjaygpIHtcbiAgICAgICAgaWYgKG9uU3dpdGNoaW5nKSB7XG4gICAgICAgICAgb25Td2l0Y2hpbmcoaW5kZXgsICdtb3ZlJyk7XG4gICAgICAgIH1cbiAgICAgIH07XG5cbiAgICAgIGlmIChfdGhpcy5zdGF0ZS5kaXNwbGF5U2FtZVNsaWRlIHx8ICFfdGhpcy5zdGF0ZS5pc0RyYWdnaW5nKSB7XG4gICAgICAgIF90aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICBkaXNwbGF5U2FtZVNsaWRlOiBmYWxzZSxcbiAgICAgICAgICBpc0RyYWdnaW5nOiB0cnVlXG4gICAgICAgIH0sIGNhbGxiYWNrKTtcbiAgICAgIH1cblxuICAgICAgY2FsbGJhY2soKTtcbiAgICB9O1xuXG4gICAgX3RoaXMuaGFuZGxlU3dpcGVFbmQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBub2RlV2hvQ2xhaW1lZFRoZVNjcm9sbCA9IG51bGw7IC8vIFRoZSB0b3VjaCBzdGFydCBldmVudCBjYW4gYmUgY2FuY2VsLlxuICAgICAgLy8gTWFrZXMgc3VyZSB0aGF0IGEgc3RhcnRpbmcgcG9pbnQgaXMgc2V0LlxuXG4gICAgICBpZiAoIV90aGlzLnN0YXJ0ZWQpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBfdGhpcy5zdGFydGVkID0gZmFsc2U7XG5cbiAgICAgIGlmIChfdGhpcy5pc1N3aXBpbmcgIT09IHRydWUpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB2YXIgaW5kZXhMYXRlc3QgPSBfdGhpcy5zdGF0ZS5pbmRleExhdGVzdDtcbiAgICAgIHZhciBpbmRleEN1cnJlbnQgPSBfdGhpcy5pbmRleEN1cnJlbnQ7XG4gICAgICB2YXIgZGVsdGEgPSBpbmRleExhdGVzdCAtIGluZGV4Q3VycmVudDtcbiAgICAgIHZhciBpbmRleE5ldzsgLy8gUXVpY2sgbW92ZW1lbnRcblxuICAgICAgaWYgKE1hdGguYWJzKF90aGlzLnZ4KSA+IF90aGlzLnByb3BzLnRocmVzaG9sZCkge1xuICAgICAgICBpZiAoX3RoaXMudnggPiAwKSB7XG4gICAgICAgICAgaW5kZXhOZXcgPSBNYXRoLmZsb29yKGluZGV4Q3VycmVudCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaW5kZXhOZXcgPSBNYXRoLmNlaWwoaW5kZXhDdXJyZW50KTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChNYXRoLmFicyhkZWx0YSkgPiBfdGhpcy5wcm9wcy5oeXN0ZXJlc2lzKSB7XG4gICAgICAgIC8vIFNvbWUgaHlzdGVyZXNpcyB3aXRoIGluZGV4TGF0ZXN0LlxuICAgICAgICBpbmRleE5ldyA9IGRlbHRhID4gMCA/IE1hdGguZmxvb3IoaW5kZXhDdXJyZW50KSA6IE1hdGguY2VpbChpbmRleEN1cnJlbnQpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaW5kZXhOZXcgPSBpbmRleExhdGVzdDtcbiAgICAgIH1cblxuICAgICAgdmFyIGluZGV4TWF4ID0gX3JlYWN0LmRlZmF1bHQuQ2hpbGRyZW4uY291bnQoX3RoaXMucHJvcHMuY2hpbGRyZW4pIC0gMTtcblxuICAgICAgaWYgKGluZGV4TmV3IDwgMCkge1xuICAgICAgICBpbmRleE5ldyA9IDA7XG4gICAgICB9IGVsc2UgaWYgKGluZGV4TmV3ID4gaW5kZXhNYXgpIHtcbiAgICAgICAgaW5kZXhOZXcgPSBpbmRleE1heDtcbiAgICAgIH1cblxuICAgICAgX3RoaXMuc2V0SW5kZXhDdXJyZW50KGluZGV4TmV3KTtcblxuICAgICAgX3RoaXMuc2V0U3RhdGUoe1xuICAgICAgICBpbmRleExhdGVzdDogaW5kZXhOZXcsXG4gICAgICAgIGlzRHJhZ2dpbmc6IGZhbHNlXG4gICAgICB9LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmIChfdGhpcy5wcm9wcy5vblN3aXRjaGluZykge1xuICAgICAgICAgIF90aGlzLnByb3BzLm9uU3dpdGNoaW5nKGluZGV4TmV3LCAnZW5kJyk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoX3RoaXMucHJvcHMub25DaGFuZ2VJbmRleCAmJiBpbmRleE5ldyAhPT0gaW5kZXhMYXRlc3QpIHtcbiAgICAgICAgICBfdGhpcy5wcm9wcy5vbkNoYW5nZUluZGV4KGluZGV4TmV3LCBpbmRleExhdGVzdCwge1xuICAgICAgICAgICAgcmVhc29uOiAnc3dpcGUnXG4gICAgICAgICAgfSk7XG4gICAgICAgIH0gLy8gTWFudWFsbHkgY2FsbGluZyBoYW5kbGVUcmFuc2l0aW9uRW5kIGluIHRoYXQgY2FzZSBhcyBpc24ndCBvdGhlcndpc2UuXG5cblxuICAgICAgICBpZiAoaW5kZXhDdXJyZW50ID09PSBpbmRleExhdGVzdCkge1xuICAgICAgICAgIF90aGlzLmhhbmRsZVRyYW5zaXRpb25FbmQoKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfTtcblxuICAgIF90aGlzLmhhbmRsZVRvdWNoU3RhcnQgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgIGlmIChfdGhpcy5wcm9wcy5vblRvdWNoU3RhcnQpIHtcbiAgICAgICAgX3RoaXMucHJvcHMub25Ub3VjaFN0YXJ0KGV2ZW50KTtcbiAgICAgIH1cblxuICAgICAgX3RoaXMuaGFuZGxlU3dpcGVTdGFydChldmVudCk7XG4gICAgfTtcblxuICAgIF90aGlzLmhhbmRsZVRvdWNoRW5kID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICBpZiAoX3RoaXMucHJvcHMub25Ub3VjaEVuZCkge1xuICAgICAgICBfdGhpcy5wcm9wcy5vblRvdWNoRW5kKGV2ZW50KTtcbiAgICAgIH1cblxuICAgICAgX3RoaXMuaGFuZGxlU3dpcGVFbmQoZXZlbnQpO1xuICAgIH07XG5cbiAgICBfdGhpcy5oYW5kbGVNb3VzZURvd24gPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgIGlmIChfdGhpcy5wcm9wcy5vbk1vdXNlRG93bikge1xuICAgICAgICBfdGhpcy5wcm9wcy5vbk1vdXNlRG93bihldmVudCk7XG4gICAgICB9XG5cbiAgICAgIGV2ZW50LnBlcnNpc3QoKTtcblxuICAgICAgX3RoaXMuaGFuZGxlU3dpcGVTdGFydChhZGFwdE1vdXNlKGV2ZW50KSk7XG4gICAgfTtcblxuICAgIF90aGlzLmhhbmRsZU1vdXNlVXAgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgIGlmIChfdGhpcy5wcm9wcy5vbk1vdXNlVXApIHtcbiAgICAgICAgX3RoaXMucHJvcHMub25Nb3VzZVVwKGV2ZW50KTtcbiAgICAgIH1cblxuICAgICAgX3RoaXMuaGFuZGxlU3dpcGVFbmQoYWRhcHRNb3VzZShldmVudCkpO1xuICAgIH07XG5cbiAgICBfdGhpcy5oYW5kbGVNb3VzZUxlYXZlID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICBpZiAoX3RoaXMucHJvcHMub25Nb3VzZUxlYXZlKSB7XG4gICAgICAgIF90aGlzLnByb3BzLm9uTW91c2VMZWF2ZShldmVudCk7XG4gICAgICB9IC8vIEZpbHRlciBvdXQgZXZlbnRzXG5cblxuICAgICAgaWYgKF90aGlzLnN0YXJ0ZWQpIHtcbiAgICAgICAgX3RoaXMuaGFuZGxlU3dpcGVFbmQoYWRhcHRNb3VzZShldmVudCkpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBfdGhpcy5oYW5kbGVNb3VzZU1vdmUgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgIGlmIChfdGhpcy5wcm9wcy5vbk1vdXNlTW92ZSkge1xuICAgICAgICBfdGhpcy5wcm9wcy5vbk1vdXNlTW92ZShldmVudCk7XG4gICAgICB9IC8vIEZpbHRlciBvdXQgZXZlbnRzXG5cblxuICAgICAgaWYgKF90aGlzLnN0YXJ0ZWQpIHtcbiAgICAgICAgX3RoaXMuaGFuZGxlU3dpcGVNb3ZlKGFkYXB0TW91c2UoZXZlbnQpKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgX3RoaXMuaGFuZGxlU2Nyb2xsID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICBpZiAoX3RoaXMucHJvcHMub25TY3JvbGwpIHtcbiAgICAgICAgX3RoaXMucHJvcHMub25TY3JvbGwoZXZlbnQpO1xuICAgICAgfSAvLyBJZ25vcmUgZXZlbnRzIGJ1YmJsaW5nIHVwLlxuXG5cbiAgICAgIGlmIChldmVudC50YXJnZXQgIT09IF90aGlzLnJvb3ROb2RlKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKF90aGlzLmlnbm9yZU5leHRTY3JvbGxFdmVudHMpIHtcbiAgICAgICAgX3RoaXMuaWdub3JlTmV4dFNjcm9sbEV2ZW50cyA9IGZhbHNlO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHZhciBpbmRleExhdGVzdCA9IF90aGlzLnN0YXRlLmluZGV4TGF0ZXN0O1xuICAgICAgdmFyIGluZGV4TmV3ID0gTWF0aC5jZWlsKGV2ZW50LnRhcmdldC5zY3JvbGxMZWZ0IC8gZXZlbnQudGFyZ2V0LmNsaWVudFdpZHRoKSArIGluZGV4TGF0ZXN0O1xuICAgICAgX3RoaXMuaWdub3JlTmV4dFNjcm9sbEV2ZW50cyA9IHRydWU7IC8vIFJlc2V0IHRoZSBzY3JvbGwgcG9zaXRpb24uXG5cbiAgICAgIGV2ZW50LnRhcmdldC5zY3JvbGxMZWZ0ID0gMDtcblxuICAgICAgaWYgKF90aGlzLnByb3BzLm9uQ2hhbmdlSW5kZXggJiYgaW5kZXhOZXcgIT09IGluZGV4TGF0ZXN0KSB7XG4gICAgICAgIF90aGlzLnByb3BzLm9uQ2hhbmdlSW5kZXgoaW5kZXhOZXcsIGluZGV4TGF0ZXN0LCB7XG4gICAgICAgICAgcmVhc29uOiAnZm9jdXMnXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBfdGhpcy51cGRhdGVIZWlnaHQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAoX3RoaXMuYWN0aXZlU2xpZGUgIT09IG51bGwpIHtcbiAgICAgICAgdmFyIGNoaWxkID0gX3RoaXMuYWN0aXZlU2xpZGUuY2hpbGRyZW5bMF07XG5cbiAgICAgICAgaWYgKGNoaWxkICE9PSB1bmRlZmluZWQgJiYgY2hpbGQub2Zmc2V0SGVpZ2h0ICE9PSB1bmRlZmluZWQgJiYgX3RoaXMuc3RhdGUuaGVpZ2h0TGF0ZXN0ICE9PSBjaGlsZC5vZmZzZXRIZWlnaHQpIHtcbiAgICAgICAgICBfdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgICBoZWlnaHRMYXRlc3Q6IGNoaWxkLm9mZnNldEhlaWdodFxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcblxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAoMCwgX3JlYWN0U3dpcGVhYmxlVmlld3NDb3JlLmNoZWNrSW5kZXhCb3VuZHMpKHByb3BzKTtcbiAgICB9XG5cbiAgICBfdGhpcy5zdGF0ZSA9IHtcbiAgICAgIGluZGV4TGF0ZXN0OiBwcm9wcy5pbmRleCxcbiAgICAgIC8vIFNldCB0byB0cnVlIGFzIHNvb24gYXMgdGhlIGNvbXBvbmVudCBpcyBzd2lwaW5nLlxuICAgICAgLy8gSXQncyB0aGUgc3RhdGUgY291bnRlciBwYXJ0IG9mIHRoaXMuaXNTd2lwaW5nLlxuICAgICAgaXNEcmFnZ2luZzogZmFsc2UsXG4gICAgICAvLyBIZWxwIHdpdGggU1NSIGxvZ2ljIGFuZCBsYXp5IGxvYWRpbmcgbG9naWMuXG4gICAgICByZW5kZXJPbmx5QWN0aXZlOiAhcHJvcHMuZGlzYWJsZUxhenlMb2FkaW5nLFxuICAgICAgaGVpZ2h0TGF0ZXN0OiAwLFxuICAgICAgLy8gTGV0IHRoZSByZW5kZXIgbWV0aG9kIHRoYXQgd2UgYXJlIGdvaW5nIHRvIGRpc3BsYXkgdGhlIHNhbWUgc2xpZGUgdGhhbiBwcmV2aW91c2x5LlxuICAgICAgZGlzcGxheVNhbWVTbGlkZTogdHJ1ZVxuICAgIH07XG5cbiAgICBfdGhpcy5zZXRJbmRleEN1cnJlbnQocHJvcHMuaW5kZXgpO1xuXG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgKDAsIF9jcmVhdGVDbGFzczIuZGVmYXVsdCkoU3dpcGVhYmxlVmlld3MsIFt7XG4gICAga2V5OiBcImdldENoaWxkQ29udGV4dFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRDaGlsZENvbnRleHQoKSB7XG4gICAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgc3dpcGVhYmxlVmlld3M6IHtcbiAgICAgICAgICBzbGlkZVVwZGF0ZUhlaWdodDogZnVuY3Rpb24gc2xpZGVVcGRhdGVIZWlnaHQoKSB7XG4gICAgICAgICAgICBfdGhpczIudXBkYXRlSGVpZ2h0KCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9O1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJjb21wb25lbnREaWRNb3VudFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICAgIHZhciBfdGhpczMgPSB0aGlzO1xuXG4gICAgICAvLyBTdWJzY3JpYmUgdG8gdHJhbnNpdGlvbiBlbmQgZXZlbnRzLlxuICAgICAgdGhpcy50cmFuc2l0aW9uTGlzdGVuZXIgPSBhZGRFdmVudExpc3RlbmVyKHRoaXMuY29udGFpbmVyTm9kZSwgJ3RyYW5zaXRpb25lbmQnLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgaWYgKGV2ZW50LnRhcmdldCAhPT0gX3RoaXMzLmNvbnRhaW5lck5vZGUpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBfdGhpczMuaGFuZGxlVHJhbnNpdGlvbkVuZCgpO1xuICAgICAgfSk7IC8vIEJsb2NrIHRoZSB0aHJlYWQgdG8gaGFuZGxlIHRoYXQgZXZlbnQuXG5cbiAgICAgIHRoaXMudG91Y2hNb3ZlTGlzdGVuZXIgPSBhZGRFdmVudExpc3RlbmVyKHRoaXMucm9vdE5vZGUsICd0b3VjaG1vdmUnLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgLy8gSGFuZGxpbmcgdG91Y2ggZXZlbnRzIGlzIGRpc2FibGVkLlxuICAgICAgICBpZiAoX3RoaXMzLnByb3BzLmRpc2FibGVkKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgX3RoaXMzLmhhbmRsZVN3aXBlTW92ZShldmVudCk7XG4gICAgICB9LCB7XG4gICAgICAgIHBhc3NpdmU6IGZhbHNlXG4gICAgICB9KTtcblxuICAgICAgaWYgKCF0aGlzLnByb3BzLmRpc2FibGVMYXp5TG9hZGluZykge1xuICAgICAgICB0aGlzLmZpcnN0UmVuZGVyVGltZW91dCA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgIF90aGlzMy5zZXRTdGF0ZSh7XG4gICAgICAgICAgICByZW5kZXJPbmx5QWN0aXZlOiBmYWxzZVxuICAgICAgICAgIH0pO1xuICAgICAgICB9LCAwKTtcbiAgICAgIH0gLy8gU2VuZCBhbGwgZnVuY3Rpb25zIGluIGFuIG9iamVjdCBpZiBhY3Rpb24gcGFyYW0gaXMgc2V0LlxuXG5cbiAgICAgIGlmICh0aGlzLnByb3BzLmFjdGlvbikge1xuICAgICAgICB0aGlzLnByb3BzLmFjdGlvbih7XG4gICAgICAgICAgdXBkYXRlSGVpZ2h0OiB0aGlzLnVwZGF0ZUhlaWdodFxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wc1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKG5leHRQcm9wcykge1xuICAgICAgdmFyIGluZGV4ID0gbmV4dFByb3BzLmluZGV4O1xuXG4gICAgICBpZiAodHlwZW9mIGluZGV4ID09PSAnbnVtYmVyJyAmJiBpbmRleCAhPT0gdGhpcy5wcm9wcy5pbmRleCkge1xuICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICAgICgwLCBfcmVhY3RTd2lwZWFibGVWaWV3c0NvcmUuY2hlY2tJbmRleEJvdW5kcykobmV4dFByb3BzKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuc2V0SW5kZXhDdXJyZW50KGluZGV4KTtcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgLy8gSWYgdHJ1ZSwgd2UgYXJlIGdvaW5nIHRvIGNoYW5nZSB0aGUgY2hpbGRyZW4uIFdlIHNob3Vkbid0IGFuaW1hdGUgaXQuXG4gICAgICAgICAgZGlzcGxheVNhbWVTbGlkZTogKDAsIF9yZWFjdFN3aXBlYWJsZVZpZXdzQ29yZS5nZXREaXNwbGF5U2FtZVNsaWRlKSh0aGlzLnByb3BzLCBuZXh0UHJvcHMpLFxuICAgICAgICAgIGluZGV4TGF0ZXN0OiBpbmRleFxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiY29tcG9uZW50V2lsbFVubW91bnRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgICB0aGlzLnRyYW5zaXRpb25MaXN0ZW5lci5yZW1vdmUoKTtcbiAgICAgIHRoaXMudG91Y2hNb3ZlTGlzdGVuZXIucmVtb3ZlKCk7XG4gICAgICBjbGVhclRpbWVvdXQodGhpcy5maXJzdFJlbmRlclRpbWVvdXQpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJzZXRJbmRleEN1cnJlbnRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gc2V0SW5kZXhDdXJyZW50KGluZGV4Q3VycmVudCkge1xuICAgICAgaWYgKCF0aGlzLnByb3BzLmFuaW1hdGVUcmFuc2l0aW9ucyAmJiB0aGlzLmluZGV4Q3VycmVudCAhPT0gaW5kZXhDdXJyZW50KSB7XG4gICAgICAgIHRoaXMuaGFuZGxlVHJhbnNpdGlvbkVuZCgpO1xuICAgICAgfVxuXG4gICAgICB0aGlzLmluZGV4Q3VycmVudCA9IGluZGV4Q3VycmVudDtcblxuICAgICAgaWYgKHRoaXMuY29udGFpbmVyTm9kZSkge1xuICAgICAgICB2YXIgYXhpcyA9IHRoaXMucHJvcHMuYXhpcztcbiAgICAgICAgdmFyIHRyYW5zZm9ybSA9IGF4aXNQcm9wZXJ0aWVzLnRyYW5zZm9ybVtheGlzXShpbmRleEN1cnJlbnQgKiAxMDApO1xuICAgICAgICB0aGlzLmNvbnRhaW5lck5vZGUuc3R5bGUuV2Via2l0VHJhbnNmb3JtID0gdHJhbnNmb3JtO1xuICAgICAgICB0aGlzLmNvbnRhaW5lck5vZGUuc3R5bGUudHJhbnNmb3JtID0gdHJhbnNmb3JtO1xuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJoYW5kbGVUcmFuc2l0aW9uRW5kXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGhhbmRsZVRyYW5zaXRpb25FbmQoKSB7XG4gICAgICBpZiAoIXRoaXMucHJvcHMub25UcmFuc2l0aW9uRW5kKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH0gLy8gRmlsdGVycyBvdXQgd2hlbiBjaGFuZ2luZyB0aGUgY2hpbGRyZW5cblxuXG4gICAgICBpZiAodGhpcy5zdGF0ZS5kaXNwbGF5U2FtZVNsaWRlKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH0gLy8gVGhlIHJlc3QgY2FsbGJhY2sgaXMgdHJpZ2dlcmVkIHdoZW4gc3dpcGluZy4gSXQncyBqdXN0IG5vaXNlLlxuICAgICAgLy8gV2UgZmlsdGVyIGl0IG91dC5cblxuXG4gICAgICBpZiAoIXRoaXMuc3RhdGUuaXNEcmFnZ2luZykge1xuICAgICAgICB0aGlzLnByb3BzLm9uVHJhbnNpdGlvbkVuZCgpO1xuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJyZW5kZXJcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgdmFyIF90aGlzNCA9IHRoaXM7XG5cbiAgICAgIHZhciBfdGhpcyRwcm9wczIgPSB0aGlzLnByb3BzLFxuICAgICAgICAgIGFjdGlvbiA9IF90aGlzJHByb3BzMi5hY3Rpb24sXG4gICAgICAgICAgYW5pbWF0ZUhlaWdodCA9IF90aGlzJHByb3BzMi5hbmltYXRlSGVpZ2h0LFxuICAgICAgICAgIGFuaW1hdGVUcmFuc2l0aW9ucyA9IF90aGlzJHByb3BzMi5hbmltYXRlVHJhbnNpdGlvbnMsXG4gICAgICAgICAgYXhpcyA9IF90aGlzJHByb3BzMi5heGlzLFxuICAgICAgICAgIGNoaWxkcmVuID0gX3RoaXMkcHJvcHMyLmNoaWxkcmVuLFxuICAgICAgICAgIGNvbnRhaW5lclN0eWxlUHJvcCA9IF90aGlzJHByb3BzMi5jb250YWluZXJTdHlsZSxcbiAgICAgICAgICBkaXNhYmxlZCA9IF90aGlzJHByb3BzMi5kaXNhYmxlZCxcbiAgICAgICAgICBkaXNhYmxlTGF6eUxvYWRpbmcgPSBfdGhpcyRwcm9wczIuZGlzYWJsZUxhenlMb2FkaW5nLFxuICAgICAgICAgIGVuYWJsZU1vdXNlRXZlbnRzID0gX3RoaXMkcHJvcHMyLmVuYWJsZU1vdXNlRXZlbnRzLFxuICAgICAgICAgIGh5c3RlcmVzaXMgPSBfdGhpcyRwcm9wczIuaHlzdGVyZXNpcyxcbiAgICAgICAgICBpZ25vcmVOYXRpdmVTY3JvbGwgPSBfdGhpcyRwcm9wczIuaWdub3JlTmF0aXZlU2Nyb2xsLFxuICAgICAgICAgIGluZGV4ID0gX3RoaXMkcHJvcHMyLmluZGV4LFxuICAgICAgICAgIG9uQ2hhbmdlSW5kZXggPSBfdGhpcyRwcm9wczIub25DaGFuZ2VJbmRleCxcbiAgICAgICAgICBvblN3aXRjaGluZyA9IF90aGlzJHByb3BzMi5vblN3aXRjaGluZyxcbiAgICAgICAgICBvblRyYW5zaXRpb25FbmQgPSBfdGhpcyRwcm9wczIub25UcmFuc2l0aW9uRW5kLFxuICAgICAgICAgIHJlc2lzdGFuY2UgPSBfdGhpcyRwcm9wczIucmVzaXN0YW5jZSxcbiAgICAgICAgICBzbGlkZVN0eWxlUHJvcCA9IF90aGlzJHByb3BzMi5zbGlkZVN0eWxlLFxuICAgICAgICAgIHNsaWRlQ2xhc3NOYW1lID0gX3RoaXMkcHJvcHMyLnNsaWRlQ2xhc3NOYW1lLFxuICAgICAgICAgIHNwcmluZ0NvbmZpZyA9IF90aGlzJHByb3BzMi5zcHJpbmdDb25maWcsXG4gICAgICAgICAgc3R5bGUgPSBfdGhpcyRwcm9wczIuc3R5bGUsXG4gICAgICAgICAgdGhyZXNob2xkID0gX3RoaXMkcHJvcHMyLnRocmVzaG9sZCxcbiAgICAgICAgICBvdGhlciA9ICgwLCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMyLmRlZmF1bHQpKF90aGlzJHByb3BzMiwgW1wiYWN0aW9uXCIsIFwiYW5pbWF0ZUhlaWdodFwiLCBcImFuaW1hdGVUcmFuc2l0aW9uc1wiLCBcImF4aXNcIiwgXCJjaGlsZHJlblwiLCBcImNvbnRhaW5lclN0eWxlXCIsIFwiZGlzYWJsZWRcIiwgXCJkaXNhYmxlTGF6eUxvYWRpbmdcIiwgXCJlbmFibGVNb3VzZUV2ZW50c1wiLCBcImh5c3RlcmVzaXNcIiwgXCJpZ25vcmVOYXRpdmVTY3JvbGxcIiwgXCJpbmRleFwiLCBcIm9uQ2hhbmdlSW5kZXhcIiwgXCJvblN3aXRjaGluZ1wiLCBcIm9uVHJhbnNpdGlvbkVuZFwiLCBcInJlc2lzdGFuY2VcIiwgXCJzbGlkZVN0eWxlXCIsIFwic2xpZGVDbGFzc05hbWVcIiwgXCJzcHJpbmdDb25maWdcIiwgXCJzdHlsZVwiLCBcInRocmVzaG9sZFwiXSk7XG4gICAgICB2YXIgX3RoaXMkc3RhdGUgPSB0aGlzLnN0YXRlLFxuICAgICAgICAgIGRpc3BsYXlTYW1lU2xpZGUgPSBfdGhpcyRzdGF0ZS5kaXNwbGF5U2FtZVNsaWRlLFxuICAgICAgICAgIGhlaWdodExhdGVzdCA9IF90aGlzJHN0YXRlLmhlaWdodExhdGVzdCxcbiAgICAgICAgICBpbmRleExhdGVzdCA9IF90aGlzJHN0YXRlLmluZGV4TGF0ZXN0LFxuICAgICAgICAgIGlzRHJhZ2dpbmcgPSBfdGhpcyRzdGF0ZS5pc0RyYWdnaW5nLFxuICAgICAgICAgIHJlbmRlck9ubHlBY3RpdmUgPSBfdGhpcyRzdGF0ZS5yZW5kZXJPbmx5QWN0aXZlO1xuICAgICAgdmFyIHRvdWNoRXZlbnRzID0gIWRpc2FibGVkID8ge1xuICAgICAgICBvblRvdWNoU3RhcnQ6IHRoaXMuaGFuZGxlVG91Y2hTdGFydCxcbiAgICAgICAgb25Ub3VjaEVuZDogdGhpcy5oYW5kbGVUb3VjaEVuZFxuICAgICAgfSA6IHt9O1xuICAgICAgdmFyIG1vdXNlRXZlbnRzID0gIWRpc2FibGVkICYmIGVuYWJsZU1vdXNlRXZlbnRzID8ge1xuICAgICAgICBvbk1vdXNlRG93bjogdGhpcy5oYW5kbGVNb3VzZURvd24sXG4gICAgICAgIG9uTW91c2VVcDogdGhpcy5oYW5kbGVNb3VzZVVwLFxuICAgICAgICBvbk1vdXNlTGVhdmU6IHRoaXMuaGFuZGxlTW91c2VMZWF2ZSxcbiAgICAgICAgb25Nb3VzZU1vdmU6IHRoaXMuaGFuZGxlTW91c2VNb3ZlXG4gICAgICB9IDoge307IC8vIFRoZXJlIGlzIG5vIHBvaW50IHRvIGFuaW1hdGUgaWYgd2UgYXJlIGFscmVhZHkgcHJvdmlkaW5nIGEgaGVpZ2h0LlxuXG4gICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyAoMCwgX3dhcm5pbmcuZGVmYXVsdCkoIWFuaW1hdGVIZWlnaHQgfHwgIWNvbnRhaW5lclN0eWxlUHJvcCB8fCAhY29udGFpbmVyU3R5bGVQcm9wLmhlaWdodCwgXCJyZWFjdC1zd2lwZWFibGUtdmlldzogWW91IGFyZSBzZXR0aW5nIGFuaW1hdGVIZWlnaHQgdG8gdHJ1ZSBidXQgeW91IGFyZVxcbmFsc28gcHJvdmlkaW5nIGEgY3VzdG9tIGhlaWdodC5cXG5UaGUgY3VzdG9tIGhlaWdodCBoYXMgYSBoaWdoZXIgcHJpb3JpdHkgdGhhbiB0aGUgYW5pbWF0ZUhlaWdodCBwcm9wZXJ0eS5cXG5TbyBhbmltYXRlSGVpZ2h0IGlzIG1vc3QgbGlrZWx5IGhhdmluZyBubyBlZmZlY3QgYXQgYWxsLlwiKSA6IHZvaWQgMDtcbiAgICAgIHZhciBzbGlkZVN0eWxlID0gKDAsIF9leHRlbmRzMi5kZWZhdWx0KSh7fSwgc3R5bGVzLnNsaWRlLCBzbGlkZVN0eWxlUHJvcCk7XG4gICAgICB2YXIgdHJhbnNpdGlvbjtcbiAgICAgIHZhciBXZWJraXRUcmFuc2l0aW9uO1xuXG4gICAgICBpZiAoaXNEcmFnZ2luZyB8fCAhYW5pbWF0ZVRyYW5zaXRpb25zIHx8IGRpc3BsYXlTYW1lU2xpZGUpIHtcbiAgICAgICAgdHJhbnNpdGlvbiA9ICdhbGwgMHMgZWFzZSAwcyc7XG4gICAgICAgIFdlYmtpdFRyYW5zaXRpb24gPSAnYWxsIDBzIGVhc2UgMHMnO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdHJhbnNpdGlvbiA9IGNyZWF0ZVRyYW5zaXRpb24oJ3RyYW5zZm9ybScsIHNwcmluZ0NvbmZpZyk7XG4gICAgICAgIFdlYmtpdFRyYW5zaXRpb24gPSBjcmVhdGVUcmFuc2l0aW9uKCctd2Via2l0LXRyYW5zZm9ybScsIHNwcmluZ0NvbmZpZyk7XG5cbiAgICAgICAgaWYgKGhlaWdodExhdGVzdCAhPT0gMCkge1xuICAgICAgICAgIHZhciBhZGRpdGlvbmFsVHJhbnN0aW9uID0gXCIsIFwiLmNvbmNhdChjcmVhdGVUcmFuc2l0aW9uKCdoZWlnaHQnLCBzcHJpbmdDb25maWcpKTtcbiAgICAgICAgICB0cmFuc2l0aW9uICs9IGFkZGl0aW9uYWxUcmFuc3Rpb247XG4gICAgICAgICAgV2Via2l0VHJhbnNpdGlvbiArPSBhZGRpdGlvbmFsVHJhbnN0aW9uO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHZhciBjb250YWluZXJTdHlsZSA9IHtcbiAgICAgICAgaGVpZ2h0OiBudWxsLFxuICAgICAgICBXZWJraXRGbGV4RGlyZWN0aW9uOiBheGlzUHJvcGVydGllcy5mbGV4RGlyZWN0aW9uW2F4aXNdLFxuICAgICAgICBmbGV4RGlyZWN0aW9uOiBheGlzUHJvcGVydGllcy5mbGV4RGlyZWN0aW9uW2F4aXNdLFxuICAgICAgICBXZWJraXRUcmFuc2l0aW9uOiBXZWJraXRUcmFuc2l0aW9uLFxuICAgICAgICB0cmFuc2l0aW9uOiB0cmFuc2l0aW9uXG4gICAgICB9OyAvLyBBcHBseSB0aGUgc3R5bGVzIGZvciBTU1IgY29uc2lkZXJhdGlvbnNcblxuICAgICAgaWYgKCFyZW5kZXJPbmx5QWN0aXZlKSB7XG4gICAgICAgIHZhciB0cmFuc2Zvcm0gPSBheGlzUHJvcGVydGllcy50cmFuc2Zvcm1bYXhpc10odGhpcy5pbmRleEN1cnJlbnQgKiAxMDApO1xuICAgICAgICBjb250YWluZXJTdHlsZS5XZWJraXRUcmFuc2Zvcm0gPSB0cmFuc2Zvcm07XG4gICAgICAgIGNvbnRhaW5lclN0eWxlLnRyYW5zZm9ybSA9IHRyYW5zZm9ybTtcbiAgICAgIH1cblxuICAgICAgaWYgKGFuaW1hdGVIZWlnaHQpIHtcbiAgICAgICAgY29udGFpbmVyU3R5bGUuaGVpZ2h0ID0gaGVpZ2h0TGF0ZXN0O1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChcImRpdlwiLCAoMCwgX2V4dGVuZHMyLmRlZmF1bHQpKHtcbiAgICAgICAgcmVmOiB0aGlzLnNldFJvb3ROb2RlLFxuICAgICAgICBzdHlsZTogKDAsIF9leHRlbmRzMi5kZWZhdWx0KSh7fSwgYXhpc1Byb3BlcnRpZXMucm9vdFtheGlzXSwgc3R5bGUpXG4gICAgICB9LCBvdGhlciwgdG91Y2hFdmVudHMsIG1vdXNlRXZlbnRzLCB7XG4gICAgICAgIG9uU2Nyb2xsOiB0aGlzLmhhbmRsZVNjcm9sbFxuICAgICAgfSksIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwge1xuICAgICAgICByZWY6IHRoaXMuc2V0Q29udGFpbmVyTm9kZSxcbiAgICAgICAgc3R5bGU6ICgwLCBfZXh0ZW5kczIuZGVmYXVsdCkoe30sIGNvbnRhaW5lclN0eWxlLCBzdHlsZXMuY29udGFpbmVyLCBjb250YWluZXJTdHlsZVByb3ApLFxuICAgICAgICBjbGFzc05hbWU6IFwicmVhY3Qtc3dpcGVhYmxlLXZpZXctY29udGFpbmVyXCJcbiAgICAgIH0sIF9yZWFjdC5kZWZhdWx0LkNoaWxkcmVuLm1hcChjaGlsZHJlbiwgZnVuY3Rpb24gKGNoaWxkLCBpbmRleENoaWxkKSB7XG4gICAgICAgIGlmIChyZW5kZXJPbmx5QWN0aXZlICYmIGluZGV4Q2hpbGQgIT09IGluZGV4TGF0ZXN0KSB7XG4gICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cblxuICAgICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyAoMCwgX3dhcm5pbmcuZGVmYXVsdCkoX3JlYWN0LmRlZmF1bHQuaXNWYWxpZEVsZW1lbnQoY2hpbGQpLCBcInJlYWN0LXN3aXBlYWJsZS12aWV3OiBvbmUgb2YgdGhlIGNoaWxkcmVuIHByb3ZpZGVkIGlzIGludmFsaWQ6IFwiLmNvbmNhdChjaGlsZCwgXCIuXFxuV2UgYXJlIGV4cGVjdGluZyBhIHZhbGlkIFJlYWN0IEVsZW1lbnRcIikpIDogdm9pZCAwO1xuICAgICAgICB2YXIgcmVmO1xuICAgICAgICB2YXIgaGlkZGVuID0gdHJ1ZTtcblxuICAgICAgICBpZiAoaW5kZXhDaGlsZCA9PT0gaW5kZXhMYXRlc3QpIHtcbiAgICAgICAgICBoaWRkZW4gPSBmYWxzZTtcblxuICAgICAgICAgIGlmIChhbmltYXRlSGVpZ2h0KSB7XG4gICAgICAgICAgICByZWYgPSBfdGhpczQuc2V0QWN0aXZlU2xpZGU7XG4gICAgICAgICAgICBzbGlkZVN0eWxlLm92ZXJmbG93WSA9ICdoaWRkZW4nO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHtcbiAgICAgICAgICByZWY6IHJlZixcbiAgICAgICAgICBzdHlsZTogc2xpZGVTdHlsZSxcbiAgICAgICAgICBjbGFzc05hbWU6IHNsaWRlQ2xhc3NOYW1lLFxuICAgICAgICAgIFwiYXJpYS1oaWRkZW5cIjogaGlkZGVuLFxuICAgICAgICAgIFwiZGF0YS1zd2lwZWFibGVcIjogXCJ0cnVlXCJcbiAgICAgICAgfSwgY2hpbGQpO1xuICAgICAgfSkpKTtcbiAgICB9XG4gIH1dKTtcbiAgcmV0dXJuIFN3aXBlYWJsZVZpZXdzO1xufShfcmVhY3QuZGVmYXVsdC5Db21wb25lbnQpOyAvLyBBZGRlZCBhcyBhbiBhZHMgZm9yIHBlb3BsZSB1c2luZyB0aGUgUmVhY3QgZGV2IHRvb2xzIGluIHByb2R1Y3Rpb24uXG4vLyBTbyB0aGV5IGtub3csIHRoZSB0b29sIHVzZWQgdG8gYnVpbGQgdGhlIGF3ZXNvbWUgVUkgdGhleVxuLy8gYXJlIGxvb2tpbmcgYXQvcmV0cm8gZW5naW5lZXJpbmcuXG5cblxuU3dpcGVhYmxlVmlld3MuZGlzcGxheU5hbWUgPSAnUmVhY3RTd2lwYWJsZVZpZXcnO1xuU3dpcGVhYmxlVmlld3MucHJvcFR5cGVzID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8ge1xuICAvKipcbiAgICogVGhpcyBpcyBjYWxsYmFjayBwcm9wZXJ0eS4gSXQncyBjYWxsZWQgYnkgdGhlIGNvbXBvbmVudCBvbiBtb3VudC5cbiAgICogVGhpcyBpcyB1c2VmdWwgd2hlbiB5b3Ugd2FudCB0byB0cmlnZ2VyIGFuIGFjdGlvbiBwcm9ncmFtbWF0aWNhbGx5LlxuICAgKiBJdCBjdXJyZW50bHkgb25seSBzdXBwb3J0cyB1cGRhdGVIZWlnaHQoKSBhY3Rpb24uXG4gICAqXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBhY3Rpb25zIFRoaXMgb2JqZWN0IGNvbnRhaW5zIGFsbCBwb3NpYmxlIGFjdGlvbnNcbiAgICogdGhhdCBjYW4gYmUgdHJpZ2dlcmVkIHByb2dyYW1tYXRpY2FsbHkuXG4gICAqL1xuICBhY3Rpb246IF9wcm9wVHlwZXMuZGVmYXVsdC5mdW5jLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBoZWlnaHQgb2YgdGhlIGNvbnRhaW5lciB3aWxsIGJlIGFuaW1hdGVkIHRvIG1hdGNoIHRoZSBjdXJyZW50IHNsaWRlIGhlaWdodC5cbiAgICogQW5pbWF0aW5nIGFub3RoZXIgc3R5bGUgcHJvcGVydHkgaGFzIGEgbmVnYXRpdmUgaW1wYWN0IHJlZ2FyZGluZyBwZXJmb3JtYW5jZS5cbiAgICovXG4gIGFuaW1hdGVIZWlnaHQ6IF9wcm9wVHlwZXMuZGVmYXVsdC5ib29sLFxuXG4gIC8qKlxuICAgKiBJZiBgZmFsc2VgLCBjaGFuZ2VzIHRvIHRoZSBpbmRleCBwcm9wIHdpbGwgbm90IGNhdXNlIGFuIGFuaW1hdGVkIHRyYW5zaXRpb24uXG4gICAqL1xuICBhbmltYXRlVHJhbnNpdGlvbnM6IF9wcm9wVHlwZXMuZGVmYXVsdC5ib29sLFxuXG4gIC8qKlxuICAgKiBUaGUgYXhpcyBvbiB3aGljaCB0aGUgc2xpZGVzIHdpbGwgc2xpZGUuXG4gICAqL1xuICBheGlzOiBfcHJvcFR5cGVzLmRlZmF1bHQub25lT2YoWyd4JywgJ3gtcmV2ZXJzZScsICd5JywgJ3ktcmV2ZXJzZSddKSxcblxuICAvKipcbiAgICogVXNlIHRoaXMgcHJvcGVydHkgdG8gcHJvdmlkZSB5b3VyIHNsaWRlcy5cbiAgICovXG4gIGNoaWxkcmVuOiBfcHJvcFR5cGVzLmRlZmF1bHQubm9kZS5pc1JlcXVpcmVkLFxuXG4gIC8qKlxuICAgKiBUaGlzIGlzIHRoZSBpbmxpbmVkIHN0eWxlIHRoYXQgd2lsbCBiZSBhcHBsaWVkXG4gICAqIHRvIGVhY2ggc2xpZGUgY29udGFpbmVyLlxuICAgKi9cbiAgY29udGFpbmVyU3R5bGU6IF9wcm9wVHlwZXMuZGVmYXVsdC5vYmplY3QsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgaXQgd2lsbCBkaXNhYmxlIHRvdWNoIGV2ZW50cy5cbiAgICogVGhpcyBpcyB1c2VmdWwgd2hlbiB5b3Ugd2FudCB0byBwcm9oaWJpdCB0aGUgdXNlciBmcm9tIGNoYW5naW5nIHNsaWRlcy5cbiAgICovXG4gIGRpc2FibGVkOiBfcHJvcFR5cGVzLmRlZmF1bHQuYm9vbCxcblxuICAvKipcbiAgICogVGhpcyBpcyB0aGUgY29uZmlnIHVzZWQgdG8gZGlzYWJsZSBsYXp5bG9kaW5nLFxuICAgKiBpZiBgdHJ1ZWAgd2lsbCByZW5kZXIgYWxsIHRoZSB2aWV3cyBpbiBmaXJzdCByZW5kZXJpbmcuXG4gICAqL1xuICBkaXNhYmxlTGF6eUxvYWRpbmc6IF9wcm9wVHlwZXMuZGVmYXVsdC5ib29sLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIGl0IHdpbGwgZW5hYmxlIG1vdXNlIGV2ZW50cy5cbiAgICogVGhpcyB3aWxsIGFsbG93IHRoZSB1c2VyIHRvIHBlcmZvcm0gdGhlIHJlbGV2YW50IHN3aXBlIGFjdGlvbnMgd2l0aCBhIG1vdXNlLlxuICAgKi9cbiAgZW5hYmxlTW91c2VFdmVudHM6IF9wcm9wVHlwZXMuZGVmYXVsdC5ib29sLFxuXG4gIC8qKlxuICAgKiBDb25maWd1cmUgaHlzdGVyZXNpcyBiZXR3ZWVuIHNsaWRlcy4gVGhpcyB2YWx1ZSBkZXRlcm1pbmVzIGhvdyBmYXJcbiAgICogc2hvdWxkIHVzZXIgc3dpcGUgdG8gc3dpdGNoIHNsaWRlLlxuICAgKi9cbiAgaHlzdGVyZXNpczogX3Byb3BUeXBlcy5kZWZhdWx0Lm51bWJlcixcblxuICAvKipcbiAgICogSWYgYHRydWVgLCBpdCB3aWxsIGlnbm9yZSBuYXRpdmUgc2Nyb2xsIGNvbnRhaW5lci5cbiAgICogSXQgY2FuIGJlIHVzZWQgdG8gZmlsdGVyIG91dCBmYWxzZSBwb3NpdGl2ZSB0aGF0IGJsb2NrcyB0aGUgc3dpcGUuXG4gICAqL1xuICBpZ25vcmVOYXRpdmVTY3JvbGw6IF9wcm9wVHlwZXMuZGVmYXVsdC5ib29sLFxuXG4gIC8qKlxuICAgKiBUaGlzIGlzIHRoZSBpbmRleCBvZiB0aGUgc2xpZGUgdG8gc2hvdy5cbiAgICogVGhpcyBpcyB1c2VmdWwgd2hlbiB5b3Ugd2FudCB0byBjaGFuZ2UgdGhlIGRlZmF1bHQgc2xpZGUgc2hvd24uXG4gICAqIE9yIHdoZW4geW91IGhhdmUgdGFicyBsaW5rZWQgdG8gZWFjaCBzbGlkZS5cbiAgICovXG4gIGluZGV4OiBfcHJvcFR5cGVzLmRlZmF1bHQubnVtYmVyLFxuXG4gIC8qKlxuICAgKiBUaGlzIGlzIGNhbGxiYWNrIHByb3AuIEl0J3MgY2FsbCBieSB0aGVcbiAgICogY29tcG9uZW50IHdoZW4gdGhlIHNob3duIHNsaWRlIGNoYW5nZSBhZnRlciBhIHN3aXBlIG1hZGUgYnkgdGhlIHVzZXIuXG4gICAqIFRoaXMgaXMgdXNlZnVsIHdoZW4geW91IGhhdmUgdGFicyBsaW5rZWQgdG8gZWFjaCBzbGlkZS5cbiAgICpcbiAgICogQHBhcmFtIHtpbnRlZ2VyfSBpbmRleCBUaGlzIGlzIHRoZSBjdXJyZW50IGluZGV4IG9mIHRoZSBzbGlkZS5cbiAgICogQHBhcmFtIHtpbnRlZ2VyfSBpbmRleExhdGVzdCBUaGlzIGlzIHRoZSBvbGRlc3QgaW5kZXggb2YgdGhlIHNsaWRlLlxuICAgKiBAcGFyYW0ge29iamVjdH0gbWV0YSBNZXRhIGRhdGEgY29udGFpbmluZyBtb3JlIGluZm9ybWF0aW9uIGFib3V0IHRoZSBldmVudC5cbiAgICovXG4gIG9uQ2hhbmdlSW5kZXg6IF9wcm9wVHlwZXMuZGVmYXVsdC5mdW5jLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBvbk1vdXNlRG93bjogX3Byb3BUeXBlcy5kZWZhdWx0LmZ1bmMsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIG9uTW91c2VMZWF2ZTogX3Byb3BUeXBlcy5kZWZhdWx0LmZ1bmMsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIG9uTW91c2VNb3ZlOiBfcHJvcFR5cGVzLmRlZmF1bHQuZnVuYyxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgb25Nb3VzZVVwOiBfcHJvcFR5cGVzLmRlZmF1bHQuZnVuYyxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgb25TY3JvbGw6IF9wcm9wVHlwZXMuZGVmYXVsdC5mdW5jLFxuXG4gIC8qKlxuICAgKiBUaGlzIGlzIGNhbGxiYWNrIHByb3AuIEl0J3MgY2FsbGVkIGJ5IHRoZVxuICAgKiBjb21wb25lbnQgd2hlbiB0aGUgc2xpZGUgc3dpdGNoaW5nLlxuICAgKiBUaGlzIGlzIHVzZWZ1bCB3aGVuIHlvdSB3YW50IHRvIGltcGxlbWVudCBzb21ldGhpbmcgY29ycmVzcG9uZGluZ1xuICAgKiB0byB0aGUgY3VycmVudCBzbGlkZSBwb3NpdGlvbi5cbiAgICpcbiAgICogQHBhcmFtIHtpbnRlZ2VyfSBpbmRleCBUaGlzIGlzIHRoZSBjdXJyZW50IGluZGV4IG9mIHRoZSBzbGlkZS5cbiAgICogQHBhcmFtIHtzdHJpbmd9IHR5cGUgQ2FuIGJlIGVpdGhlciBgbW92ZWAgb3IgYGVuZGAuXG4gICAqL1xuICBvblN3aXRjaGluZzogX3Byb3BUeXBlcy5kZWZhdWx0LmZ1bmMsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIG9uVG91Y2hFbmQ6IF9wcm9wVHlwZXMuZGVmYXVsdC5mdW5jLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBvblRvdWNoTW92ZTogX3Byb3BUeXBlcy5kZWZhdWx0LmZ1bmMsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIG9uVG91Y2hTdGFydDogX3Byb3BUeXBlcy5kZWZhdWx0LmZ1bmMsXG5cbiAgLyoqXG4gICAqIFRoZSBjYWxsYmFjayB0aGF0IGZpcmVzIHdoZW4gdGhlIGFuaW1hdGlvbiBjb21lcyB0byBhIHJlc3QuXG4gICAqIFRoaXMgaXMgdXNlZnVsIHRvIGRlZmVyIENQVSBpbnRlbnNpdmUgdGFzay5cbiAgICovXG4gIG9uVHJhbnNpdGlvbkVuZDogX3Byb3BUeXBlcy5kZWZhdWx0LmZ1bmMsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgaXQgd2lsbCBhZGQgYm91bmRzIGVmZmVjdCBvbiB0aGUgZWRnZXMuXG4gICAqL1xuICByZXNpc3RhbmNlOiBfcHJvcFR5cGVzLmRlZmF1bHQuYm9vbCxcblxuICAvKipcbiAgICogVGhpcyBpcyB0aGUgY2xhc3NOYW1lIHRoYXQgd2lsbCBiZSBhcHBsaWVkXG4gICAqIG9uIHRoZSBzbGlkZSBjb21wb25lbnQuXG4gICAqL1xuICBzbGlkZUNsYXNzTmFtZTogX3Byb3BUeXBlcy5kZWZhdWx0LnN0cmluZyxcblxuICAvKipcbiAgICogVGhpcyBpcyB0aGUgaW5saW5lZCBzdHlsZSB0aGF0IHdpbGwgYmUgYXBwbGllZFxuICAgKiBvbiB0aGUgc2xpZGUgY29tcG9uZW50LlxuICAgKi9cbiAgc2xpZGVTdHlsZTogX3Byb3BUeXBlcy5kZWZhdWx0Lm9iamVjdCxcblxuICAvKipcbiAgICogVGhpcyBpcyB0aGUgY29uZmlnIHVzZWQgdG8gY3JlYXRlIENTUyB0cmFuc2l0aW9ucy5cbiAgICogVGhpcyBpcyB1c2VmdWwgdG8gY2hhbmdlIHRoZSBkeW5hbWljIG9mIHRoZSB0cmFuc2l0aW9uLlxuICAgKi9cbiAgc3ByaW5nQ29uZmlnOiBfcHJvcFR5cGVzLmRlZmF1bHQuc2hhcGUoe1xuICAgIGRlbGF5OiBfcHJvcFR5cGVzLmRlZmF1bHQuc3RyaW5nLFxuICAgIGR1cmF0aW9uOiBfcHJvcFR5cGVzLmRlZmF1bHQuc3RyaW5nLFxuICAgIGVhc2VGdW5jdGlvbjogX3Byb3BUeXBlcy5kZWZhdWx0LnN0cmluZ1xuICB9KSxcblxuICAvKipcbiAgICogVGhpcyBpcyB0aGUgaW5saW5lZCBzdHlsZSB0aGF0IHdpbGwgYmUgYXBwbGllZFxuICAgKiBvbiB0aGUgcm9vdCBjb21wb25lbnQuXG4gICAqL1xuICBzdHlsZTogX3Byb3BUeXBlcy5kZWZhdWx0Lm9iamVjdCxcblxuICAvKipcbiAgICogVGhpcyBpcyB0aGUgdGhyZXNob2xkIHVzZWQgZm9yIGRldGVjdGluZyBhIHF1aWNrIHN3aXBlLlxuICAgKiBJZiB0aGUgY29tcHV0ZWQgc3BlZWQgaXMgYWJvdmUgdGhpcyB2YWx1ZSwgdGhlIGluZGV4IGNoYW5nZS5cbiAgICovXG4gIHRocmVzaG9sZDogX3Byb3BUeXBlcy5kZWZhdWx0Lm51bWJlclxufSA6IHt9O1xuU3dpcGVhYmxlVmlld3MuZGVmYXVsdFByb3BzID0ge1xuICBhbmltYXRlSGVpZ2h0OiBmYWxzZSxcbiAgYW5pbWF0ZVRyYW5zaXRpb25zOiB0cnVlLFxuICBheGlzOiAneCcsXG4gIGRpc2FibGVkOiBmYWxzZSxcbiAgZGlzYWJsZUxhenlMb2FkaW5nOiBmYWxzZSxcbiAgZW5hYmxlTW91c2VFdmVudHM6IGZhbHNlLFxuICBoeXN0ZXJlc2lzOiAwLjYsXG4gIGlnbm9yZU5hdGl2ZVNjcm9sbDogZmFsc2UsXG4gIGluZGV4OiAwLFxuICB0aHJlc2hvbGQ6IDUsXG4gIHNwcmluZ0NvbmZpZzoge1xuICAgIGR1cmF0aW9uOiAnMC4zNXMnLFxuICAgIGVhc2VGdW5jdGlvbjogJ2N1YmljLWJlemllcigwLjE1LCAwLjMsIDAuMjUsIDEpJyxcbiAgICBkZWxheTogJzBzJ1xuICB9LFxuICByZXNpc3RhbmNlOiBmYWxzZVxufTtcblN3aXBlYWJsZVZpZXdzLmNoaWxkQ29udGV4dFR5cGVzID0ge1xuICBzd2lwZWFibGVWaWV3czogX3Byb3BUeXBlcy5kZWZhdWx0LnNoYXBlKHtcbiAgICBzbGlkZVVwZGF0ZUhlaWdodDogX3Byb3BUeXBlcy5kZWZhdWx0LmZ1bmNcbiAgfSlcbn07XG52YXIgX2RlZmF1bHQgPSBTd2lwZWFibGVWaWV3cztcbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0OyIsImZ1bmN0aW9uIF9leHRlbmRzKCkge1xuICBtb2R1bGUuZXhwb3J0cyA9IF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7XG4gICAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07XG5cbiAgICAgIGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHtcbiAgICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHtcbiAgICAgICAgICB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHRhcmdldDtcbiAgfTtcblxuICByZXR1cm4gX2V4dGVuZHMuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBfZXh0ZW5kczsiLCJ2YXIgb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSA9IHJlcXVpcmUoXCIuL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIik7XG5cbmZ1bmN0aW9uIF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhzb3VyY2UsIGV4Y2x1ZGVkKSB7XG4gIGlmIChzb3VyY2UgPT0gbnVsbCkgcmV0dXJuIHt9O1xuICB2YXIgdGFyZ2V0ID0gb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShzb3VyY2UsIGV4Y2x1ZGVkKTtcbiAgdmFyIGtleSwgaTtcblxuICBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scykge1xuICAgIHZhciBzb3VyY2VTeW1ib2xLZXlzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhzb3VyY2UpO1xuXG4gICAgZm9yIChpID0gMDsgaSA8IHNvdXJjZVN5bWJvbEtleXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGtleSA9IHNvdXJjZVN5bWJvbEtleXNbaV07XG4gICAgICBpZiAoZXhjbHVkZWQuaW5kZXhPZihrZXkpID49IDApIGNvbnRpbnVlO1xuICAgICAgaWYgKCFPYmplY3QucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwoc291cmNlLCBrZXkpKSBjb250aW51ZTtcbiAgICAgIHRhcmdldFtrZXldID0gc291cmNlW2tleV07XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRhcmdldDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXM7IiwiZnVuY3Rpb24gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2Uoc291cmNlLCBleGNsdWRlZCkge1xuICBpZiAoc291cmNlID09IG51bGwpIHJldHVybiB7fTtcbiAgdmFyIHRhcmdldCA9IHt9O1xuICB2YXIgc291cmNlS2V5cyA9IE9iamVjdC5rZXlzKHNvdXJjZSk7XG4gIHZhciBrZXksIGk7XG5cbiAgZm9yIChpID0gMDsgaSA8IHNvdXJjZUtleXMubGVuZ3RoOyBpKyspIHtcbiAgICBrZXkgPSBzb3VyY2VLZXlzW2ldO1xuICAgIGlmIChleGNsdWRlZC5pbmRleE9mKGtleSkgPj0gMCkgY29udGludWU7XG4gICAgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgfVxuXG4gIHJldHVybiB0YXJnZXQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2U7IiwiZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3Rvcikge1xuICBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBfY2xhc3NDYWxsQ2hlY2s7IiwiZnVuY3Rpb24gX2RlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykge1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTtcbiAgICBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7XG4gICAgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlO1xuICAgIGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpO1xuICB9XG59XG5cbmZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHtcbiAgaWYgKHByb3RvUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7XG4gIGlmIChzdGF0aWNQcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTtcbiAgcmV0dXJuIENvbnN0cnVjdG9yO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IF9jcmVhdGVDbGFzczsiLCJ2YXIgX3R5cGVvZiA9IHJlcXVpcmUoXCIuLi9oZWxwZXJzL3R5cGVvZlwiKTtcblxudmFyIGFzc2VydFRoaXNJbml0aWFsaXplZCA9IHJlcXVpcmUoXCIuL2Fzc2VydFRoaXNJbml0aWFsaXplZFwiKTtcblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkge1xuICBpZiAoY2FsbCAmJiAoX3R5cGVvZihjYWxsKSA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSkge1xuICAgIHJldHVybiBjYWxsO1xuICB9XG5cbiAgcmV0dXJuIGFzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybjsiLCJmdW5jdGlvbiBfdHlwZW9mMihvYmopIHsgaWYgKHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiKSB7IF90eXBlb2YyID0gZnVuY3Rpb24gX3R5cGVvZjIob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9OyB9IGVsc2UgeyBfdHlwZW9mMiA9IGZ1bmN0aW9uIF90eXBlb2YyKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajsgfTsgfSByZXR1cm4gX3R5cGVvZjIob2JqKTsgfVxuXG5mdW5jdGlvbiBfdHlwZW9mKG9iaikge1xuICBpZiAodHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIF90eXBlb2YyKFN5bWJvbC5pdGVyYXRvcikgPT09IFwic3ltYm9sXCIpIHtcbiAgICBtb2R1bGUuZXhwb3J0cyA9IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikge1xuICAgICAgcmV0dXJuIF90eXBlb2YyKG9iaik7XG4gICAgfTtcbiAgfSBlbHNlIHtcbiAgICBtb2R1bGUuZXhwb3J0cyA9IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikge1xuICAgICAgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IF90eXBlb2YyKG9iaik7XG4gICAgfTtcbiAgfVxuXG4gIHJldHVybiBfdHlwZW9mKG9iaik7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX3R5cGVvZjsiLCJmdW5jdGlvbiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpIHtcbiAgaWYgKHNlbGYgPT09IHZvaWQgMCkge1xuICAgIHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTtcbiAgfVxuXG4gIHJldHVybiBzZWxmO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQ7IiwiZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSBfZ2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3QuZ2V0UHJvdG90eXBlT2YgOiBmdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2Yobykge1xuICAgIHJldHVybiBvLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2Yobyk7XG4gIH07XG4gIHJldHVybiBfZ2V0UHJvdG90eXBlT2Yobyk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX2dldFByb3RvdHlwZU9mOyIsInZhciBzZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoXCIuL3NldFByb3RvdHlwZU9mXCIpO1xuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHtcbiAgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvblwiKTtcbiAgfVxuXG4gIHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwge1xuICAgIGNvbnN0cnVjdG9yOiB7XG4gICAgICB2YWx1ZTogc3ViQ2xhc3MsXG4gICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH1cbiAgfSk7XG4gIGlmIChzdXBlckNsYXNzKSBzZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcyk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX2luaGVyaXRzOyIsImZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gX3NldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8IGZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7XG4gICAgby5fX3Byb3RvX18gPSBwO1xuICAgIHJldHVybiBvO1xuICB9O1xuXG4gIHJldHVybiBfc2V0UHJvdG90eXBlT2YobywgcCk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX3NldFByb3RvdHlwZU9mOyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImNoZWNrSW5kZXhCb3VuZHNcIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICByZXR1cm4gX2NoZWNrSW5kZXhCb3VuZHMuZGVmYXVsdDtcbiAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJjb21wdXRlSW5kZXhcIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICByZXR1cm4gX2NvbXB1dGVJbmRleC5kZWZhdWx0O1xuICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImNvbnN0YW50XCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIF9jb25zdGFudC5kZWZhdWx0O1xuICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImdldERpc3BsYXlTYW1lU2xpZGVcIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICByZXR1cm4gX2dldERpc3BsYXlTYW1lU2xpZGUuZGVmYXVsdDtcbiAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJtb2RcIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICByZXR1cm4gX21vZC5kZWZhdWx0O1xuICB9XG59KTtcblxudmFyIF9jaGVja0luZGV4Qm91bmRzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9jaGVja0luZGV4Qm91bmRzXCIpKTtcblxudmFyIF9jb21wdXRlSW5kZXggPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL2NvbXB1dGVJbmRleFwiKSk7XG5cbnZhciBfY29uc3RhbnQgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL2NvbnN0YW50XCIpKTtcblxudmFyIF9nZXREaXNwbGF5U2FtZVNsaWRlID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9nZXREaXNwbGF5U2FtZVNsaWRlXCIpKTtcblxudmFyIF9tb2QgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL21vZFwiKSk7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwO1xuXG52YXIgX3JlYWN0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicmVhY3RcIikpO1xuXG52YXIgX3dhcm5pbmcgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJ3YXJuaW5nXCIpKTtcblxudmFyIGNoZWNrSW5kZXhCb3VuZHMgPSBmdW5jdGlvbiBjaGVja0luZGV4Qm91bmRzKHByb3BzKSB7XG4gIHZhciBpbmRleCA9IHByb3BzLmluZGV4LFxuICAgICAgY2hpbGRyZW4gPSBwcm9wcy5jaGlsZHJlbjtcblxuICB2YXIgY2hpbGRyZW5Db3VudCA9IF9yZWFjdC5kZWZhdWx0LkNoaWxkcmVuLmNvdW50KGNoaWxkcmVuKTtcblxuICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyAoMCwgX3dhcm5pbmcuZGVmYXVsdCkoaW5kZXggPj0gMCAmJiBpbmRleCA8PSBjaGlsZHJlbkNvdW50LCBcInJlYWN0LXN3aXBlYWJsZS12aWV3OiB0aGUgbmV3IGluZGV4OiBcIi5jb25jYXQoaW5kZXgsIFwiIGlzIG91dCBvZiBib3VuZHM6IFswLVwiKS5jb25jYXQoY2hpbGRyZW5Db3VudCwgXCJdLlwiKSkgOiB2b2lkIDA7XG59O1xuXG52YXIgX2RlZmF1bHQgPSBjaGVja0luZGV4Qm91bmRzO1xuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gY29tcHV0ZUluZGV4O1xuXG52YXIgX3JlYWN0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicmVhY3RcIikpO1xuXG52YXIgX2NvbnN0YW50ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9jb25zdGFudFwiKSk7XG5cbmZ1bmN0aW9uIGNvbXB1dGVJbmRleChwYXJhbXMpIHtcbiAgdmFyIGNoaWxkcmVuID0gcGFyYW1zLmNoaWxkcmVuLFxuICAgICAgc3RhcnRJbmRleCA9IHBhcmFtcy5zdGFydEluZGV4LFxuICAgICAgc3RhcnRYID0gcGFyYW1zLnN0YXJ0WCxcbiAgICAgIHBhZ2VYID0gcGFyYW1zLnBhZ2VYLFxuICAgICAgdmlld0xlbmd0aCA9IHBhcmFtcy52aWV3TGVuZ3RoLFxuICAgICAgcmVzaXN0YW5jZSA9IHBhcmFtcy5yZXNpc3RhbmNlO1xuICB2YXIgaW5kZXhNYXggPSBfcmVhY3QuZGVmYXVsdC5DaGlsZHJlbi5jb3VudChjaGlsZHJlbikgLSAxO1xuICB2YXIgaW5kZXggPSBzdGFydEluZGV4ICsgKHN0YXJ0WCAtIHBhZ2VYKSAvIHZpZXdMZW5ndGg7XG4gIHZhciBuZXdTdGFydFg7XG5cbiAgaWYgKCFyZXNpc3RhbmNlKSB7XG4gICAgLy8gUmVzZXQgdGhlIHN0YXJ0aW5nIHBvaW50XG4gICAgaWYgKGluZGV4IDwgMCkge1xuICAgICAgaW5kZXggPSAwO1xuICAgICAgbmV3U3RhcnRYID0gKGluZGV4IC0gc3RhcnRJbmRleCkgKiB2aWV3TGVuZ3RoICsgcGFnZVg7XG4gICAgfSBlbHNlIGlmIChpbmRleCA+IGluZGV4TWF4KSB7XG4gICAgICBpbmRleCA9IGluZGV4TWF4O1xuICAgICAgbmV3U3RhcnRYID0gKGluZGV4IC0gc3RhcnRJbmRleCkgKiB2aWV3TGVuZ3RoICsgcGFnZVg7XG4gICAgfVxuICB9IGVsc2UgaWYgKGluZGV4IDwgMCkge1xuICAgIGluZGV4ID0gTWF0aC5leHAoaW5kZXggKiBfY29uc3RhbnQuZGVmYXVsdC5SRVNJU1RBTkNFX0NPRUYpIC0gMTtcbiAgfSBlbHNlIGlmIChpbmRleCA+IGluZGV4TWF4KSB7XG4gICAgaW5kZXggPSBpbmRleE1heCArIDEgLSBNYXRoLmV4cCgoaW5kZXhNYXggLSBpbmRleCkgKiBfY29uc3RhbnQuZGVmYXVsdC5SRVNJU1RBTkNFX0NPRUYpO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBpbmRleDogaW5kZXgsXG4gICAgc3RhcnRYOiBuZXdTdGFydFhcbiAgfTtcbn0iLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG5cbnZhciBfcmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJyZWFjdFwiKSk7XG5cbnZhciBnZXREaXNwbGF5U2FtZVNsaWRlID0gZnVuY3Rpb24gZ2V0RGlzcGxheVNhbWVTbGlkZShwcm9wcywgbmV4dFByb3BzKSB7XG4gIHZhciBkaXNwbGF5U2FtZVNsaWRlID0gZmFsc2U7XG5cbiAgdmFyIGdldENoaWxkcmVuS2V5ID0gZnVuY3Rpb24gZ2V0Q2hpbGRyZW5LZXkoY2hpbGQpIHtcbiAgICByZXR1cm4gY2hpbGQgPyBjaGlsZC5rZXkgOiAnZW1wdHknO1xuICB9O1xuXG4gIGlmIChwcm9wcy5jaGlsZHJlbi5sZW5ndGggJiYgbmV4dFByb3BzLmNoaWxkcmVuLmxlbmd0aCkge1xuICAgIHZhciBvbGRLZXlzID0gX3JlYWN0LmRlZmF1bHQuQ2hpbGRyZW4ubWFwKHByb3BzLmNoaWxkcmVuLCBnZXRDaGlsZHJlbktleSk7XG5cbiAgICB2YXIgb2xkS2V5ID0gb2xkS2V5c1twcm9wcy5pbmRleF07XG5cbiAgICBpZiAob2xkS2V5ICE9PSBudWxsICYmIG9sZEtleSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICB2YXIgbmV3S2V5cyA9IF9yZWFjdC5kZWZhdWx0LkNoaWxkcmVuLm1hcChuZXh0UHJvcHMuY2hpbGRyZW4sIGdldENoaWxkcmVuS2V5KTtcblxuICAgICAgdmFyIG5ld0tleSA9IG5ld0tleXNbbmV4dFByb3BzLmluZGV4XTtcblxuICAgICAgaWYgKG9sZEtleSA9PT0gbmV3S2V5KSB7XG4gICAgICAgIGRpc3BsYXlTYW1lU2xpZGUgPSB0cnVlO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBkaXNwbGF5U2FtZVNsaWRlO1xufTtcblxudmFyIF9kZWZhdWx0ID0gZ2V0RGlzcGxheVNhbWVTbGlkZTtcbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0OyIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwO1xuXG4vLyBFeHRlbmRlZCB2ZXJzaW9uIG9mICUgd2l0aCBuZWdhdGl2ZSBpbnRlZ2VyIHN1cHBvcnQuXG5mdW5jdGlvbiBtb2QobiwgbSkge1xuICB2YXIgcSA9IG4gJSBtO1xuICByZXR1cm4gcSA8IDAgPyBxICsgbSA6IHE7XG59XG5cbnZhciBfZGVmYXVsdCA9IG1vZDtcbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0OyIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiRHJhZ2dhYmxlQ29yZVwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiBfRHJhZ2dhYmxlQ29yZS5kZWZhdWx0O1xuICB9XG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcblxudmFyIFJlYWN0ID0gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQocmVxdWlyZShcInJlYWN0XCIpKTtcblxudmFyIF9wcm9wVHlwZXMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJwcm9wLXR5cGVzXCIpKTtcblxudmFyIF9yZWFjdERvbSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInJlYWN0LWRvbVwiKSk7XG5cbnZhciBfY2xhc3NuYW1lcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcImNsYXNzbmFtZXNcIikpO1xuXG52YXIgX2RvbUZucyA9IHJlcXVpcmUoXCIuL3V0aWxzL2RvbUZuc1wiKTtcblxudmFyIF9wb3NpdGlvbkZucyA9IHJlcXVpcmUoXCIuL3V0aWxzL3Bvc2l0aW9uRm5zXCIpO1xuXG52YXIgX3NoaW1zID0gcmVxdWlyZShcIi4vdXRpbHMvc2hpbXNcIik7XG5cbnZhciBfRHJhZ2dhYmxlQ29yZSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vRHJhZ2dhYmxlQ29yZVwiKSk7XG5cbnZhciBfbG9nID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi91dGlscy9sb2dcIikpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUoKSB7IGlmICh0eXBlb2YgV2Vha01hcCAhPT0gXCJmdW5jdGlvblwiKSByZXR1cm4gbnVsbDsgdmFyIGNhY2hlID0gbmV3IFdlYWtNYXAoKTsgX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlID0gZnVuY3Rpb24gX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlKCkgeyByZXR1cm4gY2FjaGU7IH07IHJldHVybiBjYWNoZTsgfVxuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChvYmopIHsgaWYgKG9iaiAmJiBvYmouX19lc01vZHVsZSkgeyByZXR1cm4gb2JqOyB9IGlmIChvYmogPT09IG51bGwgfHwgX3R5cGVvZihvYmopICE9PSBcIm9iamVjdFwiICYmIHR5cGVvZiBvYmogIT09IFwiZnVuY3Rpb25cIikgeyByZXR1cm4geyBkZWZhdWx0OiBvYmogfTsgfSB2YXIgY2FjaGUgPSBfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUoKTsgaWYgKGNhY2hlICYmIGNhY2hlLmhhcyhvYmopKSB7IHJldHVybiBjYWNoZS5nZXQob2JqKTsgfSB2YXIgbmV3T2JqID0ge307IHZhciBoYXNQcm9wZXJ0eURlc2NyaXB0b3IgPSBPYmplY3QuZGVmaW5lUHJvcGVydHkgJiYgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjsgZm9yICh2YXIga2V5IGluIG9iaikgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwga2V5KSkgeyB2YXIgZGVzYyA9IGhhc1Byb3BlcnR5RGVzY3JpcHRvciA/IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqLCBrZXkpIDogbnVsbDsgaWYgKGRlc2MgJiYgKGRlc2MuZ2V0IHx8IGRlc2Muc2V0KSkgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkobmV3T2JqLCBrZXksIGRlc2MpOyB9IGVsc2UgeyBuZXdPYmpba2V5XSA9IG9ialtrZXldOyB9IH0gfSBuZXdPYmouZGVmYXVsdCA9IG9iajsgaWYgKGNhY2hlKSB7IGNhY2hlLnNldChvYmosIG5ld09iaik7IH0gcmV0dXJuIG5ld09iajsgfVxuXG5mdW5jdGlvbiBfdHlwZW9mKG9iaikgeyBcIkBiYWJlbC9oZWxwZXJzIC0gdHlwZW9mXCI7IGlmICh0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIikgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH07IH0gZWxzZSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajsgfTsgfSByZXR1cm4gX3R5cGVvZihvYmopOyB9XG5cbmZ1bmN0aW9uIF9leHRlbmRzKCkgeyBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07IHJldHVybiBfZXh0ZW5kcy5hcHBseSh0aGlzLCBhcmd1bWVudHMpOyB9XG5cbmZ1bmN0aW9uIF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhzb3VyY2UsIGV4Y2x1ZGVkKSB7IGlmIChzb3VyY2UgPT0gbnVsbCkgcmV0dXJuIHt9OyB2YXIgdGFyZ2V0ID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2Uoc291cmNlLCBleGNsdWRlZCk7IHZhciBrZXksIGk7IGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7IHZhciBzb3VyY2VTeW1ib2xLZXlzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhzb3VyY2UpOyBmb3IgKGkgPSAwOyBpIDwgc291cmNlU3ltYm9sS2V5cy5sZW5ndGg7IGkrKykgeyBrZXkgPSBzb3VyY2VTeW1ib2xLZXlzW2ldOyBpZiAoZXhjbHVkZWQuaW5kZXhPZihrZXkpID49IDApIGNvbnRpbnVlOyBpZiAoIU9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGUuY2FsbChzb3VyY2UsIGtleSkpIGNvbnRpbnVlOyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gcmV0dXJuIHRhcmdldDsgfVxuXG5mdW5jdGlvbiBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShzb3VyY2UsIGV4Y2x1ZGVkKSB7IGlmIChzb3VyY2UgPT0gbnVsbCkgcmV0dXJuIHt9OyB2YXIgdGFyZ2V0ID0ge307IHZhciBzb3VyY2VLZXlzID0gT2JqZWN0LmtleXMoc291cmNlKTsgdmFyIGtleSwgaTsgZm9yIChpID0gMDsgaSA8IHNvdXJjZUtleXMubGVuZ3RoOyBpKyspIHsga2V5ID0gc291cmNlS2V5c1tpXTsgaWYgKGV4Y2x1ZGVkLmluZGV4T2Yoa2V5KSA+PSAwKSBjb250aW51ZTsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSByZXR1cm4gdGFyZ2V0OyB9XG5cbmZ1bmN0aW9uIF9zbGljZWRUb0FycmF5KGFyciwgaSkgeyByZXR1cm4gX2FycmF5V2l0aEhvbGVzKGFycikgfHwgX2l0ZXJhYmxlVG9BcnJheUxpbWl0KGFyciwgaSkgfHwgX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5KGFyciwgaSkgfHwgX25vbkl0ZXJhYmxlUmVzdCgpOyB9XG5cbmZ1bmN0aW9uIF9ub25JdGVyYWJsZVJlc3QoKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJJbnZhbGlkIGF0dGVtcHQgdG8gZGVzdHJ1Y3R1cmUgbm9uLWl0ZXJhYmxlIGluc3RhbmNlLlxcbkluIG9yZGVyIHRvIGJlIGl0ZXJhYmxlLCBub24tYXJyYXkgb2JqZWN0cyBtdXN0IGhhdmUgYSBbU3ltYm9sLml0ZXJhdG9yXSgpIG1ldGhvZC5cIik7IH1cblxuZnVuY3Rpb24gX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5KG8sIG1pbkxlbikgeyBpZiAoIW8pIHJldHVybjsgaWYgKHR5cGVvZiBvID09PSBcInN0cmluZ1wiKSByZXR1cm4gX2FycmF5TGlrZVRvQXJyYXkobywgbWluTGVuKTsgdmFyIG4gPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwobykuc2xpY2UoOCwgLTEpOyBpZiAobiA9PT0gXCJPYmplY3RcIiAmJiBvLmNvbnN0cnVjdG9yKSBuID0gby5jb25zdHJ1Y3Rvci5uYW1lOyBpZiAobiA9PT0gXCJNYXBcIiB8fCBuID09PSBcIlNldFwiKSByZXR1cm4gQXJyYXkuZnJvbShvKTsgaWYgKG4gPT09IFwiQXJndW1lbnRzXCIgfHwgL14oPzpVaXxJKW50KD86OHwxNnwzMikoPzpDbGFtcGVkKT9BcnJheSQvLnRlc3QobikpIHJldHVybiBfYXJyYXlMaWtlVG9BcnJheShvLCBtaW5MZW4pOyB9XG5cbmZ1bmN0aW9uIF9hcnJheUxpa2VUb0FycmF5KGFyciwgbGVuKSB7IGlmIChsZW4gPT0gbnVsbCB8fCBsZW4gPiBhcnIubGVuZ3RoKSBsZW4gPSBhcnIubGVuZ3RoOyBmb3IgKHZhciBpID0gMCwgYXJyMiA9IG5ldyBBcnJheShsZW4pOyBpIDwgbGVuOyBpKyspIHsgYXJyMltpXSA9IGFycltpXTsgfSByZXR1cm4gYXJyMjsgfVxuXG5mdW5jdGlvbiBfaXRlcmFibGVUb0FycmF5TGltaXQoYXJyLCBpKSB7IGlmICh0eXBlb2YgU3ltYm9sID09PSBcInVuZGVmaW5lZFwiIHx8ICEoU3ltYm9sLml0ZXJhdG9yIGluIE9iamVjdChhcnIpKSkgcmV0dXJuOyB2YXIgX2FyciA9IFtdOyB2YXIgX24gPSB0cnVlOyB2YXIgX2QgPSBmYWxzZTsgdmFyIF9lID0gdW5kZWZpbmVkOyB0cnkgeyBmb3IgKHZhciBfaSA9IGFycltTeW1ib2wuaXRlcmF0b3JdKCksIF9zOyAhKF9uID0gKF9zID0gX2kubmV4dCgpKS5kb25lKTsgX24gPSB0cnVlKSB7IF9hcnIucHVzaChfcy52YWx1ZSk7IGlmIChpICYmIF9hcnIubGVuZ3RoID09PSBpKSBicmVhazsgfSB9IGNhdGNoIChlcnIpIHsgX2QgPSB0cnVlOyBfZSA9IGVycjsgfSBmaW5hbGx5IHsgdHJ5IHsgaWYgKCFfbiAmJiBfaVtcInJldHVyblwiXSAhPSBudWxsKSBfaVtcInJldHVyblwiXSgpOyB9IGZpbmFsbHkgeyBpZiAoX2QpIHRocm93IF9lOyB9IH0gcmV0dXJuIF9hcnI7IH1cblxuZnVuY3Rpb24gX2FycmF5V2l0aEhvbGVzKGFycikgeyBpZiAoQXJyYXkuaXNBcnJheShhcnIpKSByZXR1cm4gYXJyOyB9XG5cbmZ1bmN0aW9uIG93bktleXMob2JqZWN0LCBlbnVtZXJhYmxlT25seSkgeyB2YXIga2V5cyA9IE9iamVjdC5rZXlzKG9iamVjdCk7IGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7IHZhciBzeW1ib2xzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhvYmplY3QpOyBpZiAoZW51bWVyYWJsZU9ubHkpIHN5bWJvbHMgPSBzeW1ib2xzLmZpbHRlcihmdW5jdGlvbiAoc3ltKSB7IHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iamVjdCwgc3ltKS5lbnVtZXJhYmxlOyB9KTsga2V5cy5wdXNoLmFwcGx5KGtleXMsIHN5bWJvbHMpOyB9IHJldHVybiBrZXlzOyB9XG5cbmZ1bmN0aW9uIF9vYmplY3RTcHJlYWQodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV0gIT0gbnVsbCA/IGFyZ3VtZW50c1tpXSA6IHt9OyBpZiAoaSAlIDIpIHsgb3duS2V5cyhPYmplY3Qoc291cmNlKSwgdHJ1ZSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7IF9kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgc291cmNlW2tleV0pOyB9KTsgfSBlbHNlIGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycykgeyBPYmplY3QuZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKHNvdXJjZSkpOyB9IGVsc2UgeyBvd25LZXlzKE9iamVjdChzb3VyY2UpKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHNvdXJjZSwga2V5KSk7IH0pOyB9IH0gcmV0dXJuIHRhcmdldDsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9XG5cbmZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvblwiKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBfc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpOyB9XG5cbmZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7IF9zZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fCBmdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkgeyBvLl9fcHJvdG9fXyA9IHA7IHJldHVybiBvOyB9OyByZXR1cm4gX3NldFByb3RvdHlwZU9mKG8sIHApOyB9XG5cbmZ1bmN0aW9uIF9jcmVhdGVTdXBlcihEZXJpdmVkKSB7IHZhciBoYXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0ID0gX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCgpOyByZXR1cm4gZnVuY3Rpb24gKCkgeyB2YXIgU3VwZXIgPSBfZ2V0UHJvdG90eXBlT2YoRGVyaXZlZCksIHJlc3VsdDsgaWYgKGhhc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QpIHsgdmFyIE5ld1RhcmdldCA9IF9nZXRQcm90b3R5cGVPZih0aGlzKS5jb25zdHJ1Y3RvcjsgcmVzdWx0ID0gUmVmbGVjdC5jb25zdHJ1Y3QoU3VwZXIsIGFyZ3VtZW50cywgTmV3VGFyZ2V0KTsgfSBlbHNlIHsgcmVzdWx0ID0gU3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKTsgfSByZXR1cm4gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgcmVzdWx0KTsgfTsgfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmIChjYWxsICYmIChfdHlwZW9mKGNhbGwpID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpKSB7IHJldHVybiBjYWxsOyB9IHJldHVybiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpOyB9XG5cbmZ1bmN0aW9uIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZikgeyBpZiAoc2VsZiA9PT0gdm9pZCAwKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gc2VsZjsgfVxuXG5mdW5jdGlvbiBfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KCkgeyBpZiAodHlwZW9mIFJlZmxlY3QgPT09IFwidW5kZWZpbmVkXCIgfHwgIVJlZmxlY3QuY29uc3RydWN0KSByZXR1cm4gZmFsc2U7IGlmIChSZWZsZWN0LmNvbnN0cnVjdC5zaGFtKSByZXR1cm4gZmFsc2U7IGlmICh0eXBlb2YgUHJveHkgPT09IFwiZnVuY3Rpb25cIikgcmV0dXJuIHRydWU7IHRyeSB7IERhdGUucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoUmVmbGVjdC5jb25zdHJ1Y3QoRGF0ZSwgW10sIGZ1bmN0aW9uICgpIHt9KSk7IHJldHVybiB0cnVlOyB9IGNhdGNoIChlKSB7IHJldHVybiBmYWxzZTsgfSB9XG5cbmZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7IF9nZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5nZXRQcm90b3R5cGVPZiA6IGZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7IHJldHVybiBvLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2Yobyk7IH07IHJldHVybiBfZ2V0UHJvdG90eXBlT2Yobyk7IH1cblxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkgeyBpZiAoa2V5IGluIG9iaikgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHsgdmFsdWU6IHZhbHVlLCBlbnVtZXJhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUsIHdyaXRhYmxlOiB0cnVlIH0pOyB9IGVsc2UgeyBvYmpba2V5XSA9IHZhbHVlOyB9IHJldHVybiBvYmo7IH1cblxuLy9cbi8vIERlZmluZSA8RHJhZ2dhYmxlPlxuLy9cbnZhciBEcmFnZ2FibGUgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzKERyYWdnYWJsZSwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgdmFyIF9zdXBlciA9IF9jcmVhdGVTdXBlcihEcmFnZ2FibGUpO1xuXG4gIF9jcmVhdGVDbGFzcyhEcmFnZ2FibGUsIG51bGwsIFt7XG4gICAga2V5OiBcImdldERlcml2ZWRTdGF0ZUZyb21Qcm9wc1wiLFxuICAgIC8vIFJlYWN0IDE2LjMrXG4gICAgLy8gQXJpdHkgKHByb3BzLCBzdGF0ZSlcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzKF9yZWYsIF9yZWYyKSB7XG4gICAgICB2YXIgcG9zaXRpb24gPSBfcmVmLnBvc2l0aW9uO1xuICAgICAgdmFyIHByZXZQcm9wc1Bvc2l0aW9uID0gX3JlZjIucHJldlByb3BzUG9zaXRpb247XG5cbiAgICAgIC8vIFNldCB4L3kgaWYgYSBuZXcgcG9zaXRpb24gaXMgcHJvdmlkZWQgaW4gcHJvcHMgdGhhdCBpcyBkaWZmZXJlbnQgdGhhbiB0aGUgcHJldmlvdXMuXG4gICAgICBpZiAocG9zaXRpb24gJiYgKCFwcmV2UHJvcHNQb3NpdGlvbiB8fCBwb3NpdGlvbi54ICE9PSBwcmV2UHJvcHNQb3NpdGlvbi54IHx8IHBvc2l0aW9uLnkgIT09IHByZXZQcm9wc1Bvc2l0aW9uLnkpKSB7XG4gICAgICAgICgwLCBfbG9nLmRlZmF1bHQpKCdEcmFnZ2FibGU6IGdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyAlaicsIHtcbiAgICAgICAgICBwb3NpdGlvbjogcG9zaXRpb24sXG4gICAgICAgICAgcHJldlByb3BzUG9zaXRpb246IHByZXZQcm9wc1Bvc2l0aW9uXG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIHg6IHBvc2l0aW9uLngsXG4gICAgICAgICAgeTogcG9zaXRpb24ueSxcbiAgICAgICAgICBwcmV2UHJvcHNQb3NpdGlvbjogX29iamVjdFNwcmVhZCh7fSwgcG9zaXRpb24pXG4gICAgICAgIH07XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgfV0pO1xuXG4gIGZ1bmN0aW9uIERyYWdnYWJsZShwcm9wc1xuICAvKjogRHJhZ2dhYmxlUHJvcHMqL1xuICApIHtcbiAgICB2YXIgX3RoaXM7XG5cbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgRHJhZ2dhYmxlKTtcblxuICAgIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgcHJvcHMpO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcIm9uRHJhZ1N0YXJ0XCIsIGZ1bmN0aW9uIChlLCBjb3JlRGF0YSkge1xuICAgICAgKDAsIF9sb2cuZGVmYXVsdCkoJ0RyYWdnYWJsZTogb25EcmFnU3RhcnQ6ICVqJywgY29yZURhdGEpOyAvLyBTaG9ydC1jaXJjdWl0IGlmIHVzZXIncyBjYWxsYmFjayBraWxsZWQgaXQuXG5cbiAgICAgIHZhciBzaG91bGRTdGFydCA9IF90aGlzLnByb3BzLm9uU3RhcnQoZSwgKDAsIF9wb3NpdGlvbkZucy5jcmVhdGVEcmFnZ2FibGVEYXRhKShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgY29yZURhdGEpKTsgLy8gS2lsbHMgc3RhcnQgZXZlbnQgb24gY29yZSBhcyB3ZWxsLCBzbyBtb3ZlIGhhbmRsZXJzIGFyZSBuZXZlciBib3VuZC5cblxuXG4gICAgICBpZiAoc2hvdWxkU3RhcnQgPT09IGZhbHNlKSByZXR1cm4gZmFsc2U7XG5cbiAgICAgIF90aGlzLnNldFN0YXRlKHtcbiAgICAgICAgZHJhZ2dpbmc6IHRydWUsXG4gICAgICAgIGRyYWdnZWQ6IHRydWVcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcIm9uRHJhZ1wiLCBmdW5jdGlvbiAoZSwgY29yZURhdGEpIHtcbiAgICAgIGlmICghX3RoaXMuc3RhdGUuZHJhZ2dpbmcpIHJldHVybiBmYWxzZTtcbiAgICAgICgwLCBfbG9nLmRlZmF1bHQpKCdEcmFnZ2FibGU6IG9uRHJhZzogJWonLCBjb3JlRGF0YSk7XG4gICAgICB2YXIgdWlEYXRhID0gKDAsIF9wb3NpdGlvbkZucy5jcmVhdGVEcmFnZ2FibGVEYXRhKShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgY29yZURhdGEpO1xuICAgICAgdmFyIG5ld1N0YXRlXG4gICAgICAvKjogJFNoYXBlPERyYWdnYWJsZVN0YXRlPiovXG4gICAgICA9IHtcbiAgICAgICAgeDogdWlEYXRhLngsXG4gICAgICAgIHk6IHVpRGF0YS55XG4gICAgICB9OyAvLyBLZWVwIHdpdGhpbiBib3VuZHMuXG5cbiAgICAgIGlmIChfdGhpcy5wcm9wcy5ib3VuZHMpIHtcbiAgICAgICAgLy8gU2F2ZSBvcmlnaW5hbCB4IGFuZCB5LlxuICAgICAgICB2YXIgeCA9IG5ld1N0YXRlLngsXG4gICAgICAgICAgICB5ID0gbmV3U3RhdGUueTsgLy8gQWRkIHNsYWNrIHRvIHRoZSB2YWx1ZXMgdXNlZCB0byBjYWxjdWxhdGUgYm91bmQgcG9zaXRpb24uIFRoaXMgd2lsbCBlbnN1cmUgdGhhdCBpZlxuICAgICAgICAvLyB3ZSBzdGFydCByZW1vdmluZyBzbGFjaywgdGhlIGVsZW1lbnQgd29uJ3QgcmVhY3QgdG8gaXQgcmlnaHQgYXdheSB1bnRpbCBpdCdzIGJlZW5cbiAgICAgICAgLy8gY29tcGxldGVseSByZW1vdmVkLlxuXG4gICAgICAgIG5ld1N0YXRlLnggKz0gX3RoaXMuc3RhdGUuc2xhY2tYO1xuICAgICAgICBuZXdTdGF0ZS55ICs9IF90aGlzLnN0YXRlLnNsYWNrWTsgLy8gR2V0IGJvdW5kIHBvc2l0aW9uLiBUaGlzIHdpbGwgY2VpbC9mbG9vciB0aGUgeCBhbmQgeSB3aXRoaW4gdGhlIGJvdW5kYXJpZXMuXG5cbiAgICAgICAgdmFyIF9nZXRCb3VuZFBvc2l0aW9uID0gKDAsIF9wb3NpdGlvbkZucy5nZXRCb3VuZFBvc2l0aW9uKShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgbmV3U3RhdGUueCwgbmV3U3RhdGUueSksXG4gICAgICAgICAgICBfZ2V0Qm91bmRQb3NpdGlvbjIgPSBfc2xpY2VkVG9BcnJheShfZ2V0Qm91bmRQb3NpdGlvbiwgMiksXG4gICAgICAgICAgICBuZXdTdGF0ZVggPSBfZ2V0Qm91bmRQb3NpdGlvbjJbMF0sXG4gICAgICAgICAgICBuZXdTdGF0ZVkgPSBfZ2V0Qm91bmRQb3NpdGlvbjJbMV07XG5cbiAgICAgICAgbmV3U3RhdGUueCA9IG5ld1N0YXRlWDtcbiAgICAgICAgbmV3U3RhdGUueSA9IG5ld1N0YXRlWTsgLy8gUmVjYWxjdWxhdGUgc2xhY2sgYnkgbm90aW5nIGhvdyBtdWNoIHdhcyBzaGF2ZWQgYnkgdGhlIGJvdW5kUG9zaXRpb24gaGFuZGxlci5cblxuICAgICAgICBuZXdTdGF0ZS5zbGFja1ggPSBfdGhpcy5zdGF0ZS5zbGFja1ggKyAoeCAtIG5ld1N0YXRlLngpO1xuICAgICAgICBuZXdTdGF0ZS5zbGFja1kgPSBfdGhpcy5zdGF0ZS5zbGFja1kgKyAoeSAtIG5ld1N0YXRlLnkpOyAvLyBVcGRhdGUgdGhlIGV2ZW50IHdlIGZpcmUgdG8gcmVmbGVjdCB3aGF0IHJlYWxseSBoYXBwZW5lZCBhZnRlciBib3VuZHMgdG9vayBlZmZlY3QuXG5cbiAgICAgICAgdWlEYXRhLnggPSBuZXdTdGF0ZS54O1xuICAgICAgICB1aURhdGEueSA9IG5ld1N0YXRlLnk7XG4gICAgICAgIHVpRGF0YS5kZWx0YVggPSBuZXdTdGF0ZS54IC0gX3RoaXMuc3RhdGUueDtcbiAgICAgICAgdWlEYXRhLmRlbHRhWSA9IG5ld1N0YXRlLnkgLSBfdGhpcy5zdGF0ZS55O1xuICAgICAgfSAvLyBTaG9ydC1jaXJjdWl0IGlmIHVzZXIncyBjYWxsYmFjayBraWxsZWQgaXQuXG5cblxuICAgICAgdmFyIHNob3VsZFVwZGF0ZSA9IF90aGlzLnByb3BzLm9uRHJhZyhlLCB1aURhdGEpO1xuXG4gICAgICBpZiAoc2hvdWxkVXBkYXRlID09PSBmYWxzZSkgcmV0dXJuIGZhbHNlO1xuXG4gICAgICBfdGhpcy5zZXRTdGF0ZShuZXdTdGF0ZSk7XG4gICAgfSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIFwib25EcmFnU3RvcFwiLCBmdW5jdGlvbiAoZSwgY29yZURhdGEpIHtcbiAgICAgIGlmICghX3RoaXMuc3RhdGUuZHJhZ2dpbmcpIHJldHVybiBmYWxzZTsgLy8gU2hvcnQtY2lyY3VpdCBpZiB1c2VyJ3MgY2FsbGJhY2sga2lsbGVkIGl0LlxuXG4gICAgICB2YXIgc2hvdWxkQ29udGludWUgPSBfdGhpcy5wcm9wcy5vblN0b3AoZSwgKDAsIF9wb3NpdGlvbkZucy5jcmVhdGVEcmFnZ2FibGVEYXRhKShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgY29yZURhdGEpKTtcblxuICAgICAgaWYgKHNob3VsZENvbnRpbnVlID09PSBmYWxzZSkgcmV0dXJuIGZhbHNlO1xuICAgICAgKDAsIF9sb2cuZGVmYXVsdCkoJ0RyYWdnYWJsZTogb25EcmFnU3RvcDogJWonLCBjb3JlRGF0YSk7XG4gICAgICB2YXIgbmV3U3RhdGVcbiAgICAgIC8qOiAkU2hhcGU8RHJhZ2dhYmxlU3RhdGU+Ki9cbiAgICAgID0ge1xuICAgICAgICBkcmFnZ2luZzogZmFsc2UsXG4gICAgICAgIHNsYWNrWDogMCxcbiAgICAgICAgc2xhY2tZOiAwXG4gICAgICB9OyAvLyBJZiB0aGlzIGlzIGEgY29udHJvbGxlZCBjb21wb25lbnQsIHRoZSByZXN1bHQgb2YgdGhpcyBvcGVyYXRpb24gd2lsbCBiZSB0b1xuICAgICAgLy8gcmV2ZXJ0IGJhY2sgdG8gdGhlIG9sZCBwb3NpdGlvbi4gV2UgZXhwZWN0IGEgaGFuZGxlciBvbiBgb25EcmFnU3RvcGAsIGF0IHRoZSBsZWFzdC5cblxuICAgICAgdmFyIGNvbnRyb2xsZWQgPSBCb29sZWFuKF90aGlzLnByb3BzLnBvc2l0aW9uKTtcblxuICAgICAgaWYgKGNvbnRyb2xsZWQpIHtcbiAgICAgICAgdmFyIF90aGlzJHByb3BzJHBvc2l0aW9uID0gX3RoaXMucHJvcHMucG9zaXRpb24sXG4gICAgICAgICAgICB4ID0gX3RoaXMkcHJvcHMkcG9zaXRpb24ueCxcbiAgICAgICAgICAgIHkgPSBfdGhpcyRwcm9wcyRwb3NpdGlvbi55O1xuICAgICAgICBuZXdTdGF0ZS54ID0geDtcbiAgICAgICAgbmV3U3RhdGUueSA9IHk7XG4gICAgICB9XG5cbiAgICAgIF90aGlzLnNldFN0YXRlKG5ld1N0YXRlKTtcbiAgICB9KTtcblxuICAgIF90aGlzLnN0YXRlID0ge1xuICAgICAgLy8gV2hldGhlciBvciBub3Qgd2UgYXJlIGN1cnJlbnRseSBkcmFnZ2luZy5cbiAgICAgIGRyYWdnaW5nOiBmYWxzZSxcbiAgICAgIC8vIFdoZXRoZXIgb3Igbm90IHdlIGhhdmUgYmVlbiBkcmFnZ2VkIGJlZm9yZS5cbiAgICAgIGRyYWdnZWQ6IGZhbHNlLFxuICAgICAgLy8gQ3VycmVudCB0cmFuc2Zvcm0geCBhbmQgeS5cbiAgICAgIHg6IHByb3BzLnBvc2l0aW9uID8gcHJvcHMucG9zaXRpb24ueCA6IHByb3BzLmRlZmF1bHRQb3NpdGlvbi54LFxuICAgICAgeTogcHJvcHMucG9zaXRpb24gPyBwcm9wcy5wb3NpdGlvbi55IDogcHJvcHMuZGVmYXVsdFBvc2l0aW9uLnksXG4gICAgICBwcmV2UHJvcHNQb3NpdGlvbjogX29iamVjdFNwcmVhZCh7fSwgcHJvcHMucG9zaXRpb24pLFxuICAgICAgLy8gVXNlZCBmb3IgY29tcGVuc2F0aW5nIGZvciBvdXQtb2YtYm91bmRzIGRyYWdzXG4gICAgICBzbGFja1g6IDAsXG4gICAgICBzbGFja1k6IDAsXG4gICAgICAvLyBDYW4gb25seSBkZXRlcm1pbmUgaWYgU1ZHIGFmdGVyIG1vdW50aW5nXG4gICAgICBpc0VsZW1lbnRTVkc6IGZhbHNlXG4gICAgfTtcblxuICAgIGlmIChwcm9wcy5wb3NpdGlvbiAmJiAhKHByb3BzLm9uRHJhZyB8fCBwcm9wcy5vblN0b3ApKSB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uc29sZVxuICAgICAgY29uc29sZS53YXJuKCdBIGBwb3NpdGlvbmAgd2FzIGFwcGxpZWQgdG8gdGhpcyA8RHJhZ2dhYmxlPiwgd2l0aG91dCBkcmFnIGhhbmRsZXJzLiBUaGlzIHdpbGwgbWFrZSB0aGlzICcgKyAnY29tcG9uZW50IGVmZmVjdGl2ZWx5IHVuZHJhZ2dhYmxlLiBQbGVhc2UgYXR0YWNoIGBvbkRyYWdgIG9yIGBvblN0b3BgIGhhbmRsZXJzIHNvIHlvdSBjYW4gYWRqdXN0IHRoZSAnICsgJ2Bwb3NpdGlvbmAgb2YgdGhpcyBlbGVtZW50LicpO1xuICAgIH1cblxuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhEcmFnZ2FibGUsIFt7XG4gICAga2V5OiBcImNvbXBvbmVudERpZE1vdW50XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgICAgLy8gQ2hlY2sgdG8gc2VlIGlmIHRoZSBlbGVtZW50IHBhc3NlZCBpcyBhbiBpbnN0YW5jZW9mIFNWR0VsZW1lbnRcbiAgICAgIGlmICh0eXBlb2Ygd2luZG93LlNWR0VsZW1lbnQgIT09ICd1bmRlZmluZWQnICYmIHRoaXMuZmluZERPTU5vZGUoKSBpbnN0YW5jZW9mIHdpbmRvdy5TVkdFbGVtZW50KSB7XG4gICAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgIGlzRWxlbWVudFNWRzogdHJ1ZVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiY29tcG9uZW50V2lsbFVubW91bnRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgZHJhZ2dpbmc6IGZhbHNlXG4gICAgICB9KTsgLy8gcHJldmVudHMgaW52YXJpYW50IGlmIHVubW91bnRlZCB3aGlsZSBkcmFnZ2luZ1xuICAgIH0gLy8gUmVhY3QgU3RyaWN0IE1vZGUgY29tcGF0aWJpbGl0eTogaWYgYG5vZGVSZWZgIGlzIHBhc3NlZCwgd2Ugd2lsbCB1c2UgaXQgaW5zdGVhZCBvZiB0cnlpbmcgdG8gZmluZFxuICAgIC8vIHRoZSB1bmRlcmx5aW5nIERPTSBub2RlIG91cnNlbHZlcy4gU2VlIHRoZSBSRUFETUUgZm9yIG1vcmUgaW5mb3JtYXRpb24uXG5cbiAgfSwge1xuICAgIGtleTogXCJmaW5kRE9NTm9kZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBmaW5kRE9NTm9kZSgpXG4gICAgLyo6ID9IVE1MRWxlbWVudCovXG4gICAge1xuICAgICAgcmV0dXJuIHRoaXMucHJvcHMubm9kZVJlZiA/IHRoaXMucHJvcHMubm9kZVJlZi5jdXJyZW50IDogX3JlYWN0RG9tLmRlZmF1bHQuZmluZERPTU5vZGUodGhpcyk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInJlbmRlclwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKVxuICAgIC8qOiBSZWFjdEVsZW1lbnQ8YW55PiovXG4gICAge1xuICAgICAgdmFyIF9jbGFzc05hbWVzO1xuXG4gICAgICB2YXIgX3RoaXMkcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICAgIGF4aXMgPSBfdGhpcyRwcm9wcy5heGlzLFxuICAgICAgICAgIGJvdW5kcyA9IF90aGlzJHByb3BzLmJvdW5kcyxcbiAgICAgICAgICBjaGlsZHJlbiA9IF90aGlzJHByb3BzLmNoaWxkcmVuLFxuICAgICAgICAgIGRlZmF1bHRQb3NpdGlvbiA9IF90aGlzJHByb3BzLmRlZmF1bHRQb3NpdGlvbixcbiAgICAgICAgICBkZWZhdWx0Q2xhc3NOYW1lID0gX3RoaXMkcHJvcHMuZGVmYXVsdENsYXNzTmFtZSxcbiAgICAgICAgICBkZWZhdWx0Q2xhc3NOYW1lRHJhZ2dpbmcgPSBfdGhpcyRwcm9wcy5kZWZhdWx0Q2xhc3NOYW1lRHJhZ2dpbmcsXG4gICAgICAgICAgZGVmYXVsdENsYXNzTmFtZURyYWdnZWQgPSBfdGhpcyRwcm9wcy5kZWZhdWx0Q2xhc3NOYW1lRHJhZ2dlZCxcbiAgICAgICAgICBwb3NpdGlvbiA9IF90aGlzJHByb3BzLnBvc2l0aW9uLFxuICAgICAgICAgIHBvc2l0aW9uT2Zmc2V0ID0gX3RoaXMkcHJvcHMucG9zaXRpb25PZmZzZXQsXG4gICAgICAgICAgc2NhbGUgPSBfdGhpcyRwcm9wcy5zY2FsZSxcbiAgICAgICAgICBkcmFnZ2FibGVDb3JlUHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMoX3RoaXMkcHJvcHMsIFtcImF4aXNcIiwgXCJib3VuZHNcIiwgXCJjaGlsZHJlblwiLCBcImRlZmF1bHRQb3NpdGlvblwiLCBcImRlZmF1bHRDbGFzc05hbWVcIiwgXCJkZWZhdWx0Q2xhc3NOYW1lRHJhZ2dpbmdcIiwgXCJkZWZhdWx0Q2xhc3NOYW1lRHJhZ2dlZFwiLCBcInBvc2l0aW9uXCIsIFwicG9zaXRpb25PZmZzZXRcIiwgXCJzY2FsZVwiXSk7XG5cbiAgICAgIHZhciBzdHlsZSA9IHt9O1xuICAgICAgdmFyIHN2Z1RyYW5zZm9ybSA9IG51bGw7IC8vIElmIHRoaXMgaXMgY29udHJvbGxlZCwgd2UgZG9uJ3Qgd2FudCB0byBtb3ZlIGl0IC0gdW5sZXNzIGl0J3MgZHJhZ2dpbmcuXG5cbiAgICAgIHZhciBjb250cm9sbGVkID0gQm9vbGVhbihwb3NpdGlvbik7XG4gICAgICB2YXIgZHJhZ2dhYmxlID0gIWNvbnRyb2xsZWQgfHwgdGhpcy5zdGF0ZS5kcmFnZ2luZztcbiAgICAgIHZhciB2YWxpZFBvc2l0aW9uID0gcG9zaXRpb24gfHwgZGVmYXVsdFBvc2l0aW9uO1xuICAgICAgdmFyIHRyYW5zZm9ybU9wdHMgPSB7XG4gICAgICAgIC8vIFNldCBsZWZ0IGlmIGhvcml6b250YWwgZHJhZyBpcyBlbmFibGVkXG4gICAgICAgIHg6ICgwLCBfcG9zaXRpb25GbnMuY2FuRHJhZ1gpKHRoaXMpICYmIGRyYWdnYWJsZSA/IHRoaXMuc3RhdGUueCA6IHZhbGlkUG9zaXRpb24ueCxcbiAgICAgICAgLy8gU2V0IHRvcCBpZiB2ZXJ0aWNhbCBkcmFnIGlzIGVuYWJsZWRcbiAgICAgICAgeTogKDAsIF9wb3NpdGlvbkZucy5jYW5EcmFnWSkodGhpcykgJiYgZHJhZ2dhYmxlID8gdGhpcy5zdGF0ZS55IDogdmFsaWRQb3NpdGlvbi55XG4gICAgICB9OyAvLyBJZiB0aGlzIGVsZW1lbnQgd2FzIFNWRywgd2UgdXNlIHRoZSBgdHJhbnNmb3JtYCBhdHRyaWJ1dGUuXG5cbiAgICAgIGlmICh0aGlzLnN0YXRlLmlzRWxlbWVudFNWRykge1xuICAgICAgICBzdmdUcmFuc2Zvcm0gPSAoMCwgX2RvbUZucy5jcmVhdGVTVkdUcmFuc2Zvcm0pKHRyYW5zZm9ybU9wdHMsIHBvc2l0aW9uT2Zmc2V0KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIEFkZCBhIENTUyB0cmFuc2Zvcm0gdG8gbW92ZSB0aGUgZWxlbWVudCBhcm91bmQuIFRoaXMgYWxsb3dzIHVzIHRvIG1vdmUgdGhlIGVsZW1lbnQgYXJvdW5kXG4gICAgICAgIC8vIHdpdGhvdXQgd29ycnlpbmcgYWJvdXQgd2hldGhlciBvciBub3QgaXQgaXMgcmVsYXRpdmVseSBvciBhYnNvbHV0ZWx5IHBvc2l0aW9uZWQuXG4gICAgICAgIC8vIElmIHRoZSBpdGVtIHlvdSBhcmUgZHJhZ2dpbmcgYWxyZWFkeSBoYXMgYSB0cmFuc2Zvcm0gc2V0LCB3cmFwIGl0IGluIGEgPHNwYW4+IHNvIDxEcmFnZ2FibGU+XG4gICAgICAgIC8vIGhhcyBhIGNsZWFuIHNsYXRlLlxuICAgICAgICBzdHlsZSA9ICgwLCBfZG9tRm5zLmNyZWF0ZUNTU1RyYW5zZm9ybSkodHJhbnNmb3JtT3B0cywgcG9zaXRpb25PZmZzZXQpO1xuICAgICAgfSAvLyBNYXJrIHdpdGggY2xhc3Mgd2hpbGUgZHJhZ2dpbmdcblxuXG4gICAgICB2YXIgY2xhc3NOYW1lID0gKDAsIF9jbGFzc25hbWVzLmRlZmF1bHQpKGNoaWxkcmVuLnByb3BzLmNsYXNzTmFtZSB8fCAnJywgZGVmYXVsdENsYXNzTmFtZSwgKF9jbGFzc05hbWVzID0ge30sIF9kZWZpbmVQcm9wZXJ0eShfY2xhc3NOYW1lcywgZGVmYXVsdENsYXNzTmFtZURyYWdnaW5nLCB0aGlzLnN0YXRlLmRyYWdnaW5nKSwgX2RlZmluZVByb3BlcnR5KF9jbGFzc05hbWVzLCBkZWZhdWx0Q2xhc3NOYW1lRHJhZ2dlZCwgdGhpcy5zdGF0ZS5kcmFnZ2VkKSwgX2NsYXNzTmFtZXMpKTsgLy8gUmV1c2UgdGhlIGNoaWxkIHByb3ZpZGVkXG4gICAgICAvLyBUaGlzIG1ha2VzIGl0IGZsZXhpYmxlIHRvIHVzZSB3aGF0ZXZlciBlbGVtZW50IGlzIHdhbnRlZCAoZGl2LCB1bCwgZXRjKVxuXG4gICAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoX0RyYWdnYWJsZUNvcmUuZGVmYXVsdCwgX2V4dGVuZHMoe30sIGRyYWdnYWJsZUNvcmVQcm9wcywge1xuICAgICAgICBvblN0YXJ0OiB0aGlzLm9uRHJhZ1N0YXJ0LFxuICAgICAgICBvbkRyYWc6IHRoaXMub25EcmFnLFxuICAgICAgICBvblN0b3A6IHRoaXMub25EcmFnU3RvcFxuICAgICAgfSksIFJlYWN0LmNsb25lRWxlbWVudChSZWFjdC5DaGlsZHJlbi5vbmx5KGNoaWxkcmVuKSwge1xuICAgICAgICBjbGFzc05hbWU6IGNsYXNzTmFtZSxcbiAgICAgICAgc3R5bGU6IF9vYmplY3RTcHJlYWQoX29iamVjdFNwcmVhZCh7fSwgY2hpbGRyZW4ucHJvcHMuc3R5bGUpLCBzdHlsZSksXG4gICAgICAgIHRyYW5zZm9ybTogc3ZnVHJhbnNmb3JtXG4gICAgICB9KSk7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIERyYWdnYWJsZTtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gRHJhZ2dhYmxlO1xuXG5fZGVmaW5lUHJvcGVydHkoRHJhZ2dhYmxlLCBcImRpc3BsYXlOYW1lXCIsICdEcmFnZ2FibGUnKTtcblxuX2RlZmluZVByb3BlcnR5KERyYWdnYWJsZSwgXCJwcm9wVHlwZXNcIiwgX29iamVjdFNwcmVhZChfb2JqZWN0U3ByZWFkKHt9LCBfRHJhZ2dhYmxlQ29yZS5kZWZhdWx0LnByb3BUeXBlcyksIHt9LCB7XG4gIC8qKlxuICAgKiBgYXhpc2AgZGV0ZXJtaW5lcyB3aGljaCBheGlzIHRoZSBkcmFnZ2FibGUgY2FuIG1vdmUuXG4gICAqXG4gICAqICBOb3RlIHRoYXQgYWxsIGNhbGxiYWNrcyB3aWxsIHN0aWxsIHJldHVybiBkYXRhIGFzIG5vcm1hbC4gVGhpcyBvbmx5XG4gICAqICBjb250cm9scyBmbHVzaGluZyB0byB0aGUgRE9NLlxuICAgKlxuICAgKiAnYm90aCcgYWxsb3dzIG1vdmVtZW50IGhvcml6b250YWxseSBhbmQgdmVydGljYWxseS5cbiAgICogJ3gnIGxpbWl0cyBtb3ZlbWVudCB0byBob3Jpem9udGFsIGF4aXMuXG4gICAqICd5JyBsaW1pdHMgbW92ZW1lbnQgdG8gdmVydGljYWwgYXhpcy5cbiAgICogJ25vbmUnIGxpbWl0cyBhbGwgbW92ZW1lbnQuXG4gICAqXG4gICAqIERlZmF1bHRzIHRvICdib3RoJy5cbiAgICovXG4gIGF4aXM6IF9wcm9wVHlwZXMuZGVmYXVsdC5vbmVPZihbJ2JvdGgnLCAneCcsICd5JywgJ25vbmUnXSksXG5cbiAgLyoqXG4gICAqIGBib3VuZHNgIGRldGVybWluZXMgdGhlIHJhbmdlIG9mIG1vdmVtZW50IGF2YWlsYWJsZSB0byB0aGUgZWxlbWVudC5cbiAgICogQXZhaWxhYmxlIHZhbHVlcyBhcmU6XG4gICAqXG4gICAqICdwYXJlbnQnIHJlc3RyaWN0cyBtb3ZlbWVudCB3aXRoaW4gdGhlIERyYWdnYWJsZSdzIHBhcmVudCBub2RlLlxuICAgKlxuICAgKiBBbHRlcm5hdGl2ZWx5LCBwYXNzIGFuIG9iamVjdCB3aXRoIHRoZSBmb2xsb3dpbmcgcHJvcGVydGllcywgYWxsIG9mIHdoaWNoIGFyZSBvcHRpb25hbDpcbiAgICpcbiAgICoge2xlZnQ6IExFRlRfQk9VTkQsIHJpZ2h0OiBSSUdIVF9CT1VORCwgYm90dG9tOiBCT1RUT01fQk9VTkQsIHRvcDogVE9QX0JPVU5EfVxuICAgKlxuICAgKiBBbGwgdmFsdWVzIGFyZSBpbiBweC5cbiAgICpcbiAgICogRXhhbXBsZTpcbiAgICpcbiAgICogYGBganN4XG4gICAqICAgbGV0IEFwcCA9IFJlYWN0LmNyZWF0ZUNsYXNzKHtcbiAgICogICAgICAgcmVuZGVyOiBmdW5jdGlvbiAoKSB7XG4gICAqICAgICAgICAgcmV0dXJuIChcbiAgICogICAgICAgICAgICA8RHJhZ2dhYmxlIGJvdW5kcz17e3JpZ2h0OiAzMDAsIGJvdHRvbTogMzAwfX0+XG4gICAqICAgICAgICAgICAgICA8ZGl2PkNvbnRlbnQ8L2Rpdj5cbiAgICogICAgICAgICAgIDwvRHJhZ2dhYmxlPlxuICAgKiAgICAgICAgICk7XG4gICAqICAgICAgIH1cbiAgICogICB9KTtcbiAgICogYGBgXG4gICAqL1xuICBib3VuZHM6IF9wcm9wVHlwZXMuZGVmYXVsdC5vbmVPZlR5cGUoW19wcm9wVHlwZXMuZGVmYXVsdC5zaGFwZSh7XG4gICAgbGVmdDogX3Byb3BUeXBlcy5kZWZhdWx0Lm51bWJlcixcbiAgICByaWdodDogX3Byb3BUeXBlcy5kZWZhdWx0Lm51bWJlcixcbiAgICB0b3A6IF9wcm9wVHlwZXMuZGVmYXVsdC5udW1iZXIsXG4gICAgYm90dG9tOiBfcHJvcFR5cGVzLmRlZmF1bHQubnVtYmVyXG4gIH0pLCBfcHJvcFR5cGVzLmRlZmF1bHQuc3RyaW5nLCBfcHJvcFR5cGVzLmRlZmF1bHQub25lT2YoW2ZhbHNlXSldKSxcbiAgZGVmYXVsdENsYXNzTmFtZTogX3Byb3BUeXBlcy5kZWZhdWx0LnN0cmluZyxcbiAgZGVmYXVsdENsYXNzTmFtZURyYWdnaW5nOiBfcHJvcFR5cGVzLmRlZmF1bHQuc3RyaW5nLFxuICBkZWZhdWx0Q2xhc3NOYW1lRHJhZ2dlZDogX3Byb3BUeXBlcy5kZWZhdWx0LnN0cmluZyxcblxuICAvKipcbiAgICogYGRlZmF1bHRQb3NpdGlvbmAgc3BlY2lmaWVzIHRoZSB4IGFuZCB5IHRoYXQgdGhlIGRyYWdnZWQgaXRlbSBzaG91bGQgc3RhcnQgYXRcbiAgICpcbiAgICogRXhhbXBsZTpcbiAgICpcbiAgICogYGBganN4XG4gICAqICAgICAgbGV0IEFwcCA9IFJlYWN0LmNyZWF0ZUNsYXNzKHtcbiAgICogICAgICAgICAgcmVuZGVyOiBmdW5jdGlvbiAoKSB7XG4gICAqICAgICAgICAgICAgICByZXR1cm4gKFxuICAgKiAgICAgICAgICAgICAgICAgIDxEcmFnZ2FibGUgZGVmYXVsdFBvc2l0aW9uPXt7eDogMjUsIHk6IDI1fX0+XG4gICAqICAgICAgICAgICAgICAgICAgICAgIDxkaXY+SSBzdGFydCB3aXRoIHRyYW5zZm9ybVg6IDI1cHggYW5kIHRyYW5zZm9ybVk6IDI1cHg7PC9kaXY+XG4gICAqICAgICAgICAgICAgICAgICAgPC9EcmFnZ2FibGU+XG4gICAqICAgICAgICAgICAgICApO1xuICAgKiAgICAgICAgICB9XG4gICAqICAgICAgfSk7XG4gICAqIGBgYFxuICAgKi9cbiAgZGVmYXVsdFBvc2l0aW9uOiBfcHJvcFR5cGVzLmRlZmF1bHQuc2hhcGUoe1xuICAgIHg6IF9wcm9wVHlwZXMuZGVmYXVsdC5udW1iZXIsXG4gICAgeTogX3Byb3BUeXBlcy5kZWZhdWx0Lm51bWJlclxuICB9KSxcbiAgcG9zaXRpb25PZmZzZXQ6IF9wcm9wVHlwZXMuZGVmYXVsdC5zaGFwZSh7XG4gICAgeDogX3Byb3BUeXBlcy5kZWZhdWx0Lm9uZU9mVHlwZShbX3Byb3BUeXBlcy5kZWZhdWx0Lm51bWJlciwgX3Byb3BUeXBlcy5kZWZhdWx0LnN0cmluZ10pLFxuICAgIHk6IF9wcm9wVHlwZXMuZGVmYXVsdC5vbmVPZlR5cGUoW19wcm9wVHlwZXMuZGVmYXVsdC5udW1iZXIsIF9wcm9wVHlwZXMuZGVmYXVsdC5zdHJpbmddKVxuICB9KSxcblxuICAvKipcbiAgICogYHBvc2l0aW9uYCwgaWYgcHJlc2VudCwgZGVmaW5lcyB0aGUgY3VycmVudCBwb3NpdGlvbiBvZiB0aGUgZWxlbWVudC5cbiAgICpcbiAgICogIFRoaXMgaXMgc2ltaWxhciB0byBob3cgZm9ybSBlbGVtZW50cyBpbiBSZWFjdCB3b3JrIC0gaWYgbm8gYHBvc2l0aW9uYCBpcyBzdXBwbGllZCwgdGhlIGNvbXBvbmVudFxuICAgKiAgaXMgdW5jb250cm9sbGVkLlxuICAgKlxuICAgKiBFeGFtcGxlOlxuICAgKlxuICAgKiBgYGBqc3hcbiAgICogICAgICBsZXQgQXBwID0gUmVhY3QuY3JlYXRlQ2xhc3Moe1xuICAgKiAgICAgICAgICByZW5kZXI6IGZ1bmN0aW9uICgpIHtcbiAgICogICAgICAgICAgICAgIHJldHVybiAoXG4gICAqICAgICAgICAgICAgICAgICAgPERyYWdnYWJsZSBwb3NpdGlvbj17e3g6IDI1LCB5OiAyNX19PlxuICAgKiAgICAgICAgICAgICAgICAgICAgICA8ZGl2Pkkgc3RhcnQgd2l0aCB0cmFuc2Zvcm1YOiAyNXB4IGFuZCB0cmFuc2Zvcm1ZOiAyNXB4OzwvZGl2PlxuICAgKiAgICAgICAgICAgICAgICAgIDwvRHJhZ2dhYmxlPlxuICAgKiAgICAgICAgICAgICAgKTtcbiAgICogICAgICAgICAgfVxuICAgKiAgICAgIH0pO1xuICAgKiBgYGBcbiAgICovXG4gIHBvc2l0aW9uOiBfcHJvcFR5cGVzLmRlZmF1bHQuc2hhcGUoe1xuICAgIHg6IF9wcm9wVHlwZXMuZGVmYXVsdC5udW1iZXIsXG4gICAgeTogX3Byb3BUeXBlcy5kZWZhdWx0Lm51bWJlclxuICB9KSxcblxuICAvKipcbiAgICogVGhlc2UgcHJvcGVydGllcyBzaG91bGQgYmUgZGVmaW5lZCBvbiB0aGUgY2hpbGQsIG5vdCBoZXJlLlxuICAgKi9cbiAgY2xhc3NOYW1lOiBfc2hpbXMuZG9udFNldE1lLFxuICBzdHlsZTogX3NoaW1zLmRvbnRTZXRNZSxcbiAgdHJhbnNmb3JtOiBfc2hpbXMuZG9udFNldE1lXG59KSk7XG5cbl9kZWZpbmVQcm9wZXJ0eShEcmFnZ2FibGUsIFwiZGVmYXVsdFByb3BzXCIsIF9vYmplY3RTcHJlYWQoX29iamVjdFNwcmVhZCh7fSwgX0RyYWdnYWJsZUNvcmUuZGVmYXVsdC5kZWZhdWx0UHJvcHMpLCB7fSwge1xuICBheGlzOiAnYm90aCcsXG4gIGJvdW5kczogZmFsc2UsXG4gIGRlZmF1bHRDbGFzc05hbWU6ICdyZWFjdC1kcmFnZ2FibGUnLFxuICBkZWZhdWx0Q2xhc3NOYW1lRHJhZ2dpbmc6ICdyZWFjdC1kcmFnZ2FibGUtZHJhZ2dpbmcnLFxuICBkZWZhdWx0Q2xhc3NOYW1lRHJhZ2dlZDogJ3JlYWN0LWRyYWdnYWJsZS1kcmFnZ2VkJyxcbiAgZGVmYXVsdFBvc2l0aW9uOiB7XG4gICAgeDogMCxcbiAgICB5OiAwXG4gIH0sXG4gIHBvc2l0aW9uOiBudWxsLFxuICBzY2FsZTogMVxufSkpOyIsIi8qIVxuICBDb3B5cmlnaHQgKGMpIDIwMTcgSmVkIFdhdHNvbi5cbiAgTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlIChNSVQpLCBzZWVcbiAgaHR0cDovL2plZHdhdHNvbi5naXRodWIuaW8vY2xhc3NuYW1lc1xuKi9cbi8qIGdsb2JhbCBkZWZpbmUgKi9cblxuKGZ1bmN0aW9uICgpIHtcblx0J3VzZSBzdHJpY3QnO1xuXG5cdHZhciBoYXNPd24gPSB7fS5oYXNPd25Qcm9wZXJ0eTtcblxuXHRmdW5jdGlvbiBjbGFzc05hbWVzICgpIHtcblx0XHR2YXIgY2xhc3NlcyA9IFtdO1xuXG5cdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcblx0XHRcdHZhciBhcmcgPSBhcmd1bWVudHNbaV07XG5cdFx0XHRpZiAoIWFyZykgY29udGludWU7XG5cblx0XHRcdHZhciBhcmdUeXBlID0gdHlwZW9mIGFyZztcblxuXHRcdFx0aWYgKGFyZ1R5cGUgPT09ICdzdHJpbmcnIHx8IGFyZ1R5cGUgPT09ICdudW1iZXInKSB7XG5cdFx0XHRcdGNsYXNzZXMucHVzaChhcmcpO1xuXHRcdFx0fSBlbHNlIGlmIChBcnJheS5pc0FycmF5KGFyZykgJiYgYXJnLmxlbmd0aCkge1xuXHRcdFx0XHR2YXIgaW5uZXIgPSBjbGFzc05hbWVzLmFwcGx5KG51bGwsIGFyZyk7XG5cdFx0XHRcdGlmIChpbm5lcikge1xuXHRcdFx0XHRcdGNsYXNzZXMucHVzaChpbm5lcik7XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSBpZiAoYXJnVHlwZSA9PT0gJ29iamVjdCcpIHtcblx0XHRcdFx0Zm9yICh2YXIga2V5IGluIGFyZykge1xuXHRcdFx0XHRcdGlmIChoYXNPd24uY2FsbChhcmcsIGtleSkgJiYgYXJnW2tleV0pIHtcblx0XHRcdFx0XHRcdGNsYXNzZXMucHVzaChrZXkpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiBjbGFzc2VzLmpvaW4oJyAnKTtcblx0fVxuXG5cdGlmICh0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJyAmJiBtb2R1bGUuZXhwb3J0cykge1xuXHRcdGNsYXNzTmFtZXMuZGVmYXVsdCA9IGNsYXNzTmFtZXM7XG5cdFx0bW9kdWxlLmV4cG9ydHMgPSBjbGFzc05hbWVzO1xuXHR9IGVsc2UgaWYgKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIGRlZmluZS5hbWQgPT09ICdvYmplY3QnICYmIGRlZmluZS5hbWQpIHtcblx0XHQvLyByZWdpc3RlciBhcyAnY2xhc3NuYW1lcycsIGNvbnNpc3RlbnQgd2l0aCBucG0gcGFja2FnZSBuYW1lXG5cdFx0ZGVmaW5lKCdjbGFzc25hbWVzJywgW10sIGZ1bmN0aW9uICgpIHtcblx0XHRcdHJldHVybiBjbGFzc05hbWVzO1xuXHRcdH0pO1xuXHR9IGVsc2Uge1xuXHRcdHdpbmRvdy5jbGFzc05hbWVzID0gY2xhc3NOYW1lcztcblx0fVxufSgpKTtcbiIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5nZXRQcmVmaXggPSBnZXRQcmVmaXg7XG5leHBvcnRzLmJyb3dzZXJQcmVmaXhUb0tleSA9IGJyb3dzZXJQcmVmaXhUb0tleTtcbmV4cG9ydHMuYnJvd3NlclByZWZpeFRvU3R5bGUgPSBicm93c2VyUHJlZml4VG9TdHlsZTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcbnZhciBwcmVmaXhlcyA9IFsnTW96JywgJ1dlYmtpdCcsICdPJywgJ21zJ107XG5cbmZ1bmN0aW9uIGdldFByZWZpeCgpXG4vKjogc3RyaW5nKi9cbntcbiAgdmFyIHByb3BcbiAgLyo6IHN0cmluZyovXG4gID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiAndHJhbnNmb3JtJztcbiAgLy8gQ2hlY2tpbmcgc3BlY2lmaWNhbGx5IGZvciAnd2luZG93LmRvY3VtZW50JyBpcyBmb3IgcHNldWRvLWJyb3dzZXIgc2VydmVyLXNpZGVcbiAgLy8gZW52aXJvbm1lbnRzIHRoYXQgZGVmaW5lICd3aW5kb3cnIGFzIHRoZSBnbG9iYWwgY29udGV4dC5cbiAgLy8gRS5nLiBSZWFjdC1yYWlscyAoc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9yZWFjdGpzL3JlYWN0LXJhaWxzL3B1bGwvODQpXG4gIGlmICh0eXBlb2Ygd2luZG93ID09PSAndW5kZWZpbmVkJyB8fCB0eXBlb2Ygd2luZG93LmRvY3VtZW50ID09PSAndW5kZWZpbmVkJykgcmV0dXJuICcnO1xuICB2YXIgc3R5bGUgPSB3aW5kb3cuZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnN0eWxlO1xuICBpZiAocHJvcCBpbiBzdHlsZSkgcmV0dXJuICcnO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgcHJlZml4ZXMubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoYnJvd3NlclByZWZpeFRvS2V5KHByb3AsIHByZWZpeGVzW2ldKSBpbiBzdHlsZSkgcmV0dXJuIHByZWZpeGVzW2ldO1xuICB9XG5cbiAgcmV0dXJuICcnO1xufVxuXG5mdW5jdGlvbiBicm93c2VyUHJlZml4VG9LZXkocHJvcFxuLyo6IHN0cmluZyovXG4sIHByZWZpeFxuLyo6IHN0cmluZyovXG4pXG4vKjogc3RyaW5nKi9cbntcbiAgcmV0dXJuIHByZWZpeCA/IFwiXCIuY29uY2F0KHByZWZpeCkuY29uY2F0KGtlYmFiVG9UaXRsZUNhc2UocHJvcCkpIDogcHJvcDtcbn1cblxuZnVuY3Rpb24gYnJvd3NlclByZWZpeFRvU3R5bGUocHJvcFxuLyo6IHN0cmluZyovXG4sIHByZWZpeFxuLyo6IHN0cmluZyovXG4pXG4vKjogc3RyaW5nKi9cbntcbiAgcmV0dXJuIHByZWZpeCA/IFwiLVwiLmNvbmNhdChwcmVmaXgudG9Mb3dlckNhc2UoKSwgXCItXCIpLmNvbmNhdChwcm9wKSA6IHByb3A7XG59XG5cbmZ1bmN0aW9uIGtlYmFiVG9UaXRsZUNhc2Uoc3RyXG4vKjogc3RyaW5nKi9cbilcbi8qOiBzdHJpbmcqL1xue1xuICB2YXIgb3V0ID0gJyc7XG4gIHZhciBzaG91bGRDYXBpdGFsaXplID0gdHJ1ZTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IHN0ci5sZW5ndGg7IGkrKykge1xuICAgIGlmIChzaG91bGRDYXBpdGFsaXplKSB7XG4gICAgICBvdXQgKz0gc3RyW2ldLnRvVXBwZXJDYXNlKCk7XG4gICAgICBzaG91bGRDYXBpdGFsaXplID0gZmFsc2U7XG4gICAgfSBlbHNlIGlmIChzdHJbaV0gPT09ICctJykge1xuICAgICAgc2hvdWxkQ2FwaXRhbGl6ZSA9IHRydWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIG91dCArPSBzdHJbaV07XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG91dDtcbn0gLy8gRGVmYXVsdCBleHBvcnQgaXMgdGhlIHByZWZpeCBpdHNlbGYsIGxpa2UgJ01veicsICdXZWJraXQnLCBldGNcbi8vIE5vdGUgdGhhdCB5b3UgbWF5IGhhdmUgdG8gcmUtdGVzdCBmb3IgY2VydGFpbiB0aGluZ3M7IGZvciBpbnN0YW5jZSwgQ2hyb21lIDUwXG4vLyBjYW4gaGFuZGxlIHVucHJlZml4ZWQgYHRyYW5zZm9ybWAsIGJ1dCBub3QgdW5wcmVmaXhlZCBgdXNlci1zZWxlY3RgXG5cblxudmFyIF9kZWZhdWx0ID0gZ2V0UHJlZml4KCk7XG5cbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0OyIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwO1xuXG52YXIgUmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChyZXF1aXJlKFwicmVhY3RcIikpO1xuXG52YXIgX3Byb3BUeXBlcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInByb3AtdHlwZXNcIikpO1xuXG52YXIgX3JlYWN0RG9tID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicmVhY3QtZG9tXCIpKTtcblxudmFyIF9kb21GbnMgPSByZXF1aXJlKFwiLi91dGlscy9kb21GbnNcIik7XG5cbnZhciBfcG9zaXRpb25GbnMgPSByZXF1aXJlKFwiLi91dGlscy9wb3NpdGlvbkZuc1wiKTtcblxudmFyIF9zaGltcyA9IHJlcXVpcmUoXCIuL3V0aWxzL3NoaW1zXCIpO1xuXG52YXIgX2xvZyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vdXRpbHMvbG9nXCIpKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZnVuY3Rpb24gX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlKCkgeyBpZiAodHlwZW9mIFdlYWtNYXAgIT09IFwiZnVuY3Rpb25cIikgcmV0dXJuIG51bGw7IHZhciBjYWNoZSA9IG5ldyBXZWFrTWFwKCk7IF9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZSA9IGZ1bmN0aW9uIF9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZSgpIHsgcmV0dXJuIGNhY2hlOyB9OyByZXR1cm4gY2FjaGU7IH1cblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQob2JqKSB7IGlmIChvYmogJiYgb2JqLl9fZXNNb2R1bGUpIHsgcmV0dXJuIG9iajsgfSBpZiAob2JqID09PSBudWxsIHx8IF90eXBlb2Yob2JqKSAhPT0gXCJvYmplY3RcIiAmJiB0eXBlb2Ygb2JqICE9PSBcImZ1bmN0aW9uXCIpIHsgcmV0dXJuIHsgZGVmYXVsdDogb2JqIH07IH0gdmFyIGNhY2hlID0gX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlKCk7IGlmIChjYWNoZSAmJiBjYWNoZS5oYXMob2JqKSkgeyByZXR1cm4gY2FjaGUuZ2V0KG9iaik7IH0gdmFyIG5ld09iaiA9IHt9OyB2YXIgaGFzUHJvcGVydHlEZXNjcmlwdG9yID0gT2JqZWN0LmRlZmluZVByb3BlcnR5ICYmIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7IGZvciAodmFyIGtleSBpbiBvYmopIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGtleSkpIHsgdmFyIGRlc2MgPSBoYXNQcm9wZXJ0eURlc2NyaXB0b3IgPyBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iaiwga2V5KSA6IG51bGw7IGlmIChkZXNjICYmIChkZXNjLmdldCB8fCBkZXNjLnNldCkpIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KG5ld09iaiwga2V5LCBkZXNjKTsgfSBlbHNlIHsgbmV3T2JqW2tleV0gPSBvYmpba2V5XTsgfSB9IH0gbmV3T2JqLmRlZmF1bHQgPSBvYmo7IGlmIChjYWNoZSkgeyBjYWNoZS5zZXQob2JqLCBuZXdPYmopOyB9IHJldHVybiBuZXdPYmo7IH1cblxuZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgXCJAYmFiZWwvaGVscGVycyAtIHR5cGVvZlwiOyBpZiAodHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIpIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9OyB9IGVsc2UgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH07IH0gcmV0dXJuIF90eXBlb2Yob2JqKTsgfVxuXG5mdW5jdGlvbiBfc2xpY2VkVG9BcnJheShhcnIsIGkpIHsgcmV0dXJuIF9hcnJheVdpdGhIb2xlcyhhcnIpIHx8IF9pdGVyYWJsZVRvQXJyYXlMaW1pdChhcnIsIGkpIHx8IF91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheShhcnIsIGkpIHx8IF9ub25JdGVyYWJsZVJlc3QoKTsgfVxuXG5mdW5jdGlvbiBfbm9uSXRlcmFibGVSZXN0KCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiSW52YWxpZCBhdHRlbXB0IHRvIGRlc3RydWN0dXJlIG5vbi1pdGVyYWJsZSBpbnN0YW5jZS5cXG5JbiBvcmRlciB0byBiZSBpdGVyYWJsZSwgbm9uLWFycmF5IG9iamVjdHMgbXVzdCBoYXZlIGEgW1N5bWJvbC5pdGVyYXRvcl0oKSBtZXRob2QuXCIpOyB9XG5cbmZ1bmN0aW9uIF91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheShvLCBtaW5MZW4pIHsgaWYgKCFvKSByZXR1cm47IGlmICh0eXBlb2YgbyA9PT0gXCJzdHJpbmdcIikgcmV0dXJuIF9hcnJheUxpa2VUb0FycmF5KG8sIG1pbkxlbik7IHZhciBuID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG8pLnNsaWNlKDgsIC0xKTsgaWYgKG4gPT09IFwiT2JqZWN0XCIgJiYgby5jb25zdHJ1Y3RvcikgbiA9IG8uY29uc3RydWN0b3IubmFtZTsgaWYgKG4gPT09IFwiTWFwXCIgfHwgbiA9PT0gXCJTZXRcIikgcmV0dXJuIEFycmF5LmZyb20obyk7IGlmIChuID09PSBcIkFyZ3VtZW50c1wiIHx8IC9eKD86VWl8SSludCg/Ojh8MTZ8MzIpKD86Q2xhbXBlZCk/QXJyYXkkLy50ZXN0KG4pKSByZXR1cm4gX2FycmF5TGlrZVRvQXJyYXkobywgbWluTGVuKTsgfVxuXG5mdW5jdGlvbiBfYXJyYXlMaWtlVG9BcnJheShhcnIsIGxlbikgeyBpZiAobGVuID09IG51bGwgfHwgbGVuID4gYXJyLmxlbmd0aCkgbGVuID0gYXJyLmxlbmd0aDsgZm9yICh2YXIgaSA9IDAsIGFycjIgPSBuZXcgQXJyYXkobGVuKTsgaSA8IGxlbjsgaSsrKSB7IGFycjJbaV0gPSBhcnJbaV07IH0gcmV0dXJuIGFycjI7IH1cblxuZnVuY3Rpb24gX2l0ZXJhYmxlVG9BcnJheUxpbWl0KGFyciwgaSkgeyBpZiAodHlwZW9mIFN5bWJvbCA9PT0gXCJ1bmRlZmluZWRcIiB8fCAhKFN5bWJvbC5pdGVyYXRvciBpbiBPYmplY3QoYXJyKSkpIHJldHVybjsgdmFyIF9hcnIgPSBbXTsgdmFyIF9uID0gdHJ1ZTsgdmFyIF9kID0gZmFsc2U7IHZhciBfZSA9IHVuZGVmaW5lZDsgdHJ5IHsgZm9yICh2YXIgX2kgPSBhcnJbU3ltYm9sLml0ZXJhdG9yXSgpLCBfczsgIShfbiA9IChfcyA9IF9pLm5leHQoKSkuZG9uZSk7IF9uID0gdHJ1ZSkgeyBfYXJyLnB1c2goX3MudmFsdWUpOyBpZiAoaSAmJiBfYXJyLmxlbmd0aCA9PT0gaSkgYnJlYWs7IH0gfSBjYXRjaCAoZXJyKSB7IF9kID0gdHJ1ZTsgX2UgPSBlcnI7IH0gZmluYWxseSB7IHRyeSB7IGlmICghX24gJiYgX2lbXCJyZXR1cm5cIl0gIT0gbnVsbCkgX2lbXCJyZXR1cm5cIl0oKTsgfSBmaW5hbGx5IHsgaWYgKF9kKSB0aHJvdyBfZTsgfSB9IHJldHVybiBfYXJyOyB9XG5cbmZ1bmN0aW9uIF9hcnJheVdpdGhIb2xlcyhhcnIpIHsgaWYgKEFycmF5LmlzQXJyYXkoYXJyKSkgcmV0dXJuIGFycjsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9XG5cbmZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvblwiKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBfc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpOyB9XG5cbmZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7IF9zZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fCBmdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkgeyBvLl9fcHJvdG9fXyA9IHA7IHJldHVybiBvOyB9OyByZXR1cm4gX3NldFByb3RvdHlwZU9mKG8sIHApOyB9XG5cbmZ1bmN0aW9uIF9jcmVhdGVTdXBlcihEZXJpdmVkKSB7IHZhciBoYXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0ID0gX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCgpOyByZXR1cm4gZnVuY3Rpb24gKCkgeyB2YXIgU3VwZXIgPSBfZ2V0UHJvdG90eXBlT2YoRGVyaXZlZCksIHJlc3VsdDsgaWYgKGhhc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QpIHsgdmFyIE5ld1RhcmdldCA9IF9nZXRQcm90b3R5cGVPZih0aGlzKS5jb25zdHJ1Y3RvcjsgcmVzdWx0ID0gUmVmbGVjdC5jb25zdHJ1Y3QoU3VwZXIsIGFyZ3VtZW50cywgTmV3VGFyZ2V0KTsgfSBlbHNlIHsgcmVzdWx0ID0gU3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKTsgfSByZXR1cm4gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgcmVzdWx0KTsgfTsgfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmIChjYWxsICYmIChfdHlwZW9mKGNhbGwpID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpKSB7IHJldHVybiBjYWxsOyB9IHJldHVybiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpOyB9XG5cbmZ1bmN0aW9uIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZikgeyBpZiAoc2VsZiA9PT0gdm9pZCAwKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gc2VsZjsgfVxuXG5mdW5jdGlvbiBfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KCkgeyBpZiAodHlwZW9mIFJlZmxlY3QgPT09IFwidW5kZWZpbmVkXCIgfHwgIVJlZmxlY3QuY29uc3RydWN0KSByZXR1cm4gZmFsc2U7IGlmIChSZWZsZWN0LmNvbnN0cnVjdC5zaGFtKSByZXR1cm4gZmFsc2U7IGlmICh0eXBlb2YgUHJveHkgPT09IFwiZnVuY3Rpb25cIikgcmV0dXJuIHRydWU7IHRyeSB7IERhdGUucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoUmVmbGVjdC5jb25zdHJ1Y3QoRGF0ZSwgW10sIGZ1bmN0aW9uICgpIHt9KSk7IHJldHVybiB0cnVlOyB9IGNhdGNoIChlKSB7IHJldHVybiBmYWxzZTsgfSB9XG5cbmZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7IF9nZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5nZXRQcm90b3R5cGVPZiA6IGZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7IHJldHVybiBvLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2Yobyk7IH07IHJldHVybiBfZ2V0UHJvdG90eXBlT2Yobyk7IH1cblxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkgeyBpZiAoa2V5IGluIG9iaikgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHsgdmFsdWU6IHZhbHVlLCBlbnVtZXJhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUsIHdyaXRhYmxlOiB0cnVlIH0pOyB9IGVsc2UgeyBvYmpba2V5XSA9IHZhbHVlOyB9IHJldHVybiBvYmo7IH1cblxuLy8gU2ltcGxlIGFic3RyYWN0aW9uIGZvciBkcmFnZ2luZyBldmVudHMgbmFtZXMuXG52YXIgZXZlbnRzRm9yID0ge1xuICB0b3VjaDoge1xuICAgIHN0YXJ0OiAndG91Y2hzdGFydCcsXG4gICAgbW92ZTogJ3RvdWNobW92ZScsXG4gICAgc3RvcDogJ3RvdWNoZW5kJ1xuICB9LFxuICBtb3VzZToge1xuICAgIHN0YXJ0OiAnbW91c2Vkb3duJyxcbiAgICBtb3ZlOiAnbW91c2Vtb3ZlJyxcbiAgICBzdG9wOiAnbW91c2V1cCdcbiAgfVxufTsgLy8gRGVmYXVsdCB0byBtb3VzZSBldmVudHMuXG5cbnZhciBkcmFnRXZlbnRGb3IgPSBldmVudHNGb3IubW91c2U7XG4vKjo6IHR5cGUgRHJhZ2dhYmxlQ29yZVN0YXRlID0ge1xuICBkcmFnZ2luZzogYm9vbGVhbixcbiAgbGFzdFg6IG51bWJlcixcbiAgbGFzdFk6IG51bWJlcixcbiAgdG91Y2hJZGVudGlmaWVyOiA/bnVtYmVyXG59OyovXG5cbi8qOjogZXhwb3J0IHR5cGUgRHJhZ2dhYmxlRGF0YSA9IHtcbiAgbm9kZTogSFRNTEVsZW1lbnQsXG4gIHg6IG51bWJlciwgeTogbnVtYmVyLFxuICBkZWx0YVg6IG51bWJlciwgZGVsdGFZOiBudW1iZXIsXG4gIGxhc3RYOiBudW1iZXIsIGxhc3RZOiBudW1iZXIsXG59OyovXG5cbi8qOjogZXhwb3J0IHR5cGUgRHJhZ2dhYmxlRXZlbnRIYW5kbGVyID0gKGU6IE1vdXNlRXZlbnQsIGRhdGE6IERyYWdnYWJsZURhdGEpID0+IHZvaWQ7Ki9cblxuLyo6OiBleHBvcnQgdHlwZSBDb250cm9sUG9zaXRpb24gPSB7eDogbnVtYmVyLCB5OiBudW1iZXJ9OyovXG5cbi8qOjogZXhwb3J0IHR5cGUgUG9zaXRpb25PZmZzZXRDb250cm9sUG9zaXRpb24gPSB7eDogbnVtYmVyfHN0cmluZywgeTogbnVtYmVyfHN0cmluZ307Ki9cblxuLyo6OiBleHBvcnQgdHlwZSBEcmFnZ2FibGVDb3JlUHJvcHMgPSB7XG4gIGFsbG93QW55Q2xpY2s6IGJvb2xlYW4sXG4gIGNhbmNlbDogc3RyaW5nLFxuICBjaGlsZHJlbjogUmVhY3RFbGVtZW50PGFueT4sXG4gIGRpc2FibGVkOiBib29sZWFuLFxuICBlbmFibGVVc2VyU2VsZWN0SGFjazogYm9vbGVhbixcbiAgb2Zmc2V0UGFyZW50OiBIVE1MRWxlbWVudCxcbiAgZ3JpZDogW251bWJlciwgbnVtYmVyXSxcbiAgaGFuZGxlOiBzdHJpbmcsXG4gIG5vZGVSZWY/OiA/UmVhY3QuRWxlbWVudFJlZjxhbnk+LFxuICBvblN0YXJ0OiBEcmFnZ2FibGVFdmVudEhhbmRsZXIsXG4gIG9uRHJhZzogRHJhZ2dhYmxlRXZlbnRIYW5kbGVyLFxuICBvblN0b3A6IERyYWdnYWJsZUV2ZW50SGFuZGxlcixcbiAgb25Nb3VzZURvd246IChlOiBNb3VzZUV2ZW50KSA9PiB2b2lkLFxuICBzY2FsZTogbnVtYmVyLFxufTsqL1xuXG4vL1xuLy8gRGVmaW5lIDxEcmFnZ2FibGVDb3JlPi5cbi8vXG4vLyA8RHJhZ2dhYmxlQ29yZT4gaXMgZm9yIGFkdmFuY2VkIHVzYWdlIG9mIDxEcmFnZ2FibGU+LiBJdCBtYWludGFpbnMgbWluaW1hbCBpbnRlcm5hbCBzdGF0ZSBzbyBpdCBjYW5cbi8vIHdvcmsgd2VsbCB3aXRoIGxpYnJhcmllcyB0aGF0IHJlcXVpcmUgbW9yZSBjb250cm9sIG92ZXIgdGhlIGVsZW1lbnQuXG4vL1xudmFyIERyYWdnYWJsZUNvcmUgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzKERyYWdnYWJsZUNvcmUsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIHZhciBfc3VwZXIgPSBfY3JlYXRlU3VwZXIoRHJhZ2dhYmxlQ29yZSk7XG5cbiAgZnVuY3Rpb24gRHJhZ2dhYmxlQ29yZSgpIHtcbiAgICB2YXIgX3RoaXM7XG5cbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgRHJhZ2dhYmxlQ29yZSk7XG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgX3RoaXMgPSBfc3VwZXIuY2FsbC5hcHBseShfc3VwZXIsIFt0aGlzXS5jb25jYXQoYXJncykpO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcInN0YXRlXCIsIHtcbiAgICAgIGRyYWdnaW5nOiBmYWxzZSxcbiAgICAgIC8vIFVzZWQgd2hpbGUgZHJhZ2dpbmcgdG8gZGV0ZXJtaW5lIGRlbHRhcy5cbiAgICAgIGxhc3RYOiBOYU4sXG4gICAgICBsYXN0WTogTmFOLFxuICAgICAgdG91Y2hJZGVudGlmaWVyOiBudWxsXG4gICAgfSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIFwibW91bnRlZFwiLCBmYWxzZSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIFwiaGFuZGxlRHJhZ1N0YXJ0XCIsIGZ1bmN0aW9uIChlKSB7XG4gICAgICAvLyBNYWtlIGl0IHBvc3NpYmxlIHRvIGF0dGFjaCBldmVudCBoYW5kbGVycyBvbiB0b3Agb2YgdGhpcyBvbmUuXG4gICAgICBfdGhpcy5wcm9wcy5vbk1vdXNlRG93bihlKTsgLy8gT25seSBhY2NlcHQgbGVmdC1jbGlja3MuXG5cblxuICAgICAgaWYgKCFfdGhpcy5wcm9wcy5hbGxvd0FueUNsaWNrICYmIHR5cGVvZiBlLmJ1dHRvbiA9PT0gJ251bWJlcicgJiYgZS5idXR0b24gIT09IDApIHJldHVybiBmYWxzZTsgLy8gR2V0IG5vZGVzLiBCZSBzdXJlIHRvIGdyYWIgcmVsYXRpdmUgZG9jdW1lbnQgKGNvdWxkIGJlIGlmcmFtZWQpXG5cbiAgICAgIHZhciB0aGlzTm9kZSA9IF90aGlzLmZpbmRET01Ob2RlKCk7XG5cbiAgICAgIGlmICghdGhpc05vZGUgfHwgIXRoaXNOb2RlLm93bmVyRG9jdW1lbnQgfHwgIXRoaXNOb2RlLm93bmVyRG9jdW1lbnQuYm9keSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJzxEcmFnZ2FibGVDb3JlPiBub3QgbW91bnRlZCBvbiBEcmFnU3RhcnQhJyk7XG4gICAgICB9XG5cbiAgICAgIHZhciBvd25lckRvY3VtZW50ID0gdGhpc05vZGUub3duZXJEb2N1bWVudDsgLy8gU2hvcnQgY2lyY3VpdCBpZiBoYW5kbGUgb3IgY2FuY2VsIHByb3Agd2FzIHByb3ZpZGVkIGFuZCBzZWxlY3RvciBkb2Vzbid0IG1hdGNoLlxuXG4gICAgICBpZiAoX3RoaXMucHJvcHMuZGlzYWJsZWQgfHwgIShlLnRhcmdldCBpbnN0YW5jZW9mIG93bmVyRG9jdW1lbnQuZGVmYXVsdFZpZXcuTm9kZSkgfHwgX3RoaXMucHJvcHMuaGFuZGxlICYmICEoMCwgX2RvbUZucy5tYXRjaGVzU2VsZWN0b3JBbmRQYXJlbnRzVG8pKGUudGFyZ2V0LCBfdGhpcy5wcm9wcy5oYW5kbGUsIHRoaXNOb2RlKSB8fCBfdGhpcy5wcm9wcy5jYW5jZWwgJiYgKDAsIF9kb21GbnMubWF0Y2hlc1NlbGVjdG9yQW5kUGFyZW50c1RvKShlLnRhcmdldCwgX3RoaXMucHJvcHMuY2FuY2VsLCB0aGlzTm9kZSkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfSAvLyBQcmV2ZW50IHNjcm9sbGluZyBvbiBtb2JpbGUgZGV2aWNlcywgbGlrZSBpcGFkL2lwaG9uZS5cbiAgICAgIC8vIEltcG9ydGFudCB0aGF0IHRoaXMgaXMgYWZ0ZXIgaGFuZGxlL2NhbmNlbC5cblxuXG4gICAgICBpZiAoZS50eXBlID09PSAndG91Y2hzdGFydCcpIGUucHJldmVudERlZmF1bHQoKTsgLy8gU2V0IHRvdWNoIGlkZW50aWZpZXIgaW4gY29tcG9uZW50IHN0YXRlIGlmIHRoaXMgaXMgYSB0b3VjaCBldmVudC4gVGhpcyBhbGxvd3MgdXMgdG9cbiAgICAgIC8vIGRpc3Rpbmd1aXNoIGJldHdlZW4gaW5kaXZpZHVhbCB0b3VjaGVzIG9uIG11bHRpdG91Y2ggc2NyZWVucyBieSBpZGVudGlmeWluZyB3aGljaFxuICAgICAgLy8gdG91Y2hwb2ludCB3YXMgc2V0IHRvIHRoaXMgZWxlbWVudC5cblxuICAgICAgdmFyIHRvdWNoSWRlbnRpZmllciA9ICgwLCBfZG9tRm5zLmdldFRvdWNoSWRlbnRpZmllcikoZSk7XG5cbiAgICAgIF90aGlzLnNldFN0YXRlKHtcbiAgICAgICAgdG91Y2hJZGVudGlmaWVyOiB0b3VjaElkZW50aWZpZXJcbiAgICAgIH0pOyAvLyBHZXQgdGhlIGN1cnJlbnQgZHJhZyBwb2ludCBmcm9tIHRoZSBldmVudC4gVGhpcyBpcyB1c2VkIGFzIHRoZSBvZmZzZXQuXG5cblxuICAgICAgdmFyIHBvc2l0aW9uID0gKDAsIF9wb3NpdGlvbkZucy5nZXRDb250cm9sUG9zaXRpb24pKGUsIHRvdWNoSWRlbnRpZmllciwgX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcykpO1xuICAgICAgaWYgKHBvc2l0aW9uID09IG51bGwpIHJldHVybjsgLy8gbm90IHBvc3NpYmxlIGJ1dCBzYXRpc2ZpZXMgZmxvd1xuXG4gICAgICB2YXIgeCA9IHBvc2l0aW9uLngsXG4gICAgICAgICAgeSA9IHBvc2l0aW9uLnk7IC8vIENyZWF0ZSBhbiBldmVudCBvYmplY3Qgd2l0aCBhbGwgdGhlIGRhdGEgcGFyZW50cyBuZWVkIHRvIG1ha2UgYSBkZWNpc2lvbiBoZXJlLlxuXG4gICAgICB2YXIgY29yZUV2ZW50ID0gKDAsIF9wb3NpdGlvbkZucy5jcmVhdGVDb3JlRGF0YSkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIHgsIHkpO1xuICAgICAgKDAsIF9sb2cuZGVmYXVsdCkoJ0RyYWdnYWJsZUNvcmU6IGhhbmRsZURyYWdTdGFydDogJWonLCBjb3JlRXZlbnQpOyAvLyBDYWxsIGV2ZW50IGhhbmRsZXIuIElmIGl0IHJldHVybnMgZXhwbGljaXQgZmFsc2UsIGNhbmNlbC5cblxuICAgICAgKDAsIF9sb2cuZGVmYXVsdCkoJ2NhbGxpbmcnLCBfdGhpcy5wcm9wcy5vblN0YXJ0KTtcblxuICAgICAgdmFyIHNob3VsZFVwZGF0ZSA9IF90aGlzLnByb3BzLm9uU3RhcnQoZSwgY29yZUV2ZW50KTtcblxuICAgICAgaWYgKHNob3VsZFVwZGF0ZSA9PT0gZmFsc2UgfHwgX3RoaXMubW91bnRlZCA9PT0gZmFsc2UpIHJldHVybjsgLy8gQWRkIGEgc3R5bGUgdG8gdGhlIGJvZHkgdG8gZGlzYWJsZSB1c2VyLXNlbGVjdC4gVGhpcyBwcmV2ZW50cyB0ZXh0IGZyb21cbiAgICAgIC8vIGJlaW5nIHNlbGVjdGVkIGFsbCBvdmVyIHRoZSBwYWdlLlxuXG4gICAgICBpZiAoX3RoaXMucHJvcHMuZW5hYmxlVXNlclNlbGVjdEhhY2spICgwLCBfZG9tRm5zLmFkZFVzZXJTZWxlY3RTdHlsZXMpKG93bmVyRG9jdW1lbnQpOyAvLyBJbml0aWF0ZSBkcmFnZ2luZy4gU2V0IHRoZSBjdXJyZW50IHggYW5kIHkgYXMgb2Zmc2V0c1xuICAgICAgLy8gc28gd2Uga25vdyBob3cgbXVjaCB3ZSd2ZSBtb3ZlZCBkdXJpbmcgdGhlIGRyYWcuIFRoaXMgYWxsb3dzIHVzXG4gICAgICAvLyB0byBkcmFnIGVsZW1lbnRzIGFyb3VuZCBldmVuIGlmIHRoZXkgaGF2ZSBiZWVuIG1vdmVkLCB3aXRob3V0IGlzc3VlLlxuXG4gICAgICBfdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgIGRyYWdnaW5nOiB0cnVlLFxuICAgICAgICBsYXN0WDogeCxcbiAgICAgICAgbGFzdFk6IHlcbiAgICAgIH0pOyAvLyBBZGQgZXZlbnRzIHRvIHRoZSBkb2N1bWVudCBkaXJlY3RseSBzbyB3ZSBjYXRjaCB3aGVuIHRoZSB1c2VyJ3MgbW91c2UvdG91Y2ggbW92ZXMgb3V0c2lkZSBvZlxuICAgICAgLy8gdGhpcyBlbGVtZW50LiBXZSB1c2UgZGlmZmVyZW50IGV2ZW50cyBkZXBlbmRpbmcgb24gd2hldGhlciBvciBub3Qgd2UgaGF2ZSBkZXRlY3RlZCB0aGF0IHRoaXNcbiAgICAgIC8vIGlzIGEgdG91Y2gtY2FwYWJsZSBkZXZpY2UuXG5cblxuICAgICAgKDAsIF9kb21GbnMuYWRkRXZlbnQpKG93bmVyRG9jdW1lbnQsIGRyYWdFdmVudEZvci5tb3ZlLCBfdGhpcy5oYW5kbGVEcmFnKTtcbiAgICAgICgwLCBfZG9tRm5zLmFkZEV2ZW50KShvd25lckRvY3VtZW50LCBkcmFnRXZlbnRGb3Iuc3RvcCwgX3RoaXMuaGFuZGxlRHJhZ1N0b3ApO1xuICAgIH0pO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcImhhbmRsZURyYWdcIiwgZnVuY3Rpb24gKGUpIHtcbiAgICAgIC8vIEdldCB0aGUgY3VycmVudCBkcmFnIHBvaW50IGZyb20gdGhlIGV2ZW50LiBUaGlzIGlzIHVzZWQgYXMgdGhlIG9mZnNldC5cbiAgICAgIHZhciBwb3NpdGlvbiA9ICgwLCBfcG9zaXRpb25GbnMuZ2V0Q29udHJvbFBvc2l0aW9uKShlLCBfdGhpcy5zdGF0ZS50b3VjaElkZW50aWZpZXIsIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpKTtcbiAgICAgIGlmIChwb3NpdGlvbiA9PSBudWxsKSByZXR1cm47XG4gICAgICB2YXIgeCA9IHBvc2l0aW9uLngsXG4gICAgICAgICAgeSA9IHBvc2l0aW9uLnk7IC8vIFNuYXAgdG8gZ3JpZCBpZiBwcm9wIGhhcyBiZWVuIHByb3ZpZGVkXG5cbiAgICAgIGlmIChBcnJheS5pc0FycmF5KF90aGlzLnByb3BzLmdyaWQpKSB7XG4gICAgICAgIHZhciBkZWx0YVggPSB4IC0gX3RoaXMuc3RhdGUubGFzdFgsXG4gICAgICAgICAgICBkZWx0YVkgPSB5IC0gX3RoaXMuc3RhdGUubGFzdFk7XG5cbiAgICAgICAgdmFyIF9zbmFwVG9HcmlkID0gKDAsIF9wb3NpdGlvbkZucy5zbmFwVG9HcmlkKShfdGhpcy5wcm9wcy5ncmlkLCBkZWx0YVgsIGRlbHRhWSk7XG5cbiAgICAgICAgdmFyIF9zbmFwVG9HcmlkMiA9IF9zbGljZWRUb0FycmF5KF9zbmFwVG9HcmlkLCAyKTtcblxuICAgICAgICBkZWx0YVggPSBfc25hcFRvR3JpZDJbMF07XG4gICAgICAgIGRlbHRhWSA9IF9zbmFwVG9HcmlkMlsxXTtcbiAgICAgICAgaWYgKCFkZWx0YVggJiYgIWRlbHRhWSkgcmV0dXJuOyAvLyBza2lwIHVzZWxlc3MgZHJhZ1xuXG4gICAgICAgIHggPSBfdGhpcy5zdGF0ZS5sYXN0WCArIGRlbHRhWCwgeSA9IF90aGlzLnN0YXRlLmxhc3RZICsgZGVsdGFZO1xuICAgICAgfVxuXG4gICAgICB2YXIgY29yZUV2ZW50ID0gKDAsIF9wb3NpdGlvbkZucy5jcmVhdGVDb3JlRGF0YSkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIHgsIHkpO1xuICAgICAgKDAsIF9sb2cuZGVmYXVsdCkoJ0RyYWdnYWJsZUNvcmU6IGhhbmRsZURyYWc6ICVqJywgY29yZUV2ZW50KTsgLy8gQ2FsbCBldmVudCBoYW5kbGVyLiBJZiBpdCByZXR1cm5zIGV4cGxpY2l0IGZhbHNlLCB0cmlnZ2VyIGVuZC5cblxuICAgICAgdmFyIHNob3VsZFVwZGF0ZSA9IF90aGlzLnByb3BzLm9uRHJhZyhlLCBjb3JlRXZlbnQpO1xuXG4gICAgICBpZiAoc2hvdWxkVXBkYXRlID09PSBmYWxzZSB8fCBfdGhpcy5tb3VudGVkID09PSBmYWxzZSkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIC8vICRGbG93SWdub3JlXG4gICAgICAgICAgX3RoaXMuaGFuZGxlRHJhZ1N0b3AobmV3IE1vdXNlRXZlbnQoJ21vdXNldXAnKSk7XG4gICAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICAgIC8vIE9sZCBicm93c2Vyc1xuICAgICAgICAgIHZhciBldmVudCA9ICgoZG9jdW1lbnQuY3JlYXRlRXZlbnQoJ01vdXNlRXZlbnRzJylcbiAgICAgICAgICAvKjogYW55Ki9cbiAgICAgICAgICApXG4gICAgICAgICAgLyo6IE1vdXNlVG91Y2hFdmVudCovXG4gICAgICAgICAgKTsgLy8gSSBzZWUgd2h5IHRoaXMgaW5zYW5pdHkgd2FzIGRlcHJlY2F0ZWRcbiAgICAgICAgICAvLyAkRmxvd0lnbm9yZVxuXG4gICAgICAgICAgZXZlbnQuaW5pdE1vdXNlRXZlbnQoJ21vdXNldXAnLCB0cnVlLCB0cnVlLCB3aW5kb3csIDAsIDAsIDAsIDAsIDAsIGZhbHNlLCBmYWxzZSwgZmFsc2UsIGZhbHNlLCAwLCBudWxsKTtcblxuICAgICAgICAgIF90aGlzLmhhbmRsZURyYWdTdG9wKGV2ZW50KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgX3RoaXMuc2V0U3RhdGUoe1xuICAgICAgICBsYXN0WDogeCxcbiAgICAgICAgbGFzdFk6IHlcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcImhhbmRsZURyYWdTdG9wXCIsIGZ1bmN0aW9uIChlKSB7XG4gICAgICBpZiAoIV90aGlzLnN0YXRlLmRyYWdnaW5nKSByZXR1cm47XG4gICAgICB2YXIgcG9zaXRpb24gPSAoMCwgX3Bvc2l0aW9uRm5zLmdldENvbnRyb2xQb3NpdGlvbikoZSwgX3RoaXMuc3RhdGUudG91Y2hJZGVudGlmaWVyLCBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSk7XG4gICAgICBpZiAocG9zaXRpb24gPT0gbnVsbCkgcmV0dXJuO1xuICAgICAgdmFyIHggPSBwb3NpdGlvbi54LFxuICAgICAgICAgIHkgPSBwb3NpdGlvbi55O1xuICAgICAgdmFyIGNvcmVFdmVudCA9ICgwLCBfcG9zaXRpb25GbnMuY3JlYXRlQ29yZURhdGEpKF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCB4LCB5KTsgLy8gQ2FsbCBldmVudCBoYW5kbGVyXG5cbiAgICAgIHZhciBzaG91bGRDb250aW51ZSA9IF90aGlzLnByb3BzLm9uU3RvcChlLCBjb3JlRXZlbnQpO1xuXG4gICAgICBpZiAoc2hvdWxkQ29udGludWUgPT09IGZhbHNlIHx8IF90aGlzLm1vdW50ZWQgPT09IGZhbHNlKSByZXR1cm4gZmFsc2U7XG5cbiAgICAgIHZhciB0aGlzTm9kZSA9IF90aGlzLmZpbmRET01Ob2RlKCk7XG5cbiAgICAgIGlmICh0aGlzTm9kZSkge1xuICAgICAgICAvLyBSZW1vdmUgdXNlci1zZWxlY3QgaGFja1xuICAgICAgICBpZiAoX3RoaXMucHJvcHMuZW5hYmxlVXNlclNlbGVjdEhhY2spICgwLCBfZG9tRm5zLnJlbW92ZVVzZXJTZWxlY3RTdHlsZXMpKHRoaXNOb2RlLm93bmVyRG9jdW1lbnQpO1xuICAgICAgfVxuXG4gICAgICAoMCwgX2xvZy5kZWZhdWx0KSgnRHJhZ2dhYmxlQ29yZTogaGFuZGxlRHJhZ1N0b3A6ICVqJywgY29yZUV2ZW50KTsgLy8gUmVzZXQgdGhlIGVsLlxuXG4gICAgICBfdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgIGRyYWdnaW5nOiBmYWxzZSxcbiAgICAgICAgbGFzdFg6IE5hTixcbiAgICAgICAgbGFzdFk6IE5hTlxuICAgICAgfSk7XG5cbiAgICAgIGlmICh0aGlzTm9kZSkge1xuICAgICAgICAvLyBSZW1vdmUgZXZlbnQgaGFuZGxlcnNcbiAgICAgICAgKDAsIF9sb2cuZGVmYXVsdCkoJ0RyYWdnYWJsZUNvcmU6IFJlbW92aW5nIGhhbmRsZXJzJyk7XG4gICAgICAgICgwLCBfZG9tRm5zLnJlbW92ZUV2ZW50KSh0aGlzTm9kZS5vd25lckRvY3VtZW50LCBkcmFnRXZlbnRGb3IubW92ZSwgX3RoaXMuaGFuZGxlRHJhZyk7XG4gICAgICAgICgwLCBfZG9tRm5zLnJlbW92ZUV2ZW50KSh0aGlzTm9kZS5vd25lckRvY3VtZW50LCBkcmFnRXZlbnRGb3Iuc3RvcCwgX3RoaXMuaGFuZGxlRHJhZ1N0b3ApO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcIm9uTW91c2VEb3duXCIsIGZ1bmN0aW9uIChlKSB7XG4gICAgICBkcmFnRXZlbnRGb3IgPSBldmVudHNGb3IubW91c2U7IC8vIG9uIHRvdWNoc2NyZWVuIGxhcHRvcHMgd2UgY291bGQgc3dpdGNoIGJhY2sgdG8gbW91c2VcblxuICAgICAgcmV0dXJuIF90aGlzLmhhbmRsZURyYWdTdGFydChlKTtcbiAgICB9KTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJvbk1vdXNlVXBcIiwgZnVuY3Rpb24gKGUpIHtcbiAgICAgIGRyYWdFdmVudEZvciA9IGV2ZW50c0Zvci5tb3VzZTtcbiAgICAgIHJldHVybiBfdGhpcy5oYW5kbGVEcmFnU3RvcChlKTtcbiAgICB9KTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJvblRvdWNoU3RhcnRcIiwgZnVuY3Rpb24gKGUpIHtcbiAgICAgIC8vIFdlJ3JlIG9uIGEgdG91Y2ggZGV2aWNlIG5vdywgc28gY2hhbmdlIHRoZSBldmVudCBoYW5kbGVyc1xuICAgICAgZHJhZ0V2ZW50Rm9yID0gZXZlbnRzRm9yLnRvdWNoO1xuICAgICAgcmV0dXJuIF90aGlzLmhhbmRsZURyYWdTdGFydChlKTtcbiAgICB9KTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJvblRvdWNoRW5kXCIsIGZ1bmN0aW9uIChlKSB7XG4gICAgICAvLyBXZSdyZSBvbiBhIHRvdWNoIGRldmljZSBub3csIHNvIGNoYW5nZSB0aGUgZXZlbnQgaGFuZGxlcnNcbiAgICAgIGRyYWdFdmVudEZvciA9IGV2ZW50c0Zvci50b3VjaDtcbiAgICAgIHJldHVybiBfdGhpcy5oYW5kbGVEcmFnU3RvcChlKTtcbiAgICB9KTtcblxuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhEcmFnZ2FibGVDb3JlLCBbe1xuICAgIGtleTogXCJjb21wb25lbnREaWRNb3VudFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICAgIHRoaXMubW91bnRlZCA9IHRydWU7IC8vIFRvdWNoIGhhbmRsZXJzIG11c3QgYmUgYWRkZWQgd2l0aCB7cGFzc2l2ZTogZmFsc2V9IHRvIGJlIGNhbmNlbGFibGUuXG4gICAgICAvLyBodHRwczovL2RldmVsb3BlcnMuZ29vZ2xlLmNvbS93ZWIvdXBkYXRlcy8yMDE3LzAxL3Njcm9sbGluZy1pbnRlcnZlbnRpb25cblxuICAgICAgdmFyIHRoaXNOb2RlID0gdGhpcy5maW5kRE9NTm9kZSgpO1xuXG4gICAgICBpZiAodGhpc05vZGUpIHtcbiAgICAgICAgKDAsIF9kb21GbnMuYWRkRXZlbnQpKHRoaXNOb2RlLCBldmVudHNGb3IudG91Y2guc3RhcnQsIHRoaXMub25Ub3VjaFN0YXJ0LCB7XG4gICAgICAgICAgcGFzc2l2ZTogZmFsc2VcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImNvbXBvbmVudFdpbGxVbm1vdW50XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgICAgdGhpcy5tb3VudGVkID0gZmFsc2U7IC8vIFJlbW92ZSBhbnkgbGVmdG92ZXIgZXZlbnQgaGFuZGxlcnMuIFJlbW92ZSBib3RoIHRvdWNoIGFuZCBtb3VzZSBoYW5kbGVycyBpbiBjYXNlXG4gICAgICAvLyBzb21lIGJyb3dzZXIgcXVpcmsgY2F1c2VkIGEgdG91Y2ggZXZlbnQgdG8gZmlyZSBkdXJpbmcgYSBtb3VzZSBtb3ZlLCBvciB2aWNlIHZlcnNhLlxuXG4gICAgICB2YXIgdGhpc05vZGUgPSB0aGlzLmZpbmRET01Ob2RlKCk7XG5cbiAgICAgIGlmICh0aGlzTm9kZSkge1xuICAgICAgICB2YXIgb3duZXJEb2N1bWVudCA9IHRoaXNOb2RlLm93bmVyRG9jdW1lbnQ7XG4gICAgICAgICgwLCBfZG9tRm5zLnJlbW92ZUV2ZW50KShvd25lckRvY3VtZW50LCBldmVudHNGb3IubW91c2UubW92ZSwgdGhpcy5oYW5kbGVEcmFnKTtcbiAgICAgICAgKDAsIF9kb21GbnMucmVtb3ZlRXZlbnQpKG93bmVyRG9jdW1lbnQsIGV2ZW50c0Zvci50b3VjaC5tb3ZlLCB0aGlzLmhhbmRsZURyYWcpO1xuICAgICAgICAoMCwgX2RvbUZucy5yZW1vdmVFdmVudCkob3duZXJEb2N1bWVudCwgZXZlbnRzRm9yLm1vdXNlLnN0b3AsIHRoaXMuaGFuZGxlRHJhZ1N0b3ApO1xuICAgICAgICAoMCwgX2RvbUZucy5yZW1vdmVFdmVudCkob3duZXJEb2N1bWVudCwgZXZlbnRzRm9yLnRvdWNoLnN0b3AsIHRoaXMuaGFuZGxlRHJhZ1N0b3ApO1xuICAgICAgICAoMCwgX2RvbUZucy5yZW1vdmVFdmVudCkodGhpc05vZGUsIGV2ZW50c0Zvci50b3VjaC5zdGFydCwgdGhpcy5vblRvdWNoU3RhcnQsIHtcbiAgICAgICAgICBwYXNzaXZlOiBmYWxzZVxuICAgICAgICB9KTtcbiAgICAgICAgaWYgKHRoaXMucHJvcHMuZW5hYmxlVXNlclNlbGVjdEhhY2spICgwLCBfZG9tRm5zLnJlbW92ZVVzZXJTZWxlY3RTdHlsZXMpKG93bmVyRG9jdW1lbnQpO1xuICAgICAgfVxuICAgIH0gLy8gUmVhY3QgU3RyaWN0IE1vZGUgY29tcGF0aWJpbGl0eTogaWYgYG5vZGVSZWZgIGlzIHBhc3NlZCwgd2Ugd2lsbCB1c2UgaXQgaW5zdGVhZCBvZiB0cnlpbmcgdG8gZmluZFxuICAgIC8vIHRoZSB1bmRlcmx5aW5nIERPTSBub2RlIG91cnNlbHZlcy4gU2VlIHRoZSBSRUFETUUgZm9yIG1vcmUgaW5mb3JtYXRpb24uXG5cbiAgfSwge1xuICAgIGtleTogXCJmaW5kRE9NTm9kZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBmaW5kRE9NTm9kZSgpXG4gICAgLyo6ID9IVE1MRWxlbWVudCovXG4gICAge1xuICAgICAgcmV0dXJuIHRoaXMucHJvcHMubm9kZVJlZiA/IHRoaXMucHJvcHMubm9kZVJlZi5jdXJyZW50IDogX3JlYWN0RG9tLmRlZmF1bHQuZmluZERPTU5vZGUodGhpcyk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInJlbmRlclwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICAvLyBSZXVzZSB0aGUgY2hpbGQgcHJvdmlkZWRcbiAgICAgIC8vIFRoaXMgbWFrZXMgaXQgZmxleGlibGUgdG8gdXNlIHdoYXRldmVyIGVsZW1lbnQgaXMgd2FudGVkIChkaXYsIHVsLCBldGMpXG4gICAgICByZXR1cm4gUmVhY3QuY2xvbmVFbGVtZW50KFJlYWN0LkNoaWxkcmVuLm9ubHkodGhpcy5wcm9wcy5jaGlsZHJlbiksIHtcbiAgICAgICAgLy8gTm90ZTogbW91c2VNb3ZlIGhhbmRsZXIgaXMgYXR0YWNoZWQgdG8gZG9jdW1lbnQgc28gaXQgd2lsbCBzdGlsbCBmdW5jdGlvblxuICAgICAgICAvLyB3aGVuIHRoZSB1c2VyIGRyYWdzIHF1aWNrbHkgYW5kIGxlYXZlcyB0aGUgYm91bmRzIG9mIHRoZSBlbGVtZW50LlxuICAgICAgICBvbk1vdXNlRG93bjogdGhpcy5vbk1vdXNlRG93bixcbiAgICAgICAgb25Nb3VzZVVwOiB0aGlzLm9uTW91c2VVcCxcbiAgICAgICAgLy8gb25Ub3VjaFN0YXJ0IGlzIGFkZGVkIG9uIGBjb21wb25lbnREaWRNb3VudGAgc28gdGhleSBjYW4gYmUgYWRkZWQgd2l0aFxuICAgICAgICAvLyB7cGFzc2l2ZTogZmFsc2V9LCB3aGljaCBhbGxvd3MgaXQgdG8gY2FuY2VsLiBTZWUgXG4gICAgICAgIC8vIGh0dHBzOi8vZGV2ZWxvcGVycy5nb29nbGUuY29tL3dlYi91cGRhdGVzLzIwMTcvMDEvc2Nyb2xsaW5nLWludGVydmVudGlvblxuICAgICAgICBvblRvdWNoRW5kOiB0aGlzLm9uVG91Y2hFbmRcbiAgICAgIH0pO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBEcmFnZ2FibGVDb3JlO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBEcmFnZ2FibGVDb3JlO1xuXG5fZGVmaW5lUHJvcGVydHkoRHJhZ2dhYmxlQ29yZSwgXCJkaXNwbGF5TmFtZVwiLCAnRHJhZ2dhYmxlQ29yZScpO1xuXG5fZGVmaW5lUHJvcGVydHkoRHJhZ2dhYmxlQ29yZSwgXCJwcm9wVHlwZXNcIiwge1xuICAvKipcbiAgICogYGFsbG93QW55Q2xpY2tgIGFsbG93cyBkcmFnZ2luZyB1c2luZyBhbnkgbW91c2UgYnV0dG9uLlxuICAgKiBCeSBkZWZhdWx0LCB3ZSBvbmx5IGFjY2VwdCB0aGUgbGVmdCBidXR0b24uXG4gICAqXG4gICAqIERlZmF1bHRzIHRvIGBmYWxzZWAuXG4gICAqL1xuICBhbGxvd0FueUNsaWNrOiBfcHJvcFR5cGVzLmRlZmF1bHQuYm9vbCxcblxuICAvKipcbiAgICogYGRpc2FibGVkYCwgaWYgdHJ1ZSwgc3RvcHMgdGhlIDxEcmFnZ2FibGU+IGZyb20gZHJhZ2dpbmcuIEFsbCBoYW5kbGVycyxcbiAgICogd2l0aCB0aGUgZXhjZXB0aW9uIG9mIGBvbk1vdXNlRG93bmAsIHdpbGwgbm90IGZpcmUuXG4gICAqL1xuICBkaXNhYmxlZDogX3Byb3BUeXBlcy5kZWZhdWx0LmJvb2wsXG5cbiAgLyoqXG4gICAqIEJ5IGRlZmF1bHQsIHdlIGFkZCAndXNlci1zZWxlY3Q6bm9uZScgYXR0cmlidXRlcyB0byB0aGUgZG9jdW1lbnQgYm9keVxuICAgKiB0byBwcmV2ZW50IHVnbHkgdGV4dCBzZWxlY3Rpb24gZHVyaW5nIGRyYWcuIElmIHRoaXMgaXMgY2F1c2luZyBwcm9ibGVtc1xuICAgKiBmb3IgeW91ciBhcHAsIHNldCB0aGlzIHRvIGBmYWxzZWAuXG4gICAqL1xuICBlbmFibGVVc2VyU2VsZWN0SGFjazogX3Byb3BUeXBlcy5kZWZhdWx0LmJvb2wsXG5cbiAgLyoqXG4gICAqIGBvZmZzZXRQYXJlbnRgLCBpZiBzZXQsIHVzZXMgdGhlIHBhc3NlZCBET00gbm9kZSB0byBjb21wdXRlIGRyYWcgb2Zmc2V0c1xuICAgKiBpbnN0ZWFkIG9mIHVzaW5nIHRoZSBwYXJlbnQgbm9kZS5cbiAgICovXG4gIG9mZnNldFBhcmVudDogZnVuY3Rpb24gb2Zmc2V0UGFyZW50KHByb3BzXG4gIC8qOiBEcmFnZ2FibGVDb3JlUHJvcHMqL1xuICAsIHByb3BOYW1lXG4gIC8qOiAkS2V5czxEcmFnZ2FibGVDb3JlUHJvcHM+Ki9cbiAgKSB7XG4gICAgaWYgKHByb3BzW3Byb3BOYW1lXSAmJiBwcm9wc1twcm9wTmFtZV0ubm9kZVR5cGUgIT09IDEpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignRHJhZ2dhYmxlXFwncyBvZmZzZXRQYXJlbnQgbXVzdCBiZSBhIERPTSBOb2RlLicpO1xuICAgIH1cbiAgfSxcblxuICAvKipcbiAgICogYGdyaWRgIHNwZWNpZmllcyB0aGUgeCBhbmQgeSB0aGF0IGRyYWdnaW5nIHNob3VsZCBzbmFwIHRvLlxuICAgKi9cbiAgZ3JpZDogX3Byb3BUeXBlcy5kZWZhdWx0LmFycmF5T2YoX3Byb3BUeXBlcy5kZWZhdWx0Lm51bWJlciksXG5cbiAgLyoqXG4gICAqIGBoYW5kbGVgIHNwZWNpZmllcyBhIHNlbGVjdG9yIHRvIGJlIHVzZWQgYXMgdGhlIGhhbmRsZSB0aGF0IGluaXRpYXRlcyBkcmFnLlxuICAgKlxuICAgKiBFeGFtcGxlOlxuICAgKlxuICAgKiBgYGBqc3hcbiAgICogICBsZXQgQXBwID0gUmVhY3QuY3JlYXRlQ2xhc3Moe1xuICAgKiAgICAgICByZW5kZXI6IGZ1bmN0aW9uICgpIHtcbiAgICogICAgICAgICByZXR1cm4gKFxuICAgKiAgICAgICAgICAgIDxEcmFnZ2FibGUgaGFuZGxlPVwiLmhhbmRsZVwiPlxuICAgKiAgICAgICAgICAgICAgPGRpdj5cbiAgICogICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImhhbmRsZVwiPkNsaWNrIG1lIHRvIGRyYWc8L2Rpdj5cbiAgICogICAgICAgICAgICAgICAgICA8ZGl2PlRoaXMgaXMgc29tZSBvdGhlciBjb250ZW50PC9kaXY+XG4gICAqICAgICAgICAgICAgICA8L2Rpdj5cbiAgICogICAgICAgICAgIDwvRHJhZ2dhYmxlPlxuICAgKiAgICAgICAgICk7XG4gICAqICAgICAgIH1cbiAgICogICB9KTtcbiAgICogYGBgXG4gICAqL1xuICBoYW5kbGU6IF9wcm9wVHlwZXMuZGVmYXVsdC5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIGBjYW5jZWxgIHNwZWNpZmllcyBhIHNlbGVjdG9yIHRvIGJlIHVzZWQgdG8gcHJldmVudCBkcmFnIGluaXRpYWxpemF0aW9uLlxuICAgKlxuICAgKiBFeGFtcGxlOlxuICAgKlxuICAgKiBgYGBqc3hcbiAgICogICBsZXQgQXBwID0gUmVhY3QuY3JlYXRlQ2xhc3Moe1xuICAgKiAgICAgICByZW5kZXI6IGZ1bmN0aW9uICgpIHtcbiAgICogICAgICAgICAgIHJldHVybihcbiAgICogICAgICAgICAgICAgICA8RHJhZ2dhYmxlIGNhbmNlbD1cIi5jYW5jZWxcIj5cbiAgICogICAgICAgICAgICAgICAgICAgPGRpdj5cbiAgICogICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImNhbmNlbFwiPllvdSBjYW4ndCBkcmFnIGZyb20gaGVyZTwvZGl2PlxuICAgKiAgICAgICAgICAgICAgICAgICAgIDxkaXY+RHJhZ2dpbmcgaGVyZSB3b3JrcyBmaW5lPC9kaXY+XG4gICAqICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgKiAgICAgICAgICAgICAgIDwvRHJhZ2dhYmxlPlxuICAgKiAgICAgICAgICAgKTtcbiAgICogICAgICAgfVxuICAgKiAgIH0pO1xuICAgKiBgYGBcbiAgICovXG4gIGNhbmNlbDogX3Byb3BUeXBlcy5kZWZhdWx0LnN0cmluZyxcblxuICAvKiBJZiBydW5uaW5nIGluIFJlYWN0IFN0cmljdCBtb2RlLCBSZWFjdERPTS5maW5kRE9NTm9kZSgpIGlzIGRlcHJlY2F0ZWQuXG4gICAqIFVuZm9ydHVuYXRlbHksIGluIG9yZGVyIGZvciA8RHJhZ2dhYmxlPiB0byB3b3JrIHByb3Blcmx5LCB3ZSBuZWVkIHJhdyBhY2Nlc3NcbiAgICogdG8gdGhlIHVuZGVybHlpbmcgRE9NIG5vZGUuIElmIHlvdSB3YW50IHRvIGF2b2lkIHRoZSB3YXJuaW5nLCBwYXNzIGEgYG5vZGVSZWZgXG4gICAqIGFzIGluIHRoaXMgZXhhbXBsZTpcbiAgICpcbiAgICogZnVuY3Rpb24gTXlDb21wb25lbnQoKSB7XG4gICAqICAgY29uc3Qgbm9kZVJlZiA9IFJlYWN0LnVzZVJlZihudWxsKTtcbiAgICogICByZXR1cm4gKFxuICAgKiAgICAgPERyYWdnYWJsZSBub2RlUmVmPXtub2RlUmVmfT5cbiAgICogICAgICAgPGRpdiByZWY9e25vZGVSZWZ9PkV4YW1wbGUgVGFyZ2V0PC9kaXY+XG4gICAqICAgICA8L0RyYWdnYWJsZT5cbiAgICogICApO1xuICAgKiB9XG4gICAqXG4gICAqIFRoaXMgY2FuIGJlIHVzZWQgZm9yIGFyYml0cmFyaWx5IG5lc3RlZCBjb21wb25lbnRzLCBzbyBsb25nIGFzIHRoZSByZWYgZW5kcyB1cFxuICAgKiBwb2ludGluZyB0byB0aGUgYWN0dWFsIGNoaWxkIERPTSBub2RlIGFuZCBub3QgYSBjdXN0b20gY29tcG9uZW50LlxuICAgKi9cbiAgbm9kZVJlZjogX3Byb3BUeXBlcy5kZWZhdWx0Lm9iamVjdCxcblxuICAvKipcbiAgICogQ2FsbGVkIHdoZW4gZHJhZ2dpbmcgc3RhcnRzLlxuICAgKiBJZiB0aGlzIGZ1bmN0aW9uIHJldHVybnMgdGhlIGJvb2xlYW4gZmFsc2UsIGRyYWdnaW5nIHdpbGwgYmUgY2FuY2VsZWQuXG4gICAqL1xuICBvblN0YXJ0OiBfcHJvcFR5cGVzLmRlZmF1bHQuZnVuYyxcblxuICAvKipcbiAgICogQ2FsbGVkIHdoaWxlIGRyYWdnaW5nLlxuICAgKiBJZiB0aGlzIGZ1bmN0aW9uIHJldHVybnMgdGhlIGJvb2xlYW4gZmFsc2UsIGRyYWdnaW5nIHdpbGwgYmUgY2FuY2VsZWQuXG4gICAqL1xuICBvbkRyYWc6IF9wcm9wVHlwZXMuZGVmYXVsdC5mdW5jLFxuXG4gIC8qKlxuICAgKiBDYWxsZWQgd2hlbiBkcmFnZ2luZyBzdG9wcy5cbiAgICogSWYgdGhpcyBmdW5jdGlvbiByZXR1cm5zIHRoZSBib29sZWFuIGZhbHNlLCB0aGUgZHJhZyB3aWxsIHJlbWFpbiBhY3RpdmUuXG4gICAqL1xuICBvblN0b3A6IF9wcm9wVHlwZXMuZGVmYXVsdC5mdW5jLFxuXG4gIC8qKlxuICAgKiBBIHdvcmthcm91bmQgb3B0aW9uIHdoaWNoIGNhbiBiZSBwYXNzZWQgaWYgb25Nb3VzZURvd24gbmVlZHMgdG8gYmUgYWNjZXNzZWQsXG4gICAqIHNpbmNlIGl0J2xsIGFsd2F5cyBiZSBibG9ja2VkIChhcyB0aGVyZSBpcyBpbnRlcm5hbCB1c2Ugb2Ygb25Nb3VzZURvd24pXG4gICAqL1xuICBvbk1vdXNlRG93bjogX3Byb3BUeXBlcy5kZWZhdWx0LmZ1bmMsXG5cbiAgLyoqXG4gICAqIGBzY2FsZWAsIGlmIHNldCwgYXBwbGllcyBzY2FsaW5nIHdoaWxlIGRyYWdnaW5nIGFuIGVsZW1lbnRcbiAgICovXG4gIHNjYWxlOiBfcHJvcFR5cGVzLmRlZmF1bHQubnVtYmVyLFxuXG4gIC8qKlxuICAgKiBUaGVzZSBwcm9wZXJ0aWVzIHNob3VsZCBiZSBkZWZpbmVkIG9uIHRoZSBjaGlsZCwgbm90IGhlcmUuXG4gICAqL1xuICBjbGFzc05hbWU6IF9zaGltcy5kb250U2V0TWUsXG4gIHN0eWxlOiBfc2hpbXMuZG9udFNldE1lLFxuICB0cmFuc2Zvcm06IF9zaGltcy5kb250U2V0TWVcbn0pO1xuXG5fZGVmaW5lUHJvcGVydHkoRHJhZ2dhYmxlQ29yZSwgXCJkZWZhdWx0UHJvcHNcIiwge1xuICBhbGxvd0FueUNsaWNrOiBmYWxzZSxcbiAgLy8gYnkgZGVmYXVsdCBvbmx5IGFjY2VwdCBsZWZ0IGNsaWNrXG4gIGNhbmNlbDogbnVsbCxcbiAgZGlzYWJsZWQ6IGZhbHNlLFxuICBlbmFibGVVc2VyU2VsZWN0SGFjazogdHJ1ZSxcbiAgb2Zmc2V0UGFyZW50OiBudWxsLFxuICBoYW5kbGU6IG51bGwsXG4gIGdyaWQ6IG51bGwsXG4gIHRyYW5zZm9ybTogbnVsbCxcbiAgb25TdGFydDogZnVuY3Rpb24gb25TdGFydCgpIHt9LFxuICBvbkRyYWc6IGZ1bmN0aW9uIG9uRHJhZygpIHt9LFxuICBvblN0b3A6IGZ1bmN0aW9uIG9uU3RvcCgpIHt9LFxuICBvbk1vdXNlRG93bjogZnVuY3Rpb24gb25Nb3VzZURvd24oKSB7fSxcbiAgc2NhbGU6IDFcbn0pOyIsIm1vZHVsZS5leHBvcnRzID0gQXJyYXkuaXNBcnJheSB8fCBmdW5jdGlvbiAoYXJyKSB7XG4gIHJldHVybiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoYXJyKSA9PSAnW29iamVjdCBBcnJheV0nO1xufTtcbiIsIlwidXNlIHN0cmljdFwiO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0cy5kZWZhdWx0ID0gY3JlYXRlV2ViU3RvcmFnZTtcblxudmFyIF9nZXRTdG9yYWdlID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9nZXRTdG9yYWdlXCIpKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZnVuY3Rpb24gY3JlYXRlV2ViU3RvcmFnZSh0eXBlKSB7XG4gIHZhciBzdG9yYWdlID0gKDAsIF9nZXRTdG9yYWdlLmRlZmF1bHQpKHR5cGUpO1xuICByZXR1cm4ge1xuICAgIGdldEl0ZW06IGZ1bmN0aW9uIGdldEl0ZW0oa2V5KSB7XG4gICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICByZXNvbHZlKHN0b3JhZ2UuZ2V0SXRlbShrZXkpKTtcbiAgICAgIH0pO1xuICAgIH0sXG4gICAgc2V0SXRlbTogZnVuY3Rpb24gc2V0SXRlbShrZXksIGl0ZW0pIHtcbiAgICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgIHJlc29sdmUoc3RvcmFnZS5zZXRJdGVtKGtleSwgaXRlbSkpO1xuICAgICAgfSk7XG4gICAgfSxcbiAgICByZW1vdmVJdGVtOiBmdW5jdGlvbiByZW1vdmVJdGVtKGtleSkge1xuICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgcmVzb2x2ZShzdG9yYWdlLnJlbW92ZUl0ZW0oa2V5KSk7XG4gICAgICB9KTtcbiAgICB9XG4gIH07XG59IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5leHBvcnRzLmRlZmF1bHQgPSBnZXRTdG9yYWdlO1xuXG5mdW5jdGlvbiBfdHlwZW9mKG9iaikgeyBpZiAodHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIpIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9OyB9IGVsc2UgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH07IH0gcmV0dXJuIF90eXBlb2Yob2JqKTsgfVxuXG5mdW5jdGlvbiBub29wKCkge31cblxudmFyIG5vb3BTdG9yYWdlID0ge1xuICBnZXRJdGVtOiBub29wLFxuICBzZXRJdGVtOiBub29wLFxuICByZW1vdmVJdGVtOiBub29wXG59O1xuXG5mdW5jdGlvbiBoYXNTdG9yYWdlKHN0b3JhZ2VUeXBlKSB7XG4gIGlmICgodHlwZW9mIHNlbGYgPT09IFwidW5kZWZpbmVkXCIgPyBcInVuZGVmaW5lZFwiIDogX3R5cGVvZihzZWxmKSkgIT09ICdvYmplY3QnIHx8ICEoc3RvcmFnZVR5cGUgaW4gc2VsZikpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICB0cnkge1xuICAgIHZhciBzdG9yYWdlID0gc2VsZltzdG9yYWdlVHlwZV07XG4gICAgdmFyIHRlc3RLZXkgPSBcInJlZHV4LXBlcnNpc3QgXCIuY29uY2F0KHN0b3JhZ2VUeXBlLCBcIiB0ZXN0XCIpO1xuICAgIHN0b3JhZ2Uuc2V0SXRlbSh0ZXN0S2V5LCAndGVzdCcpO1xuICAgIHN0b3JhZ2UuZ2V0SXRlbSh0ZXN0S2V5KTtcbiAgICBzdG9yYWdlLnJlbW92ZUl0ZW0odGVzdEtleSk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgY29uc29sZS53YXJuKFwicmVkdXgtcGVyc2lzdCBcIi5jb25jYXQoc3RvcmFnZVR5cGUsIFwiIHRlc3QgZmFpbGVkLCBwZXJzaXN0ZW5jZSB3aWxsIGJlIGRpc2FibGVkLlwiKSk7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgcmV0dXJuIHRydWU7XG59XG5cbmZ1bmN0aW9uIGdldFN0b3JhZ2UodHlwZSkge1xuICB2YXIgc3RvcmFnZVR5cGUgPSBcIlwiLmNvbmNhdCh0eXBlLCBcIlN0b3JhZ2VcIik7XG4gIGlmIChoYXNTdG9yYWdlKHN0b3JhZ2VUeXBlKSkgcmV0dXJuIHNlbGZbc3RvcmFnZVR5cGVdO2Vsc2Uge1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBjb25zb2xlLmVycm9yKFwicmVkdXgtcGVyc2lzdCBmYWlsZWQgdG8gY3JlYXRlIHN5bmMgc3RvcmFnZS4gZmFsbGluZyBiYWNrIHRvIG5vb3Agc3RvcmFnZS5cIik7XG4gICAgfVxuXG4gICAgcmV0dXJuIG5vb3BTdG9yYWdlO1xuICB9XG59IiwidmFyIGFwaSA9IHJlcXVpcmUoXCIhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCIpO1xuICAgICAgICAgICAgdmFyIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL3N0eWxlLmNzc1wiKTtcblxuICAgICAgICAgICAgY29udGVudCA9IGNvbnRlbnQuX19lc01vZHVsZSA/IGNvbnRlbnQuZGVmYXVsdCA6IGNvbnRlbnQ7XG5cbiAgICAgICAgICAgIGlmICh0eXBlb2YgY29udGVudCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgY29udGVudCA9IFtbbW9kdWxlLmlkLCBjb250ZW50LCAnJ11dO1xuICAgICAgICAgICAgfVxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLmluc2VydCA9IFwiaGVhZFwiO1xub3B0aW9ucy5zaW5nbGV0b24gPSBmYWxzZTtcblxudmFyIHVwZGF0ZSA9IGFwaShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbm1vZHVsZS5leHBvcnRzID0gY29udGVudC5sb2NhbHMgfHwge307IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBpc09sZElFID0gZnVuY3Rpb24gaXNPbGRJRSgpIHtcbiAgdmFyIG1lbW87XG4gIHJldHVybiBmdW5jdGlvbiBtZW1vcml6ZSgpIHtcbiAgICBpZiAodHlwZW9mIG1lbW8gPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAvLyBUZXN0IGZvciBJRSA8PSA5IGFzIHByb3Bvc2VkIGJ5IEJyb3dzZXJoYWNrc1xuICAgICAgLy8gQHNlZSBodHRwOi8vYnJvd3NlcmhhY2tzLmNvbS8jaGFjay1lNzFkODY5MmY2NTMzNDE3M2ZlZTcxNWMyMjJjYjgwNVxuICAgICAgLy8gVGVzdHMgZm9yIGV4aXN0ZW5jZSBvZiBzdGFuZGFyZCBnbG9iYWxzIGlzIHRvIGFsbG93IHN0eWxlLWxvYWRlclxuICAgICAgLy8gdG8gb3BlcmF0ZSBjb3JyZWN0bHkgaW50byBub24tc3RhbmRhcmQgZW52aXJvbm1lbnRzXG4gICAgICAvLyBAc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS93ZWJwYWNrLWNvbnRyaWIvc3R5bGUtbG9hZGVyL2lzc3Vlcy8xNzdcbiAgICAgIG1lbW8gPSBCb29sZWFuKHdpbmRvdyAmJiBkb2N1bWVudCAmJiBkb2N1bWVudC5hbGwgJiYgIXdpbmRvdy5hdG9iKTtcbiAgICB9XG5cbiAgICByZXR1cm4gbWVtbztcbiAgfTtcbn0oKTtcblxudmFyIGdldFRhcmdldCA9IGZ1bmN0aW9uIGdldFRhcmdldCgpIHtcbiAgdmFyIG1lbW8gPSB7fTtcbiAgcmV0dXJuIGZ1bmN0aW9uIG1lbW9yaXplKHRhcmdldCkge1xuICAgIGlmICh0eXBlb2YgbWVtb1t0YXJnZXRdID09PSAndW5kZWZpbmVkJykge1xuICAgICAgdmFyIHN0eWxlVGFyZ2V0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcih0YXJnZXQpOyAvLyBTcGVjaWFsIGNhc2UgdG8gcmV0dXJuIGhlYWQgb2YgaWZyYW1lIGluc3RlYWQgb2YgaWZyYW1lIGl0c2VsZlxuXG4gICAgICBpZiAod2luZG93LkhUTUxJRnJhbWVFbGVtZW50ICYmIHN0eWxlVGFyZ2V0IGluc3RhbmNlb2Ygd2luZG93LkhUTUxJRnJhbWVFbGVtZW50KSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgLy8gVGhpcyB3aWxsIHRocm93IGFuIGV4Y2VwdGlvbiBpZiBhY2Nlc3MgdG8gaWZyYW1lIGlzIGJsb2NrZWRcbiAgICAgICAgICAvLyBkdWUgdG8gY3Jvc3Mtb3JpZ2luIHJlc3RyaWN0aW9uc1xuICAgICAgICAgIHN0eWxlVGFyZ2V0ID0gc3R5bGVUYXJnZXQuY29udGVudERvY3VtZW50LmhlYWQ7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAvLyBpc3RhbmJ1bCBpZ25vcmUgbmV4dFxuICAgICAgICAgIHN0eWxlVGFyZ2V0ID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBtZW1vW3RhcmdldF0gPSBzdHlsZVRhcmdldDtcbiAgICB9XG5cbiAgICByZXR1cm4gbWVtb1t0YXJnZXRdO1xuICB9O1xufSgpO1xuXG52YXIgc3R5bGVzSW5Eb20gPSBbXTtcblxuZnVuY3Rpb24gZ2V0SW5kZXhCeUlkZW50aWZpZXIoaWRlbnRpZmllcikge1xuICB2YXIgcmVzdWx0ID0gLTE7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdHlsZXNJbkRvbS5sZW5ndGg7IGkrKykge1xuICAgIGlmIChzdHlsZXNJbkRvbVtpXS5pZGVudGlmaWVyID09PSBpZGVudGlmaWVyKSB7XG4gICAgICByZXN1bHQgPSBpO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZnVuY3Rpb24gbW9kdWxlc1RvRG9tKGxpc3QsIG9wdGlvbnMpIHtcbiAgdmFyIGlkQ291bnRNYXAgPSB7fTtcbiAgdmFyIGlkZW50aWZpZXJzID0gW107XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGl0ZW0gPSBsaXN0W2ldO1xuICAgIHZhciBpZCA9IG9wdGlvbnMuYmFzZSA/IGl0ZW1bMF0gKyBvcHRpb25zLmJhc2UgOiBpdGVtWzBdO1xuICAgIHZhciBjb3VudCA9IGlkQ291bnRNYXBbaWRdIHx8IDA7XG4gICAgdmFyIGlkZW50aWZpZXIgPSBcIlwiLmNvbmNhdChpZCwgXCIgXCIpLmNvbmNhdChjb3VudCk7XG4gICAgaWRDb3VudE1hcFtpZF0gPSBjb3VudCArIDE7XG4gICAgdmFyIGluZGV4ID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoaWRlbnRpZmllcik7XG4gICAgdmFyIG9iaiA9IHtcbiAgICAgIGNzczogaXRlbVsxXSxcbiAgICAgIG1lZGlhOiBpdGVtWzJdLFxuICAgICAgc291cmNlTWFwOiBpdGVtWzNdXG4gICAgfTtcblxuICAgIGlmIChpbmRleCAhPT0gLTEpIHtcbiAgICAgIHN0eWxlc0luRG9tW2luZGV4XS5yZWZlcmVuY2VzKys7XG4gICAgICBzdHlsZXNJbkRvbVtpbmRleF0udXBkYXRlcihvYmopO1xuICAgIH0gZWxzZSB7XG4gICAgICBzdHlsZXNJbkRvbS5wdXNoKHtcbiAgICAgICAgaWRlbnRpZmllcjogaWRlbnRpZmllcixcbiAgICAgICAgdXBkYXRlcjogYWRkU3R5bGUob2JqLCBvcHRpb25zKSxcbiAgICAgICAgcmVmZXJlbmNlczogMVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgaWRlbnRpZmllcnMucHVzaChpZGVudGlmaWVyKTtcbiAgfVxuXG4gIHJldHVybiBpZGVudGlmaWVycztcbn1cblxuZnVuY3Rpb24gaW5zZXJ0U3R5bGVFbGVtZW50KG9wdGlvbnMpIHtcbiAgdmFyIHN0eWxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3R5bGUnKTtcbiAgdmFyIGF0dHJpYnV0ZXMgPSBvcHRpb25zLmF0dHJpYnV0ZXMgfHwge307XG5cbiAgaWYgKHR5cGVvZiBhdHRyaWJ1dGVzLm5vbmNlID09PSAndW5kZWZpbmVkJykge1xuICAgIHZhciBub25jZSA9IHR5cGVvZiBfX3dlYnBhY2tfbm9uY2VfXyAhPT0gJ3VuZGVmaW5lZCcgPyBfX3dlYnBhY2tfbm9uY2VfXyA6IG51bGw7XG5cbiAgICBpZiAobm9uY2UpIHtcbiAgICAgIGF0dHJpYnV0ZXMubm9uY2UgPSBub25jZTtcbiAgICB9XG4gIH1cblxuICBPYmplY3Qua2V5cyhhdHRyaWJ1dGVzKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICBzdHlsZS5zZXRBdHRyaWJ1dGUoa2V5LCBhdHRyaWJ1dGVzW2tleV0pO1xuICB9KTtcblxuICBpZiAodHlwZW9mIG9wdGlvbnMuaW5zZXJ0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgb3B0aW9ucy5pbnNlcnQoc3R5bGUpO1xuICB9IGVsc2Uge1xuICAgIHZhciB0YXJnZXQgPSBnZXRUYXJnZXQob3B0aW9ucy5pbnNlcnQgfHwgJ2hlYWQnKTtcblxuICAgIGlmICghdGFyZ2V0KSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJDb3VsZG4ndCBmaW5kIGEgc3R5bGUgdGFyZ2V0LiBUaGlzIHByb2JhYmx5IG1lYW5zIHRoYXQgdGhlIHZhbHVlIGZvciB0aGUgJ2luc2VydCcgcGFyYW1ldGVyIGlzIGludmFsaWQuXCIpO1xuICAgIH1cblxuICAgIHRhcmdldC5hcHBlbmRDaGlsZChzdHlsZSk7XG4gIH1cblxuICByZXR1cm4gc3R5bGU7XG59XG5cbmZ1bmN0aW9uIHJlbW92ZVN0eWxlRWxlbWVudChzdHlsZSkge1xuICAvLyBpc3RhbmJ1bCBpZ25vcmUgaWZcbiAgaWYgKHN0eWxlLnBhcmVudE5vZGUgPT09IG51bGwpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBzdHlsZS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHN0eWxlKTtcbn1cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuXG5cbnZhciByZXBsYWNlVGV4dCA9IGZ1bmN0aW9uIHJlcGxhY2VUZXh0KCkge1xuICB2YXIgdGV4dFN0b3JlID0gW107XG4gIHJldHVybiBmdW5jdGlvbiByZXBsYWNlKGluZGV4LCByZXBsYWNlbWVudCkge1xuICAgIHRleHRTdG9yZVtpbmRleF0gPSByZXBsYWNlbWVudDtcbiAgICByZXR1cm4gdGV4dFN0b3JlLmZpbHRlcihCb29sZWFuKS5qb2luKCdcXG4nKTtcbiAgfTtcbn0oKTtcblxuZnVuY3Rpb24gYXBwbHlUb1NpbmdsZXRvblRhZyhzdHlsZSwgaW5kZXgsIHJlbW92ZSwgb2JqKSB7XG4gIHZhciBjc3MgPSByZW1vdmUgPyAnJyA6IG9iai5tZWRpYSA/IFwiQG1lZGlhIFwiLmNvbmNhdChvYmoubWVkaWEsIFwiIHtcIikuY29uY2F0KG9iai5jc3MsIFwifVwiKSA6IG9iai5jc3M7IC8vIEZvciBvbGQgSUVcblxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgICovXG5cbiAgaWYgKHN0eWxlLnN0eWxlU2hlZXQpIHtcbiAgICBzdHlsZS5zdHlsZVNoZWV0LmNzc1RleHQgPSByZXBsYWNlVGV4dChpbmRleCwgY3NzKTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgY3NzTm9kZSA9IGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGNzcyk7XG4gICAgdmFyIGNoaWxkTm9kZXMgPSBzdHlsZS5jaGlsZE5vZGVzO1xuXG4gICAgaWYgKGNoaWxkTm9kZXNbaW5kZXhdKSB7XG4gICAgICBzdHlsZS5yZW1vdmVDaGlsZChjaGlsZE5vZGVzW2luZGV4XSk7XG4gICAgfVxuXG4gICAgaWYgKGNoaWxkTm9kZXMubGVuZ3RoKSB7XG4gICAgICBzdHlsZS5pbnNlcnRCZWZvcmUoY3NzTm9kZSwgY2hpbGROb2Rlc1tpbmRleF0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBzdHlsZS5hcHBlbmRDaGlsZChjc3NOb2RlKTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gYXBwbHlUb1RhZyhzdHlsZSwgb3B0aW9ucywgb2JqKSB7XG4gIHZhciBjc3MgPSBvYmouY3NzO1xuICB2YXIgbWVkaWEgPSBvYmoubWVkaWE7XG4gIHZhciBzb3VyY2VNYXAgPSBvYmouc291cmNlTWFwO1xuXG4gIGlmIChtZWRpYSkge1xuICAgIHN0eWxlLnNldEF0dHJpYnV0ZSgnbWVkaWEnLCBtZWRpYSk7XG4gIH0gZWxzZSB7XG4gICAgc3R5bGUucmVtb3ZlQXR0cmlidXRlKCdtZWRpYScpO1xuICB9XG5cbiAgaWYgKHNvdXJjZU1hcCAmJiB0eXBlb2YgYnRvYSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBjc3MgKz0gXCJcXG4vKiMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LFwiLmNvbmNhdChidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShzb3VyY2VNYXApKSkpLCBcIiAqL1wiKTtcbiAgfSAvLyBGb3Igb2xkIElFXG5cbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICAqL1xuXG5cbiAgaWYgKHN0eWxlLnN0eWxlU2hlZXQpIHtcbiAgICBzdHlsZS5zdHlsZVNoZWV0LmNzc1RleHQgPSBjc3M7XG4gIH0gZWxzZSB7XG4gICAgd2hpbGUgKHN0eWxlLmZpcnN0Q2hpbGQpIHtcbiAgICAgIHN0eWxlLnJlbW92ZUNoaWxkKHN0eWxlLmZpcnN0Q2hpbGQpO1xuICAgIH1cblxuICAgIHN0eWxlLmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGNzcykpO1xuICB9XG59XG5cbnZhciBzaW5nbGV0b24gPSBudWxsO1xudmFyIHNpbmdsZXRvbkNvdW50ZXIgPSAwO1xuXG5mdW5jdGlvbiBhZGRTdHlsZShvYmosIG9wdGlvbnMpIHtcbiAgdmFyIHN0eWxlO1xuICB2YXIgdXBkYXRlO1xuICB2YXIgcmVtb3ZlO1xuXG4gIGlmIChvcHRpb25zLnNpbmdsZXRvbikge1xuICAgIHZhciBzdHlsZUluZGV4ID0gc2luZ2xldG9uQ291bnRlcisrO1xuICAgIHN0eWxlID0gc2luZ2xldG9uIHx8IChzaW5nbGV0b24gPSBpbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucykpO1xuICAgIHVwZGF0ZSA9IGFwcGx5VG9TaW5nbGV0b25UYWcuYmluZChudWxsLCBzdHlsZSwgc3R5bGVJbmRleCwgZmFsc2UpO1xuICAgIHJlbW92ZSA9IGFwcGx5VG9TaW5nbGV0b25UYWcuYmluZChudWxsLCBzdHlsZSwgc3R5bGVJbmRleCwgdHJ1ZSk7XG4gIH0gZWxzZSB7XG4gICAgc3R5bGUgPSBpbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucyk7XG4gICAgdXBkYXRlID0gYXBwbHlUb1RhZy5iaW5kKG51bGwsIHN0eWxlLCBvcHRpb25zKTtcblxuICAgIHJlbW92ZSA9IGZ1bmN0aW9uIHJlbW92ZSgpIHtcbiAgICAgIHJlbW92ZVN0eWxlRWxlbWVudChzdHlsZSk7XG4gICAgfTtcbiAgfVxuXG4gIHVwZGF0ZShvYmopO1xuICByZXR1cm4gZnVuY3Rpb24gdXBkYXRlU3R5bGUobmV3T2JqKSB7XG4gICAgaWYgKG5ld09iaikge1xuICAgICAgaWYgKG5ld09iai5jc3MgPT09IG9iai5jc3MgJiYgbmV3T2JqLm1lZGlhID09PSBvYmoubWVkaWEgJiYgbmV3T2JqLnNvdXJjZU1hcCA9PT0gb2JqLnNvdXJjZU1hcCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHVwZGF0ZShvYmogPSBuZXdPYmopO1xuICAgIH0gZWxzZSB7XG4gICAgICByZW1vdmUoKTtcbiAgICB9XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGxpc3QsIG9wdGlvbnMpIHtcbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307IC8vIEZvcmNlIHNpbmdsZS10YWcgc29sdXRpb24gb24gSUU2LTksIHdoaWNoIGhhcyBhIGhhcmQgbGltaXQgb24gdGhlICMgb2YgPHN0eWxlPlxuICAvLyB0YWdzIGl0IHdpbGwgYWxsb3cgb24gYSBwYWdlXG5cbiAgaWYgKCFvcHRpb25zLnNpbmdsZXRvbiAmJiB0eXBlb2Ygb3B0aW9ucy5zaW5nbGV0b24gIT09ICdib29sZWFuJykge1xuICAgIG9wdGlvbnMuc2luZ2xldG9uID0gaXNPbGRJRSgpO1xuICB9XG5cbiAgbGlzdCA9IGxpc3QgfHwgW107XG4gIHZhciBsYXN0SWRlbnRpZmllcnMgPSBtb2R1bGVzVG9Eb20obGlzdCwgb3B0aW9ucyk7XG4gIHJldHVybiBmdW5jdGlvbiB1cGRhdGUobmV3TGlzdCkge1xuICAgIG5ld0xpc3QgPSBuZXdMaXN0IHx8IFtdO1xuXG4gICAgaWYgKE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChuZXdMaXN0KSAhPT0gJ1tvYmplY3QgQXJyYXldJykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGFzdElkZW50aWZpZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgaWRlbnRpZmllciA9IGxhc3RJZGVudGlmaWVyc1tpXTtcbiAgICAgIHZhciBpbmRleCA9IGdldEluZGV4QnlJZGVudGlmaWVyKGlkZW50aWZpZXIpO1xuICAgICAgc3R5bGVzSW5Eb21baW5kZXhdLnJlZmVyZW5jZXMtLTtcbiAgICB9XG5cbiAgICB2YXIgbmV3TGFzdElkZW50aWZpZXJzID0gbW9kdWxlc1RvRG9tKG5ld0xpc3QsIG9wdGlvbnMpO1xuXG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGxhc3RJZGVudGlmaWVycy5sZW5ndGg7IF9pKyspIHtcbiAgICAgIHZhciBfaWRlbnRpZmllciA9IGxhc3RJZGVudGlmaWVyc1tfaV07XG5cbiAgICAgIHZhciBfaW5kZXggPSBnZXRJbmRleEJ5SWRlbnRpZmllcihfaWRlbnRpZmllcik7XG5cbiAgICAgIGlmIChzdHlsZXNJbkRvbVtfaW5kZXhdLnJlZmVyZW5jZXMgPT09IDApIHtcbiAgICAgICAgc3R5bGVzSW5Eb21bX2luZGV4XS51cGRhdGVyKCk7XG5cbiAgICAgICAgc3R5bGVzSW5Eb20uc3BsaWNlKF9pbmRleCwgMSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgbGFzdElkZW50aWZpZXJzID0gbmV3TGFzdElkZW50aWZpZXJzO1xuICB9O1xufTsiLCIvLyBJbXBvcnRzXG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCI7XG52YXIgX19fQ1NTX0xPQURFUl9FWFBPUlRfX18gPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18odHJ1ZSk7XG4vLyBNb2R1bGVcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgXCJib2R5IHtcXHJcXG4gICAgbWFyZ2luOiAwIGF1dG87XFxyXFxufVxcclxcblwiLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIndlYnBhY2s6Ly9yZXNvdXJjZXMvc3JjL2xheW91dC9jc3Mvc3R5bGUuY3NzXCJdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCJBQUFBO0lBQ0ksY0FBYztBQUNsQlwiLFwic291cmNlc0NvbnRlbnRcIjpbXCJib2R5IHtcXHJcXG4gICAgbWFyZ2luOiAwIGF1dG87XFxyXFxufVxcclxcblwiXSxcInNvdXJjZVJvb3RcIjpcIlwifV0pO1xuLy8gRXhwb3J0c1xuZXhwb3J0IGRlZmF1bHQgX19fQ1NTX0xPQURFUl9FWFBPUlRfX187XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuZXhwb3J0IHZhciBSZWFjdFJlZHV4Q29udGV4dCA9XG4vKiNfX1BVUkVfXyovXG5SZWFjdC5jcmVhdGVDb250ZXh0KG51bGwpO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICBSZWFjdFJlZHV4Q29udGV4dC5kaXNwbGF5TmFtZSA9ICdSZWFjdFJlZHV4Jztcbn1cblxuZXhwb3J0IGRlZmF1bHQgUmVhY3RSZWR1eENvbnRleHQ7IiwiLy8gRGVmYXVsdCB0byBhIGR1bW15IFwiYmF0Y2hcIiBpbXBsZW1lbnRhdGlvbiB0aGF0IGp1c3QgcnVucyB0aGUgY2FsbGJhY2tcbmZ1bmN0aW9uIGRlZmF1bHROb29wQmF0Y2goY2FsbGJhY2spIHtcbiAgY2FsbGJhY2soKTtcbn1cblxudmFyIGJhdGNoID0gZGVmYXVsdE5vb3BCYXRjaDsgLy8gQWxsb3cgaW5qZWN0aW5nIGFub3RoZXIgYmF0Y2hpbmcgZnVuY3Rpb24gbGF0ZXJcblxuZXhwb3J0IHZhciBzZXRCYXRjaCA9IGZ1bmN0aW9uIHNldEJhdGNoKG5ld0JhdGNoKSB7XG4gIHJldHVybiBiYXRjaCA9IG5ld0JhdGNoO1xufTsgLy8gU3VwcGx5IGEgZ2V0dGVyIGp1c3QgdG8gc2tpcCBkZWFsaW5nIHdpdGggRVNNIGJpbmRpbmdzXG5cbmV4cG9ydCB2YXIgZ2V0QmF0Y2ggPSBmdW5jdGlvbiBnZXRCYXRjaCgpIHtcbiAgcmV0dXJuIGJhdGNoO1xufTsiLCJpbXBvcnQgeyBnZXRCYXRjaCB9IGZyb20gJy4vYmF0Y2gnOyAvLyBlbmNhcHN1bGF0ZXMgdGhlIHN1YnNjcmlwdGlvbiBsb2dpYyBmb3IgY29ubmVjdGluZyBhIGNvbXBvbmVudCB0byB0aGUgcmVkdXggc3RvcmUsIGFzXG4vLyB3ZWxsIGFzIG5lc3Rpbmcgc3Vic2NyaXB0aW9ucyBvZiBkZXNjZW5kYW50IGNvbXBvbmVudHMsIHNvIHRoYXQgd2UgY2FuIGVuc3VyZSB0aGVcbi8vIGFuY2VzdG9yIGNvbXBvbmVudHMgcmUtcmVuZGVyIGJlZm9yZSBkZXNjZW5kYW50c1xuXG52YXIgbnVsbExpc3RlbmVycyA9IHtcbiAgbm90aWZ5OiBmdW5jdGlvbiBub3RpZnkoKSB7fVxufTtcblxuZnVuY3Rpb24gY3JlYXRlTGlzdGVuZXJDb2xsZWN0aW9uKCkge1xuICB2YXIgYmF0Y2ggPSBnZXRCYXRjaCgpO1xuICB2YXIgZmlyc3QgPSBudWxsO1xuICB2YXIgbGFzdCA9IG51bGw7XG4gIHJldHVybiB7XG4gICAgY2xlYXI6IGZ1bmN0aW9uIGNsZWFyKCkge1xuICAgICAgZmlyc3QgPSBudWxsO1xuICAgICAgbGFzdCA9IG51bGw7XG4gICAgfSxcbiAgICBub3RpZnk6IGZ1bmN0aW9uIG5vdGlmeSgpIHtcbiAgICAgIGJhdGNoKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGxpc3RlbmVyID0gZmlyc3Q7XG5cbiAgICAgICAgd2hpbGUgKGxpc3RlbmVyKSB7XG4gICAgICAgICAgbGlzdGVuZXIuY2FsbGJhY2soKTtcbiAgICAgICAgICBsaXN0ZW5lciA9IGxpc3RlbmVyLm5leHQ7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0sXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICB2YXIgbGlzdGVuZXJzID0gW107XG4gICAgICB2YXIgbGlzdGVuZXIgPSBmaXJzdDtcblxuICAgICAgd2hpbGUgKGxpc3RlbmVyKSB7XG4gICAgICAgIGxpc3RlbmVycy5wdXNoKGxpc3RlbmVyKTtcbiAgICAgICAgbGlzdGVuZXIgPSBsaXN0ZW5lci5uZXh0O1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gbGlzdGVuZXJzO1xuICAgIH0sXG4gICAgc3Vic2NyaWJlOiBmdW5jdGlvbiBzdWJzY3JpYmUoY2FsbGJhY2spIHtcbiAgICAgIHZhciBpc1N1YnNjcmliZWQgPSB0cnVlO1xuICAgICAgdmFyIGxpc3RlbmVyID0gbGFzdCA9IHtcbiAgICAgICAgY2FsbGJhY2s6IGNhbGxiYWNrLFxuICAgICAgICBuZXh0OiBudWxsLFxuICAgICAgICBwcmV2OiBsYXN0XG4gICAgICB9O1xuXG4gICAgICBpZiAobGlzdGVuZXIucHJldikge1xuICAgICAgICBsaXN0ZW5lci5wcmV2Lm5leHQgPSBsaXN0ZW5lcjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGZpcnN0ID0gbGlzdGVuZXI7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBmdW5jdGlvbiB1bnN1YnNjcmliZSgpIHtcbiAgICAgICAgaWYgKCFpc1N1YnNjcmliZWQgfHwgZmlyc3QgPT09IG51bGwpIHJldHVybjtcbiAgICAgICAgaXNTdWJzY3JpYmVkID0gZmFsc2U7XG5cbiAgICAgICAgaWYgKGxpc3RlbmVyLm5leHQpIHtcbiAgICAgICAgICBsaXN0ZW5lci5uZXh0LnByZXYgPSBsaXN0ZW5lci5wcmV2O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGxhc3QgPSBsaXN0ZW5lci5wcmV2O1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGxpc3RlbmVyLnByZXYpIHtcbiAgICAgICAgICBsaXN0ZW5lci5wcmV2Lm5leHQgPSBsaXN0ZW5lci5uZXh0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGZpcnN0ID0gbGlzdGVuZXIubmV4dDtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9XG4gIH07XG59XG5cbnZhciBTdWJzY3JpcHRpb24gPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBTdWJzY3JpcHRpb24oc3RvcmUsIHBhcmVudFN1Yikge1xuICAgIHRoaXMuc3RvcmUgPSBzdG9yZTtcbiAgICB0aGlzLnBhcmVudFN1YiA9IHBhcmVudFN1YjtcbiAgICB0aGlzLnVuc3Vic2NyaWJlID0gbnVsbDtcbiAgICB0aGlzLmxpc3RlbmVycyA9IG51bGxMaXN0ZW5lcnM7XG4gICAgdGhpcy5oYW5kbGVDaGFuZ2VXcmFwcGVyID0gdGhpcy5oYW5kbGVDaGFuZ2VXcmFwcGVyLmJpbmQodGhpcyk7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gU3Vic2NyaXB0aW9uLnByb3RvdHlwZTtcblxuICBfcHJvdG8uYWRkTmVzdGVkU3ViID0gZnVuY3Rpb24gYWRkTmVzdGVkU3ViKGxpc3RlbmVyKSB7XG4gICAgdGhpcy50cnlTdWJzY3JpYmUoKTtcbiAgICByZXR1cm4gdGhpcy5saXN0ZW5lcnMuc3Vic2NyaWJlKGxpc3RlbmVyKTtcbiAgfTtcblxuICBfcHJvdG8ubm90aWZ5TmVzdGVkU3VicyA9IGZ1bmN0aW9uIG5vdGlmeU5lc3RlZFN1YnMoKSB7XG4gICAgdGhpcy5saXN0ZW5lcnMubm90aWZ5KCk7XG4gIH07XG5cbiAgX3Byb3RvLmhhbmRsZUNoYW5nZVdyYXBwZXIgPSBmdW5jdGlvbiBoYW5kbGVDaGFuZ2VXcmFwcGVyKCkge1xuICAgIGlmICh0aGlzLm9uU3RhdGVDaGFuZ2UpIHtcbiAgICAgIHRoaXMub25TdGF0ZUNoYW5nZSgpO1xuICAgIH1cbiAgfTtcblxuICBfcHJvdG8uaXNTdWJzY3JpYmVkID0gZnVuY3Rpb24gaXNTdWJzY3JpYmVkKCkge1xuICAgIHJldHVybiBCb29sZWFuKHRoaXMudW5zdWJzY3JpYmUpO1xuICB9O1xuXG4gIF9wcm90by50cnlTdWJzY3JpYmUgPSBmdW5jdGlvbiB0cnlTdWJzY3JpYmUoKSB7XG4gICAgaWYgKCF0aGlzLnVuc3Vic2NyaWJlKSB7XG4gICAgICB0aGlzLnVuc3Vic2NyaWJlID0gdGhpcy5wYXJlbnRTdWIgPyB0aGlzLnBhcmVudFN1Yi5hZGROZXN0ZWRTdWIodGhpcy5oYW5kbGVDaGFuZ2VXcmFwcGVyKSA6IHRoaXMuc3RvcmUuc3Vic2NyaWJlKHRoaXMuaGFuZGxlQ2hhbmdlV3JhcHBlcik7XG4gICAgICB0aGlzLmxpc3RlbmVycyA9IGNyZWF0ZUxpc3RlbmVyQ29sbGVjdGlvbigpO1xuICAgIH1cbiAgfTtcblxuICBfcHJvdG8udHJ5VW5zdWJzY3JpYmUgPSBmdW5jdGlvbiB0cnlVbnN1YnNjcmliZSgpIHtcbiAgICBpZiAodGhpcy51bnN1YnNjcmliZSkge1xuICAgICAgdGhpcy51bnN1YnNjcmliZSgpO1xuICAgICAgdGhpcy51bnN1YnNjcmliZSA9IG51bGw7XG4gICAgICB0aGlzLmxpc3RlbmVycy5jbGVhcigpO1xuICAgICAgdGhpcy5saXN0ZW5lcnMgPSBudWxsTGlzdGVuZXJzO1xuICAgIH1cbiAgfTtcblxuICByZXR1cm4gU3Vic2NyaXB0aW9uO1xufSgpO1xuXG5leHBvcnQgeyBTdWJzY3JpcHRpb24gYXMgZGVmYXVsdCB9OyIsImltcG9ydCBSZWFjdCwgeyB1c2VNZW1vLCB1c2VFZmZlY3QgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHsgUmVhY3RSZWR1eENvbnRleHQgfSBmcm9tICcuL0NvbnRleHQnO1xuaW1wb3J0IFN1YnNjcmlwdGlvbiBmcm9tICcuLi91dGlscy9TdWJzY3JpcHRpb24nO1xuXG5mdW5jdGlvbiBQcm92aWRlcihfcmVmKSB7XG4gIHZhciBzdG9yZSA9IF9yZWYuc3RvcmUsXG4gICAgICBjb250ZXh0ID0gX3JlZi5jb250ZXh0LFxuICAgICAgY2hpbGRyZW4gPSBfcmVmLmNoaWxkcmVuO1xuICB2YXIgY29udGV4dFZhbHVlID0gdXNlTWVtbyhmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHN1YnNjcmlwdGlvbiA9IG5ldyBTdWJzY3JpcHRpb24oc3RvcmUpO1xuICAgIHN1YnNjcmlwdGlvbi5vblN0YXRlQ2hhbmdlID0gc3Vic2NyaXB0aW9uLm5vdGlmeU5lc3RlZFN1YnM7XG4gICAgcmV0dXJuIHtcbiAgICAgIHN0b3JlOiBzdG9yZSxcbiAgICAgIHN1YnNjcmlwdGlvbjogc3Vic2NyaXB0aW9uXG4gICAgfTtcbiAgfSwgW3N0b3JlXSk7XG4gIHZhciBwcmV2aW91c1N0YXRlID0gdXNlTWVtbyhmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHN0b3JlLmdldFN0YXRlKCk7XG4gIH0sIFtzdG9yZV0pO1xuICB1c2VFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgIHZhciBzdWJzY3JpcHRpb24gPSBjb250ZXh0VmFsdWUuc3Vic2NyaXB0aW9uO1xuICAgIHN1YnNjcmlwdGlvbi50cnlTdWJzY3JpYmUoKTtcblxuICAgIGlmIChwcmV2aW91c1N0YXRlICE9PSBzdG9yZS5nZXRTdGF0ZSgpKSB7XG4gICAgICBzdWJzY3JpcHRpb24ubm90aWZ5TmVzdGVkU3VicygpO1xuICAgIH1cblxuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICBzdWJzY3JpcHRpb24udHJ5VW5zdWJzY3JpYmUoKTtcbiAgICAgIHN1YnNjcmlwdGlvbi5vblN0YXRlQ2hhbmdlID0gbnVsbDtcbiAgICB9O1xuICB9LCBbY29udGV4dFZhbHVlLCBwcmV2aW91c1N0YXRlXSk7XG4gIHZhciBDb250ZXh0ID0gY29udGV4dCB8fCBSZWFjdFJlZHV4Q29udGV4dDtcbiAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoQ29udGV4dC5Qcm92aWRlciwge1xuICAgIHZhbHVlOiBjb250ZXh0VmFsdWVcbiAgfSwgY2hpbGRyZW4pO1xufVxuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICBQcm92aWRlci5wcm9wVHlwZXMgPSB7XG4gICAgc3RvcmU6IFByb3BUeXBlcy5zaGFwZSh7XG4gICAgICBzdWJzY3JpYmU6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gICAgICBkaXNwYXRjaDogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgICAgIGdldFN0YXRlOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkXG4gICAgfSksXG4gICAgY29udGV4dDogUHJvcFR5cGVzLm9iamVjdCxcbiAgICBjaGlsZHJlbjogUHJvcFR5cGVzLmFueVxuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBQcm92aWRlcjsiLCJpbXBvcnQgeyB1c2VFZmZlY3QsIHVzZUxheW91dEVmZmVjdCB9IGZyb20gJ3JlYWN0JzsgLy8gUmVhY3QgY3VycmVudGx5IHRocm93cyBhIHdhcm5pbmcgd2hlbiB1c2luZyB1c2VMYXlvdXRFZmZlY3Qgb24gdGhlIHNlcnZlci5cbi8vIFRvIGdldCBhcm91bmQgaXQsIHdlIGNhbiBjb25kaXRpb25hbGx5IHVzZUVmZmVjdCBvbiB0aGUgc2VydmVyIChuby1vcCkgYW5kXG4vLyB1c2VMYXlvdXRFZmZlY3QgaW4gdGhlIGJyb3dzZXIuIFdlIG5lZWQgdXNlTGF5b3V0RWZmZWN0IHRvIGVuc3VyZSB0aGUgc3RvcmVcbi8vIHN1YnNjcmlwdGlvbiBjYWxsYmFjayBhbHdheXMgaGFzIHRoZSBzZWxlY3RvciBmcm9tIHRoZSBsYXRlc3QgcmVuZGVyIGNvbW1pdFxuLy8gYXZhaWxhYmxlLCBvdGhlcndpc2UgYSBzdG9yZSB1cGRhdGUgbWF5IGhhcHBlbiBiZXR3ZWVuIHJlbmRlciBhbmQgdGhlIGVmZmVjdCxcbi8vIHdoaWNoIG1heSBjYXVzZSBtaXNzZWQgdXBkYXRlczsgd2UgYWxzbyBtdXN0IGVuc3VyZSB0aGUgc3RvcmUgc3Vic2NyaXB0aW9uXG4vLyBpcyBjcmVhdGVkIHN5bmNocm9ub3VzbHksIG90aGVyd2lzZSBhIHN0b3JlIHVwZGF0ZSBtYXkgb2NjdXIgYmVmb3JlIHRoZVxuLy8gc3Vic2NyaXB0aW9uIGlzIGNyZWF0ZWQgYW5kIGFuIGluY29uc2lzdGVudCBzdGF0ZSBtYXkgYmUgb2JzZXJ2ZWRcblxuZXhwb3J0IHZhciB1c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0ID0gdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIHdpbmRvdy5kb2N1bWVudCAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIHdpbmRvdy5kb2N1bWVudC5jcmVhdGVFbGVtZW50ICE9PSAndW5kZWZpbmVkJyA/IHVzZUxheW91dEVmZmVjdCA6IHVzZUVmZmVjdDsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuaW1wb3J0IGhvaXN0U3RhdGljcyBmcm9tICdob2lzdC1ub24tcmVhY3Qtc3RhdGljcyc7XG5pbXBvcnQgUmVhY3QsIHsgdXNlQ29udGV4dCwgdXNlTWVtbywgdXNlUmVmLCB1c2VSZWR1Y2VyIH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgaXNWYWxpZEVsZW1lbnRUeXBlLCBpc0NvbnRleHRDb25zdW1lciB9IGZyb20gJ3JlYWN0LWlzJztcbmltcG9ydCBTdWJzY3JpcHRpb24gZnJvbSAnLi4vdXRpbHMvU3Vic2NyaXB0aW9uJztcbmltcG9ydCB7IHVzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3QgfSBmcm9tICcuLi91dGlscy91c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0JztcbmltcG9ydCB7IFJlYWN0UmVkdXhDb250ZXh0IH0gZnJvbSAnLi9Db250ZXh0JzsgLy8gRGVmaW5lIHNvbWUgY29uc3RhbnQgYXJyYXlzIGp1c3QgdG8gYXZvaWQgcmUtY3JlYXRpbmcgdGhlc2VcblxudmFyIEVNUFRZX0FSUkFZID0gW107XG52YXIgTk9fU1VCU0NSSVBUSU9OX0FSUkFZID0gW251bGwsIG51bGxdO1xuXG52YXIgc3RyaW5naWZ5Q29tcG9uZW50ID0gZnVuY3Rpb24gc3RyaW5naWZ5Q29tcG9uZW50KENvbXApIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkoQ29tcCk7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIHJldHVybiBTdHJpbmcoQ29tcCk7XG4gIH1cbn07XG5cbmZ1bmN0aW9uIHN0b3JlU3RhdGVVcGRhdGVzUmVkdWNlcihzdGF0ZSwgYWN0aW9uKSB7XG4gIHZhciB1cGRhdGVDb3VudCA9IHN0YXRlWzFdO1xuICByZXR1cm4gW2FjdGlvbi5wYXlsb2FkLCB1cGRhdGVDb3VudCArIDFdO1xufVxuXG5mdW5jdGlvbiB1c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0V2l0aEFyZ3MoZWZmZWN0RnVuYywgZWZmZWN0QXJncywgZGVwZW5kZW5jaWVzKSB7XG4gIHVzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBlZmZlY3RGdW5jLmFwcGx5KHZvaWQgMCwgZWZmZWN0QXJncyk7XG4gIH0sIGRlcGVuZGVuY2llcyk7XG59XG5cbmZ1bmN0aW9uIGNhcHR1cmVXcmFwcGVyUHJvcHMobGFzdFdyYXBwZXJQcm9wcywgbGFzdENoaWxkUHJvcHMsIHJlbmRlcklzU2NoZWR1bGVkLCB3cmFwcGVyUHJvcHMsIGFjdHVhbENoaWxkUHJvcHMsIGNoaWxkUHJvcHNGcm9tU3RvcmVVcGRhdGUsIG5vdGlmeU5lc3RlZFN1YnMpIHtcbiAgLy8gV2Ugd2FudCB0byBjYXB0dXJlIHRoZSB3cmFwcGVyIHByb3BzIGFuZCBjaGlsZCBwcm9wcyB3ZSB1c2VkIGZvciBsYXRlciBjb21wYXJpc29uc1xuICBsYXN0V3JhcHBlclByb3BzLmN1cnJlbnQgPSB3cmFwcGVyUHJvcHM7XG4gIGxhc3RDaGlsZFByb3BzLmN1cnJlbnQgPSBhY3R1YWxDaGlsZFByb3BzO1xuICByZW5kZXJJc1NjaGVkdWxlZC5jdXJyZW50ID0gZmFsc2U7IC8vIElmIHRoZSByZW5kZXIgd2FzIGZyb20gYSBzdG9yZSB1cGRhdGUsIGNsZWFyIG91dCB0aGF0IHJlZmVyZW5jZSBhbmQgY2FzY2FkZSB0aGUgc3Vic2NyaWJlciB1cGRhdGVcblxuICBpZiAoY2hpbGRQcm9wc0Zyb21TdG9yZVVwZGF0ZS5jdXJyZW50KSB7XG4gICAgY2hpbGRQcm9wc0Zyb21TdG9yZVVwZGF0ZS5jdXJyZW50ID0gbnVsbDtcbiAgICBub3RpZnlOZXN0ZWRTdWJzKCk7XG4gIH1cbn1cblxuZnVuY3Rpb24gc3Vic2NyaWJlVXBkYXRlcyhzaG91bGRIYW5kbGVTdGF0ZUNoYW5nZXMsIHN0b3JlLCBzdWJzY3JpcHRpb24sIGNoaWxkUHJvcHNTZWxlY3RvciwgbGFzdFdyYXBwZXJQcm9wcywgbGFzdENoaWxkUHJvcHMsIHJlbmRlcklzU2NoZWR1bGVkLCBjaGlsZFByb3BzRnJvbVN0b3JlVXBkYXRlLCBub3RpZnlOZXN0ZWRTdWJzLCBmb3JjZUNvbXBvbmVudFVwZGF0ZURpc3BhdGNoKSB7XG4gIC8vIElmIHdlJ3JlIG5vdCBzdWJzY3JpYmVkIHRvIHRoZSBzdG9yZSwgbm90aGluZyB0byBkbyBoZXJlXG4gIGlmICghc2hvdWxkSGFuZGxlU3RhdGVDaGFuZ2VzKSByZXR1cm47IC8vIENhcHR1cmUgdmFsdWVzIGZvciBjaGVja2luZyBpZiBhbmQgd2hlbiB0aGlzIGNvbXBvbmVudCB1bm1vdW50c1xuXG4gIHZhciBkaWRVbnN1YnNjcmliZSA9IGZhbHNlO1xuICB2YXIgbGFzdFRocm93bkVycm9yID0gbnVsbDsgLy8gV2UnbGwgcnVuIHRoaXMgY2FsbGJhY2sgZXZlcnkgdGltZSBhIHN0b3JlIHN1YnNjcmlwdGlvbiB1cGRhdGUgcHJvcGFnYXRlcyB0byB0aGlzIGNvbXBvbmVudFxuXG4gIHZhciBjaGVja0ZvclVwZGF0ZXMgPSBmdW5jdGlvbiBjaGVja0ZvclVwZGF0ZXMoKSB7XG4gICAgaWYgKGRpZFVuc3Vic2NyaWJlKSB7XG4gICAgICAvLyBEb24ndCBydW4gc3RhbGUgbGlzdGVuZXJzLlxuICAgICAgLy8gUmVkdXggZG9lc24ndCBndWFyYW50ZWUgdW5zdWJzY3JpcHRpb25zIGhhcHBlbiB1bnRpbCBuZXh0IGRpc3BhdGNoLlxuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciBsYXRlc3RTdG9yZVN0YXRlID0gc3RvcmUuZ2V0U3RhdGUoKTtcbiAgICB2YXIgbmV3Q2hpbGRQcm9wcywgZXJyb3I7XG5cbiAgICB0cnkge1xuICAgICAgLy8gQWN0dWFsbHkgcnVuIHRoZSBzZWxlY3RvciB3aXRoIHRoZSBtb3N0IHJlY2VudCBzdG9yZSBzdGF0ZSBhbmQgd3JhcHBlciBwcm9wc1xuICAgICAgLy8gdG8gZGV0ZXJtaW5lIHdoYXQgdGhlIGNoaWxkIHByb3BzIHNob3VsZCBiZVxuICAgICAgbmV3Q2hpbGRQcm9wcyA9IGNoaWxkUHJvcHNTZWxlY3RvcihsYXRlc3RTdG9yZVN0YXRlLCBsYXN0V3JhcHBlclByb3BzLmN1cnJlbnQpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIGVycm9yID0gZTtcbiAgICAgIGxhc3RUaHJvd25FcnJvciA9IGU7XG4gICAgfVxuXG4gICAgaWYgKCFlcnJvcikge1xuICAgICAgbGFzdFRocm93bkVycm9yID0gbnVsbDtcbiAgICB9IC8vIElmIHRoZSBjaGlsZCBwcm9wcyBoYXZlbid0IGNoYW5nZWQsIG5vdGhpbmcgdG8gZG8gaGVyZSAtIGNhc2NhZGUgdGhlIHN1YnNjcmlwdGlvbiB1cGRhdGVcblxuXG4gICAgaWYgKG5ld0NoaWxkUHJvcHMgPT09IGxhc3RDaGlsZFByb3BzLmN1cnJlbnQpIHtcbiAgICAgIGlmICghcmVuZGVySXNTY2hlZHVsZWQuY3VycmVudCkge1xuICAgICAgICBub3RpZnlOZXN0ZWRTdWJzKCk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIFNhdmUgcmVmZXJlbmNlcyB0byB0aGUgbmV3IGNoaWxkIHByb3BzLiAgTm90ZSB0aGF0IHdlIHRyYWNrIHRoZSBcImNoaWxkIHByb3BzIGZyb20gc3RvcmUgdXBkYXRlXCJcbiAgICAgIC8vIGFzIGEgcmVmIGluc3RlYWQgb2YgYSB1c2VTdGF0ZS91c2VSZWR1Y2VyIGJlY2F1c2Ugd2UgbmVlZCBhIHdheSB0byBkZXRlcm1pbmUgaWYgdGhhdCB2YWx1ZSBoYXNcbiAgICAgIC8vIGJlZW4gcHJvY2Vzc2VkLiAgSWYgdGhpcyB3ZW50IGludG8gdXNlU3RhdGUvdXNlUmVkdWNlciwgd2UgY291bGRuJ3QgY2xlYXIgb3V0IHRoZSB2YWx1ZSB3aXRob3V0XG4gICAgICAvLyBmb3JjaW5nIGFub3RoZXIgcmUtcmVuZGVyLCB3aGljaCB3ZSBkb24ndCB3YW50LlxuICAgICAgbGFzdENoaWxkUHJvcHMuY3VycmVudCA9IG5ld0NoaWxkUHJvcHM7XG4gICAgICBjaGlsZFByb3BzRnJvbVN0b3JlVXBkYXRlLmN1cnJlbnQgPSBuZXdDaGlsZFByb3BzO1xuICAgICAgcmVuZGVySXNTY2hlZHVsZWQuY3VycmVudCA9IHRydWU7IC8vIElmIHRoZSBjaGlsZCBwcm9wcyBfZGlkXyBjaGFuZ2UgKG9yIHdlIGNhdWdodCBhbiBlcnJvciksIHRoaXMgd3JhcHBlciBjb21wb25lbnQgbmVlZHMgdG8gcmUtcmVuZGVyXG5cbiAgICAgIGZvcmNlQ29tcG9uZW50VXBkYXRlRGlzcGF0Y2goe1xuICAgICAgICB0eXBlOiAnU1RPUkVfVVBEQVRFRCcsXG4gICAgICAgIHBheWxvYWQ6IHtcbiAgICAgICAgICBlcnJvcjogZXJyb3JcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICB9OyAvLyBBY3R1YWxseSBzdWJzY3JpYmUgdG8gdGhlIG5lYXJlc3QgY29ubmVjdGVkIGFuY2VzdG9yIChvciBzdG9yZSlcblxuXG4gIHN1YnNjcmlwdGlvbi5vblN0YXRlQ2hhbmdlID0gY2hlY2tGb3JVcGRhdGVzO1xuICBzdWJzY3JpcHRpb24udHJ5U3Vic2NyaWJlKCk7IC8vIFB1bGwgZGF0YSBmcm9tIHRoZSBzdG9yZSBhZnRlciBmaXJzdCByZW5kZXIgaW4gY2FzZSB0aGUgc3RvcmUgaGFzXG4gIC8vIGNoYW5nZWQgc2luY2Ugd2UgYmVnYW4uXG5cbiAgY2hlY2tGb3JVcGRhdGVzKCk7XG5cbiAgdmFyIHVuc3Vic2NyaWJlV3JhcHBlciA9IGZ1bmN0aW9uIHVuc3Vic2NyaWJlV3JhcHBlcigpIHtcbiAgICBkaWRVbnN1YnNjcmliZSA9IHRydWU7XG4gICAgc3Vic2NyaXB0aW9uLnRyeVVuc3Vic2NyaWJlKCk7XG4gICAgc3Vic2NyaXB0aW9uLm9uU3RhdGVDaGFuZ2UgPSBudWxsO1xuXG4gICAgaWYgKGxhc3RUaHJvd25FcnJvcikge1xuICAgICAgLy8gSXQncyBwb3NzaWJsZSB0aGF0IHdlIGNhdWdodCBhbiBlcnJvciBkdWUgdG8gYSBiYWQgbWFwU3RhdGUgZnVuY3Rpb24sIGJ1dCB0aGVcbiAgICAgIC8vIHBhcmVudCByZS1yZW5kZXJlZCB3aXRob3V0IHRoaXMgY29tcG9uZW50IGFuZCB3ZSdyZSBhYm91dCB0byB1bm1vdW50LlxuICAgICAgLy8gVGhpcyBzaG91bGRuJ3QgaGFwcGVuIGFzIGxvbmcgYXMgd2UgZG8gdG9wLWRvd24gc3Vic2NyaXB0aW9ucyBjb3JyZWN0bHksIGJ1dFxuICAgICAgLy8gaWYgd2UgZXZlciBkbyB0aG9zZSB3cm9uZywgdGhpcyB0aHJvdyB3aWxsIHN1cmZhY2UgdGhlIGVycm9yIGluIG91ciB0ZXN0cy5cbiAgICAgIC8vIEluIHRoYXQgY2FzZSwgdGhyb3cgdGhlIGVycm9yIGZyb20gaGVyZSBzbyBpdCBkb2Vzbid0IGdldCBsb3N0LlxuICAgICAgdGhyb3cgbGFzdFRocm93bkVycm9yO1xuICAgIH1cbiAgfTtcblxuICByZXR1cm4gdW5zdWJzY3JpYmVXcmFwcGVyO1xufVxuXG52YXIgaW5pdFN0YXRlVXBkYXRlcyA9IGZ1bmN0aW9uIGluaXRTdGF0ZVVwZGF0ZXMoKSB7XG4gIHJldHVybiBbbnVsbCwgMF07XG59O1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjb25uZWN0QWR2YW5jZWQoXG4vKlxyXG4gIHNlbGVjdG9yRmFjdG9yeSBpcyBhIGZ1bmMgdGhhdCBpcyByZXNwb25zaWJsZSBmb3IgcmV0dXJuaW5nIHRoZSBzZWxlY3RvciBmdW5jdGlvbiB1c2VkIHRvXHJcbiAgY29tcHV0ZSBuZXcgcHJvcHMgZnJvbSBzdGF0ZSwgcHJvcHMsIGFuZCBkaXNwYXRjaC4gRm9yIGV4YW1wbGU6XHJcbiAgICAgIGV4cG9ydCBkZWZhdWx0IGNvbm5lY3RBZHZhbmNlZCgoZGlzcGF0Y2gsIG9wdGlvbnMpID0+IChzdGF0ZSwgcHJvcHMpID0+ICh7XHJcbiAgICAgIHRoaW5nOiBzdGF0ZS50aGluZ3NbcHJvcHMudGhpbmdJZF0sXHJcbiAgICAgIHNhdmVUaGluZzogZmllbGRzID0+IGRpc3BhdGNoKGFjdGlvbkNyZWF0b3JzLnNhdmVUaGluZyhwcm9wcy50aGluZ0lkLCBmaWVsZHMpKSxcclxuICAgIH0pKShZb3VyQ29tcG9uZW50KVxyXG4gICAgQWNjZXNzIHRvIGRpc3BhdGNoIGlzIHByb3ZpZGVkIHRvIHRoZSBmYWN0b3J5IHNvIHNlbGVjdG9yRmFjdG9yaWVzIGNhbiBiaW5kIGFjdGlvbkNyZWF0b3JzXHJcbiAgb3V0c2lkZSBvZiB0aGVpciBzZWxlY3RvciBhcyBhbiBvcHRpbWl6YXRpb24uIE9wdGlvbnMgcGFzc2VkIHRvIGNvbm5lY3RBZHZhbmNlZCBhcmUgcGFzc2VkIHRvXHJcbiAgdGhlIHNlbGVjdG9yRmFjdG9yeSwgYWxvbmcgd2l0aCBkaXNwbGF5TmFtZSBhbmQgV3JhcHBlZENvbXBvbmVudCwgYXMgdGhlIHNlY29uZCBhcmd1bWVudC5cclxuICAgIE5vdGUgdGhhdCBzZWxlY3RvckZhY3RvcnkgaXMgcmVzcG9uc2libGUgZm9yIGFsbCBjYWNoaW5nL21lbW9pemF0aW9uIG9mIGluYm91bmQgYW5kIG91dGJvdW5kXHJcbiAgcHJvcHMuIERvIG5vdCB1c2UgY29ubmVjdEFkdmFuY2VkIGRpcmVjdGx5IHdpdGhvdXQgbWVtb2l6aW5nIHJlc3VsdHMgYmV0d2VlbiBjYWxscyB0byB5b3VyXHJcbiAgc2VsZWN0b3IsIG90aGVyd2lzZSB0aGUgQ29ubmVjdCBjb21wb25lbnQgd2lsbCByZS1yZW5kZXIgb24gZXZlcnkgc3RhdGUgb3IgcHJvcHMgY2hhbmdlLlxyXG4qL1xuc2VsZWN0b3JGYWN0b3J5LCAvLyBvcHRpb25zIG9iamVjdDpcbl9yZWYpIHtcbiAgaWYgKF9yZWYgPT09IHZvaWQgMCkge1xuICAgIF9yZWYgPSB7fTtcbiAgfVxuXG4gIHZhciBfcmVmMiA9IF9yZWYsXG4gICAgICBfcmVmMiRnZXREaXNwbGF5TmFtZSA9IF9yZWYyLmdldERpc3BsYXlOYW1lLFxuICAgICAgZ2V0RGlzcGxheU5hbWUgPSBfcmVmMiRnZXREaXNwbGF5TmFtZSA9PT0gdm9pZCAwID8gZnVuY3Rpb24gKG5hbWUpIHtcbiAgICByZXR1cm4gXCJDb25uZWN0QWR2YW5jZWQoXCIgKyBuYW1lICsgXCIpXCI7XG4gIH0gOiBfcmVmMiRnZXREaXNwbGF5TmFtZSxcbiAgICAgIF9yZWYyJG1ldGhvZE5hbWUgPSBfcmVmMi5tZXRob2ROYW1lLFxuICAgICAgbWV0aG9kTmFtZSA9IF9yZWYyJG1ldGhvZE5hbWUgPT09IHZvaWQgMCA/ICdjb25uZWN0QWR2YW5jZWQnIDogX3JlZjIkbWV0aG9kTmFtZSxcbiAgICAgIF9yZWYyJHJlbmRlckNvdW50UHJvcCA9IF9yZWYyLnJlbmRlckNvdW50UHJvcCxcbiAgICAgIHJlbmRlckNvdW50UHJvcCA9IF9yZWYyJHJlbmRlckNvdW50UHJvcCA9PT0gdm9pZCAwID8gdW5kZWZpbmVkIDogX3JlZjIkcmVuZGVyQ291bnRQcm9wLFxuICAgICAgX3JlZjIkc2hvdWxkSGFuZGxlU3RhID0gX3JlZjIuc2hvdWxkSGFuZGxlU3RhdGVDaGFuZ2VzLFxuICAgICAgc2hvdWxkSGFuZGxlU3RhdGVDaGFuZ2VzID0gX3JlZjIkc2hvdWxkSGFuZGxlU3RhID09PSB2b2lkIDAgPyB0cnVlIDogX3JlZjIkc2hvdWxkSGFuZGxlU3RhLFxuICAgICAgX3JlZjIkc3RvcmVLZXkgPSBfcmVmMi5zdG9yZUtleSxcbiAgICAgIHN0b3JlS2V5ID0gX3JlZjIkc3RvcmVLZXkgPT09IHZvaWQgMCA/ICdzdG9yZScgOiBfcmVmMiRzdG9yZUtleSxcbiAgICAgIF9yZWYyJHdpdGhSZWYgPSBfcmVmMi53aXRoUmVmLFxuICAgICAgd2l0aFJlZiA9IF9yZWYyJHdpdGhSZWYgPT09IHZvaWQgMCA/IGZhbHNlIDogX3JlZjIkd2l0aFJlZixcbiAgICAgIF9yZWYyJGZvcndhcmRSZWYgPSBfcmVmMi5mb3J3YXJkUmVmLFxuICAgICAgZm9yd2FyZFJlZiA9IF9yZWYyJGZvcndhcmRSZWYgPT09IHZvaWQgMCA/IGZhbHNlIDogX3JlZjIkZm9yd2FyZFJlZixcbiAgICAgIF9yZWYyJGNvbnRleHQgPSBfcmVmMi5jb250ZXh0LFxuICAgICAgY29udGV4dCA9IF9yZWYyJGNvbnRleHQgPT09IHZvaWQgMCA/IFJlYWN0UmVkdXhDb250ZXh0IDogX3JlZjIkY29udGV4dCxcbiAgICAgIGNvbm5lY3RPcHRpb25zID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UoX3JlZjIsIFtcImdldERpc3BsYXlOYW1lXCIsIFwibWV0aG9kTmFtZVwiLCBcInJlbmRlckNvdW50UHJvcFwiLCBcInNob3VsZEhhbmRsZVN0YXRlQ2hhbmdlc1wiLCBcInN0b3JlS2V5XCIsIFwid2l0aFJlZlwiLCBcImZvcndhcmRSZWZcIiwgXCJjb250ZXh0XCJdKTtcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGlmIChyZW5kZXJDb3VudFByb3AgIT09IHVuZGVmaW5lZCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwicmVuZGVyQ291bnRQcm9wIGlzIHJlbW92ZWQuIHJlbmRlciBjb3VudGluZyBpcyBidWlsdCBpbnRvIHRoZSBsYXRlc3QgUmVhY3QgRGV2IFRvb2xzIHByb2ZpbGluZyBleHRlbnNpb25cIik7XG4gICAgfVxuXG4gICAgaWYgKHdpdGhSZWYpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignd2l0aFJlZiBpcyByZW1vdmVkLiBUbyBhY2Nlc3MgdGhlIHdyYXBwZWQgaW5zdGFuY2UsIHVzZSBhIHJlZiBvbiB0aGUgY29ubmVjdGVkIGNvbXBvbmVudCcpO1xuICAgIH1cblxuICAgIHZhciBjdXN0b21TdG9yZVdhcm5pbmdNZXNzYWdlID0gJ1RvIHVzZSBhIGN1c3RvbSBSZWR1eCBzdG9yZSBmb3Igc3BlY2lmaWMgY29tcG9uZW50cywgY3JlYXRlIGEgY3VzdG9tIFJlYWN0IGNvbnRleHQgd2l0aCAnICsgXCJSZWFjdC5jcmVhdGVDb250ZXh0KCksIGFuZCBwYXNzIHRoZSBjb250ZXh0IG9iamVjdCB0byBSZWFjdCBSZWR1eCdzIFByb3ZpZGVyIGFuZCBzcGVjaWZpYyBjb21wb25lbnRzXCIgKyAnIGxpa2U6IDxQcm92aWRlciBjb250ZXh0PXtNeUNvbnRleHR9PjxDb25uZWN0ZWRDb21wb25lbnQgY29udGV4dD17TXlDb250ZXh0fSAvPjwvUHJvdmlkZXI+LiAnICsgJ1lvdSBtYXkgYWxzbyBwYXNzIGEge2NvbnRleHQgOiBNeUNvbnRleHR9IG9wdGlvbiB0byBjb25uZWN0JztcblxuICAgIGlmIChzdG9yZUtleSAhPT0gJ3N0b3JlJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdzdG9yZUtleSBoYXMgYmVlbiByZW1vdmVkIGFuZCBkb2VzIG5vdCBkbyBhbnl0aGluZy4gJyArIGN1c3RvbVN0b3JlV2FybmluZ01lc3NhZ2UpO1xuICAgIH1cbiAgfVxuXG4gIHZhciBDb250ZXh0ID0gY29udGV4dDtcbiAgcmV0dXJuIGZ1bmN0aW9uIHdyYXBXaXRoQ29ubmVjdChXcmFwcGVkQ29tcG9uZW50KSB7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgIWlzVmFsaWRFbGVtZW50VHlwZShXcmFwcGVkQ29tcG9uZW50KSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiWW91IG11c3QgcGFzcyBhIGNvbXBvbmVudCB0byB0aGUgZnVuY3Rpb24gcmV0dXJuZWQgYnkgXCIgKyAobWV0aG9kTmFtZSArIFwiLiBJbnN0ZWFkIHJlY2VpdmVkIFwiICsgc3RyaW5naWZ5Q29tcG9uZW50KFdyYXBwZWRDb21wb25lbnQpKSk7XG4gICAgfVxuXG4gICAgdmFyIHdyYXBwZWRDb21wb25lbnROYW1lID0gV3JhcHBlZENvbXBvbmVudC5kaXNwbGF5TmFtZSB8fCBXcmFwcGVkQ29tcG9uZW50Lm5hbWUgfHwgJ0NvbXBvbmVudCc7XG4gICAgdmFyIGRpc3BsYXlOYW1lID0gZ2V0RGlzcGxheU5hbWUod3JhcHBlZENvbXBvbmVudE5hbWUpO1xuXG4gICAgdmFyIHNlbGVjdG9yRmFjdG9yeU9wdGlvbnMgPSBfZXh0ZW5kcyh7fSwgY29ubmVjdE9wdGlvbnMsIHtcbiAgICAgIGdldERpc3BsYXlOYW1lOiBnZXREaXNwbGF5TmFtZSxcbiAgICAgIG1ldGhvZE5hbWU6IG1ldGhvZE5hbWUsXG4gICAgICByZW5kZXJDb3VudFByb3A6IHJlbmRlckNvdW50UHJvcCxcbiAgICAgIHNob3VsZEhhbmRsZVN0YXRlQ2hhbmdlczogc2hvdWxkSGFuZGxlU3RhdGVDaGFuZ2VzLFxuICAgICAgc3RvcmVLZXk6IHN0b3JlS2V5LFxuICAgICAgZGlzcGxheU5hbWU6IGRpc3BsYXlOYW1lLFxuICAgICAgd3JhcHBlZENvbXBvbmVudE5hbWU6IHdyYXBwZWRDb21wb25lbnROYW1lLFxuICAgICAgV3JhcHBlZENvbXBvbmVudDogV3JhcHBlZENvbXBvbmVudFxuICAgIH0pO1xuXG4gICAgdmFyIHB1cmUgPSBjb25uZWN0T3B0aW9ucy5wdXJlO1xuXG4gICAgZnVuY3Rpb24gY3JlYXRlQ2hpbGRTZWxlY3RvcihzdG9yZSkge1xuICAgICAgcmV0dXJuIHNlbGVjdG9yRmFjdG9yeShzdG9yZS5kaXNwYXRjaCwgc2VsZWN0b3JGYWN0b3J5T3B0aW9ucyk7XG4gICAgfSAvLyBJZiB3ZSBhcmVuJ3QgcnVubmluZyBpbiBcInB1cmVcIiBtb2RlLCB3ZSBkb24ndCB3YW50IHRvIG1lbW9pemUgdmFsdWVzLlxuICAgIC8vIFRvIGF2b2lkIGNvbmRpdGlvbmFsbHkgY2FsbGluZyBob29rcywgd2UgZmFsbCBiYWNrIHRvIGEgdGlueSB3cmFwcGVyXG4gICAgLy8gdGhhdCBqdXN0IGV4ZWN1dGVzIHRoZSBnaXZlbiBjYWxsYmFjayBpbW1lZGlhdGVseS5cblxuXG4gICAgdmFyIHVzZVB1cmVPbmx5TWVtbyA9IHB1cmUgPyB1c2VNZW1vIDogZnVuY3Rpb24gKGNhbGxiYWNrKSB7XG4gICAgICByZXR1cm4gY2FsbGJhY2soKTtcbiAgICB9O1xuXG4gICAgZnVuY3Rpb24gQ29ubmVjdEZ1bmN0aW9uKHByb3BzKSB7XG4gICAgICB2YXIgX3VzZU1lbW8gPSB1c2VNZW1vKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgLy8gRGlzdGluZ3Vpc2ggYmV0d2VlbiBhY3R1YWwgXCJkYXRhXCIgcHJvcHMgdGhhdCB3ZXJlIHBhc3NlZCB0byB0aGUgd3JhcHBlciBjb21wb25lbnQsXG4gICAgICAgIC8vIGFuZCB2YWx1ZXMgbmVlZGVkIHRvIGNvbnRyb2wgYmVoYXZpb3IgKGZvcndhcmRlZCByZWZzLCBhbHRlcm5hdGUgY29udGV4dCBpbnN0YW5jZXMpLlxuICAgICAgICAvLyBUbyBtYWludGFpbiB0aGUgd3JhcHBlclByb3BzIG9iamVjdCByZWZlcmVuY2UsIG1lbW9pemUgdGhpcyBkZXN0cnVjdHVyaW5nLlxuICAgICAgICB2YXIgcmVhY3RSZWR1eEZvcndhcmRlZFJlZiA9IHByb3BzLnJlYWN0UmVkdXhGb3J3YXJkZWRSZWYsXG4gICAgICAgICAgICB3cmFwcGVyUHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShwcm9wcywgW1wicmVhY3RSZWR1eEZvcndhcmRlZFJlZlwiXSk7XG5cbiAgICAgICAgcmV0dXJuIFtwcm9wcy5jb250ZXh0LCByZWFjdFJlZHV4Rm9yd2FyZGVkUmVmLCB3cmFwcGVyUHJvcHNdO1xuICAgICAgfSwgW3Byb3BzXSksXG4gICAgICAgICAgcHJvcHNDb250ZXh0ID0gX3VzZU1lbW9bMF0sXG4gICAgICAgICAgcmVhY3RSZWR1eEZvcndhcmRlZFJlZiA9IF91c2VNZW1vWzFdLFxuICAgICAgICAgIHdyYXBwZXJQcm9wcyA9IF91c2VNZW1vWzJdO1xuXG4gICAgICB2YXIgQ29udGV4dFRvVXNlID0gdXNlTWVtbyhmdW5jdGlvbiAoKSB7XG4gICAgICAgIC8vIFVzZXJzIG1heSBvcHRpb25hbGx5IHBhc3MgaW4gYSBjdXN0b20gY29udGV4dCBpbnN0YW5jZSB0byB1c2UgaW5zdGVhZCBvZiBvdXIgUmVhY3RSZWR1eENvbnRleHQuXG4gICAgICAgIC8vIE1lbW9pemUgdGhlIGNoZWNrIHRoYXQgZGV0ZXJtaW5lcyB3aGljaCBjb250ZXh0IGluc3RhbmNlIHdlIHNob3VsZCB1c2UuXG4gICAgICAgIHJldHVybiBwcm9wc0NvbnRleHQgJiYgcHJvcHNDb250ZXh0LkNvbnN1bWVyICYmIGlzQ29udGV4dENvbnN1bWVyKFJlYWN0LmNyZWF0ZUVsZW1lbnQocHJvcHNDb250ZXh0LkNvbnN1bWVyLCBudWxsKSkgPyBwcm9wc0NvbnRleHQgOiBDb250ZXh0O1xuICAgICAgfSwgW3Byb3BzQ29udGV4dCwgQ29udGV4dF0pOyAvLyBSZXRyaWV2ZSB0aGUgc3RvcmUgYW5kIGFuY2VzdG9yIHN1YnNjcmlwdGlvbiB2aWEgY29udGV4dCwgaWYgYXZhaWxhYmxlXG5cbiAgICAgIHZhciBjb250ZXh0VmFsdWUgPSB1c2VDb250ZXh0KENvbnRleHRUb1VzZSk7IC8vIFRoZSBzdG9yZSBfbXVzdF8gZXhpc3QgYXMgZWl0aGVyIGEgcHJvcCBvciBpbiBjb250ZXh0LlxuICAgICAgLy8gV2UnbGwgY2hlY2sgdG8gc2VlIGlmIGl0IF9sb29rc18gbGlrZSBhIFJlZHV4IHN0b3JlIGZpcnN0LlxuICAgICAgLy8gVGhpcyBhbGxvd3MgdXMgdG8gcGFzcyB0aHJvdWdoIGEgYHN0b3JlYCBwcm9wIHRoYXQgaXMganVzdCBhIHBsYWluIHZhbHVlLlxuXG4gICAgICB2YXIgZGlkU3RvcmVDb21lRnJvbVByb3BzID0gQm9vbGVhbihwcm9wcy5zdG9yZSkgJiYgQm9vbGVhbihwcm9wcy5zdG9yZS5nZXRTdGF0ZSkgJiYgQm9vbGVhbihwcm9wcy5zdG9yZS5kaXNwYXRjaCk7XG4gICAgICB2YXIgZGlkU3RvcmVDb21lRnJvbUNvbnRleHQgPSBCb29sZWFuKGNvbnRleHRWYWx1ZSkgJiYgQm9vbGVhbihjb250ZXh0VmFsdWUuc3RvcmUpO1xuXG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiAhZGlkU3RvcmVDb21lRnJvbVByb3BzICYmICFkaWRTdG9yZUNvbWVGcm9tQ29udGV4dCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJDb3VsZCBub3QgZmluZCBcXFwic3RvcmVcXFwiIGluIHRoZSBjb250ZXh0IG9mIFwiICsgKFwiXFxcIlwiICsgZGlzcGxheU5hbWUgKyBcIlxcXCIuIEVpdGhlciB3cmFwIHRoZSByb290IGNvbXBvbmVudCBpbiBhIDxQcm92aWRlcj4sIFwiKSArIFwib3IgcGFzcyBhIGN1c3RvbSBSZWFjdCBjb250ZXh0IHByb3ZpZGVyIHRvIDxQcm92aWRlcj4gYW5kIHRoZSBjb3JyZXNwb25kaW5nIFwiICsgKFwiUmVhY3QgY29udGV4dCBjb25zdW1lciB0byBcIiArIGRpc3BsYXlOYW1lICsgXCIgaW4gY29ubmVjdCBvcHRpb25zLlwiKSk7XG4gICAgICB9IC8vIEJhc2VkIG9uIHRoZSBwcmV2aW91cyBjaGVjaywgb25lIG9mIHRoZXNlIG11c3QgYmUgdHJ1ZVxuXG5cbiAgICAgIHZhciBzdG9yZSA9IGRpZFN0b3JlQ29tZUZyb21Qcm9wcyA/IHByb3BzLnN0b3JlIDogY29udGV4dFZhbHVlLnN0b3JlO1xuICAgICAgdmFyIGNoaWxkUHJvcHNTZWxlY3RvciA9IHVzZU1lbW8oZnVuY3Rpb24gKCkge1xuICAgICAgICAvLyBUaGUgY2hpbGQgcHJvcHMgc2VsZWN0b3IgbmVlZHMgdGhlIHN0b3JlIHJlZmVyZW5jZSBhcyBhbiBpbnB1dC5cbiAgICAgICAgLy8gUmUtY3JlYXRlIHRoaXMgc2VsZWN0b3Igd2hlbmV2ZXIgdGhlIHN0b3JlIGNoYW5nZXMuXG4gICAgICAgIHJldHVybiBjcmVhdGVDaGlsZFNlbGVjdG9yKHN0b3JlKTtcbiAgICAgIH0sIFtzdG9yZV0pO1xuXG4gICAgICB2YXIgX3VzZU1lbW8yID0gdXNlTWVtbyhmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICghc2hvdWxkSGFuZGxlU3RhdGVDaGFuZ2VzKSByZXR1cm4gTk9fU1VCU0NSSVBUSU9OX0FSUkFZOyAvLyBUaGlzIFN1YnNjcmlwdGlvbidzIHNvdXJjZSBzaG91bGQgbWF0Y2ggd2hlcmUgc3RvcmUgY2FtZSBmcm9tOiBwcm9wcyB2cy4gY29udGV4dC4gQSBjb21wb25lbnRcbiAgICAgICAgLy8gY29ubmVjdGVkIHRvIHRoZSBzdG9yZSB2aWEgcHJvcHMgc2hvdWxkbid0IHVzZSBzdWJzY3JpcHRpb24gZnJvbSBjb250ZXh0LCBvciB2aWNlIHZlcnNhLlxuXG4gICAgICAgIHZhciBzdWJzY3JpcHRpb24gPSBuZXcgU3Vic2NyaXB0aW9uKHN0b3JlLCBkaWRTdG9yZUNvbWVGcm9tUHJvcHMgPyBudWxsIDogY29udGV4dFZhbHVlLnN1YnNjcmlwdGlvbik7IC8vIGBub3RpZnlOZXN0ZWRTdWJzYCBpcyBkdXBsaWNhdGVkIHRvIGhhbmRsZSB0aGUgY2FzZSB3aGVyZSB0aGUgY29tcG9uZW50IGlzIHVubW91bnRlZCBpblxuICAgICAgICAvLyB0aGUgbWlkZGxlIG9mIHRoZSBub3RpZmljYXRpb24gbG9vcCwgd2hlcmUgYHN1YnNjcmlwdGlvbmAgd2lsbCB0aGVuIGJlIG51bGwuIFRoaXMgY2FuXG4gICAgICAgIC8vIHByb2JhYmx5IGJlIGF2b2lkZWQgaWYgU3Vic2NyaXB0aW9uJ3MgbGlzdGVuZXJzIGxvZ2ljIGlzIGNoYW5nZWQgdG8gbm90IGNhbGwgbGlzdGVuZXJzXG4gICAgICAgIC8vIHRoYXQgaGF2ZSBiZWVuIHVuc3Vic2NyaWJlZCBpbiB0aGUgIG1pZGRsZSBvZiB0aGUgbm90aWZpY2F0aW9uIGxvb3AuXG5cbiAgICAgICAgdmFyIG5vdGlmeU5lc3RlZFN1YnMgPSBzdWJzY3JpcHRpb24ubm90aWZ5TmVzdGVkU3Vicy5iaW5kKHN1YnNjcmlwdGlvbik7XG4gICAgICAgIHJldHVybiBbc3Vic2NyaXB0aW9uLCBub3RpZnlOZXN0ZWRTdWJzXTtcbiAgICAgIH0sIFtzdG9yZSwgZGlkU3RvcmVDb21lRnJvbVByb3BzLCBjb250ZXh0VmFsdWVdKSxcbiAgICAgICAgICBzdWJzY3JpcHRpb24gPSBfdXNlTWVtbzJbMF0sXG4gICAgICAgICAgbm90aWZ5TmVzdGVkU3VicyA9IF91c2VNZW1vMlsxXTsgLy8gRGV0ZXJtaW5lIHdoYXQge3N0b3JlLCBzdWJzY3JpcHRpb259IHZhbHVlIHNob3VsZCBiZSBwdXQgaW50byBuZXN0ZWQgY29udGV4dCwgaWYgbmVjZXNzYXJ5LFxuICAgICAgLy8gYW5kIG1lbW9pemUgdGhhdCB2YWx1ZSB0byBhdm9pZCB1bm5lY2Vzc2FyeSBjb250ZXh0IHVwZGF0ZXMuXG5cblxuICAgICAgdmFyIG92ZXJyaWRkZW5Db250ZXh0VmFsdWUgPSB1c2VNZW1vKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKGRpZFN0b3JlQ29tZUZyb21Qcm9wcykge1xuICAgICAgICAgIC8vIFRoaXMgY29tcG9uZW50IGlzIGRpcmVjdGx5IHN1YnNjcmliZWQgdG8gYSBzdG9yZSBmcm9tIHByb3BzLlxuICAgICAgICAgIC8vIFdlIGRvbid0IHdhbnQgZGVzY2VuZGFudHMgcmVhZGluZyBmcm9tIHRoaXMgc3RvcmUgLSBwYXNzIGRvd24gd2hhdGV2ZXJcbiAgICAgICAgICAvLyB0aGUgZXhpc3RpbmcgY29udGV4dCB2YWx1ZSBpcyBmcm9tIHRoZSBuZWFyZXN0IGNvbm5lY3RlZCBhbmNlc3Rvci5cbiAgICAgICAgICByZXR1cm4gY29udGV4dFZhbHVlO1xuICAgICAgICB9IC8vIE90aGVyd2lzZSwgcHV0IHRoaXMgY29tcG9uZW50J3Mgc3Vic2NyaXB0aW9uIGluc3RhbmNlIGludG8gY29udGV4dCwgc28gdGhhdFxuICAgICAgICAvLyBjb25uZWN0ZWQgZGVzY2VuZGFudHMgd29uJ3QgdXBkYXRlIHVudGlsIGFmdGVyIHRoaXMgY29tcG9uZW50IGlzIGRvbmVcblxuXG4gICAgICAgIHJldHVybiBfZXh0ZW5kcyh7fSwgY29udGV4dFZhbHVlLCB7XG4gICAgICAgICAgc3Vic2NyaXB0aW9uOiBzdWJzY3JpcHRpb25cbiAgICAgICAgfSk7XG4gICAgICB9LCBbZGlkU3RvcmVDb21lRnJvbVByb3BzLCBjb250ZXh0VmFsdWUsIHN1YnNjcmlwdGlvbl0pOyAvLyBXZSBuZWVkIHRvIGZvcmNlIHRoaXMgd3JhcHBlciBjb21wb25lbnQgdG8gcmUtcmVuZGVyIHdoZW5ldmVyIGEgUmVkdXggc3RvcmUgdXBkYXRlXG4gICAgICAvLyBjYXVzZXMgYSBjaGFuZ2UgdG8gdGhlIGNhbGN1bGF0ZWQgY2hpbGQgY29tcG9uZW50IHByb3BzIChvciB3ZSBjYXVnaHQgYW4gZXJyb3IgaW4gbWFwU3RhdGUpXG5cbiAgICAgIHZhciBfdXNlUmVkdWNlciA9IHVzZVJlZHVjZXIoc3RvcmVTdGF0ZVVwZGF0ZXNSZWR1Y2VyLCBFTVBUWV9BUlJBWSwgaW5pdFN0YXRlVXBkYXRlcyksXG4gICAgICAgICAgX3VzZVJlZHVjZXIkID0gX3VzZVJlZHVjZXJbMF0sXG4gICAgICAgICAgcHJldmlvdXNTdGF0ZVVwZGF0ZVJlc3VsdCA9IF91c2VSZWR1Y2VyJFswXSxcbiAgICAgICAgICBmb3JjZUNvbXBvbmVudFVwZGF0ZURpc3BhdGNoID0gX3VzZVJlZHVjZXJbMV07IC8vIFByb3BhZ2F0ZSBhbnkgbWFwU3RhdGUvbWFwRGlzcGF0Y2ggZXJyb3JzIHVwd2FyZHNcblxuXG4gICAgICBpZiAocHJldmlvdXNTdGF0ZVVwZGF0ZVJlc3VsdCAmJiBwcmV2aW91c1N0YXRlVXBkYXRlUmVzdWx0LmVycm9yKSB7XG4gICAgICAgIHRocm93IHByZXZpb3VzU3RhdGVVcGRhdGVSZXN1bHQuZXJyb3I7XG4gICAgICB9IC8vIFNldCB1cCByZWZzIHRvIGNvb3JkaW5hdGUgdmFsdWVzIGJldHdlZW4gdGhlIHN1YnNjcmlwdGlvbiBlZmZlY3QgYW5kIHRoZSByZW5kZXIgbG9naWNcblxuXG4gICAgICB2YXIgbGFzdENoaWxkUHJvcHMgPSB1c2VSZWYoKTtcbiAgICAgIHZhciBsYXN0V3JhcHBlclByb3BzID0gdXNlUmVmKHdyYXBwZXJQcm9wcyk7XG4gICAgICB2YXIgY2hpbGRQcm9wc0Zyb21TdG9yZVVwZGF0ZSA9IHVzZVJlZigpO1xuICAgICAgdmFyIHJlbmRlcklzU2NoZWR1bGVkID0gdXNlUmVmKGZhbHNlKTtcbiAgICAgIHZhciBhY3R1YWxDaGlsZFByb3BzID0gdXNlUHVyZU9ubHlNZW1vKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgLy8gVHJpY2t5IGxvZ2ljIGhlcmU6XG4gICAgICAgIC8vIC0gVGhpcyByZW5kZXIgbWF5IGhhdmUgYmVlbiB0cmlnZ2VyZWQgYnkgYSBSZWR1eCBzdG9yZSB1cGRhdGUgdGhhdCBwcm9kdWNlZCBuZXcgY2hpbGQgcHJvcHNcbiAgICAgICAgLy8gLSBIb3dldmVyLCB3ZSBtYXkgaGF2ZSBnb3R0ZW4gbmV3IHdyYXBwZXIgcHJvcHMgYWZ0ZXIgdGhhdFxuICAgICAgICAvLyBJZiB3ZSBoYXZlIG5ldyBjaGlsZCBwcm9wcywgYW5kIHRoZSBzYW1lIHdyYXBwZXIgcHJvcHMsIHdlIGtub3cgd2Ugc2hvdWxkIHVzZSB0aGUgbmV3IGNoaWxkIHByb3BzIGFzLWlzLlxuICAgICAgICAvLyBCdXQsIGlmIHdlIGhhdmUgbmV3IHdyYXBwZXIgcHJvcHMsIHRob3NlIG1pZ2h0IGNoYW5nZSB0aGUgY2hpbGQgcHJvcHMsIHNvIHdlIGhhdmUgdG8gcmVjYWxjdWxhdGUgdGhpbmdzLlxuICAgICAgICAvLyBTbywgd2UnbGwgdXNlIHRoZSBjaGlsZCBwcm9wcyBmcm9tIHN0b3JlIHVwZGF0ZSBvbmx5IGlmIHRoZSB3cmFwcGVyIHByb3BzIGFyZSB0aGUgc2FtZSBhcyBsYXN0IHRpbWUuXG4gICAgICAgIGlmIChjaGlsZFByb3BzRnJvbVN0b3JlVXBkYXRlLmN1cnJlbnQgJiYgd3JhcHBlclByb3BzID09PSBsYXN0V3JhcHBlclByb3BzLmN1cnJlbnQpIHtcbiAgICAgICAgICByZXR1cm4gY2hpbGRQcm9wc0Zyb21TdG9yZVVwZGF0ZS5jdXJyZW50O1xuICAgICAgICB9IC8vIFRPRE8gV2UncmUgcmVhZGluZyB0aGUgc3RvcmUgZGlyZWN0bHkgaW4gcmVuZGVyKCkgaGVyZS4gQmFkIGlkZWE/XG4gICAgICAgIC8vIFRoaXMgd2lsbCBsaWtlbHkgY2F1c2UgQmFkIFRoaW5ncyAoVE0pIHRvIGhhcHBlbiBpbiBDb25jdXJyZW50IE1vZGUuXG4gICAgICAgIC8vIE5vdGUgdGhhdCB3ZSBkbyB0aGlzIGJlY2F1c2Ugb24gcmVuZGVycyBfbm90XyBjYXVzZWQgYnkgc3RvcmUgdXBkYXRlcywgd2UgbmVlZCB0aGUgbGF0ZXN0IHN0b3JlIHN0YXRlXG4gICAgICAgIC8vIHRvIGRldGVybWluZSB3aGF0IHRoZSBjaGlsZCBwcm9wcyBzaG91bGQgYmUuXG5cblxuICAgICAgICByZXR1cm4gY2hpbGRQcm9wc1NlbGVjdG9yKHN0b3JlLmdldFN0YXRlKCksIHdyYXBwZXJQcm9wcyk7XG4gICAgICB9LCBbc3RvcmUsIHByZXZpb3VzU3RhdGVVcGRhdGVSZXN1bHQsIHdyYXBwZXJQcm9wc10pOyAvLyBXZSBuZWVkIHRoaXMgdG8gZXhlY3V0ZSBzeW5jaHJvbm91c2x5IGV2ZXJ5IHRpbWUgd2UgcmUtcmVuZGVyLiBIb3dldmVyLCBSZWFjdCB3YXJuc1xuICAgICAgLy8gYWJvdXQgdXNlTGF5b3V0RWZmZWN0IGluIFNTUiwgc28gd2UgdHJ5IHRvIGRldGVjdCBlbnZpcm9ubWVudCBhbmQgZmFsbCBiYWNrIHRvXG4gICAgICAvLyBqdXN0IHVzZUVmZmVjdCBpbnN0ZWFkIHRvIGF2b2lkIHRoZSB3YXJuaW5nLCBzaW5jZSBuZWl0aGVyIHdpbGwgcnVuIGFueXdheS5cblxuICAgICAgdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdFdpdGhBcmdzKGNhcHR1cmVXcmFwcGVyUHJvcHMsIFtsYXN0V3JhcHBlclByb3BzLCBsYXN0Q2hpbGRQcm9wcywgcmVuZGVySXNTY2hlZHVsZWQsIHdyYXBwZXJQcm9wcywgYWN0dWFsQ2hpbGRQcm9wcywgY2hpbGRQcm9wc0Zyb21TdG9yZVVwZGF0ZSwgbm90aWZ5TmVzdGVkU3Vic10pOyAvLyBPdXIgcmUtc3Vic2NyaWJlIGxvZ2ljIG9ubHkgcnVucyB3aGVuIHRoZSBzdG9yZS9zdWJzY3JpcHRpb24gc2V0dXAgY2hhbmdlc1xuXG4gICAgICB1c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0V2l0aEFyZ3Moc3Vic2NyaWJlVXBkYXRlcywgW3Nob3VsZEhhbmRsZVN0YXRlQ2hhbmdlcywgc3RvcmUsIHN1YnNjcmlwdGlvbiwgY2hpbGRQcm9wc1NlbGVjdG9yLCBsYXN0V3JhcHBlclByb3BzLCBsYXN0Q2hpbGRQcm9wcywgcmVuZGVySXNTY2hlZHVsZWQsIGNoaWxkUHJvcHNGcm9tU3RvcmVVcGRhdGUsIG5vdGlmeU5lc3RlZFN1YnMsIGZvcmNlQ29tcG9uZW50VXBkYXRlRGlzcGF0Y2hdLCBbc3RvcmUsIHN1YnNjcmlwdGlvbiwgY2hpbGRQcm9wc1NlbGVjdG9yXSk7IC8vIE5vdyB0aGF0IGFsbCB0aGF0J3MgZG9uZSwgd2UgY2FuIGZpbmFsbHkgdHJ5IHRvIGFjdHVhbGx5IHJlbmRlciB0aGUgY2hpbGQgY29tcG9uZW50LlxuICAgICAgLy8gV2UgbWVtb2l6ZSB0aGUgZWxlbWVudHMgZm9yIHRoZSByZW5kZXJlZCBjaGlsZCBjb21wb25lbnQgYXMgYW4gb3B0aW1pemF0aW9uLlxuXG4gICAgICB2YXIgcmVuZGVyZWRXcmFwcGVkQ29tcG9uZW50ID0gdXNlTWVtbyhmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFdyYXBwZWRDb21wb25lbnQsIF9leHRlbmRzKHt9LCBhY3R1YWxDaGlsZFByb3BzLCB7XG4gICAgICAgICAgcmVmOiByZWFjdFJlZHV4Rm9yd2FyZGVkUmVmXG4gICAgICAgIH0pKTtcbiAgICAgIH0sIFtyZWFjdFJlZHV4Rm9yd2FyZGVkUmVmLCBXcmFwcGVkQ29tcG9uZW50LCBhY3R1YWxDaGlsZFByb3BzXSk7IC8vIElmIFJlYWN0IHNlZXMgdGhlIGV4YWN0IHNhbWUgZWxlbWVudCByZWZlcmVuY2UgYXMgbGFzdCB0aW1lLCBpdCBiYWlscyBvdXQgb2YgcmUtcmVuZGVyaW5nXG4gICAgICAvLyB0aGF0IGNoaWxkLCBzYW1lIGFzIGlmIGl0IHdhcyB3cmFwcGVkIGluIFJlYWN0Lm1lbW8oKSBvciByZXR1cm5lZCBmYWxzZSBmcm9tIHNob3VsZENvbXBvbmVudFVwZGF0ZS5cblxuICAgICAgdmFyIHJlbmRlcmVkQ2hpbGQgPSB1c2VNZW1vKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHNob3VsZEhhbmRsZVN0YXRlQ2hhbmdlcykge1xuICAgICAgICAgIC8vIElmIHRoaXMgY29tcG9uZW50IGlzIHN1YnNjcmliZWQgdG8gc3RvcmUgdXBkYXRlcywgd2UgbmVlZCB0byBwYXNzIGl0cyBvd25cbiAgICAgICAgICAvLyBzdWJzY3JpcHRpb24gaW5zdGFuY2UgZG93biB0byBvdXIgZGVzY2VuZGFudHMuIFRoYXQgbWVhbnMgcmVuZGVyaW5nIHRoZSBzYW1lXG4gICAgICAgICAgLy8gQ29udGV4dCBpbnN0YW5jZSwgYW5kIHB1dHRpbmcgYSBkaWZmZXJlbnQgdmFsdWUgaW50byB0aGUgY29udGV4dC5cbiAgICAgICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChDb250ZXh0VG9Vc2UuUHJvdmlkZXIsIHtcbiAgICAgICAgICAgIHZhbHVlOiBvdmVycmlkZGVuQ29udGV4dFZhbHVlXG4gICAgICAgICAgfSwgcmVuZGVyZWRXcmFwcGVkQ29tcG9uZW50KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiByZW5kZXJlZFdyYXBwZWRDb21wb25lbnQ7XG4gICAgICB9LCBbQ29udGV4dFRvVXNlLCByZW5kZXJlZFdyYXBwZWRDb21wb25lbnQsIG92ZXJyaWRkZW5Db250ZXh0VmFsdWVdKTtcbiAgICAgIHJldHVybiByZW5kZXJlZENoaWxkO1xuICAgIH0gLy8gSWYgd2UncmUgaW4gXCJwdXJlXCIgbW9kZSwgZW5zdXJlIG91ciB3cmFwcGVyIGNvbXBvbmVudCBvbmx5IHJlLXJlbmRlcnMgd2hlbiBpbmNvbWluZyBwcm9wcyBoYXZlIGNoYW5nZWQuXG5cblxuICAgIHZhciBDb25uZWN0ID0gcHVyZSA/IFJlYWN0Lm1lbW8oQ29ubmVjdEZ1bmN0aW9uKSA6IENvbm5lY3RGdW5jdGlvbjtcbiAgICBDb25uZWN0LldyYXBwZWRDb21wb25lbnQgPSBXcmFwcGVkQ29tcG9uZW50O1xuICAgIENvbm5lY3QuZGlzcGxheU5hbWUgPSBkaXNwbGF5TmFtZTtcblxuICAgIGlmIChmb3J3YXJkUmVmKSB7XG4gICAgICB2YXIgZm9yd2FyZGVkID0gUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBmb3J3YXJkQ29ubmVjdFJlZihwcm9wcywgcmVmKSB7XG4gICAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KENvbm5lY3QsIF9leHRlbmRzKHt9LCBwcm9wcywge1xuICAgICAgICAgIHJlYWN0UmVkdXhGb3J3YXJkZWRSZWY6IHJlZlxuICAgICAgICB9KSk7XG4gICAgICB9KTtcbiAgICAgIGZvcndhcmRlZC5kaXNwbGF5TmFtZSA9IGRpc3BsYXlOYW1lO1xuICAgICAgZm9yd2FyZGVkLldyYXBwZWRDb21wb25lbnQgPSBXcmFwcGVkQ29tcG9uZW50O1xuICAgICAgcmV0dXJuIGhvaXN0U3RhdGljcyhmb3J3YXJkZWQsIFdyYXBwZWRDb21wb25lbnQpO1xuICAgIH1cblxuICAgIHJldHVybiBob2lzdFN0YXRpY3MoQ29ubmVjdCwgV3JhcHBlZENvbXBvbmVudCk7XG4gIH07XG59IiwiZnVuY3Rpb24gaXMoeCwgeSkge1xuICBpZiAoeCA9PT0geSkge1xuICAgIHJldHVybiB4ICE9PSAwIHx8IHkgIT09IDAgfHwgMSAvIHggPT09IDEgLyB5O1xuICB9IGVsc2Uge1xuICAgIHJldHVybiB4ICE9PSB4ICYmIHkgIT09IHk7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gc2hhbGxvd0VxdWFsKG9iakEsIG9iakIpIHtcbiAgaWYgKGlzKG9iakEsIG9iakIpKSByZXR1cm4gdHJ1ZTtcblxuICBpZiAodHlwZW9mIG9iakEgIT09ICdvYmplY3QnIHx8IG9iakEgPT09IG51bGwgfHwgdHlwZW9mIG9iakIgIT09ICdvYmplY3QnIHx8IG9iakIgPT09IG51bGwpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICB2YXIga2V5c0EgPSBPYmplY3Qua2V5cyhvYmpBKTtcbiAgdmFyIGtleXNCID0gT2JqZWN0LmtleXMob2JqQik7XG4gIGlmIChrZXlzQS5sZW5ndGggIT09IGtleXNCLmxlbmd0aCkgcmV0dXJuIGZhbHNlO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwga2V5c0EubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmpCLCBrZXlzQVtpXSkgfHwgIWlzKG9iakFba2V5c0FbaV1dLCBvYmpCW2tleXNBW2ldXSkpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdHJ1ZTtcbn0iLCJpbXBvcnQgdmVyaWZ5UGxhaW5PYmplY3QgZnJvbSAnLi4vdXRpbHMvdmVyaWZ5UGxhaW5PYmplY3QnO1xuZXhwb3J0IGZ1bmN0aW9uIHdyYXBNYXBUb1Byb3BzQ29uc3RhbnQoZ2V0Q29uc3RhbnQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGluaXRDb25zdGFudFNlbGVjdG9yKGRpc3BhdGNoLCBvcHRpb25zKSB7XG4gICAgdmFyIGNvbnN0YW50ID0gZ2V0Q29uc3RhbnQoZGlzcGF0Y2gsIG9wdGlvbnMpO1xuXG4gICAgZnVuY3Rpb24gY29uc3RhbnRTZWxlY3RvcigpIHtcbiAgICAgIHJldHVybiBjb25zdGFudDtcbiAgICB9XG5cbiAgICBjb25zdGFudFNlbGVjdG9yLmRlcGVuZHNPbk93blByb3BzID0gZmFsc2U7XG4gICAgcmV0dXJuIGNvbnN0YW50U2VsZWN0b3I7XG4gIH07XG59IC8vIGRlcGVuZHNPbk93blByb3BzIGlzIHVzZWQgYnkgY3JlYXRlTWFwVG9Qcm9wc1Byb3h5IHRvIGRldGVybWluZSB3aGV0aGVyIHRvIHBhc3MgcHJvcHMgYXMgYXJnc1xuLy8gdG8gdGhlIG1hcFRvUHJvcHMgZnVuY3Rpb24gYmVpbmcgd3JhcHBlZC4gSXQgaXMgYWxzbyB1c2VkIGJ5IG1ha2VQdXJlUHJvcHNTZWxlY3RvciB0byBkZXRlcm1pbmVcbi8vIHdoZXRoZXIgbWFwVG9Qcm9wcyBuZWVkcyB0byBiZSBpbnZva2VkIHdoZW4gcHJvcHMgaGF2ZSBjaGFuZ2VkLlxuLy9cbi8vIEEgbGVuZ3RoIG9mIG9uZSBzaWduYWxzIHRoYXQgbWFwVG9Qcm9wcyBkb2VzIG5vdCBkZXBlbmQgb24gcHJvcHMgZnJvbSB0aGUgcGFyZW50IGNvbXBvbmVudC5cbi8vIEEgbGVuZ3RoIG9mIHplcm8gaXMgYXNzdW1lZCB0byBtZWFuIG1hcFRvUHJvcHMgaXMgZ2V0dGluZyBhcmdzIHZpYSBhcmd1bWVudHMgb3IgLi4uYXJncyBhbmRcbi8vIHRoZXJlZm9yZSBub3QgcmVwb3J0aW5nIGl0cyBsZW5ndGggYWNjdXJhdGVseS4uXG5cbmV4cG9ydCBmdW5jdGlvbiBnZXREZXBlbmRzT25Pd25Qcm9wcyhtYXBUb1Byb3BzKSB7XG4gIHJldHVybiBtYXBUb1Byb3BzLmRlcGVuZHNPbk93blByb3BzICE9PSBudWxsICYmIG1hcFRvUHJvcHMuZGVwZW5kc09uT3duUHJvcHMgIT09IHVuZGVmaW5lZCA/IEJvb2xlYW4obWFwVG9Qcm9wcy5kZXBlbmRzT25Pd25Qcm9wcykgOiBtYXBUb1Byb3BzLmxlbmd0aCAhPT0gMTtcbn0gLy8gVXNlZCBieSB3aGVuTWFwU3RhdGVUb1Byb3BzSXNGdW5jdGlvbiBhbmQgd2hlbk1hcERpc3BhdGNoVG9Qcm9wc0lzRnVuY3Rpb24sXG4vLyB0aGlzIGZ1bmN0aW9uIHdyYXBzIG1hcFRvUHJvcHMgaW4gYSBwcm94eSBmdW5jdGlvbiB3aGljaCBkb2VzIHNldmVyYWwgdGhpbmdzOlxuLy9cbi8vICAqIERldGVjdHMgd2hldGhlciB0aGUgbWFwVG9Qcm9wcyBmdW5jdGlvbiBiZWluZyBjYWxsZWQgZGVwZW5kcyBvbiBwcm9wcywgd2hpY2hcbi8vICAgIGlzIHVzZWQgYnkgc2VsZWN0b3JGYWN0b3J5IHRvIGRlY2lkZSBpZiBpdCBzaG91bGQgcmVpbnZva2Ugb24gcHJvcHMgY2hhbmdlcy5cbi8vXG4vLyAgKiBPbiBmaXJzdCBjYWxsLCBoYW5kbGVzIG1hcFRvUHJvcHMgaWYgcmV0dXJucyBhbm90aGVyIGZ1bmN0aW9uLCBhbmQgdHJlYXRzIHRoYXRcbi8vICAgIG5ldyBmdW5jdGlvbiBhcyB0aGUgdHJ1ZSBtYXBUb1Byb3BzIGZvciBzdWJzZXF1ZW50IGNhbGxzLlxuLy9cbi8vICAqIE9uIGZpcnN0IGNhbGwsIHZlcmlmaWVzIHRoZSBmaXJzdCByZXN1bHQgaXMgYSBwbGFpbiBvYmplY3QsIGluIG9yZGVyIHRvIHdhcm5cbi8vICAgIHRoZSBkZXZlbG9wZXIgdGhhdCB0aGVpciBtYXBUb1Byb3BzIGZ1bmN0aW9uIGlzIG5vdCByZXR1cm5pbmcgYSB2YWxpZCByZXN1bHQuXG4vL1xuXG5leHBvcnQgZnVuY3Rpb24gd3JhcE1hcFRvUHJvcHNGdW5jKG1hcFRvUHJvcHMsIG1ldGhvZE5hbWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGluaXRQcm94eVNlbGVjdG9yKGRpc3BhdGNoLCBfcmVmKSB7XG4gICAgdmFyIGRpc3BsYXlOYW1lID0gX3JlZi5kaXNwbGF5TmFtZTtcblxuICAgIHZhciBwcm94eSA9IGZ1bmN0aW9uIG1hcFRvUHJvcHNQcm94eShzdGF0ZU9yRGlzcGF0Y2gsIG93blByb3BzKSB7XG4gICAgICByZXR1cm4gcHJveHkuZGVwZW5kc09uT3duUHJvcHMgPyBwcm94eS5tYXBUb1Byb3BzKHN0YXRlT3JEaXNwYXRjaCwgb3duUHJvcHMpIDogcHJveHkubWFwVG9Qcm9wcyhzdGF0ZU9yRGlzcGF0Y2gpO1xuICAgIH07IC8vIGFsbG93IGRldGVjdEZhY3RvcnlBbmRWZXJpZnkgdG8gZ2V0IG93blByb3BzXG5cblxuICAgIHByb3h5LmRlcGVuZHNPbk93blByb3BzID0gdHJ1ZTtcblxuICAgIHByb3h5Lm1hcFRvUHJvcHMgPSBmdW5jdGlvbiBkZXRlY3RGYWN0b3J5QW5kVmVyaWZ5KHN0YXRlT3JEaXNwYXRjaCwgb3duUHJvcHMpIHtcbiAgICAgIHByb3h5Lm1hcFRvUHJvcHMgPSBtYXBUb1Byb3BzO1xuICAgICAgcHJveHkuZGVwZW5kc09uT3duUHJvcHMgPSBnZXREZXBlbmRzT25Pd25Qcm9wcyhtYXBUb1Byb3BzKTtcbiAgICAgIHZhciBwcm9wcyA9IHByb3h5KHN0YXRlT3JEaXNwYXRjaCwgb3duUHJvcHMpO1xuXG4gICAgICBpZiAodHlwZW9mIHByb3BzID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHByb3h5Lm1hcFRvUHJvcHMgPSBwcm9wcztcbiAgICAgICAgcHJveHkuZGVwZW5kc09uT3duUHJvcHMgPSBnZXREZXBlbmRzT25Pd25Qcm9wcyhwcm9wcyk7XG4gICAgICAgIHByb3BzID0gcHJveHkoc3RhdGVPckRpc3BhdGNoLCBvd25Qcm9wcyk7XG4gICAgICB9XG5cbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB2ZXJpZnlQbGFpbk9iamVjdChwcm9wcywgZGlzcGxheU5hbWUsIG1ldGhvZE5hbWUpO1xuICAgICAgcmV0dXJuIHByb3BzO1xuICAgIH07XG5cbiAgICByZXR1cm4gcHJveHk7XG4gIH07XG59IiwiaW1wb3J0IHsgYmluZEFjdGlvbkNyZWF0b3JzIH0gZnJvbSAncmVkdXgnO1xuaW1wb3J0IHsgd3JhcE1hcFRvUHJvcHNDb25zdGFudCwgd3JhcE1hcFRvUHJvcHNGdW5jIH0gZnJvbSAnLi93cmFwTWFwVG9Qcm9wcyc7XG5leHBvcnQgZnVuY3Rpb24gd2hlbk1hcERpc3BhdGNoVG9Qcm9wc0lzRnVuY3Rpb24obWFwRGlzcGF0Y2hUb1Byb3BzKSB7XG4gIHJldHVybiB0eXBlb2YgbWFwRGlzcGF0Y2hUb1Byb3BzID09PSAnZnVuY3Rpb24nID8gd3JhcE1hcFRvUHJvcHNGdW5jKG1hcERpc3BhdGNoVG9Qcm9wcywgJ21hcERpc3BhdGNoVG9Qcm9wcycpIDogdW5kZWZpbmVkO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHdoZW5NYXBEaXNwYXRjaFRvUHJvcHNJc01pc3NpbmcobWFwRGlzcGF0Y2hUb1Byb3BzKSB7XG4gIHJldHVybiAhbWFwRGlzcGF0Y2hUb1Byb3BzID8gd3JhcE1hcFRvUHJvcHNDb25zdGFudChmdW5jdGlvbiAoZGlzcGF0Y2gpIHtcbiAgICByZXR1cm4ge1xuICAgICAgZGlzcGF0Y2g6IGRpc3BhdGNoXG4gICAgfTtcbiAgfSkgOiB1bmRlZmluZWQ7XG59XG5leHBvcnQgZnVuY3Rpb24gd2hlbk1hcERpc3BhdGNoVG9Qcm9wc0lzT2JqZWN0KG1hcERpc3BhdGNoVG9Qcm9wcykge1xuICByZXR1cm4gbWFwRGlzcGF0Y2hUb1Byb3BzICYmIHR5cGVvZiBtYXBEaXNwYXRjaFRvUHJvcHMgPT09ICdvYmplY3QnID8gd3JhcE1hcFRvUHJvcHNDb25zdGFudChmdW5jdGlvbiAoZGlzcGF0Y2gpIHtcbiAgICByZXR1cm4gYmluZEFjdGlvbkNyZWF0b3JzKG1hcERpc3BhdGNoVG9Qcm9wcywgZGlzcGF0Y2gpO1xuICB9KSA6IHVuZGVmaW5lZDtcbn1cbmV4cG9ydCBkZWZhdWx0IFt3aGVuTWFwRGlzcGF0Y2hUb1Byb3BzSXNGdW5jdGlvbiwgd2hlbk1hcERpc3BhdGNoVG9Qcm9wc0lzTWlzc2luZywgd2hlbk1hcERpc3BhdGNoVG9Qcm9wc0lzT2JqZWN0XTsiLCJpbXBvcnQgeyB3cmFwTWFwVG9Qcm9wc0NvbnN0YW50LCB3cmFwTWFwVG9Qcm9wc0Z1bmMgfSBmcm9tICcuL3dyYXBNYXBUb1Byb3BzJztcbmV4cG9ydCBmdW5jdGlvbiB3aGVuTWFwU3RhdGVUb1Byb3BzSXNGdW5jdGlvbihtYXBTdGF0ZVRvUHJvcHMpIHtcbiAgcmV0dXJuIHR5cGVvZiBtYXBTdGF0ZVRvUHJvcHMgPT09ICdmdW5jdGlvbicgPyB3cmFwTWFwVG9Qcm9wc0Z1bmMobWFwU3RhdGVUb1Byb3BzLCAnbWFwU3RhdGVUb1Byb3BzJykgOiB1bmRlZmluZWQ7XG59XG5leHBvcnQgZnVuY3Rpb24gd2hlbk1hcFN0YXRlVG9Qcm9wc0lzTWlzc2luZyhtYXBTdGF0ZVRvUHJvcHMpIHtcbiAgcmV0dXJuICFtYXBTdGF0ZVRvUHJvcHMgPyB3cmFwTWFwVG9Qcm9wc0NvbnN0YW50KGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4ge307XG4gIH0pIDogdW5kZWZpbmVkO1xufVxuZXhwb3J0IGRlZmF1bHQgW3doZW5NYXBTdGF0ZVRvUHJvcHNJc0Z1bmN0aW9uLCB3aGVuTWFwU3RhdGVUb1Byb3BzSXNNaXNzaW5nXTsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCB2ZXJpZnlQbGFpbk9iamVjdCBmcm9tICcuLi91dGlscy92ZXJpZnlQbGFpbk9iamVjdCc7XG5leHBvcnQgZnVuY3Rpb24gZGVmYXVsdE1lcmdlUHJvcHMoc3RhdGVQcm9wcywgZGlzcGF0Y2hQcm9wcywgb3duUHJvcHMpIHtcbiAgcmV0dXJuIF9leHRlbmRzKHt9LCBvd25Qcm9wcywge30sIHN0YXRlUHJvcHMsIHt9LCBkaXNwYXRjaFByb3BzKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiB3cmFwTWVyZ2VQcm9wc0Z1bmMobWVyZ2VQcm9wcykge1xuICByZXR1cm4gZnVuY3Rpb24gaW5pdE1lcmdlUHJvcHNQcm94eShkaXNwYXRjaCwgX3JlZikge1xuICAgIHZhciBkaXNwbGF5TmFtZSA9IF9yZWYuZGlzcGxheU5hbWUsXG4gICAgICAgIHB1cmUgPSBfcmVmLnB1cmUsXG4gICAgICAgIGFyZU1lcmdlZFByb3BzRXF1YWwgPSBfcmVmLmFyZU1lcmdlZFByb3BzRXF1YWw7XG4gICAgdmFyIGhhc1J1bk9uY2UgPSBmYWxzZTtcbiAgICB2YXIgbWVyZ2VkUHJvcHM7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIG1lcmdlUHJvcHNQcm94eShzdGF0ZVByb3BzLCBkaXNwYXRjaFByb3BzLCBvd25Qcm9wcykge1xuICAgICAgdmFyIG5leHRNZXJnZWRQcm9wcyA9IG1lcmdlUHJvcHMoc3RhdGVQcm9wcywgZGlzcGF0Y2hQcm9wcywgb3duUHJvcHMpO1xuXG4gICAgICBpZiAoaGFzUnVuT25jZSkge1xuICAgICAgICBpZiAoIXB1cmUgfHwgIWFyZU1lcmdlZFByb3BzRXF1YWwobmV4dE1lcmdlZFByb3BzLCBtZXJnZWRQcm9wcykpIG1lcmdlZFByb3BzID0gbmV4dE1lcmdlZFByb3BzO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaGFzUnVuT25jZSA9IHRydWU7XG4gICAgICAgIG1lcmdlZFByb3BzID0gbmV4dE1lcmdlZFByb3BzO1xuICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgdmVyaWZ5UGxhaW5PYmplY3QobWVyZ2VkUHJvcHMsIGRpc3BsYXlOYW1lLCAnbWVyZ2VQcm9wcycpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gbWVyZ2VkUHJvcHM7XG4gICAgfTtcbiAgfTtcbn1cbmV4cG9ydCBmdW5jdGlvbiB3aGVuTWVyZ2VQcm9wc0lzRnVuY3Rpb24obWVyZ2VQcm9wcykge1xuICByZXR1cm4gdHlwZW9mIG1lcmdlUHJvcHMgPT09ICdmdW5jdGlvbicgPyB3cmFwTWVyZ2VQcm9wc0Z1bmMobWVyZ2VQcm9wcykgOiB1bmRlZmluZWQ7XG59XG5leHBvcnQgZnVuY3Rpb24gd2hlbk1lcmdlUHJvcHNJc09taXR0ZWQobWVyZ2VQcm9wcykge1xuICByZXR1cm4gIW1lcmdlUHJvcHMgPyBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGRlZmF1bHRNZXJnZVByb3BzO1xuICB9IDogdW5kZWZpbmVkO1xufVxuZXhwb3J0IGRlZmF1bHQgW3doZW5NZXJnZVByb3BzSXNGdW5jdGlvbiwgd2hlbk1lcmdlUHJvcHNJc09taXR0ZWRdOyIsImltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuaW1wb3J0IHZlcmlmeVN1YnNlbGVjdG9ycyBmcm9tICcuL3ZlcmlmeVN1YnNlbGVjdG9ycyc7XG5leHBvcnQgZnVuY3Rpb24gaW1wdXJlRmluYWxQcm9wc1NlbGVjdG9yRmFjdG9yeShtYXBTdGF0ZVRvUHJvcHMsIG1hcERpc3BhdGNoVG9Qcm9wcywgbWVyZ2VQcm9wcywgZGlzcGF0Y2gpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGltcHVyZUZpbmFsUHJvcHNTZWxlY3RvcihzdGF0ZSwgb3duUHJvcHMpIHtcbiAgICByZXR1cm4gbWVyZ2VQcm9wcyhtYXBTdGF0ZVRvUHJvcHMoc3RhdGUsIG93blByb3BzKSwgbWFwRGlzcGF0Y2hUb1Byb3BzKGRpc3BhdGNoLCBvd25Qcm9wcyksIG93blByb3BzKTtcbiAgfTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBwdXJlRmluYWxQcm9wc1NlbGVjdG9yRmFjdG9yeShtYXBTdGF0ZVRvUHJvcHMsIG1hcERpc3BhdGNoVG9Qcm9wcywgbWVyZ2VQcm9wcywgZGlzcGF0Y2gsIF9yZWYpIHtcbiAgdmFyIGFyZVN0YXRlc0VxdWFsID0gX3JlZi5hcmVTdGF0ZXNFcXVhbCxcbiAgICAgIGFyZU93blByb3BzRXF1YWwgPSBfcmVmLmFyZU93blByb3BzRXF1YWwsXG4gICAgICBhcmVTdGF0ZVByb3BzRXF1YWwgPSBfcmVmLmFyZVN0YXRlUHJvcHNFcXVhbDtcbiAgdmFyIGhhc1J1bkF0TGVhc3RPbmNlID0gZmFsc2U7XG4gIHZhciBzdGF0ZTtcbiAgdmFyIG93blByb3BzO1xuICB2YXIgc3RhdGVQcm9wcztcbiAgdmFyIGRpc3BhdGNoUHJvcHM7XG4gIHZhciBtZXJnZWRQcm9wcztcblxuICBmdW5jdGlvbiBoYW5kbGVGaXJzdENhbGwoZmlyc3RTdGF0ZSwgZmlyc3RPd25Qcm9wcykge1xuICAgIHN0YXRlID0gZmlyc3RTdGF0ZTtcbiAgICBvd25Qcm9wcyA9IGZpcnN0T3duUHJvcHM7XG4gICAgc3RhdGVQcm9wcyA9IG1hcFN0YXRlVG9Qcm9wcyhzdGF0ZSwgb3duUHJvcHMpO1xuICAgIGRpc3BhdGNoUHJvcHMgPSBtYXBEaXNwYXRjaFRvUHJvcHMoZGlzcGF0Y2gsIG93blByb3BzKTtcbiAgICBtZXJnZWRQcm9wcyA9IG1lcmdlUHJvcHMoc3RhdGVQcm9wcywgZGlzcGF0Y2hQcm9wcywgb3duUHJvcHMpO1xuICAgIGhhc1J1bkF0TGVhc3RPbmNlID0gdHJ1ZTtcbiAgICByZXR1cm4gbWVyZ2VkUHJvcHM7XG4gIH1cblxuICBmdW5jdGlvbiBoYW5kbGVOZXdQcm9wc0FuZE5ld1N0YXRlKCkge1xuICAgIHN0YXRlUHJvcHMgPSBtYXBTdGF0ZVRvUHJvcHMoc3RhdGUsIG93blByb3BzKTtcbiAgICBpZiAobWFwRGlzcGF0Y2hUb1Byb3BzLmRlcGVuZHNPbk93blByb3BzKSBkaXNwYXRjaFByb3BzID0gbWFwRGlzcGF0Y2hUb1Byb3BzKGRpc3BhdGNoLCBvd25Qcm9wcyk7XG4gICAgbWVyZ2VkUHJvcHMgPSBtZXJnZVByb3BzKHN0YXRlUHJvcHMsIGRpc3BhdGNoUHJvcHMsIG93blByb3BzKTtcbiAgICByZXR1cm4gbWVyZ2VkUHJvcHM7XG4gIH1cblxuICBmdW5jdGlvbiBoYW5kbGVOZXdQcm9wcygpIHtcbiAgICBpZiAobWFwU3RhdGVUb1Byb3BzLmRlcGVuZHNPbk93blByb3BzKSBzdGF0ZVByb3BzID0gbWFwU3RhdGVUb1Byb3BzKHN0YXRlLCBvd25Qcm9wcyk7XG4gICAgaWYgKG1hcERpc3BhdGNoVG9Qcm9wcy5kZXBlbmRzT25Pd25Qcm9wcykgZGlzcGF0Y2hQcm9wcyA9IG1hcERpc3BhdGNoVG9Qcm9wcyhkaXNwYXRjaCwgb3duUHJvcHMpO1xuICAgIG1lcmdlZFByb3BzID0gbWVyZ2VQcm9wcyhzdGF0ZVByb3BzLCBkaXNwYXRjaFByb3BzLCBvd25Qcm9wcyk7XG4gICAgcmV0dXJuIG1lcmdlZFByb3BzO1xuICB9XG5cbiAgZnVuY3Rpb24gaGFuZGxlTmV3U3RhdGUoKSB7XG4gICAgdmFyIG5leHRTdGF0ZVByb3BzID0gbWFwU3RhdGVUb1Byb3BzKHN0YXRlLCBvd25Qcm9wcyk7XG4gICAgdmFyIHN0YXRlUHJvcHNDaGFuZ2VkID0gIWFyZVN0YXRlUHJvcHNFcXVhbChuZXh0U3RhdGVQcm9wcywgc3RhdGVQcm9wcyk7XG4gICAgc3RhdGVQcm9wcyA9IG5leHRTdGF0ZVByb3BzO1xuICAgIGlmIChzdGF0ZVByb3BzQ2hhbmdlZCkgbWVyZ2VkUHJvcHMgPSBtZXJnZVByb3BzKHN0YXRlUHJvcHMsIGRpc3BhdGNoUHJvcHMsIG93blByb3BzKTtcbiAgICByZXR1cm4gbWVyZ2VkUHJvcHM7XG4gIH1cblxuICBmdW5jdGlvbiBoYW5kbGVTdWJzZXF1ZW50Q2FsbHMobmV4dFN0YXRlLCBuZXh0T3duUHJvcHMpIHtcbiAgICB2YXIgcHJvcHNDaGFuZ2VkID0gIWFyZU93blByb3BzRXF1YWwobmV4dE93blByb3BzLCBvd25Qcm9wcyk7XG4gICAgdmFyIHN0YXRlQ2hhbmdlZCA9ICFhcmVTdGF0ZXNFcXVhbChuZXh0U3RhdGUsIHN0YXRlKTtcbiAgICBzdGF0ZSA9IG5leHRTdGF0ZTtcbiAgICBvd25Qcm9wcyA9IG5leHRPd25Qcm9wcztcbiAgICBpZiAocHJvcHNDaGFuZ2VkICYmIHN0YXRlQ2hhbmdlZCkgcmV0dXJuIGhhbmRsZU5ld1Byb3BzQW5kTmV3U3RhdGUoKTtcbiAgICBpZiAocHJvcHNDaGFuZ2VkKSByZXR1cm4gaGFuZGxlTmV3UHJvcHMoKTtcbiAgICBpZiAoc3RhdGVDaGFuZ2VkKSByZXR1cm4gaGFuZGxlTmV3U3RhdGUoKTtcbiAgICByZXR1cm4gbWVyZ2VkUHJvcHM7XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24gcHVyZUZpbmFsUHJvcHNTZWxlY3RvcihuZXh0U3RhdGUsIG5leHRPd25Qcm9wcykge1xuICAgIHJldHVybiBoYXNSdW5BdExlYXN0T25jZSA/IGhhbmRsZVN1YnNlcXVlbnRDYWxscyhuZXh0U3RhdGUsIG5leHRPd25Qcm9wcykgOiBoYW5kbGVGaXJzdENhbGwobmV4dFN0YXRlLCBuZXh0T3duUHJvcHMpO1xuICB9O1xufSAvLyBUT0RPOiBBZGQgbW9yZSBjb21tZW50c1xuLy8gSWYgcHVyZSBpcyB0cnVlLCB0aGUgc2VsZWN0b3IgcmV0dXJuZWQgYnkgc2VsZWN0b3JGYWN0b3J5IHdpbGwgbWVtb2l6ZSBpdHMgcmVzdWx0cyxcbi8vIGFsbG93aW5nIGNvbm5lY3RBZHZhbmNlZCdzIHNob3VsZENvbXBvbmVudFVwZGF0ZSB0byByZXR1cm4gZmFsc2UgaWYgZmluYWxcbi8vIHByb3BzIGhhdmUgbm90IGNoYW5nZWQuIElmIGZhbHNlLCB0aGUgc2VsZWN0b3Igd2lsbCBhbHdheXMgcmV0dXJuIGEgbmV3XG4vLyBvYmplY3QgYW5kIHNob3VsZENvbXBvbmVudFVwZGF0ZSB3aWxsIGFsd2F5cyByZXR1cm4gdHJ1ZS5cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZmluYWxQcm9wc1NlbGVjdG9yRmFjdG9yeShkaXNwYXRjaCwgX3JlZjIpIHtcbiAgdmFyIGluaXRNYXBTdGF0ZVRvUHJvcHMgPSBfcmVmMi5pbml0TWFwU3RhdGVUb1Byb3BzLFxuICAgICAgaW5pdE1hcERpc3BhdGNoVG9Qcm9wcyA9IF9yZWYyLmluaXRNYXBEaXNwYXRjaFRvUHJvcHMsXG4gICAgICBpbml0TWVyZ2VQcm9wcyA9IF9yZWYyLmluaXRNZXJnZVByb3BzLFxuICAgICAgb3B0aW9ucyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKF9yZWYyLCBbXCJpbml0TWFwU3RhdGVUb1Byb3BzXCIsIFwiaW5pdE1hcERpc3BhdGNoVG9Qcm9wc1wiLCBcImluaXRNZXJnZVByb3BzXCJdKTtcblxuICB2YXIgbWFwU3RhdGVUb1Byb3BzID0gaW5pdE1hcFN0YXRlVG9Qcm9wcyhkaXNwYXRjaCwgb3B0aW9ucyk7XG4gIHZhciBtYXBEaXNwYXRjaFRvUHJvcHMgPSBpbml0TWFwRGlzcGF0Y2hUb1Byb3BzKGRpc3BhdGNoLCBvcHRpb25zKTtcbiAgdmFyIG1lcmdlUHJvcHMgPSBpbml0TWVyZ2VQcm9wcyhkaXNwYXRjaCwgb3B0aW9ucyk7XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICB2ZXJpZnlTdWJzZWxlY3RvcnMobWFwU3RhdGVUb1Byb3BzLCBtYXBEaXNwYXRjaFRvUHJvcHMsIG1lcmdlUHJvcHMsIG9wdGlvbnMuZGlzcGxheU5hbWUpO1xuICB9XG5cbiAgdmFyIHNlbGVjdG9yRmFjdG9yeSA9IG9wdGlvbnMucHVyZSA/IHB1cmVGaW5hbFByb3BzU2VsZWN0b3JGYWN0b3J5IDogaW1wdXJlRmluYWxQcm9wc1NlbGVjdG9yRmFjdG9yeTtcbiAgcmV0dXJuIHNlbGVjdG9yRmFjdG9yeShtYXBTdGF0ZVRvUHJvcHMsIG1hcERpc3BhdGNoVG9Qcm9wcywgbWVyZ2VQcm9wcywgZGlzcGF0Y2gsIG9wdGlvbnMpO1xufSIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5pbXBvcnQgY29ubmVjdEFkdmFuY2VkIGZyb20gJy4uL2NvbXBvbmVudHMvY29ubmVjdEFkdmFuY2VkJztcbmltcG9ydCBzaGFsbG93RXF1YWwgZnJvbSAnLi4vdXRpbHMvc2hhbGxvd0VxdWFsJztcbmltcG9ydCBkZWZhdWx0TWFwRGlzcGF0Y2hUb1Byb3BzRmFjdG9yaWVzIGZyb20gJy4vbWFwRGlzcGF0Y2hUb1Byb3BzJztcbmltcG9ydCBkZWZhdWx0TWFwU3RhdGVUb1Byb3BzRmFjdG9yaWVzIGZyb20gJy4vbWFwU3RhdGVUb1Byb3BzJztcbmltcG9ydCBkZWZhdWx0TWVyZ2VQcm9wc0ZhY3RvcmllcyBmcm9tICcuL21lcmdlUHJvcHMnO1xuaW1wb3J0IGRlZmF1bHRTZWxlY3RvckZhY3RvcnkgZnJvbSAnLi9zZWxlY3RvckZhY3RvcnknO1xuLypcclxuICBjb25uZWN0IGlzIGEgZmFjYWRlIG92ZXIgY29ubmVjdEFkdmFuY2VkLiBJdCB0dXJucyBpdHMgYXJncyBpbnRvIGEgY29tcGF0aWJsZVxyXG4gIHNlbGVjdG9yRmFjdG9yeSwgd2hpY2ggaGFzIHRoZSBzaWduYXR1cmU6XHJcblxyXG4gICAgKGRpc3BhdGNoLCBvcHRpb25zKSA9PiAobmV4dFN0YXRlLCBuZXh0T3duUHJvcHMpID0+IG5leHRGaW5hbFByb3BzXHJcbiAgXHJcbiAgY29ubmVjdCBwYXNzZXMgaXRzIGFyZ3MgdG8gY29ubmVjdEFkdmFuY2VkIGFzIG9wdGlvbnMsIHdoaWNoIHdpbGwgaW4gdHVybiBwYXNzIHRoZW0gdG9cclxuICBzZWxlY3RvckZhY3RvcnkgZWFjaCB0aW1lIGEgQ29ubmVjdCBjb21wb25lbnQgaW5zdGFuY2UgaXMgaW5zdGFudGlhdGVkIG9yIGhvdCByZWxvYWRlZC5cclxuXHJcbiAgc2VsZWN0b3JGYWN0b3J5IHJldHVybnMgYSBmaW5hbCBwcm9wcyBzZWxlY3RvciBmcm9tIGl0cyBtYXBTdGF0ZVRvUHJvcHMsXHJcbiAgbWFwU3RhdGVUb1Byb3BzRmFjdG9yaWVzLCBtYXBEaXNwYXRjaFRvUHJvcHMsIG1hcERpc3BhdGNoVG9Qcm9wc0ZhY3RvcmllcywgbWVyZ2VQcm9wcyxcclxuICBtZXJnZVByb3BzRmFjdG9yaWVzLCBhbmQgcHVyZSBhcmdzLlxyXG5cclxuICBUaGUgcmVzdWx0aW5nIGZpbmFsIHByb3BzIHNlbGVjdG9yIGlzIGNhbGxlZCBieSB0aGUgQ29ubmVjdCBjb21wb25lbnQgaW5zdGFuY2Ugd2hlbmV2ZXJcclxuICBpdCByZWNlaXZlcyBuZXcgcHJvcHMgb3Igc3RvcmUgc3RhdGUuXHJcbiAqL1xuXG5mdW5jdGlvbiBtYXRjaChhcmcsIGZhY3RvcmllcywgbmFtZSkge1xuICBmb3IgKHZhciBpID0gZmFjdG9yaWVzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgdmFyIHJlc3VsdCA9IGZhY3Rvcmllc1tpXShhcmcpO1xuICAgIGlmIChyZXN1bHQpIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24gKGRpc3BhdGNoLCBvcHRpb25zKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiSW52YWxpZCB2YWx1ZSBvZiB0eXBlIFwiICsgdHlwZW9mIGFyZyArIFwiIGZvciBcIiArIG5hbWUgKyBcIiBhcmd1bWVudCB3aGVuIGNvbm5lY3RpbmcgY29tcG9uZW50IFwiICsgb3B0aW9ucy53cmFwcGVkQ29tcG9uZW50TmFtZSArIFwiLlwiKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gc3RyaWN0RXF1YWwoYSwgYikge1xuICByZXR1cm4gYSA9PT0gYjtcbn0gLy8gY3JlYXRlQ29ubmVjdCB3aXRoIGRlZmF1bHQgYXJncyBidWlsZHMgdGhlICdvZmZpY2lhbCcgY29ubmVjdCBiZWhhdmlvci4gQ2FsbGluZyBpdCB3aXRoXG4vLyBkaWZmZXJlbnQgb3B0aW9ucyBvcGVucyB1cCBzb21lIHRlc3RpbmcgYW5kIGV4dGVuc2liaWxpdHkgc2NlbmFyaW9zXG5cblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUNvbm5lY3QoX3RlbXApIHtcbiAgdmFyIF9yZWYgPSBfdGVtcCA9PT0gdm9pZCAwID8ge30gOiBfdGVtcCxcbiAgICAgIF9yZWYkY29ubmVjdEhPQyA9IF9yZWYuY29ubmVjdEhPQyxcbiAgICAgIGNvbm5lY3RIT0MgPSBfcmVmJGNvbm5lY3RIT0MgPT09IHZvaWQgMCA/IGNvbm5lY3RBZHZhbmNlZCA6IF9yZWYkY29ubmVjdEhPQyxcbiAgICAgIF9yZWYkbWFwU3RhdGVUb1Byb3BzRiA9IF9yZWYubWFwU3RhdGVUb1Byb3BzRmFjdG9yaWVzLFxuICAgICAgbWFwU3RhdGVUb1Byb3BzRmFjdG9yaWVzID0gX3JlZiRtYXBTdGF0ZVRvUHJvcHNGID09PSB2b2lkIDAgPyBkZWZhdWx0TWFwU3RhdGVUb1Byb3BzRmFjdG9yaWVzIDogX3JlZiRtYXBTdGF0ZVRvUHJvcHNGLFxuICAgICAgX3JlZiRtYXBEaXNwYXRjaFRvUHJvID0gX3JlZi5tYXBEaXNwYXRjaFRvUHJvcHNGYWN0b3JpZXMsXG4gICAgICBtYXBEaXNwYXRjaFRvUHJvcHNGYWN0b3JpZXMgPSBfcmVmJG1hcERpc3BhdGNoVG9Qcm8gPT09IHZvaWQgMCA/IGRlZmF1bHRNYXBEaXNwYXRjaFRvUHJvcHNGYWN0b3JpZXMgOiBfcmVmJG1hcERpc3BhdGNoVG9Qcm8sXG4gICAgICBfcmVmJG1lcmdlUHJvcHNGYWN0b3IgPSBfcmVmLm1lcmdlUHJvcHNGYWN0b3JpZXMsXG4gICAgICBtZXJnZVByb3BzRmFjdG9yaWVzID0gX3JlZiRtZXJnZVByb3BzRmFjdG9yID09PSB2b2lkIDAgPyBkZWZhdWx0TWVyZ2VQcm9wc0ZhY3RvcmllcyA6IF9yZWYkbWVyZ2VQcm9wc0ZhY3RvcixcbiAgICAgIF9yZWYkc2VsZWN0b3JGYWN0b3J5ID0gX3JlZi5zZWxlY3RvckZhY3RvcnksXG4gICAgICBzZWxlY3RvckZhY3RvcnkgPSBfcmVmJHNlbGVjdG9yRmFjdG9yeSA9PT0gdm9pZCAwID8gZGVmYXVsdFNlbGVjdG9yRmFjdG9yeSA6IF9yZWYkc2VsZWN0b3JGYWN0b3J5O1xuXG4gIHJldHVybiBmdW5jdGlvbiBjb25uZWN0KG1hcFN0YXRlVG9Qcm9wcywgbWFwRGlzcGF0Y2hUb1Byb3BzLCBtZXJnZVByb3BzLCBfcmVmMikge1xuICAgIGlmIChfcmVmMiA9PT0gdm9pZCAwKSB7XG4gICAgICBfcmVmMiA9IHt9O1xuICAgIH1cblxuICAgIHZhciBfcmVmMyA9IF9yZWYyLFxuICAgICAgICBfcmVmMyRwdXJlID0gX3JlZjMucHVyZSxcbiAgICAgICAgcHVyZSA9IF9yZWYzJHB1cmUgPT09IHZvaWQgMCA/IHRydWUgOiBfcmVmMyRwdXJlLFxuICAgICAgICBfcmVmMyRhcmVTdGF0ZXNFcXVhbCA9IF9yZWYzLmFyZVN0YXRlc0VxdWFsLFxuICAgICAgICBhcmVTdGF0ZXNFcXVhbCA9IF9yZWYzJGFyZVN0YXRlc0VxdWFsID09PSB2b2lkIDAgPyBzdHJpY3RFcXVhbCA6IF9yZWYzJGFyZVN0YXRlc0VxdWFsLFxuICAgICAgICBfcmVmMyRhcmVPd25Qcm9wc0VxdWEgPSBfcmVmMy5hcmVPd25Qcm9wc0VxdWFsLFxuICAgICAgICBhcmVPd25Qcm9wc0VxdWFsID0gX3JlZjMkYXJlT3duUHJvcHNFcXVhID09PSB2b2lkIDAgPyBzaGFsbG93RXF1YWwgOiBfcmVmMyRhcmVPd25Qcm9wc0VxdWEsXG4gICAgICAgIF9yZWYzJGFyZVN0YXRlUHJvcHNFcSA9IF9yZWYzLmFyZVN0YXRlUHJvcHNFcXVhbCxcbiAgICAgICAgYXJlU3RhdGVQcm9wc0VxdWFsID0gX3JlZjMkYXJlU3RhdGVQcm9wc0VxID09PSB2b2lkIDAgPyBzaGFsbG93RXF1YWwgOiBfcmVmMyRhcmVTdGF0ZVByb3BzRXEsXG4gICAgICAgIF9yZWYzJGFyZU1lcmdlZFByb3BzRSA9IF9yZWYzLmFyZU1lcmdlZFByb3BzRXF1YWwsXG4gICAgICAgIGFyZU1lcmdlZFByb3BzRXF1YWwgPSBfcmVmMyRhcmVNZXJnZWRQcm9wc0UgPT09IHZvaWQgMCA/IHNoYWxsb3dFcXVhbCA6IF9yZWYzJGFyZU1lcmdlZFByb3BzRSxcbiAgICAgICAgZXh0cmFPcHRpb25zID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UoX3JlZjMsIFtcInB1cmVcIiwgXCJhcmVTdGF0ZXNFcXVhbFwiLCBcImFyZU93blByb3BzRXF1YWxcIiwgXCJhcmVTdGF0ZVByb3BzRXF1YWxcIiwgXCJhcmVNZXJnZWRQcm9wc0VxdWFsXCJdKTtcblxuICAgIHZhciBpbml0TWFwU3RhdGVUb1Byb3BzID0gbWF0Y2gobWFwU3RhdGVUb1Byb3BzLCBtYXBTdGF0ZVRvUHJvcHNGYWN0b3JpZXMsICdtYXBTdGF0ZVRvUHJvcHMnKTtcbiAgICB2YXIgaW5pdE1hcERpc3BhdGNoVG9Qcm9wcyA9IG1hdGNoKG1hcERpc3BhdGNoVG9Qcm9wcywgbWFwRGlzcGF0Y2hUb1Byb3BzRmFjdG9yaWVzLCAnbWFwRGlzcGF0Y2hUb1Byb3BzJyk7XG4gICAgdmFyIGluaXRNZXJnZVByb3BzID0gbWF0Y2gobWVyZ2VQcm9wcywgbWVyZ2VQcm9wc0ZhY3RvcmllcywgJ21lcmdlUHJvcHMnKTtcbiAgICByZXR1cm4gY29ubmVjdEhPQyhzZWxlY3RvckZhY3RvcnksIF9leHRlbmRzKHtcbiAgICAgIC8vIHVzZWQgaW4gZXJyb3IgbWVzc2FnZXNcbiAgICAgIG1ldGhvZE5hbWU6ICdjb25uZWN0JyxcbiAgICAgIC8vIHVzZWQgdG8gY29tcHV0ZSBDb25uZWN0J3MgZGlzcGxheU5hbWUgZnJvbSB0aGUgd3JhcHBlZCBjb21wb25lbnQncyBkaXNwbGF5TmFtZS5cbiAgICAgIGdldERpc3BsYXlOYW1lOiBmdW5jdGlvbiBnZXREaXNwbGF5TmFtZShuYW1lKSB7XG4gICAgICAgIHJldHVybiBcIkNvbm5lY3QoXCIgKyBuYW1lICsgXCIpXCI7XG4gICAgICB9LFxuICAgICAgLy8gaWYgbWFwU3RhdGVUb1Byb3BzIGlzIGZhbHN5LCB0aGUgQ29ubmVjdCBjb21wb25lbnQgZG9lc24ndCBzdWJzY3JpYmUgdG8gc3RvcmUgc3RhdGUgY2hhbmdlc1xuICAgICAgc2hvdWxkSGFuZGxlU3RhdGVDaGFuZ2VzOiBCb29sZWFuKG1hcFN0YXRlVG9Qcm9wcyksXG4gICAgICAvLyBwYXNzZWQgdGhyb3VnaCB0byBzZWxlY3RvckZhY3RvcnlcbiAgICAgIGluaXRNYXBTdGF0ZVRvUHJvcHM6IGluaXRNYXBTdGF0ZVRvUHJvcHMsXG4gICAgICBpbml0TWFwRGlzcGF0Y2hUb1Byb3BzOiBpbml0TWFwRGlzcGF0Y2hUb1Byb3BzLFxuICAgICAgaW5pdE1lcmdlUHJvcHM6IGluaXRNZXJnZVByb3BzLFxuICAgICAgcHVyZTogcHVyZSxcbiAgICAgIGFyZVN0YXRlc0VxdWFsOiBhcmVTdGF0ZXNFcXVhbCxcbiAgICAgIGFyZU93blByb3BzRXF1YWw6IGFyZU93blByb3BzRXF1YWwsXG4gICAgICBhcmVTdGF0ZVByb3BzRXF1YWw6IGFyZVN0YXRlUHJvcHNFcXVhbCxcbiAgICAgIGFyZU1lcmdlZFByb3BzRXF1YWw6IGFyZU1lcmdlZFByb3BzRXF1YWxcbiAgICB9LCBleHRyYU9wdGlvbnMpKTtcbiAgfTtcbn1cbmV4cG9ydCBkZWZhdWx0XG4vKiNfX1BVUkVfXyovXG5jcmVhdGVDb25uZWN0KCk7IiwiaW1wb3J0IHsgdXNlUmVkdWNlciwgdXNlUmVmLCB1c2VNZW1vLCB1c2VDb250ZXh0LCB1c2VEZWJ1Z1ZhbHVlIH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgdXNlUmVkdXhDb250ZXh0IGFzIHVzZURlZmF1bHRSZWR1eENvbnRleHQgfSBmcm9tICcuL3VzZVJlZHV4Q29udGV4dCc7XG5pbXBvcnQgU3Vic2NyaXB0aW9uIGZyb20gJy4uL3V0aWxzL1N1YnNjcmlwdGlvbic7XG5pbXBvcnQgeyB1c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0IH0gZnJvbSAnLi4vdXRpbHMvdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdCc7XG5pbXBvcnQgeyBSZWFjdFJlZHV4Q29udGV4dCB9IGZyb20gJy4uL2NvbXBvbmVudHMvQ29udGV4dCc7XG5cbnZhciByZWZFcXVhbGl0eSA9IGZ1bmN0aW9uIHJlZkVxdWFsaXR5KGEsIGIpIHtcbiAgcmV0dXJuIGEgPT09IGI7XG59O1xuXG5mdW5jdGlvbiB1c2VTZWxlY3RvcldpdGhTdG9yZUFuZFN1YnNjcmlwdGlvbihzZWxlY3RvciwgZXF1YWxpdHlGbiwgc3RvcmUsIGNvbnRleHRTdWIpIHtcbiAgdmFyIF91c2VSZWR1Y2VyID0gdXNlUmVkdWNlcihmdW5jdGlvbiAocykge1xuICAgIHJldHVybiBzICsgMTtcbiAgfSwgMCksXG4gICAgICBmb3JjZVJlbmRlciA9IF91c2VSZWR1Y2VyWzFdO1xuXG4gIHZhciBzdWJzY3JpcHRpb24gPSB1c2VNZW1vKGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gbmV3IFN1YnNjcmlwdGlvbihzdG9yZSwgY29udGV4dFN1Yik7XG4gIH0sIFtzdG9yZSwgY29udGV4dFN1Yl0pO1xuICB2YXIgbGF0ZXN0U3Vic2NyaXB0aW9uQ2FsbGJhY2tFcnJvciA9IHVzZVJlZigpO1xuICB2YXIgbGF0ZXN0U2VsZWN0b3IgPSB1c2VSZWYoKTtcbiAgdmFyIGxhdGVzdFN0b3JlU3RhdGUgPSB1c2VSZWYoKTtcbiAgdmFyIGxhdGVzdFNlbGVjdGVkU3RhdGUgPSB1c2VSZWYoKTtcbiAgdmFyIHN0b3JlU3RhdGUgPSBzdG9yZS5nZXRTdGF0ZSgpO1xuICB2YXIgc2VsZWN0ZWRTdGF0ZTtcblxuICB0cnkge1xuICAgIGlmIChzZWxlY3RvciAhPT0gbGF0ZXN0U2VsZWN0b3IuY3VycmVudCB8fCBzdG9yZVN0YXRlICE9PSBsYXRlc3RTdG9yZVN0YXRlLmN1cnJlbnQgfHwgbGF0ZXN0U3Vic2NyaXB0aW9uQ2FsbGJhY2tFcnJvci5jdXJyZW50KSB7XG4gICAgICBzZWxlY3RlZFN0YXRlID0gc2VsZWN0b3Ioc3RvcmVTdGF0ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHNlbGVjdGVkU3RhdGUgPSBsYXRlc3RTZWxlY3RlZFN0YXRlLmN1cnJlbnQ7XG4gICAgfVxuICB9IGNhdGNoIChlcnIpIHtcbiAgICBpZiAobGF0ZXN0U3Vic2NyaXB0aW9uQ2FsbGJhY2tFcnJvci5jdXJyZW50KSB7XG4gICAgICBlcnIubWVzc2FnZSArPSBcIlxcblRoZSBlcnJvciBtYXkgYmUgY29ycmVsYXRlZCB3aXRoIHRoaXMgcHJldmlvdXMgZXJyb3I6XFxuXCIgKyBsYXRlc3RTdWJzY3JpcHRpb25DYWxsYmFja0Vycm9yLmN1cnJlbnQuc3RhY2sgKyBcIlxcblxcblwiO1xuICAgIH1cblxuICAgIHRocm93IGVycjtcbiAgfVxuXG4gIHVzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgIGxhdGVzdFNlbGVjdG9yLmN1cnJlbnQgPSBzZWxlY3RvcjtcbiAgICBsYXRlc3RTdG9yZVN0YXRlLmN1cnJlbnQgPSBzdG9yZVN0YXRlO1xuICAgIGxhdGVzdFNlbGVjdGVkU3RhdGUuY3VycmVudCA9IHNlbGVjdGVkU3RhdGU7XG4gICAgbGF0ZXN0U3Vic2NyaXB0aW9uQ2FsbGJhY2tFcnJvci5jdXJyZW50ID0gdW5kZWZpbmVkO1xuICB9KTtcbiAgdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gY2hlY2tGb3JVcGRhdGVzKCkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgdmFyIG5ld1NlbGVjdGVkU3RhdGUgPSBsYXRlc3RTZWxlY3Rvci5jdXJyZW50KHN0b3JlLmdldFN0YXRlKCkpO1xuXG4gICAgICAgIGlmIChlcXVhbGl0eUZuKG5ld1NlbGVjdGVkU3RhdGUsIGxhdGVzdFNlbGVjdGVkU3RhdGUuY3VycmVudCkpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBsYXRlc3RTZWxlY3RlZFN0YXRlLmN1cnJlbnQgPSBuZXdTZWxlY3RlZFN0YXRlO1xuICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgIC8vIHdlIGlnbm9yZSBhbGwgZXJyb3JzIGhlcmUsIHNpbmNlIHdoZW4gdGhlIGNvbXBvbmVudFxuICAgICAgICAvLyBpcyByZS1yZW5kZXJlZCwgdGhlIHNlbGVjdG9ycyBhcmUgY2FsbGVkIGFnYWluLCBhbmRcbiAgICAgICAgLy8gd2lsbCB0aHJvdyBhZ2FpbiwgaWYgbmVpdGhlciBwcm9wcyBub3Igc3RvcmUgc3RhdGVcbiAgICAgICAgLy8gY2hhbmdlZFxuICAgICAgICBsYXRlc3RTdWJzY3JpcHRpb25DYWxsYmFja0Vycm9yLmN1cnJlbnQgPSBlcnI7XG4gICAgICB9XG5cbiAgICAgIGZvcmNlUmVuZGVyKCk7XG4gICAgfVxuXG4gICAgc3Vic2NyaXB0aW9uLm9uU3RhdGVDaGFuZ2UgPSBjaGVja0ZvclVwZGF0ZXM7XG4gICAgc3Vic2NyaXB0aW9uLnRyeVN1YnNjcmliZSgpO1xuICAgIGNoZWNrRm9yVXBkYXRlcygpO1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gc3Vic2NyaXB0aW9uLnRyeVVuc3Vic2NyaWJlKCk7XG4gICAgfTtcbiAgfSwgW3N0b3JlLCBzdWJzY3JpcHRpb25dKTtcbiAgcmV0dXJuIHNlbGVjdGVkU3RhdGU7XG59XG4vKipcclxuICogSG9vayBmYWN0b3J5LCB3aGljaCBjcmVhdGVzIGEgYHVzZVNlbGVjdG9yYCBob29rIGJvdW5kIHRvIGEgZ2l2ZW4gY29udGV4dC5cclxuICpcclxuICogQHBhcmFtIHtSZWFjdC5Db250ZXh0fSBbY29udGV4dD1SZWFjdFJlZHV4Q29udGV4dF0gQ29udGV4dCBwYXNzZWQgdG8geW91ciBgPFByb3ZpZGVyPmAuXHJcbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gQSBgdXNlU2VsZWN0b3JgIGhvb2sgYm91bmQgdG8gdGhlIHNwZWNpZmllZCBjb250ZXh0LlxyXG4gKi9cblxuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlU2VsZWN0b3JIb29rKGNvbnRleHQpIHtcbiAgaWYgKGNvbnRleHQgPT09IHZvaWQgMCkge1xuICAgIGNvbnRleHQgPSBSZWFjdFJlZHV4Q29udGV4dDtcbiAgfVxuXG4gIHZhciB1c2VSZWR1eENvbnRleHQgPSBjb250ZXh0ID09PSBSZWFjdFJlZHV4Q29udGV4dCA/IHVzZURlZmF1bHRSZWR1eENvbnRleHQgOiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHVzZUNvbnRleHQoY29udGV4dCk7XG4gIH07XG4gIHJldHVybiBmdW5jdGlvbiB1c2VTZWxlY3RvcihzZWxlY3RvciwgZXF1YWxpdHlGbikge1xuICAgIGlmIChlcXVhbGl0eUZuID09PSB2b2lkIDApIHtcbiAgICAgIGVxdWFsaXR5Rm4gPSByZWZFcXVhbGl0eTtcbiAgICB9XG5cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiAhc2VsZWN0b3IpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIllvdSBtdXN0IHBhc3MgYSBzZWxlY3RvciB0byB1c2VTZWxlY3RvclwiKTtcbiAgICB9XG5cbiAgICB2YXIgX3VzZVJlZHV4Q29udGV4dCA9IHVzZVJlZHV4Q29udGV4dCgpLFxuICAgICAgICBzdG9yZSA9IF91c2VSZWR1eENvbnRleHQuc3RvcmUsXG4gICAgICAgIGNvbnRleHRTdWIgPSBfdXNlUmVkdXhDb250ZXh0LnN1YnNjcmlwdGlvbjtcblxuICAgIHZhciBzZWxlY3RlZFN0YXRlID0gdXNlU2VsZWN0b3JXaXRoU3RvcmVBbmRTdWJzY3JpcHRpb24oc2VsZWN0b3IsIGVxdWFsaXR5Rm4sIHN0b3JlLCBjb250ZXh0U3ViKTtcbiAgICB1c2VEZWJ1Z1ZhbHVlKHNlbGVjdGVkU3RhdGUpO1xuICAgIHJldHVybiBzZWxlY3RlZFN0YXRlO1xuICB9O1xufVxuLyoqXHJcbiAqIEEgaG9vayB0byBhY2Nlc3MgdGhlIHJlZHV4IHN0b3JlJ3Mgc3RhdGUuIFRoaXMgaG9vayB0YWtlcyBhIHNlbGVjdG9yIGZ1bmN0aW9uXHJcbiAqIGFzIGFuIGFyZ3VtZW50LiBUaGUgc2VsZWN0b3IgaXMgY2FsbGVkIHdpdGggdGhlIHN0b3JlIHN0YXRlLlxyXG4gKlxyXG4gKiBUaGlzIGhvb2sgdGFrZXMgYW4gb3B0aW9uYWwgZXF1YWxpdHkgY29tcGFyaXNvbiBmdW5jdGlvbiBhcyB0aGUgc2Vjb25kIHBhcmFtZXRlclxyXG4gKiB0aGF0IGFsbG93cyB5b3UgdG8gY3VzdG9taXplIHRoZSB3YXkgdGhlIHNlbGVjdGVkIHN0YXRlIGlzIGNvbXBhcmVkIHRvIGRldGVybWluZVxyXG4gKiB3aGV0aGVyIHRoZSBjb21wb25lbnQgbmVlZHMgdG8gYmUgcmUtcmVuZGVyZWQuXHJcbiAqXHJcbiAqIEBwYXJhbSB7RnVuY3Rpb259IHNlbGVjdG9yIHRoZSBzZWxlY3RvciBmdW5jdGlvblxyXG4gKiBAcGFyYW0ge0Z1bmN0aW9uPX0gZXF1YWxpdHlGbiB0aGUgZnVuY3Rpb24gdGhhdCB3aWxsIGJlIHVzZWQgdG8gZGV0ZXJtaW5lIGVxdWFsaXR5XHJcbiAqXHJcbiAqIEByZXR1cm5zIHthbnl9IHRoZSBzZWxlY3RlZCBzdGF0ZVxyXG4gKlxyXG4gKiBAZXhhbXBsZVxyXG4gKlxyXG4gKiBpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnXHJcbiAqIGltcG9ydCB7IHVzZVNlbGVjdG9yIH0gZnJvbSAncmVhY3QtcmVkdXgnXHJcbiAqXHJcbiAqIGV4cG9ydCBjb25zdCBDb3VudGVyQ29tcG9uZW50ID0gKCkgPT4ge1xyXG4gKiAgIGNvbnN0IGNvdW50ZXIgPSB1c2VTZWxlY3RvcihzdGF0ZSA9PiBzdGF0ZS5jb3VudGVyKVxyXG4gKiAgIHJldHVybiA8ZGl2Pntjb3VudGVyfTwvZGl2PlxyXG4gKiB9XHJcbiAqL1xuXG5leHBvcnQgdmFyIHVzZVNlbGVjdG9yID1cbi8qI19fUFVSRV9fKi9cbmNyZWF0ZVNlbGVjdG9ySG9vaygpOyIsImltcG9ydCBQcm92aWRlciBmcm9tICcuL2NvbXBvbmVudHMvUHJvdmlkZXInO1xuaW1wb3J0IGNvbm5lY3RBZHZhbmNlZCBmcm9tICcuL2NvbXBvbmVudHMvY29ubmVjdEFkdmFuY2VkJztcbmltcG9ydCB7IFJlYWN0UmVkdXhDb250ZXh0IH0gZnJvbSAnLi9jb21wb25lbnRzL0NvbnRleHQnO1xuaW1wb3J0IGNvbm5lY3QgZnJvbSAnLi9jb25uZWN0L2Nvbm5lY3QnO1xuaW1wb3J0IHsgdXNlRGlzcGF0Y2gsIGNyZWF0ZURpc3BhdGNoSG9vayB9IGZyb20gJy4vaG9va3MvdXNlRGlzcGF0Y2gnO1xuaW1wb3J0IHsgdXNlU2VsZWN0b3IsIGNyZWF0ZVNlbGVjdG9ySG9vayB9IGZyb20gJy4vaG9va3MvdXNlU2VsZWN0b3InO1xuaW1wb3J0IHsgdXNlU3RvcmUsIGNyZWF0ZVN0b3JlSG9vayB9IGZyb20gJy4vaG9va3MvdXNlU3RvcmUnO1xuaW1wb3J0IHsgc2V0QmF0Y2ggfSBmcm9tICcuL3V0aWxzL2JhdGNoJztcbmltcG9ydCB7IHVuc3RhYmxlX2JhdGNoZWRVcGRhdGVzIGFzIGJhdGNoIH0gZnJvbSAnLi91dGlscy9yZWFjdEJhdGNoZWRVcGRhdGVzJztcbmltcG9ydCBzaGFsbG93RXF1YWwgZnJvbSAnLi91dGlscy9zaGFsbG93RXF1YWwnO1xuc2V0QmF0Y2goYmF0Y2gpO1xuZXhwb3J0IHsgUHJvdmlkZXIsIGNvbm5lY3RBZHZhbmNlZCwgUmVhY3RSZWR1eENvbnRleHQsIGNvbm5lY3QsIGJhdGNoLCB1c2VEaXNwYXRjaCwgY3JlYXRlRGlzcGF0Y2hIb29rLCB1c2VTZWxlY3RvciwgY3JlYXRlU2VsZWN0b3JIb29rLCB1c2VTdG9yZSwgY3JlYXRlU3RvcmVIb29rLCBzaGFsbG93RXF1YWwgfTsiLCIvKipcbiAqIFRoaXMgYWN0aW9uIHR5cGUgd2lsbCBiZSBkaXNwYXRjaGVkIHdoZW4geW91ciBoaXN0b3J5XG4gKiByZWNlaXZlcyBhIGxvY2F0aW9uIGNoYW5nZS5cbiAqL1xuZXhwb3J0IHZhciBMT0NBVElPTl9DSEFOR0UgPSAnQEByb3V0ZXIvTE9DQVRJT05fQ0hBTkdFJztcbmV4cG9ydCB2YXIgb25Mb2NhdGlvbkNoYW5nZWQgPSBmdW5jdGlvbiBvbkxvY2F0aW9uQ2hhbmdlZChsb2NhdGlvbiwgYWN0aW9uKSB7XG4gIHZhciBpc0ZpcnN0UmVuZGVyaW5nID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiBmYWxzZTtcbiAgcmV0dXJuIHtcbiAgICB0eXBlOiBMT0NBVElPTl9DSEFOR0UsXG4gICAgcGF5bG9hZDoge1xuICAgICAgbG9jYXRpb246IGxvY2F0aW9uLFxuICAgICAgYWN0aW9uOiBhY3Rpb24sXG4gICAgICBpc0ZpcnN0UmVuZGVyaW5nOiBpc0ZpcnN0UmVuZGVyaW5nXG4gICAgfVxuICB9O1xufTtcbi8qKlxuICogVGhpcyBhY3Rpb24gdHlwZSB3aWxsIGJlIGRpc3BhdGNoZWQgYnkgdGhlIGhpc3RvcnkgYWN0aW9ucyBiZWxvdy5cbiAqIElmIHlvdSdyZSB3cml0aW5nIGEgbWlkZGxld2FyZSB0byB3YXRjaCBmb3IgbmF2aWdhdGlvbiBldmVudHMsIGJlIHN1cmUgdG9cbiAqIGxvb2sgZm9yIGFjdGlvbnMgb2YgdGhpcyB0eXBlLlxuICovXG5cbmV4cG9ydCB2YXIgQ0FMTF9ISVNUT1JZX01FVEhPRCA9ICdAQHJvdXRlci9DQUxMX0hJU1RPUllfTUVUSE9EJztcblxudmFyIHVwZGF0ZUxvY2F0aW9uID0gZnVuY3Rpb24gdXBkYXRlTG9jYXRpb24obWV0aG9kKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICB0eXBlOiBDQUxMX0hJU1RPUllfTUVUSE9ELFxuICAgICAgcGF5bG9hZDoge1xuICAgICAgICBtZXRob2Q6IG1ldGhvZCxcbiAgICAgICAgYXJnczogYXJnc1xuICAgICAgfVxuICAgIH07XG4gIH07XG59O1xuLyoqXG4gKiBUaGVzZSBhY3Rpb25zIGNvcnJlc3BvbmQgdG8gdGhlIGhpc3RvcnkgQVBJLlxuICogVGhlIGFzc29jaWF0ZWQgcm91dGVyTWlkZGxld2FyZSB3aWxsIGNhcHR1cmUgdGhlc2UgZXZlbnRzIGJlZm9yZSB0aGV5IGdldCB0b1xuICogeW91ciByZWR1Y2VyIGFuZCByZWlzc3VlIHRoZW0gYXMgdGhlIG1hdGNoaW5nIGZ1bmN0aW9uIG9uIHlvdXIgaGlzdG9yeS5cbiAqL1xuXG5cbmV4cG9ydCB2YXIgcHVzaCA9IHVwZGF0ZUxvY2F0aW9uKCdwdXNoJyk7XG5leHBvcnQgdmFyIHJlcGxhY2UgPSB1cGRhdGVMb2NhdGlvbigncmVwbGFjZScpO1xuZXhwb3J0IHZhciBnbyA9IHVwZGF0ZUxvY2F0aW9uKCdnbycpO1xuZXhwb3J0IHZhciBnb0JhY2sgPSB1cGRhdGVMb2NhdGlvbignZ29CYWNrJyk7XG5leHBvcnQgdmFyIGdvRm9yd2FyZCA9IHVwZGF0ZUxvY2F0aW9uKCdnb0ZvcndhcmQnKTtcbmV4cG9ydCB2YXIgcm91dGVyQWN0aW9ucyA9IHtcbiAgcHVzaDogcHVzaCxcbiAgcmVwbGFjZTogcmVwbGFjZSxcbiAgZ286IGdvLFxuICBnb0JhY2s6IGdvQmFjayxcbiAgZ29Gb3J3YXJkOiBnb0ZvcndhcmRcbn07IiwiZnVuY3Rpb24gaXNBYnNvbHV0ZShwYXRobmFtZSkge1xuICByZXR1cm4gcGF0aG5hbWUuY2hhckF0KDApID09PSAnLyc7XG59XG5cbi8vIEFib3V0IDEuNXggZmFzdGVyIHRoYW4gdGhlIHR3by1hcmcgdmVyc2lvbiBvZiBBcnJheSNzcGxpY2UoKVxuZnVuY3Rpb24gc3BsaWNlT25lKGxpc3QsIGluZGV4KSB7XG4gIGZvciAodmFyIGkgPSBpbmRleCwgayA9IGkgKyAxLCBuID0gbGlzdC5sZW5ndGg7IGsgPCBuOyBpICs9IDEsIGsgKz0gMSkge1xuICAgIGxpc3RbaV0gPSBsaXN0W2tdO1xuICB9XG5cbiAgbGlzdC5wb3AoKTtcbn1cblxuLy8gVGhpcyBpbXBsZW1lbnRhdGlvbiBpcyBiYXNlZCBoZWF2aWx5IG9uIG5vZGUncyB1cmwucGFyc2VcbmZ1bmN0aW9uIHJlc29sdmVQYXRobmFtZSh0bywgZnJvbSkge1xuICBpZiAoZnJvbSA9PT0gdW5kZWZpbmVkKSBmcm9tID0gJyc7XG5cbiAgdmFyIHRvUGFydHMgPSAodG8gJiYgdG8uc3BsaXQoJy8nKSkgfHwgW107XG4gIHZhciBmcm9tUGFydHMgPSAoZnJvbSAmJiBmcm9tLnNwbGl0KCcvJykpIHx8IFtdO1xuXG4gIHZhciBpc1RvQWJzID0gdG8gJiYgaXNBYnNvbHV0ZSh0byk7XG4gIHZhciBpc0Zyb21BYnMgPSBmcm9tICYmIGlzQWJzb2x1dGUoZnJvbSk7XG4gIHZhciBtdXN0RW5kQWJzID0gaXNUb0FicyB8fCBpc0Zyb21BYnM7XG5cbiAgaWYgKHRvICYmIGlzQWJzb2x1dGUodG8pKSB7XG4gICAgLy8gdG8gaXMgYWJzb2x1dGVcbiAgICBmcm9tUGFydHMgPSB0b1BhcnRzO1xuICB9IGVsc2UgaWYgKHRvUGFydHMubGVuZ3RoKSB7XG4gICAgLy8gdG8gaXMgcmVsYXRpdmUsIGRyb3AgdGhlIGZpbGVuYW1lXG4gICAgZnJvbVBhcnRzLnBvcCgpO1xuICAgIGZyb21QYXJ0cyA9IGZyb21QYXJ0cy5jb25jYXQodG9QYXJ0cyk7XG4gIH1cblxuICBpZiAoIWZyb21QYXJ0cy5sZW5ndGgpIHJldHVybiAnLyc7XG5cbiAgdmFyIGhhc1RyYWlsaW5nU2xhc2g7XG4gIGlmIChmcm9tUGFydHMubGVuZ3RoKSB7XG4gICAgdmFyIGxhc3QgPSBmcm9tUGFydHNbZnJvbVBhcnRzLmxlbmd0aCAtIDFdO1xuICAgIGhhc1RyYWlsaW5nU2xhc2ggPSBsYXN0ID09PSAnLicgfHwgbGFzdCA9PT0gJy4uJyB8fCBsYXN0ID09PSAnJztcbiAgfSBlbHNlIHtcbiAgICBoYXNUcmFpbGluZ1NsYXNoID0gZmFsc2U7XG4gIH1cblxuICB2YXIgdXAgPSAwO1xuICBmb3IgKHZhciBpID0gZnJvbVBhcnRzLmxlbmd0aDsgaSA+PSAwOyBpLS0pIHtcbiAgICB2YXIgcGFydCA9IGZyb21QYXJ0c1tpXTtcblxuICAgIGlmIChwYXJ0ID09PSAnLicpIHtcbiAgICAgIHNwbGljZU9uZShmcm9tUGFydHMsIGkpO1xuICAgIH0gZWxzZSBpZiAocGFydCA9PT0gJy4uJykge1xuICAgICAgc3BsaWNlT25lKGZyb21QYXJ0cywgaSk7XG4gICAgICB1cCsrO1xuICAgIH0gZWxzZSBpZiAodXApIHtcbiAgICAgIHNwbGljZU9uZShmcm9tUGFydHMsIGkpO1xuICAgICAgdXAtLTtcbiAgICB9XG4gIH1cblxuICBpZiAoIW11c3RFbmRBYnMpIGZvciAoOyB1cC0tOyB1cCkgZnJvbVBhcnRzLnVuc2hpZnQoJy4uJyk7XG5cbiAgaWYgKFxuICAgIG11c3RFbmRBYnMgJiZcbiAgICBmcm9tUGFydHNbMF0gIT09ICcnICYmXG4gICAgKCFmcm9tUGFydHNbMF0gfHwgIWlzQWJzb2x1dGUoZnJvbVBhcnRzWzBdKSlcbiAgKVxuICAgIGZyb21QYXJ0cy51bnNoaWZ0KCcnKTtcblxuICB2YXIgcmVzdWx0ID0gZnJvbVBhcnRzLmpvaW4oJy8nKTtcblxuICBpZiAoaGFzVHJhaWxpbmdTbGFzaCAmJiByZXN1bHQuc3Vic3RyKC0xKSAhPT0gJy8nKSByZXN1bHQgKz0gJy8nO1xuXG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmV4cG9ydCBkZWZhdWx0IHJlc29sdmVQYXRobmFtZTtcbiIsInZhciBpc1Byb2R1Y3Rpb24gPSBwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nO1xudmFyIHByZWZpeCA9ICdJbnZhcmlhbnQgZmFpbGVkJztcbmZ1bmN0aW9uIGludmFyaWFudChjb25kaXRpb24sIG1lc3NhZ2UpIHtcbiAgICBpZiAoY29uZGl0aW9uKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKGlzUHJvZHVjdGlvbikge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IocHJlZml4KTtcbiAgICB9XG4gICAgdGhyb3cgbmV3IEVycm9yKHByZWZpeCArIFwiOiBcIiArIChtZXNzYWdlIHx8ICcnKSk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGludmFyaWFudDtcbiIsImltcG9ydCBfZXh0ZW5kcyBmcm9tICdAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzJztcbmltcG9ydCByZXNvbHZlUGF0aG5hbWUgZnJvbSAncmVzb2x2ZS1wYXRobmFtZSc7XG5pbXBvcnQgdmFsdWVFcXVhbCBmcm9tICd2YWx1ZS1lcXVhbCc7XG5pbXBvcnQgd2FybmluZyBmcm9tICd0aW55LXdhcm5pbmcnO1xuaW1wb3J0IGludmFyaWFudCBmcm9tICd0aW55LWludmFyaWFudCc7XG5cbmZ1bmN0aW9uIGFkZExlYWRpbmdTbGFzaChwYXRoKSB7XG4gIHJldHVybiBwYXRoLmNoYXJBdCgwKSA9PT0gJy8nID8gcGF0aCA6ICcvJyArIHBhdGg7XG59XG5mdW5jdGlvbiBzdHJpcExlYWRpbmdTbGFzaChwYXRoKSB7XG4gIHJldHVybiBwYXRoLmNoYXJBdCgwKSA9PT0gJy8nID8gcGF0aC5zdWJzdHIoMSkgOiBwYXRoO1xufVxuZnVuY3Rpb24gaGFzQmFzZW5hbWUocGF0aCwgcHJlZml4KSB7XG4gIHJldHVybiBwYXRoLnRvTG93ZXJDYXNlKCkuaW5kZXhPZihwcmVmaXgudG9Mb3dlckNhc2UoKSkgPT09IDAgJiYgJy8/IycuaW5kZXhPZihwYXRoLmNoYXJBdChwcmVmaXgubGVuZ3RoKSkgIT09IC0xO1xufVxuZnVuY3Rpb24gc3RyaXBCYXNlbmFtZShwYXRoLCBwcmVmaXgpIHtcbiAgcmV0dXJuIGhhc0Jhc2VuYW1lKHBhdGgsIHByZWZpeCkgPyBwYXRoLnN1YnN0cihwcmVmaXgubGVuZ3RoKSA6IHBhdGg7XG59XG5mdW5jdGlvbiBzdHJpcFRyYWlsaW5nU2xhc2gocGF0aCkge1xuICByZXR1cm4gcGF0aC5jaGFyQXQocGF0aC5sZW5ndGggLSAxKSA9PT0gJy8nID8gcGF0aC5zbGljZSgwLCAtMSkgOiBwYXRoO1xufVxuZnVuY3Rpb24gcGFyc2VQYXRoKHBhdGgpIHtcbiAgdmFyIHBhdGhuYW1lID0gcGF0aCB8fCAnLyc7XG4gIHZhciBzZWFyY2ggPSAnJztcbiAgdmFyIGhhc2ggPSAnJztcbiAgdmFyIGhhc2hJbmRleCA9IHBhdGhuYW1lLmluZGV4T2YoJyMnKTtcblxuICBpZiAoaGFzaEluZGV4ICE9PSAtMSkge1xuICAgIGhhc2ggPSBwYXRobmFtZS5zdWJzdHIoaGFzaEluZGV4KTtcbiAgICBwYXRobmFtZSA9IHBhdGhuYW1lLnN1YnN0cigwLCBoYXNoSW5kZXgpO1xuICB9XG5cbiAgdmFyIHNlYXJjaEluZGV4ID0gcGF0aG5hbWUuaW5kZXhPZignPycpO1xuXG4gIGlmIChzZWFyY2hJbmRleCAhPT0gLTEpIHtcbiAgICBzZWFyY2ggPSBwYXRobmFtZS5zdWJzdHIoc2VhcmNoSW5kZXgpO1xuICAgIHBhdGhuYW1lID0gcGF0aG5hbWUuc3Vic3RyKDAsIHNlYXJjaEluZGV4KTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgcGF0aG5hbWU6IHBhdGhuYW1lLFxuICAgIHNlYXJjaDogc2VhcmNoID09PSAnPycgPyAnJyA6IHNlYXJjaCxcbiAgICBoYXNoOiBoYXNoID09PSAnIycgPyAnJyA6IGhhc2hcbiAgfTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZVBhdGgobG9jYXRpb24pIHtcbiAgdmFyIHBhdGhuYW1lID0gbG9jYXRpb24ucGF0aG5hbWUsXG4gICAgICBzZWFyY2ggPSBsb2NhdGlvbi5zZWFyY2gsXG4gICAgICBoYXNoID0gbG9jYXRpb24uaGFzaDtcbiAgdmFyIHBhdGggPSBwYXRobmFtZSB8fCAnLyc7XG4gIGlmIChzZWFyY2ggJiYgc2VhcmNoICE9PSAnPycpIHBhdGggKz0gc2VhcmNoLmNoYXJBdCgwKSA9PT0gJz8nID8gc2VhcmNoIDogXCI/XCIgKyBzZWFyY2g7XG4gIGlmIChoYXNoICYmIGhhc2ggIT09ICcjJykgcGF0aCArPSBoYXNoLmNoYXJBdCgwKSA9PT0gJyMnID8gaGFzaCA6IFwiI1wiICsgaGFzaDtcbiAgcmV0dXJuIHBhdGg7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUxvY2F0aW9uKHBhdGgsIHN0YXRlLCBrZXksIGN1cnJlbnRMb2NhdGlvbikge1xuICB2YXIgbG9jYXRpb247XG5cbiAgaWYgKHR5cGVvZiBwYXRoID09PSAnc3RyaW5nJykge1xuICAgIC8vIFR3by1hcmcgZm9ybTogcHVzaChwYXRoLCBzdGF0ZSlcbiAgICBsb2NhdGlvbiA9IHBhcnNlUGF0aChwYXRoKTtcbiAgICBsb2NhdGlvbi5zdGF0ZSA9IHN0YXRlO1xuICB9IGVsc2Uge1xuICAgIC8vIE9uZS1hcmcgZm9ybTogcHVzaChsb2NhdGlvbilcbiAgICBsb2NhdGlvbiA9IF9leHRlbmRzKHt9LCBwYXRoKTtcbiAgICBpZiAobG9jYXRpb24ucGF0aG5hbWUgPT09IHVuZGVmaW5lZCkgbG9jYXRpb24ucGF0aG5hbWUgPSAnJztcblxuICAgIGlmIChsb2NhdGlvbi5zZWFyY2gpIHtcbiAgICAgIGlmIChsb2NhdGlvbi5zZWFyY2guY2hhckF0KDApICE9PSAnPycpIGxvY2F0aW9uLnNlYXJjaCA9ICc/JyArIGxvY2F0aW9uLnNlYXJjaDtcbiAgICB9IGVsc2Uge1xuICAgICAgbG9jYXRpb24uc2VhcmNoID0gJyc7XG4gICAgfVxuXG4gICAgaWYgKGxvY2F0aW9uLmhhc2gpIHtcbiAgICAgIGlmIChsb2NhdGlvbi5oYXNoLmNoYXJBdCgwKSAhPT0gJyMnKSBsb2NhdGlvbi5oYXNoID0gJyMnICsgbG9jYXRpb24uaGFzaDtcbiAgICB9IGVsc2Uge1xuICAgICAgbG9jYXRpb24uaGFzaCA9ICcnO1xuICAgIH1cblxuICAgIGlmIChzdGF0ZSAhPT0gdW5kZWZpbmVkICYmIGxvY2F0aW9uLnN0YXRlID09PSB1bmRlZmluZWQpIGxvY2F0aW9uLnN0YXRlID0gc3RhdGU7XG4gIH1cblxuICB0cnkge1xuICAgIGxvY2F0aW9uLnBhdGhuYW1lID0gZGVjb2RlVVJJKGxvY2F0aW9uLnBhdGhuYW1lKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIGlmIChlIGluc3RhbmNlb2YgVVJJRXJyb3IpIHtcbiAgICAgIHRocm93IG5ldyBVUklFcnJvcignUGF0aG5hbWUgXCInICsgbG9jYXRpb24ucGF0aG5hbWUgKyAnXCIgY291bGQgbm90IGJlIGRlY29kZWQuICcgKyAnVGhpcyBpcyBsaWtlbHkgY2F1c2VkIGJ5IGFuIGludmFsaWQgcGVyY2VudC1lbmNvZGluZy4nKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgZTtcbiAgICB9XG4gIH1cblxuICBpZiAoa2V5KSBsb2NhdGlvbi5rZXkgPSBrZXk7XG5cbiAgaWYgKGN1cnJlbnRMb2NhdGlvbikge1xuICAgIC8vIFJlc29sdmUgaW5jb21wbGV0ZS9yZWxhdGl2ZSBwYXRobmFtZSByZWxhdGl2ZSB0byBjdXJyZW50IGxvY2F0aW9uLlxuICAgIGlmICghbG9jYXRpb24ucGF0aG5hbWUpIHtcbiAgICAgIGxvY2F0aW9uLnBhdGhuYW1lID0gY3VycmVudExvY2F0aW9uLnBhdGhuYW1lO1xuICAgIH0gZWxzZSBpZiAobG9jYXRpb24ucGF0aG5hbWUuY2hhckF0KDApICE9PSAnLycpIHtcbiAgICAgIGxvY2F0aW9uLnBhdGhuYW1lID0gcmVzb2x2ZVBhdGhuYW1lKGxvY2F0aW9uLnBhdGhuYW1lLCBjdXJyZW50TG9jYXRpb24ucGF0aG5hbWUpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICAvLyBXaGVuIHRoZXJlIGlzIG5vIHByaW9yIGxvY2F0aW9uIGFuZCBwYXRobmFtZSBpcyBlbXB0eSwgc2V0IGl0IHRvIC9cbiAgICBpZiAoIWxvY2F0aW9uLnBhdGhuYW1lKSB7XG4gICAgICBsb2NhdGlvbi5wYXRobmFtZSA9ICcvJztcbiAgICB9XG4gIH1cblxuICByZXR1cm4gbG9jYXRpb247XG59XG5mdW5jdGlvbiBsb2NhdGlvbnNBcmVFcXVhbChhLCBiKSB7XG4gIHJldHVybiBhLnBhdGhuYW1lID09PSBiLnBhdGhuYW1lICYmIGEuc2VhcmNoID09PSBiLnNlYXJjaCAmJiBhLmhhc2ggPT09IGIuaGFzaCAmJiBhLmtleSA9PT0gYi5rZXkgJiYgdmFsdWVFcXVhbChhLnN0YXRlLCBiLnN0YXRlKTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXIoKSB7XG4gIHZhciBwcm9tcHQgPSBudWxsO1xuXG4gIGZ1bmN0aW9uIHNldFByb21wdChuZXh0UHJvbXB0KSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhwcm9tcHQgPT0gbnVsbCwgJ0EgaGlzdG9yeSBzdXBwb3J0cyBvbmx5IG9uZSBwcm9tcHQgYXQgYSB0aW1lJykgOiB2b2lkIDA7XG4gICAgcHJvbXB0ID0gbmV4dFByb21wdDtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKHByb21wdCA9PT0gbmV4dFByb21wdCkgcHJvbXB0ID0gbnVsbDtcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gY29uZmlybVRyYW5zaXRpb25Ubyhsb2NhdGlvbiwgYWN0aW9uLCBnZXRVc2VyQ29uZmlybWF0aW9uLCBjYWxsYmFjaykge1xuICAgIC8vIFRPRE86IElmIGFub3RoZXIgdHJhbnNpdGlvbiBzdGFydHMgd2hpbGUgd2UncmUgc3RpbGwgY29uZmlybWluZ1xuICAgIC8vIHRoZSBwcmV2aW91cyBvbmUsIHdlIG1heSBlbmQgdXAgaW4gYSB3ZWlyZCBzdGF0ZS4gRmlndXJlIG91dCB0aGVcbiAgICAvLyBiZXN0IHdheSB0byBoYW5kbGUgdGhpcy5cbiAgICBpZiAocHJvbXB0ICE9IG51bGwpIHtcbiAgICAgIHZhciByZXN1bHQgPSB0eXBlb2YgcHJvbXB0ID09PSAnZnVuY3Rpb24nID8gcHJvbXB0KGxvY2F0aW9uLCBhY3Rpb24pIDogcHJvbXB0O1xuXG4gICAgICBpZiAodHlwZW9mIHJlc3VsdCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBnZXRVc2VyQ29uZmlybWF0aW9uID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgZ2V0VXNlckNvbmZpcm1hdGlvbihyZXN1bHQsIGNhbGxiYWNrKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKGZhbHNlLCAnQSBoaXN0b3J5IG5lZWRzIGEgZ2V0VXNlckNvbmZpcm1hdGlvbiBmdW5jdGlvbiBpbiBvcmRlciB0byB1c2UgYSBwcm9tcHQgbWVzc2FnZScpIDogdm9pZCAwO1xuICAgICAgICAgIGNhbGxiYWNrKHRydWUpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBSZXR1cm4gZmFsc2UgZnJvbSBhIHRyYW5zaXRpb24gaG9vayB0byBjYW5jZWwgdGhlIHRyYW5zaXRpb24uXG4gICAgICAgIGNhbGxiYWNrKHJlc3VsdCAhPT0gZmFsc2UpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBjYWxsYmFjayh0cnVlKTtcbiAgICB9XG4gIH1cblxuICB2YXIgbGlzdGVuZXJzID0gW107XG5cbiAgZnVuY3Rpb24gYXBwZW5kTGlzdGVuZXIoZm4pIHtcbiAgICB2YXIgaXNBY3RpdmUgPSB0cnVlO1xuXG4gICAgZnVuY3Rpb24gbGlzdGVuZXIoKSB7XG4gICAgICBpZiAoaXNBY3RpdmUpIGZuLmFwcGx5KHZvaWQgMCwgYXJndW1lbnRzKTtcbiAgICB9XG5cbiAgICBsaXN0ZW5lcnMucHVzaChsaXN0ZW5lcik7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIGlzQWN0aXZlID0gZmFsc2U7XG4gICAgICBsaXN0ZW5lcnMgPSBsaXN0ZW5lcnMuZmlsdGVyKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICAgIHJldHVybiBpdGVtICE9PSBsaXN0ZW5lcjtcbiAgICAgIH0pO1xuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiBub3RpZnlMaXN0ZW5lcnMoKSB7XG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIGxpc3RlbmVycy5mb3JFYWNoKGZ1bmN0aW9uIChsaXN0ZW5lcikge1xuICAgICAgcmV0dXJuIGxpc3RlbmVyLmFwcGx5KHZvaWQgMCwgYXJncyk7XG4gICAgfSk7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIHNldFByb21wdDogc2V0UHJvbXB0LFxuICAgIGNvbmZpcm1UcmFuc2l0aW9uVG86IGNvbmZpcm1UcmFuc2l0aW9uVG8sXG4gICAgYXBwZW5kTGlzdGVuZXI6IGFwcGVuZExpc3RlbmVyLFxuICAgIG5vdGlmeUxpc3RlbmVyczogbm90aWZ5TGlzdGVuZXJzXG4gIH07XG59XG5cbnZhciBjYW5Vc2VET00gPSAhISh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB3aW5kb3cuZG9jdW1lbnQgJiYgd2luZG93LmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQpO1xuZnVuY3Rpb24gZ2V0Q29uZmlybWF0aW9uKG1lc3NhZ2UsIGNhbGxiYWNrKSB7XG4gIGNhbGxiYWNrKHdpbmRvdy5jb25maXJtKG1lc3NhZ2UpKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1hbGVydFxufVxuLyoqXG4gKiBSZXR1cm5zIHRydWUgaWYgdGhlIEhUTUw1IGhpc3RvcnkgQVBJIGlzIHN1cHBvcnRlZC4gVGFrZW4gZnJvbSBNb2Rlcm5penIuXG4gKlxuICogaHR0cHM6Ly9naXRodWIuY29tL01vZGVybml6ci9Nb2Rlcm5penIvYmxvYi9tYXN0ZXIvTElDRU5TRVxuICogaHR0cHM6Ly9naXRodWIuY29tL01vZGVybml6ci9Nb2Rlcm5penIvYmxvYi9tYXN0ZXIvZmVhdHVyZS1kZXRlY3RzL2hpc3RvcnkuanNcbiAqIGNoYW5nZWQgdG8gYXZvaWQgZmFsc2UgbmVnYXRpdmVzIGZvciBXaW5kb3dzIFBob25lczogaHR0cHM6Ly9naXRodWIuY29tL3JlYWN0anMvcmVhY3Qtcm91dGVyL2lzc3Vlcy81ODZcbiAqL1xuXG5mdW5jdGlvbiBzdXBwb3J0c0hpc3RvcnkoKSB7XG4gIHZhciB1YSA9IHdpbmRvdy5uYXZpZ2F0b3IudXNlckFnZW50O1xuICBpZiAoKHVhLmluZGV4T2YoJ0FuZHJvaWQgMi4nKSAhPT0gLTEgfHwgdWEuaW5kZXhPZignQW5kcm9pZCA0LjAnKSAhPT0gLTEpICYmIHVhLmluZGV4T2YoJ01vYmlsZSBTYWZhcmknKSAhPT0gLTEgJiYgdWEuaW5kZXhPZignQ2hyb21lJykgPT09IC0xICYmIHVhLmluZGV4T2YoJ1dpbmRvd3MgUGhvbmUnKSA9PT0gLTEpIHJldHVybiBmYWxzZTtcbiAgcmV0dXJuIHdpbmRvdy5oaXN0b3J5ICYmICdwdXNoU3RhdGUnIGluIHdpbmRvdy5oaXN0b3J5O1xufVxuLyoqXG4gKiBSZXR1cm5zIHRydWUgaWYgYnJvd3NlciBmaXJlcyBwb3BzdGF0ZSBvbiBoYXNoIGNoYW5nZS5cbiAqIElFMTAgYW5kIElFMTEgZG8gbm90LlxuICovXG5cbmZ1bmN0aW9uIHN1cHBvcnRzUG9wU3RhdGVPbkhhc2hDaGFuZ2UoKSB7XG4gIHJldHVybiB3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudC5pbmRleE9mKCdUcmlkZW50JykgPT09IC0xO1xufVxuLyoqXG4gKiBSZXR1cm5zIGZhbHNlIGlmIHVzaW5nIGdvKG4pIHdpdGggaGFzaCBoaXN0b3J5IGNhdXNlcyBhIGZ1bGwgcGFnZSByZWxvYWQuXG4gKi9cblxuZnVuY3Rpb24gc3VwcG9ydHNHb1dpdGhvdXRSZWxvYWRVc2luZ0hhc2goKSB7XG4gIHJldHVybiB3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudC5pbmRleE9mKCdGaXJlZm94JykgPT09IC0xO1xufVxuLyoqXG4gKiBSZXR1cm5zIHRydWUgaWYgYSBnaXZlbiBwb3BzdGF0ZSBldmVudCBpcyBhbiBleHRyYW5lb3VzIFdlYktpdCBldmVudC5cbiAqIEFjY291bnRzIGZvciB0aGUgZmFjdCB0aGF0IENocm9tZSBvbiBpT1MgZmlyZXMgcmVhbCBwb3BzdGF0ZSBldmVudHNcbiAqIGNvbnRhaW5pbmcgdW5kZWZpbmVkIHN0YXRlIHdoZW4gcHJlc3NpbmcgdGhlIGJhY2sgYnV0dG9uLlxuICovXG5cbmZ1bmN0aW9uIGlzRXh0cmFuZW91c1BvcHN0YXRlRXZlbnQoZXZlbnQpIHtcbiAgcmV0dXJuIGV2ZW50LnN0YXRlID09PSB1bmRlZmluZWQgJiYgbmF2aWdhdG9yLnVzZXJBZ2VudC5pbmRleE9mKCdDcmlPUycpID09PSAtMTtcbn1cblxudmFyIFBvcFN0YXRlRXZlbnQgPSAncG9wc3RhdGUnO1xudmFyIEhhc2hDaGFuZ2VFdmVudCA9ICdoYXNoY2hhbmdlJztcblxuZnVuY3Rpb24gZ2V0SGlzdG9yeVN0YXRlKCkge1xuICB0cnkge1xuICAgIHJldHVybiB3aW5kb3cuaGlzdG9yeS5zdGF0ZSB8fCB7fTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIC8vIElFIDExIHNvbWV0aW1lcyB0aHJvd3Mgd2hlbiBhY2Nlc3Npbmcgd2luZG93Lmhpc3Rvcnkuc3RhdGVcbiAgICAvLyBTZWUgaHR0cHM6Ly9naXRodWIuY29tL1JlYWN0VHJhaW5pbmcvaGlzdG9yeS9wdWxsLzI4OVxuICAgIHJldHVybiB7fTtcbiAgfVxufVxuLyoqXG4gKiBDcmVhdGVzIGEgaGlzdG9yeSBvYmplY3QgdGhhdCB1c2VzIHRoZSBIVE1MNSBoaXN0b3J5IEFQSSBpbmNsdWRpbmdcbiAqIHB1c2hTdGF0ZSwgcmVwbGFjZVN0YXRlLCBhbmQgdGhlIHBvcHN0YXRlIGV2ZW50LlxuICovXG5cblxuZnVuY3Rpb24gY3JlYXRlQnJvd3Nlckhpc3RvcnkocHJvcHMpIHtcbiAgaWYgKHByb3BzID09PSB2b2lkIDApIHtcbiAgICBwcm9wcyA9IHt9O1xuICB9XG5cbiAgIWNhblVzZURPTSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgJ0Jyb3dzZXIgaGlzdG9yeSBuZWVkcyBhIERPTScpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgdmFyIGdsb2JhbEhpc3RvcnkgPSB3aW5kb3cuaGlzdG9yeTtcbiAgdmFyIGNhblVzZUhpc3RvcnkgPSBzdXBwb3J0c0hpc3RvcnkoKTtcbiAgdmFyIG5lZWRzSGFzaENoYW5nZUxpc3RlbmVyID0gIXN1cHBvcnRzUG9wU3RhdGVPbkhhc2hDaGFuZ2UoKTtcbiAgdmFyIF9wcm9wcyA9IHByb3BzLFxuICAgICAgX3Byb3BzJGZvcmNlUmVmcmVzaCA9IF9wcm9wcy5mb3JjZVJlZnJlc2gsXG4gICAgICBmb3JjZVJlZnJlc2ggPSBfcHJvcHMkZm9yY2VSZWZyZXNoID09PSB2b2lkIDAgPyBmYWxzZSA6IF9wcm9wcyRmb3JjZVJlZnJlc2gsXG4gICAgICBfcHJvcHMkZ2V0VXNlckNvbmZpcm0gPSBfcHJvcHMuZ2V0VXNlckNvbmZpcm1hdGlvbixcbiAgICAgIGdldFVzZXJDb25maXJtYXRpb24gPSBfcHJvcHMkZ2V0VXNlckNvbmZpcm0gPT09IHZvaWQgMCA/IGdldENvbmZpcm1hdGlvbiA6IF9wcm9wcyRnZXRVc2VyQ29uZmlybSxcbiAgICAgIF9wcm9wcyRrZXlMZW5ndGggPSBfcHJvcHMua2V5TGVuZ3RoLFxuICAgICAga2V5TGVuZ3RoID0gX3Byb3BzJGtleUxlbmd0aCA9PT0gdm9pZCAwID8gNiA6IF9wcm9wcyRrZXlMZW5ndGg7XG4gIHZhciBiYXNlbmFtZSA9IHByb3BzLmJhc2VuYW1lID8gc3RyaXBUcmFpbGluZ1NsYXNoKGFkZExlYWRpbmdTbGFzaChwcm9wcy5iYXNlbmFtZSkpIDogJyc7XG5cbiAgZnVuY3Rpb24gZ2V0RE9NTG9jYXRpb24oaGlzdG9yeVN0YXRlKSB7XG4gICAgdmFyIF9yZWYgPSBoaXN0b3J5U3RhdGUgfHwge30sXG4gICAgICAgIGtleSA9IF9yZWYua2V5LFxuICAgICAgICBzdGF0ZSA9IF9yZWYuc3RhdGU7XG5cbiAgICB2YXIgX3dpbmRvdyRsb2NhdGlvbiA9IHdpbmRvdy5sb2NhdGlvbixcbiAgICAgICAgcGF0aG5hbWUgPSBfd2luZG93JGxvY2F0aW9uLnBhdGhuYW1lLFxuICAgICAgICBzZWFyY2ggPSBfd2luZG93JGxvY2F0aW9uLnNlYXJjaCxcbiAgICAgICAgaGFzaCA9IF93aW5kb3ckbG9jYXRpb24uaGFzaDtcbiAgICB2YXIgcGF0aCA9IHBhdGhuYW1lICsgc2VhcmNoICsgaGFzaDtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKCFiYXNlbmFtZSB8fCBoYXNCYXNlbmFtZShwYXRoLCBiYXNlbmFtZSksICdZb3UgYXJlIGF0dGVtcHRpbmcgdG8gdXNlIGEgYmFzZW5hbWUgb24gYSBwYWdlIHdob3NlIFVSTCBwYXRoIGRvZXMgbm90IGJlZ2luICcgKyAnd2l0aCB0aGUgYmFzZW5hbWUuIEV4cGVjdGVkIHBhdGggXCInICsgcGF0aCArICdcIiB0byBiZWdpbiB3aXRoIFwiJyArIGJhc2VuYW1lICsgJ1wiLicpIDogdm9pZCAwO1xuICAgIGlmIChiYXNlbmFtZSkgcGF0aCA9IHN0cmlwQmFzZW5hbWUocGF0aCwgYmFzZW5hbWUpO1xuICAgIHJldHVybiBjcmVhdGVMb2NhdGlvbihwYXRoLCBzdGF0ZSwga2V5KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNyZWF0ZUtleSgpIHtcbiAgICByZXR1cm4gTWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc3Vic3RyKDIsIGtleUxlbmd0aCk7XG4gIH1cblxuICB2YXIgdHJhbnNpdGlvbk1hbmFnZXIgPSBjcmVhdGVUcmFuc2l0aW9uTWFuYWdlcigpO1xuXG4gIGZ1bmN0aW9uIHNldFN0YXRlKG5leHRTdGF0ZSkge1xuICAgIF9leHRlbmRzKGhpc3RvcnksIG5leHRTdGF0ZSk7XG5cbiAgICBoaXN0b3J5Lmxlbmd0aCA9IGdsb2JhbEhpc3RvcnkubGVuZ3RoO1xuICAgIHRyYW5zaXRpb25NYW5hZ2VyLm5vdGlmeUxpc3RlbmVycyhoaXN0b3J5LmxvY2F0aW9uLCBoaXN0b3J5LmFjdGlvbik7XG4gIH1cblxuICBmdW5jdGlvbiBoYW5kbGVQb3BTdGF0ZShldmVudCkge1xuICAgIC8vIElnbm9yZSBleHRyYW5lb3VzIHBvcHN0YXRlIGV2ZW50cyBpbiBXZWJLaXQuXG4gICAgaWYgKGlzRXh0cmFuZW91c1BvcHN0YXRlRXZlbnQoZXZlbnQpKSByZXR1cm47XG4gICAgaGFuZGxlUG9wKGdldERPTUxvY2F0aW9uKGV2ZW50LnN0YXRlKSk7XG4gIH1cblxuICBmdW5jdGlvbiBoYW5kbGVIYXNoQ2hhbmdlKCkge1xuICAgIGhhbmRsZVBvcChnZXRET01Mb2NhdGlvbihnZXRIaXN0b3J5U3RhdGUoKSkpO1xuICB9XG5cbiAgdmFyIGZvcmNlTmV4dFBvcCA9IGZhbHNlO1xuXG4gIGZ1bmN0aW9uIGhhbmRsZVBvcChsb2NhdGlvbikge1xuICAgIGlmIChmb3JjZU5leHRQb3ApIHtcbiAgICAgIGZvcmNlTmV4dFBvcCA9IGZhbHNlO1xuICAgICAgc2V0U3RhdGUoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIGFjdGlvbiA9ICdQT1AnO1xuICAgICAgdHJhbnNpdGlvbk1hbmFnZXIuY29uZmlybVRyYW5zaXRpb25Ubyhsb2NhdGlvbiwgYWN0aW9uLCBnZXRVc2VyQ29uZmlybWF0aW9uLCBmdW5jdGlvbiAob2spIHtcbiAgICAgICAgaWYgKG9rKSB7XG4gICAgICAgICAgc2V0U3RhdGUoe1xuICAgICAgICAgICAgYWN0aW9uOiBhY3Rpb24sXG4gICAgICAgICAgICBsb2NhdGlvbjogbG9jYXRpb25cbiAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXZlcnRQb3AobG9jYXRpb24pO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiByZXZlcnRQb3AoZnJvbUxvY2F0aW9uKSB7XG4gICAgdmFyIHRvTG9jYXRpb24gPSBoaXN0b3J5LmxvY2F0aW9uOyAvLyBUT0RPOiBXZSBjb3VsZCBwcm9iYWJseSBtYWtlIHRoaXMgbW9yZSByZWxpYWJsZSBieVxuICAgIC8vIGtlZXBpbmcgYSBsaXN0IG9mIGtleXMgd2UndmUgc2VlbiBpbiBzZXNzaW9uU3RvcmFnZS5cbiAgICAvLyBJbnN0ZWFkLCB3ZSBqdXN0IGRlZmF1bHQgdG8gMCBmb3Iga2V5cyB3ZSBkb24ndCBrbm93LlxuXG4gICAgdmFyIHRvSW5kZXggPSBhbGxLZXlzLmluZGV4T2YodG9Mb2NhdGlvbi5rZXkpO1xuICAgIGlmICh0b0luZGV4ID09PSAtMSkgdG9JbmRleCA9IDA7XG4gICAgdmFyIGZyb21JbmRleCA9IGFsbEtleXMuaW5kZXhPZihmcm9tTG9jYXRpb24ua2V5KTtcbiAgICBpZiAoZnJvbUluZGV4ID09PSAtMSkgZnJvbUluZGV4ID0gMDtcbiAgICB2YXIgZGVsdGEgPSB0b0luZGV4IC0gZnJvbUluZGV4O1xuXG4gICAgaWYgKGRlbHRhKSB7XG4gICAgICBmb3JjZU5leHRQb3AgPSB0cnVlO1xuICAgICAgZ28oZGVsdGEpO1xuICAgIH1cbiAgfVxuXG4gIHZhciBpbml0aWFsTG9jYXRpb24gPSBnZXRET01Mb2NhdGlvbihnZXRIaXN0b3J5U3RhdGUoKSk7XG4gIHZhciBhbGxLZXlzID0gW2luaXRpYWxMb2NhdGlvbi5rZXldOyAvLyBQdWJsaWMgaW50ZXJmYWNlXG5cbiAgZnVuY3Rpb24gY3JlYXRlSHJlZihsb2NhdGlvbikge1xuICAgIHJldHVybiBiYXNlbmFtZSArIGNyZWF0ZVBhdGgobG9jYXRpb24pO1xuICB9XG5cbiAgZnVuY3Rpb24gcHVzaChwYXRoLCBzdGF0ZSkge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoISh0eXBlb2YgcGF0aCA9PT0gJ29iamVjdCcgJiYgcGF0aC5zdGF0ZSAhPT0gdW5kZWZpbmVkICYmIHN0YXRlICE9PSB1bmRlZmluZWQpLCAnWW91IHNob3VsZCBhdm9pZCBwcm92aWRpbmcgYSAybmQgc3RhdGUgYXJndW1lbnQgdG8gcHVzaCB3aGVuIHRoZSAxc3QgJyArICdhcmd1bWVudCBpcyBhIGxvY2F0aW9uLWxpa2Ugb2JqZWN0IHRoYXQgYWxyZWFkeSBoYXMgc3RhdGU7IGl0IGlzIGlnbm9yZWQnKSA6IHZvaWQgMDtcbiAgICB2YXIgYWN0aW9uID0gJ1BVU0gnO1xuICAgIHZhciBsb2NhdGlvbiA9IGNyZWF0ZUxvY2F0aW9uKHBhdGgsIHN0YXRlLCBjcmVhdGVLZXkoKSwgaGlzdG9yeS5sb2NhdGlvbik7XG4gICAgdHJhbnNpdGlvbk1hbmFnZXIuY29uZmlybVRyYW5zaXRpb25Ubyhsb2NhdGlvbiwgYWN0aW9uLCBnZXRVc2VyQ29uZmlybWF0aW9uLCBmdW5jdGlvbiAob2spIHtcbiAgICAgIGlmICghb2spIHJldHVybjtcbiAgICAgIHZhciBocmVmID0gY3JlYXRlSHJlZihsb2NhdGlvbik7XG4gICAgICB2YXIga2V5ID0gbG9jYXRpb24ua2V5LFxuICAgICAgICAgIHN0YXRlID0gbG9jYXRpb24uc3RhdGU7XG5cbiAgICAgIGlmIChjYW5Vc2VIaXN0b3J5KSB7XG4gICAgICAgIGdsb2JhbEhpc3RvcnkucHVzaFN0YXRlKHtcbiAgICAgICAgICBrZXk6IGtleSxcbiAgICAgICAgICBzdGF0ZTogc3RhdGVcbiAgICAgICAgfSwgbnVsbCwgaHJlZik7XG5cbiAgICAgICAgaWYgKGZvcmNlUmVmcmVzaCkge1xuICAgICAgICAgIHdpbmRvdy5sb2NhdGlvbi5ocmVmID0gaHJlZjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2YXIgcHJldkluZGV4ID0gYWxsS2V5cy5pbmRleE9mKGhpc3RvcnkubG9jYXRpb24ua2V5KTtcbiAgICAgICAgICB2YXIgbmV4dEtleXMgPSBhbGxLZXlzLnNsaWNlKDAsIHByZXZJbmRleCArIDEpO1xuICAgICAgICAgIG5leHRLZXlzLnB1c2gobG9jYXRpb24ua2V5KTtcbiAgICAgICAgICBhbGxLZXlzID0gbmV4dEtleXM7XG4gICAgICAgICAgc2V0U3RhdGUoe1xuICAgICAgICAgICAgYWN0aW9uOiBhY3Rpb24sXG4gICAgICAgICAgICBsb2NhdGlvbjogbG9jYXRpb25cbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhzdGF0ZSA9PT0gdW5kZWZpbmVkLCAnQnJvd3NlciBoaXN0b3J5IGNhbm5vdCBwdXNoIHN0YXRlIGluIGJyb3dzZXJzIHRoYXQgZG8gbm90IHN1cHBvcnQgSFRNTDUgaGlzdG9yeScpIDogdm9pZCAwO1xuICAgICAgICB3aW5kb3cubG9jYXRpb24uaHJlZiA9IGhyZWY7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiByZXBsYWNlKHBhdGgsIHN0YXRlKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyghKHR5cGVvZiBwYXRoID09PSAnb2JqZWN0JyAmJiBwYXRoLnN0YXRlICE9PSB1bmRlZmluZWQgJiYgc3RhdGUgIT09IHVuZGVmaW5lZCksICdZb3Ugc2hvdWxkIGF2b2lkIHByb3ZpZGluZyBhIDJuZCBzdGF0ZSBhcmd1bWVudCB0byByZXBsYWNlIHdoZW4gdGhlIDFzdCAnICsgJ2FyZ3VtZW50IGlzIGEgbG9jYXRpb24tbGlrZSBvYmplY3QgdGhhdCBhbHJlYWR5IGhhcyBzdGF0ZTsgaXQgaXMgaWdub3JlZCcpIDogdm9pZCAwO1xuICAgIHZhciBhY3Rpb24gPSAnUkVQTEFDRSc7XG4gICAgdmFyIGxvY2F0aW9uID0gY3JlYXRlTG9jYXRpb24ocGF0aCwgc3RhdGUsIGNyZWF0ZUtleSgpLCBoaXN0b3J5LmxvY2F0aW9uKTtcbiAgICB0cmFuc2l0aW9uTWFuYWdlci5jb25maXJtVHJhbnNpdGlvblRvKGxvY2F0aW9uLCBhY3Rpb24sIGdldFVzZXJDb25maXJtYXRpb24sIGZ1bmN0aW9uIChvaykge1xuICAgICAgaWYgKCFvaykgcmV0dXJuO1xuICAgICAgdmFyIGhyZWYgPSBjcmVhdGVIcmVmKGxvY2F0aW9uKTtcbiAgICAgIHZhciBrZXkgPSBsb2NhdGlvbi5rZXksXG4gICAgICAgICAgc3RhdGUgPSBsb2NhdGlvbi5zdGF0ZTtcblxuICAgICAgaWYgKGNhblVzZUhpc3RvcnkpIHtcbiAgICAgICAgZ2xvYmFsSGlzdG9yeS5yZXBsYWNlU3RhdGUoe1xuICAgICAgICAgIGtleToga2V5LFxuICAgICAgICAgIHN0YXRlOiBzdGF0ZVxuICAgICAgICB9LCBudWxsLCBocmVmKTtcblxuICAgICAgICBpZiAoZm9yY2VSZWZyZXNoKSB7XG4gICAgICAgICAgd2luZG93LmxvY2F0aW9uLnJlcGxhY2UoaHJlZik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdmFyIHByZXZJbmRleCA9IGFsbEtleXMuaW5kZXhPZihoaXN0b3J5LmxvY2F0aW9uLmtleSk7XG4gICAgICAgICAgaWYgKHByZXZJbmRleCAhPT0gLTEpIGFsbEtleXNbcHJldkluZGV4XSA9IGxvY2F0aW9uLmtleTtcbiAgICAgICAgICBzZXRTdGF0ZSh7XG4gICAgICAgICAgICBhY3Rpb246IGFjdGlvbixcbiAgICAgICAgICAgIGxvY2F0aW9uOiBsb2NhdGlvblxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKHN0YXRlID09PSB1bmRlZmluZWQsICdCcm93c2VyIGhpc3RvcnkgY2Fubm90IHJlcGxhY2Ugc3RhdGUgaW4gYnJvd3NlcnMgdGhhdCBkbyBub3Qgc3VwcG9ydCBIVE1MNSBoaXN0b3J5JykgOiB2b2lkIDA7XG4gICAgICAgIHdpbmRvdy5sb2NhdGlvbi5yZXBsYWNlKGhyZWYpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gZ28obikge1xuICAgIGdsb2JhbEhpc3RvcnkuZ28obik7XG4gIH1cblxuICBmdW5jdGlvbiBnb0JhY2soKSB7XG4gICAgZ28oLTEpO1xuICB9XG5cbiAgZnVuY3Rpb24gZ29Gb3J3YXJkKCkge1xuICAgIGdvKDEpO1xuICB9XG5cbiAgdmFyIGxpc3RlbmVyQ291bnQgPSAwO1xuXG4gIGZ1bmN0aW9uIGNoZWNrRE9NTGlzdGVuZXJzKGRlbHRhKSB7XG4gICAgbGlzdGVuZXJDb3VudCArPSBkZWx0YTtcblxuICAgIGlmIChsaXN0ZW5lckNvdW50ID09PSAxICYmIGRlbHRhID09PSAxKSB7XG4gICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihQb3BTdGF0ZUV2ZW50LCBoYW5kbGVQb3BTdGF0ZSk7XG4gICAgICBpZiAobmVlZHNIYXNoQ2hhbmdlTGlzdGVuZXIpIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKEhhc2hDaGFuZ2VFdmVudCwgaGFuZGxlSGFzaENoYW5nZSk7XG4gICAgfSBlbHNlIGlmIChsaXN0ZW5lckNvdW50ID09PSAwKSB7XG4gICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihQb3BTdGF0ZUV2ZW50LCBoYW5kbGVQb3BTdGF0ZSk7XG4gICAgICBpZiAobmVlZHNIYXNoQ2hhbmdlTGlzdGVuZXIpIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKEhhc2hDaGFuZ2VFdmVudCwgaGFuZGxlSGFzaENoYW5nZSk7XG4gICAgfVxuICB9XG5cbiAgdmFyIGlzQmxvY2tlZCA9IGZhbHNlO1xuXG4gIGZ1bmN0aW9uIGJsb2NrKHByb21wdCkge1xuICAgIGlmIChwcm9tcHQgPT09IHZvaWQgMCkge1xuICAgICAgcHJvbXB0ID0gZmFsc2U7XG4gICAgfVxuXG4gICAgdmFyIHVuYmxvY2sgPSB0cmFuc2l0aW9uTWFuYWdlci5zZXRQcm9tcHQocHJvbXB0KTtcblxuICAgIGlmICghaXNCbG9ja2VkKSB7XG4gICAgICBjaGVja0RPTUxpc3RlbmVycygxKTtcbiAgICAgIGlzQmxvY2tlZCA9IHRydWU7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmIChpc0Jsb2NrZWQpIHtcbiAgICAgICAgaXNCbG9ja2VkID0gZmFsc2U7XG4gICAgICAgIGNoZWNrRE9NTGlzdGVuZXJzKC0xKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHVuYmxvY2soKTtcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gbGlzdGVuKGxpc3RlbmVyKSB7XG4gICAgdmFyIHVubGlzdGVuID0gdHJhbnNpdGlvbk1hbmFnZXIuYXBwZW5kTGlzdGVuZXIobGlzdGVuZXIpO1xuICAgIGNoZWNrRE9NTGlzdGVuZXJzKDEpO1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICBjaGVja0RPTUxpc3RlbmVycygtMSk7XG4gICAgICB1bmxpc3RlbigpO1xuICAgIH07XG4gIH1cblxuICB2YXIgaGlzdG9yeSA9IHtcbiAgICBsZW5ndGg6IGdsb2JhbEhpc3RvcnkubGVuZ3RoLFxuICAgIGFjdGlvbjogJ1BPUCcsXG4gICAgbG9jYXRpb246IGluaXRpYWxMb2NhdGlvbixcbiAgICBjcmVhdGVIcmVmOiBjcmVhdGVIcmVmLFxuICAgIHB1c2g6IHB1c2gsXG4gICAgcmVwbGFjZTogcmVwbGFjZSxcbiAgICBnbzogZ28sXG4gICAgZ29CYWNrOiBnb0JhY2ssXG4gICAgZ29Gb3J3YXJkOiBnb0ZvcndhcmQsXG4gICAgYmxvY2s6IGJsb2NrLFxuICAgIGxpc3RlbjogbGlzdGVuXG4gIH07XG4gIHJldHVybiBoaXN0b3J5O1xufVxuXG52YXIgSGFzaENoYW5nZUV2ZW50JDEgPSAnaGFzaGNoYW5nZSc7XG52YXIgSGFzaFBhdGhDb2RlcnMgPSB7XG4gIGhhc2hiYW5nOiB7XG4gICAgZW5jb2RlUGF0aDogZnVuY3Rpb24gZW5jb2RlUGF0aChwYXRoKSB7XG4gICAgICByZXR1cm4gcGF0aC5jaGFyQXQoMCkgPT09ICchJyA/IHBhdGggOiAnIS8nICsgc3RyaXBMZWFkaW5nU2xhc2gocGF0aCk7XG4gICAgfSxcbiAgICBkZWNvZGVQYXRoOiBmdW5jdGlvbiBkZWNvZGVQYXRoKHBhdGgpIHtcbiAgICAgIHJldHVybiBwYXRoLmNoYXJBdCgwKSA9PT0gJyEnID8gcGF0aC5zdWJzdHIoMSkgOiBwYXRoO1xuICAgIH1cbiAgfSxcbiAgbm9zbGFzaDoge1xuICAgIGVuY29kZVBhdGg6IHN0cmlwTGVhZGluZ1NsYXNoLFxuICAgIGRlY29kZVBhdGg6IGFkZExlYWRpbmdTbGFzaFxuICB9LFxuICBzbGFzaDoge1xuICAgIGVuY29kZVBhdGg6IGFkZExlYWRpbmdTbGFzaCxcbiAgICBkZWNvZGVQYXRoOiBhZGRMZWFkaW5nU2xhc2hcbiAgfVxufTtcblxuZnVuY3Rpb24gc3RyaXBIYXNoKHVybCkge1xuICB2YXIgaGFzaEluZGV4ID0gdXJsLmluZGV4T2YoJyMnKTtcbiAgcmV0dXJuIGhhc2hJbmRleCA9PT0gLTEgPyB1cmwgOiB1cmwuc2xpY2UoMCwgaGFzaEluZGV4KTtcbn1cblxuZnVuY3Rpb24gZ2V0SGFzaFBhdGgoKSB7XG4gIC8vIFdlIGNhbid0IHVzZSB3aW5kb3cubG9jYXRpb24uaGFzaCBoZXJlIGJlY2F1c2UgaXQncyBub3RcbiAgLy8gY29uc2lzdGVudCBhY3Jvc3MgYnJvd3NlcnMgLSBGaXJlZm94IHdpbGwgcHJlLWRlY29kZSBpdCFcbiAgdmFyIGhyZWYgPSB3aW5kb3cubG9jYXRpb24uaHJlZjtcbiAgdmFyIGhhc2hJbmRleCA9IGhyZWYuaW5kZXhPZignIycpO1xuICByZXR1cm4gaGFzaEluZGV4ID09PSAtMSA/ICcnIDogaHJlZi5zdWJzdHJpbmcoaGFzaEluZGV4ICsgMSk7XG59XG5cbmZ1bmN0aW9uIHB1c2hIYXNoUGF0aChwYXRoKSB7XG4gIHdpbmRvdy5sb2NhdGlvbi5oYXNoID0gcGF0aDtcbn1cblxuZnVuY3Rpb24gcmVwbGFjZUhhc2hQYXRoKHBhdGgpIHtcbiAgd2luZG93LmxvY2F0aW9uLnJlcGxhY2Uoc3RyaXBIYXNoKHdpbmRvdy5sb2NhdGlvbi5ocmVmKSArICcjJyArIHBhdGgpO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVIYXNoSGlzdG9yeShwcm9wcykge1xuICBpZiAocHJvcHMgPT09IHZvaWQgMCkge1xuICAgIHByb3BzID0ge307XG4gIH1cblxuICAhY2FuVXNlRE9NID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCAnSGFzaCBoaXN0b3J5IG5lZWRzIGEgRE9NJykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICB2YXIgZ2xvYmFsSGlzdG9yeSA9IHdpbmRvdy5oaXN0b3J5O1xuICB2YXIgY2FuR29XaXRob3V0UmVsb2FkID0gc3VwcG9ydHNHb1dpdGhvdXRSZWxvYWRVc2luZ0hhc2goKTtcbiAgdmFyIF9wcm9wcyA9IHByb3BzLFxuICAgICAgX3Byb3BzJGdldFVzZXJDb25maXJtID0gX3Byb3BzLmdldFVzZXJDb25maXJtYXRpb24sXG4gICAgICBnZXRVc2VyQ29uZmlybWF0aW9uID0gX3Byb3BzJGdldFVzZXJDb25maXJtID09PSB2b2lkIDAgPyBnZXRDb25maXJtYXRpb24gOiBfcHJvcHMkZ2V0VXNlckNvbmZpcm0sXG4gICAgICBfcHJvcHMkaGFzaFR5cGUgPSBfcHJvcHMuaGFzaFR5cGUsXG4gICAgICBoYXNoVHlwZSA9IF9wcm9wcyRoYXNoVHlwZSA9PT0gdm9pZCAwID8gJ3NsYXNoJyA6IF9wcm9wcyRoYXNoVHlwZTtcbiAgdmFyIGJhc2VuYW1lID0gcHJvcHMuYmFzZW5hbWUgPyBzdHJpcFRyYWlsaW5nU2xhc2goYWRkTGVhZGluZ1NsYXNoKHByb3BzLmJhc2VuYW1lKSkgOiAnJztcbiAgdmFyIF9IYXNoUGF0aENvZGVycyRoYXNoVCA9IEhhc2hQYXRoQ29kZXJzW2hhc2hUeXBlXSxcbiAgICAgIGVuY29kZVBhdGggPSBfSGFzaFBhdGhDb2RlcnMkaGFzaFQuZW5jb2RlUGF0aCxcbiAgICAgIGRlY29kZVBhdGggPSBfSGFzaFBhdGhDb2RlcnMkaGFzaFQuZGVjb2RlUGF0aDtcblxuICBmdW5jdGlvbiBnZXRET01Mb2NhdGlvbigpIHtcbiAgICB2YXIgcGF0aCA9IGRlY29kZVBhdGgoZ2V0SGFzaFBhdGgoKSk7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyghYmFzZW5hbWUgfHwgaGFzQmFzZW5hbWUocGF0aCwgYmFzZW5hbWUpLCAnWW91IGFyZSBhdHRlbXB0aW5nIHRvIHVzZSBhIGJhc2VuYW1lIG9uIGEgcGFnZSB3aG9zZSBVUkwgcGF0aCBkb2VzIG5vdCBiZWdpbiAnICsgJ3dpdGggdGhlIGJhc2VuYW1lLiBFeHBlY3RlZCBwYXRoIFwiJyArIHBhdGggKyAnXCIgdG8gYmVnaW4gd2l0aCBcIicgKyBiYXNlbmFtZSArICdcIi4nKSA6IHZvaWQgMDtcbiAgICBpZiAoYmFzZW5hbWUpIHBhdGggPSBzdHJpcEJhc2VuYW1lKHBhdGgsIGJhc2VuYW1lKTtcbiAgICByZXR1cm4gY3JlYXRlTG9jYXRpb24ocGF0aCk7XG4gIH1cblxuICB2YXIgdHJhbnNpdGlvbk1hbmFnZXIgPSBjcmVhdGVUcmFuc2l0aW9uTWFuYWdlcigpO1xuXG4gIGZ1bmN0aW9uIHNldFN0YXRlKG5leHRTdGF0ZSkge1xuICAgIF9leHRlbmRzKGhpc3RvcnksIG5leHRTdGF0ZSk7XG5cbiAgICBoaXN0b3J5Lmxlbmd0aCA9IGdsb2JhbEhpc3RvcnkubGVuZ3RoO1xuICAgIHRyYW5zaXRpb25NYW5hZ2VyLm5vdGlmeUxpc3RlbmVycyhoaXN0b3J5LmxvY2F0aW9uLCBoaXN0b3J5LmFjdGlvbik7XG4gIH1cblxuICB2YXIgZm9yY2VOZXh0UG9wID0gZmFsc2U7XG4gIHZhciBpZ25vcmVQYXRoID0gbnVsbDtcblxuICBmdW5jdGlvbiBsb2NhdGlvbnNBcmVFcXVhbCQkMShhLCBiKSB7XG4gICAgcmV0dXJuIGEucGF0aG5hbWUgPT09IGIucGF0aG5hbWUgJiYgYS5zZWFyY2ggPT09IGIuc2VhcmNoICYmIGEuaGFzaCA9PT0gYi5oYXNoO1xuICB9XG5cbiAgZnVuY3Rpb24gaGFuZGxlSGFzaENoYW5nZSgpIHtcbiAgICB2YXIgcGF0aCA9IGdldEhhc2hQYXRoKCk7XG4gICAgdmFyIGVuY29kZWRQYXRoID0gZW5jb2RlUGF0aChwYXRoKTtcblxuICAgIGlmIChwYXRoICE9PSBlbmNvZGVkUGF0aCkge1xuICAgICAgLy8gRW5zdXJlIHdlIGFsd2F5cyBoYXZlIGEgcHJvcGVybHktZW5jb2RlZCBoYXNoLlxuICAgICAgcmVwbGFjZUhhc2hQYXRoKGVuY29kZWRQYXRoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIGxvY2F0aW9uID0gZ2V0RE9NTG9jYXRpb24oKTtcbiAgICAgIHZhciBwcmV2TG9jYXRpb24gPSBoaXN0b3J5LmxvY2F0aW9uO1xuICAgICAgaWYgKCFmb3JjZU5leHRQb3AgJiYgbG9jYXRpb25zQXJlRXF1YWwkJDEocHJldkxvY2F0aW9uLCBsb2NhdGlvbikpIHJldHVybjsgLy8gQSBoYXNoY2hhbmdlIGRvZXNuJ3QgYWx3YXlzID09IGxvY2F0aW9uIGNoYW5nZS5cblxuICAgICAgaWYgKGlnbm9yZVBhdGggPT09IGNyZWF0ZVBhdGgobG9jYXRpb24pKSByZXR1cm47IC8vIElnbm9yZSB0aGlzIGNoYW5nZTsgd2UgYWxyZWFkeSBzZXRTdGF0ZSBpbiBwdXNoL3JlcGxhY2UuXG5cbiAgICAgIGlnbm9yZVBhdGggPSBudWxsO1xuICAgICAgaGFuZGxlUG9wKGxvY2F0aW9uKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBoYW5kbGVQb3AobG9jYXRpb24pIHtcbiAgICBpZiAoZm9yY2VOZXh0UG9wKSB7XG4gICAgICBmb3JjZU5leHRQb3AgPSBmYWxzZTtcbiAgICAgIHNldFN0YXRlKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBhY3Rpb24gPSAnUE9QJztcbiAgICAgIHRyYW5zaXRpb25NYW5hZ2VyLmNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sIGFjdGlvbiwgZ2V0VXNlckNvbmZpcm1hdGlvbiwgZnVuY3Rpb24gKG9rKSB7XG4gICAgICAgIGlmIChvaykge1xuICAgICAgICAgIHNldFN0YXRlKHtcbiAgICAgICAgICAgIGFjdGlvbjogYWN0aW9uLFxuICAgICAgICAgICAgbG9jYXRpb246IGxvY2F0aW9uXG4gICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV2ZXJ0UG9wKGxvY2F0aW9uKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gcmV2ZXJ0UG9wKGZyb21Mb2NhdGlvbikge1xuICAgIHZhciB0b0xvY2F0aW9uID0gaGlzdG9yeS5sb2NhdGlvbjsgLy8gVE9ETzogV2UgY291bGQgcHJvYmFibHkgbWFrZSB0aGlzIG1vcmUgcmVsaWFibGUgYnlcbiAgICAvLyBrZWVwaW5nIGEgbGlzdCBvZiBwYXRocyB3ZSd2ZSBzZWVuIGluIHNlc3Npb25TdG9yYWdlLlxuICAgIC8vIEluc3RlYWQsIHdlIGp1c3QgZGVmYXVsdCB0byAwIGZvciBwYXRocyB3ZSBkb24ndCBrbm93LlxuXG4gICAgdmFyIHRvSW5kZXggPSBhbGxQYXRocy5sYXN0SW5kZXhPZihjcmVhdGVQYXRoKHRvTG9jYXRpb24pKTtcbiAgICBpZiAodG9JbmRleCA9PT0gLTEpIHRvSW5kZXggPSAwO1xuICAgIHZhciBmcm9tSW5kZXggPSBhbGxQYXRocy5sYXN0SW5kZXhPZihjcmVhdGVQYXRoKGZyb21Mb2NhdGlvbikpO1xuICAgIGlmIChmcm9tSW5kZXggPT09IC0xKSBmcm9tSW5kZXggPSAwO1xuICAgIHZhciBkZWx0YSA9IHRvSW5kZXggLSBmcm9tSW5kZXg7XG5cbiAgICBpZiAoZGVsdGEpIHtcbiAgICAgIGZvcmNlTmV4dFBvcCA9IHRydWU7XG4gICAgICBnbyhkZWx0YSk7XG4gICAgfVxuICB9IC8vIEVuc3VyZSB0aGUgaGFzaCBpcyBlbmNvZGVkIHByb3Blcmx5IGJlZm9yZSBkb2luZyBhbnl0aGluZyBlbHNlLlxuXG5cbiAgdmFyIHBhdGggPSBnZXRIYXNoUGF0aCgpO1xuICB2YXIgZW5jb2RlZFBhdGggPSBlbmNvZGVQYXRoKHBhdGgpO1xuICBpZiAocGF0aCAhPT0gZW5jb2RlZFBhdGgpIHJlcGxhY2VIYXNoUGF0aChlbmNvZGVkUGF0aCk7XG4gIHZhciBpbml0aWFsTG9jYXRpb24gPSBnZXRET01Mb2NhdGlvbigpO1xuICB2YXIgYWxsUGF0aHMgPSBbY3JlYXRlUGF0aChpbml0aWFsTG9jYXRpb24pXTsgLy8gUHVibGljIGludGVyZmFjZVxuXG4gIGZ1bmN0aW9uIGNyZWF0ZUhyZWYobG9jYXRpb24pIHtcbiAgICB2YXIgYmFzZVRhZyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ2Jhc2UnKTtcbiAgICB2YXIgaHJlZiA9ICcnO1xuXG4gICAgaWYgKGJhc2VUYWcgJiYgYmFzZVRhZy5nZXRBdHRyaWJ1dGUoJ2hyZWYnKSkge1xuICAgICAgaHJlZiA9IHN0cmlwSGFzaCh3aW5kb3cubG9jYXRpb24uaHJlZik7XG4gICAgfVxuXG4gICAgcmV0dXJuIGhyZWYgKyAnIycgKyBlbmNvZGVQYXRoKGJhc2VuYW1lICsgY3JlYXRlUGF0aChsb2NhdGlvbikpO1xuICB9XG5cbiAgZnVuY3Rpb24gcHVzaChwYXRoLCBzdGF0ZSkge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoc3RhdGUgPT09IHVuZGVmaW5lZCwgJ0hhc2ggaGlzdG9yeSBjYW5ub3QgcHVzaCBzdGF0ZTsgaXQgaXMgaWdub3JlZCcpIDogdm9pZCAwO1xuICAgIHZhciBhY3Rpb24gPSAnUFVTSCc7XG4gICAgdmFyIGxvY2F0aW9uID0gY3JlYXRlTG9jYXRpb24ocGF0aCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIGhpc3RvcnkubG9jYXRpb24pO1xuICAgIHRyYW5zaXRpb25NYW5hZ2VyLmNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sIGFjdGlvbiwgZ2V0VXNlckNvbmZpcm1hdGlvbiwgZnVuY3Rpb24gKG9rKSB7XG4gICAgICBpZiAoIW9rKSByZXR1cm47XG4gICAgICB2YXIgcGF0aCA9IGNyZWF0ZVBhdGgobG9jYXRpb24pO1xuICAgICAgdmFyIGVuY29kZWRQYXRoID0gZW5jb2RlUGF0aChiYXNlbmFtZSArIHBhdGgpO1xuICAgICAgdmFyIGhhc2hDaGFuZ2VkID0gZ2V0SGFzaFBhdGgoKSAhPT0gZW5jb2RlZFBhdGg7XG5cbiAgICAgIGlmIChoYXNoQ2hhbmdlZCkge1xuICAgICAgICAvLyBXZSBjYW5ub3QgdGVsbCBpZiBhIGhhc2hjaGFuZ2Ugd2FzIGNhdXNlZCBieSBhIFBVU0gsIHNvIHdlJ2RcbiAgICAgICAgLy8gcmF0aGVyIHNldFN0YXRlIGhlcmUgYW5kIGlnbm9yZSB0aGUgaGFzaGNoYW5nZS4gVGhlIGNhdmVhdCBoZXJlXG4gICAgICAgIC8vIGlzIHRoYXQgb3RoZXIgaGFzaCBoaXN0b3JpZXMgaW4gdGhlIHBhZ2Ugd2lsbCBjb25zaWRlciBpdCBhIFBPUC5cbiAgICAgICAgaWdub3JlUGF0aCA9IHBhdGg7XG4gICAgICAgIHB1c2hIYXNoUGF0aChlbmNvZGVkUGF0aCk7XG4gICAgICAgIHZhciBwcmV2SW5kZXggPSBhbGxQYXRocy5sYXN0SW5kZXhPZihjcmVhdGVQYXRoKGhpc3RvcnkubG9jYXRpb24pKTtcbiAgICAgICAgdmFyIG5leHRQYXRocyA9IGFsbFBhdGhzLnNsaWNlKDAsIHByZXZJbmRleCArIDEpO1xuICAgICAgICBuZXh0UGF0aHMucHVzaChwYXRoKTtcbiAgICAgICAgYWxsUGF0aHMgPSBuZXh0UGF0aHM7XG4gICAgICAgIHNldFN0YXRlKHtcbiAgICAgICAgICBhY3Rpb246IGFjdGlvbixcbiAgICAgICAgICBsb2NhdGlvbjogbG9jYXRpb25cbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKGZhbHNlLCAnSGFzaCBoaXN0b3J5IGNhbm5vdCBQVVNIIHRoZSBzYW1lIHBhdGg7IGEgbmV3IGVudHJ5IHdpbGwgbm90IGJlIGFkZGVkIHRvIHRoZSBoaXN0b3J5IHN0YWNrJykgOiB2b2lkIDA7XG4gICAgICAgIHNldFN0YXRlKCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiByZXBsYWNlKHBhdGgsIHN0YXRlKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhzdGF0ZSA9PT0gdW5kZWZpbmVkLCAnSGFzaCBoaXN0b3J5IGNhbm5vdCByZXBsYWNlIHN0YXRlOyBpdCBpcyBpZ25vcmVkJykgOiB2b2lkIDA7XG4gICAgdmFyIGFjdGlvbiA9ICdSRVBMQUNFJztcbiAgICB2YXIgbG9jYXRpb24gPSBjcmVhdGVMb2NhdGlvbihwYXRoLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgaGlzdG9yeS5sb2NhdGlvbik7XG4gICAgdHJhbnNpdGlvbk1hbmFnZXIuY29uZmlybVRyYW5zaXRpb25Ubyhsb2NhdGlvbiwgYWN0aW9uLCBnZXRVc2VyQ29uZmlybWF0aW9uLCBmdW5jdGlvbiAob2spIHtcbiAgICAgIGlmICghb2spIHJldHVybjtcbiAgICAgIHZhciBwYXRoID0gY3JlYXRlUGF0aChsb2NhdGlvbik7XG4gICAgICB2YXIgZW5jb2RlZFBhdGggPSBlbmNvZGVQYXRoKGJhc2VuYW1lICsgcGF0aCk7XG4gICAgICB2YXIgaGFzaENoYW5nZWQgPSBnZXRIYXNoUGF0aCgpICE9PSBlbmNvZGVkUGF0aDtcblxuICAgICAgaWYgKGhhc2hDaGFuZ2VkKSB7XG4gICAgICAgIC8vIFdlIGNhbm5vdCB0ZWxsIGlmIGEgaGFzaGNoYW5nZSB3YXMgY2F1c2VkIGJ5IGEgUkVQTEFDRSwgc28gd2UnZFxuICAgICAgICAvLyByYXRoZXIgc2V0U3RhdGUgaGVyZSBhbmQgaWdub3JlIHRoZSBoYXNoY2hhbmdlLiBUaGUgY2F2ZWF0IGhlcmVcbiAgICAgICAgLy8gaXMgdGhhdCBvdGhlciBoYXNoIGhpc3RvcmllcyBpbiB0aGUgcGFnZSB3aWxsIGNvbnNpZGVyIGl0IGEgUE9QLlxuICAgICAgICBpZ25vcmVQYXRoID0gcGF0aDtcbiAgICAgICAgcmVwbGFjZUhhc2hQYXRoKGVuY29kZWRQYXRoKTtcbiAgICAgIH1cblxuICAgICAgdmFyIHByZXZJbmRleCA9IGFsbFBhdGhzLmluZGV4T2YoY3JlYXRlUGF0aChoaXN0b3J5LmxvY2F0aW9uKSk7XG4gICAgICBpZiAocHJldkluZGV4ICE9PSAtMSkgYWxsUGF0aHNbcHJldkluZGV4XSA9IHBhdGg7XG4gICAgICBzZXRTdGF0ZSh7XG4gICAgICAgIGFjdGlvbjogYWN0aW9uLFxuICAgICAgICBsb2NhdGlvbjogbG9jYXRpb25cbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gZ28obikge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoY2FuR29XaXRob3V0UmVsb2FkLCAnSGFzaCBoaXN0b3J5IGdvKG4pIGNhdXNlcyBhIGZ1bGwgcGFnZSByZWxvYWQgaW4gdGhpcyBicm93c2VyJykgOiB2b2lkIDA7XG4gICAgZ2xvYmFsSGlzdG9yeS5nbyhuKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdvQmFjaygpIHtcbiAgICBnbygtMSk7XG4gIH1cblxuICBmdW5jdGlvbiBnb0ZvcndhcmQoKSB7XG4gICAgZ28oMSk7XG4gIH1cblxuICB2YXIgbGlzdGVuZXJDb3VudCA9IDA7XG5cbiAgZnVuY3Rpb24gY2hlY2tET01MaXN0ZW5lcnMoZGVsdGEpIHtcbiAgICBsaXN0ZW5lckNvdW50ICs9IGRlbHRhO1xuXG4gICAgaWYgKGxpc3RlbmVyQ291bnQgPT09IDEgJiYgZGVsdGEgPT09IDEpIHtcbiAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKEhhc2hDaGFuZ2VFdmVudCQxLCBoYW5kbGVIYXNoQ2hhbmdlKTtcbiAgICB9IGVsc2UgaWYgKGxpc3RlbmVyQ291bnQgPT09IDApIHtcbiAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKEhhc2hDaGFuZ2VFdmVudCQxLCBoYW5kbGVIYXNoQ2hhbmdlKTtcbiAgICB9XG4gIH1cblxuICB2YXIgaXNCbG9ja2VkID0gZmFsc2U7XG5cbiAgZnVuY3Rpb24gYmxvY2socHJvbXB0KSB7XG4gICAgaWYgKHByb21wdCA9PT0gdm9pZCAwKSB7XG4gICAgICBwcm9tcHQgPSBmYWxzZTtcbiAgICB9XG5cbiAgICB2YXIgdW5ibG9jayA9IHRyYW5zaXRpb25NYW5hZ2VyLnNldFByb21wdChwcm9tcHQpO1xuXG4gICAgaWYgKCFpc0Jsb2NrZWQpIHtcbiAgICAgIGNoZWNrRE9NTGlzdGVuZXJzKDEpO1xuICAgICAgaXNCbG9ja2VkID0gdHJ1ZTtcbiAgICB9XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKGlzQmxvY2tlZCkge1xuICAgICAgICBpc0Jsb2NrZWQgPSBmYWxzZTtcbiAgICAgICAgY2hlY2tET01MaXN0ZW5lcnMoLTEpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdW5ibG9jaygpO1xuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiBsaXN0ZW4obGlzdGVuZXIpIHtcbiAgICB2YXIgdW5saXN0ZW4gPSB0cmFuc2l0aW9uTWFuYWdlci5hcHBlbmRMaXN0ZW5lcihsaXN0ZW5lcik7XG4gICAgY2hlY2tET01MaXN0ZW5lcnMoMSk7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIGNoZWNrRE9NTGlzdGVuZXJzKC0xKTtcbiAgICAgIHVubGlzdGVuKCk7XG4gICAgfTtcbiAgfVxuXG4gIHZhciBoaXN0b3J5ID0ge1xuICAgIGxlbmd0aDogZ2xvYmFsSGlzdG9yeS5sZW5ndGgsXG4gICAgYWN0aW9uOiAnUE9QJyxcbiAgICBsb2NhdGlvbjogaW5pdGlhbExvY2F0aW9uLFxuICAgIGNyZWF0ZUhyZWY6IGNyZWF0ZUhyZWYsXG4gICAgcHVzaDogcHVzaCxcbiAgICByZXBsYWNlOiByZXBsYWNlLFxuICAgIGdvOiBnbyxcbiAgICBnb0JhY2s6IGdvQmFjayxcbiAgICBnb0ZvcndhcmQ6IGdvRm9yd2FyZCxcbiAgICBibG9jazogYmxvY2ssXG4gICAgbGlzdGVuOiBsaXN0ZW5cbiAgfTtcbiAgcmV0dXJuIGhpc3Rvcnk7XG59XG5cbmZ1bmN0aW9uIGNsYW1wKG4sIGxvd2VyQm91bmQsIHVwcGVyQm91bmQpIHtcbiAgcmV0dXJuIE1hdGgubWluKE1hdGgubWF4KG4sIGxvd2VyQm91bmQpLCB1cHBlckJvdW5kKTtcbn1cbi8qKlxuICogQ3JlYXRlcyBhIGhpc3Rvcnkgb2JqZWN0IHRoYXQgc3RvcmVzIGxvY2F0aW9ucyBpbiBtZW1vcnkuXG4gKi9cblxuXG5mdW5jdGlvbiBjcmVhdGVNZW1vcnlIaXN0b3J5KHByb3BzKSB7XG4gIGlmIChwcm9wcyA9PT0gdm9pZCAwKSB7XG4gICAgcHJvcHMgPSB7fTtcbiAgfVxuXG4gIHZhciBfcHJvcHMgPSBwcm9wcyxcbiAgICAgIGdldFVzZXJDb25maXJtYXRpb24gPSBfcHJvcHMuZ2V0VXNlckNvbmZpcm1hdGlvbixcbiAgICAgIF9wcm9wcyRpbml0aWFsRW50cmllcyA9IF9wcm9wcy5pbml0aWFsRW50cmllcyxcbiAgICAgIGluaXRpYWxFbnRyaWVzID0gX3Byb3BzJGluaXRpYWxFbnRyaWVzID09PSB2b2lkIDAgPyBbJy8nXSA6IF9wcm9wcyRpbml0aWFsRW50cmllcyxcbiAgICAgIF9wcm9wcyRpbml0aWFsSW5kZXggPSBfcHJvcHMuaW5pdGlhbEluZGV4LFxuICAgICAgaW5pdGlhbEluZGV4ID0gX3Byb3BzJGluaXRpYWxJbmRleCA9PT0gdm9pZCAwID8gMCA6IF9wcm9wcyRpbml0aWFsSW5kZXgsXG4gICAgICBfcHJvcHMka2V5TGVuZ3RoID0gX3Byb3BzLmtleUxlbmd0aCxcbiAgICAgIGtleUxlbmd0aCA9IF9wcm9wcyRrZXlMZW5ndGggPT09IHZvaWQgMCA/IDYgOiBfcHJvcHMka2V5TGVuZ3RoO1xuICB2YXIgdHJhbnNpdGlvbk1hbmFnZXIgPSBjcmVhdGVUcmFuc2l0aW9uTWFuYWdlcigpO1xuXG4gIGZ1bmN0aW9uIHNldFN0YXRlKG5leHRTdGF0ZSkge1xuICAgIF9leHRlbmRzKGhpc3RvcnksIG5leHRTdGF0ZSk7XG5cbiAgICBoaXN0b3J5Lmxlbmd0aCA9IGhpc3RvcnkuZW50cmllcy5sZW5ndGg7XG4gICAgdHJhbnNpdGlvbk1hbmFnZXIubm90aWZ5TGlzdGVuZXJzKGhpc3RvcnkubG9jYXRpb24sIGhpc3RvcnkuYWN0aW9uKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNyZWF0ZUtleSgpIHtcbiAgICByZXR1cm4gTWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc3Vic3RyKDIsIGtleUxlbmd0aCk7XG4gIH1cblxuICB2YXIgaW5kZXggPSBjbGFtcChpbml0aWFsSW5kZXgsIDAsIGluaXRpYWxFbnRyaWVzLmxlbmd0aCAtIDEpO1xuICB2YXIgZW50cmllcyA9IGluaXRpYWxFbnRyaWVzLm1hcChmdW5jdGlvbiAoZW50cnkpIHtcbiAgICByZXR1cm4gdHlwZW9mIGVudHJ5ID09PSAnc3RyaW5nJyA/IGNyZWF0ZUxvY2F0aW9uKGVudHJ5LCB1bmRlZmluZWQsIGNyZWF0ZUtleSgpKSA6IGNyZWF0ZUxvY2F0aW9uKGVudHJ5LCB1bmRlZmluZWQsIGVudHJ5LmtleSB8fCBjcmVhdGVLZXkoKSk7XG4gIH0pOyAvLyBQdWJsaWMgaW50ZXJmYWNlXG5cbiAgdmFyIGNyZWF0ZUhyZWYgPSBjcmVhdGVQYXRoO1xuXG4gIGZ1bmN0aW9uIHB1c2gocGF0aCwgc3RhdGUpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKCEodHlwZW9mIHBhdGggPT09ICdvYmplY3QnICYmIHBhdGguc3RhdGUgIT09IHVuZGVmaW5lZCAmJiBzdGF0ZSAhPT0gdW5kZWZpbmVkKSwgJ1lvdSBzaG91bGQgYXZvaWQgcHJvdmlkaW5nIGEgMm5kIHN0YXRlIGFyZ3VtZW50IHRvIHB1c2ggd2hlbiB0aGUgMXN0ICcgKyAnYXJndW1lbnQgaXMgYSBsb2NhdGlvbi1saWtlIG9iamVjdCB0aGF0IGFscmVhZHkgaGFzIHN0YXRlOyBpdCBpcyBpZ25vcmVkJykgOiB2b2lkIDA7XG4gICAgdmFyIGFjdGlvbiA9ICdQVVNIJztcbiAgICB2YXIgbG9jYXRpb24gPSBjcmVhdGVMb2NhdGlvbihwYXRoLCBzdGF0ZSwgY3JlYXRlS2V5KCksIGhpc3RvcnkubG9jYXRpb24pO1xuICAgIHRyYW5zaXRpb25NYW5hZ2VyLmNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sIGFjdGlvbiwgZ2V0VXNlckNvbmZpcm1hdGlvbiwgZnVuY3Rpb24gKG9rKSB7XG4gICAgICBpZiAoIW9rKSByZXR1cm47XG4gICAgICB2YXIgcHJldkluZGV4ID0gaGlzdG9yeS5pbmRleDtcbiAgICAgIHZhciBuZXh0SW5kZXggPSBwcmV2SW5kZXggKyAxO1xuICAgICAgdmFyIG5leHRFbnRyaWVzID0gaGlzdG9yeS5lbnRyaWVzLnNsaWNlKDApO1xuXG4gICAgICBpZiAobmV4dEVudHJpZXMubGVuZ3RoID4gbmV4dEluZGV4KSB7XG4gICAgICAgIG5leHRFbnRyaWVzLnNwbGljZShuZXh0SW5kZXgsIG5leHRFbnRyaWVzLmxlbmd0aCAtIG5leHRJbmRleCwgbG9jYXRpb24pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbmV4dEVudHJpZXMucHVzaChsb2NhdGlvbik7XG4gICAgICB9XG5cbiAgICAgIHNldFN0YXRlKHtcbiAgICAgICAgYWN0aW9uOiBhY3Rpb24sXG4gICAgICAgIGxvY2F0aW9uOiBsb2NhdGlvbixcbiAgICAgICAgaW5kZXg6IG5leHRJbmRleCxcbiAgICAgICAgZW50cmllczogbmV4dEVudHJpZXNcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gcmVwbGFjZShwYXRoLCBzdGF0ZSkge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoISh0eXBlb2YgcGF0aCA9PT0gJ29iamVjdCcgJiYgcGF0aC5zdGF0ZSAhPT0gdW5kZWZpbmVkICYmIHN0YXRlICE9PSB1bmRlZmluZWQpLCAnWW91IHNob3VsZCBhdm9pZCBwcm92aWRpbmcgYSAybmQgc3RhdGUgYXJndW1lbnQgdG8gcmVwbGFjZSB3aGVuIHRoZSAxc3QgJyArICdhcmd1bWVudCBpcyBhIGxvY2F0aW9uLWxpa2Ugb2JqZWN0IHRoYXQgYWxyZWFkeSBoYXMgc3RhdGU7IGl0IGlzIGlnbm9yZWQnKSA6IHZvaWQgMDtcbiAgICB2YXIgYWN0aW9uID0gJ1JFUExBQ0UnO1xuICAgIHZhciBsb2NhdGlvbiA9IGNyZWF0ZUxvY2F0aW9uKHBhdGgsIHN0YXRlLCBjcmVhdGVLZXkoKSwgaGlzdG9yeS5sb2NhdGlvbik7XG4gICAgdHJhbnNpdGlvbk1hbmFnZXIuY29uZmlybVRyYW5zaXRpb25Ubyhsb2NhdGlvbiwgYWN0aW9uLCBnZXRVc2VyQ29uZmlybWF0aW9uLCBmdW5jdGlvbiAob2spIHtcbiAgICAgIGlmICghb2spIHJldHVybjtcbiAgICAgIGhpc3RvcnkuZW50cmllc1toaXN0b3J5LmluZGV4XSA9IGxvY2F0aW9uO1xuICAgICAgc2V0U3RhdGUoe1xuICAgICAgICBhY3Rpb246IGFjdGlvbixcbiAgICAgICAgbG9jYXRpb246IGxvY2F0aW9uXG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdvKG4pIHtcbiAgICB2YXIgbmV4dEluZGV4ID0gY2xhbXAoaGlzdG9yeS5pbmRleCArIG4sIDAsIGhpc3RvcnkuZW50cmllcy5sZW5ndGggLSAxKTtcbiAgICB2YXIgYWN0aW9uID0gJ1BPUCc7XG4gICAgdmFyIGxvY2F0aW9uID0gaGlzdG9yeS5lbnRyaWVzW25leHRJbmRleF07XG4gICAgdHJhbnNpdGlvbk1hbmFnZXIuY29uZmlybVRyYW5zaXRpb25Ubyhsb2NhdGlvbiwgYWN0aW9uLCBnZXRVc2VyQ29uZmlybWF0aW9uLCBmdW5jdGlvbiAob2spIHtcbiAgICAgIGlmIChvaykge1xuICAgICAgICBzZXRTdGF0ZSh7XG4gICAgICAgICAgYWN0aW9uOiBhY3Rpb24sXG4gICAgICAgICAgbG9jYXRpb246IGxvY2F0aW9uLFxuICAgICAgICAgIGluZGV4OiBuZXh0SW5kZXhcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBNaW1pYyB0aGUgYmVoYXZpb3Igb2YgRE9NIGhpc3RvcmllcyBieVxuICAgICAgICAvLyBjYXVzaW5nIGEgcmVuZGVyIGFmdGVyIGEgY2FuY2VsbGVkIFBPUC5cbiAgICAgICAgc2V0U3RhdGUoKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdvQmFjaygpIHtcbiAgICBnbygtMSk7XG4gIH1cblxuICBmdW5jdGlvbiBnb0ZvcndhcmQoKSB7XG4gICAgZ28oMSk7XG4gIH1cblxuICBmdW5jdGlvbiBjYW5HbyhuKSB7XG4gICAgdmFyIG5leHRJbmRleCA9IGhpc3RvcnkuaW5kZXggKyBuO1xuICAgIHJldHVybiBuZXh0SW5kZXggPj0gMCAmJiBuZXh0SW5kZXggPCBoaXN0b3J5LmVudHJpZXMubGVuZ3RoO1xuICB9XG5cbiAgZnVuY3Rpb24gYmxvY2socHJvbXB0KSB7XG4gICAgaWYgKHByb21wdCA9PT0gdm9pZCAwKSB7XG4gICAgICBwcm9tcHQgPSBmYWxzZTtcbiAgICB9XG5cbiAgICByZXR1cm4gdHJhbnNpdGlvbk1hbmFnZXIuc2V0UHJvbXB0KHByb21wdCk7XG4gIH1cblxuICBmdW5jdGlvbiBsaXN0ZW4obGlzdGVuZXIpIHtcbiAgICByZXR1cm4gdHJhbnNpdGlvbk1hbmFnZXIuYXBwZW5kTGlzdGVuZXIobGlzdGVuZXIpO1xuICB9XG5cbiAgdmFyIGhpc3RvcnkgPSB7XG4gICAgbGVuZ3RoOiBlbnRyaWVzLmxlbmd0aCxcbiAgICBhY3Rpb246ICdQT1AnLFxuICAgIGxvY2F0aW9uOiBlbnRyaWVzW2luZGV4XSxcbiAgICBpbmRleDogaW5kZXgsXG4gICAgZW50cmllczogZW50cmllcyxcbiAgICBjcmVhdGVIcmVmOiBjcmVhdGVIcmVmLFxuICAgIHB1c2g6IHB1c2gsXG4gICAgcmVwbGFjZTogcmVwbGFjZSxcbiAgICBnbzogZ28sXG4gICAgZ29CYWNrOiBnb0JhY2ssXG4gICAgZ29Gb3J3YXJkOiBnb0ZvcndhcmQsXG4gICAgY2FuR286IGNhbkdvLFxuICAgIGJsb2NrOiBibG9jayxcbiAgICBsaXN0ZW46IGxpc3RlblxuICB9O1xuICByZXR1cm4gaGlzdG9yeTtcbn1cblxuZXhwb3J0IHsgY3JlYXRlQnJvd3Nlckhpc3RvcnksIGNyZWF0ZUhhc2hIaXN0b3J5LCBjcmVhdGVNZW1vcnlIaXN0b3J5LCBjcmVhdGVMb2NhdGlvbiwgbG9jYXRpb25zQXJlRXF1YWwsIHBhcnNlUGF0aCwgY3JlYXRlUGF0aCB9O1xuIiwiaW1wb3J0IF9pbmhlcml0c0xvb3NlIGZyb20gJ0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2luaGVyaXRzTG9vc2UnO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgeyBjcmVhdGVNZW1vcnlIaXN0b3J5LCBjcmVhdGVMb2NhdGlvbiwgbG9jYXRpb25zQXJlRXF1YWwsIGNyZWF0ZVBhdGggfSBmcm9tICdoaXN0b3J5JztcbmltcG9ydCB3YXJuaW5nIGZyb20gJ3Rpbnktd2FybmluZyc7XG5pbXBvcnQgY3JlYXRlQ29udGV4dCBmcm9tICdtaW5pLWNyZWF0ZS1yZWFjdC1jb250ZXh0JztcbmltcG9ydCBpbnZhcmlhbnQgZnJvbSAndGlueS1pbnZhcmlhbnQnO1xuaW1wb3J0IF9leHRlbmRzIGZyb20gJ0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHMnO1xuaW1wb3J0IHBhdGhUb1JlZ2V4cCBmcm9tICdwYXRoLXRvLXJlZ2V4cCc7XG5pbXBvcnQgeyBpc1ZhbGlkRWxlbWVudFR5cGUgfSBmcm9tICdyZWFjdC1pcyc7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSAnQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSc7XG5pbXBvcnQgaG9pc3RTdGF0aWNzIGZyb20gJ2hvaXN0LW5vbi1yZWFjdC1zdGF0aWNzJztcblxuLy8gVE9ETzogUmVwbGFjZSB3aXRoIFJlYWN0LmNyZWF0ZUNvbnRleHQgb25jZSB3ZSBjYW4gYXNzdW1lIFJlYWN0IDE2K1xuXG52YXIgY3JlYXRlTmFtZWRDb250ZXh0ID0gZnVuY3Rpb24gY3JlYXRlTmFtZWRDb250ZXh0KG5hbWUpIHtcbiAgdmFyIGNvbnRleHQgPSBjcmVhdGVDb250ZXh0KCk7XG4gIGNvbnRleHQuZGlzcGxheU5hbWUgPSBuYW1lO1xuICByZXR1cm4gY29udGV4dDtcbn07XG5cbnZhciBoaXN0b3J5Q29udGV4dCA9XG4vKiNfX1BVUkVfXyovXG5jcmVhdGVOYW1lZENvbnRleHQoXCJSb3V0ZXItSGlzdG9yeVwiKTtcblxuLy8gVE9ETzogUmVwbGFjZSB3aXRoIFJlYWN0LmNyZWF0ZUNvbnRleHQgb25jZSB3ZSBjYW4gYXNzdW1lIFJlYWN0IDE2K1xuXG52YXIgY3JlYXRlTmFtZWRDb250ZXh0JDEgPSBmdW5jdGlvbiBjcmVhdGVOYW1lZENvbnRleHQobmFtZSkge1xuICB2YXIgY29udGV4dCA9IGNyZWF0ZUNvbnRleHQoKTtcbiAgY29udGV4dC5kaXNwbGF5TmFtZSA9IG5hbWU7XG4gIHJldHVybiBjb250ZXh0O1xufTtcblxudmFyIGNvbnRleHQgPVxuLyojX19QVVJFX18qL1xuY3JlYXRlTmFtZWRDb250ZXh0JDEoXCJSb3V0ZXJcIik7XG5cbi8qKlxuICogVGhlIHB1YmxpYyBBUEkgZm9yIHB1dHRpbmcgaGlzdG9yeSBvbiBjb250ZXh0LlxuICovXG5cbnZhciBSb3V0ZXIgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzTG9vc2UoUm91dGVyLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBSb3V0ZXIuY29tcHV0ZVJvb3RNYXRjaCA9IGZ1bmN0aW9uIGNvbXB1dGVSb290TWF0Y2gocGF0aG5hbWUpIHtcbiAgICByZXR1cm4ge1xuICAgICAgcGF0aDogXCIvXCIsXG4gICAgICB1cmw6IFwiL1wiLFxuICAgICAgcGFyYW1zOiB7fSxcbiAgICAgIGlzRXhhY3Q6IHBhdGhuYW1lID09PSBcIi9cIlxuICAgIH07XG4gIH07XG5cbiAgZnVuY3Rpb24gUm91dGVyKHByb3BzKSB7XG4gICAgdmFyIF90aGlzO1xuXG4gICAgX3RoaXMgPSBfUmVhY3QkQ29tcG9uZW50LmNhbGwodGhpcywgcHJvcHMpIHx8IHRoaXM7XG4gICAgX3RoaXMuc3RhdGUgPSB7XG4gICAgICBsb2NhdGlvbjogcHJvcHMuaGlzdG9yeS5sb2NhdGlvblxuICAgIH07IC8vIFRoaXMgaXMgYSBiaXQgb2YgYSBoYWNrLiBXZSBoYXZlIHRvIHN0YXJ0IGxpc3RlbmluZyBmb3IgbG9jYXRpb25cbiAgICAvLyBjaGFuZ2VzIGhlcmUgaW4gdGhlIGNvbnN0cnVjdG9yIGluIGNhc2UgdGhlcmUgYXJlIGFueSA8UmVkaXJlY3Q+c1xuICAgIC8vIG9uIHRoZSBpbml0aWFsIHJlbmRlci4gSWYgdGhlcmUgYXJlLCB0aGV5IHdpbGwgcmVwbGFjZS9wdXNoIHdoZW5cbiAgICAvLyB0aGV5IG1vdW50IGFuZCBzaW5jZSBjRE0gZmlyZXMgaW4gY2hpbGRyZW4gYmVmb3JlIHBhcmVudHMsIHdlIG1heVxuICAgIC8vIGdldCBhIG5ldyBsb2NhdGlvbiBiZWZvcmUgdGhlIDxSb3V0ZXI+IGlzIG1vdW50ZWQuXG5cbiAgICBfdGhpcy5faXNNb3VudGVkID0gZmFsc2U7XG4gICAgX3RoaXMuX3BlbmRpbmdMb2NhdGlvbiA9IG51bGw7XG5cbiAgICBpZiAoIXByb3BzLnN0YXRpY0NvbnRleHQpIHtcbiAgICAgIF90aGlzLnVubGlzdGVuID0gcHJvcHMuaGlzdG9yeS5saXN0ZW4oZnVuY3Rpb24gKGxvY2F0aW9uKSB7XG4gICAgICAgIGlmIChfdGhpcy5faXNNb3VudGVkKSB7XG4gICAgICAgICAgX3RoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgICAgbG9jYXRpb246IGxvY2F0aW9uXG4gICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgX3RoaXMuX3BlbmRpbmdMb2NhdGlvbiA9IGxvY2F0aW9uO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gUm91dGVyLnByb3RvdHlwZTtcblxuICBfcHJvdG8uY29tcG9uZW50RGlkTW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICB0aGlzLl9pc01vdW50ZWQgPSB0cnVlO1xuXG4gICAgaWYgKHRoaXMuX3BlbmRpbmdMb2NhdGlvbikge1xuICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgIGxvY2F0aW9uOiB0aGlzLl9wZW5kaW5nTG9jYXRpb25cbiAgICAgIH0pO1xuICAgIH1cbiAgfTtcblxuICBfcHJvdG8uY29tcG9uZW50V2lsbFVubW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICBpZiAodGhpcy51bmxpc3RlbikgdGhpcy51bmxpc3RlbigpO1xuICB9O1xuXG4gIF9wcm90by5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoY29udGV4dC5Qcm92aWRlciwge1xuICAgICAgdmFsdWU6IHtcbiAgICAgICAgaGlzdG9yeTogdGhpcy5wcm9wcy5oaXN0b3J5LFxuICAgICAgICBsb2NhdGlvbjogdGhpcy5zdGF0ZS5sb2NhdGlvbixcbiAgICAgICAgbWF0Y2g6IFJvdXRlci5jb21wdXRlUm9vdE1hdGNoKHRoaXMuc3RhdGUubG9jYXRpb24ucGF0aG5hbWUpLFxuICAgICAgICBzdGF0aWNDb250ZXh0OiB0aGlzLnByb3BzLnN0YXRpY0NvbnRleHRcbiAgICAgIH1cbiAgICB9LCBSZWFjdC5jcmVhdGVFbGVtZW50KGhpc3RvcnlDb250ZXh0LlByb3ZpZGVyLCB7XG4gICAgICBjaGlsZHJlbjogdGhpcy5wcm9wcy5jaGlsZHJlbiB8fCBudWxsLFxuICAgICAgdmFsdWU6IHRoaXMucHJvcHMuaGlzdG9yeVxuICAgIH0pKTtcbiAgfTtcblxuICByZXR1cm4gUm91dGVyO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gIFJvdXRlci5wcm9wVHlwZXMgPSB7XG4gICAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuICAgIGhpc3Rvcnk6IFByb3BUeXBlcy5vYmplY3QuaXNSZXF1aXJlZCxcbiAgICBzdGF0aWNDb250ZXh0OiBQcm9wVHlwZXMub2JqZWN0XG4gIH07XG5cbiAgUm91dGVyLnByb3RvdHlwZS5jb21wb25lbnREaWRVcGRhdGUgPSBmdW5jdGlvbiAocHJldlByb3BzKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhwcmV2UHJvcHMuaGlzdG9yeSA9PT0gdGhpcy5wcm9wcy5oaXN0b3J5LCBcIllvdSBjYW5ub3QgY2hhbmdlIDxSb3V0ZXIgaGlzdG9yeT5cIikgOiB2b2lkIDA7XG4gIH07XG59XG5cbi8qKlxuICogVGhlIHB1YmxpYyBBUEkgZm9yIGEgPFJvdXRlcj4gdGhhdCBzdG9yZXMgbG9jYXRpb24gaW4gbWVtb3J5LlxuICovXG5cbnZhciBNZW1vcnlSb3V0ZXIgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzTG9vc2UoTWVtb3J5Um91dGVyLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBNZW1vcnlSb3V0ZXIoKSB7XG4gICAgdmFyIF90aGlzO1xuXG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIF90aGlzID0gX1JlYWN0JENvbXBvbmVudC5jYWxsLmFwcGx5KF9SZWFjdCRDb21wb25lbnQsIFt0aGlzXS5jb25jYXQoYXJncykpIHx8IHRoaXM7XG4gICAgX3RoaXMuaGlzdG9yeSA9IGNyZWF0ZU1lbW9yeUhpc3RvcnkoX3RoaXMucHJvcHMpO1xuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBNZW1vcnlSb3V0ZXIucHJvdG90eXBlO1xuXG4gIF9wcm90by5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoUm91dGVyLCB7XG4gICAgICBoaXN0b3J5OiB0aGlzLmhpc3RvcnksXG4gICAgICBjaGlsZHJlbjogdGhpcy5wcm9wcy5jaGlsZHJlblxuICAgIH0pO1xuICB9O1xuXG4gIHJldHVybiBNZW1vcnlSb3V0ZXI7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgTWVtb3J5Um91dGVyLnByb3BUeXBlcyA9IHtcbiAgICBpbml0aWFsRW50cmllczogUHJvcFR5cGVzLmFycmF5LFxuICAgIGluaXRpYWxJbmRleDogUHJvcFR5cGVzLm51bWJlcixcbiAgICBnZXRVc2VyQ29uZmlybWF0aW9uOiBQcm9wVHlwZXMuZnVuYyxcbiAgICBrZXlMZW5ndGg6IFByb3BUeXBlcy5udW1iZXIsXG4gICAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlXG4gIH07XG5cbiAgTWVtb3J5Um91dGVyLnByb3RvdHlwZS5jb21wb25lbnREaWRNb3VudCA9IGZ1bmN0aW9uICgpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKCF0aGlzLnByb3BzLmhpc3RvcnksIFwiPE1lbW9yeVJvdXRlcj4gaWdub3JlcyB0aGUgaGlzdG9yeSBwcm9wLiBUbyB1c2UgYSBjdXN0b20gaGlzdG9yeSwgXCIgKyBcInVzZSBgaW1wb3J0IHsgUm91dGVyIH1gIGluc3RlYWQgb2YgYGltcG9ydCB7IE1lbW9yeVJvdXRlciBhcyBSb3V0ZXIgfWAuXCIpIDogdm9pZCAwO1xuICB9O1xufVxuXG52YXIgTGlmZWN5Y2xlID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0c0xvb3NlKExpZmVjeWNsZSwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gTGlmZWN5Y2xlKCkge1xuICAgIHJldHVybiBfUmVhY3QkQ29tcG9uZW50LmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBMaWZlY3ljbGUucHJvdG90eXBlO1xuXG4gIF9wcm90by5jb21wb25lbnREaWRNb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgIGlmICh0aGlzLnByb3BzLm9uTW91bnQpIHRoaXMucHJvcHMub25Nb3VudC5jYWxsKHRoaXMsIHRoaXMpO1xuICB9O1xuXG4gIF9wcm90by5jb21wb25lbnREaWRVcGRhdGUgPSBmdW5jdGlvbiBjb21wb25lbnREaWRVcGRhdGUocHJldlByb3BzKSB7XG4gICAgaWYgKHRoaXMucHJvcHMub25VcGRhdGUpIHRoaXMucHJvcHMub25VcGRhdGUuY2FsbCh0aGlzLCB0aGlzLCBwcmV2UHJvcHMpO1xuICB9O1xuXG4gIF9wcm90by5jb21wb25lbnRXaWxsVW5tb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgIGlmICh0aGlzLnByb3BzLm9uVW5tb3VudCkgdGhpcy5wcm9wcy5vblVubW91bnQuY2FsbCh0aGlzLCB0aGlzKTtcbiAgfTtcblxuICBfcHJvdG8ucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHJldHVybiBudWxsO1xuICB9O1xuXG4gIHJldHVybiBMaWZlY3ljbGU7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cbi8qKlxuICogVGhlIHB1YmxpYyBBUEkgZm9yIHByb21wdGluZyB0aGUgdXNlciBiZWZvcmUgbmF2aWdhdGluZyBhd2F5IGZyb20gYSBzY3JlZW4uXG4gKi9cblxuZnVuY3Rpb24gUHJvbXB0KF9yZWYpIHtcbiAgdmFyIG1lc3NhZ2UgPSBfcmVmLm1lc3NhZ2UsXG4gICAgICBfcmVmJHdoZW4gPSBfcmVmLndoZW4sXG4gICAgICB3aGVuID0gX3JlZiR3aGVuID09PSB2b2lkIDAgPyB0cnVlIDogX3JlZiR3aGVuO1xuICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChjb250ZXh0LkNvbnN1bWVyLCBudWxsLCBmdW5jdGlvbiAoY29udGV4dCkge1xuICAgICFjb250ZXh0ID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCBcIllvdSBzaG91bGQgbm90IHVzZSA8UHJvbXB0PiBvdXRzaWRlIGEgPFJvdXRlcj5cIikgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgIGlmICghd2hlbiB8fCBjb250ZXh0LnN0YXRpY0NvbnRleHQpIHJldHVybiBudWxsO1xuICAgIHZhciBtZXRob2QgPSBjb250ZXh0Lmhpc3RvcnkuYmxvY2s7XG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoTGlmZWN5Y2xlLCB7XG4gICAgICBvbk1vdW50OiBmdW5jdGlvbiBvbk1vdW50KHNlbGYpIHtcbiAgICAgICAgc2VsZi5yZWxlYXNlID0gbWV0aG9kKG1lc3NhZ2UpO1xuICAgICAgfSxcbiAgICAgIG9uVXBkYXRlOiBmdW5jdGlvbiBvblVwZGF0ZShzZWxmLCBwcmV2UHJvcHMpIHtcbiAgICAgICAgaWYgKHByZXZQcm9wcy5tZXNzYWdlICE9PSBtZXNzYWdlKSB7XG4gICAgICAgICAgc2VsZi5yZWxlYXNlKCk7XG4gICAgICAgICAgc2VsZi5yZWxlYXNlID0gbWV0aG9kKG1lc3NhZ2UpO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgb25Vbm1vdW50OiBmdW5jdGlvbiBvblVubW91bnQoc2VsZikge1xuICAgICAgICBzZWxmLnJlbGVhc2UoKTtcbiAgICAgIH0sXG4gICAgICBtZXNzYWdlOiBtZXNzYWdlXG4gICAgfSk7XG4gIH0pO1xufVxuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gIHZhciBtZXNzYWdlVHlwZSA9IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMuc3RyaW5nXSk7XG4gIFByb21wdC5wcm9wVHlwZXMgPSB7XG4gICAgd2hlbjogUHJvcFR5cGVzLmJvb2wsXG4gICAgbWVzc2FnZTogbWVzc2FnZVR5cGUuaXNSZXF1aXJlZFxuICB9O1xufVxuXG52YXIgY2FjaGUgPSB7fTtcbnZhciBjYWNoZUxpbWl0ID0gMTAwMDA7XG52YXIgY2FjaGVDb3VudCA9IDA7XG5cbmZ1bmN0aW9uIGNvbXBpbGVQYXRoKHBhdGgpIHtcbiAgaWYgKGNhY2hlW3BhdGhdKSByZXR1cm4gY2FjaGVbcGF0aF07XG4gIHZhciBnZW5lcmF0b3IgPSBwYXRoVG9SZWdleHAuY29tcGlsZShwYXRoKTtcblxuICBpZiAoY2FjaGVDb3VudCA8IGNhY2hlTGltaXQpIHtcbiAgICBjYWNoZVtwYXRoXSA9IGdlbmVyYXRvcjtcbiAgICBjYWNoZUNvdW50Kys7XG4gIH1cblxuICByZXR1cm4gZ2VuZXJhdG9yO1xufVxuLyoqXG4gKiBQdWJsaWMgQVBJIGZvciBnZW5lcmF0aW5nIGEgVVJMIHBhdGhuYW1lIGZyb20gYSBwYXRoIGFuZCBwYXJhbWV0ZXJzLlxuICovXG5cblxuZnVuY3Rpb24gZ2VuZXJhdGVQYXRoKHBhdGgsIHBhcmFtcykge1xuICBpZiAocGF0aCA9PT0gdm9pZCAwKSB7XG4gICAgcGF0aCA9IFwiL1wiO1xuICB9XG5cbiAgaWYgKHBhcmFtcyA9PT0gdm9pZCAwKSB7XG4gICAgcGFyYW1zID0ge307XG4gIH1cblxuICByZXR1cm4gcGF0aCA9PT0gXCIvXCIgPyBwYXRoIDogY29tcGlsZVBhdGgocGF0aCkocGFyYW1zLCB7XG4gICAgcHJldHR5OiB0cnVlXG4gIH0pO1xufVxuXG4vKipcbiAqIFRoZSBwdWJsaWMgQVBJIGZvciBuYXZpZ2F0aW5nIHByb2dyYW1tYXRpY2FsbHkgd2l0aCBhIGNvbXBvbmVudC5cbiAqL1xuXG5mdW5jdGlvbiBSZWRpcmVjdChfcmVmKSB7XG4gIHZhciBjb21wdXRlZE1hdGNoID0gX3JlZi5jb21wdXRlZE1hdGNoLFxuICAgICAgdG8gPSBfcmVmLnRvLFxuICAgICAgX3JlZiRwdXNoID0gX3JlZi5wdXNoLFxuICAgICAgcHVzaCA9IF9yZWYkcHVzaCA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcmVmJHB1c2g7XG4gIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KGNvbnRleHQuQ29uc3VtZXIsIG51bGwsIGZ1bmN0aW9uIChjb250ZXh0KSB7XG4gICAgIWNvbnRleHQgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsIFwiWW91IHNob3VsZCBub3QgdXNlIDxSZWRpcmVjdD4gb3V0c2lkZSBhIDxSb3V0ZXI+XCIpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICB2YXIgaGlzdG9yeSA9IGNvbnRleHQuaGlzdG9yeSxcbiAgICAgICAgc3RhdGljQ29udGV4dCA9IGNvbnRleHQuc3RhdGljQ29udGV4dDtcbiAgICB2YXIgbWV0aG9kID0gcHVzaCA/IGhpc3RvcnkucHVzaCA6IGhpc3RvcnkucmVwbGFjZTtcbiAgICB2YXIgbG9jYXRpb24gPSBjcmVhdGVMb2NhdGlvbihjb21wdXRlZE1hdGNoID8gdHlwZW9mIHRvID09PSBcInN0cmluZ1wiID8gZ2VuZXJhdGVQYXRoKHRvLCBjb21wdXRlZE1hdGNoLnBhcmFtcykgOiBfZXh0ZW5kcyh7fSwgdG8sIHtcbiAgICAgIHBhdGhuYW1lOiBnZW5lcmF0ZVBhdGgodG8ucGF0aG5hbWUsIGNvbXB1dGVkTWF0Y2gucGFyYW1zKVxuICAgIH0pIDogdG8pOyAvLyBXaGVuIHJlbmRlcmluZyBpbiBhIHN0YXRpYyBjb250ZXh0LFxuICAgIC8vIHNldCB0aGUgbmV3IGxvY2F0aW9uIGltbWVkaWF0ZWx5LlxuXG4gICAgaWYgKHN0YXRpY0NvbnRleHQpIHtcbiAgICAgIG1ldGhvZChsb2NhdGlvbik7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChMaWZlY3ljbGUsIHtcbiAgICAgIG9uTW91bnQ6IGZ1bmN0aW9uIG9uTW91bnQoKSB7XG4gICAgICAgIG1ldGhvZChsb2NhdGlvbik7XG4gICAgICB9LFxuICAgICAgb25VcGRhdGU6IGZ1bmN0aW9uIG9uVXBkYXRlKHNlbGYsIHByZXZQcm9wcykge1xuICAgICAgICB2YXIgcHJldkxvY2F0aW9uID0gY3JlYXRlTG9jYXRpb24ocHJldlByb3BzLnRvKTtcblxuICAgICAgICBpZiAoIWxvY2F0aW9uc0FyZUVxdWFsKHByZXZMb2NhdGlvbiwgX2V4dGVuZHMoe30sIGxvY2F0aW9uLCB7XG4gICAgICAgICAga2V5OiBwcmV2TG9jYXRpb24ua2V5XG4gICAgICAgIH0pKSkge1xuICAgICAgICAgIG1ldGhvZChsb2NhdGlvbik7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICB0bzogdG9cbiAgICB9KTtcbiAgfSk7XG59XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgUmVkaXJlY3QucHJvcFR5cGVzID0ge1xuICAgIHB1c2g6IFByb3BUeXBlcy5ib29sLFxuICAgIGZyb206IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgdG86IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5zdHJpbmcsIFByb3BUeXBlcy5vYmplY3RdKS5pc1JlcXVpcmVkXG4gIH07XG59XG5cbnZhciBjYWNoZSQxID0ge307XG52YXIgY2FjaGVMaW1pdCQxID0gMTAwMDA7XG52YXIgY2FjaGVDb3VudCQxID0gMDtcblxuZnVuY3Rpb24gY29tcGlsZVBhdGgkMShwYXRoLCBvcHRpb25zKSB7XG4gIHZhciBjYWNoZUtleSA9IFwiXCIgKyBvcHRpb25zLmVuZCArIG9wdGlvbnMuc3RyaWN0ICsgb3B0aW9ucy5zZW5zaXRpdmU7XG4gIHZhciBwYXRoQ2FjaGUgPSBjYWNoZSQxW2NhY2hlS2V5XSB8fCAoY2FjaGUkMVtjYWNoZUtleV0gPSB7fSk7XG4gIGlmIChwYXRoQ2FjaGVbcGF0aF0pIHJldHVybiBwYXRoQ2FjaGVbcGF0aF07XG4gIHZhciBrZXlzID0gW107XG4gIHZhciByZWdleHAgPSBwYXRoVG9SZWdleHAocGF0aCwga2V5cywgb3B0aW9ucyk7XG4gIHZhciByZXN1bHQgPSB7XG4gICAgcmVnZXhwOiByZWdleHAsXG4gICAga2V5czoga2V5c1xuICB9O1xuXG4gIGlmIChjYWNoZUNvdW50JDEgPCBjYWNoZUxpbWl0JDEpIHtcbiAgICBwYXRoQ2FjaGVbcGF0aF0gPSByZXN1bHQ7XG4gICAgY2FjaGVDb3VudCQxKys7XG4gIH1cblxuICByZXR1cm4gcmVzdWx0O1xufVxuLyoqXG4gKiBQdWJsaWMgQVBJIGZvciBtYXRjaGluZyBhIFVSTCBwYXRobmFtZSB0byBhIHBhdGguXG4gKi9cblxuXG5mdW5jdGlvbiBtYXRjaFBhdGgocGF0aG5hbWUsIG9wdGlvbnMpIHtcbiAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkge1xuICAgIG9wdGlvbnMgPSB7fTtcbiAgfVxuXG4gIGlmICh0eXBlb2Ygb3B0aW9ucyA9PT0gXCJzdHJpbmdcIiB8fCBBcnJheS5pc0FycmF5KG9wdGlvbnMpKSB7XG4gICAgb3B0aW9ucyA9IHtcbiAgICAgIHBhdGg6IG9wdGlvbnNcbiAgICB9O1xuICB9XG5cbiAgdmFyIF9vcHRpb25zID0gb3B0aW9ucyxcbiAgICAgIHBhdGggPSBfb3B0aW9ucy5wYXRoLFxuICAgICAgX29wdGlvbnMkZXhhY3QgPSBfb3B0aW9ucy5leGFjdCxcbiAgICAgIGV4YWN0ID0gX29wdGlvbnMkZXhhY3QgPT09IHZvaWQgMCA/IGZhbHNlIDogX29wdGlvbnMkZXhhY3QsXG4gICAgICBfb3B0aW9ucyRzdHJpY3QgPSBfb3B0aW9ucy5zdHJpY3QsXG4gICAgICBzdHJpY3QgPSBfb3B0aW9ucyRzdHJpY3QgPT09IHZvaWQgMCA/IGZhbHNlIDogX29wdGlvbnMkc3RyaWN0LFxuICAgICAgX29wdGlvbnMkc2Vuc2l0aXZlID0gX29wdGlvbnMuc2Vuc2l0aXZlLFxuICAgICAgc2Vuc2l0aXZlID0gX29wdGlvbnMkc2Vuc2l0aXZlID09PSB2b2lkIDAgPyBmYWxzZSA6IF9vcHRpb25zJHNlbnNpdGl2ZTtcbiAgdmFyIHBhdGhzID0gW10uY29uY2F0KHBhdGgpO1xuICByZXR1cm4gcGF0aHMucmVkdWNlKGZ1bmN0aW9uIChtYXRjaGVkLCBwYXRoKSB7XG4gICAgaWYgKCFwYXRoICYmIHBhdGggIT09IFwiXCIpIHJldHVybiBudWxsO1xuICAgIGlmIChtYXRjaGVkKSByZXR1cm4gbWF0Y2hlZDtcblxuICAgIHZhciBfY29tcGlsZVBhdGggPSBjb21waWxlUGF0aCQxKHBhdGgsIHtcbiAgICAgIGVuZDogZXhhY3QsXG4gICAgICBzdHJpY3Q6IHN0cmljdCxcbiAgICAgIHNlbnNpdGl2ZTogc2Vuc2l0aXZlXG4gICAgfSksXG4gICAgICAgIHJlZ2V4cCA9IF9jb21waWxlUGF0aC5yZWdleHAsXG4gICAgICAgIGtleXMgPSBfY29tcGlsZVBhdGgua2V5cztcblxuICAgIHZhciBtYXRjaCA9IHJlZ2V4cC5leGVjKHBhdGhuYW1lKTtcbiAgICBpZiAoIW1hdGNoKSByZXR1cm4gbnVsbDtcbiAgICB2YXIgdXJsID0gbWF0Y2hbMF0sXG4gICAgICAgIHZhbHVlcyA9IG1hdGNoLnNsaWNlKDEpO1xuICAgIHZhciBpc0V4YWN0ID0gcGF0aG5hbWUgPT09IHVybDtcbiAgICBpZiAoZXhhY3QgJiYgIWlzRXhhY3QpIHJldHVybiBudWxsO1xuICAgIHJldHVybiB7XG4gICAgICBwYXRoOiBwYXRoLFxuICAgICAgLy8gdGhlIHBhdGggdXNlZCB0byBtYXRjaFxuICAgICAgdXJsOiBwYXRoID09PSBcIi9cIiAmJiB1cmwgPT09IFwiXCIgPyBcIi9cIiA6IHVybCxcbiAgICAgIC8vIHRoZSBtYXRjaGVkIHBvcnRpb24gb2YgdGhlIFVSTFxuICAgICAgaXNFeGFjdDogaXNFeGFjdCxcbiAgICAgIC8vIHdoZXRoZXIgb3Igbm90IHdlIG1hdGNoZWQgZXhhY3RseVxuICAgICAgcGFyYW1zOiBrZXlzLnJlZHVjZShmdW5jdGlvbiAobWVtbywga2V5LCBpbmRleCkge1xuICAgICAgICBtZW1vW2tleS5uYW1lXSA9IHZhbHVlc1tpbmRleF07XG4gICAgICAgIHJldHVybiBtZW1vO1xuICAgICAgfSwge30pXG4gICAgfTtcbiAgfSwgbnVsbCk7XG59XG5cbmZ1bmN0aW9uIGlzRW1wdHlDaGlsZHJlbihjaGlsZHJlbikge1xuICByZXR1cm4gUmVhY3QuQ2hpbGRyZW4uY291bnQoY2hpbGRyZW4pID09PSAwO1xufVxuXG5mdW5jdGlvbiBldmFsQ2hpbGRyZW5EZXYoY2hpbGRyZW4sIHByb3BzLCBwYXRoKSB7XG4gIHZhciB2YWx1ZSA9IGNoaWxkcmVuKHByb3BzKTtcbiAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyh2YWx1ZSAhPT0gdW5kZWZpbmVkLCBcIllvdSByZXR1cm5lZCBgdW5kZWZpbmVkYCBmcm9tIHRoZSBgY2hpbGRyZW5gIGZ1bmN0aW9uIG9mIFwiICsgKFwiPFJvdXRlXCIgKyAocGF0aCA/IFwiIHBhdGg9XFxcIlwiICsgcGF0aCArIFwiXFxcIlwiIDogXCJcIikgKyBcIj4sIGJ1dCB5b3UgXCIpICsgXCJzaG91bGQgaGF2ZSByZXR1cm5lZCBhIFJlYWN0IGVsZW1lbnQgb3IgYG51bGxgXCIpIDogdm9pZCAwO1xuICByZXR1cm4gdmFsdWUgfHwgbnVsbDtcbn1cbi8qKlxuICogVGhlIHB1YmxpYyBBUEkgZm9yIG1hdGNoaW5nIGEgc2luZ2xlIHBhdGggYW5kIHJlbmRlcmluZy5cbiAqL1xuXG5cbnZhciBSb3V0ZSA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHNMb29zZShSb3V0ZSwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gUm91dGUoKSB7XG4gICAgcmV0dXJuIF9SZWFjdCRDb21wb25lbnQuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IFJvdXRlLnByb3RvdHlwZTtcblxuICBfcHJvdG8ucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChjb250ZXh0LkNvbnN1bWVyLCBudWxsLCBmdW5jdGlvbiAoY29udGV4dCQxKSB7XG4gICAgICAhY29udGV4dCQxID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCBcIllvdSBzaG91bGQgbm90IHVzZSA8Um91dGU+IG91dHNpZGUgYSA8Um91dGVyPlwiKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgICB2YXIgbG9jYXRpb24gPSBfdGhpcy5wcm9wcy5sb2NhdGlvbiB8fCBjb250ZXh0JDEubG9jYXRpb247XG4gICAgICB2YXIgbWF0Y2ggPSBfdGhpcy5wcm9wcy5jb21wdXRlZE1hdGNoID8gX3RoaXMucHJvcHMuY29tcHV0ZWRNYXRjaCAvLyA8U3dpdGNoPiBhbHJlYWR5IGNvbXB1dGVkIHRoZSBtYXRjaCBmb3IgdXNcbiAgICAgIDogX3RoaXMucHJvcHMucGF0aCA/IG1hdGNoUGF0aChsb2NhdGlvbi5wYXRobmFtZSwgX3RoaXMucHJvcHMpIDogY29udGV4dCQxLm1hdGNoO1xuXG4gICAgICB2YXIgcHJvcHMgPSBfZXh0ZW5kcyh7fSwgY29udGV4dCQxLCB7XG4gICAgICAgIGxvY2F0aW9uOiBsb2NhdGlvbixcbiAgICAgICAgbWF0Y2g6IG1hdGNoXG4gICAgICB9KTtcblxuICAgICAgdmFyIF90aGlzJHByb3BzID0gX3RoaXMucHJvcHMsXG4gICAgICAgICAgY2hpbGRyZW4gPSBfdGhpcyRwcm9wcy5jaGlsZHJlbixcbiAgICAgICAgICBjb21wb25lbnQgPSBfdGhpcyRwcm9wcy5jb21wb25lbnQsXG4gICAgICAgICAgcmVuZGVyID0gX3RoaXMkcHJvcHMucmVuZGVyOyAvLyBQcmVhY3QgdXNlcyBhbiBlbXB0eSBhcnJheSBhcyBjaGlsZHJlbiBieVxuICAgICAgLy8gZGVmYXVsdCwgc28gdXNlIG51bGwgaWYgdGhhdCdzIHRoZSBjYXNlLlxuXG4gICAgICBpZiAoQXJyYXkuaXNBcnJheShjaGlsZHJlbikgJiYgY2hpbGRyZW4ubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIGNoaWxkcmVuID0gbnVsbDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoY29udGV4dC5Qcm92aWRlciwge1xuICAgICAgICB2YWx1ZTogcHJvcHNcbiAgICAgIH0sIHByb3BzLm1hdGNoID8gY2hpbGRyZW4gPyB0eXBlb2YgY2hpbGRyZW4gPT09IFwiZnVuY3Rpb25cIiA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGV2YWxDaGlsZHJlbkRldihjaGlsZHJlbiwgcHJvcHMsIF90aGlzLnByb3BzLnBhdGgpIDogY2hpbGRyZW4ocHJvcHMpIDogY2hpbGRyZW4gOiBjb21wb25lbnQgPyBSZWFjdC5jcmVhdGVFbGVtZW50KGNvbXBvbmVudCwgcHJvcHMpIDogcmVuZGVyID8gcmVuZGVyKHByb3BzKSA6IG51bGwgOiB0eXBlb2YgY2hpbGRyZW4gPT09IFwiZnVuY3Rpb25cIiA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGV2YWxDaGlsZHJlbkRldihjaGlsZHJlbiwgcHJvcHMsIF90aGlzLnByb3BzLnBhdGgpIDogY2hpbGRyZW4ocHJvcHMpIDogbnVsbCk7XG4gICAgfSk7XG4gIH07XG5cbiAgcmV0dXJuIFJvdXRlO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gIFJvdXRlLnByb3BUeXBlcyA9IHtcbiAgICBjaGlsZHJlbjogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5ub2RlXSksXG4gICAgY29tcG9uZW50OiBmdW5jdGlvbiBjb21wb25lbnQocHJvcHMsIHByb3BOYW1lKSB7XG4gICAgICBpZiAocHJvcHNbcHJvcE5hbWVdICYmICFpc1ZhbGlkRWxlbWVudFR5cGUocHJvcHNbcHJvcE5hbWVdKSkge1xuICAgICAgICByZXR1cm4gbmV3IEVycm9yKFwiSW52YWxpZCBwcm9wICdjb21wb25lbnQnIHN1cHBsaWVkIHRvICdSb3V0ZSc6IHRoZSBwcm9wIGlzIG5vdCBhIHZhbGlkIFJlYWN0IGNvbXBvbmVudFwiKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIGV4YWN0OiBQcm9wVHlwZXMuYm9vbCxcbiAgICBsb2NhdGlvbjogUHJvcFR5cGVzLm9iamVjdCxcbiAgICBwYXRoOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuc3RyaW5nLCBQcm9wVHlwZXMuYXJyYXlPZihQcm9wVHlwZXMuc3RyaW5nKV0pLFxuICAgIHJlbmRlcjogUHJvcFR5cGVzLmZ1bmMsXG4gICAgc2Vuc2l0aXZlOiBQcm9wVHlwZXMuYm9vbCxcbiAgICBzdHJpY3Q6IFByb3BUeXBlcy5ib29sXG4gIH07XG5cbiAgUm91dGUucHJvdG90eXBlLmNvbXBvbmVudERpZE1vdW50ID0gZnVuY3Rpb24gKCkge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoISh0aGlzLnByb3BzLmNoaWxkcmVuICYmICFpc0VtcHR5Q2hpbGRyZW4odGhpcy5wcm9wcy5jaGlsZHJlbikgJiYgdGhpcy5wcm9wcy5jb21wb25lbnQpLCBcIllvdSBzaG91bGQgbm90IHVzZSA8Um91dGUgY29tcG9uZW50PiBhbmQgPFJvdXRlIGNoaWxkcmVuPiBpbiB0aGUgc2FtZSByb3V0ZTsgPFJvdXRlIGNvbXBvbmVudD4gd2lsbCBiZSBpZ25vcmVkXCIpIDogdm9pZCAwO1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoISh0aGlzLnByb3BzLmNoaWxkcmVuICYmICFpc0VtcHR5Q2hpbGRyZW4odGhpcy5wcm9wcy5jaGlsZHJlbikgJiYgdGhpcy5wcm9wcy5yZW5kZXIpLCBcIllvdSBzaG91bGQgbm90IHVzZSA8Um91dGUgcmVuZGVyPiBhbmQgPFJvdXRlIGNoaWxkcmVuPiBpbiB0aGUgc2FtZSByb3V0ZTsgPFJvdXRlIHJlbmRlcj4gd2lsbCBiZSBpZ25vcmVkXCIpIDogdm9pZCAwO1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoISh0aGlzLnByb3BzLmNvbXBvbmVudCAmJiB0aGlzLnByb3BzLnJlbmRlciksIFwiWW91IHNob3VsZCBub3QgdXNlIDxSb3V0ZSBjb21wb25lbnQ+IGFuZCA8Um91dGUgcmVuZGVyPiBpbiB0aGUgc2FtZSByb3V0ZTsgPFJvdXRlIHJlbmRlcj4gd2lsbCBiZSBpZ25vcmVkXCIpIDogdm9pZCAwO1xuICB9O1xuXG4gIFJvdXRlLnByb3RvdHlwZS5jb21wb25lbnREaWRVcGRhdGUgPSBmdW5jdGlvbiAocHJldlByb3BzKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyghKHRoaXMucHJvcHMubG9jYXRpb24gJiYgIXByZXZQcm9wcy5sb2NhdGlvbiksICc8Um91dGU+IGVsZW1lbnRzIHNob3VsZCBub3QgY2hhbmdlIGZyb20gdW5jb250cm9sbGVkIHRvIGNvbnRyb2xsZWQgKG9yIHZpY2UgdmVyc2EpLiBZb3UgaW5pdGlhbGx5IHVzZWQgbm8gXCJsb2NhdGlvblwiIHByb3AgYW5kIHRoZW4gcHJvdmlkZWQgb25lIG9uIGEgc3Vic2VxdWVudCByZW5kZXIuJykgOiB2b2lkIDA7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyghKCF0aGlzLnByb3BzLmxvY2F0aW9uICYmIHByZXZQcm9wcy5sb2NhdGlvbiksICc8Um91dGU+IGVsZW1lbnRzIHNob3VsZCBub3QgY2hhbmdlIGZyb20gY29udHJvbGxlZCB0byB1bmNvbnRyb2xsZWQgKG9yIHZpY2UgdmVyc2EpLiBZb3UgcHJvdmlkZWQgYSBcImxvY2F0aW9uXCIgcHJvcCBpbml0aWFsbHkgYnV0IG9taXR0ZWQgaXQgb24gYSBzdWJzZXF1ZW50IHJlbmRlci4nKSA6IHZvaWQgMDtcbiAgfTtcbn1cblxuZnVuY3Rpb24gYWRkTGVhZGluZ1NsYXNoKHBhdGgpIHtcbiAgcmV0dXJuIHBhdGguY2hhckF0KDApID09PSBcIi9cIiA/IHBhdGggOiBcIi9cIiArIHBhdGg7XG59XG5cbmZ1bmN0aW9uIGFkZEJhc2VuYW1lKGJhc2VuYW1lLCBsb2NhdGlvbikge1xuICBpZiAoIWJhc2VuYW1lKSByZXR1cm4gbG9jYXRpb247XG4gIHJldHVybiBfZXh0ZW5kcyh7fSwgbG9jYXRpb24sIHtcbiAgICBwYXRobmFtZTogYWRkTGVhZGluZ1NsYXNoKGJhc2VuYW1lKSArIGxvY2F0aW9uLnBhdGhuYW1lXG4gIH0pO1xufVxuXG5mdW5jdGlvbiBzdHJpcEJhc2VuYW1lKGJhc2VuYW1lLCBsb2NhdGlvbikge1xuICBpZiAoIWJhc2VuYW1lKSByZXR1cm4gbG9jYXRpb247XG4gIHZhciBiYXNlID0gYWRkTGVhZGluZ1NsYXNoKGJhc2VuYW1lKTtcbiAgaWYgKGxvY2F0aW9uLnBhdGhuYW1lLmluZGV4T2YoYmFzZSkgIT09IDApIHJldHVybiBsb2NhdGlvbjtcbiAgcmV0dXJuIF9leHRlbmRzKHt9LCBsb2NhdGlvbiwge1xuICAgIHBhdGhuYW1lOiBsb2NhdGlvbi5wYXRobmFtZS5zdWJzdHIoYmFzZS5sZW5ndGgpXG4gIH0pO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVVUkwobG9jYXRpb24pIHtcbiAgcmV0dXJuIHR5cGVvZiBsb2NhdGlvbiA9PT0gXCJzdHJpbmdcIiA/IGxvY2F0aW9uIDogY3JlYXRlUGF0aChsb2NhdGlvbik7XG59XG5cbmZ1bmN0aW9uIHN0YXRpY0hhbmRsZXIobWV0aG9kTmFtZSkge1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsIFwiWW91IGNhbm5vdCAlcyB3aXRoIDxTdGF0aWNSb3V0ZXI+XCIsIG1ldGhvZE5hbWUpIDogaW52YXJpYW50KGZhbHNlKSA7XG4gIH07XG59XG5cbmZ1bmN0aW9uIG5vb3AoKSB7fVxuLyoqXG4gKiBUaGUgcHVibGljIHRvcC1sZXZlbCBBUEkgZm9yIGEgXCJzdGF0aWNcIiA8Um91dGVyPiwgc28tY2FsbGVkIGJlY2F1c2UgaXRcbiAqIGNhbid0IGFjdHVhbGx5IGNoYW5nZSB0aGUgY3VycmVudCBsb2NhdGlvbi4gSW5zdGVhZCwgaXQganVzdCByZWNvcmRzXG4gKiBsb2NhdGlvbiBjaGFuZ2VzIGluIGEgY29udGV4dCBvYmplY3QuIFVzZWZ1bCBtYWlubHkgaW4gdGVzdGluZyBhbmRcbiAqIHNlcnZlci1yZW5kZXJpbmcgc2NlbmFyaW9zLlxuICovXG5cblxudmFyIFN0YXRpY1JvdXRlciA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHNMb29zZShTdGF0aWNSb3V0ZXIsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIFN0YXRpY1JvdXRlcigpIHtcbiAgICB2YXIgX3RoaXM7XG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgX3RoaXMgPSBfUmVhY3QkQ29tcG9uZW50LmNhbGwuYXBwbHkoX1JlYWN0JENvbXBvbmVudCwgW3RoaXNdLmNvbmNhdChhcmdzKSkgfHwgdGhpcztcblxuICAgIF90aGlzLmhhbmRsZVB1c2ggPSBmdW5jdGlvbiAobG9jYXRpb24pIHtcbiAgICAgIHJldHVybiBfdGhpcy5uYXZpZ2F0ZVRvKGxvY2F0aW9uLCBcIlBVU0hcIik7XG4gICAgfTtcblxuICAgIF90aGlzLmhhbmRsZVJlcGxhY2UgPSBmdW5jdGlvbiAobG9jYXRpb24pIHtcbiAgICAgIHJldHVybiBfdGhpcy5uYXZpZ2F0ZVRvKGxvY2F0aW9uLCBcIlJFUExBQ0VcIik7XG4gICAgfTtcblxuICAgIF90aGlzLmhhbmRsZUxpc3RlbiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBub29wO1xuICAgIH07XG5cbiAgICBfdGhpcy5oYW5kbGVCbG9jayA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBub29wO1xuICAgIH07XG5cbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gU3RhdGljUm91dGVyLnByb3RvdHlwZTtcblxuICBfcHJvdG8ubmF2aWdhdGVUbyA9IGZ1bmN0aW9uIG5hdmlnYXRlVG8obG9jYXRpb24sIGFjdGlvbikge1xuICAgIHZhciBfdGhpcyRwcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgIF90aGlzJHByb3BzJGJhc2VuYW1lID0gX3RoaXMkcHJvcHMuYmFzZW5hbWUsXG4gICAgICAgIGJhc2VuYW1lID0gX3RoaXMkcHJvcHMkYmFzZW5hbWUgPT09IHZvaWQgMCA/IFwiXCIgOiBfdGhpcyRwcm9wcyRiYXNlbmFtZSxcbiAgICAgICAgX3RoaXMkcHJvcHMkY29udGV4dCA9IF90aGlzJHByb3BzLmNvbnRleHQsXG4gICAgICAgIGNvbnRleHQgPSBfdGhpcyRwcm9wcyRjb250ZXh0ID09PSB2b2lkIDAgPyB7fSA6IF90aGlzJHByb3BzJGNvbnRleHQ7XG4gICAgY29udGV4dC5hY3Rpb24gPSBhY3Rpb247XG4gICAgY29udGV4dC5sb2NhdGlvbiA9IGFkZEJhc2VuYW1lKGJhc2VuYW1lLCBjcmVhdGVMb2NhdGlvbihsb2NhdGlvbikpO1xuICAgIGNvbnRleHQudXJsID0gY3JlYXRlVVJMKGNvbnRleHQubG9jYXRpb24pO1xuICB9O1xuXG4gIF9wcm90by5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIF90aGlzJHByb3BzMiA9IHRoaXMucHJvcHMsXG4gICAgICAgIF90aGlzJHByb3BzMiRiYXNlbmFtZSA9IF90aGlzJHByb3BzMi5iYXNlbmFtZSxcbiAgICAgICAgYmFzZW5hbWUgPSBfdGhpcyRwcm9wczIkYmFzZW5hbWUgPT09IHZvaWQgMCA/IFwiXCIgOiBfdGhpcyRwcm9wczIkYmFzZW5hbWUsXG4gICAgICAgIF90aGlzJHByb3BzMiRjb250ZXh0ID0gX3RoaXMkcHJvcHMyLmNvbnRleHQsXG4gICAgICAgIGNvbnRleHQgPSBfdGhpcyRwcm9wczIkY29udGV4dCA9PT0gdm9pZCAwID8ge30gOiBfdGhpcyRwcm9wczIkY29udGV4dCxcbiAgICAgICAgX3RoaXMkcHJvcHMyJGxvY2F0aW9uID0gX3RoaXMkcHJvcHMyLmxvY2F0aW9uLFxuICAgICAgICBsb2NhdGlvbiA9IF90aGlzJHByb3BzMiRsb2NhdGlvbiA9PT0gdm9pZCAwID8gXCIvXCIgOiBfdGhpcyRwcm9wczIkbG9jYXRpb24sXG4gICAgICAgIHJlc3QgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShfdGhpcyRwcm9wczIsIFtcImJhc2VuYW1lXCIsIFwiY29udGV4dFwiLCBcImxvY2F0aW9uXCJdKTtcblxuICAgIHZhciBoaXN0b3J5ID0ge1xuICAgICAgY3JlYXRlSHJlZjogZnVuY3Rpb24gY3JlYXRlSHJlZihwYXRoKSB7XG4gICAgICAgIHJldHVybiBhZGRMZWFkaW5nU2xhc2goYmFzZW5hbWUgKyBjcmVhdGVVUkwocGF0aCkpO1xuICAgICAgfSxcbiAgICAgIGFjdGlvbjogXCJQT1BcIixcbiAgICAgIGxvY2F0aW9uOiBzdHJpcEJhc2VuYW1lKGJhc2VuYW1lLCBjcmVhdGVMb2NhdGlvbihsb2NhdGlvbikpLFxuICAgICAgcHVzaDogdGhpcy5oYW5kbGVQdXNoLFxuICAgICAgcmVwbGFjZTogdGhpcy5oYW5kbGVSZXBsYWNlLFxuICAgICAgZ286IHN0YXRpY0hhbmRsZXIoXCJnb1wiKSxcbiAgICAgIGdvQmFjazogc3RhdGljSGFuZGxlcihcImdvQmFja1wiKSxcbiAgICAgIGdvRm9yd2FyZDogc3RhdGljSGFuZGxlcihcImdvRm9yd2FyZFwiKSxcbiAgICAgIGxpc3RlbjogdGhpcy5oYW5kbGVMaXN0ZW4sXG4gICAgICBibG9jazogdGhpcy5oYW5kbGVCbG9ja1xuICAgIH07XG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoUm91dGVyLCBfZXh0ZW5kcyh7fSwgcmVzdCwge1xuICAgICAgaGlzdG9yeTogaGlzdG9yeSxcbiAgICAgIHN0YXRpY0NvbnRleHQ6IGNvbnRleHRcbiAgICB9KSk7XG4gIH07XG5cbiAgcmV0dXJuIFN0YXRpY1JvdXRlcjtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICBTdGF0aWNSb3V0ZXIucHJvcFR5cGVzID0ge1xuICAgIGJhc2VuYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIGNvbnRleHQ6IFByb3BUeXBlcy5vYmplY3QsXG4gICAgbG9jYXRpb246IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5zdHJpbmcsIFByb3BUeXBlcy5vYmplY3RdKVxuICB9O1xuXG4gIFN0YXRpY1JvdXRlci5wcm90b3R5cGUuY29tcG9uZW50RGlkTW91bnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyghdGhpcy5wcm9wcy5oaXN0b3J5LCBcIjxTdGF0aWNSb3V0ZXI+IGlnbm9yZXMgdGhlIGhpc3RvcnkgcHJvcC4gVG8gdXNlIGEgY3VzdG9tIGhpc3RvcnksIFwiICsgXCJ1c2UgYGltcG9ydCB7IFJvdXRlciB9YCBpbnN0ZWFkIG9mIGBpbXBvcnQgeyBTdGF0aWNSb3V0ZXIgYXMgUm91dGVyIH1gLlwiKSA6IHZvaWQgMDtcbiAgfTtcbn1cblxuLyoqXG4gKiBUaGUgcHVibGljIEFQSSBmb3IgcmVuZGVyaW5nIHRoZSBmaXJzdCA8Um91dGU+IHRoYXQgbWF0Y2hlcy5cbiAqL1xuXG52YXIgU3dpdGNoID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0c0xvb3NlKFN3aXRjaCwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gU3dpdGNoKCkge1xuICAgIHJldHVybiBfUmVhY3QkQ29tcG9uZW50LmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBTd2l0Y2gucHJvdG90eXBlO1xuXG4gIF9wcm90by5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KGNvbnRleHQuQ29uc3VtZXIsIG51bGwsIGZ1bmN0aW9uIChjb250ZXh0KSB7XG4gICAgICAhY29udGV4dCA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgXCJZb3Ugc2hvdWxkIG5vdCB1c2UgPFN3aXRjaD4gb3V0c2lkZSBhIDxSb3V0ZXI+XCIpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICAgIHZhciBsb2NhdGlvbiA9IF90aGlzLnByb3BzLmxvY2F0aW9uIHx8IGNvbnRleHQubG9jYXRpb247XG4gICAgICB2YXIgZWxlbWVudCwgbWF0Y2g7IC8vIFdlIHVzZSBSZWFjdC5DaGlsZHJlbi5mb3JFYWNoIGluc3RlYWQgb2YgUmVhY3QuQ2hpbGRyZW4udG9BcnJheSgpLmZpbmQoKVxuICAgICAgLy8gaGVyZSBiZWNhdXNlIHRvQXJyYXkgYWRkcyBrZXlzIHRvIGFsbCBjaGlsZCBlbGVtZW50cyBhbmQgd2UgZG8gbm90IHdhbnRcbiAgICAgIC8vIHRvIHRyaWdnZXIgYW4gdW5tb3VudC9yZW1vdW50IGZvciB0d28gPFJvdXRlPnMgdGhhdCByZW5kZXIgdGhlIHNhbWVcbiAgICAgIC8vIGNvbXBvbmVudCBhdCBkaWZmZXJlbnQgVVJMcy5cblxuICAgICAgUmVhY3QuQ2hpbGRyZW4uZm9yRWFjaChfdGhpcy5wcm9wcy5jaGlsZHJlbiwgZnVuY3Rpb24gKGNoaWxkKSB7XG4gICAgICAgIGlmIChtYXRjaCA9PSBudWxsICYmIFJlYWN0LmlzVmFsaWRFbGVtZW50KGNoaWxkKSkge1xuICAgICAgICAgIGVsZW1lbnQgPSBjaGlsZDtcbiAgICAgICAgICB2YXIgcGF0aCA9IGNoaWxkLnByb3BzLnBhdGggfHwgY2hpbGQucHJvcHMuZnJvbTtcbiAgICAgICAgICBtYXRjaCA9IHBhdGggPyBtYXRjaFBhdGgobG9jYXRpb24ucGF0aG5hbWUsIF9leHRlbmRzKHt9LCBjaGlsZC5wcm9wcywge1xuICAgICAgICAgICAgcGF0aDogcGF0aFxuICAgICAgICAgIH0pKSA6IGNvbnRleHQubWF0Y2g7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIG1hdGNoID8gUmVhY3QuY2xvbmVFbGVtZW50KGVsZW1lbnQsIHtcbiAgICAgICAgbG9jYXRpb246IGxvY2F0aW9uLFxuICAgICAgICBjb21wdXRlZE1hdGNoOiBtYXRjaFxuICAgICAgfSkgOiBudWxsO1xuICAgIH0pO1xuICB9O1xuXG4gIHJldHVybiBTd2l0Y2g7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgU3dpdGNoLnByb3BUeXBlcyA9IHtcbiAgICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG4gICAgbG9jYXRpb246IFByb3BUeXBlcy5vYmplY3RcbiAgfTtcblxuICBTd2l0Y2gucHJvdG90eXBlLmNvbXBvbmVudERpZFVwZGF0ZSA9IGZ1bmN0aW9uIChwcmV2UHJvcHMpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKCEodGhpcy5wcm9wcy5sb2NhdGlvbiAmJiAhcHJldlByb3BzLmxvY2F0aW9uKSwgJzxTd2l0Y2g+IGVsZW1lbnRzIHNob3VsZCBub3QgY2hhbmdlIGZyb20gdW5jb250cm9sbGVkIHRvIGNvbnRyb2xsZWQgKG9yIHZpY2UgdmVyc2EpLiBZb3UgaW5pdGlhbGx5IHVzZWQgbm8gXCJsb2NhdGlvblwiIHByb3AgYW5kIHRoZW4gcHJvdmlkZWQgb25lIG9uIGEgc3Vic2VxdWVudCByZW5kZXIuJykgOiB2b2lkIDA7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyghKCF0aGlzLnByb3BzLmxvY2F0aW9uICYmIHByZXZQcm9wcy5sb2NhdGlvbiksICc8U3dpdGNoPiBlbGVtZW50cyBzaG91bGQgbm90IGNoYW5nZSBmcm9tIGNvbnRyb2xsZWQgdG8gdW5jb250cm9sbGVkIChvciB2aWNlIHZlcnNhKS4gWW91IHByb3ZpZGVkIGEgXCJsb2NhdGlvblwiIHByb3AgaW5pdGlhbGx5IGJ1dCBvbWl0dGVkIGl0IG9uIGEgc3Vic2VxdWVudCByZW5kZXIuJykgOiB2b2lkIDA7XG4gIH07XG59XG5cbi8qKlxuICogQSBwdWJsaWMgaGlnaGVyLW9yZGVyIGNvbXBvbmVudCB0byBhY2Nlc3MgdGhlIGltcGVyYXRpdmUgQVBJXG4gKi9cblxuZnVuY3Rpb24gd2l0aFJvdXRlcihDb21wb25lbnQpIHtcbiAgdmFyIGRpc3BsYXlOYW1lID0gXCJ3aXRoUm91dGVyKFwiICsgKENvbXBvbmVudC5kaXNwbGF5TmFtZSB8fCBDb21wb25lbnQubmFtZSkgKyBcIilcIjtcblxuICB2YXIgQyA9IGZ1bmN0aW9uIEMocHJvcHMpIHtcbiAgICB2YXIgd3JhcHBlZENvbXBvbmVudFJlZiA9IHByb3BzLndyYXBwZWRDb21wb25lbnRSZWYsXG4gICAgICAgIHJlbWFpbmluZ1Byb3BzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UocHJvcHMsIFtcIndyYXBwZWRDb21wb25lbnRSZWZcIl0pO1xuXG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoY29udGV4dC5Db25zdW1lciwgbnVsbCwgZnVuY3Rpb24gKGNvbnRleHQpIHtcbiAgICAgICFjb250ZXh0ID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCBcIllvdSBzaG91bGQgbm90IHVzZSA8XCIgKyBkaXNwbGF5TmFtZSArIFwiIC8+IG91dHNpZGUgYSA8Um91dGVyPlwiKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChDb21wb25lbnQsIF9leHRlbmRzKHt9LCByZW1haW5pbmdQcm9wcywgY29udGV4dCwge1xuICAgICAgICByZWY6IHdyYXBwZWRDb21wb25lbnRSZWZcbiAgICAgIH0pKTtcbiAgICB9KTtcbiAgfTtcblxuICBDLmRpc3BsYXlOYW1lID0gZGlzcGxheU5hbWU7XG4gIEMuV3JhcHBlZENvbXBvbmVudCA9IENvbXBvbmVudDtcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgQy5wcm9wVHlwZXMgPSB7XG4gICAgICB3cmFwcGVkQ29tcG9uZW50UmVmOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuc3RyaW5nLCBQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm9iamVjdF0pXG4gICAgfTtcbiAgfVxuXG4gIHJldHVybiBob2lzdFN0YXRpY3MoQywgQ29tcG9uZW50KTtcbn1cblxudmFyIHVzZUNvbnRleHQgPSBSZWFjdC51c2VDb250ZXh0O1xuZnVuY3Rpb24gdXNlSGlzdG9yeSgpIHtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgICEodHlwZW9mIHVzZUNvbnRleHQgPT09IFwiZnVuY3Rpb25cIikgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsIFwiWW91IG11c3QgdXNlIFJlYWN0ID49IDE2LjggaW4gb3JkZXIgdG8gdXNlIHVzZUhpc3RvcnkoKVwiKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gIH1cblxuICByZXR1cm4gdXNlQ29udGV4dChoaXN0b3J5Q29udGV4dCk7XG59XG5mdW5jdGlvbiB1c2VMb2NhdGlvbigpIHtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgICEodHlwZW9mIHVzZUNvbnRleHQgPT09IFwiZnVuY3Rpb25cIikgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsIFwiWW91IG11c3QgdXNlIFJlYWN0ID49IDE2LjggaW4gb3JkZXIgdG8gdXNlIHVzZUxvY2F0aW9uKClcIikgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICB9XG5cbiAgcmV0dXJuIHVzZUNvbnRleHQoY29udGV4dCkubG9jYXRpb247XG59XG5mdW5jdGlvbiB1c2VQYXJhbXMoKSB7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICAhKHR5cGVvZiB1c2VDb250ZXh0ID09PSBcImZ1bmN0aW9uXCIpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCBcIllvdSBtdXN0IHVzZSBSZWFjdCA+PSAxNi44IGluIG9yZGVyIHRvIHVzZSB1c2VQYXJhbXMoKVwiKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gIH1cblxuICB2YXIgbWF0Y2ggPSB1c2VDb250ZXh0KGNvbnRleHQpLm1hdGNoO1xuICByZXR1cm4gbWF0Y2ggPyBtYXRjaC5wYXJhbXMgOiB7fTtcbn1cbmZ1bmN0aW9uIHVzZVJvdXRlTWF0Y2gocGF0aCkge1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgISh0eXBlb2YgdXNlQ29udGV4dCA9PT0gXCJmdW5jdGlvblwiKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgXCJZb3UgbXVzdCB1c2UgUmVhY3QgPj0gMTYuOCBpbiBvcmRlciB0byB1c2UgdXNlUm91dGVNYXRjaCgpXCIpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgfVxuXG4gIHZhciBsb2NhdGlvbiA9IHVzZUxvY2F0aW9uKCk7XG4gIHZhciBtYXRjaCA9IHVzZUNvbnRleHQoY29udGV4dCkubWF0Y2g7XG4gIHJldHVybiBwYXRoID8gbWF0Y2hQYXRoKGxvY2F0aW9uLnBhdGhuYW1lLCBwYXRoKSA6IG1hdGNoO1xufVxuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gIGlmICh0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgdmFyIGdsb2JhbCA9IHdpbmRvdztcbiAgICB2YXIga2V5ID0gXCJfX3JlYWN0X3JvdXRlcl9idWlsZF9fXCI7XG4gICAgdmFyIGJ1aWxkTmFtZXMgPSB7XG4gICAgICBjanM6IFwiQ29tbW9uSlNcIixcbiAgICAgIGVzbTogXCJFUyBtb2R1bGVzXCIsXG4gICAgICB1bWQ6IFwiVU1EXCJcbiAgICB9O1xuXG4gICAgaWYgKGdsb2JhbFtrZXldICYmIGdsb2JhbFtrZXldICE9PSBcImVzbVwiKSB7XG4gICAgICB2YXIgaW5pdGlhbEJ1aWxkTmFtZSA9IGJ1aWxkTmFtZXNbZ2xvYmFsW2tleV1dO1xuICAgICAgdmFyIHNlY29uZGFyeUJ1aWxkTmFtZSA9IGJ1aWxkTmFtZXNbXCJlc21cIl07IC8vIFRPRE86IEFkZCBsaW5rIHRvIGFydGljbGUgdGhhdCBleHBsYWlucyBpbiBkZXRhaWwgaG93IHRvIGF2b2lkXG4gICAgICAvLyBsb2FkaW5nIDIgZGlmZmVyZW50IGJ1aWxkcy5cblxuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiWW91IGFyZSBsb2FkaW5nIHRoZSBcIiArIHNlY29uZGFyeUJ1aWxkTmFtZSArIFwiIGJ1aWxkIG9mIFJlYWN0IFJvdXRlciBcIiArIChcIm9uIGEgcGFnZSB0aGF0IGlzIGFscmVhZHkgcnVubmluZyB0aGUgXCIgKyBpbml0aWFsQnVpbGROYW1lICsgXCIgXCIpICsgXCJidWlsZCwgc28gdGhpbmdzIHdvbid0IHdvcmsgcmlnaHQuXCIpO1xuICAgIH1cblxuICAgIGdsb2JhbFtrZXldID0gXCJlc21cIjtcbiAgfVxufVxuXG5leHBvcnQgeyBNZW1vcnlSb3V0ZXIsIFByb21wdCwgUmVkaXJlY3QsIFJvdXRlLCBSb3V0ZXIsIFN0YXRpY1JvdXRlciwgU3dpdGNoLCBoaXN0b3J5Q29udGV4dCBhcyBfX0hpc3RvcnlDb250ZXh0LCBjb250ZXh0IGFzIF9fUm91dGVyQ29udGV4dCwgZ2VuZXJhdGVQYXRoLCBtYXRjaFBhdGgsIHVzZUhpc3RvcnksIHVzZUxvY2F0aW9uLCB1c2VQYXJhbXMsIHVzZVJvdXRlTWF0Y2gsIHdpdGhSb3V0ZXIgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXJlYWN0LXJvdXRlci5qcy5tYXBcbiIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IHsgbWFrZVN0eWxlcyBhcyBtYWtlU3R5bGVzV2l0aG91dERlZmF1bHQgfSBmcm9tICdAbWF0ZXJpYWwtdWkvc3R5bGVzJztcbmltcG9ydCBkZWZhdWx0VGhlbWUgZnJvbSAnLi9kZWZhdWx0VGhlbWUnO1xuXG5mdW5jdGlvbiBtYWtlU3R5bGVzKHN0eWxlc09yQ3JlYXRvcikge1xuICB2YXIgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDoge307XG4gIHJldHVybiBtYWtlU3R5bGVzV2l0aG91dERlZmF1bHQoc3R5bGVzT3JDcmVhdG9yLCBfZXh0ZW5kcyh7XG4gICAgZGVmYXVsdFRoZW1lOiBkZWZhdWx0VGhlbWVcbiAgfSwgb3B0aW9ucykpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBtYWtlU3R5bGVzOyIsImltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzXCI7XG5pbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbi8vIEEgZ3JpZCBjb21wb25lbnQgdXNpbmcgdGhlIGZvbGxvd2luZyBsaWJzIGFzIGluc3BpcmF0aW9uLlxuLy9cbi8vIEZvciB0aGUgaW1wbGVtZW50YXRpb246XG4vLyAtIGh0dHBzOi8vZ2V0Ym9vdHN0cmFwLmNvbS9kb2NzLzQuMy9sYXlvdXQvZ3JpZC9cbi8vIC0gaHR0cHM6Ly9naXRodWIuY29tL2tyaXN0b2Zlcmpvc2VwaC9mbGV4Ym94Z3JpZC9ibG9iL21hc3Rlci9zcmMvY3NzL2ZsZXhib3hncmlkLmNzc1xuLy8gLSBodHRwczovL2dpdGh1Yi5jb20vcm95bGVlMDcwNC9yZWFjdC1mbGV4Ym94LWdyaWRcbi8vIC0gaHR0cHM6Ly9tYXRlcmlhbC5hbmd1bGFyanMub3JnL2xhdGVzdC9sYXlvdXQvaW50cm9kdWN0aW9uXG4vL1xuLy8gRm9sbG93IHRoaXMgZmxleGJveCBHdWlkZSB0byBiZXR0ZXIgdW5kZXJzdGFuZCB0aGUgdW5kZXJseWluZyBtb2RlbDpcbi8vIC0gaHR0cHM6Ly9jc3MtdHJpY2tzLmNvbS9zbmlwcGV0cy9jc3MvYS1ndWlkZS10by1mbGV4Ym94L1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBjbHN4IGZyb20gJ2Nsc3gnO1xuaW1wb3J0IHdpdGhTdHlsZXMgZnJvbSAnLi4vc3R5bGVzL3dpdGhTdHlsZXMnO1xuaW1wb3J0IHJlcXVpcmVQcm9wRmFjdG9yeSBmcm9tICcuLi91dGlscy9yZXF1aXJlUHJvcEZhY3RvcnknO1xudmFyIFNQQUNJTkdTID0gWzAsIDEsIDIsIDMsIDQsIDUsIDYsIDcsIDgsIDksIDEwXTtcbnZhciBHUklEX1NJWkVTID0gWydhdXRvJywgdHJ1ZSwgMSwgMiwgMywgNCwgNSwgNiwgNywgOCwgOSwgMTAsIDExLCAxMl07XG5cbmZ1bmN0aW9uIGdlbmVyYXRlR3JpZChnbG9iYWxTdHlsZXMsIHRoZW1lLCBicmVha3BvaW50KSB7XG4gIHZhciBzdHlsZXMgPSB7fTtcbiAgR1JJRF9TSVpFUy5mb3JFYWNoKGZ1bmN0aW9uIChzaXplKSB7XG4gICAgdmFyIGtleSA9IFwiZ3JpZC1cIi5jb25jYXQoYnJlYWtwb2ludCwgXCItXCIpLmNvbmNhdChzaXplKTtcblxuICAgIGlmIChzaXplID09PSB0cnVlKSB7XG4gICAgICAvLyBGb3IgdGhlIGF1dG8gbGF5b3V0aW5nXG4gICAgICBzdHlsZXNba2V5XSA9IHtcbiAgICAgICAgZmxleEJhc2lzOiAwLFxuICAgICAgICBmbGV4R3JvdzogMSxcbiAgICAgICAgbWF4V2lkdGg6ICcxMDAlJ1xuICAgICAgfTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoc2l6ZSA9PT0gJ2F1dG8nKSB7XG4gICAgICBzdHlsZXNba2V5XSA9IHtcbiAgICAgICAgZmxleEJhc2lzOiAnYXV0bycsXG4gICAgICAgIGZsZXhHcm93OiAwLFxuICAgICAgICBtYXhXaWR0aDogJ25vbmUnXG4gICAgICB9O1xuICAgICAgcmV0dXJuO1xuICAgIH0gLy8gS2VlcCA3IHNpZ25pZmljYW50IG51bWJlcnMuXG5cblxuICAgIHZhciB3aWR0aCA9IFwiXCIuY29uY2F0KE1hdGgucm91bmQoc2l6ZSAvIDEyICogMTBlNykgLyAxMGU1LCBcIiVcIik7IC8vIENsb3NlIHRvIHRoZSBib290c3RyYXAgaW1wbGVtZW50YXRpb246XG4gICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL3R3YnMvYm9vdHN0cmFwL2Jsb2IvOGZjY2FhMjQzOWU5N2VjNzJhNGI3ZGM0MmNjYzFmNjQ5NzkwYWRiMC9zY3NzL21peGlucy9fZ3JpZC5zY3NzI0w0MVxuXG4gICAgc3R5bGVzW2tleV0gPSB7XG4gICAgICBmbGV4QmFzaXM6IHdpZHRoLFxuICAgICAgZmxleEdyb3c6IDAsXG4gICAgICBtYXhXaWR0aDogd2lkdGhcbiAgICB9O1xuICB9KTsgLy8gTm8gbmVlZCBmb3IgYSBtZWRpYSBxdWVyeSBmb3IgdGhlIGZpcnN0IHNpemUuXG5cbiAgaWYgKGJyZWFrcG9pbnQgPT09ICd4cycpIHtcbiAgICBfZXh0ZW5kcyhnbG9iYWxTdHlsZXMsIHN0eWxlcyk7XG4gIH0gZWxzZSB7XG4gICAgZ2xvYmFsU3R5bGVzW3RoZW1lLmJyZWFrcG9pbnRzLnVwKGJyZWFrcG9pbnQpXSA9IHN0eWxlcztcbiAgfVxufVxuXG5mdW5jdGlvbiBnZXRPZmZzZXQodmFsKSB7XG4gIHZhciBkaXYgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IDE7XG4gIHZhciBwYXJzZSA9IHBhcnNlRmxvYXQodmFsKTtcbiAgcmV0dXJuIFwiXCIuY29uY2F0KHBhcnNlIC8gZGl2KS5jb25jYXQoU3RyaW5nKHZhbCkucmVwbGFjZShTdHJpbmcocGFyc2UpLCAnJykgfHwgJ3B4Jyk7XG59XG5cbmZ1bmN0aW9uIGdlbmVyYXRlR3V0dGVyKHRoZW1lLCBicmVha3BvaW50KSB7XG4gIHZhciBzdHlsZXMgPSB7fTtcbiAgU1BBQ0lOR1MuZm9yRWFjaChmdW5jdGlvbiAoc3BhY2luZykge1xuICAgIHZhciB0aGVtZVNwYWNpbmcgPSB0aGVtZS5zcGFjaW5nKHNwYWNpbmcpO1xuXG4gICAgaWYgKHRoZW1lU3BhY2luZyA9PT0gMCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHN0eWxlc1tcInNwYWNpbmctXCIuY29uY2F0KGJyZWFrcG9pbnQsIFwiLVwiKS5jb25jYXQoc3BhY2luZyldID0ge1xuICAgICAgbWFyZ2luOiBcIi1cIi5jb25jYXQoZ2V0T2Zmc2V0KHRoZW1lU3BhY2luZywgMikpLFxuICAgICAgd2lkdGg6IFwiY2FsYygxMDAlICsgXCIuY29uY2F0KGdldE9mZnNldCh0aGVtZVNwYWNpbmcpLCBcIilcIiksXG4gICAgICAnJiA+ICRpdGVtJzoge1xuICAgICAgICBwYWRkaW5nOiBnZXRPZmZzZXQodGhlbWVTcGFjaW5nLCAyKVxuICAgICAgfVxuICAgIH07XG4gIH0pO1xuICByZXR1cm4gc3R5bGVzO1xufSAvLyBEZWZhdWx0IENTUyB2YWx1ZXNcbi8vIGZsZXg6ICcwIDEgYXV0bycsXG4vLyBmbGV4RGlyZWN0aW9uOiAncm93Jyxcbi8vIGFsaWduSXRlbXM6ICdmbGV4LXN0YXJ0Jyxcbi8vIGZsZXhXcmFwOiAnbm93cmFwJyxcbi8vIGp1c3RpZnlDb250ZW50OiAnZmxleC1zdGFydCcsXG5cblxuZXhwb3J0IHZhciBzdHlsZXMgPSBmdW5jdGlvbiBzdHlsZXModGhlbWUpIHtcbiAgcmV0dXJuIF9leHRlbmRzKHtcbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50LiAqL1xuICAgIHJvb3Q6IHt9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgY29udGFpbmVyPXt0cnVlfWAuICovXG4gICAgY29udGFpbmVyOiB7XG4gICAgICBib3hTaXppbmc6ICdib3JkZXItYm94JyxcbiAgICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICAgIGZsZXhXcmFwOiAnd3JhcCcsXG4gICAgICB3aWR0aDogJzEwMCUnXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGl0ZW09e3RydWV9YC4gKi9cbiAgICBpdGVtOiB7XG4gICAgICBib3hTaXppbmc6ICdib3JkZXItYm94JyxcbiAgICAgIG1hcmdpbjogJzAnIC8vIEZvciBpbnN0YW5jZSwgaXQncyB1c2VmdWwgd2hlbiB1c2VkIHdpdGggYSBgZmlndXJlYCBlbGVtZW50LlxuXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYHplcm9NaW5XaWR0aD17dHJ1ZX1gLiAqL1xuICAgIHplcm9NaW5XaWR0aDoge1xuICAgICAgbWluV2lkdGg6IDBcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgZGlyZWN0aW9uPVwiY29sdW1uXCJgLiAqL1xuICAgICdkaXJlY3Rpb24teHMtY29sdW1uJzoge1xuICAgICAgZmxleERpcmVjdGlvbjogJ2NvbHVtbidcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgZGlyZWN0aW9uPVwiY29sdW1uLXJldmVyc2VcImAuICovXG4gICAgJ2RpcmVjdGlvbi14cy1jb2x1bW4tcmV2ZXJzZSc6IHtcbiAgICAgIGZsZXhEaXJlY3Rpb246ICdjb2x1bW4tcmV2ZXJzZSdcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgZGlyZWN0aW9uPVwicm93LXJldmVyc2VcImAuICovXG4gICAgJ2RpcmVjdGlvbi14cy1yb3ctcmV2ZXJzZSc6IHtcbiAgICAgIGZsZXhEaXJlY3Rpb246ICdyb3ctcmV2ZXJzZSdcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgd3JhcD1cIm5vd3JhcFwiYC4gKi9cbiAgICAnd3JhcC14cy1ub3dyYXAnOiB7XG4gICAgICBmbGV4V3JhcDogJ25vd3JhcCdcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgd3JhcD1cInJldmVyc2VcImAuICovXG4gICAgJ3dyYXAteHMtd3JhcC1yZXZlcnNlJzoge1xuICAgICAgZmxleFdyYXA6ICd3cmFwLXJldmVyc2UnXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGFsaWduSXRlbXM9XCJjZW50ZXJcImAuICovXG4gICAgJ2FsaWduLWl0ZW1zLXhzLWNlbnRlcic6IHtcbiAgICAgIGFsaWduSXRlbXM6ICdjZW50ZXInXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGFsaWduSXRlbXM9XCJmbGV4LXN0YXJ0XCJgLiAqL1xuICAgICdhbGlnbi1pdGVtcy14cy1mbGV4LXN0YXJ0Jzoge1xuICAgICAgYWxpZ25JdGVtczogJ2ZsZXgtc3RhcnQnXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGFsaWduSXRlbXM9XCJmbGV4LWVuZFwiYC4gKi9cbiAgICAnYWxpZ24taXRlbXMteHMtZmxleC1lbmQnOiB7XG4gICAgICBhbGlnbkl0ZW1zOiAnZmxleC1lbmQnXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGFsaWduSXRlbXM9XCJiYXNlbGluZVwiYC4gKi9cbiAgICAnYWxpZ24taXRlbXMteHMtYmFzZWxpbmUnOiB7XG4gICAgICBhbGlnbkl0ZW1zOiAnYmFzZWxpbmUnXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGFsaWduQ29udGVudD1cImNlbnRlclwiYC4gKi9cbiAgICAnYWxpZ24tY29udGVudC14cy1jZW50ZXInOiB7XG4gICAgICBhbGlnbkNvbnRlbnQ6ICdjZW50ZXInXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGFsaWduQ29udGVudD1cImZsZXgtc3RhcnRcImAuICovXG4gICAgJ2FsaWduLWNvbnRlbnQteHMtZmxleC1zdGFydCc6IHtcbiAgICAgIGFsaWduQ29udGVudDogJ2ZsZXgtc3RhcnQnXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGFsaWduQ29udGVudD1cImZsZXgtZW5kXCJgLiAqL1xuICAgICdhbGlnbi1jb250ZW50LXhzLWZsZXgtZW5kJzoge1xuICAgICAgYWxpZ25Db250ZW50OiAnZmxleC1lbmQnXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGFsaWduQ29udGVudD1cInNwYWNlLWJldHdlZW5cImAuICovXG4gICAgJ2FsaWduLWNvbnRlbnQteHMtc3BhY2UtYmV0d2Vlbic6IHtcbiAgICAgIGFsaWduQ29udGVudDogJ3NwYWNlLWJldHdlZW4nXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGFsaWduQ29udGVudD1cInNwYWNlLWFyb3VuZFwiYC4gKi9cbiAgICAnYWxpZ24tY29udGVudC14cy1zcGFjZS1hcm91bmQnOiB7XG4gICAgICBhbGlnbkNvbnRlbnQ6ICdzcGFjZS1hcm91bmQnXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGp1c3RpZnk9XCJjZW50ZXJcImAuICovXG4gICAgJ2p1c3RpZnkteHMtY2VudGVyJzoge1xuICAgICAganVzdGlmeUNvbnRlbnQ6ICdjZW50ZXInXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGp1c3RpZnk9XCJmbGV4LWVuZFwiYC4gKi9cbiAgICAnanVzdGlmeS14cy1mbGV4LWVuZCc6IHtcbiAgICAgIGp1c3RpZnlDb250ZW50OiAnZmxleC1lbmQnXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGp1c3RpZnk9XCJzcGFjZS1iZXR3ZWVuXCJgLiAqL1xuICAgICdqdXN0aWZ5LXhzLXNwYWNlLWJldHdlZW4nOiB7XG4gICAgICBqdXN0aWZ5Q29udGVudDogJ3NwYWNlLWJldHdlZW4nXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGp1c3RpZnk9XCJzcGFjZS1hcm91bmRcImAuICovXG4gICAgJ2p1c3RpZnkteHMtc3BhY2UtYXJvdW5kJzoge1xuICAgICAganVzdGlmeUNvbnRlbnQ6ICdzcGFjZS1hcm91bmQnXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGp1c3RpZnk9XCJzcGFjZS1ldmVubHlcImAuICovXG4gICAgJ2p1c3RpZnkteHMtc3BhY2UtZXZlbmx5Jzoge1xuICAgICAganVzdGlmeUNvbnRlbnQ6ICdzcGFjZS1ldmVubHknXG4gICAgfVxuICB9LCBnZW5lcmF0ZUd1dHRlcih0aGVtZSwgJ3hzJyksIHRoZW1lLmJyZWFrcG9pbnRzLmtleXMucmVkdWNlKGZ1bmN0aW9uIChhY2N1bXVsYXRvciwga2V5KSB7XG4gICAgLy8gVXNlIHNpZGUgZWZmZWN0IG92ZXIgaW1tdXRhYmlsaXR5IGZvciBiZXR0ZXIgcGVyZm9ybWFuY2UuXG4gICAgZ2VuZXJhdGVHcmlkKGFjY3VtdWxhdG9yLCB0aGVtZSwga2V5KTtcbiAgICByZXR1cm4gYWNjdW11bGF0b3I7XG4gIH0sIHt9KSk7XG59O1xudmFyIEdyaWQgPSAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBHcmlkKHByb3BzLCByZWYpIHtcbiAgdmFyIF9wcm9wcyRhbGlnbkNvbnRlbnQgPSBwcm9wcy5hbGlnbkNvbnRlbnQsXG4gICAgICBhbGlnbkNvbnRlbnQgPSBfcHJvcHMkYWxpZ25Db250ZW50ID09PSB2b2lkIDAgPyAnc3RyZXRjaCcgOiBfcHJvcHMkYWxpZ25Db250ZW50LFxuICAgICAgX3Byb3BzJGFsaWduSXRlbXMgPSBwcm9wcy5hbGlnbkl0ZW1zLFxuICAgICAgYWxpZ25JdGVtcyA9IF9wcm9wcyRhbGlnbkl0ZW1zID09PSB2b2lkIDAgPyAnc3RyZXRjaCcgOiBfcHJvcHMkYWxpZ25JdGVtcyxcbiAgICAgIGNsYXNzZXMgPSBwcm9wcy5jbGFzc2VzLFxuICAgICAgY2xhc3NOYW1lUHJvcCA9IHByb3BzLmNsYXNzTmFtZSxcbiAgICAgIF9wcm9wcyRjb21wb25lbnQgPSBwcm9wcy5jb21wb25lbnQsXG4gICAgICBDb21wb25lbnQgPSBfcHJvcHMkY29tcG9uZW50ID09PSB2b2lkIDAgPyAnZGl2JyA6IF9wcm9wcyRjb21wb25lbnQsXG4gICAgICBfcHJvcHMkY29udGFpbmVyID0gcHJvcHMuY29udGFpbmVyLFxuICAgICAgY29udGFpbmVyID0gX3Byb3BzJGNvbnRhaW5lciA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcHJvcHMkY29udGFpbmVyLFxuICAgICAgX3Byb3BzJGRpcmVjdGlvbiA9IHByb3BzLmRpcmVjdGlvbixcbiAgICAgIGRpcmVjdGlvbiA9IF9wcm9wcyRkaXJlY3Rpb24gPT09IHZvaWQgMCA/ICdyb3cnIDogX3Byb3BzJGRpcmVjdGlvbixcbiAgICAgIF9wcm9wcyRpdGVtID0gcHJvcHMuaXRlbSxcbiAgICAgIGl0ZW0gPSBfcHJvcHMkaXRlbSA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcHJvcHMkaXRlbSxcbiAgICAgIF9wcm9wcyRqdXN0aWZ5ID0gcHJvcHMuanVzdGlmeSxcbiAgICAgIGp1c3RpZnkgPSBfcHJvcHMkanVzdGlmeSA9PT0gdm9pZCAwID8gJ2ZsZXgtc3RhcnQnIDogX3Byb3BzJGp1c3RpZnksXG4gICAgICBfcHJvcHMkbGcgPSBwcm9wcy5sZyxcbiAgICAgIGxnID0gX3Byb3BzJGxnID09PSB2b2lkIDAgPyBmYWxzZSA6IF9wcm9wcyRsZyxcbiAgICAgIF9wcm9wcyRtZCA9IHByb3BzLm1kLFxuICAgICAgbWQgPSBfcHJvcHMkbWQgPT09IHZvaWQgMCA/IGZhbHNlIDogX3Byb3BzJG1kLFxuICAgICAgX3Byb3BzJHNtID0gcHJvcHMuc20sXG4gICAgICBzbSA9IF9wcm9wcyRzbSA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcHJvcHMkc20sXG4gICAgICBfcHJvcHMkc3BhY2luZyA9IHByb3BzLnNwYWNpbmcsXG4gICAgICBzcGFjaW5nID0gX3Byb3BzJHNwYWNpbmcgPT09IHZvaWQgMCA/IDAgOiBfcHJvcHMkc3BhY2luZyxcbiAgICAgIF9wcm9wcyR3cmFwID0gcHJvcHMud3JhcCxcbiAgICAgIHdyYXAgPSBfcHJvcHMkd3JhcCA9PT0gdm9pZCAwID8gJ3dyYXAnIDogX3Byb3BzJHdyYXAsXG4gICAgICBfcHJvcHMkeGwgPSBwcm9wcy54bCxcbiAgICAgIHhsID0gX3Byb3BzJHhsID09PSB2b2lkIDAgPyBmYWxzZSA6IF9wcm9wcyR4bCxcbiAgICAgIF9wcm9wcyR4cyA9IHByb3BzLnhzLFxuICAgICAgeHMgPSBfcHJvcHMkeHMgPT09IHZvaWQgMCA/IGZhbHNlIDogX3Byb3BzJHhzLFxuICAgICAgX3Byb3BzJHplcm9NaW5XaWR0aCA9IHByb3BzLnplcm9NaW5XaWR0aCxcbiAgICAgIHplcm9NaW5XaWR0aCA9IF9wcm9wcyR6ZXJvTWluV2lkdGggPT09IHZvaWQgMCA/IGZhbHNlIDogX3Byb3BzJHplcm9NaW5XaWR0aCxcbiAgICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKHByb3BzLCBbXCJhbGlnbkNvbnRlbnRcIiwgXCJhbGlnbkl0ZW1zXCIsIFwiY2xhc3Nlc1wiLCBcImNsYXNzTmFtZVwiLCBcImNvbXBvbmVudFwiLCBcImNvbnRhaW5lclwiLCBcImRpcmVjdGlvblwiLCBcIml0ZW1cIiwgXCJqdXN0aWZ5XCIsIFwibGdcIiwgXCJtZFwiLCBcInNtXCIsIFwic3BhY2luZ1wiLCBcIndyYXBcIiwgXCJ4bFwiLCBcInhzXCIsIFwiemVyb01pbldpZHRoXCJdKTtcblxuICB2YXIgY2xhc3NOYW1lID0gY2xzeChjbGFzc2VzLnJvb3QsIGNsYXNzTmFtZVByb3AsIGNvbnRhaW5lciAmJiBbY2xhc3Nlcy5jb250YWluZXIsIHNwYWNpbmcgIT09IDAgJiYgY2xhc3Nlc1tcInNwYWNpbmcteHMtXCIuY29uY2F0KFN0cmluZyhzcGFjaW5nKSldXSwgaXRlbSAmJiBjbGFzc2VzLml0ZW0sIHplcm9NaW5XaWR0aCAmJiBjbGFzc2VzLnplcm9NaW5XaWR0aCwgZGlyZWN0aW9uICE9PSAncm93JyAmJiBjbGFzc2VzW1wiZGlyZWN0aW9uLXhzLVwiLmNvbmNhdChTdHJpbmcoZGlyZWN0aW9uKSldLCB3cmFwICE9PSAnd3JhcCcgJiYgY2xhc3Nlc1tcIndyYXAteHMtXCIuY29uY2F0KFN0cmluZyh3cmFwKSldLCBhbGlnbkl0ZW1zICE9PSAnc3RyZXRjaCcgJiYgY2xhc3Nlc1tcImFsaWduLWl0ZW1zLXhzLVwiLmNvbmNhdChTdHJpbmcoYWxpZ25JdGVtcykpXSwgYWxpZ25Db250ZW50ICE9PSAnc3RyZXRjaCcgJiYgY2xhc3Nlc1tcImFsaWduLWNvbnRlbnQteHMtXCIuY29uY2F0KFN0cmluZyhhbGlnbkNvbnRlbnQpKV0sIGp1c3RpZnkgIT09ICdmbGV4LXN0YXJ0JyAmJiBjbGFzc2VzW1wianVzdGlmeS14cy1cIi5jb25jYXQoU3RyaW5nKGp1c3RpZnkpKV0sIHhzICE9PSBmYWxzZSAmJiBjbGFzc2VzW1wiZ3JpZC14cy1cIi5jb25jYXQoU3RyaW5nKHhzKSldLCBzbSAhPT0gZmFsc2UgJiYgY2xhc3Nlc1tcImdyaWQtc20tXCIuY29uY2F0KFN0cmluZyhzbSkpXSwgbWQgIT09IGZhbHNlICYmIGNsYXNzZXNbXCJncmlkLW1kLVwiLmNvbmNhdChTdHJpbmcobWQpKV0sIGxnICE9PSBmYWxzZSAmJiBjbGFzc2VzW1wiZ3JpZC1sZy1cIi5jb25jYXQoU3RyaW5nKGxnKSldLCB4bCAhPT0gZmFsc2UgJiYgY2xhc3Nlc1tcImdyaWQteGwtXCIuY29uY2F0KFN0cmluZyh4bCkpXSk7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChDb21wb25lbnQsIF9leHRlbmRzKHtcbiAgICBjbGFzc05hbWU6IGNsYXNzTmFtZSxcbiAgICByZWY6IHJlZlxuICB9LCBvdGhlcikpO1xufSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBHcmlkLnByb3BUeXBlcyA9IHtcbiAgLyoqXG4gICAqIERlZmluZXMgdGhlIGBhbGlnbi1jb250ZW50YCBzdHlsZSBwcm9wZXJ0eS5cbiAgICogSXQncyBhcHBsaWVkIGZvciBhbGwgc2NyZWVuIHNpemVzLlxuICAgKi9cbiAgYWxpZ25Db250ZW50OiBQcm9wVHlwZXMub25lT2YoWydzdHJldGNoJywgJ2NlbnRlcicsICdmbGV4LXN0YXJ0JywgJ2ZsZXgtZW5kJywgJ3NwYWNlLWJldHdlZW4nLCAnc3BhY2UtYXJvdW5kJ10pLFxuXG4gIC8qKlxuICAgKiBEZWZpbmVzIHRoZSBgYWxpZ24taXRlbXNgIHN0eWxlIHByb3BlcnR5LlxuICAgKiBJdCdzIGFwcGxpZWQgZm9yIGFsbCBzY3JlZW4gc2l6ZXMuXG4gICAqL1xuICBhbGlnbkl0ZW1zOiBQcm9wVHlwZXMub25lT2YoWydmbGV4LXN0YXJ0JywgJ2NlbnRlcicsICdmbGV4LWVuZCcsICdzdHJldGNoJywgJ2Jhc2VsaW5lJ10pLFxuXG4gIC8qKlxuICAgKiBUaGUgY29udGVudCBvZiB0aGUgY29tcG9uZW50LlxuICAgKi9cbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuXG4gIC8qKlxuICAgKiBPdmVycmlkZSBvciBleHRlbmQgdGhlIHN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAqIFNlZSBbQ1NTIEFQSV0oI2NzcykgYmVsb3cgZm9yIG1vcmUgZGV0YWlscy5cbiAgICovXG4gIGNsYXNzZXM6IFByb3BUeXBlcy5vYmplY3QuaXNSZXF1aXJlZCxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBUaGUgY29tcG9uZW50IHVzZWQgZm9yIHRoZSByb290IG5vZGUuXG4gICAqIEVpdGhlciBhIHN0cmluZyB0byB1c2UgYSBIVE1MIGVsZW1lbnQgb3IgYSBjb21wb25lbnQuXG4gICAqL1xuICBjb21wb25lbnQ6IFByb3BUeXBlc1xuICAvKiBAdHlwZXNjcmlwdC10by1wcm9wdHlwZXMtaWdub3JlICovXG4gIC5lbGVtZW50VHlwZSxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgY29tcG9uZW50IHdpbGwgaGF2ZSB0aGUgZmxleCAqY29udGFpbmVyKiBiZWhhdmlvci5cbiAgICogWW91IHNob3VsZCBiZSB3cmFwcGluZyAqaXRlbXMqIHdpdGggYSAqY29udGFpbmVyKi5cbiAgICovXG4gIGNvbnRhaW5lcjogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIERlZmluZXMgdGhlIGBmbGV4LWRpcmVjdGlvbmAgc3R5bGUgcHJvcGVydHkuXG4gICAqIEl0IGlzIGFwcGxpZWQgZm9yIGFsbCBzY3JlZW4gc2l6ZXMuXG4gICAqL1xuICBkaXJlY3Rpb246IFByb3BUeXBlcy5vbmVPZihbJ3JvdycsICdyb3ctcmV2ZXJzZScsICdjb2x1bW4nLCAnY29sdW1uLXJldmVyc2UnXSksXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGNvbXBvbmVudCB3aWxsIGhhdmUgdGhlIGZsZXggKml0ZW0qIGJlaGF2aW9yLlxuICAgKiBZb3Ugc2hvdWxkIGJlIHdyYXBwaW5nICppdGVtcyogd2l0aCBhICpjb250YWluZXIqLlxuICAgKi9cbiAgaXRlbTogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIERlZmluZXMgdGhlIGBqdXN0aWZ5LWNvbnRlbnRgIHN0eWxlIHByb3BlcnR5LlxuICAgKiBJdCBpcyBhcHBsaWVkIGZvciBhbGwgc2NyZWVuIHNpemVzLlxuICAgKi9cbiAganVzdGlmeTogUHJvcFR5cGVzLm9uZU9mKFsnZmxleC1zdGFydCcsICdjZW50ZXInLCAnZmxleC1lbmQnLCAnc3BhY2UtYmV0d2VlbicsICdzcGFjZS1hcm91bmQnLCAnc3BhY2UtZXZlbmx5J10pLFxuXG4gIC8qKlxuICAgKiBEZWZpbmVzIHRoZSBudW1iZXIgb2YgZ3JpZHMgdGhlIGNvbXBvbmVudCBpcyBnb2luZyB0byB1c2UuXG4gICAqIEl0J3MgYXBwbGllZCBmb3IgdGhlIGBsZ2AgYnJlYWtwb2ludCBhbmQgd2lkZXIgc2NyZWVucyBpZiBub3Qgb3ZlcnJpZGRlbi5cbiAgICovXG4gIGxnOiBQcm9wVHlwZXMub25lT2YoW2ZhbHNlLCAnYXV0bycsIHRydWUsIDEsIDIsIDMsIDQsIDUsIDYsIDcsIDgsIDksIDEwLCAxMSwgMTJdKSxcblxuICAvKipcbiAgICogRGVmaW5lcyB0aGUgbnVtYmVyIG9mIGdyaWRzIHRoZSBjb21wb25lbnQgaXMgZ29pbmcgdG8gdXNlLlxuICAgKiBJdCdzIGFwcGxpZWQgZm9yIHRoZSBgbWRgIGJyZWFrcG9pbnQgYW5kIHdpZGVyIHNjcmVlbnMgaWYgbm90IG92ZXJyaWRkZW4uXG4gICAqL1xuICBtZDogUHJvcFR5cGVzLm9uZU9mKFtmYWxzZSwgJ2F1dG8nLCB0cnVlLCAxLCAyLCAzLCA0LCA1LCA2LCA3LCA4LCA5LCAxMCwgMTEsIDEyXSksXG5cbiAgLyoqXG4gICAqIERlZmluZXMgdGhlIG51bWJlciBvZiBncmlkcyB0aGUgY29tcG9uZW50IGlzIGdvaW5nIHRvIHVzZS5cbiAgICogSXQncyBhcHBsaWVkIGZvciB0aGUgYHNtYCBicmVha3BvaW50IGFuZCB3aWRlciBzY3JlZW5zIGlmIG5vdCBvdmVycmlkZGVuLlxuICAgKi9cbiAgc206IFByb3BUeXBlcy5vbmVPZihbZmFsc2UsICdhdXRvJywgdHJ1ZSwgMSwgMiwgMywgNCwgNSwgNiwgNywgOCwgOSwgMTAsIDExLCAxMl0pLFxuXG4gIC8qKlxuICAgKiBEZWZpbmVzIHRoZSBzcGFjZSBiZXR3ZWVuIHRoZSB0eXBlIGBpdGVtYCBjb21wb25lbnQuXG4gICAqIEl0IGNhbiBvbmx5IGJlIHVzZWQgb24gYSB0eXBlIGBjb250YWluZXJgIGNvbXBvbmVudC5cbiAgICovXG4gIHNwYWNpbmc6IFByb3BUeXBlcy5vbmVPZihTUEFDSU5HUyksXG5cbiAgLyoqXG4gICAqIERlZmluZXMgdGhlIGBmbGV4LXdyYXBgIHN0eWxlIHByb3BlcnR5LlxuICAgKiBJdCdzIGFwcGxpZWQgZm9yIGFsbCBzY3JlZW4gc2l6ZXMuXG4gICAqL1xuICB3cmFwOiBQcm9wVHlwZXMub25lT2YoWydub3dyYXAnLCAnd3JhcCcsICd3cmFwLXJldmVyc2UnXSksXG5cbiAgLyoqXG4gICAqIERlZmluZXMgdGhlIG51bWJlciBvZiBncmlkcyB0aGUgY29tcG9uZW50IGlzIGdvaW5nIHRvIHVzZS5cbiAgICogSXQncyBhcHBsaWVkIGZvciB0aGUgYHhsYCBicmVha3BvaW50IGFuZCB3aWRlciBzY3JlZW5zLlxuICAgKi9cbiAgeGw6IFByb3BUeXBlcy5vbmVPZihbZmFsc2UsICdhdXRvJywgdHJ1ZSwgMSwgMiwgMywgNCwgNSwgNiwgNywgOCwgOSwgMTAsIDExLCAxMl0pLFxuXG4gIC8qKlxuICAgKiBEZWZpbmVzIHRoZSBudW1iZXIgb2YgZ3JpZHMgdGhlIGNvbXBvbmVudCBpcyBnb2luZyB0byB1c2UuXG4gICAqIEl0J3MgYXBwbGllZCBmb3IgYWxsIHRoZSBzY3JlZW4gc2l6ZXMgd2l0aCB0aGUgbG93ZXN0IHByaW9yaXR5LlxuICAgKi9cbiAgeHM6IFByb3BUeXBlcy5vbmVPZihbZmFsc2UsICdhdXRvJywgdHJ1ZSwgMSwgMiwgMywgNCwgNSwgNiwgNywgOCwgOSwgMTAsIDExLCAxMl0pLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIGl0IHNldHMgYG1pbi13aWR0aDogMGAgb24gdGhlIGl0ZW0uXG4gICAqIFJlZmVyIHRvIHRoZSBsaW1pdGF0aW9ucyBzZWN0aW9uIG9mIHRoZSBkb2N1bWVudGF0aW9uIHRvIGJldHRlciB1bmRlcnN0YW5kIHRoZSB1c2UgY2FzZS5cbiAgICovXG4gIHplcm9NaW5XaWR0aDogUHJvcFR5cGVzLmJvb2xcbn0gOiB2b2lkIDA7XG52YXIgU3R5bGVkR3JpZCA9IHdpdGhTdHlsZXMoc3R5bGVzLCB7XG4gIG5hbWU6ICdNdWlHcmlkJ1xufSkoR3JpZCk7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIHZhciByZXF1aXJlUHJvcCA9IHJlcXVpcmVQcm9wRmFjdG9yeSgnR3JpZCcpO1xuICBTdHlsZWRHcmlkLnByb3BUeXBlcyA9IF9leHRlbmRzKHt9LCBTdHlsZWRHcmlkLnByb3BUeXBlcywge1xuICAgIGFsaWduQ29udGVudDogcmVxdWlyZVByb3AoJ2NvbnRhaW5lcicpLFxuICAgIGFsaWduSXRlbXM6IHJlcXVpcmVQcm9wKCdjb250YWluZXInKSxcbiAgICBkaXJlY3Rpb246IHJlcXVpcmVQcm9wKCdjb250YWluZXInKSxcbiAgICBqdXN0aWZ5OiByZXF1aXJlUHJvcCgnY29udGFpbmVyJyksXG4gICAgbGc6IHJlcXVpcmVQcm9wKCdpdGVtJyksXG4gICAgbWQ6IHJlcXVpcmVQcm9wKCdpdGVtJyksXG4gICAgc206IHJlcXVpcmVQcm9wKCdpdGVtJyksXG4gICAgc3BhY2luZzogcmVxdWlyZVByb3AoJ2NvbnRhaW5lcicpLFxuICAgIHdyYXA6IHJlcXVpcmVQcm9wKCdjb250YWluZXInKSxcbiAgICB4czogcmVxdWlyZVByb3AoJ2l0ZW0nKSxcbiAgICB6ZXJvTWluV2lkdGg6IHJlcXVpcmVQcm9wKCdpdGVtJylcbiAgfSk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IFN0eWxlZEdyaWQ7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc1wiO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBjbHN4IGZyb20gJ2Nsc3gnO1xuaW1wb3J0IHdpdGhTdHlsZXMgZnJvbSAnLi4vc3R5bGVzL3dpdGhTdHlsZXMnO1xuaW1wb3J0IGNhcGl0YWxpemUgZnJvbSAnLi4vdXRpbHMvY2FwaXRhbGl6ZSc7XG5leHBvcnQgdmFyIHN0eWxlcyA9IGZ1bmN0aW9uIHN0eWxlcyh0aGVtZSkge1xuICByZXR1cm4ge1xuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQuICovXG4gICAgcm9vdDoge1xuICAgICAgbWFyZ2luOiAwXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYHZhcmlhbnQ9XCJib2R5MlwiYC4gKi9cbiAgICBib2R5MjogdGhlbWUudHlwb2dyYXBoeS5ib2R5MixcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYHZhcmlhbnQ9XCJib2R5MVwiYC4gKi9cbiAgICBib2R5MTogdGhlbWUudHlwb2dyYXBoeS5ib2R5MSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYHZhcmlhbnQ9XCJjYXB0aW9uXCJgLiAqL1xuICAgIGNhcHRpb246IHRoZW1lLnR5cG9ncmFwaHkuY2FwdGlvbixcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYHZhcmlhbnQ9XCJidXR0b25cImAuICovXG4gICAgYnV0dG9uOiB0aGVtZS50eXBvZ3JhcGh5LmJ1dHRvbixcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYHZhcmlhbnQ9XCJoMVwiYC4gKi9cbiAgICBoMTogdGhlbWUudHlwb2dyYXBoeS5oMSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYHZhcmlhbnQ9XCJoMlwiYC4gKi9cbiAgICBoMjogdGhlbWUudHlwb2dyYXBoeS5oMixcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYHZhcmlhbnQ9XCJoM1wiYC4gKi9cbiAgICBoMzogdGhlbWUudHlwb2dyYXBoeS5oMyxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYHZhcmlhbnQ9XCJoNFwiYC4gKi9cbiAgICBoNDogdGhlbWUudHlwb2dyYXBoeS5oNCxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYHZhcmlhbnQ9XCJoNVwiYC4gKi9cbiAgICBoNTogdGhlbWUudHlwb2dyYXBoeS5oNSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYHZhcmlhbnQ9XCJoNlwiYC4gKi9cbiAgICBoNjogdGhlbWUudHlwb2dyYXBoeS5oNixcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYHZhcmlhbnQ9XCJzdWJ0aXRsZTFcImAuICovXG4gICAgc3VidGl0bGUxOiB0aGVtZS50eXBvZ3JhcGh5LnN1YnRpdGxlMSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYHZhcmlhbnQ9XCJzdWJ0aXRsZTJcImAuICovXG4gICAgc3VidGl0bGUyOiB0aGVtZS50eXBvZ3JhcGh5LnN1YnRpdGxlMixcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYHZhcmlhbnQ9XCJvdmVybGluZVwiYC4gKi9cbiAgICBvdmVybGluZTogdGhlbWUudHlwb2dyYXBoeS5vdmVybGluZSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYHZhcmlhbnQ9XCJzck9ubHlcImAuIE9ubHkgYWNjZXNzaWJsZSB0byBzY3JlZW4gcmVhZGVycy4gKi9cbiAgICBzck9ubHk6IHtcbiAgICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgICAgaGVpZ2h0OiAxLFxuICAgICAgd2lkdGg6IDEsXG4gICAgICBvdmVyZmxvdzogJ2hpZGRlbidcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgYWxpZ249XCJsZWZ0XCJgLiAqL1xuICAgIGFsaWduTGVmdDoge1xuICAgICAgdGV4dEFsaWduOiAnbGVmdCdcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgYWxpZ249XCJjZW50ZXJcImAuICovXG4gICAgYWxpZ25DZW50ZXI6IHtcbiAgICAgIHRleHRBbGlnbjogJ2NlbnRlcidcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgYWxpZ249XCJyaWdodFwiYC4gKi9cbiAgICBhbGlnblJpZ2h0OiB7XG4gICAgICB0ZXh0QWxpZ246ICdyaWdodCdcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgYWxpZ249XCJqdXN0aWZ5XCJgLiAqL1xuICAgIGFsaWduSnVzdGlmeToge1xuICAgICAgdGV4dEFsaWduOiAnanVzdGlmeSdcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgbm93cmFwPXt0cnVlfWAuICovXG4gICAgbm9XcmFwOiB7XG4gICAgICBvdmVyZmxvdzogJ2hpZGRlbicsXG4gICAgICB0ZXh0T3ZlcmZsb3c6ICdlbGxpcHNpcycsXG4gICAgICB3aGl0ZVNwYWNlOiAnbm93cmFwJ1xuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBndXR0ZXJCb3R0b209e3RydWV9YC4gKi9cbiAgICBndXR0ZXJCb3R0b206IHtcbiAgICAgIG1hcmdpbkJvdHRvbTogJzAuMzVlbSdcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgcGFyYWdyYXBoPXt0cnVlfWAuICovXG4gICAgcGFyYWdyYXBoOiB7XG4gICAgICBtYXJnaW5Cb3R0b206IDE2XG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGNvbG9yPVwiaW5oZXJpdFwiYC4gKi9cbiAgICBjb2xvckluaGVyaXQ6IHtcbiAgICAgIGNvbG9yOiAnaW5oZXJpdCdcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgY29sb3I9XCJwcmltYXJ5XCJgLiAqL1xuICAgIGNvbG9yUHJpbWFyeToge1xuICAgICAgY29sb3I6IHRoZW1lLnBhbGV0dGUucHJpbWFyeS5tYWluXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGNvbG9yPVwic2Vjb25kYXJ5XCJgLiAqL1xuICAgIGNvbG9yU2Vjb25kYXJ5OiB7XG4gICAgICBjb2xvcjogdGhlbWUucGFsZXR0ZS5zZWNvbmRhcnkubWFpblxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBjb2xvcj1cInRleHRQcmltYXJ5XCJgLiAqL1xuICAgIGNvbG9yVGV4dFByaW1hcnk6IHtcbiAgICAgIGNvbG9yOiB0aGVtZS5wYWxldHRlLnRleHQucHJpbWFyeVxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBjb2xvcj1cInRleHRTZWNvbmRhcnlcImAuICovXG4gICAgY29sb3JUZXh0U2Vjb25kYXJ5OiB7XG4gICAgICBjb2xvcjogdGhlbWUucGFsZXR0ZS50ZXh0LnNlY29uZGFyeVxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBjb2xvcj1cImVycm9yXCJgLiAqL1xuICAgIGNvbG9yRXJyb3I6IHtcbiAgICAgIGNvbG9yOiB0aGVtZS5wYWxldHRlLmVycm9yLm1haW5cbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgZGlzcGxheT1cImlubGluZVwiYC4gKi9cbiAgICBkaXNwbGF5SW5saW5lOiB7XG4gICAgICBkaXNwbGF5OiAnaW5saW5lJ1xuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBkaXNwbGF5PVwiYmxvY2tcImAuICovXG4gICAgZGlzcGxheUJsb2NrOiB7XG4gICAgICBkaXNwbGF5OiAnYmxvY2snXG4gICAgfVxuICB9O1xufTtcbnZhciBkZWZhdWx0VmFyaWFudE1hcHBpbmcgPSB7XG4gIGgxOiAnaDEnLFxuICBoMjogJ2gyJyxcbiAgaDM6ICdoMycsXG4gIGg0OiAnaDQnLFxuICBoNTogJ2g1JyxcbiAgaDY6ICdoNicsXG4gIHN1YnRpdGxlMTogJ2g2JyxcbiAgc3VidGl0bGUyOiAnaDYnLFxuICBib2R5MTogJ3AnLFxuICBib2R5MjogJ3AnXG59O1xudmFyIFR5cG9ncmFwaHkgPSAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBUeXBvZ3JhcGh5KHByb3BzLCByZWYpIHtcbiAgdmFyIF9wcm9wcyRhbGlnbiA9IHByb3BzLmFsaWduLFxuICAgICAgYWxpZ24gPSBfcHJvcHMkYWxpZ24gPT09IHZvaWQgMCA/ICdpbmhlcml0JyA6IF9wcm9wcyRhbGlnbixcbiAgICAgIGNsYXNzZXMgPSBwcm9wcy5jbGFzc2VzLFxuICAgICAgY2xhc3NOYW1lID0gcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgX3Byb3BzJGNvbG9yID0gcHJvcHMuY29sb3IsXG4gICAgICBjb2xvciA9IF9wcm9wcyRjb2xvciA9PT0gdm9pZCAwID8gJ2luaXRpYWwnIDogX3Byb3BzJGNvbG9yLFxuICAgICAgY29tcG9uZW50ID0gcHJvcHMuY29tcG9uZW50LFxuICAgICAgX3Byb3BzJGRpc3BsYXkgPSBwcm9wcy5kaXNwbGF5LFxuICAgICAgZGlzcGxheSA9IF9wcm9wcyRkaXNwbGF5ID09PSB2b2lkIDAgPyAnaW5pdGlhbCcgOiBfcHJvcHMkZGlzcGxheSxcbiAgICAgIF9wcm9wcyRndXR0ZXJCb3R0b20gPSBwcm9wcy5ndXR0ZXJCb3R0b20sXG4gICAgICBndXR0ZXJCb3R0b20gPSBfcHJvcHMkZ3V0dGVyQm90dG9tID09PSB2b2lkIDAgPyBmYWxzZSA6IF9wcm9wcyRndXR0ZXJCb3R0b20sXG4gICAgICBfcHJvcHMkbm9XcmFwID0gcHJvcHMubm9XcmFwLFxuICAgICAgbm9XcmFwID0gX3Byb3BzJG5vV3JhcCA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcHJvcHMkbm9XcmFwLFxuICAgICAgX3Byb3BzJHBhcmFncmFwaCA9IHByb3BzLnBhcmFncmFwaCxcbiAgICAgIHBhcmFncmFwaCA9IF9wcm9wcyRwYXJhZ3JhcGggPT09IHZvaWQgMCA/IGZhbHNlIDogX3Byb3BzJHBhcmFncmFwaCxcbiAgICAgIF9wcm9wcyR2YXJpYW50ID0gcHJvcHMudmFyaWFudCxcbiAgICAgIHZhcmlhbnQgPSBfcHJvcHMkdmFyaWFudCA9PT0gdm9pZCAwID8gJ2JvZHkxJyA6IF9wcm9wcyR2YXJpYW50LFxuICAgICAgX3Byb3BzJHZhcmlhbnRNYXBwaW5nID0gcHJvcHMudmFyaWFudE1hcHBpbmcsXG4gICAgICB2YXJpYW50TWFwcGluZyA9IF9wcm9wcyR2YXJpYW50TWFwcGluZyA9PT0gdm9pZCAwID8gZGVmYXVsdFZhcmlhbnRNYXBwaW5nIDogX3Byb3BzJHZhcmlhbnRNYXBwaW5nLFxuICAgICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMocHJvcHMsIFtcImFsaWduXCIsIFwiY2xhc3Nlc1wiLCBcImNsYXNzTmFtZVwiLCBcImNvbG9yXCIsIFwiY29tcG9uZW50XCIsIFwiZGlzcGxheVwiLCBcImd1dHRlckJvdHRvbVwiLCBcIm5vV3JhcFwiLCBcInBhcmFncmFwaFwiLCBcInZhcmlhbnRcIiwgXCJ2YXJpYW50TWFwcGluZ1wiXSk7XG5cbiAgdmFyIENvbXBvbmVudCA9IGNvbXBvbmVudCB8fCAocGFyYWdyYXBoID8gJ3AnIDogdmFyaWFudE1hcHBpbmdbdmFyaWFudF0gfHwgZGVmYXVsdFZhcmlhbnRNYXBwaW5nW3ZhcmlhbnRdKSB8fCAnc3Bhbic7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChDb21wb25lbnQsIF9leHRlbmRzKHtcbiAgICBjbGFzc05hbWU6IGNsc3goY2xhc3Nlcy5yb290LCBjbGFzc05hbWUsIHZhcmlhbnQgIT09ICdpbmhlcml0JyAmJiBjbGFzc2VzW3ZhcmlhbnRdLCBjb2xvciAhPT0gJ2luaXRpYWwnICYmIGNsYXNzZXNbXCJjb2xvclwiLmNvbmNhdChjYXBpdGFsaXplKGNvbG9yKSldLCBub1dyYXAgJiYgY2xhc3Nlcy5ub1dyYXAsIGd1dHRlckJvdHRvbSAmJiBjbGFzc2VzLmd1dHRlckJvdHRvbSwgcGFyYWdyYXBoICYmIGNsYXNzZXMucGFyYWdyYXBoLCBhbGlnbiAhPT0gJ2luaGVyaXQnICYmIGNsYXNzZXNbXCJhbGlnblwiLmNvbmNhdChjYXBpdGFsaXplKGFsaWduKSldLCBkaXNwbGF5ICE9PSAnaW5pdGlhbCcgJiYgY2xhc3Nlc1tcImRpc3BsYXlcIi5jb25jYXQoY2FwaXRhbGl6ZShkaXNwbGF5KSldKSxcbiAgICByZWY6IHJlZlxuICB9LCBvdGhlcikpO1xufSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBUeXBvZ3JhcGh5LnByb3BUeXBlcyA9IHtcbiAgLyoqXG4gICAqIFNldCB0aGUgdGV4dC1hbGlnbiBvbiB0aGUgY29tcG9uZW50LlxuICAgKi9cbiAgYWxpZ246IFByb3BUeXBlcy5vbmVPZihbJ2luaGVyaXQnLCAnbGVmdCcsICdjZW50ZXInLCAncmlnaHQnLCAnanVzdGlmeSddKSxcblxuICAvKipcbiAgICogVGhlIGNvbnRlbnQgb2YgdGhlIGNvbXBvbmVudC5cbiAgICovXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcblxuICAvKipcbiAgICogT3ZlcnJpZGUgb3IgZXh0ZW5kIHRoZSBzdHlsZXMgYXBwbGllZCB0byB0aGUgY29tcG9uZW50LlxuICAgKiBTZWUgW0NTUyBBUEldKCNjc3MpIGJlbG93IGZvciBtb3JlIGRldGFpbHMuXG4gICAqL1xuICBjbGFzc2VzOiBQcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWQsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogVGhlIGNvbG9yIG9mIHRoZSBjb21wb25lbnQuIEl0IHN1cHBvcnRzIHRob3NlIHRoZW1lIGNvbG9ycyB0aGF0IG1ha2Ugc2Vuc2UgZm9yIHRoaXMgY29tcG9uZW50LlxuICAgKi9cbiAgY29sb3I6IFByb3BUeXBlcy5vbmVPZihbJ2luaXRpYWwnLCAnaW5oZXJpdCcsICdwcmltYXJ5JywgJ3NlY29uZGFyeScsICd0ZXh0UHJpbWFyeScsICd0ZXh0U2Vjb25kYXJ5JywgJ2Vycm9yJ10pLFxuXG4gIC8qKlxuICAgKiBUaGUgY29tcG9uZW50IHVzZWQgZm9yIHRoZSByb290IG5vZGUuXG4gICAqIEVpdGhlciBhIHN0cmluZyB0byB1c2UgYSBIVE1MIGVsZW1lbnQgb3IgYSBjb21wb25lbnQuXG4gICAqIE92ZXJyaWRlcyB0aGUgYmVoYXZpb3Igb2YgdGhlIGB2YXJpYW50TWFwcGluZ2AgcHJvcC5cbiAgICovXG4gIGNvbXBvbmVudDogUHJvcFR5cGVzXG4gIC8qIEB0eXBlc2NyaXB0LXRvLXByb3B0eXBlcy1pZ25vcmUgKi9cbiAgLmVsZW1lbnRUeXBlLFxuXG4gIC8qKlxuICAgKiBDb250cm9scyB0aGUgZGlzcGxheSB0eXBlXG4gICAqL1xuICBkaXNwbGF5OiBQcm9wVHlwZXMub25lT2YoWydpbml0aWFsJywgJ2Jsb2NrJywgJ2lubGluZSddKSxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgdGV4dCB3aWxsIGhhdmUgYSBib3R0b20gbWFyZ2luLlxuICAgKi9cbiAgZ3V0dGVyQm90dG9tOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgdGV4dCB3aWxsIG5vdCB3cmFwLCBidXQgaW5zdGVhZCB3aWxsIHRydW5jYXRlIHdpdGggYSB0ZXh0IG92ZXJmbG93IGVsbGlwc2lzLlxuICAgKlxuICAgKiBOb3RlIHRoYXQgdGV4dCBvdmVyZmxvdyBjYW4gb25seSBoYXBwZW4gd2l0aCBibG9jayBvciBpbmxpbmUtYmxvY2sgbGV2ZWwgZWxlbWVudHNcbiAgICogKHRoZSBlbGVtZW50IG5lZWRzIHRvIGhhdmUgYSB3aWR0aCBpbiBvcmRlciB0byBvdmVyZmxvdykuXG4gICAqL1xuICBub1dyYXA6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSB0ZXh0IHdpbGwgaGF2ZSBhIGJvdHRvbSBtYXJnaW4uXG4gICAqL1xuICBwYXJhZ3JhcGg6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBBcHBsaWVzIHRoZSB0aGVtZSB0eXBvZ3JhcGh5IHN0eWxlcy5cbiAgICovXG4gIHZhcmlhbnQ6IFByb3BUeXBlcy5vbmVPZihbJ2gxJywgJ2gyJywgJ2gzJywgJ2g0JywgJ2g1JywgJ2g2JywgJ3N1YnRpdGxlMScsICdzdWJ0aXRsZTInLCAnYm9keTEnLCAnYm9keTInLCAnY2FwdGlvbicsICdidXR0b24nLCAnb3ZlcmxpbmUnLCAnc3JPbmx5JywgJ2luaGVyaXQnXSksXG5cbiAgLyoqXG4gICAqIFRoZSBjb21wb25lbnQgbWFwcyB0aGUgdmFyaWFudCBwcm9wIHRvIGEgcmFuZ2Ugb2YgZGlmZmVyZW50IEhUTUwgZWxlbWVudCB0eXBlcy5cbiAgICogRm9yIGluc3RhbmNlLCBzdWJ0aXRsZTEgdG8gYDxoNj5gLlxuICAgKiBJZiB5b3Ugd2lzaCB0byBjaGFuZ2UgdGhhdCBtYXBwaW5nLCB5b3UgY2FuIHByb3ZpZGUgeW91ciBvd24uXG4gICAqIEFsdGVybmF0aXZlbHksIHlvdSBjYW4gdXNlIHRoZSBgY29tcG9uZW50YCBwcm9wLlxuICAgKi9cbiAgdmFyaWFudE1hcHBpbmc6IFByb3BUeXBlcy5vYmplY3Rcbn0gOiB2b2lkIDA7XG5leHBvcnQgZGVmYXVsdCB3aXRoU3R5bGVzKHN0eWxlcywge1xuICBuYW1lOiAnTXVpVHlwb2dyYXBoeSdcbn0pKFR5cG9ncmFwaHkpOyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNcIjtcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgY2xzeCBmcm9tICdjbHN4JztcbmltcG9ydCB3aXRoU3R5bGVzIGZyb20gJy4uL3N0eWxlcy93aXRoU3R5bGVzJztcbmltcG9ydCB7IGZhZGUgfSBmcm9tICcuLi9zdHlsZXMvY29sb3JNYW5pcHVsYXRvcic7XG5leHBvcnQgdmFyIHN0eWxlcyA9IGZ1bmN0aW9uIHN0eWxlcyh0aGVtZSkge1xuICByZXR1cm4ge1xuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQuICovXG4gICAgcm9vdDoge1xuICAgICAgaGVpZ2h0OiAxLFxuICAgICAgbWFyZ2luOiAwLFxuICAgICAgLy8gUmVzZXQgYnJvd3NlciBkZWZhdWx0IHN0eWxlLlxuICAgICAgYm9yZGVyOiAnbm9uZScsXG4gICAgICBmbGV4U2hyaW5rOiAwLFxuICAgICAgYmFja2dyb3VuZENvbG9yOiB0aGVtZS5wYWxldHRlLmRpdmlkZXJcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgYWJzb2x1dGU9e3RydWV9YC4gKi9cbiAgICBhYnNvbHV0ZToge1xuICAgICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gICAgICBib3R0b206IDAsXG4gICAgICBsZWZ0OiAwLFxuICAgICAgd2lkdGg6ICcxMDAlJ1xuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGB2YXJpYW50PVwiaW5zZXRcImAuICovXG4gICAgaW5zZXQ6IHtcbiAgICAgIG1hcmdpbkxlZnQ6IDcyXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGxpZ2h0PXt0cnVlfWAuICovXG4gICAgbGlnaHQ6IHtcbiAgICAgIGJhY2tncm91bmRDb2xvcjogZmFkZSh0aGVtZS5wYWxldHRlLmRpdmlkZXIsIDAuMDgpXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYHZhcmlhbnQ9XCJtaWRkbGVcImAuICovXG4gICAgbWlkZGxlOiB7XG4gICAgICBtYXJnaW5MZWZ0OiB0aGVtZS5zcGFjaW5nKDIpLFxuICAgICAgbWFyZ2luUmlnaHQ6IHRoZW1lLnNwYWNpbmcoMilcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgb3JpZW50YXRpb249XCJ2ZXJ0aWNhbFwiYC4gKi9cbiAgICB2ZXJ0aWNhbDoge1xuICAgICAgaGVpZ2h0OiAnMTAwJScsXG4gICAgICB3aWR0aDogMVxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBmbGV4SXRlbT17dHJ1ZX1gLiAqL1xuICAgIGZsZXhJdGVtOiB7XG4gICAgICBhbGlnblNlbGY6ICdzdHJldGNoJyxcbiAgICAgIGhlaWdodDogJ2F1dG8nXG4gICAgfVxuICB9O1xufTtcbnZhciBEaXZpZGVyID0gLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gRGl2aWRlcihwcm9wcywgcmVmKSB7XG4gIHZhciBfcHJvcHMkYWJzb2x1dGUgPSBwcm9wcy5hYnNvbHV0ZSxcbiAgICAgIGFic29sdXRlID0gX3Byb3BzJGFic29sdXRlID09PSB2b2lkIDAgPyBmYWxzZSA6IF9wcm9wcyRhYnNvbHV0ZSxcbiAgICAgIGNsYXNzZXMgPSBwcm9wcy5jbGFzc2VzLFxuICAgICAgY2xhc3NOYW1lID0gcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgX3Byb3BzJGNvbXBvbmVudCA9IHByb3BzLmNvbXBvbmVudCxcbiAgICAgIENvbXBvbmVudCA9IF9wcm9wcyRjb21wb25lbnQgPT09IHZvaWQgMCA/ICdocicgOiBfcHJvcHMkY29tcG9uZW50LFxuICAgICAgX3Byb3BzJGZsZXhJdGVtID0gcHJvcHMuZmxleEl0ZW0sXG4gICAgICBmbGV4SXRlbSA9IF9wcm9wcyRmbGV4SXRlbSA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcHJvcHMkZmxleEl0ZW0sXG4gICAgICBfcHJvcHMkbGlnaHQgPSBwcm9wcy5saWdodCxcbiAgICAgIGxpZ2h0ID0gX3Byb3BzJGxpZ2h0ID09PSB2b2lkIDAgPyBmYWxzZSA6IF9wcm9wcyRsaWdodCxcbiAgICAgIF9wcm9wcyRvcmllbnRhdGlvbiA9IHByb3BzLm9yaWVudGF0aW9uLFxuICAgICAgb3JpZW50YXRpb24gPSBfcHJvcHMkb3JpZW50YXRpb24gPT09IHZvaWQgMCA/ICdob3Jpem9udGFsJyA6IF9wcm9wcyRvcmllbnRhdGlvbixcbiAgICAgIF9wcm9wcyRyb2xlID0gcHJvcHMucm9sZSxcbiAgICAgIHJvbGUgPSBfcHJvcHMkcm9sZSA9PT0gdm9pZCAwID8gQ29tcG9uZW50ICE9PSAnaHInID8gJ3NlcGFyYXRvcicgOiB1bmRlZmluZWQgOiBfcHJvcHMkcm9sZSxcbiAgICAgIF9wcm9wcyR2YXJpYW50ID0gcHJvcHMudmFyaWFudCxcbiAgICAgIHZhcmlhbnQgPSBfcHJvcHMkdmFyaWFudCA9PT0gdm9pZCAwID8gJ2Z1bGxXaWR0aCcgOiBfcHJvcHMkdmFyaWFudCxcbiAgICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKHByb3BzLCBbXCJhYnNvbHV0ZVwiLCBcImNsYXNzZXNcIiwgXCJjbGFzc05hbWVcIiwgXCJjb21wb25lbnRcIiwgXCJmbGV4SXRlbVwiLCBcImxpZ2h0XCIsIFwib3JpZW50YXRpb25cIiwgXCJyb2xlXCIsIFwidmFyaWFudFwiXSk7XG5cbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KENvbXBvbmVudCwgX2V4dGVuZHMoe1xuICAgIGNsYXNzTmFtZTogY2xzeChjbGFzc2VzLnJvb3QsIGNsYXNzTmFtZSwgdmFyaWFudCAhPT0gJ2Z1bGxXaWR0aCcgJiYgY2xhc3Nlc1t2YXJpYW50XSwgYWJzb2x1dGUgJiYgY2xhc3Nlcy5hYnNvbHV0ZSwgZmxleEl0ZW0gJiYgY2xhc3Nlcy5mbGV4SXRlbSwgbGlnaHQgJiYgY2xhc3Nlcy5saWdodCwgb3JpZW50YXRpb24gPT09ICd2ZXJ0aWNhbCcgJiYgY2xhc3Nlcy52ZXJ0aWNhbCksXG4gICAgcm9sZTogcm9sZSxcbiAgICByZWY6IHJlZlxuICB9LCBvdGhlcikpO1xufSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBEaXZpZGVyLnByb3BUeXBlcyA9IHtcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gV2FybmluZyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAvLyB8IFRoZXNlIFByb3BUeXBlcyBhcmUgZ2VuZXJhdGVkIGZyb20gdGhlIFR5cGVTY3JpcHQgdHlwZSBkZWZpbml0aW9ucyB8XG4gIC8vIHwgICAgIFRvIHVwZGF0ZSB0aGVtIGVkaXQgdGhlIGQudHMgZmlsZSBhbmQgcnVuIFwieWFybiBwcm9wdHlwZXNcIiAgICAgfFxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbiAgLyoqXG4gICAqIEFic29sdXRlbHkgcG9zaXRpb24gdGhlIGVsZW1lbnQuXG4gICAqL1xuICBhYnNvbHV0ZTogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcblxuICAvKipcbiAgICogT3ZlcnJpZGUgb3IgZXh0ZW5kIHRoZSBzdHlsZXMgYXBwbGllZCB0byB0aGUgY29tcG9uZW50LlxuICAgKiBTZWUgW0NTUyBBUEldKCNjc3MpIGJlbG93IGZvciBtb3JlIGRldGFpbHMuXG4gICAqL1xuICBjbGFzc2VzOiBQcm9wVHlwZXMub2JqZWN0LFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIFRoZSBjb21wb25lbnQgdXNlZCBmb3IgdGhlIHJvb3Qgbm9kZS5cbiAgICogRWl0aGVyIGEgc3RyaW5nIHRvIHVzZSBhIEhUTUwgZWxlbWVudCBvciBhIGNvbXBvbmVudC5cbiAgICovXG4gIGNvbXBvbmVudDogUHJvcFR5cGVzXG4gIC8qIEB0eXBlc2NyaXB0LXRvLXByb3B0eXBlcy1pZ25vcmUgKi9cbiAgLmVsZW1lbnRUeXBlLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIGEgdmVydGljYWwgZGl2aWRlciB3aWxsIGhhdmUgdGhlIGNvcnJlY3QgaGVpZ2h0IHdoZW4gdXNlZCBpbiBmbGV4IGNvbnRhaW5lci5cbiAgICogKEJ5IGRlZmF1bHQsIGEgdmVydGljYWwgZGl2aWRlciB3aWxsIGhhdmUgYSBjYWxjdWxhdGVkIGhlaWdodCBvZiBgMHB4YCBpZiBpdCBpcyB0aGUgY2hpbGQgb2YgYSBmbGV4IGNvbnRhaW5lci4pXG4gICAqL1xuICBmbGV4SXRlbTogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGRpdmlkZXIgd2lsbCBoYXZlIGEgbGlnaHRlciBjb2xvci5cbiAgICovXG4gIGxpZ2h0OiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogVGhlIGRpdmlkZXIgb3JpZW50YXRpb24uXG4gICAqL1xuICBvcmllbnRhdGlvbjogUHJvcFR5cGVzLm9uZU9mKFsnaG9yaXpvbnRhbCcsICd2ZXJ0aWNhbCddKSxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgcm9sZTogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogVGhlIHZhcmlhbnQgdG8gdXNlLlxuICAgKi9cbiAgdmFyaWFudDogUHJvcFR5cGVzLm9uZU9mKFsnZnVsbFdpZHRoJywgJ2luc2V0JywgJ21pZGRsZSddKVxufSA6IHZvaWQgMDtcbmV4cG9ydCBkZWZhdWx0IHdpdGhTdHlsZXMoc3R5bGVzLCB7XG4gIG5hbWU6ICdNdWlEaXZpZGVyJ1xufSkoRGl2aWRlcik7IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZm9ybUNvbnRyb2xTdGF0ZShfcmVmKSB7XG4gIHZhciBwcm9wcyA9IF9yZWYucHJvcHMsXG4gICAgICBzdGF0ZXMgPSBfcmVmLnN0YXRlcyxcbiAgICAgIG11aUZvcm1Db250cm9sID0gX3JlZi5tdWlGb3JtQ29udHJvbDtcbiAgcmV0dXJuIHN0YXRlcy5yZWR1Y2UoZnVuY3Rpb24gKGFjYywgc3RhdGUpIHtcbiAgICBhY2Nbc3RhdGVdID0gcHJvcHNbc3RhdGVdO1xuXG4gICAgaWYgKG11aUZvcm1Db250cm9sKSB7XG4gICAgICBpZiAodHlwZW9mIHByb3BzW3N0YXRlXSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgYWNjW3N0YXRlXSA9IG11aUZvcm1Db250cm9sW3N0YXRlXTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gYWNjO1xuICB9LCB7fSk7XG59IiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuLyoqXG4gKiBAaWdub3JlIC0gaW50ZXJuYWwgY29tcG9uZW50LlxuICovXG5cbnZhciBGb3JtQ29udHJvbENvbnRleHQgPSAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlQ29udGV4dCgpO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICBGb3JtQ29udHJvbENvbnRleHQuZGlzcGxheU5hbWUgPSAnRm9ybUNvbnRyb2xDb250ZXh0Jztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHVzZUZvcm1Db250cm9sKCkge1xuICByZXR1cm4gUmVhY3QudXNlQ29udGV4dChGb3JtQ29udHJvbENvbnRleHQpO1xufVxuZXhwb3J0IGRlZmF1bHQgRm9ybUNvbnRyb2xDb250ZXh0OyIsIi8vIFRPRE8gdjU6IGNvbnNpZGVyIHRvIG1ha2UgaXQgcHJpdmF0ZVxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gc2V0UmVmKHJlZiwgdmFsdWUpIHtcbiAgaWYgKHR5cGVvZiByZWYgPT09ICdmdW5jdGlvbicpIHtcbiAgICByZWYodmFsdWUpO1xuICB9IGVsc2UgaWYgKHJlZikge1xuICAgIHJlZi5jdXJyZW50ID0gdmFsdWU7XG4gIH1cbn0iLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgc2V0UmVmIGZyb20gJy4vc2V0UmVmJztcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHVzZUZvcmtSZWYocmVmQSwgcmVmQikge1xuICAvKipcbiAgICogVGhpcyB3aWxsIGNyZWF0ZSBhIG5ldyBmdW5jdGlvbiBpZiB0aGUgcmVmIHByb3BzIGNoYW5nZSBhbmQgYXJlIGRlZmluZWQuXG4gICAqIFRoaXMgbWVhbnMgcmVhY3Qgd2lsbCBjYWxsIHRoZSBvbGQgZm9ya1JlZiB3aXRoIGBudWxsYCBhbmQgdGhlIG5ldyBmb3JrUmVmXG4gICAqIHdpdGggdGhlIHJlZi4gQ2xlYW51cCBuYXR1cmFsbHkgZW1lcmdlcyBmcm9tIHRoaXMgYmVoYXZpb3JcbiAgICovXG4gIHJldHVybiBSZWFjdC51c2VNZW1vKGZ1bmN0aW9uICgpIHtcbiAgICBpZiAocmVmQSA9PSBudWxsICYmIHJlZkIgPT0gbnVsbCkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZ1bmN0aW9uIChyZWZWYWx1ZSkge1xuICAgICAgc2V0UmVmKHJlZkEsIHJlZlZhbHVlKTtcbiAgICAgIHNldFJlZihyZWZCLCByZWZWYWx1ZSk7XG4gICAgfTtcbiAgfSwgW3JlZkEsIHJlZkJdKTtcbn0iLCIvLyBDb3JyZXNwb25kcyB0byAxMCBmcmFtZXMgYXQgNjAgSHouXG4vLyBBIGZldyBieXRlcyBwYXlsb2FkIG92ZXJoZWFkIHdoZW4gbG9kYXNoL2RlYm91bmNlIGlzIH4zIGtCIGFuZCBkZWJvdW5jZSB+MzAwIEIuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBkZWJvdW5jZShmdW5jKSB7XG4gIHZhciB3YWl0ID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiAxNjY7XG4gIHZhciB0aW1lb3V0O1xuXG4gIGZ1bmN0aW9uIGRlYm91bmNlZCgpIHtcbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGNvbnNpc3RlbnQtdGhpc1xuICAgIHZhciB0aGF0ID0gdGhpcztcblxuICAgIHZhciBsYXRlciA9IGZ1bmN0aW9uIGxhdGVyKCkge1xuICAgICAgZnVuYy5hcHBseSh0aGF0LCBhcmdzKTtcbiAgICB9O1xuXG4gICAgY2xlYXJUaW1lb3V0KHRpbWVvdXQpO1xuICAgIHRpbWVvdXQgPSBzZXRUaW1lb3V0KGxhdGVyLCB3YWl0KTtcbiAgfVxuXG4gIGRlYm91bmNlZC5jbGVhciA9IGZ1bmN0aW9uICgpIHtcbiAgICBjbGVhclRpbWVvdXQodGltZW91dCk7XG4gIH07XG5cbiAgcmV0dXJuIGRlYm91bmNlZDtcbn0iLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzXCI7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGRlYm91bmNlIGZyb20gJy4uL3V0aWxzL2RlYm91bmNlJztcbmltcG9ydCB1c2VGb3JrUmVmIGZyb20gJy4uL3V0aWxzL3VzZUZvcmtSZWYnO1xuXG5mdW5jdGlvbiBnZXRTdHlsZVZhbHVlKGNvbXB1dGVkU3R5bGUsIHByb3BlcnR5KSB7XG4gIHJldHVybiBwYXJzZUludChjb21wdXRlZFN0eWxlW3Byb3BlcnR5XSwgMTApIHx8IDA7XG59XG5cbnZhciB1c2VFbmhhbmNlZEVmZmVjdCA9IHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnID8gUmVhY3QudXNlTGF5b3V0RWZmZWN0IDogUmVhY3QudXNlRWZmZWN0O1xudmFyIHN0eWxlcyA9IHtcbiAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHNoYWRvdyB0ZXh0YXJlYSBlbGVtZW50LiAqL1xuICBzaGFkb3c6IHtcbiAgICAvLyBWaXNpYmlsaXR5IG5lZWRlZCB0byBoaWRlIHRoZSBleHRyYSB0ZXh0IGFyZWEgb24gaVBhZHNcbiAgICB2aXNpYmlsaXR5OiAnaGlkZGVuJyxcbiAgICAvLyBSZW1vdmUgZnJvbSB0aGUgY29udGVudCBmbG93XG4gICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gICAgLy8gSWdub3JlIHRoZSBzY3JvbGxiYXIgd2lkdGhcbiAgICBvdmVyZmxvdzogJ2hpZGRlbicsXG4gICAgaGVpZ2h0OiAwLFxuICAgIHRvcDogMCxcbiAgICBsZWZ0OiAwLFxuICAgIC8vIENyZWF0ZSBhIG5ldyBsYXllciwgaW5jcmVhc2UgdGhlIGlzb2xhdGlvbiBvZiB0aGUgY29tcHV0ZWQgdmFsdWVzXG4gICAgdHJhbnNmb3JtOiAndHJhbnNsYXRlWigwKSdcbiAgfVxufTtcbnZhciBUZXh0YXJlYUF1dG9zaXplID0gLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gVGV4dGFyZWFBdXRvc2l6ZShwcm9wcywgcmVmKSB7XG4gIHZhciBvbkNoYW5nZSA9IHByb3BzLm9uQ2hhbmdlLFxuICAgICAgcm93cyA9IHByb3BzLnJvd3MsXG4gICAgICByb3dzTWF4ID0gcHJvcHMucm93c01heCxcbiAgICAgIF9wcm9wcyRyb3dzTWluID0gcHJvcHMucm93c01pbixcbiAgICAgIHJvd3NNaW5Qcm9wID0gX3Byb3BzJHJvd3NNaW4gPT09IHZvaWQgMCA/IDEgOiBfcHJvcHMkcm93c01pbixcbiAgICAgIHN0eWxlID0gcHJvcHMuc3R5bGUsXG4gICAgICB2YWx1ZSA9IHByb3BzLnZhbHVlLFxuICAgICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMocHJvcHMsIFtcIm9uQ2hhbmdlXCIsIFwicm93c1wiLCBcInJvd3NNYXhcIiwgXCJyb3dzTWluXCIsIFwic3R5bGVcIiwgXCJ2YWx1ZVwiXSk7XG5cbiAgdmFyIHJvd3NNaW4gPSByb3dzIHx8IHJvd3NNaW5Qcm9wO1xuXG4gIHZhciBfUmVhY3QkdXNlUmVmID0gUmVhY3QudXNlUmVmKHZhbHVlICE9IG51bGwpLFxuICAgICAgaXNDb250cm9sbGVkID0gX1JlYWN0JHVzZVJlZi5jdXJyZW50O1xuXG4gIHZhciBpbnB1dFJlZiA9IFJlYWN0LnVzZVJlZihudWxsKTtcbiAgdmFyIGhhbmRsZVJlZiA9IHVzZUZvcmtSZWYocmVmLCBpbnB1dFJlZik7XG4gIHZhciBzaGFkb3dSZWYgPSBSZWFjdC51c2VSZWYobnVsbCk7XG4gIHZhciByZW5kZXJzID0gUmVhY3QudXNlUmVmKDApO1xuXG4gIHZhciBfUmVhY3QkdXNlU3RhdGUgPSBSZWFjdC51c2VTdGF0ZSh7fSksXG4gICAgICBzdGF0ZSA9IF9SZWFjdCR1c2VTdGF0ZVswXSxcbiAgICAgIHNldFN0YXRlID0gX1JlYWN0JHVzZVN0YXRlWzFdO1xuXG4gIHZhciBzeW5jSGVpZ2h0ID0gUmVhY3QudXNlQ2FsbGJhY2soZnVuY3Rpb24gKCkge1xuICAgIHZhciBpbnB1dCA9IGlucHV0UmVmLmN1cnJlbnQ7XG4gICAgdmFyIGNvbXB1dGVkU3R5bGUgPSB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShpbnB1dCk7XG4gICAgdmFyIGlucHV0U2hhbGxvdyA9IHNoYWRvd1JlZi5jdXJyZW50O1xuICAgIGlucHV0U2hhbGxvdy5zdHlsZS53aWR0aCA9IGNvbXB1dGVkU3R5bGUud2lkdGg7XG4gICAgaW5wdXRTaGFsbG93LnZhbHVlID0gaW5wdXQudmFsdWUgfHwgcHJvcHMucGxhY2Vob2xkZXIgfHwgJ3gnO1xuXG4gICAgaWYgKGlucHV0U2hhbGxvdy52YWx1ZS5zbGljZSgtMSkgPT09ICdcXG4nKSB7XG4gICAgICAvLyBDZXJ0YWluIGZvbnRzIHdoaWNoIG92ZXJmbG93IHRoZSBsaW5lIGhlaWdodCB3aWxsIGNhdXNlIHRoZSB0ZXh0YXJlYVxuICAgICAgLy8gdG8gcmVwb3J0IGEgZGlmZmVyZW50IHNjcm9sbEhlaWdodCBkZXBlbmRpbmcgb24gd2hldGhlciB0aGUgbGFzdCBsaW5lXG4gICAgICAvLyBpcyBlbXB0eS4gTWFrZSBpdCBub24tZW1wdHkgdG8gYXZvaWQgdGhpcyBpc3N1ZS5cbiAgICAgIGlucHV0U2hhbGxvdy52YWx1ZSArPSAnICc7XG4gICAgfVxuXG4gICAgdmFyIGJveFNpemluZyA9IGNvbXB1dGVkU3R5bGVbJ2JveC1zaXppbmcnXTtcbiAgICB2YXIgcGFkZGluZyA9IGdldFN0eWxlVmFsdWUoY29tcHV0ZWRTdHlsZSwgJ3BhZGRpbmctYm90dG9tJykgKyBnZXRTdHlsZVZhbHVlKGNvbXB1dGVkU3R5bGUsICdwYWRkaW5nLXRvcCcpO1xuICAgIHZhciBib3JkZXIgPSBnZXRTdHlsZVZhbHVlKGNvbXB1dGVkU3R5bGUsICdib3JkZXItYm90dG9tLXdpZHRoJykgKyBnZXRTdHlsZVZhbHVlKGNvbXB1dGVkU3R5bGUsICdib3JkZXItdG9wLXdpZHRoJyk7IC8vIFRoZSBoZWlnaHQgb2YgdGhlIGlubmVyIGNvbnRlbnRcblxuICAgIHZhciBpbm5lckhlaWdodCA9IGlucHV0U2hhbGxvdy5zY3JvbGxIZWlnaHQgLSBwYWRkaW5nOyAvLyBNZWFzdXJlIGhlaWdodCBvZiBhIHRleHRhcmVhIHdpdGggYSBzaW5nbGUgcm93XG5cbiAgICBpbnB1dFNoYWxsb3cudmFsdWUgPSAneCc7XG4gICAgdmFyIHNpbmdsZVJvd0hlaWdodCA9IGlucHV0U2hhbGxvdy5zY3JvbGxIZWlnaHQgLSBwYWRkaW5nOyAvLyBUaGUgaGVpZ2h0IG9mIHRoZSBvdXRlciBjb250ZW50XG5cbiAgICB2YXIgb3V0ZXJIZWlnaHQgPSBpbm5lckhlaWdodDtcblxuICAgIGlmIChyb3dzTWluKSB7XG4gICAgICBvdXRlckhlaWdodCA9IE1hdGgubWF4KE51bWJlcihyb3dzTWluKSAqIHNpbmdsZVJvd0hlaWdodCwgb3V0ZXJIZWlnaHQpO1xuICAgIH1cblxuICAgIGlmIChyb3dzTWF4KSB7XG4gICAgICBvdXRlckhlaWdodCA9IE1hdGgubWluKE51bWJlcihyb3dzTWF4KSAqIHNpbmdsZVJvd0hlaWdodCwgb3V0ZXJIZWlnaHQpO1xuICAgIH1cblxuICAgIG91dGVySGVpZ2h0ID0gTWF0aC5tYXgob3V0ZXJIZWlnaHQsIHNpbmdsZVJvd0hlaWdodCk7IC8vIFRha2UgdGhlIGJveCBzaXppbmcgaW50byBhY2NvdW50IGZvciBhcHBseWluZyB0aGlzIHZhbHVlIGFzIGEgc3R5bGUuXG5cbiAgICB2YXIgb3V0ZXJIZWlnaHRTdHlsZSA9IG91dGVySGVpZ2h0ICsgKGJveFNpemluZyA9PT0gJ2JvcmRlci1ib3gnID8gcGFkZGluZyArIGJvcmRlciA6IDApO1xuICAgIHZhciBvdmVyZmxvdyA9IE1hdGguYWJzKG91dGVySGVpZ2h0IC0gaW5uZXJIZWlnaHQpIDw9IDE7XG4gICAgc2V0U3RhdGUoZnVuY3Rpb24gKHByZXZTdGF0ZSkge1xuICAgICAgLy8gTmVlZCBhIGxhcmdlIGVub3VnaCBkaWZmZXJlbmNlIHRvIHVwZGF0ZSB0aGUgaGVpZ2h0LlxuICAgICAgLy8gVGhpcyBwcmV2ZW50cyBpbmZpbml0ZSByZW5kZXJpbmcgbG9vcC5cbiAgICAgIGlmIChyZW5kZXJzLmN1cnJlbnQgPCAyMCAmJiAob3V0ZXJIZWlnaHRTdHlsZSA+IDAgJiYgTWF0aC5hYnMoKHByZXZTdGF0ZS5vdXRlckhlaWdodFN0eWxlIHx8IDApIC0gb3V0ZXJIZWlnaHRTdHlsZSkgPiAxIHx8IHByZXZTdGF0ZS5vdmVyZmxvdyAhPT0gb3ZlcmZsb3cpKSB7XG4gICAgICAgIHJlbmRlcnMuY3VycmVudCArPSAxO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIG92ZXJmbG93OiBvdmVyZmxvdyxcbiAgICAgICAgICBvdXRlckhlaWdodFN0eWxlOiBvdXRlckhlaWdodFN0eWxlXG4gICAgICAgIH07XG4gICAgICB9XG5cbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgIGlmIChyZW5kZXJzLmN1cnJlbnQgPT09IDIwKSB7XG4gICAgICAgICAgY29uc29sZS5lcnJvcihbJ01hdGVyaWFsLVVJOiBUb28gbWFueSByZS1yZW5kZXJzLiBUaGUgbGF5b3V0IGlzIHVuc3RhYmxlLicsICdUZXh0YXJlYUF1dG9zaXplIGxpbWl0cyB0aGUgbnVtYmVyIG9mIHJlbmRlcnMgdG8gcHJldmVudCBhbiBpbmZpbml0ZSBsb29wLiddLmpvaW4oJ1xcbicpKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gcHJldlN0YXRlO1xuICAgIH0pO1xuICB9LCBbcm93c01heCwgcm93c01pbiwgcHJvcHMucGxhY2Vob2xkZXJdKTtcbiAgUmVhY3QudXNlRWZmZWN0KGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgaGFuZGxlUmVzaXplID0gZGVib3VuY2UoZnVuY3Rpb24gKCkge1xuICAgICAgcmVuZGVycy5jdXJyZW50ID0gMDtcbiAgICAgIHN5bmNIZWlnaHQoKTtcbiAgICB9KTtcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigncmVzaXplJywgaGFuZGxlUmVzaXplKTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgaGFuZGxlUmVzaXplLmNsZWFyKCk7XG4gICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcigncmVzaXplJywgaGFuZGxlUmVzaXplKTtcbiAgICB9O1xuICB9LCBbc3luY0hlaWdodF0pO1xuICB1c2VFbmhhbmNlZEVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgc3luY0hlaWdodCgpO1xuICB9KTtcbiAgUmVhY3QudXNlRWZmZWN0KGZ1bmN0aW9uICgpIHtcbiAgICByZW5kZXJzLmN1cnJlbnQgPSAwO1xuICB9LCBbdmFsdWVdKTtcblxuICB2YXIgaGFuZGxlQ2hhbmdlID0gZnVuY3Rpb24gaGFuZGxlQ2hhbmdlKGV2ZW50KSB7XG4gICAgcmVuZGVycy5jdXJyZW50ID0gMDtcblxuICAgIGlmICghaXNDb250cm9sbGVkKSB7XG4gICAgICBzeW5jSGVpZ2h0KCk7XG4gICAgfVxuXG4gICAgaWYgKG9uQ2hhbmdlKSB7XG4gICAgICBvbkNoYW5nZShldmVudCk7XG4gICAgfVxuICB9O1xuXG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChSZWFjdC5GcmFnbWVudCwgbnVsbCwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJ0ZXh0YXJlYVwiLCBfZXh0ZW5kcyh7XG4gICAgdmFsdWU6IHZhbHVlLFxuICAgIG9uQ2hhbmdlOiBoYW5kbGVDaGFuZ2UsXG4gICAgcmVmOiBoYW5kbGVSZWYgLy8gQXBwbHkgdGhlIHJvd3MgcHJvcCB0byBnZXQgYSBcImNvcnJlY3RcIiBmaXJzdCBTU1IgcGFpbnRcbiAgICAsXG4gICAgcm93czogcm93c01pbixcbiAgICBzdHlsZTogX2V4dGVuZHMoe1xuICAgICAgaGVpZ2h0OiBzdGF0ZS5vdXRlckhlaWdodFN0eWxlLFxuICAgICAgLy8gTmVlZCBhIGxhcmdlIGVub3VnaCBkaWZmZXJlbmNlIHRvIGFsbG93IHNjcm9sbGluZy5cbiAgICAgIC8vIFRoaXMgcHJldmVudHMgaW5maW5pdGUgcmVuZGVyaW5nIGxvb3AuXG4gICAgICBvdmVyZmxvdzogc3RhdGUub3ZlcmZsb3cgPyAnaGlkZGVuJyA6IG51bGxcbiAgICB9LCBzdHlsZSlcbiAgfSwgb3RoZXIpKSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJ0ZXh0YXJlYVwiLCB7XG4gICAgXCJhcmlhLWhpZGRlblwiOiB0cnVlLFxuICAgIGNsYXNzTmFtZTogcHJvcHMuY2xhc3NOYW1lLFxuICAgIHJlYWRPbmx5OiB0cnVlLFxuICAgIHJlZjogc2hhZG93UmVmLFxuICAgIHRhYkluZGV4OiAtMSxcbiAgICBzdHlsZTogX2V4dGVuZHMoe30sIHN0eWxlcy5zaGFkb3csIHN0eWxlKVxuICB9KSk7XG59KTtcbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFRleHRhcmVhQXV0b3NpemUucHJvcFR5cGVzID0ge1xuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBXYXJuaW5nIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIC8vIHwgVGhlc2UgUHJvcFR5cGVzIGFyZSBnZW5lcmF0ZWQgZnJvbSB0aGUgVHlwZVNjcmlwdCB0eXBlIGRlZmluaXRpb25zIHxcbiAgLy8gfCAgICAgVG8gdXBkYXRlIHRoZW0gZWRpdCB0aGUgZC50cyBmaWxlIGFuZCBydW4gXCJ5YXJuIHByb3B0eXBlc1wiICAgICB8XG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBvbkNoYW5nZTogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIHBsYWNlaG9sZGVyOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBVc2UgYHJvd3NNaW5gIGluc3RlYWQuIFRoZSBwcm9wIHdpbGwgYmUgcmVtb3ZlZCBpbiB2NS5cbiAgICpcbiAgICogQGRlcHJlY2F0ZWRcbiAgICovXG4gIHJvd3M6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5udW1iZXIsIFByb3BUeXBlcy5zdHJpbmddKSxcblxuICAvKipcbiAgICogTWF4aW11bSBudW1iZXIgb2Ygcm93cyB0byBkaXNwbGF5LlxuICAgKi9cbiAgcm93c01heDogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLm51bWJlciwgUHJvcFR5cGVzLnN0cmluZ10pLFxuXG4gIC8qKlxuICAgKiBNaW5pbXVtIG51bWJlciBvZiByb3dzIHRvIGRpc3BsYXkuXG4gICAqL1xuICByb3dzTWluOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMubnVtYmVyLCBQcm9wVHlwZXMuc3RyaW5nXSksXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIHN0eWxlOiBQcm9wVHlwZXMub2JqZWN0LFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICB2YWx1ZTogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmFycmF5T2YoUHJvcFR5cGVzLnN0cmluZyksIFByb3BUeXBlcy5udW1iZXIsIFByb3BUeXBlcy5zdHJpbmddKVxufSA6IHZvaWQgMDtcbmV4cG9ydCBkZWZhdWx0IFRleHRhcmVhQXV0b3NpemU7IiwiLy8gU3VwcG9ydHMgZGV0ZXJtaW5hdGlvbiBvZiBpc0NvbnRyb2xsZWQoKS5cbi8vIENvbnRyb2xsZWQgaW5wdXQgYWNjZXB0cyBpdHMgY3VycmVudCB2YWx1ZSBhcyBhIHByb3AuXG4vL1xuLy8gQHNlZSBodHRwczovL2ZhY2Vib29rLmdpdGh1Yi5pby9yZWFjdC9kb2NzL2Zvcm1zLmh0bWwjY29udHJvbGxlZC1jb21wb25lbnRzXG4vLyBAcGFyYW0gdmFsdWVcbi8vIEByZXR1cm5zIHtib29sZWFufSB0cnVlIGlmIHN0cmluZyAoaW5jbHVkaW5nICcnKSBvciBudW1iZXIgKGluY2x1ZGluZyB6ZXJvKVxuZXhwb3J0IGZ1bmN0aW9uIGhhc1ZhbHVlKHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZSAhPSBudWxsICYmICEoQXJyYXkuaXNBcnJheSh2YWx1ZSkgJiYgdmFsdWUubGVuZ3RoID09PSAwKTtcbn0gLy8gRGV0ZXJtaW5lIGlmIGZpZWxkIGlzIGVtcHR5IG9yIGZpbGxlZC5cbi8vIFJlc3BvbnNlIGRldGVybWluZXMgaWYgbGFiZWwgaXMgcHJlc2VudGVkIGFib3ZlIGZpZWxkIG9yIGFzIHBsYWNlaG9sZGVyLlxuLy9cbi8vIEBwYXJhbSBvYmpcbi8vIEBwYXJhbSBTU1Jcbi8vIEByZXR1cm5zIHtib29sZWFufSBGYWxzZSB3aGVuIG5vdCBwcmVzZW50IG9yIGVtcHR5IHN0cmluZy5cbi8vICAgICAgICAgICAgICAgICAgICBUcnVlIHdoZW4gYW55IG51bWJlciBvciBzdHJpbmcgd2l0aCBsZW5ndGguXG5cbmV4cG9ydCBmdW5jdGlvbiBpc0ZpbGxlZChvYmopIHtcbiAgdmFyIFNTUiA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogZmFsc2U7XG4gIHJldHVybiBvYmogJiYgKGhhc1ZhbHVlKG9iai52YWx1ZSkgJiYgb2JqLnZhbHVlICE9PSAnJyB8fCBTU1IgJiYgaGFzVmFsdWUob2JqLmRlZmF1bHRWYWx1ZSkgJiYgb2JqLmRlZmF1bHRWYWx1ZSAhPT0gJycpO1xufSAvLyBEZXRlcm1pbmUgaWYgYW4gSW5wdXQgaXMgYWRvcm5lZCBvbiBzdGFydC5cbi8vIEl0J3MgY29ycmVzcG9uZGluZyB0byB0aGUgbGVmdCB3aXRoIExUUi5cbi8vXG4vLyBAcGFyYW0gb2JqXG4vLyBAcmV0dXJucyB7Ym9vbGVhbn0gRmFsc2Ugd2hlbiBubyBhZG9ybm1lbnRzLlxuLy8gICAgICAgICAgICAgICAgICAgIFRydWUgd2hlbiBhZG9ybmVkIGF0IHRoZSBzdGFydC5cblxuZXhwb3J0IGZ1bmN0aW9uIGlzQWRvcm5lZFN0YXJ0KG9iaikge1xuICByZXR1cm4gb2JqLnN0YXJ0QWRvcm5tZW50O1xufSIsImltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzXCI7XG5pbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCB7IGZvcm1hdE11aUVycm9yTWVzc2FnZSBhcyBfZm9ybWF0TXVpRXJyb3JNZXNzYWdlIH0gZnJvbSBcIkBtYXRlcmlhbC11aS91dGlsc1wiO1xuXG4vKiBlc2xpbnQtZGlzYWJsZSBqc3gtYTExeS9jbGljay1ldmVudHMtaGF2ZS1rZXktZXZlbnRzLCBqc3gtYTExeS9uby1zdGF0aWMtZWxlbWVudC1pbnRlcmFjdGlvbnMgKi9cbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgY2xzeCBmcm9tICdjbHN4JztcbmltcG9ydCB7IHJlZlR5cGUgfSBmcm9tICdAbWF0ZXJpYWwtdWkvdXRpbHMnO1xuaW1wb3J0IGZvcm1Db250cm9sU3RhdGUgZnJvbSAnLi4vRm9ybUNvbnRyb2wvZm9ybUNvbnRyb2xTdGF0ZSc7XG5pbXBvcnQgRm9ybUNvbnRyb2xDb250ZXh0LCB7IHVzZUZvcm1Db250cm9sIH0gZnJvbSAnLi4vRm9ybUNvbnRyb2wvRm9ybUNvbnRyb2xDb250ZXh0JztcbmltcG9ydCB3aXRoU3R5bGVzIGZyb20gJy4uL3N0eWxlcy93aXRoU3R5bGVzJztcbmltcG9ydCBjYXBpdGFsaXplIGZyb20gJy4uL3V0aWxzL2NhcGl0YWxpemUnO1xuaW1wb3J0IHVzZUZvcmtSZWYgZnJvbSAnLi4vdXRpbHMvdXNlRm9ya1JlZic7XG5pbXBvcnQgVGV4dGFyZWFBdXRvc2l6ZSBmcm9tICcuLi9UZXh0YXJlYUF1dG9zaXplJztcbmltcG9ydCB7IGlzRmlsbGVkIH0gZnJvbSAnLi91dGlscyc7XG5leHBvcnQgdmFyIHN0eWxlcyA9IGZ1bmN0aW9uIHN0eWxlcyh0aGVtZSkge1xuICB2YXIgbGlnaHQgPSB0aGVtZS5wYWxldHRlLnR5cGUgPT09ICdsaWdodCc7XG4gIHZhciBwbGFjZWhvbGRlciA9IHtcbiAgICBjb2xvcjogJ2N1cnJlbnRDb2xvcicsXG4gICAgb3BhY2l0eTogbGlnaHQgPyAwLjQyIDogMC41LFxuICAgIHRyYW5zaXRpb246IHRoZW1lLnRyYW5zaXRpb25zLmNyZWF0ZSgnb3BhY2l0eScsIHtcbiAgICAgIGR1cmF0aW9uOiB0aGVtZS50cmFuc2l0aW9ucy5kdXJhdGlvbi5zaG9ydGVyXG4gICAgfSlcbiAgfTtcbiAgdmFyIHBsYWNlaG9sZGVySGlkZGVuID0ge1xuICAgIG9wYWNpdHk6ICcwICFpbXBvcnRhbnQnXG4gIH07XG4gIHZhciBwbGFjZWhvbGRlclZpc2libGUgPSB7XG4gICAgb3BhY2l0eTogbGlnaHQgPyAwLjQyIDogMC41XG4gIH07XG4gIHJldHVybiB7XG4gICAgJ0BnbG9iYWwnOiB7XG4gICAgICAnQGtleWZyYW1lcyBtdWktYXV0by1maWxsJzoge30sXG4gICAgICAnQGtleWZyYW1lcyBtdWktYXV0by1maWxsLWNhbmNlbCc6IHt9XG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQuICovXG4gICAgcm9vdDogX2V4dGVuZHMoe30sIHRoZW1lLnR5cG9ncmFwaHkuYm9keTEsIHtcbiAgICAgIGNvbG9yOiB0aGVtZS5wYWxldHRlLnRleHQucHJpbWFyeSxcbiAgICAgIGxpbmVIZWlnaHQ6ICcxLjE4NzZlbScsXG4gICAgICAvLyBSZXNldCAoMTlweCksIG1hdGNoIHRoZSBuYXRpdmUgaW5wdXQgbGluZS1oZWlnaHRcbiAgICAgIGJveFNpemluZzogJ2JvcmRlci1ib3gnLFxuICAgICAgLy8gUHJldmVudCBwYWRkaW5nIGlzc3VlIHdpdGggZnVsbFdpZHRoLlxuICAgICAgcG9zaXRpb246ICdyZWxhdGl2ZScsXG4gICAgICBjdXJzb3I6ICd0ZXh0JyxcbiAgICAgIGRpc3BsYXk6ICdpbmxpbmUtZmxleCcsXG4gICAgICBhbGlnbkl0ZW1zOiAnY2VudGVyJyxcbiAgICAgICcmJGRpc2FibGVkJzoge1xuICAgICAgICBjb2xvcjogdGhlbWUucGFsZXR0ZS50ZXh0LmRpc2FibGVkLFxuICAgICAgICBjdXJzb3I6ICdkZWZhdWx0J1xuICAgICAgfVxuICAgIH0pLFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiB0aGUgY29tcG9uZW50IGlzIGEgZGVzY2VuZGFudCBvZiBgRm9ybUNvbnRyb2xgLiAqL1xuICAgIGZvcm1Db250cm9sOiB7fSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgdGhlIGNvbXBvbmVudCBpcyBmb2N1c2VkLiAqL1xuICAgIGZvY3VzZWQ6IHt9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgZGlzYWJsZWQ9e3RydWV9YC4gKi9cbiAgICBkaXNhYmxlZDoge30sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBzdGFydEFkb3JubWVudGAgaXMgcHJvdmlkZWQuICovXG4gICAgYWRvcm5lZFN0YXJ0OiB7fSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGVuZEFkb3JubWVudGAgaXMgcHJvdmlkZWQuICovXG4gICAgYWRvcm5lZEVuZDoge30sXG5cbiAgICAvKiBQc2V1ZG8tY2xhc3MgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBlcnJvcj17dHJ1ZX1gLiAqL1xuICAgIGVycm9yOiB7fSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSBgaW5wdXRgIGVsZW1lbnQgaWYgYG1hcmdpbj1cImRlbnNlXCJgLiAqL1xuICAgIG1hcmdpbkRlbnNlOiB7fSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYG11bHRpbGluZT17dHJ1ZX1gLiAqL1xuICAgIG11bHRpbGluZToge1xuICAgICAgcGFkZGluZzogXCJcIi5jb25jYXQoOCAtIDIsIFwicHggMCBcIikuY29uY2F0KDggLSAxLCBcInB4XCIpLFxuICAgICAgJyYkbWFyZ2luRGVuc2UnOiB7XG4gICAgICAgIHBhZGRpbmdUb3A6IDQgLSAxXG4gICAgICB9XG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgdGhlIGNvbG9yIGlzIHNlY29uZGFyeS4gKi9cbiAgICBjb2xvclNlY29uZGFyeToge30sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBmdWxsV2lkdGg9e3RydWV9YC4gKi9cbiAgICBmdWxsV2lkdGg6IHtcbiAgICAgIHdpZHRoOiAnMTAwJSdcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIGBpbnB1dGAgZWxlbWVudC4gKi9cbiAgICBpbnB1dDoge1xuICAgICAgZm9udDogJ2luaGVyaXQnLFxuICAgICAgbGV0dGVyU3BhY2luZzogJ2luaGVyaXQnLFxuICAgICAgY29sb3I6ICdjdXJyZW50Q29sb3InLFxuICAgICAgcGFkZGluZzogXCJcIi5jb25jYXQoOCAtIDIsIFwicHggMCBcIikuY29uY2F0KDggLSAxLCBcInB4XCIpLFxuICAgICAgYm9yZGVyOiAwLFxuICAgICAgYm94U2l6aW5nOiAnY29udGVudC1ib3gnLFxuICAgICAgYmFja2dyb3VuZDogJ25vbmUnLFxuICAgICAgaGVpZ2h0OiAnMS4xODc2ZW0nLFxuICAgICAgLy8gUmVzZXQgKDE5cHgpLCBtYXRjaCB0aGUgbmF0aXZlIGlucHV0IGxpbmUtaGVpZ2h0XG4gICAgICBtYXJnaW46IDAsXG4gICAgICAvLyBSZXNldCBmb3IgU2FmYXJpXG4gICAgICBXZWJraXRUYXBIaWdobGlnaHRDb2xvcjogJ3RyYW5zcGFyZW50JyxcbiAgICAgIGRpc3BsYXk6ICdibG9jaycsXG4gICAgICAvLyBNYWtlIHRoZSBmbGV4IGl0ZW0gc2hyaW5rIHdpdGggRmlyZWZveFxuICAgICAgbWluV2lkdGg6IDAsXG4gICAgICB3aWR0aDogJzEwMCUnLFxuICAgICAgLy8gRml4IElFIDExIHdpZHRoIGlzc3VlXG4gICAgICBhbmltYXRpb25OYW1lOiAnbXVpLWF1dG8tZmlsbC1jYW5jZWwnLFxuICAgICAgYW5pbWF0aW9uRHVyYXRpb246ICcxMG1zJyxcbiAgICAgICcmOjotd2Via2l0LWlucHV0LXBsYWNlaG9sZGVyJzogcGxhY2Vob2xkZXIsXG4gICAgICAnJjo6LW1vei1wbGFjZWhvbGRlcic6IHBsYWNlaG9sZGVyLFxuICAgICAgLy8gRmlyZWZveCAxOStcbiAgICAgICcmOi1tcy1pbnB1dC1wbGFjZWhvbGRlcic6IHBsYWNlaG9sZGVyLFxuICAgICAgLy8gSUUgMTFcbiAgICAgICcmOjotbXMtaW5wdXQtcGxhY2Vob2xkZXInOiBwbGFjZWhvbGRlcixcbiAgICAgIC8vIEVkZ2VcbiAgICAgICcmOmZvY3VzJzoge1xuICAgICAgICBvdXRsaW5lOiAwXG4gICAgICB9LFxuICAgICAgLy8gUmVzZXQgRmlyZWZveCBpbnZhbGlkIHJlcXVpcmVkIGlucHV0IHN0eWxlXG4gICAgICAnJjppbnZhbGlkJzoge1xuICAgICAgICBib3hTaGFkb3c6ICdub25lJ1xuICAgICAgfSxcbiAgICAgICcmOjotd2Via2l0LXNlYXJjaC1kZWNvcmF0aW9uJzoge1xuICAgICAgICAvLyBSZW1vdmUgdGhlIHBhZGRpbmcgd2hlbiB0eXBlPXNlYXJjaC5cbiAgICAgICAgJy13ZWJraXQtYXBwZWFyYW5jZSc6ICdub25lJ1xuICAgICAgfSxcbiAgICAgIC8vIFNob3cgYW5kIGhpZGUgdGhlIHBsYWNlaG9sZGVyIGxvZ2ljXG4gICAgICAnbGFiZWxbZGF0YS1zaHJpbms9ZmFsc2VdICsgJGZvcm1Db250cm9sICYnOiB7XG4gICAgICAgICcmOjotd2Via2l0LWlucHV0LXBsYWNlaG9sZGVyJzogcGxhY2Vob2xkZXJIaWRkZW4sXG4gICAgICAgICcmOjotbW96LXBsYWNlaG9sZGVyJzogcGxhY2Vob2xkZXJIaWRkZW4sXG4gICAgICAgIC8vIEZpcmVmb3ggMTkrXG4gICAgICAgICcmOi1tcy1pbnB1dC1wbGFjZWhvbGRlcic6IHBsYWNlaG9sZGVySGlkZGVuLFxuICAgICAgICAvLyBJRSAxMVxuICAgICAgICAnJjo6LW1zLWlucHV0LXBsYWNlaG9sZGVyJzogcGxhY2Vob2xkZXJIaWRkZW4sXG4gICAgICAgIC8vIEVkZ2VcbiAgICAgICAgJyY6Zm9jdXM6Oi13ZWJraXQtaW5wdXQtcGxhY2Vob2xkZXInOiBwbGFjZWhvbGRlclZpc2libGUsXG4gICAgICAgICcmOmZvY3VzOjotbW96LXBsYWNlaG9sZGVyJzogcGxhY2Vob2xkZXJWaXNpYmxlLFxuICAgICAgICAvLyBGaXJlZm94IDE5K1xuICAgICAgICAnJjpmb2N1czotbXMtaW5wdXQtcGxhY2Vob2xkZXInOiBwbGFjZWhvbGRlclZpc2libGUsXG4gICAgICAgIC8vIElFIDExXG4gICAgICAgICcmOmZvY3VzOjotbXMtaW5wdXQtcGxhY2Vob2xkZXInOiBwbGFjZWhvbGRlclZpc2libGUgLy8gRWRnZVxuXG4gICAgICB9LFxuICAgICAgJyYkZGlzYWJsZWQnOiB7XG4gICAgICAgIG9wYWNpdHk6IDEgLy8gUmVzZXQgaU9TIG9wYWNpdHlcblxuICAgICAgfSxcbiAgICAgICcmOi13ZWJraXQtYXV0b2ZpbGwnOiB7XG4gICAgICAgIGFuaW1hdGlvbkR1cmF0aW9uOiAnNTAwMHMnLFxuICAgICAgICBhbmltYXRpb25OYW1lOiAnbXVpLWF1dG8tZmlsbCdcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIGBpbnB1dGAgZWxlbWVudCBpZiBgbWFyZ2luPVwiZGVuc2VcImAuICovXG4gICAgaW5wdXRNYXJnaW5EZW5zZToge1xuICAgICAgcGFkZGluZ1RvcDogNCAtIDFcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIGBpbnB1dGAgZWxlbWVudCBpZiBgbXVsdGlsaW5lPXt0cnVlfWAuICovXG4gICAgaW5wdXRNdWx0aWxpbmU6IHtcbiAgICAgIGhlaWdodDogJ2F1dG8nLFxuICAgICAgcmVzaXplOiAnbm9uZScsXG4gICAgICBwYWRkaW5nOiAwXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSBgaW5wdXRgIGVsZW1lbnQgaWYgYHR5cGU9XCJzZWFyY2hcImAuICovXG4gICAgaW5wdXRUeXBlU2VhcmNoOiB7XG4gICAgICAvLyBJbXByb3ZlIHR5cGUgc2VhcmNoIHN0eWxlLlxuICAgICAgJy1tb3otYXBwZWFyYW5jZSc6ICd0ZXh0ZmllbGQnLFxuICAgICAgJy13ZWJraXQtYXBwZWFyYW5jZSc6ICd0ZXh0ZmllbGQnXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSBgaW5wdXRgIGVsZW1lbnQgaWYgYHN0YXJ0QWRvcm5tZW50YCBpcyBwcm92aWRlZC4gKi9cbiAgICBpbnB1dEFkb3JuZWRTdGFydDoge30sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgYGlucHV0YCBlbGVtZW50IGlmIGBlbmRBZG9ybm1lbnRgIGlzIHByb3ZpZGVkLiAqL1xuICAgIGlucHV0QWRvcm5lZEVuZDoge30sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgYGlucHV0YCBlbGVtZW50IGlmIGBoaWRkZW5MYWJlbD17dHJ1ZX1gLiAqL1xuICAgIGlucHV0SGlkZGVuTGFiZWw6IHt9XG4gIH07XG59O1xudmFyIHVzZUVuaGFuY2VkRWZmZWN0ID0gdHlwZW9mIHdpbmRvdyA9PT0gJ3VuZGVmaW5lZCcgPyBSZWFjdC51c2VFZmZlY3QgOiBSZWFjdC51c2VMYXlvdXRFZmZlY3Q7XG4vKipcbiAqIGBJbnB1dEJhc2VgIGNvbnRhaW5zIGFzIGZldyBzdHlsZXMgYXMgcG9zc2libGUuXG4gKiBJdCBhaW1zIHRvIGJlIGEgc2ltcGxlIGJ1aWxkaW5nIGJsb2NrIGZvciBjcmVhdGluZyBhbiBpbnB1dC5cbiAqIEl0IGNvbnRhaW5zIGEgbG9hZCBvZiBzdHlsZSByZXNldCBhbmQgc29tZSBzdGF0ZSBsb2dpYy5cbiAqL1xuXG52YXIgSW5wdXRCYXNlID0gLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gSW5wdXRCYXNlKHByb3BzLCByZWYpIHtcbiAgdmFyIGFyaWFEZXNjcmliZWRieSA9IHByb3BzWydhcmlhLWRlc2NyaWJlZGJ5J10sXG4gICAgICBhdXRvQ29tcGxldGUgPSBwcm9wcy5hdXRvQ29tcGxldGUsXG4gICAgICBhdXRvRm9jdXMgPSBwcm9wcy5hdXRvRm9jdXMsXG4gICAgICBjbGFzc2VzID0gcHJvcHMuY2xhc3NlcyxcbiAgICAgIGNsYXNzTmFtZSA9IHByb3BzLmNsYXNzTmFtZSxcbiAgICAgIGNvbG9yID0gcHJvcHMuY29sb3IsXG4gICAgICBkZWZhdWx0VmFsdWUgPSBwcm9wcy5kZWZhdWx0VmFsdWUsXG4gICAgICBkaXNhYmxlZCA9IHByb3BzLmRpc2FibGVkLFxuICAgICAgZW5kQWRvcm5tZW50ID0gcHJvcHMuZW5kQWRvcm5tZW50LFxuICAgICAgZXJyb3IgPSBwcm9wcy5lcnJvcixcbiAgICAgIF9wcm9wcyRmdWxsV2lkdGggPSBwcm9wcy5mdWxsV2lkdGgsXG4gICAgICBmdWxsV2lkdGggPSBfcHJvcHMkZnVsbFdpZHRoID09PSB2b2lkIDAgPyBmYWxzZSA6IF9wcm9wcyRmdWxsV2lkdGgsXG4gICAgICBpZCA9IHByb3BzLmlkLFxuICAgICAgX3Byb3BzJGlucHV0Q29tcG9uZW50ID0gcHJvcHMuaW5wdXRDb21wb25lbnQsXG4gICAgICBpbnB1dENvbXBvbmVudCA9IF9wcm9wcyRpbnB1dENvbXBvbmVudCA9PT0gdm9pZCAwID8gJ2lucHV0JyA6IF9wcm9wcyRpbnB1dENvbXBvbmVudCxcbiAgICAgIF9wcm9wcyRpbnB1dFByb3BzID0gcHJvcHMuaW5wdXRQcm9wcyxcbiAgICAgIGlucHV0UHJvcHNQcm9wID0gX3Byb3BzJGlucHV0UHJvcHMgPT09IHZvaWQgMCA/IHt9IDogX3Byb3BzJGlucHV0UHJvcHMsXG4gICAgICBpbnB1dFJlZlByb3AgPSBwcm9wcy5pbnB1dFJlZixcbiAgICAgIG1hcmdpbiA9IHByb3BzLm1hcmdpbixcbiAgICAgIF9wcm9wcyRtdWx0aWxpbmUgPSBwcm9wcy5tdWx0aWxpbmUsXG4gICAgICBtdWx0aWxpbmUgPSBfcHJvcHMkbXVsdGlsaW5lID09PSB2b2lkIDAgPyBmYWxzZSA6IF9wcm9wcyRtdWx0aWxpbmUsXG4gICAgICBuYW1lID0gcHJvcHMubmFtZSxcbiAgICAgIG9uQmx1ciA9IHByb3BzLm9uQmx1cixcbiAgICAgIG9uQ2hhbmdlID0gcHJvcHMub25DaGFuZ2UsXG4gICAgICBvbkNsaWNrID0gcHJvcHMub25DbGljayxcbiAgICAgIG9uRm9jdXMgPSBwcm9wcy5vbkZvY3VzLFxuICAgICAgb25LZXlEb3duID0gcHJvcHMub25LZXlEb3duLFxuICAgICAgb25LZXlVcCA9IHByb3BzLm9uS2V5VXAsXG4gICAgICBwbGFjZWhvbGRlciA9IHByb3BzLnBsYWNlaG9sZGVyLFxuICAgICAgcmVhZE9ubHkgPSBwcm9wcy5yZWFkT25seSxcbiAgICAgIHJlbmRlclN1ZmZpeCA9IHByb3BzLnJlbmRlclN1ZmZpeCxcbiAgICAgIHJvd3MgPSBwcm9wcy5yb3dzLFxuICAgICAgcm93c01heCA9IHByb3BzLnJvd3NNYXgsXG4gICAgICByb3dzTWluID0gcHJvcHMucm93c01pbixcbiAgICAgIHN0YXJ0QWRvcm5tZW50ID0gcHJvcHMuc3RhcnRBZG9ybm1lbnQsXG4gICAgICBfcHJvcHMkdHlwZSA9IHByb3BzLnR5cGUsXG4gICAgICB0eXBlID0gX3Byb3BzJHR5cGUgPT09IHZvaWQgMCA/ICd0ZXh0JyA6IF9wcm9wcyR0eXBlLFxuICAgICAgdmFsdWVQcm9wID0gcHJvcHMudmFsdWUsXG4gICAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhwcm9wcywgW1wiYXJpYS1kZXNjcmliZWRieVwiLCBcImF1dG9Db21wbGV0ZVwiLCBcImF1dG9Gb2N1c1wiLCBcImNsYXNzZXNcIiwgXCJjbGFzc05hbWVcIiwgXCJjb2xvclwiLCBcImRlZmF1bHRWYWx1ZVwiLCBcImRpc2FibGVkXCIsIFwiZW5kQWRvcm5tZW50XCIsIFwiZXJyb3JcIiwgXCJmdWxsV2lkdGhcIiwgXCJpZFwiLCBcImlucHV0Q29tcG9uZW50XCIsIFwiaW5wdXRQcm9wc1wiLCBcImlucHV0UmVmXCIsIFwibWFyZ2luXCIsIFwibXVsdGlsaW5lXCIsIFwibmFtZVwiLCBcIm9uQmx1clwiLCBcIm9uQ2hhbmdlXCIsIFwib25DbGlja1wiLCBcIm9uRm9jdXNcIiwgXCJvbktleURvd25cIiwgXCJvbktleVVwXCIsIFwicGxhY2Vob2xkZXJcIiwgXCJyZWFkT25seVwiLCBcInJlbmRlclN1ZmZpeFwiLCBcInJvd3NcIiwgXCJyb3dzTWF4XCIsIFwicm93c01pblwiLCBcInN0YXJ0QWRvcm5tZW50XCIsIFwidHlwZVwiLCBcInZhbHVlXCJdKTtcblxuICB2YXIgdmFsdWUgPSBpbnB1dFByb3BzUHJvcC52YWx1ZSAhPSBudWxsID8gaW5wdXRQcm9wc1Byb3AudmFsdWUgOiB2YWx1ZVByb3A7XG5cbiAgdmFyIF9SZWFjdCR1c2VSZWYgPSBSZWFjdC51c2VSZWYodmFsdWUgIT0gbnVsbCksXG4gICAgICBpc0NvbnRyb2xsZWQgPSBfUmVhY3QkdXNlUmVmLmN1cnJlbnQ7XG5cbiAgdmFyIGlucHV0UmVmID0gUmVhY3QudXNlUmVmKCk7XG4gIHZhciBoYW5kbGVJbnB1dFJlZldhcm5pbmcgPSBSZWFjdC51c2VDYWxsYmFjayhmdW5jdGlvbiAoaW5zdGFuY2UpIHtcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgaWYgKGluc3RhbmNlICYmIGluc3RhbmNlLm5vZGVOYW1lICE9PSAnSU5QVVQnICYmICFpbnN0YW5jZS5mb2N1cykge1xuICAgICAgICBjb25zb2xlLmVycm9yKFsnTWF0ZXJpYWwtVUk6IFlvdSBoYXZlIHByb3ZpZGVkIGEgYGlucHV0Q29tcG9uZW50YCB0byB0aGUgaW5wdXQgY29tcG9uZW50JywgJ3RoYXQgZG9lcyBub3QgY29ycmVjdGx5IGhhbmRsZSB0aGUgYGlucHV0UmVmYCBwcm9wLicsICdNYWtlIHN1cmUgdGhlIGBpbnB1dFJlZmAgcHJvcCBpcyBjYWxsZWQgd2l0aCBhIEhUTUxJbnB1dEVsZW1lbnQuJ10uam9pbignXFxuJykpO1xuICAgICAgfVxuICAgIH1cbiAgfSwgW10pO1xuICB2YXIgaGFuZGxlSW5wdXRQcm9wc1JlZlByb3AgPSB1c2VGb3JrUmVmKGlucHV0UHJvcHNQcm9wLnJlZiwgaGFuZGxlSW5wdXRSZWZXYXJuaW5nKTtcbiAgdmFyIGhhbmRsZUlucHV0UmVmUHJvcCA9IHVzZUZvcmtSZWYoaW5wdXRSZWZQcm9wLCBoYW5kbGVJbnB1dFByb3BzUmVmUHJvcCk7XG4gIHZhciBoYW5kbGVJbnB1dFJlZiA9IHVzZUZvcmtSZWYoaW5wdXRSZWYsIGhhbmRsZUlucHV0UmVmUHJvcCk7XG5cbiAgdmFyIF9SZWFjdCR1c2VTdGF0ZSA9IFJlYWN0LnVzZVN0YXRlKGZhbHNlKSxcbiAgICAgIGZvY3VzZWQgPSBfUmVhY3QkdXNlU3RhdGVbMF0sXG4gICAgICBzZXRGb2N1c2VkID0gX1JlYWN0JHVzZVN0YXRlWzFdO1xuXG4gIHZhciBtdWlGb3JtQ29udHJvbCA9IHVzZUZvcm1Db250cm9sKCk7XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3QtaG9va3MvcnVsZXMtb2YtaG9va3NcbiAgICBSZWFjdC51c2VFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKG11aUZvcm1Db250cm9sKSB7XG4gICAgICAgIHJldHVybiBtdWlGb3JtQ29udHJvbC5yZWdpc3RlckVmZmVjdCgpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH0sIFttdWlGb3JtQ29udHJvbF0pO1xuICB9XG5cbiAgdmFyIGZjcyA9IGZvcm1Db250cm9sU3RhdGUoe1xuICAgIHByb3BzOiBwcm9wcyxcbiAgICBtdWlGb3JtQ29udHJvbDogbXVpRm9ybUNvbnRyb2wsXG4gICAgc3RhdGVzOiBbJ2NvbG9yJywgJ2Rpc2FibGVkJywgJ2Vycm9yJywgJ2hpZGRlbkxhYmVsJywgJ21hcmdpbicsICdyZXF1aXJlZCcsICdmaWxsZWQnXVxuICB9KTtcbiAgZmNzLmZvY3VzZWQgPSBtdWlGb3JtQ29udHJvbCA/IG11aUZvcm1Db250cm9sLmZvY3VzZWQgOiBmb2N1c2VkOyAvLyBUaGUgYmx1ciB3b24ndCBmaXJlIHdoZW4gdGhlIGRpc2FibGVkIHN0YXRlIGlzIHNldCBvbiBhIGZvY3VzZWQgaW5wdXQuXG4gIC8vIFdlIG5lZWQgdG8gYm9vayBrZWVwIHRoZSBmb2N1c2VkIHN0YXRlIG1hbnVhbGx5LlxuXG4gIFJlYWN0LnVzZUVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgaWYgKCFtdWlGb3JtQ29udHJvbCAmJiBkaXNhYmxlZCAmJiBmb2N1c2VkKSB7XG4gICAgICBzZXRGb2N1c2VkKGZhbHNlKTtcblxuICAgICAgaWYgKG9uQmx1cikge1xuICAgICAgICBvbkJsdXIoKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIFttdWlGb3JtQ29udHJvbCwgZGlzYWJsZWQsIGZvY3VzZWQsIG9uQmx1cl0pO1xuICB2YXIgb25GaWxsZWQgPSBtdWlGb3JtQ29udHJvbCAmJiBtdWlGb3JtQ29udHJvbC5vbkZpbGxlZDtcbiAgdmFyIG9uRW1wdHkgPSBtdWlGb3JtQ29udHJvbCAmJiBtdWlGb3JtQ29udHJvbC5vbkVtcHR5O1xuICB2YXIgY2hlY2tEaXJ0eSA9IFJlYWN0LnVzZUNhbGxiYWNrKGZ1bmN0aW9uIChvYmopIHtcbiAgICBpZiAoaXNGaWxsZWQob2JqKSkge1xuICAgICAgaWYgKG9uRmlsbGVkKSB7XG4gICAgICAgIG9uRmlsbGVkKCk7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChvbkVtcHR5KSB7XG4gICAgICBvbkVtcHR5KCk7XG4gICAgfVxuICB9LCBbb25GaWxsZWQsIG9uRW1wdHldKTtcbiAgdXNlRW5oYW5jZWRFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgIGlmIChpc0NvbnRyb2xsZWQpIHtcbiAgICAgIGNoZWNrRGlydHkoe1xuICAgICAgICB2YWx1ZTogdmFsdWVcbiAgICAgIH0pO1xuICAgIH1cbiAgfSwgW3ZhbHVlLCBjaGVja0RpcnR5LCBpc0NvbnRyb2xsZWRdKTtcblxuICB2YXIgaGFuZGxlRm9jdXMgPSBmdW5jdGlvbiBoYW5kbGVGb2N1cyhldmVudCkge1xuICAgIC8vIEZpeCBhIGJ1ZyB3aXRoIElFIDExIHdoZXJlIHRoZSBmb2N1cy9ibHVyIGV2ZW50cyBhcmUgdHJpZ2dlcmVkXG4gICAgLy8gd2hpbGUgdGhlIGlucHV0IGlzIGRpc2FibGVkLlxuICAgIGlmIChmY3MuZGlzYWJsZWQpIHtcbiAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmIChvbkZvY3VzKSB7XG4gICAgICBvbkZvY3VzKGV2ZW50KTtcbiAgICB9XG5cbiAgICBpZiAoaW5wdXRQcm9wc1Byb3Aub25Gb2N1cykge1xuICAgICAgaW5wdXRQcm9wc1Byb3Aub25Gb2N1cyhldmVudCk7XG4gICAgfVxuXG4gICAgaWYgKG11aUZvcm1Db250cm9sICYmIG11aUZvcm1Db250cm9sLm9uRm9jdXMpIHtcbiAgICAgIG11aUZvcm1Db250cm9sLm9uRm9jdXMoZXZlbnQpO1xuICAgIH0gZWxzZSB7XG4gICAgICBzZXRGb2N1c2VkKHRydWUpO1xuICAgIH1cbiAgfTtcblxuICB2YXIgaGFuZGxlQmx1ciA9IGZ1bmN0aW9uIGhhbmRsZUJsdXIoZXZlbnQpIHtcbiAgICBpZiAob25CbHVyKSB7XG4gICAgICBvbkJsdXIoZXZlbnQpO1xuICAgIH1cblxuICAgIGlmIChpbnB1dFByb3BzUHJvcC5vbkJsdXIpIHtcbiAgICAgIGlucHV0UHJvcHNQcm9wLm9uQmx1cihldmVudCk7XG4gICAgfVxuXG4gICAgaWYgKG11aUZvcm1Db250cm9sICYmIG11aUZvcm1Db250cm9sLm9uQmx1cikge1xuICAgICAgbXVpRm9ybUNvbnRyb2wub25CbHVyKGV2ZW50KTtcbiAgICB9IGVsc2Uge1xuICAgICAgc2V0Rm9jdXNlZChmYWxzZSk7XG4gICAgfVxuICB9O1xuXG4gIHZhciBoYW5kbGVDaGFuZ2UgPSBmdW5jdGlvbiBoYW5kbGVDaGFuZ2UoZXZlbnQpIHtcbiAgICBpZiAoIWlzQ29udHJvbGxlZCkge1xuICAgICAgdmFyIGVsZW1lbnQgPSBldmVudC50YXJnZXQgfHwgaW5wdXRSZWYuY3VycmVudDtcblxuICAgICAgaWYgKGVsZW1lbnQgPT0gbnVsbCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gXCJNYXRlcmlhbC1VSTogRXhwZWN0ZWQgdmFsaWQgaW5wdXQgdGFyZ2V0LiBEaWQgeW91IHVzZSBhIGN1c3RvbSBgaW5wdXRDb21wb25lbnRgIGFuZCBmb3JnZXQgdG8gZm9yd2FyZCByZWZzPyBTZWUgaHR0cHM6Ly9tYXRlcmlhbC11aS5jb20vci9pbnB1dC1jb21wb25lbnQtcmVmLWludGVyZmFjZSBmb3IgbW9yZSBpbmZvLlwiIDogX2Zvcm1hdE11aUVycm9yTWVzc2FnZSgxKSk7XG4gICAgICB9XG5cbiAgICAgIGNoZWNrRGlydHkoe1xuICAgICAgICB2YWx1ZTogZWxlbWVudC52YWx1ZVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiA+IDEgPyBfbGVuIC0gMSA6IDApLCBfa2V5ID0gMTsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5IC0gMV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgaWYgKGlucHV0UHJvcHNQcm9wLm9uQ2hhbmdlKSB7XG4gICAgICBpbnB1dFByb3BzUHJvcC5vbkNoYW5nZS5hcHBseShpbnB1dFByb3BzUHJvcCwgW2V2ZW50XS5jb25jYXQoYXJncykpO1xuICAgIH0gLy8gUGVyZm9ybSBpbiB0aGUgd2lsbFVwZGF0ZVxuXG5cbiAgICBpZiAob25DaGFuZ2UpIHtcbiAgICAgIG9uQ2hhbmdlLmFwcGx5KHZvaWQgMCwgW2V2ZW50XS5jb25jYXQoYXJncykpO1xuICAgIH1cbiAgfTsgLy8gQ2hlY2sgdGhlIGlucHV0IHN0YXRlIG9uIG1vdW50LCBpbiBjYXNlIGl0IHdhcyBmaWxsZWQgYnkgdGhlIHVzZXJcbiAgLy8gb3IgYXV0byBmaWxsZWQgYnkgdGhlIGJyb3dzZXIgYmVmb3JlIHRoZSBoeWRyYXRpb24gKGZvciBTU1IpLlxuXG5cbiAgUmVhY3QudXNlRWZmZWN0KGZ1bmN0aW9uICgpIHtcbiAgICBjaGVja0RpcnR5KGlucHV0UmVmLmN1cnJlbnQpO1xuICB9LCBbXSk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgcmVhY3QtaG9va3MvZXhoYXVzdGl2ZS1kZXBzXG5cbiAgdmFyIGhhbmRsZUNsaWNrID0gZnVuY3Rpb24gaGFuZGxlQ2xpY2soZXZlbnQpIHtcbiAgICBpZiAoaW5wdXRSZWYuY3VycmVudCAmJiBldmVudC5jdXJyZW50VGFyZ2V0ID09PSBldmVudC50YXJnZXQpIHtcbiAgICAgIGlucHV0UmVmLmN1cnJlbnQuZm9jdXMoKTtcbiAgICB9XG5cbiAgICBpZiAob25DbGljaykge1xuICAgICAgb25DbGljayhldmVudCk7XG4gICAgfVxuICB9O1xuXG4gIHZhciBJbnB1dENvbXBvbmVudCA9IGlucHV0Q29tcG9uZW50O1xuXG4gIHZhciBpbnB1dFByb3BzID0gX2V4dGVuZHMoe30sIGlucHV0UHJvcHNQcm9wLCB7XG4gICAgcmVmOiBoYW5kbGVJbnB1dFJlZlxuICB9KTtcblxuICBpZiAodHlwZW9mIElucHV0Q29tcG9uZW50ICE9PSAnc3RyaW5nJykge1xuICAgIGlucHV0UHJvcHMgPSBfZXh0ZW5kcyh7XG4gICAgICAvLyBSZW5hbWUgcmVmIHRvIGlucHV0UmVmIGFzIHdlIGRvbid0IGtub3cgdGhlXG4gICAgICAvLyBwcm92aWRlZCBgaW5wdXRDb21wb25lbnRgIHN0cnVjdHVyZS5cbiAgICAgIGlucHV0UmVmOiBoYW5kbGVJbnB1dFJlZixcbiAgICAgIHR5cGU6IHR5cGVcbiAgICB9LCBpbnB1dFByb3BzLCB7XG4gICAgICByZWY6IG51bGxcbiAgICB9KTtcbiAgfSBlbHNlIGlmIChtdWx0aWxpbmUpIHtcbiAgICBpZiAocm93cyAmJiAhcm93c01heCAmJiAhcm93c01pbikge1xuICAgICAgSW5wdXRDb21wb25lbnQgPSAndGV4dGFyZWEnO1xuICAgIH0gZWxzZSB7XG4gICAgICBpbnB1dFByb3BzID0gX2V4dGVuZHMoe1xuICAgICAgICByb3dzOiByb3dzLFxuICAgICAgICByb3dzTWF4OiByb3dzTWF4XG4gICAgICB9LCBpbnB1dFByb3BzKTtcbiAgICAgIElucHV0Q29tcG9uZW50ID0gVGV4dGFyZWFBdXRvc2l6ZTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgaW5wdXRQcm9wcyA9IF9leHRlbmRzKHtcbiAgICAgIHR5cGU6IHR5cGVcbiAgICB9LCBpbnB1dFByb3BzKTtcbiAgfVxuXG4gIHZhciBoYW5kbGVBdXRvRmlsbCA9IGZ1bmN0aW9uIGhhbmRsZUF1dG9GaWxsKGV2ZW50KSB7XG4gICAgLy8gUHJvdmlkZSBhIGZha2UgdmFsdWUgYXMgQ2hyb21lIG1pZ2h0IG5vdCBsZXQgeW91IGFjY2VzcyBpdCBmb3Igc2VjdXJpdHkgcmVhc29ucy5cbiAgICBjaGVja0RpcnR5KGV2ZW50LmFuaW1hdGlvbk5hbWUgPT09ICdtdWktYXV0by1maWxsLWNhbmNlbCcgPyBpbnB1dFJlZi5jdXJyZW50IDoge1xuICAgICAgdmFsdWU6ICd4J1xuICAgIH0pO1xuICB9O1xuXG4gIFJlYWN0LnVzZUVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgaWYgKG11aUZvcm1Db250cm9sKSB7XG4gICAgICBtdWlGb3JtQ29udHJvbC5zZXRBZG9ybmVkU3RhcnQoQm9vbGVhbihzdGFydEFkb3JubWVudCkpO1xuICAgIH1cbiAgfSwgW211aUZvcm1Db250cm9sLCBzdGFydEFkb3JubWVudF0pO1xuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgX2V4dGVuZHMoe1xuICAgIGNsYXNzTmFtZTogY2xzeChjbGFzc2VzLnJvb3QsIGNsYXNzZXNbXCJjb2xvclwiLmNvbmNhdChjYXBpdGFsaXplKGZjcy5jb2xvciB8fCAncHJpbWFyeScpKV0sIGNsYXNzTmFtZSwgZmNzLmRpc2FibGVkICYmIGNsYXNzZXMuZGlzYWJsZWQsIGZjcy5lcnJvciAmJiBjbGFzc2VzLmVycm9yLCBmdWxsV2lkdGggJiYgY2xhc3Nlcy5mdWxsV2lkdGgsIGZjcy5mb2N1c2VkICYmIGNsYXNzZXMuZm9jdXNlZCwgbXVpRm9ybUNvbnRyb2wgJiYgY2xhc3Nlcy5mb3JtQ29udHJvbCwgbXVsdGlsaW5lICYmIGNsYXNzZXMubXVsdGlsaW5lLCBzdGFydEFkb3JubWVudCAmJiBjbGFzc2VzLmFkb3JuZWRTdGFydCwgZW5kQWRvcm5tZW50ICYmIGNsYXNzZXMuYWRvcm5lZEVuZCwgZmNzLm1hcmdpbiA9PT0gJ2RlbnNlJyAmJiBjbGFzc2VzLm1hcmdpbkRlbnNlKSxcbiAgICBvbkNsaWNrOiBoYW5kbGVDbGljayxcbiAgICByZWY6IHJlZlxuICB9LCBvdGhlciksIHN0YXJ0QWRvcm5tZW50LCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChGb3JtQ29udHJvbENvbnRleHQuUHJvdmlkZXIsIHtcbiAgICB2YWx1ZTogbnVsbFxuICB9LCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChJbnB1dENvbXBvbmVudCwgX2V4dGVuZHMoe1xuICAgIFwiYXJpYS1pbnZhbGlkXCI6IGZjcy5lcnJvcixcbiAgICBcImFyaWEtZGVzY3JpYmVkYnlcIjogYXJpYURlc2NyaWJlZGJ5LFxuICAgIGF1dG9Db21wbGV0ZTogYXV0b0NvbXBsZXRlLFxuICAgIGF1dG9Gb2N1czogYXV0b0ZvY3VzLFxuICAgIGRlZmF1bHRWYWx1ZTogZGVmYXVsdFZhbHVlLFxuICAgIGRpc2FibGVkOiBmY3MuZGlzYWJsZWQsXG4gICAgaWQ6IGlkLFxuICAgIG9uQW5pbWF0aW9uU3RhcnQ6IGhhbmRsZUF1dG9GaWxsLFxuICAgIG5hbWU6IG5hbWUsXG4gICAgcGxhY2Vob2xkZXI6IHBsYWNlaG9sZGVyLFxuICAgIHJlYWRPbmx5OiByZWFkT25seSxcbiAgICByZXF1aXJlZDogZmNzLnJlcXVpcmVkLFxuICAgIHJvd3M6IHJvd3MsXG4gICAgdmFsdWU6IHZhbHVlLFxuICAgIG9uS2V5RG93bjogb25LZXlEb3duLFxuICAgIG9uS2V5VXA6IG9uS2V5VXBcbiAgfSwgaW5wdXRQcm9wcywge1xuICAgIGNsYXNzTmFtZTogY2xzeChjbGFzc2VzLmlucHV0LCBpbnB1dFByb3BzUHJvcC5jbGFzc05hbWUsIGZjcy5kaXNhYmxlZCAmJiBjbGFzc2VzLmRpc2FibGVkLCBtdWx0aWxpbmUgJiYgY2xhc3Nlcy5pbnB1dE11bHRpbGluZSwgZmNzLmhpZGRlbkxhYmVsICYmIGNsYXNzZXMuaW5wdXRIaWRkZW5MYWJlbCwgc3RhcnRBZG9ybm1lbnQgJiYgY2xhc3Nlcy5pbnB1dEFkb3JuZWRTdGFydCwgZW5kQWRvcm5tZW50ICYmIGNsYXNzZXMuaW5wdXRBZG9ybmVkRW5kLCB0eXBlID09PSAnc2VhcmNoJyAmJiBjbGFzc2VzLmlucHV0VHlwZVNlYXJjaCwgZmNzLm1hcmdpbiA9PT0gJ2RlbnNlJyAmJiBjbGFzc2VzLmlucHV0TWFyZ2luRGVuc2UpLFxuICAgIG9uQmx1cjogaGFuZGxlQmx1cixcbiAgICBvbkNoYW5nZTogaGFuZGxlQ2hhbmdlLFxuICAgIG9uRm9jdXM6IGhhbmRsZUZvY3VzXG4gIH0pKSksIGVuZEFkb3JubWVudCwgcmVuZGVyU3VmZml4ID8gcmVuZGVyU3VmZml4KF9leHRlbmRzKHt9LCBmY3MsIHtcbiAgICBzdGFydEFkb3JubWVudDogc3RhcnRBZG9ybm1lbnRcbiAgfSkpIDogbnVsbCk7XG59KTtcbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IElucHV0QmFzZS5wcm9wVHlwZXMgPSB7XG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIFdhcm5pbmcgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgLy8gfCBUaGVzZSBQcm9wVHlwZXMgYXJlIGdlbmVyYXRlZCBmcm9tIHRoZSBUeXBlU2NyaXB0IHR5cGUgZGVmaW5pdGlvbnMgfFxuICAvLyB8ICAgICBUbyB1cGRhdGUgdGhlbSBlZGl0IHRoZSBkLnRzIGZpbGUgYW5kIHJ1biBcInlhcm4gcHJvcHR5cGVzXCIgICAgIHxcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICAnYXJpYS1kZXNjcmliZWRieSc6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIFRoaXMgcHJvcCBoZWxwcyB1c2VycyB0byBmaWxsIGZvcm1zIGZhc3RlciwgZXNwZWNpYWxseSBvbiBtb2JpbGUgZGV2aWNlcy5cbiAgICogVGhlIG5hbWUgY2FuIGJlIGNvbmZ1c2luZywgYXMgaXQncyBtb3JlIGxpa2UgYW4gYXV0b2ZpbGwuXG4gICAqIFlvdSBjYW4gbGVhcm4gbW9yZSBhYm91dCBpdCBbZm9sbG93aW5nIHRoZSBzcGVjaWZpY2F0aW9uXShodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9mb3JtLWNvbnRyb2wtaW5mcmFzdHJ1Y3R1cmUuaHRtbCNhdXRvZmlsbCkuXG4gICAqL1xuICBhdXRvQ29tcGxldGU6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGBpbnB1dGAgZWxlbWVudCB3aWxsIGJlIGZvY3VzZWQgZHVyaW5nIHRoZSBmaXJzdCBtb3VudC5cbiAgICovXG4gIGF1dG9Gb2N1czogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIE92ZXJyaWRlIG9yIGV4dGVuZCB0aGUgc3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICogU2VlIFtDU1MgQVBJXSgjY3NzKSBiZWxvdyBmb3IgbW9yZSBkZXRhaWxzLlxuICAgKi9cbiAgY2xhc3NlczogUHJvcFR5cGVzLm9iamVjdCxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBUaGUgY29sb3Igb2YgdGhlIGNvbXBvbmVudC4gSXQgc3VwcG9ydHMgdGhvc2UgdGhlbWUgY29sb3JzIHRoYXQgbWFrZSBzZW5zZSBmb3IgdGhpcyBjb21wb25lbnQuXG4gICAqL1xuICBjb2xvcjogUHJvcFR5cGVzLm9uZU9mKFsncHJpbWFyeScsICdzZWNvbmRhcnknXSksXG5cbiAgLyoqXG4gICAqIFRoZSBkZWZhdWx0IGBpbnB1dGAgZWxlbWVudCB2YWx1ZS4gVXNlIHdoZW4gdGhlIGNvbXBvbmVudCBpcyBub3QgY29udHJvbGxlZC5cbiAgICovXG4gIGRlZmF1bHRWYWx1ZTogUHJvcFR5cGVzLmFueSxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgYGlucHV0YCBlbGVtZW50IHdpbGwgYmUgZGlzYWJsZWQuXG4gICAqL1xuICBkaXNhYmxlZDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIEVuZCBgSW5wdXRBZG9ybm1lbnRgIGZvciB0aGlzIGNvbXBvbmVudC5cbiAgICovXG4gIGVuZEFkb3JubWVudDogUHJvcFR5cGVzLm5vZGUsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGlucHV0IHdpbGwgaW5kaWNhdGUgYW4gZXJyb3IuIFRoaXMgaXMgbm9ybWFsbHkgb2J0YWluZWQgdmlhIGNvbnRleHQgZnJvbVxuICAgKiBGb3JtQ29udHJvbC5cbiAgICovXG4gIGVycm9yOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgaW5wdXQgd2lsbCB0YWtlIHVwIHRoZSBmdWxsIHdpZHRoIG9mIGl0cyBjb250YWluZXIuXG4gICAqL1xuICBmdWxsV2lkdGg6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBUaGUgaWQgb2YgdGhlIGBpbnB1dGAgZWxlbWVudC5cbiAgICovXG4gIGlkOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBUaGUgY29tcG9uZW50IHVzZWQgZm9yIHRoZSBgaW5wdXRgIGVsZW1lbnQuXG4gICAqIEVpdGhlciBhIHN0cmluZyB0byB1c2UgYSBIVE1MIGVsZW1lbnQgb3IgYSBjb21wb25lbnQuXG4gICAqL1xuICBpbnB1dENvbXBvbmVudDogUHJvcFR5cGVzLmVsZW1lbnRUeXBlLFxuXG4gIC8qKlxuICAgKiBbQXR0cmlidXRlc10oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSFRNTC9FbGVtZW50L2lucHV0I0F0dHJpYnV0ZXMpIGFwcGxpZWQgdG8gdGhlIGBpbnB1dGAgZWxlbWVudC5cbiAgICovXG4gIGlucHV0UHJvcHM6IFByb3BUeXBlcy5vYmplY3QsXG5cbiAgLyoqXG4gICAqIFBhc3MgYSByZWYgdG8gdGhlIGBpbnB1dGAgZWxlbWVudC5cbiAgICovXG4gIGlucHV0UmVmOiByZWZUeXBlLFxuXG4gIC8qKlxuICAgKiBJZiBgZGVuc2VgLCB3aWxsIGFkanVzdCB2ZXJ0aWNhbCBzcGFjaW5nLiBUaGlzIGlzIG5vcm1hbGx5IG9idGFpbmVkIHZpYSBjb250ZXh0IGZyb21cbiAgICogRm9ybUNvbnRyb2wuXG4gICAqL1xuICBtYXJnaW46IFByb3BUeXBlcy5vbmVPZihbJ2RlbnNlJywgJ25vbmUnXSksXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgYSB0ZXh0YXJlYSBlbGVtZW50IHdpbGwgYmUgcmVuZGVyZWQuXG4gICAqL1xuICBtdWx0aWxpbmU6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBOYW1lIGF0dHJpYnV0ZSBvZiB0aGUgYGlucHV0YCBlbGVtZW50LlxuICAgKi9cbiAgbmFtZTogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgd2hlbiB0aGUgaW5wdXQgaXMgYmx1cnJlZC5cbiAgICpcbiAgICogTm90aWNlIHRoYXQgdGhlIGZpcnN0IGFyZ3VtZW50IChldmVudCkgbWlnaHQgYmUgdW5kZWZpbmVkLlxuICAgKi9cbiAgb25CbHVyOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgd2hlbiB0aGUgdmFsdWUgaXMgY2hhbmdlZC5cbiAgICpcbiAgICogQHBhcmFtIHtvYmplY3R9IGV2ZW50IFRoZSBldmVudCBzb3VyY2Ugb2YgdGhlIGNhbGxiYWNrLlxuICAgKiBZb3UgY2FuIHB1bGwgb3V0IHRoZSBuZXcgdmFsdWUgYnkgYWNjZXNzaW5nIGBldmVudC50YXJnZXQudmFsdWVgIChzdHJpbmcpLlxuICAgKi9cbiAgb25DaGFuZ2U6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBvbkNsaWNrOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgb25Gb2N1czogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIG9uS2V5RG93bjogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIG9uS2V5VXA6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBUaGUgc2hvcnQgaGludCBkaXNwbGF5ZWQgaW4gdGhlIGlucHV0IGJlZm9yZSB0aGUgdXNlciBlbnRlcnMgYSB2YWx1ZS5cbiAgICovXG4gIHBsYWNlaG9sZGVyOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBJdCBwcmV2ZW50cyB0aGUgdXNlciBmcm9tIGNoYW5naW5nIHRoZSB2YWx1ZSBvZiB0aGUgZmllbGRcbiAgICogKG5vdCBmcm9tIGludGVyYWN0aW5nIHdpdGggdGhlIGZpZWxkKS5cbiAgICovXG4gIHJlYWRPbmx5OiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgcmVuZGVyU3VmZml4OiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgYGlucHV0YCBlbGVtZW50IHdpbGwgYmUgcmVxdWlyZWQuXG4gICAqL1xuICByZXF1aXJlZDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIE51bWJlciBvZiByb3dzIHRvIGRpc3BsYXkgd2hlbiBtdWx0aWxpbmUgb3B0aW9uIGlzIHNldCB0byB0cnVlLlxuICAgKi9cbiAgcm93czogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLm51bWJlciwgUHJvcFR5cGVzLnN0cmluZ10pLFxuXG4gIC8qKlxuICAgKiBNYXhpbXVtIG51bWJlciBvZiByb3dzIHRvIGRpc3BsYXkgd2hlbiBtdWx0aWxpbmUgb3B0aW9uIGlzIHNldCB0byB0cnVlLlxuICAgKi9cbiAgcm93c01heDogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLm51bWJlciwgUHJvcFR5cGVzLnN0cmluZ10pLFxuXG4gIC8qKlxuICAgKiBNaW5pbXVtIG51bWJlciBvZiByb3dzIHRvIGRpc3BsYXkgd2hlbiBtdWx0aWxpbmUgb3B0aW9uIGlzIHNldCB0byB0cnVlLlxuICAgKi9cbiAgcm93c01pbjogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLm51bWJlciwgUHJvcFR5cGVzLnN0cmluZ10pLFxuXG4gIC8qKlxuICAgKiBTdGFydCBgSW5wdXRBZG9ybm1lbnRgIGZvciB0aGlzIGNvbXBvbmVudC5cbiAgICovXG4gIHN0YXJ0QWRvcm5tZW50OiBQcm9wVHlwZXMubm9kZSxcblxuICAvKipcbiAgICogVHlwZSBvZiB0aGUgYGlucHV0YCBlbGVtZW50LiBJdCBzaG91bGQgYmUgW2EgdmFsaWQgSFRNTDUgaW5wdXQgdHlwZV0oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSFRNTC9FbGVtZW50L2lucHV0I0Zvcm1fJTNDaW5wdXQlM0VfdHlwZXMpLlxuICAgKi9cbiAgdHlwZTogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogVGhlIHZhbHVlIG9mIHRoZSBgaW5wdXRgIGVsZW1lbnQsIHJlcXVpcmVkIGZvciBhIGNvbnRyb2xsZWQgY29tcG9uZW50LlxuICAgKi9cbiAgdmFsdWU6IFByb3BUeXBlcy5hbnlcbn0gOiB2b2lkIDA7XG5leHBvcnQgZGVmYXVsdCB3aXRoU3R5bGVzKHN0eWxlcywge1xuICBuYW1lOiAnTXVpSW5wdXRCYXNlJ1xufSkoSW5wdXRCYXNlKTsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzXCI7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGNsc3ggZnJvbSAnY2xzeCc7XG5pbXBvcnQgeyByZWZUeXBlIH0gZnJvbSAnQG1hdGVyaWFsLXVpL3V0aWxzJztcbmltcG9ydCBJbnB1dEJhc2UgZnJvbSAnLi4vSW5wdXRCYXNlJztcbmltcG9ydCB3aXRoU3R5bGVzIGZyb20gJy4uL3N0eWxlcy93aXRoU3R5bGVzJztcbmV4cG9ydCB2YXIgc3R5bGVzID0gZnVuY3Rpb24gc3R5bGVzKHRoZW1lKSB7XG4gIHZhciBsaWdodCA9IHRoZW1lLnBhbGV0dGUudHlwZSA9PT0gJ2xpZ2h0JztcbiAgdmFyIGJvdHRvbUxpbmVDb2xvciA9IGxpZ2h0ID8gJ3JnYmEoMCwgMCwgMCwgMC40MiknIDogJ3JnYmEoMjU1LCAyNTUsIDI1NSwgMC43KSc7XG4gIHJldHVybiB7XG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudC4gKi9cbiAgICByb290OiB7XG4gICAgICBwb3NpdGlvbjogJ3JlbGF0aXZlJ1xuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIHRoZSBjb21wb25lbnQgaXMgYSBkZXNjZW5kYW50IG9mIGBGb3JtQ29udHJvbGAuICovXG4gICAgZm9ybUNvbnRyb2w6IHtcbiAgICAgICdsYWJlbCArICYnOiB7XG4gICAgICAgIG1hcmdpblRvcDogMTZcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiB0aGUgY29tcG9uZW50IGlzIGZvY3VzZWQuICovXG4gICAgZm9jdXNlZDoge30sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBkaXNhYmxlZD17dHJ1ZX1gLiAqL1xuICAgIGRpc2FibGVkOiB7fSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgY29sb3Igc2Vjb25kYXJ5LiAqL1xuICAgIGNvbG9yU2Vjb25kYXJ5OiB7XG4gICAgICAnJiR1bmRlcmxpbmU6YWZ0ZXInOiB7XG4gICAgICAgIGJvcmRlckJvdHRvbUNvbG9yOiB0aGVtZS5wYWxldHRlLnNlY29uZGFyeS5tYWluXG4gICAgICB9XG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGRpc2FibGVVbmRlcmxpbmU9e2ZhbHNlfWAuICovXG4gICAgdW5kZXJsaW5lOiB7XG4gICAgICAnJjphZnRlcic6IHtcbiAgICAgICAgYm9yZGVyQm90dG9tOiBcIjJweCBzb2xpZCBcIi5jb25jYXQodGhlbWUucGFsZXR0ZS5wcmltYXJ5Lm1haW4pLFxuICAgICAgICBsZWZ0OiAwLFxuICAgICAgICBib3R0b206IDAsXG4gICAgICAgIC8vIERvaW5nIHRoZSBvdGhlciB3YXkgYXJvdW5kIGNyYXNoIG9uIElFIDExIFwiJydcIiBodHRwczovL2dpdGh1Yi5jb20vY3NzaW5qcy9qc3MvaXNzdWVzLzI0MlxuICAgICAgICBjb250ZW50OiAnXCJcIicsXG4gICAgICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgICAgICByaWdodDogMCxcbiAgICAgICAgdHJhbnNmb3JtOiAnc2NhbGVYKDApJyxcbiAgICAgICAgdHJhbnNpdGlvbjogdGhlbWUudHJhbnNpdGlvbnMuY3JlYXRlKCd0cmFuc2Zvcm0nLCB7XG4gICAgICAgICAgZHVyYXRpb246IHRoZW1lLnRyYW5zaXRpb25zLmR1cmF0aW9uLnNob3J0ZXIsXG4gICAgICAgICAgZWFzaW5nOiB0aGVtZS50cmFuc2l0aW9ucy5lYXNpbmcuZWFzZU91dFxuICAgICAgICB9KSxcbiAgICAgICAgcG9pbnRlckV2ZW50czogJ25vbmUnIC8vIFRyYW5zcGFyZW50IHRvIHRoZSBob3ZlciBzdHlsZS5cblxuICAgICAgfSxcbiAgICAgICcmJGZvY3VzZWQ6YWZ0ZXInOiB7XG4gICAgICAgIHRyYW5zZm9ybTogJ3NjYWxlWCgxKSdcbiAgICAgIH0sXG4gICAgICAnJiRlcnJvcjphZnRlcic6IHtcbiAgICAgICAgYm9yZGVyQm90dG9tQ29sb3I6IHRoZW1lLnBhbGV0dGUuZXJyb3IubWFpbixcbiAgICAgICAgdHJhbnNmb3JtOiAnc2NhbGVYKDEpJyAvLyBlcnJvciBpcyBhbHdheXMgdW5kZXJsaW5lZCBpbiByZWRcblxuICAgICAgfSxcbiAgICAgICcmOmJlZm9yZSc6IHtcbiAgICAgICAgYm9yZGVyQm90dG9tOiBcIjFweCBzb2xpZCBcIi5jb25jYXQoYm90dG9tTGluZUNvbG9yKSxcbiAgICAgICAgbGVmdDogMCxcbiAgICAgICAgYm90dG9tOiAwLFxuICAgICAgICAvLyBEb2luZyB0aGUgb3RoZXIgd2F5IGFyb3VuZCBjcmFzaCBvbiBJRSAxMSBcIicnXCIgaHR0cHM6Ly9naXRodWIuY29tL2Nzc2luanMvanNzL2lzc3Vlcy8yNDJcbiAgICAgICAgY29udGVudDogJ1wiXFxcXDAwYTBcIicsXG4gICAgICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgICAgICByaWdodDogMCxcbiAgICAgICAgdHJhbnNpdGlvbjogdGhlbWUudHJhbnNpdGlvbnMuY3JlYXRlKCdib3JkZXItYm90dG9tLWNvbG9yJywge1xuICAgICAgICAgIGR1cmF0aW9uOiB0aGVtZS50cmFuc2l0aW9ucy5kdXJhdGlvbi5zaG9ydGVyXG4gICAgICAgIH0pLFxuICAgICAgICBwb2ludGVyRXZlbnRzOiAnbm9uZScgLy8gVHJhbnNwYXJlbnQgdG8gdGhlIGhvdmVyIHN0eWxlLlxuXG4gICAgICB9LFxuICAgICAgJyY6aG92ZXI6bm90KCRkaXNhYmxlZCk6YmVmb3JlJzoge1xuICAgICAgICBib3JkZXJCb3R0b206IFwiMnB4IHNvbGlkIFwiLmNvbmNhdCh0aGVtZS5wYWxldHRlLnRleHQucHJpbWFyeSksXG4gICAgICAgIC8vIFJlc2V0IG9uIHRvdWNoIGRldmljZXMsIGl0IGRvZXNuJ3QgYWRkIHNwZWNpZmljaXR5XG4gICAgICAgICdAbWVkaWEgKGhvdmVyOiBub25lKSc6IHtcbiAgICAgICAgICBib3JkZXJCb3R0b206IFwiMXB4IHNvbGlkIFwiLmNvbmNhdChib3R0b21MaW5lQ29sb3IpXG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICAnJiRkaXNhYmxlZDpiZWZvcmUnOiB7XG4gICAgICAgIGJvcmRlckJvdHRvbVN0eWxlOiAnZG90dGVkJ1xuICAgICAgfVxuICAgIH0sXG5cbiAgICAvKiBQc2V1ZG8tY2xhc3MgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBlcnJvcj17dHJ1ZX1gLiAqL1xuICAgIGVycm9yOiB7fSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSBgaW5wdXRgIGVsZW1lbnQgaWYgYG1hcmdpbj1cImRlbnNlXCJgLiAqL1xuICAgIG1hcmdpbkRlbnNlOiB7fSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYG11bHRpbGluZT17dHJ1ZX1gLiAqL1xuICAgIG11bHRpbGluZToge30sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBmdWxsV2lkdGg9e3RydWV9YC4gKi9cbiAgICBmdWxsV2lkdGg6IHt9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIGBpbnB1dGAgZWxlbWVudC4gKi9cbiAgICBpbnB1dDoge30sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgYGlucHV0YCBlbGVtZW50IGlmIGBtYXJnaW49XCJkZW5zZVwiYC4gKi9cbiAgICBpbnB1dE1hcmdpbkRlbnNlOiB7fSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSBgaW5wdXRgIGVsZW1lbnQgaWYgYG11bHRpbGluZT17dHJ1ZX1gLiAqL1xuICAgIGlucHV0TXVsdGlsaW5lOiB7fSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSBgaW5wdXRgIGVsZW1lbnQgaWYgYHR5cGU9XCJzZWFyY2hcImAuICovXG4gICAgaW5wdXRUeXBlU2VhcmNoOiB7fVxuICB9O1xufTtcbnZhciBJbnB1dCA9IC8qI19fUFVSRV9fKi9SZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIElucHV0KHByb3BzLCByZWYpIHtcbiAgdmFyIGRpc2FibGVVbmRlcmxpbmUgPSBwcm9wcy5kaXNhYmxlVW5kZXJsaW5lLFxuICAgICAgY2xhc3NlcyA9IHByb3BzLmNsYXNzZXMsXG4gICAgICBfcHJvcHMkZnVsbFdpZHRoID0gcHJvcHMuZnVsbFdpZHRoLFxuICAgICAgZnVsbFdpZHRoID0gX3Byb3BzJGZ1bGxXaWR0aCA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcHJvcHMkZnVsbFdpZHRoLFxuICAgICAgX3Byb3BzJGlucHV0Q29tcG9uZW50ID0gcHJvcHMuaW5wdXRDb21wb25lbnQsXG4gICAgICBpbnB1dENvbXBvbmVudCA9IF9wcm9wcyRpbnB1dENvbXBvbmVudCA9PT0gdm9pZCAwID8gJ2lucHV0JyA6IF9wcm9wcyRpbnB1dENvbXBvbmVudCxcbiAgICAgIF9wcm9wcyRtdWx0aWxpbmUgPSBwcm9wcy5tdWx0aWxpbmUsXG4gICAgICBtdWx0aWxpbmUgPSBfcHJvcHMkbXVsdGlsaW5lID09PSB2b2lkIDAgPyBmYWxzZSA6IF9wcm9wcyRtdWx0aWxpbmUsXG4gICAgICBfcHJvcHMkdHlwZSA9IHByb3BzLnR5cGUsXG4gICAgICB0eXBlID0gX3Byb3BzJHR5cGUgPT09IHZvaWQgMCA/ICd0ZXh0JyA6IF9wcm9wcyR0eXBlLFxuICAgICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMocHJvcHMsIFtcImRpc2FibGVVbmRlcmxpbmVcIiwgXCJjbGFzc2VzXCIsIFwiZnVsbFdpZHRoXCIsIFwiaW5wdXRDb21wb25lbnRcIiwgXCJtdWx0aWxpbmVcIiwgXCJ0eXBlXCJdKTtcblxuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoSW5wdXRCYXNlLCBfZXh0ZW5kcyh7XG4gICAgY2xhc3NlczogX2V4dGVuZHMoe30sIGNsYXNzZXMsIHtcbiAgICAgIHJvb3Q6IGNsc3goY2xhc3Nlcy5yb290LCAhZGlzYWJsZVVuZGVybGluZSAmJiBjbGFzc2VzLnVuZGVybGluZSksXG4gICAgICB1bmRlcmxpbmU6IG51bGxcbiAgICB9KSxcbiAgICBmdWxsV2lkdGg6IGZ1bGxXaWR0aCxcbiAgICBpbnB1dENvbXBvbmVudDogaW5wdXRDb21wb25lbnQsXG4gICAgbXVsdGlsaW5lOiBtdWx0aWxpbmUsXG4gICAgcmVmOiByZWYsXG4gICAgdHlwZTogdHlwZVxuICB9LCBvdGhlcikpO1xufSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBJbnB1dC5wcm9wVHlwZXMgPSB7XG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIFdhcm5pbmcgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgLy8gfCBUaGVzZSBQcm9wVHlwZXMgYXJlIGdlbmVyYXRlZCBmcm9tIHRoZSBUeXBlU2NyaXB0IHR5cGUgZGVmaW5pdGlvbnMgfFxuICAvLyB8ICAgICBUbyB1cGRhdGUgdGhlbSBlZGl0IHRoZSBkLnRzIGZpbGUgYW5kIHJ1biBcInlhcm4gcHJvcHR5cGVzXCIgICAgIHxcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4gIC8qKlxuICAgKiBUaGlzIHByb3AgaGVscHMgdXNlcnMgdG8gZmlsbCBmb3JtcyBmYXN0ZXIsIGVzcGVjaWFsbHkgb24gbW9iaWxlIGRldmljZXMuXG4gICAqIFRoZSBuYW1lIGNhbiBiZSBjb25mdXNpbmcsIGFzIGl0J3MgbW9yZSBsaWtlIGFuIGF1dG9maWxsLlxuICAgKiBZb3UgY2FuIGxlYXJuIG1vcmUgYWJvdXQgaXQgW2ZvbGxvd2luZyB0aGUgc3BlY2lmaWNhdGlvbl0oaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2UvZm9ybS1jb250cm9sLWluZnJhc3RydWN0dXJlLmh0bWwjYXV0b2ZpbGwpLlxuICAgKi9cbiAgYXV0b0NvbXBsZXRlOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBgaW5wdXRgIGVsZW1lbnQgd2lsbCBiZSBmb2N1c2VkIGR1cmluZyB0aGUgZmlyc3QgbW91bnQuXG4gICAqL1xuICBhdXRvRm9jdXM6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBPdmVycmlkZSBvciBleHRlbmQgdGhlIHN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAqIFNlZSBbQ1NTIEFQSV0oI2NzcykgYmVsb3cgZm9yIG1vcmUgZGV0YWlscy5cbiAgICovXG4gIGNsYXNzZXM6IFByb3BUeXBlcy5vYmplY3QsXG5cbiAgLyoqXG4gICAqIFRoZSBjb2xvciBvZiB0aGUgY29tcG9uZW50LiBJdCBzdXBwb3J0cyB0aG9zZSB0aGVtZSBjb2xvcnMgdGhhdCBtYWtlIHNlbnNlIGZvciB0aGlzIGNvbXBvbmVudC5cbiAgICovXG4gIGNvbG9yOiBQcm9wVHlwZXMub25lT2YoWydwcmltYXJ5JywgJ3NlY29uZGFyeSddKSxcblxuICAvKipcbiAgICogVGhlIGRlZmF1bHQgYGlucHV0YCBlbGVtZW50IHZhbHVlLiBVc2Ugd2hlbiB0aGUgY29tcG9uZW50IGlzIG5vdCBjb250cm9sbGVkLlxuICAgKi9cbiAgZGVmYXVsdFZhbHVlOiBQcm9wVHlwZXMuYW55LFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBgaW5wdXRgIGVsZW1lbnQgd2lsbCBiZSBkaXNhYmxlZC5cbiAgICovXG4gIGRpc2FibGVkOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgaW5wdXQgd2lsbCBub3QgaGF2ZSBhbiB1bmRlcmxpbmUuXG4gICAqL1xuICBkaXNhYmxlVW5kZXJsaW5lOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogRW5kIGBJbnB1dEFkb3JubWVudGAgZm9yIHRoaXMgY29tcG9uZW50LlxuICAgKi9cbiAgZW5kQWRvcm5tZW50OiBQcm9wVHlwZXMubm9kZSxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgaW5wdXQgd2lsbCBpbmRpY2F0ZSBhbiBlcnJvci4gVGhpcyBpcyBub3JtYWxseSBvYnRhaW5lZCB2aWEgY29udGV4dCBmcm9tXG4gICAqIEZvcm1Db250cm9sLlxuICAgKi9cbiAgZXJyb3I6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBpbnB1dCB3aWxsIHRha2UgdXAgdGhlIGZ1bGwgd2lkdGggb2YgaXRzIGNvbnRhaW5lci5cbiAgICovXG4gIGZ1bGxXaWR0aDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIFRoZSBpZCBvZiB0aGUgYGlucHV0YCBlbGVtZW50LlxuICAgKi9cbiAgaWQ6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIFRoZSBjb21wb25lbnQgdXNlZCBmb3IgdGhlIGBpbnB1dGAgZWxlbWVudC5cbiAgICogRWl0aGVyIGEgc3RyaW5nIHRvIHVzZSBhIEhUTUwgZWxlbWVudCBvciBhIGNvbXBvbmVudC5cbiAgICovXG4gIGlucHV0Q29tcG9uZW50OiBQcm9wVHlwZXMuZWxlbWVudFR5cGUsXG5cbiAgLyoqXG4gICAqIFtBdHRyaWJ1dGVzXShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9IVE1ML0VsZW1lbnQvaW5wdXQjQXR0cmlidXRlcykgYXBwbGllZCB0byB0aGUgYGlucHV0YCBlbGVtZW50LlxuICAgKi9cbiAgaW5wdXRQcm9wczogUHJvcFR5cGVzLm9iamVjdCxcblxuICAvKipcbiAgICogUGFzcyBhIHJlZiB0byB0aGUgYGlucHV0YCBlbGVtZW50LlxuICAgKi9cbiAgaW5wdXRSZWY6IHJlZlR5cGUsXG5cbiAgLyoqXG4gICAqIElmIGBkZW5zZWAsIHdpbGwgYWRqdXN0IHZlcnRpY2FsIHNwYWNpbmcuIFRoaXMgaXMgbm9ybWFsbHkgb2J0YWluZWQgdmlhIGNvbnRleHQgZnJvbVxuICAgKiBGb3JtQ29udHJvbC5cbiAgICovXG4gIG1hcmdpbjogUHJvcFR5cGVzLm9uZU9mKFsnZGVuc2UnLCAnbm9uZSddKSxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCBhIHRleHRhcmVhIGVsZW1lbnQgd2lsbCBiZSByZW5kZXJlZC5cbiAgICovXG4gIG11bHRpbGluZTogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIE5hbWUgYXR0cmlidXRlIG9mIHRoZSBgaW5wdXRgIGVsZW1lbnQuXG4gICAqL1xuICBuYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCB3aGVuIHRoZSB2YWx1ZSBpcyBjaGFuZ2VkLlxuICAgKlxuICAgKiBAcGFyYW0ge29iamVjdH0gZXZlbnQgVGhlIGV2ZW50IHNvdXJjZSBvZiB0aGUgY2FsbGJhY2suXG4gICAqIFlvdSBjYW4gcHVsbCBvdXQgdGhlIG5ldyB2YWx1ZSBieSBhY2Nlc3NpbmcgYGV2ZW50LnRhcmdldC52YWx1ZWAgKHN0cmluZykuXG4gICAqL1xuICBvbkNoYW5nZTogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIFRoZSBzaG9ydCBoaW50IGRpc3BsYXllZCBpbiB0aGUgaW5wdXQgYmVmb3JlIHRoZSB1c2VyIGVudGVycyBhIHZhbHVlLlxuICAgKi9cbiAgcGxhY2Vob2xkZXI6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIEl0IHByZXZlbnRzIHRoZSB1c2VyIGZyb20gY2hhbmdpbmcgdGhlIHZhbHVlIG9mIHRoZSBmaWVsZFxuICAgKiAobm90IGZyb20gaW50ZXJhY3Rpbmcgd2l0aCB0aGUgZmllbGQpLlxuICAgKi9cbiAgcmVhZE9ubHk6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBgaW5wdXRgIGVsZW1lbnQgd2lsbCBiZSByZXF1aXJlZC5cbiAgICovXG4gIHJlcXVpcmVkOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogTnVtYmVyIG9mIHJvd3MgdG8gZGlzcGxheSB3aGVuIG11bHRpbGluZSBvcHRpb24gaXMgc2V0IHRvIHRydWUuXG4gICAqL1xuICByb3dzOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMubnVtYmVyLCBQcm9wVHlwZXMuc3RyaW5nXSksXG5cbiAgLyoqXG4gICAqIE1heGltdW0gbnVtYmVyIG9mIHJvd3MgdG8gZGlzcGxheSB3aGVuIG11bHRpbGluZSBvcHRpb24gaXMgc2V0IHRvIHRydWUuXG4gICAqL1xuICByb3dzTWF4OiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMubnVtYmVyLCBQcm9wVHlwZXMuc3RyaW5nXSksXG5cbiAgLyoqXG4gICAqIFN0YXJ0IGBJbnB1dEFkb3JubWVudGAgZm9yIHRoaXMgY29tcG9uZW50LlxuICAgKi9cbiAgc3RhcnRBZG9ybm1lbnQ6IFByb3BUeXBlcy5ub2RlLFxuXG4gIC8qKlxuICAgKiBUeXBlIG9mIHRoZSBgaW5wdXRgIGVsZW1lbnQuIEl0IHNob3VsZCBiZSBbYSB2YWxpZCBIVE1MNSBpbnB1dCB0eXBlXShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9IVE1ML0VsZW1lbnQvaW5wdXQjRm9ybV8lM0NpbnB1dCUzRV90eXBlcykuXG4gICAqL1xuICB0eXBlOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBUaGUgdmFsdWUgb2YgdGhlIGBpbnB1dGAgZWxlbWVudCwgcmVxdWlyZWQgZm9yIGEgY29udHJvbGxlZCBjb21wb25lbnQuXG4gICAqL1xuICB2YWx1ZTogUHJvcFR5cGVzLmFueVxufSA6IHZvaWQgMDtcbklucHV0Lm11aU5hbWUgPSAnSW5wdXQnO1xuZXhwb3J0IGRlZmF1bHQgd2l0aFN0eWxlcyhzdHlsZXMsIHtcbiAgbmFtZTogJ011aUlucHV0J1xufSkoSW5wdXQpOyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNcIjtcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgY2xzeCBmcm9tICdjbHN4JztcbmltcG9ydCB7IHJlZlR5cGUgfSBmcm9tICdAbWF0ZXJpYWwtdWkvdXRpbHMnO1xuaW1wb3J0IElucHV0QmFzZSBmcm9tICcuLi9JbnB1dEJhc2UnO1xuaW1wb3J0IHdpdGhTdHlsZXMgZnJvbSAnLi4vc3R5bGVzL3dpdGhTdHlsZXMnO1xuZXhwb3J0IHZhciBzdHlsZXMgPSBmdW5jdGlvbiBzdHlsZXModGhlbWUpIHtcbiAgdmFyIGxpZ2h0ID0gdGhlbWUucGFsZXR0ZS50eXBlID09PSAnbGlnaHQnO1xuICB2YXIgYm90dG9tTGluZUNvbG9yID0gbGlnaHQgPyAncmdiYSgwLCAwLCAwLCAwLjQyKScgOiAncmdiYSgyNTUsIDI1NSwgMjU1LCAwLjcpJztcbiAgdmFyIGJhY2tncm91bmRDb2xvciA9IGxpZ2h0ID8gJ3JnYmEoMCwgMCwgMCwgMC4wOSknIDogJ3JnYmEoMjU1LCAyNTUsIDI1NSwgMC4wOSknO1xuICByZXR1cm4ge1xuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQuICovXG4gICAgcm9vdDoge1xuICAgICAgcG9zaXRpb246ICdyZWxhdGl2ZScsXG4gICAgICBiYWNrZ3JvdW5kQ29sb3I6IGJhY2tncm91bmRDb2xvcixcbiAgICAgIGJvcmRlclRvcExlZnRSYWRpdXM6IHRoZW1lLnNoYXBlLmJvcmRlclJhZGl1cyxcbiAgICAgIGJvcmRlclRvcFJpZ2h0UmFkaXVzOiB0aGVtZS5zaGFwZS5ib3JkZXJSYWRpdXMsXG4gICAgICB0cmFuc2l0aW9uOiB0aGVtZS50cmFuc2l0aW9ucy5jcmVhdGUoJ2JhY2tncm91bmQtY29sb3InLCB7XG4gICAgICAgIGR1cmF0aW9uOiB0aGVtZS50cmFuc2l0aW9ucy5kdXJhdGlvbi5zaG9ydGVyLFxuICAgICAgICBlYXNpbmc6IHRoZW1lLnRyYW5zaXRpb25zLmVhc2luZy5lYXNlT3V0XG4gICAgICB9KSxcbiAgICAgICcmOmhvdmVyJzoge1xuICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IGxpZ2h0ID8gJ3JnYmEoMCwgMCwgMCwgMC4xMyknIDogJ3JnYmEoMjU1LCAyNTUsIDI1NSwgMC4xMyknLFxuICAgICAgICAvLyBSZXNldCBvbiB0b3VjaCBkZXZpY2VzLCBpdCBkb2Vzbid0IGFkZCBzcGVjaWZpY2l0eVxuICAgICAgICAnQG1lZGlhIChob3Zlcjogbm9uZSknOiB7XG4gICAgICAgICAgYmFja2dyb3VuZENvbG9yOiBiYWNrZ3JvdW5kQ29sb3JcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgICcmJGZvY3VzZWQnOiB7XG4gICAgICAgIGJhY2tncm91bmRDb2xvcjogbGlnaHQgPyAncmdiYSgwLCAwLCAwLCAwLjA5KScgOiAncmdiYSgyNTUsIDI1NSwgMjU1LCAwLjA5KSdcbiAgICAgIH0sXG4gICAgICAnJiRkaXNhYmxlZCc6IHtcbiAgICAgICAgYmFja2dyb3VuZENvbG9yOiBsaWdodCA/ICdyZ2JhKDAsIDAsIDAsIDAuMTIpJyA6ICdyZ2JhKDI1NSwgMjU1LCAyNTUsIDAuMTIpJ1xuICAgICAgfVxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGNvbG9yIHNlY29uZGFyeS4gKi9cbiAgICBjb2xvclNlY29uZGFyeToge1xuICAgICAgJyYkdW5kZXJsaW5lOmFmdGVyJzoge1xuICAgICAgICBib3JkZXJCb3R0b21Db2xvcjogdGhlbWUucGFsZXR0ZS5zZWNvbmRhcnkubWFpblxuICAgICAgfVxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBkaXNhYmxlVW5kZXJsaW5lPXtmYWxzZX1gLiAqL1xuICAgIHVuZGVybGluZToge1xuICAgICAgJyY6YWZ0ZXInOiB7XG4gICAgICAgIGJvcmRlckJvdHRvbTogXCIycHggc29saWQgXCIuY29uY2F0KHRoZW1lLnBhbGV0dGUucHJpbWFyeS5tYWluKSxcbiAgICAgICAgbGVmdDogMCxcbiAgICAgICAgYm90dG9tOiAwLFxuICAgICAgICAvLyBEb2luZyB0aGUgb3RoZXIgd2F5IGFyb3VuZCBjcmFzaCBvbiBJRSAxMSBcIicnXCIgaHR0cHM6Ly9naXRodWIuY29tL2Nzc2luanMvanNzL2lzc3Vlcy8yNDJcbiAgICAgICAgY29udGVudDogJ1wiXCInLFxuICAgICAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICAgICAgcmlnaHQ6IDAsXG4gICAgICAgIHRyYW5zZm9ybTogJ3NjYWxlWCgwKScsXG4gICAgICAgIHRyYW5zaXRpb246IHRoZW1lLnRyYW5zaXRpb25zLmNyZWF0ZSgndHJhbnNmb3JtJywge1xuICAgICAgICAgIGR1cmF0aW9uOiB0aGVtZS50cmFuc2l0aW9ucy5kdXJhdGlvbi5zaG9ydGVyLFxuICAgICAgICAgIGVhc2luZzogdGhlbWUudHJhbnNpdGlvbnMuZWFzaW5nLmVhc2VPdXRcbiAgICAgICAgfSksXG4gICAgICAgIHBvaW50ZXJFdmVudHM6ICdub25lJyAvLyBUcmFuc3BhcmVudCB0byB0aGUgaG92ZXIgc3R5bGUuXG5cbiAgICAgIH0sXG4gICAgICAnJiRmb2N1c2VkOmFmdGVyJzoge1xuICAgICAgICB0cmFuc2Zvcm06ICdzY2FsZVgoMSknXG4gICAgICB9LFxuICAgICAgJyYkZXJyb3I6YWZ0ZXInOiB7XG4gICAgICAgIGJvcmRlckJvdHRvbUNvbG9yOiB0aGVtZS5wYWxldHRlLmVycm9yLm1haW4sXG4gICAgICAgIHRyYW5zZm9ybTogJ3NjYWxlWCgxKScgLy8gZXJyb3IgaXMgYWx3YXlzIHVuZGVybGluZWQgaW4gcmVkXG5cbiAgICAgIH0sXG4gICAgICAnJjpiZWZvcmUnOiB7XG4gICAgICAgIGJvcmRlckJvdHRvbTogXCIxcHggc29saWQgXCIuY29uY2F0KGJvdHRvbUxpbmVDb2xvciksXG4gICAgICAgIGxlZnQ6IDAsXG4gICAgICAgIGJvdHRvbTogMCxcbiAgICAgICAgLy8gRG9pbmcgdGhlIG90aGVyIHdheSBhcm91bmQgY3Jhc2ggb24gSUUgMTEgXCInJ1wiIGh0dHBzOi8vZ2l0aHViLmNvbS9jc3NpbmpzL2pzcy9pc3N1ZXMvMjQyXG4gICAgICAgIGNvbnRlbnQ6ICdcIlxcXFwwMGEwXCInLFxuICAgICAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICAgICAgcmlnaHQ6IDAsXG4gICAgICAgIHRyYW5zaXRpb246IHRoZW1lLnRyYW5zaXRpb25zLmNyZWF0ZSgnYm9yZGVyLWJvdHRvbS1jb2xvcicsIHtcbiAgICAgICAgICBkdXJhdGlvbjogdGhlbWUudHJhbnNpdGlvbnMuZHVyYXRpb24uc2hvcnRlclxuICAgICAgICB9KSxcbiAgICAgICAgcG9pbnRlckV2ZW50czogJ25vbmUnIC8vIFRyYW5zcGFyZW50IHRvIHRoZSBob3ZlciBzdHlsZS5cblxuICAgICAgfSxcbiAgICAgICcmOmhvdmVyOmJlZm9yZSc6IHtcbiAgICAgICAgYm9yZGVyQm90dG9tOiBcIjFweCBzb2xpZCBcIi5jb25jYXQodGhlbWUucGFsZXR0ZS50ZXh0LnByaW1hcnkpXG4gICAgICB9LFxuICAgICAgJyYkZGlzYWJsZWQ6YmVmb3JlJzoge1xuICAgICAgICBib3JkZXJCb3R0b21TdHlsZTogJ2RvdHRlZCdcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgLyogUHNldWRvLWNsYXNzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiB0aGUgY29tcG9uZW50IGlzIGZvY3VzZWQuICovXG4gICAgZm9jdXNlZDoge30sXG5cbiAgICAvKiBQc2V1ZG8tY2xhc3MgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBkaXNhYmxlZD17dHJ1ZX1gLiAqL1xuICAgIGRpc2FibGVkOiB7fSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYHN0YXJ0QWRvcm5tZW50YCBpcyBwcm92aWRlZC4gKi9cbiAgICBhZG9ybmVkU3RhcnQ6IHtcbiAgICAgIHBhZGRpbmdMZWZ0OiAxMlxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBlbmRBZG9ybm1lbnRgIGlzIHByb3ZpZGVkLiAqL1xuICAgIGFkb3JuZWRFbmQ6IHtcbiAgICAgIHBhZGRpbmdSaWdodDogMTJcbiAgICB9LFxuXG4gICAgLyogUHNldWRvLWNsYXNzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgZXJyb3I9e3RydWV9YC4gKi9cbiAgICBlcnJvcjoge30sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgYGlucHV0YCBlbGVtZW50IGlmIGBtYXJnaW49XCJkZW5zZVwiYC4gKi9cbiAgICBtYXJnaW5EZW5zZToge30sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBtdWx0aWxpbmU9e3RydWV9YC4gKi9cbiAgICBtdWx0aWxpbmU6IHtcbiAgICAgIHBhZGRpbmc6ICcyN3B4IDEycHggMTBweCcsXG4gICAgICAnJiRtYXJnaW5EZW5zZSc6IHtcbiAgICAgICAgcGFkZGluZ1RvcDogMjMsXG4gICAgICAgIHBhZGRpbmdCb3R0b206IDZcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIGBpbnB1dGAgZWxlbWVudC4gKi9cbiAgICBpbnB1dDoge1xuICAgICAgcGFkZGluZzogJzI3cHggMTJweCAxMHB4JyxcbiAgICAgICcmOi13ZWJraXQtYXV0b2ZpbGwnOiB7XG4gICAgICAgIFdlYmtpdEJveFNoYWRvdzogdGhlbWUucGFsZXR0ZS50eXBlID09PSAnbGlnaHQnID8gbnVsbCA6ICcwIDAgMCAxMDBweCAjMjY2Nzk4IGluc2V0JyxcbiAgICAgICAgV2Via2l0VGV4dEZpbGxDb2xvcjogdGhlbWUucGFsZXR0ZS50eXBlID09PSAnbGlnaHQnID8gbnVsbCA6ICcjZmZmJyxcbiAgICAgICAgY2FyZXRDb2xvcjogdGhlbWUucGFsZXR0ZS50eXBlID09PSAnbGlnaHQnID8gbnVsbCA6ICcjZmZmJyxcbiAgICAgICAgYm9yZGVyVG9wTGVmdFJhZGl1czogJ2luaGVyaXQnLFxuICAgICAgICBib3JkZXJUb3BSaWdodFJhZGl1czogJ2luaGVyaXQnXG4gICAgICB9XG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSBgaW5wdXRgIGVsZW1lbnQgaWYgYG1hcmdpbj1cImRlbnNlXCJgLiAqL1xuICAgIGlucHV0TWFyZ2luRGVuc2U6IHtcbiAgICAgIHBhZGRpbmdUb3A6IDIzLFxuICAgICAgcGFkZGluZ0JvdHRvbTogNlxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgYGlucHV0YCBpZiBpbiBgPEZvcm1Db250cm9sIGhpZGRlbkxhYmVsIC8+YC4gKi9cbiAgICBpbnB1dEhpZGRlbkxhYmVsOiB7XG4gICAgICBwYWRkaW5nVG9wOiAxOCxcbiAgICAgIHBhZGRpbmdCb3R0b206IDE5LFxuICAgICAgJyYkaW5wdXRNYXJnaW5EZW5zZSc6IHtcbiAgICAgICAgcGFkZGluZ1RvcDogMTAsXG4gICAgICAgIHBhZGRpbmdCb3R0b206IDExXG4gICAgICB9XG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSBgaW5wdXRgIGVsZW1lbnQgaWYgYG11bHRpbGluZT17dHJ1ZX1gLiAqL1xuICAgIGlucHV0TXVsdGlsaW5lOiB7XG4gICAgICBwYWRkaW5nOiAwXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSBgaW5wdXRgIGVsZW1lbnQgaWYgYHN0YXJ0QWRvcm5tZW50YCBpcyBwcm92aWRlZC4gKi9cbiAgICBpbnB1dEFkb3JuZWRTdGFydDoge1xuICAgICAgcGFkZGluZ0xlZnQ6IDBcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIGBpbnB1dGAgZWxlbWVudCBpZiBgZW5kQWRvcm5tZW50YCBpcyBwcm92aWRlZC4gKi9cbiAgICBpbnB1dEFkb3JuZWRFbmQ6IHtcbiAgICAgIHBhZGRpbmdSaWdodDogMFxuICAgIH1cbiAgfTtcbn07XG52YXIgRmlsbGVkSW5wdXQgPSAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBGaWxsZWRJbnB1dChwcm9wcywgcmVmKSB7XG4gIHZhciBkaXNhYmxlVW5kZXJsaW5lID0gcHJvcHMuZGlzYWJsZVVuZGVybGluZSxcbiAgICAgIGNsYXNzZXMgPSBwcm9wcy5jbGFzc2VzLFxuICAgICAgX3Byb3BzJGZ1bGxXaWR0aCA9IHByb3BzLmZ1bGxXaWR0aCxcbiAgICAgIGZ1bGxXaWR0aCA9IF9wcm9wcyRmdWxsV2lkdGggPT09IHZvaWQgMCA/IGZhbHNlIDogX3Byb3BzJGZ1bGxXaWR0aCxcbiAgICAgIF9wcm9wcyRpbnB1dENvbXBvbmVudCA9IHByb3BzLmlucHV0Q29tcG9uZW50LFxuICAgICAgaW5wdXRDb21wb25lbnQgPSBfcHJvcHMkaW5wdXRDb21wb25lbnQgPT09IHZvaWQgMCA/ICdpbnB1dCcgOiBfcHJvcHMkaW5wdXRDb21wb25lbnQsXG4gICAgICBfcHJvcHMkbXVsdGlsaW5lID0gcHJvcHMubXVsdGlsaW5lLFxuICAgICAgbXVsdGlsaW5lID0gX3Byb3BzJG11bHRpbGluZSA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcHJvcHMkbXVsdGlsaW5lLFxuICAgICAgX3Byb3BzJHR5cGUgPSBwcm9wcy50eXBlLFxuICAgICAgdHlwZSA9IF9wcm9wcyR0eXBlID09PSB2b2lkIDAgPyAndGV4dCcgOiBfcHJvcHMkdHlwZSxcbiAgICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKHByb3BzLCBbXCJkaXNhYmxlVW5kZXJsaW5lXCIsIFwiY2xhc3Nlc1wiLCBcImZ1bGxXaWR0aFwiLCBcImlucHV0Q29tcG9uZW50XCIsIFwibXVsdGlsaW5lXCIsIFwidHlwZVwiXSk7XG5cbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KElucHV0QmFzZSwgX2V4dGVuZHMoe1xuICAgIGNsYXNzZXM6IF9leHRlbmRzKHt9LCBjbGFzc2VzLCB7XG4gICAgICByb290OiBjbHN4KGNsYXNzZXMucm9vdCwgIWRpc2FibGVVbmRlcmxpbmUgJiYgY2xhc3Nlcy51bmRlcmxpbmUpLFxuICAgICAgdW5kZXJsaW5lOiBudWxsXG4gICAgfSksXG4gICAgZnVsbFdpZHRoOiBmdWxsV2lkdGgsXG4gICAgaW5wdXRDb21wb25lbnQ6IGlucHV0Q29tcG9uZW50LFxuICAgIG11bHRpbGluZTogbXVsdGlsaW5lLFxuICAgIHJlZjogcmVmLFxuICAgIHR5cGU6IHR5cGVcbiAgfSwgb3RoZXIpKTtcbn0pO1xucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gRmlsbGVkSW5wdXQucHJvcFR5cGVzID0ge1xuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBXYXJuaW5nIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIC8vIHwgVGhlc2UgUHJvcFR5cGVzIGFyZSBnZW5lcmF0ZWQgZnJvbSB0aGUgVHlwZVNjcmlwdCB0eXBlIGRlZmluaXRpb25zIHxcbiAgLy8gfCAgICAgVG8gdXBkYXRlIHRoZW0gZWRpdCB0aGUgZC50cyBmaWxlIGFuZCBydW4gXCJ5YXJuIHByb3B0eXBlc1wiICAgICB8XG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuICAvKipcbiAgICogVGhpcyBwcm9wIGhlbHBzIHVzZXJzIHRvIGZpbGwgZm9ybXMgZmFzdGVyLCBlc3BlY2lhbGx5IG9uIG1vYmlsZSBkZXZpY2VzLlxuICAgKiBUaGUgbmFtZSBjYW4gYmUgY29uZnVzaW5nLCBhcyBpdCdzIG1vcmUgbGlrZSBhbiBhdXRvZmlsbC5cbiAgICogWW91IGNhbiBsZWFybiBtb3JlIGFib3V0IGl0IFtmb2xsb3dpbmcgdGhlIHNwZWNpZmljYXRpb25dKGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL2Zvcm0tY29udHJvbC1pbmZyYXN0cnVjdHVyZS5odG1sI2F1dG9maWxsKS5cbiAgICovXG4gIGF1dG9Db21wbGV0ZTogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgYGlucHV0YCBlbGVtZW50IHdpbGwgYmUgZm9jdXNlZCBkdXJpbmcgdGhlIGZpcnN0IG1vdW50LlxuICAgKi9cbiAgYXV0b0ZvY3VzOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogT3ZlcnJpZGUgb3IgZXh0ZW5kIHRoZSBzdHlsZXMgYXBwbGllZCB0byB0aGUgY29tcG9uZW50LlxuICAgKiBTZWUgW0NTUyBBUEldKCNjc3MpIGJlbG93IGZvciBtb3JlIGRldGFpbHMuXG4gICAqL1xuICBjbGFzc2VzOiBQcm9wVHlwZXMub2JqZWN0LFxuXG4gIC8qKlxuICAgKiBUaGUgY29sb3Igb2YgdGhlIGNvbXBvbmVudC4gSXQgc3VwcG9ydHMgdGhvc2UgdGhlbWUgY29sb3JzIHRoYXQgbWFrZSBzZW5zZSBmb3IgdGhpcyBjb21wb25lbnQuXG4gICAqL1xuICBjb2xvcjogUHJvcFR5cGVzLm9uZU9mKFsncHJpbWFyeScsICdzZWNvbmRhcnknXSksXG5cbiAgLyoqXG4gICAqIFRoZSBkZWZhdWx0IGBpbnB1dGAgZWxlbWVudCB2YWx1ZS4gVXNlIHdoZW4gdGhlIGNvbXBvbmVudCBpcyBub3QgY29udHJvbGxlZC5cbiAgICovXG4gIGRlZmF1bHRWYWx1ZTogUHJvcFR5cGVzLmFueSxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgYGlucHV0YCBlbGVtZW50IHdpbGwgYmUgZGlzYWJsZWQuXG4gICAqL1xuICBkaXNhYmxlZDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGlucHV0IHdpbGwgbm90IGhhdmUgYW4gdW5kZXJsaW5lLlxuICAgKi9cbiAgZGlzYWJsZVVuZGVybGluZTogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIEVuZCBgSW5wdXRBZG9ybm1lbnRgIGZvciB0aGlzIGNvbXBvbmVudC5cbiAgICovXG4gIGVuZEFkb3JubWVudDogUHJvcFR5cGVzLm5vZGUsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGlucHV0IHdpbGwgaW5kaWNhdGUgYW4gZXJyb3IuIFRoaXMgaXMgbm9ybWFsbHkgb2J0YWluZWQgdmlhIGNvbnRleHQgZnJvbVxuICAgKiBGb3JtQ29udHJvbC5cbiAgICovXG4gIGVycm9yOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgaW5wdXQgd2lsbCB0YWtlIHVwIHRoZSBmdWxsIHdpZHRoIG9mIGl0cyBjb250YWluZXIuXG4gICAqL1xuICBmdWxsV2lkdGg6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBUaGUgaWQgb2YgdGhlIGBpbnB1dGAgZWxlbWVudC5cbiAgICovXG4gIGlkOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBUaGUgY29tcG9uZW50IHVzZWQgZm9yIHRoZSBgaW5wdXRgIGVsZW1lbnQuXG4gICAqIEVpdGhlciBhIHN0cmluZyB0byB1c2UgYSBIVE1MIGVsZW1lbnQgb3IgYSBjb21wb25lbnQuXG4gICAqL1xuICBpbnB1dENvbXBvbmVudDogUHJvcFR5cGVzLmVsZW1lbnRUeXBlLFxuXG4gIC8qKlxuICAgKiBbQXR0cmlidXRlc10oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSFRNTC9FbGVtZW50L2lucHV0I0F0dHJpYnV0ZXMpIGFwcGxpZWQgdG8gdGhlIGBpbnB1dGAgZWxlbWVudC5cbiAgICovXG4gIGlucHV0UHJvcHM6IFByb3BUeXBlcy5vYmplY3QsXG5cbiAgLyoqXG4gICAqIFBhc3MgYSByZWYgdG8gdGhlIGBpbnB1dGAgZWxlbWVudC5cbiAgICovXG4gIGlucHV0UmVmOiByZWZUeXBlLFxuXG4gIC8qKlxuICAgKiBJZiBgZGVuc2VgLCB3aWxsIGFkanVzdCB2ZXJ0aWNhbCBzcGFjaW5nLiBUaGlzIGlzIG5vcm1hbGx5IG9idGFpbmVkIHZpYSBjb250ZXh0IGZyb21cbiAgICogRm9ybUNvbnRyb2wuXG4gICAqL1xuICBtYXJnaW46IFByb3BUeXBlcy5vbmVPZihbJ2RlbnNlJywgJ25vbmUnXSksXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgYSB0ZXh0YXJlYSBlbGVtZW50IHdpbGwgYmUgcmVuZGVyZWQuXG4gICAqL1xuICBtdWx0aWxpbmU6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBOYW1lIGF0dHJpYnV0ZSBvZiB0aGUgYGlucHV0YCBlbGVtZW50LlxuICAgKi9cbiAgbmFtZTogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgd2hlbiB0aGUgdmFsdWUgaXMgY2hhbmdlZC5cbiAgICpcbiAgICogQHBhcmFtIHtvYmplY3R9IGV2ZW50IFRoZSBldmVudCBzb3VyY2Ugb2YgdGhlIGNhbGxiYWNrLlxuICAgKiBZb3UgY2FuIHB1bGwgb3V0IHRoZSBuZXcgdmFsdWUgYnkgYWNjZXNzaW5nIGBldmVudC50YXJnZXQudmFsdWVgIChzdHJpbmcpLlxuICAgKi9cbiAgb25DaGFuZ2U6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBUaGUgc2hvcnQgaGludCBkaXNwbGF5ZWQgaW4gdGhlIGlucHV0IGJlZm9yZSB0aGUgdXNlciBlbnRlcnMgYSB2YWx1ZS5cbiAgICovXG4gIHBsYWNlaG9sZGVyOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBJdCBwcmV2ZW50cyB0aGUgdXNlciBmcm9tIGNoYW5naW5nIHRoZSB2YWx1ZSBvZiB0aGUgZmllbGRcbiAgICogKG5vdCBmcm9tIGludGVyYWN0aW5nIHdpdGggdGhlIGZpZWxkKS5cbiAgICovXG4gIHJlYWRPbmx5OiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgYGlucHV0YCBlbGVtZW50IHdpbGwgYmUgcmVxdWlyZWQuXG4gICAqL1xuICByZXF1aXJlZDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIE51bWJlciBvZiByb3dzIHRvIGRpc3BsYXkgd2hlbiBtdWx0aWxpbmUgb3B0aW9uIGlzIHNldCB0byB0cnVlLlxuICAgKi9cbiAgcm93czogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLm51bWJlciwgUHJvcFR5cGVzLnN0cmluZ10pLFxuXG4gIC8qKlxuICAgKiBNYXhpbXVtIG51bWJlciBvZiByb3dzIHRvIGRpc3BsYXkgd2hlbiBtdWx0aWxpbmUgb3B0aW9uIGlzIHNldCB0byB0cnVlLlxuICAgKi9cbiAgcm93c01heDogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLm51bWJlciwgUHJvcFR5cGVzLnN0cmluZ10pLFxuXG4gIC8qKlxuICAgKiBTdGFydCBgSW5wdXRBZG9ybm1lbnRgIGZvciB0aGlzIGNvbXBvbmVudC5cbiAgICovXG4gIHN0YXJ0QWRvcm5tZW50OiBQcm9wVHlwZXMubm9kZSxcblxuICAvKipcbiAgICogVHlwZSBvZiB0aGUgYGlucHV0YCBlbGVtZW50LiBJdCBzaG91bGQgYmUgW2EgdmFsaWQgSFRNTDUgaW5wdXQgdHlwZV0oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSFRNTC9FbGVtZW50L2lucHV0I0Zvcm1fJTNDaW5wdXQlM0VfdHlwZXMpLlxuICAgKi9cbiAgdHlwZTogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogVGhlIHZhbHVlIG9mIHRoZSBgaW5wdXRgIGVsZW1lbnQsIHJlcXVpcmVkIGZvciBhIGNvbnRyb2xsZWQgY29tcG9uZW50LlxuICAgKi9cbiAgdmFsdWU6IFByb3BUeXBlcy5hbnlcbn0gOiB2b2lkIDA7XG5GaWxsZWRJbnB1dC5tdWlOYW1lID0gJ0lucHV0JztcbmV4cG9ydCBkZWZhdWx0IHdpdGhTdHlsZXMoc3R5bGVzLCB7XG4gIG5hbWU6ICdNdWlGaWxsZWRJbnB1dCdcbn0pKEZpbGxlZElucHV0KTsiLCJpbXBvcnQgeyB1c2VUaGVtZSBhcyB1c2VUaGVtZVdpdGhvdXREZWZhdWx0IH0gZnJvbSAnQG1hdGVyaWFsLXVpL3N0eWxlcyc7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IGRlZmF1bHRUaGVtZSBmcm9tICcuL2RlZmF1bHRUaGVtZSc7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB1c2VUaGVtZSgpIHtcbiAgdmFyIHRoZW1lID0gdXNlVGhlbWVXaXRob3V0RGVmYXVsdCgpIHx8IGRlZmF1bHRUaGVtZTtcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWFjdC1ob29rcy9ydWxlcy1vZi1ob29rc1xuICAgIFJlYWN0LnVzZURlYnVnVmFsdWUodGhlbWUpO1xuICB9XG5cbiAgcmV0dXJuIHRoZW1lO1xufSIsImltcG9ydCBfZGVmaW5lUHJvcGVydHkgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2RlZmluZVByb3BlcnR5XCI7XG5pbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzXCI7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGNsc3ggZnJvbSAnY2xzeCc7XG5pbXBvcnQgd2l0aFN0eWxlcyBmcm9tICcuLi9zdHlsZXMvd2l0aFN0eWxlcyc7XG5pbXBvcnQgdXNlVGhlbWUgZnJvbSAnLi4vc3R5bGVzL3VzZVRoZW1lJztcbmltcG9ydCBjYXBpdGFsaXplIGZyb20gJy4uL3V0aWxzL2NhcGl0YWxpemUnO1xuZXhwb3J0IHZhciBzdHlsZXMgPSBmdW5jdGlvbiBzdHlsZXModGhlbWUpIHtcbiAgcmV0dXJuIHtcbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50LiAqL1xuICAgIHJvb3Q6IHtcbiAgICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgICAgYm90dG9tOiAwLFxuICAgICAgcmlnaHQ6IDAsXG4gICAgICB0b3A6IC01LFxuICAgICAgbGVmdDogMCxcbiAgICAgIG1hcmdpbjogMCxcbiAgICAgIHBhZGRpbmc6ICcwIDhweCcsXG4gICAgICBwb2ludGVyRXZlbnRzOiAnbm9uZScsXG4gICAgICBib3JkZXJSYWRpdXM6ICdpbmhlcml0JyxcbiAgICAgIGJvcmRlclN0eWxlOiAnc29saWQnLFxuICAgICAgYm9yZGVyV2lkdGg6IDEsXG4gICAgICBvdmVyZmxvdzogJ2hpZGRlbidcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIGxlZ2VuZCBlbGVtZW50IHdoZW4gYGxhYmVsV2lkdGhgIGlzIHByb3ZpZGVkLiAqL1xuICAgIGxlZ2VuZDoge1xuICAgICAgdGV4dEFsaWduOiAnbGVmdCcsXG4gICAgICBwYWRkaW5nOiAwLFxuICAgICAgbGluZUhlaWdodDogJzExcHgnLFxuICAgICAgLy8gc3luYyB3aXRoIGBoZWlnaHRgIGluIGBsZWdlbmRgIHN0eWxlc1xuICAgICAgdHJhbnNpdGlvbjogdGhlbWUudHJhbnNpdGlvbnMuY3JlYXRlKCd3aWR0aCcsIHtcbiAgICAgICAgZHVyYXRpb246IDE1MCxcbiAgICAgICAgZWFzaW5nOiB0aGVtZS50cmFuc2l0aW9ucy5lYXNpbmcuZWFzZU91dFxuICAgICAgfSlcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIGxlZ2VuZCBlbGVtZW50LiAqL1xuICAgIGxlZ2VuZExhYmVsbGVkOiB7XG4gICAgICBkaXNwbGF5OiAnYmxvY2snLFxuICAgICAgd2lkdGg6ICdhdXRvJyxcbiAgICAgIHRleHRBbGlnbjogJ2xlZnQnLFxuICAgICAgcGFkZGluZzogMCxcbiAgICAgIGhlaWdodDogMTEsXG4gICAgICAvLyBzeW5jIHdpdGggYGxpbmVIZWlnaHRgIGluIGBsZWdlbmRgIHN0eWxlc1xuICAgICAgZm9udFNpemU6ICcwLjc1ZW0nLFxuICAgICAgdmlzaWJpbGl0eTogJ2hpZGRlbicsXG4gICAgICBtYXhXaWR0aDogMC4wMSxcbiAgICAgIHRyYW5zaXRpb246IHRoZW1lLnRyYW5zaXRpb25zLmNyZWF0ZSgnbWF4LXdpZHRoJywge1xuICAgICAgICBkdXJhdGlvbjogNTAsXG4gICAgICAgIGVhc2luZzogdGhlbWUudHJhbnNpdGlvbnMuZWFzaW5nLmVhc2VPdXRcbiAgICAgIH0pLFxuICAgICAgJyYgPiBzcGFuJzoge1xuICAgICAgICBwYWRkaW5nTGVmdDogNSxcbiAgICAgICAgcGFkZGluZ1JpZ2h0OiA1LFxuICAgICAgICBkaXNwbGF5OiAnaW5saW5lLWJsb2NrJ1xuICAgICAgfVxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgbGVnZW5kIGVsZW1lbnQgaXMgbm90Y2hlZC4gKi9cbiAgICBsZWdlbmROb3RjaGVkOiB7XG4gICAgICBtYXhXaWR0aDogMTAwMCxcbiAgICAgIHRyYW5zaXRpb246IHRoZW1lLnRyYW5zaXRpb25zLmNyZWF0ZSgnbWF4LXdpZHRoJywge1xuICAgICAgICBkdXJhdGlvbjogMTAwLFxuICAgICAgICBlYXNpbmc6IHRoZW1lLnRyYW5zaXRpb25zLmVhc2luZy5lYXNlT3V0LFxuICAgICAgICBkZWxheTogNTBcbiAgICAgIH0pXG4gICAgfVxuICB9O1xufTtcbi8qKlxuICogQGlnbm9yZSAtIGludGVybmFsIGNvbXBvbmVudC5cbiAqL1xuXG52YXIgTm90Y2hlZE91dGxpbmUgPSAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBOb3RjaGVkT3V0bGluZShwcm9wcywgcmVmKSB7XG4gIHZhciBjaGlsZHJlbiA9IHByb3BzLmNoaWxkcmVuLFxuICAgICAgY2xhc3NlcyA9IHByb3BzLmNsYXNzZXMsXG4gICAgICBjbGFzc05hbWUgPSBwcm9wcy5jbGFzc05hbWUsXG4gICAgICBsYWJlbCA9IHByb3BzLmxhYmVsLFxuICAgICAgbGFiZWxXaWR0aFByb3AgPSBwcm9wcy5sYWJlbFdpZHRoLFxuICAgICAgbm90Y2hlZCA9IHByb3BzLm5vdGNoZWQsXG4gICAgICBzdHlsZSA9IHByb3BzLnN0eWxlLFxuICAgICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMocHJvcHMsIFtcImNoaWxkcmVuXCIsIFwiY2xhc3Nlc1wiLCBcImNsYXNzTmFtZVwiLCBcImxhYmVsXCIsIFwibGFiZWxXaWR0aFwiLCBcIm5vdGNoZWRcIiwgXCJzdHlsZVwiXSk7XG5cbiAgdmFyIHRoZW1lID0gdXNlVGhlbWUoKTtcbiAgdmFyIGFsaWduID0gdGhlbWUuZGlyZWN0aW9uID09PSAncnRsJyA/ICdyaWdodCcgOiAnbGVmdCc7XG5cbiAgaWYgKGxhYmVsICE9PSB1bmRlZmluZWQpIHtcbiAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJmaWVsZHNldFwiLCBfZXh0ZW5kcyh7XG4gICAgICBcImFyaWEtaGlkZGVuXCI6IHRydWUsXG4gICAgICBjbGFzc05hbWU6IGNsc3goY2xhc3Nlcy5yb290LCBjbGFzc05hbWUpLFxuICAgICAgcmVmOiByZWYsXG4gICAgICBzdHlsZTogc3R5bGVcbiAgICB9LCBvdGhlciksIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwibGVnZW5kXCIsIHtcbiAgICAgIGNsYXNzTmFtZTogY2xzeChjbGFzc2VzLmxlZ2VuZExhYmVsbGVkLCBub3RjaGVkICYmIGNsYXNzZXMubGVnZW5kTm90Y2hlZClcbiAgICB9LCBsYWJlbCA/IC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwic3BhblwiLCBudWxsLCBsYWJlbCkgOiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcInNwYW5cIiwge1xuICAgICAgZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUw6IHtcbiAgICAgICAgX19odG1sOiAnJiM4MjAzOydcbiAgICAgIH1cbiAgICB9KSkpO1xuICB9XG5cbiAgdmFyIGxhYmVsV2lkdGggPSBsYWJlbFdpZHRoUHJvcCA+IDAgPyBsYWJlbFdpZHRoUHJvcCAqIDAuNzUgKyA4IDogMC4wMTtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwiZmllbGRzZXRcIiwgX2V4dGVuZHMoe1xuICAgIFwiYXJpYS1oaWRkZW5cIjogdHJ1ZSxcbiAgICBzdHlsZTogX2V4dGVuZHMoX2RlZmluZVByb3BlcnR5KHt9LCBcInBhZGRpbmdcIi5jb25jYXQoY2FwaXRhbGl6ZShhbGlnbikpLCA4KSwgc3R5bGUpLFxuICAgIGNsYXNzTmFtZTogY2xzeChjbGFzc2VzLnJvb3QsIGNsYXNzTmFtZSksXG4gICAgcmVmOiByZWZcbiAgfSwgb3RoZXIpLCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcImxlZ2VuZFwiLCB7XG4gICAgY2xhc3NOYW1lOiBjbGFzc2VzLmxlZ2VuZCxcbiAgICBzdHlsZToge1xuICAgICAgLy8gSUUgMTE6IGZpZWxkc2V0IHdpdGggbGVnZW5kIGRvZXMgbm90IHJlbmRlclxuICAgICAgLy8gYSBib3JkZXIgcmFkaXVzLiBUaGlzIG1haW50YWlucyBjb25zaXN0ZW5jeVxuICAgICAgLy8gYnkgYWx3YXlzIGhhdmluZyBhIGxlZ2VuZCByZW5kZXJlZFxuICAgICAgd2lkdGg6IG5vdGNoZWQgPyBsYWJlbFdpZHRoIDogMC4wMVxuICAgIH1cbiAgfSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIsIHtcbiAgICBkYW5nZXJvdXNseVNldElubmVySFRNTDoge1xuICAgICAgX19odG1sOiAnJiM4MjAzOydcbiAgICB9XG4gIH0pKSk7XG59KTtcbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IE5vdGNoZWRPdXRsaW5lLnByb3BUeXBlcyA9IHtcbiAgLyoqXG4gICAqIFRoZSBjb250ZW50IG9mIHRoZSBjb21wb25lbnQuXG4gICAqL1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG5cbiAgLyoqXG4gICAqIE92ZXJyaWRlIG9yIGV4dGVuZCB0aGUgc3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICogU2VlIFtDU1MgQVBJXSgjY3NzKSBiZWxvdyBmb3IgbW9yZSBkZXRhaWxzLlxuICAgKi9cbiAgY2xhc3NlczogUHJvcFR5cGVzLm9iamVjdCxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBUaGUgbGFiZWwuXG4gICAqL1xuICBsYWJlbDogUHJvcFR5cGVzLm5vZGUsXG5cbiAgLyoqXG4gICAqIFRoZSB3aWR0aCBvZiB0aGUgbGFiZWwuXG4gICAqL1xuICBsYWJlbFdpZHRoOiBQcm9wVHlwZXMubnVtYmVyLmlzUmVxdWlyZWQsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIG91dGxpbmUgaXMgbm90Y2hlZCB0byBhY2NvbW1vZGF0ZSB0aGUgbGFiZWwuXG4gICAqL1xuICBub3RjaGVkOiBQcm9wVHlwZXMuYm9vbC5pc1JlcXVpcmVkLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBzdHlsZTogUHJvcFR5cGVzLm9iamVjdFxufSA6IHZvaWQgMDtcbmV4cG9ydCBkZWZhdWx0IHdpdGhTdHlsZXMoc3R5bGVzLCB7XG4gIG5hbWU6ICdQcml2YXRlTm90Y2hlZE91dGxpbmUnXG59KShOb3RjaGVkT3V0bGluZSk7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc1wiO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBjbHN4IGZyb20gJ2Nsc3gnO1xuaW1wb3J0IHsgcmVmVHlwZSB9IGZyb20gJ0BtYXRlcmlhbC11aS91dGlscyc7XG5pbXBvcnQgSW5wdXRCYXNlIGZyb20gJy4uL0lucHV0QmFzZSc7XG5pbXBvcnQgTm90Y2hlZE91dGxpbmUgZnJvbSAnLi9Ob3RjaGVkT3V0bGluZSc7XG5pbXBvcnQgd2l0aFN0eWxlcyBmcm9tICcuLi9zdHlsZXMvd2l0aFN0eWxlcyc7XG5leHBvcnQgdmFyIHN0eWxlcyA9IGZ1bmN0aW9uIHN0eWxlcyh0aGVtZSkge1xuICB2YXIgYm9yZGVyQ29sb3IgPSB0aGVtZS5wYWxldHRlLnR5cGUgPT09ICdsaWdodCcgPyAncmdiYSgwLCAwLCAwLCAwLjIzKScgOiAncmdiYSgyNTUsIDI1NSwgMjU1LCAwLjIzKSc7XG4gIHJldHVybiB7XG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudC4gKi9cbiAgICByb290OiB7XG4gICAgICBwb3NpdGlvbjogJ3JlbGF0aXZlJyxcbiAgICAgIGJvcmRlclJhZGl1czogdGhlbWUuc2hhcGUuYm9yZGVyUmFkaXVzLFxuICAgICAgJyY6aG92ZXIgJG5vdGNoZWRPdXRsaW5lJzoge1xuICAgICAgICBib3JkZXJDb2xvcjogdGhlbWUucGFsZXR0ZS50ZXh0LnByaW1hcnlcbiAgICAgIH0sXG4gICAgICAvLyBSZXNldCBvbiB0b3VjaCBkZXZpY2VzLCBpdCBkb2Vzbid0IGFkZCBzcGVjaWZpY2l0eVxuICAgICAgJ0BtZWRpYSAoaG92ZXI6IG5vbmUpJzoge1xuICAgICAgICAnJjpob3ZlciAkbm90Y2hlZE91dGxpbmUnOiB7XG4gICAgICAgICAgYm9yZGVyQ29sb3I6IGJvcmRlckNvbG9yXG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICAnJiRmb2N1c2VkICRub3RjaGVkT3V0bGluZSc6IHtcbiAgICAgICAgYm9yZGVyQ29sb3I6IHRoZW1lLnBhbGV0dGUucHJpbWFyeS5tYWluLFxuICAgICAgICBib3JkZXJXaWR0aDogMlxuICAgICAgfSxcbiAgICAgICcmJGVycm9yICRub3RjaGVkT3V0bGluZSc6IHtcbiAgICAgICAgYm9yZGVyQ29sb3I6IHRoZW1lLnBhbGV0dGUuZXJyb3IubWFpblxuICAgICAgfSxcbiAgICAgICcmJGRpc2FibGVkICRub3RjaGVkT3V0bGluZSc6IHtcbiAgICAgICAgYm9yZGVyQ29sb3I6IHRoZW1lLnBhbGV0dGUuYWN0aW9uLmRpc2FibGVkXG4gICAgICB9XG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgdGhlIGNvbG9yIGlzIHNlY29uZGFyeS4gKi9cbiAgICBjb2xvclNlY29uZGFyeToge1xuICAgICAgJyYkZm9jdXNlZCAkbm90Y2hlZE91dGxpbmUnOiB7XG4gICAgICAgIGJvcmRlckNvbG9yOiB0aGVtZS5wYWxldHRlLnNlY29uZGFyeS5tYWluXG4gICAgICB9XG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgdGhlIGNvbXBvbmVudCBpcyBmb2N1c2VkLiAqL1xuICAgIGZvY3VzZWQ6IHt9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgZGlzYWJsZWQ9e3RydWV9YC4gKi9cbiAgICBkaXNhYmxlZDoge30sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBzdGFydEFkb3JubWVudGAgaXMgcHJvdmlkZWQuICovXG4gICAgYWRvcm5lZFN0YXJ0OiB7XG4gICAgICBwYWRkaW5nTGVmdDogMTRcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgZW5kQWRvcm5tZW50YCBpcyBwcm92aWRlZC4gKi9cbiAgICBhZG9ybmVkRW5kOiB7XG4gICAgICBwYWRkaW5nUmlnaHQ6IDE0XG4gICAgfSxcblxuICAgIC8qIFBzZXVkby1jbGFzcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGVycm9yPXt0cnVlfWAuICovXG4gICAgZXJyb3I6IHt9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIGBpbnB1dGAgZWxlbWVudCBpZiBgbWFyZ2luPVwiZGVuc2VcImAuICovXG4gICAgbWFyZ2luRGVuc2U6IHt9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgbXVsdGlsaW5lPXt0cnVlfWAuICovXG4gICAgbXVsdGlsaW5lOiB7XG4gICAgICBwYWRkaW5nOiAnMTguNXB4IDE0cHgnLFxuICAgICAgJyYkbWFyZ2luRGVuc2UnOiB7XG4gICAgICAgIHBhZGRpbmdUb3A6IDEwLjUsXG4gICAgICAgIHBhZGRpbmdCb3R0b206IDEwLjVcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIGBOb3RjaGVkT3V0bGluZWAgZWxlbWVudC4gKi9cbiAgICBub3RjaGVkT3V0bGluZToge1xuICAgICAgYm9yZGVyQ29sb3I6IGJvcmRlckNvbG9yXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSBgaW5wdXRgIGVsZW1lbnQuICovXG4gICAgaW5wdXQ6IHtcbiAgICAgIHBhZGRpbmc6ICcxOC41cHggMTRweCcsXG4gICAgICAnJjotd2Via2l0LWF1dG9maWxsJzoge1xuICAgICAgICBXZWJraXRCb3hTaGFkb3c6IHRoZW1lLnBhbGV0dGUudHlwZSA9PT0gJ2xpZ2h0JyA/IG51bGwgOiAnMCAwIDAgMTAwcHggIzI2Njc5OCBpbnNldCcsXG4gICAgICAgIFdlYmtpdFRleHRGaWxsQ29sb3I6IHRoZW1lLnBhbGV0dGUudHlwZSA9PT0gJ2xpZ2h0JyA/IG51bGwgOiAnI2ZmZicsXG4gICAgICAgIGNhcmV0Q29sb3I6IHRoZW1lLnBhbGV0dGUudHlwZSA9PT0gJ2xpZ2h0JyA/IG51bGwgOiAnI2ZmZicsXG4gICAgICAgIGJvcmRlclJhZGl1czogJ2luaGVyaXQnXG4gICAgICB9XG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSBgaW5wdXRgIGVsZW1lbnQgaWYgYG1hcmdpbj1cImRlbnNlXCJgLiAqL1xuICAgIGlucHV0TWFyZ2luRGVuc2U6IHtcbiAgICAgIHBhZGRpbmdUb3A6IDEwLjUsXG4gICAgICBwYWRkaW5nQm90dG9tOiAxMC41XG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSBgaW5wdXRgIGVsZW1lbnQgaWYgYG11bHRpbGluZT17dHJ1ZX1gLiAqL1xuICAgIGlucHV0TXVsdGlsaW5lOiB7XG4gICAgICBwYWRkaW5nOiAwXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSBgaW5wdXRgIGVsZW1lbnQgaWYgYHN0YXJ0QWRvcm5tZW50YCBpcyBwcm92aWRlZC4gKi9cbiAgICBpbnB1dEFkb3JuZWRTdGFydDoge1xuICAgICAgcGFkZGluZ0xlZnQ6IDBcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIGBpbnB1dGAgZWxlbWVudCBpZiBgZW5kQWRvcm5tZW50YCBpcyBwcm92aWRlZC4gKi9cbiAgICBpbnB1dEFkb3JuZWRFbmQ6IHtcbiAgICAgIHBhZGRpbmdSaWdodDogMFxuICAgIH1cbiAgfTtcbn07XG52YXIgT3V0bGluZWRJbnB1dCA9IC8qI19fUFVSRV9fKi9SZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIE91dGxpbmVkSW5wdXQocHJvcHMsIHJlZikge1xuICB2YXIgY2xhc3NlcyA9IHByb3BzLmNsYXNzZXMsXG4gICAgICBfcHJvcHMkZnVsbFdpZHRoID0gcHJvcHMuZnVsbFdpZHRoLFxuICAgICAgZnVsbFdpZHRoID0gX3Byb3BzJGZ1bGxXaWR0aCA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcHJvcHMkZnVsbFdpZHRoLFxuICAgICAgX3Byb3BzJGlucHV0Q29tcG9uZW50ID0gcHJvcHMuaW5wdXRDb21wb25lbnQsXG4gICAgICBpbnB1dENvbXBvbmVudCA9IF9wcm9wcyRpbnB1dENvbXBvbmVudCA9PT0gdm9pZCAwID8gJ2lucHV0JyA6IF9wcm9wcyRpbnB1dENvbXBvbmVudCxcbiAgICAgIGxhYmVsID0gcHJvcHMubGFiZWwsXG4gICAgICBfcHJvcHMkbGFiZWxXaWR0aCA9IHByb3BzLmxhYmVsV2lkdGgsXG4gICAgICBsYWJlbFdpZHRoID0gX3Byb3BzJGxhYmVsV2lkdGggPT09IHZvaWQgMCA/IDAgOiBfcHJvcHMkbGFiZWxXaWR0aCxcbiAgICAgIF9wcm9wcyRtdWx0aWxpbmUgPSBwcm9wcy5tdWx0aWxpbmUsXG4gICAgICBtdWx0aWxpbmUgPSBfcHJvcHMkbXVsdGlsaW5lID09PSB2b2lkIDAgPyBmYWxzZSA6IF9wcm9wcyRtdWx0aWxpbmUsXG4gICAgICBub3RjaGVkID0gcHJvcHMubm90Y2hlZCxcbiAgICAgIF9wcm9wcyR0eXBlID0gcHJvcHMudHlwZSxcbiAgICAgIHR5cGUgPSBfcHJvcHMkdHlwZSA9PT0gdm9pZCAwID8gJ3RleHQnIDogX3Byb3BzJHR5cGUsXG4gICAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhwcm9wcywgW1wiY2xhc3Nlc1wiLCBcImZ1bGxXaWR0aFwiLCBcImlucHV0Q29tcG9uZW50XCIsIFwibGFiZWxcIiwgXCJsYWJlbFdpZHRoXCIsIFwibXVsdGlsaW5lXCIsIFwibm90Y2hlZFwiLCBcInR5cGVcIl0pO1xuXG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChJbnB1dEJhc2UsIF9leHRlbmRzKHtcbiAgICByZW5kZXJTdWZmaXg6IGZ1bmN0aW9uIHJlbmRlclN1ZmZpeChzdGF0ZSkge1xuICAgICAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KE5vdGNoZWRPdXRsaW5lLCB7XG4gICAgICAgIGNsYXNzTmFtZTogY2xhc3Nlcy5ub3RjaGVkT3V0bGluZSxcbiAgICAgICAgbGFiZWw6IGxhYmVsLFxuICAgICAgICBsYWJlbFdpZHRoOiBsYWJlbFdpZHRoLFxuICAgICAgICBub3RjaGVkOiB0eXBlb2Ygbm90Y2hlZCAhPT0gJ3VuZGVmaW5lZCcgPyBub3RjaGVkIDogQm9vbGVhbihzdGF0ZS5zdGFydEFkb3JubWVudCB8fCBzdGF0ZS5maWxsZWQgfHwgc3RhdGUuZm9jdXNlZClcbiAgICAgIH0pO1xuICAgIH0sXG4gICAgY2xhc3NlczogX2V4dGVuZHMoe30sIGNsYXNzZXMsIHtcbiAgICAgIHJvb3Q6IGNsc3goY2xhc3Nlcy5yb290LCBjbGFzc2VzLnVuZGVybGluZSksXG4gICAgICBub3RjaGVkT3V0bGluZTogbnVsbFxuICAgIH0pLFxuICAgIGZ1bGxXaWR0aDogZnVsbFdpZHRoLFxuICAgIGlucHV0Q29tcG9uZW50OiBpbnB1dENvbXBvbmVudCxcbiAgICBtdWx0aWxpbmU6IG11bHRpbGluZSxcbiAgICByZWY6IHJlZixcbiAgICB0eXBlOiB0eXBlXG4gIH0sIG90aGVyKSk7XG59KTtcbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IE91dGxpbmVkSW5wdXQucHJvcFR5cGVzID0ge1xuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBXYXJuaW5nIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIC8vIHwgVGhlc2UgUHJvcFR5cGVzIGFyZSBnZW5lcmF0ZWQgZnJvbSB0aGUgVHlwZVNjcmlwdCB0eXBlIGRlZmluaXRpb25zIHxcbiAgLy8gfCAgICAgVG8gdXBkYXRlIHRoZW0gZWRpdCB0aGUgZC50cyBmaWxlIGFuZCBydW4gXCJ5YXJuIHByb3B0eXBlc1wiICAgICB8XG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuICAvKipcbiAgICogVGhpcyBwcm9wIGhlbHBzIHVzZXJzIHRvIGZpbGwgZm9ybXMgZmFzdGVyLCBlc3BlY2lhbGx5IG9uIG1vYmlsZSBkZXZpY2VzLlxuICAgKiBUaGUgbmFtZSBjYW4gYmUgY29uZnVzaW5nLCBhcyBpdCdzIG1vcmUgbGlrZSBhbiBhdXRvZmlsbC5cbiAgICogWW91IGNhbiBsZWFybiBtb3JlIGFib3V0IGl0IFtmb2xsb3dpbmcgdGhlIHNwZWNpZmljYXRpb25dKGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL2Zvcm0tY29udHJvbC1pbmZyYXN0cnVjdHVyZS5odG1sI2F1dG9maWxsKS5cbiAgICovXG4gIGF1dG9Db21wbGV0ZTogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgYGlucHV0YCBlbGVtZW50IHdpbGwgYmUgZm9jdXNlZCBkdXJpbmcgdGhlIGZpcnN0IG1vdW50LlxuICAgKi9cbiAgYXV0b0ZvY3VzOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogT3ZlcnJpZGUgb3IgZXh0ZW5kIHRoZSBzdHlsZXMgYXBwbGllZCB0byB0aGUgY29tcG9uZW50LlxuICAgKiBTZWUgW0NTUyBBUEldKCNjc3MpIGJlbG93IGZvciBtb3JlIGRldGFpbHMuXG4gICAqL1xuICBjbGFzc2VzOiBQcm9wVHlwZXMub2JqZWN0LFxuXG4gIC8qKlxuICAgKiBUaGUgY29sb3Igb2YgdGhlIGNvbXBvbmVudC4gSXQgc3VwcG9ydHMgdGhvc2UgdGhlbWUgY29sb3JzIHRoYXQgbWFrZSBzZW5zZSBmb3IgdGhpcyBjb21wb25lbnQuXG4gICAqL1xuICBjb2xvcjogUHJvcFR5cGVzLm9uZU9mKFsncHJpbWFyeScsICdzZWNvbmRhcnknXSksXG5cbiAgLyoqXG4gICAqIFRoZSBkZWZhdWx0IGBpbnB1dGAgZWxlbWVudCB2YWx1ZS4gVXNlIHdoZW4gdGhlIGNvbXBvbmVudCBpcyBub3QgY29udHJvbGxlZC5cbiAgICovXG4gIGRlZmF1bHRWYWx1ZTogUHJvcFR5cGVzLmFueSxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgYGlucHV0YCBlbGVtZW50IHdpbGwgYmUgZGlzYWJsZWQuXG4gICAqL1xuICBkaXNhYmxlZDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIEVuZCBgSW5wdXRBZG9ybm1lbnRgIGZvciB0aGlzIGNvbXBvbmVudC5cbiAgICovXG4gIGVuZEFkb3JubWVudDogUHJvcFR5cGVzLm5vZGUsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGlucHV0IHdpbGwgaW5kaWNhdGUgYW4gZXJyb3IuIFRoaXMgaXMgbm9ybWFsbHkgb2J0YWluZWQgdmlhIGNvbnRleHQgZnJvbVxuICAgKiBGb3JtQ29udHJvbC5cbiAgICovXG4gIGVycm9yOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgaW5wdXQgd2lsbCB0YWtlIHVwIHRoZSBmdWxsIHdpZHRoIG9mIGl0cyBjb250YWluZXIuXG4gICAqL1xuICBmdWxsV2lkdGg6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBUaGUgaWQgb2YgdGhlIGBpbnB1dGAgZWxlbWVudC5cbiAgICovXG4gIGlkOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBUaGUgY29tcG9uZW50IHVzZWQgZm9yIHRoZSBgaW5wdXRgIGVsZW1lbnQuXG4gICAqIEVpdGhlciBhIHN0cmluZyB0byB1c2UgYSBIVE1MIGVsZW1lbnQgb3IgYSBjb21wb25lbnQuXG4gICAqL1xuICBpbnB1dENvbXBvbmVudDogUHJvcFR5cGVzLmVsZW1lbnRUeXBlLFxuXG4gIC8qKlxuICAgKiBbQXR0cmlidXRlc10oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSFRNTC9FbGVtZW50L2lucHV0I0F0dHJpYnV0ZXMpIGFwcGxpZWQgdG8gdGhlIGBpbnB1dGAgZWxlbWVudC5cbiAgICovXG4gIGlucHV0UHJvcHM6IFByb3BUeXBlcy5vYmplY3QsXG5cbiAgLyoqXG4gICAqIFBhc3MgYSByZWYgdG8gdGhlIGBpbnB1dGAgZWxlbWVudC5cbiAgICovXG4gIGlucHV0UmVmOiByZWZUeXBlLFxuXG4gIC8qKlxuICAgKiBUaGUgbGFiZWwgb2YgdGhlIGlucHV0LiBJdCBpcyBvbmx5IHVzZWQgZm9yIGxheW91dC4gVGhlIGFjdHVhbCBsYWJlbGxpbmdcbiAgICogaXMgaGFuZGxlZCBieSBgSW5wdXRMYWJlbGAuIElmIHNwZWNpZmllZCBgbGFiZWxXaWR0aGAgaXMgaWdub3JlZC5cbiAgICovXG4gIGxhYmVsOiBQcm9wVHlwZXMubm9kZSxcblxuICAvKipcbiAgICogVGhlIHdpZHRoIG9mIHRoZSBsYWJlbC4gSXMgaWdub3JlZCBpZiBgbGFiZWxgIGlzIHByb3ZpZGVkLiBQcmVmZXIgYGxhYmVsYFxuICAgKiBpZiB0aGUgaW5wdXQgbGFiZWwgYXBwZWFycyB3aXRoIGEgc3RyaWtlIHRocm91Z2guXG4gICAqL1xuICBsYWJlbFdpZHRoOiBQcm9wVHlwZXMubnVtYmVyLFxuXG4gIC8qKlxuICAgKiBJZiBgZGVuc2VgLCB3aWxsIGFkanVzdCB2ZXJ0aWNhbCBzcGFjaW5nLiBUaGlzIGlzIG5vcm1hbGx5IG9idGFpbmVkIHZpYSBjb250ZXh0IGZyb21cbiAgICogRm9ybUNvbnRyb2wuXG4gICAqL1xuICBtYXJnaW46IFByb3BUeXBlcy5vbmVPZihbJ2RlbnNlJywgJ25vbmUnXSksXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgYSB0ZXh0YXJlYSBlbGVtZW50IHdpbGwgYmUgcmVuZGVyZWQuXG4gICAqL1xuICBtdWx0aWxpbmU6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBOYW1lIGF0dHJpYnV0ZSBvZiB0aGUgYGlucHV0YCBlbGVtZW50LlxuICAgKi9cbiAgbmFtZTogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgb3V0bGluZSBpcyBub3RjaGVkIHRvIGFjY29tbW9kYXRlIHRoZSBsYWJlbC5cbiAgICovXG4gIG5vdGNoZWQ6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCB3aGVuIHRoZSB2YWx1ZSBpcyBjaGFuZ2VkLlxuICAgKlxuICAgKiBAcGFyYW0ge29iamVjdH0gZXZlbnQgVGhlIGV2ZW50IHNvdXJjZSBvZiB0aGUgY2FsbGJhY2suXG4gICAqIFlvdSBjYW4gcHVsbCBvdXQgdGhlIG5ldyB2YWx1ZSBieSBhY2Nlc3NpbmcgYGV2ZW50LnRhcmdldC52YWx1ZWAgKHN0cmluZykuXG4gICAqL1xuICBvbkNoYW5nZTogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIFRoZSBzaG9ydCBoaW50IGRpc3BsYXllZCBpbiB0aGUgaW5wdXQgYmVmb3JlIHRoZSB1c2VyIGVudGVycyBhIHZhbHVlLlxuICAgKi9cbiAgcGxhY2Vob2xkZXI6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIEl0IHByZXZlbnRzIHRoZSB1c2VyIGZyb20gY2hhbmdpbmcgdGhlIHZhbHVlIG9mIHRoZSBmaWVsZFxuICAgKiAobm90IGZyb20gaW50ZXJhY3Rpbmcgd2l0aCB0aGUgZmllbGQpLlxuICAgKi9cbiAgcmVhZE9ubHk6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBgaW5wdXRgIGVsZW1lbnQgd2lsbCBiZSByZXF1aXJlZC5cbiAgICovXG4gIHJlcXVpcmVkOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogTnVtYmVyIG9mIHJvd3MgdG8gZGlzcGxheSB3aGVuIG11bHRpbGluZSBvcHRpb24gaXMgc2V0IHRvIHRydWUuXG4gICAqL1xuICByb3dzOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMubnVtYmVyLCBQcm9wVHlwZXMuc3RyaW5nXSksXG5cbiAgLyoqXG4gICAqIE1heGltdW0gbnVtYmVyIG9mIHJvd3MgdG8gZGlzcGxheSB3aGVuIG11bHRpbGluZSBvcHRpb24gaXMgc2V0IHRvIHRydWUuXG4gICAqL1xuICByb3dzTWF4OiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMubnVtYmVyLCBQcm9wVHlwZXMuc3RyaW5nXSksXG5cbiAgLyoqXG4gICAqIFN0YXJ0IGBJbnB1dEFkb3JubWVudGAgZm9yIHRoaXMgY29tcG9uZW50LlxuICAgKi9cbiAgc3RhcnRBZG9ybm1lbnQ6IFByb3BUeXBlcy5ub2RlLFxuXG4gIC8qKlxuICAgKiBUeXBlIG9mIHRoZSBgaW5wdXRgIGVsZW1lbnQuIEl0IHNob3VsZCBiZSBbYSB2YWxpZCBIVE1MNSBpbnB1dCB0eXBlXShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9IVE1ML0VsZW1lbnQvaW5wdXQjRm9ybV8lM0NpbnB1dCUzRV90eXBlcykuXG4gICAqL1xuICB0eXBlOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBUaGUgdmFsdWUgb2YgdGhlIGBpbnB1dGAgZWxlbWVudCwgcmVxdWlyZWQgZm9yIGEgY29udHJvbGxlZCBjb21wb25lbnQuXG4gICAqL1xuICB2YWx1ZTogUHJvcFR5cGVzLmFueVxufSA6IHZvaWQgMDtcbk91dGxpbmVkSW5wdXQubXVpTmFtZSA9ICdJbnB1dCc7XG5leHBvcnQgZGVmYXVsdCB3aXRoU3R5bGVzKHN0eWxlcywge1xuICBuYW1lOiAnTXVpT3V0bGluZWRJbnB1dCdcbn0pKE91dGxpbmVkSW5wdXQpOyIsImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBGb3JtQ29udHJvbENvbnRleHQgZnJvbSAnLi9Gb3JtQ29udHJvbENvbnRleHQnO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdXNlRm9ybUNvbnRyb2woKSB7XG4gIHJldHVybiBSZWFjdC51c2VDb250ZXh0KEZvcm1Db250cm9sQ29udGV4dCk7XG59IiwiaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNcIjtcbmltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBjbHN4IGZyb20gJ2Nsc3gnO1xuaW1wb3J0IGZvcm1Db250cm9sU3RhdGUgZnJvbSAnLi4vRm9ybUNvbnRyb2wvZm9ybUNvbnRyb2xTdGF0ZSc7XG5pbXBvcnQgdXNlRm9ybUNvbnRyb2wgZnJvbSAnLi4vRm9ybUNvbnRyb2wvdXNlRm9ybUNvbnRyb2wnO1xuaW1wb3J0IGNhcGl0YWxpemUgZnJvbSAnLi4vdXRpbHMvY2FwaXRhbGl6ZSc7XG5pbXBvcnQgd2l0aFN0eWxlcyBmcm9tICcuLi9zdHlsZXMvd2l0aFN0eWxlcyc7XG5leHBvcnQgdmFyIHN0eWxlcyA9IGZ1bmN0aW9uIHN0eWxlcyh0aGVtZSkge1xuICByZXR1cm4ge1xuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQuICovXG4gICAgcm9vdDogX2V4dGVuZHMoe1xuICAgICAgY29sb3I6IHRoZW1lLnBhbGV0dGUudGV4dC5zZWNvbmRhcnlcbiAgICB9LCB0aGVtZS50eXBvZ3JhcGh5LmJvZHkxLCB7XG4gICAgICBsaW5lSGVpZ2h0OiAxLFxuICAgICAgcGFkZGluZzogMCxcbiAgICAgICcmJGZvY3VzZWQnOiB7XG4gICAgICAgIGNvbG9yOiB0aGVtZS5wYWxldHRlLnByaW1hcnkubWFpblxuICAgICAgfSxcbiAgICAgICcmJGRpc2FibGVkJzoge1xuICAgICAgICBjb2xvcjogdGhlbWUucGFsZXR0ZS50ZXh0LmRpc2FibGVkXG4gICAgICB9LFxuICAgICAgJyYkZXJyb3InOiB7XG4gICAgICAgIGNvbG9yOiB0aGVtZS5wYWxldHRlLmVycm9yLm1haW5cbiAgICAgIH1cbiAgICB9KSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgdGhlIGNvbG9yIGlzIHNlY29uZGFyeS4gKi9cbiAgICBjb2xvclNlY29uZGFyeToge1xuICAgICAgJyYkZm9jdXNlZCc6IHtcbiAgICAgICAgY29sb3I6IHRoZW1lLnBhbGV0dGUuc2Vjb25kYXJ5Lm1haW5cbiAgICAgIH1cbiAgICB9LFxuXG4gICAgLyogUHNldWRvLWNsYXNzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgZm9jdXNlZD17dHJ1ZX1gLiAqL1xuICAgIGZvY3VzZWQ6IHt9LFxuXG4gICAgLyogUHNldWRvLWNsYXNzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgZGlzYWJsZWQ9e3RydWV9YC4gKi9cbiAgICBkaXNhYmxlZDoge30sXG5cbiAgICAvKiBQc2V1ZG8tY2xhc3MgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBlcnJvcj17dHJ1ZX1gLiAqL1xuICAgIGVycm9yOiB7fSxcblxuICAgIC8qIFBzZXVkby1jbGFzcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGZpbGxlZD17dHJ1ZX1gLiAqL1xuICAgIGZpbGxlZDoge30sXG5cbiAgICAvKiBQc2V1ZG8tY2xhc3MgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGByZXF1aXJlZD17dHJ1ZX1gLiAqL1xuICAgIHJlcXVpcmVkOiB7fSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSBhc3RlcmlzayBlbGVtZW50LiAqL1xuICAgIGFzdGVyaXNrOiB7XG4gICAgICAnJiRlcnJvcic6IHtcbiAgICAgICAgY29sb3I6IHRoZW1lLnBhbGV0dGUuZXJyb3IubWFpblxuICAgICAgfVxuICAgIH1cbiAgfTtcbn07XG52YXIgRm9ybUxhYmVsID0gLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gRm9ybUxhYmVsKHByb3BzLCByZWYpIHtcbiAgdmFyIGNoaWxkcmVuID0gcHJvcHMuY2hpbGRyZW4sXG4gICAgICBjbGFzc2VzID0gcHJvcHMuY2xhc3NlcyxcbiAgICAgIGNsYXNzTmFtZSA9IHByb3BzLmNsYXNzTmFtZSxcbiAgICAgIGNvbG9yID0gcHJvcHMuY29sb3IsXG4gICAgICBfcHJvcHMkY29tcG9uZW50ID0gcHJvcHMuY29tcG9uZW50LFxuICAgICAgQ29tcG9uZW50ID0gX3Byb3BzJGNvbXBvbmVudCA9PT0gdm9pZCAwID8gJ2xhYmVsJyA6IF9wcm9wcyRjb21wb25lbnQsXG4gICAgICBkaXNhYmxlZCA9IHByb3BzLmRpc2FibGVkLFxuICAgICAgZXJyb3IgPSBwcm9wcy5lcnJvcixcbiAgICAgIGZpbGxlZCA9IHByb3BzLmZpbGxlZCxcbiAgICAgIGZvY3VzZWQgPSBwcm9wcy5mb2N1c2VkLFxuICAgICAgcmVxdWlyZWQgPSBwcm9wcy5yZXF1aXJlZCxcbiAgICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKHByb3BzLCBbXCJjaGlsZHJlblwiLCBcImNsYXNzZXNcIiwgXCJjbGFzc05hbWVcIiwgXCJjb2xvclwiLCBcImNvbXBvbmVudFwiLCBcImRpc2FibGVkXCIsIFwiZXJyb3JcIiwgXCJmaWxsZWRcIiwgXCJmb2N1c2VkXCIsIFwicmVxdWlyZWRcIl0pO1xuXG4gIHZhciBtdWlGb3JtQ29udHJvbCA9IHVzZUZvcm1Db250cm9sKCk7XG4gIHZhciBmY3MgPSBmb3JtQ29udHJvbFN0YXRlKHtcbiAgICBwcm9wczogcHJvcHMsXG4gICAgbXVpRm9ybUNvbnRyb2w6IG11aUZvcm1Db250cm9sLFxuICAgIHN0YXRlczogWydjb2xvcicsICdyZXF1aXJlZCcsICdmb2N1c2VkJywgJ2Rpc2FibGVkJywgJ2Vycm9yJywgJ2ZpbGxlZCddXG4gIH0pO1xuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoQ29tcG9uZW50LCBfZXh0ZW5kcyh7XG4gICAgY2xhc3NOYW1lOiBjbHN4KGNsYXNzZXMucm9vdCwgY2xhc3Nlc1tcImNvbG9yXCIuY29uY2F0KGNhcGl0YWxpemUoZmNzLmNvbG9yIHx8ICdwcmltYXJ5JykpXSwgY2xhc3NOYW1lLCBmY3MuZGlzYWJsZWQgJiYgY2xhc3Nlcy5kaXNhYmxlZCwgZmNzLmVycm9yICYmIGNsYXNzZXMuZXJyb3IsIGZjcy5maWxsZWQgJiYgY2xhc3Nlcy5maWxsZWQsIGZjcy5mb2N1c2VkICYmIGNsYXNzZXMuZm9jdXNlZCwgZmNzLnJlcXVpcmVkICYmIGNsYXNzZXMucmVxdWlyZWQpLFxuICAgIHJlZjogcmVmXG4gIH0sIG90aGVyKSwgY2hpbGRyZW4sIGZjcy5yZXF1aXJlZCAmJiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcInNwYW5cIiwge1xuICAgIFwiYXJpYS1oaWRkZW5cIjogdHJ1ZSxcbiAgICBjbGFzc05hbWU6IGNsc3goY2xhc3Nlcy5hc3RlcmlzaywgZmNzLmVycm9yICYmIGNsYXNzZXMuZXJyb3IpXG4gIH0sIFwiXFx1MjAwOVwiLCAnKicpKTtcbn0pO1xucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gRm9ybUxhYmVsLnByb3BUeXBlcyA9IHtcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gV2FybmluZyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAvLyB8IFRoZXNlIFByb3BUeXBlcyBhcmUgZ2VuZXJhdGVkIGZyb20gdGhlIFR5cGVTY3JpcHQgdHlwZSBkZWZpbml0aW9ucyB8XG4gIC8vIHwgICAgIFRvIHVwZGF0ZSB0aGVtIGVkaXQgdGhlIGQudHMgZmlsZSBhbmQgcnVuIFwieWFybiBwcm9wdHlwZXNcIiAgICAgfFxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbiAgLyoqXG4gICAqIFRoZSBjb250ZW50IG9mIHRoZSBjb21wb25lbnQuXG4gICAqL1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG5cbiAgLyoqXG4gICAqIE92ZXJyaWRlIG9yIGV4dGVuZCB0aGUgc3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICogU2VlIFtDU1MgQVBJXSgjY3NzKSBiZWxvdyBmb3IgbW9yZSBkZXRhaWxzLlxuICAgKi9cbiAgY2xhc3NlczogUHJvcFR5cGVzLm9iamVjdCxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBUaGUgY29sb3Igb2YgdGhlIGNvbXBvbmVudC4gSXQgc3VwcG9ydHMgdGhvc2UgdGhlbWUgY29sb3JzIHRoYXQgbWFrZSBzZW5zZSBmb3IgdGhpcyBjb21wb25lbnQuXG4gICAqL1xuICBjb2xvcjogUHJvcFR5cGVzLm9uZU9mKFsncHJpbWFyeScsICdzZWNvbmRhcnknXSksXG5cbiAgLyoqXG4gICAqIFRoZSBjb21wb25lbnQgdXNlZCBmb3IgdGhlIHJvb3Qgbm9kZS5cbiAgICogRWl0aGVyIGEgc3RyaW5nIHRvIHVzZSBhIEhUTUwgZWxlbWVudCBvciBhIGNvbXBvbmVudC5cbiAgICovXG4gIGNvbXBvbmVudDogUHJvcFR5cGVzXG4gIC8qIEB0eXBlc2NyaXB0LXRvLXByb3B0eXBlcy1pZ25vcmUgKi9cbiAgLmVsZW1lbnRUeXBlLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBsYWJlbCBzaG91bGQgYmUgZGlzcGxheWVkIGluIGEgZGlzYWJsZWQgc3RhdGUuXG4gICAqL1xuICBkaXNhYmxlZDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGxhYmVsIHNob3VsZCBiZSBkaXNwbGF5ZWQgaW4gYW4gZXJyb3Igc3RhdGUuXG4gICAqL1xuICBlcnJvcjogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGxhYmVsIHNob3VsZCB1c2UgZmlsbGVkIGNsYXNzZXMga2V5LlxuICAgKi9cbiAgZmlsbGVkOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgaW5wdXQgb2YgdGhpcyBsYWJlbCBpcyBmb2N1c2VkICh1c2VkIGJ5IGBGb3JtR3JvdXBgIGNvbXBvbmVudHMpLlxuICAgKi9cbiAgZm9jdXNlZDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGxhYmVsIHdpbGwgaW5kaWNhdGUgdGhhdCB0aGUgaW5wdXQgaXMgcmVxdWlyZWQuXG4gICAqL1xuICByZXF1aXJlZDogUHJvcFR5cGVzLmJvb2xcbn0gOiB2b2lkIDA7XG5leHBvcnQgZGVmYXVsdCB3aXRoU3R5bGVzKHN0eWxlcywge1xuICBuYW1lOiAnTXVpRm9ybUxhYmVsJ1xufSkoRm9ybUxhYmVsKTsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzXCI7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGNsc3ggZnJvbSAnY2xzeCc7XG5pbXBvcnQgZm9ybUNvbnRyb2xTdGF0ZSBmcm9tICcuLi9Gb3JtQ29udHJvbC9mb3JtQ29udHJvbFN0YXRlJztcbmltcG9ydCB1c2VGb3JtQ29udHJvbCBmcm9tICcuLi9Gb3JtQ29udHJvbC91c2VGb3JtQ29udHJvbCc7XG5pbXBvcnQgd2l0aFN0eWxlcyBmcm9tICcuLi9zdHlsZXMvd2l0aFN0eWxlcyc7XG5pbXBvcnQgRm9ybUxhYmVsIGZyb20gJy4uL0Zvcm1MYWJlbCc7XG5leHBvcnQgdmFyIHN0eWxlcyA9IGZ1bmN0aW9uIHN0eWxlcyh0aGVtZSkge1xuICByZXR1cm4ge1xuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQuICovXG4gICAgcm9vdDoge1xuICAgICAgZGlzcGxheTogJ2Jsb2NrJyxcbiAgICAgIHRyYW5zZm9ybU9yaWdpbjogJ3RvcCBsZWZ0J1xuICAgIH0sXG5cbiAgICAvKiBQc2V1ZG8tY2xhc3MgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBmb2N1c2VkPXt0cnVlfWAuICovXG4gICAgZm9jdXNlZDoge30sXG5cbiAgICAvKiBQc2V1ZG8tY2xhc3MgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBkaXNhYmxlZD17dHJ1ZX1gLiAqL1xuICAgIGRpc2FibGVkOiB7fSxcblxuICAgIC8qIFBzZXVkby1jbGFzcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGVycm9yPXt0cnVlfWAuICovXG4gICAgZXJyb3I6IHt9LFxuXG4gICAgLyogUHNldWRvLWNsYXNzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgcmVxdWlyZWQ9e3RydWV9YC4gKi9cbiAgICByZXF1aXJlZDoge30sXG5cbiAgICAvKiBQc2V1ZG8tY2xhc3MgYXBwbGllZCB0byB0aGUgYXN0ZXJpc2sgZWxlbWVudC4gKi9cbiAgICBhc3Rlcmlzazoge30sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIHRoZSBjb21wb25lbnQgaXMgYSBkZXNjZW5kYW50IG9mIGBGb3JtQ29udHJvbGAuICovXG4gICAgZm9ybUNvbnRyb2w6IHtcbiAgICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgICAgbGVmdDogMCxcbiAgICAgIHRvcDogMCxcbiAgICAgIC8vIHNsaWdodCBhbHRlcmF0aW9uIHRvIHNwZWMgc3BhY2luZyB0byBtYXRjaCB2aXN1YWwgc3BlYyByZXN1bHRcbiAgICAgIHRyYW5zZm9ybTogJ3RyYW5zbGF0ZSgwLCAyNHB4KSBzY2FsZSgxKSdcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgbWFyZ2luPVwiZGVuc2VcImAuICovXG4gICAgbWFyZ2luRGVuc2U6IHtcbiAgICAgIC8vIENvbXBlbnNhdGlvbiBmb3IgdGhlIGBJbnB1dC5pbnB1dERlbnNlYCBzdHlsZS5cbiAgICAgIHRyYW5zZm9ybTogJ3RyYW5zbGF0ZSgwLCAyMXB4KSBzY2FsZSgxKSdcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIGBpbnB1dGAgZWxlbWVudCBpZiBgc2hyaW5rPXt0cnVlfWAuICovXG4gICAgc2hyaW5rOiB7XG4gICAgICB0cmFuc2Zvcm06ICd0cmFuc2xhdGUoMCwgMS41cHgpIHNjYWxlKDAuNzUpJyxcbiAgICAgIHRyYW5zZm9ybU9yaWdpbjogJ3RvcCBsZWZ0J1xuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgYGlucHV0YCBlbGVtZW50IGlmIGBkaXNhYmxlQW5pbWF0aW9uPXtmYWxzZX1gLiAqL1xuICAgIGFuaW1hdGVkOiB7XG4gICAgICB0cmFuc2l0aW9uOiB0aGVtZS50cmFuc2l0aW9ucy5jcmVhdGUoWydjb2xvcicsICd0cmFuc2Zvcm0nXSwge1xuICAgICAgICBkdXJhdGlvbjogdGhlbWUudHJhbnNpdGlvbnMuZHVyYXRpb24uc2hvcnRlcixcbiAgICAgICAgZWFzaW5nOiB0aGVtZS50cmFuc2l0aW9ucy5lYXNpbmcuZWFzZU91dFxuICAgICAgfSlcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgdmFyaWFudD1cImZpbGxlZFwiYC4gKi9cbiAgICBmaWxsZWQ6IHtcbiAgICAgIC8vIENocm9tZSdzIGF1dG9maWxsIGZlYXR1cmUgZ2l2ZXMgdGhlIGlucHV0IGZpZWxkIGEgeWVsbG93IGJhY2tncm91bmQuXG4gICAgICAvLyBTaW5jZSB0aGUgaW5wdXQgZmllbGQgaXMgYmVoaW5kIHRoZSBsYWJlbCBpbiB0aGUgSFRNTCB0cmVlLFxuICAgICAgLy8gdGhlIGlucHV0IGZpZWxkIGlzIGRyYXduIGxhc3QgYW5kIGhpZGVzIHRoZSBsYWJlbCB3aXRoIGFuIG9wYXF1ZSBiYWNrZ3JvdW5kIGNvbG9yLlxuICAgICAgLy8gekluZGV4OiAxIHdpbGwgcmFpc2UgdGhlIGxhYmVsIGFib3ZlIG9wYXF1ZSBiYWNrZ3JvdW5kLWNvbG9ycyBvZiBpbnB1dC5cbiAgICAgIHpJbmRleDogMSxcbiAgICAgIHBvaW50ZXJFdmVudHM6ICdub25lJyxcbiAgICAgIHRyYW5zZm9ybTogJ3RyYW5zbGF0ZSgxMnB4LCAyMHB4KSBzY2FsZSgxKScsXG4gICAgICAnJiRtYXJnaW5EZW5zZSc6IHtcbiAgICAgICAgdHJhbnNmb3JtOiAndHJhbnNsYXRlKDEycHgsIDE3cHgpIHNjYWxlKDEpJ1xuICAgICAgfSxcbiAgICAgICcmJHNocmluayc6IHtcbiAgICAgICAgdHJhbnNmb3JtOiAndHJhbnNsYXRlKDEycHgsIDEwcHgpIHNjYWxlKDAuNzUpJyxcbiAgICAgICAgJyYkbWFyZ2luRGVuc2UnOiB7XG4gICAgICAgICAgdHJhbnNmb3JtOiAndHJhbnNsYXRlKDEycHgsIDdweCkgc2NhbGUoMC43NSknXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgdmFyaWFudD1cIm91dGxpbmVkXCJgLiAqL1xuICAgIG91dGxpbmVkOiB7XG4gICAgICAvLyBzZWUgY29tbWVudCBhYm92ZSBvbiBmaWxsZWQuekluZGV4XG4gICAgICB6SW5kZXg6IDEsXG4gICAgICBwb2ludGVyRXZlbnRzOiAnbm9uZScsXG4gICAgICB0cmFuc2Zvcm06ICd0cmFuc2xhdGUoMTRweCwgMjBweCkgc2NhbGUoMSknLFxuICAgICAgJyYkbWFyZ2luRGVuc2UnOiB7XG4gICAgICAgIHRyYW5zZm9ybTogJ3RyYW5zbGF0ZSgxNHB4LCAxMnB4KSBzY2FsZSgxKSdcbiAgICAgIH0sXG4gICAgICAnJiRzaHJpbmsnOiB7XG4gICAgICAgIHRyYW5zZm9ybTogJ3RyYW5zbGF0ZSgxNHB4LCAtNnB4KSBzY2FsZSgwLjc1KSdcbiAgICAgIH1cbiAgICB9XG4gIH07XG59O1xudmFyIElucHV0TGFiZWwgPSAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBJbnB1dExhYmVsKHByb3BzLCByZWYpIHtcbiAgdmFyIGNsYXNzZXMgPSBwcm9wcy5jbGFzc2VzLFxuICAgICAgY2xhc3NOYW1lID0gcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgX3Byb3BzJGRpc2FibGVBbmltYXRpID0gcHJvcHMuZGlzYWJsZUFuaW1hdGlvbixcbiAgICAgIGRpc2FibGVBbmltYXRpb24gPSBfcHJvcHMkZGlzYWJsZUFuaW1hdGkgPT09IHZvaWQgMCA/IGZhbHNlIDogX3Byb3BzJGRpc2FibGVBbmltYXRpLFxuICAgICAgbWFyZ2luID0gcHJvcHMubWFyZ2luLFxuICAgICAgc2hyaW5rUHJvcCA9IHByb3BzLnNocmluayxcbiAgICAgIHZhcmlhbnQgPSBwcm9wcy52YXJpYW50LFxuICAgICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMocHJvcHMsIFtcImNsYXNzZXNcIiwgXCJjbGFzc05hbWVcIiwgXCJkaXNhYmxlQW5pbWF0aW9uXCIsIFwibWFyZ2luXCIsIFwic2hyaW5rXCIsIFwidmFyaWFudFwiXSk7XG5cbiAgdmFyIG11aUZvcm1Db250cm9sID0gdXNlRm9ybUNvbnRyb2woKTtcbiAgdmFyIHNocmluayA9IHNocmlua1Byb3A7XG5cbiAgaWYgKHR5cGVvZiBzaHJpbmsgPT09ICd1bmRlZmluZWQnICYmIG11aUZvcm1Db250cm9sKSB7XG4gICAgc2hyaW5rID0gbXVpRm9ybUNvbnRyb2wuZmlsbGVkIHx8IG11aUZvcm1Db250cm9sLmZvY3VzZWQgfHwgbXVpRm9ybUNvbnRyb2wuYWRvcm5lZFN0YXJ0O1xuICB9XG5cbiAgdmFyIGZjcyA9IGZvcm1Db250cm9sU3RhdGUoe1xuICAgIHByb3BzOiBwcm9wcyxcbiAgICBtdWlGb3JtQ29udHJvbDogbXVpRm9ybUNvbnRyb2wsXG4gICAgc3RhdGVzOiBbJ21hcmdpbicsICd2YXJpYW50J11cbiAgfSk7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChGb3JtTGFiZWwsIF9leHRlbmRzKHtcbiAgICBcImRhdGEtc2hyaW5rXCI6IHNocmluayxcbiAgICBjbGFzc05hbWU6IGNsc3goY2xhc3Nlcy5yb290LCBjbGFzc05hbWUsIG11aUZvcm1Db250cm9sICYmIGNsYXNzZXMuZm9ybUNvbnRyb2wsICFkaXNhYmxlQW5pbWF0aW9uICYmIGNsYXNzZXMuYW5pbWF0ZWQsIHNocmluayAmJiBjbGFzc2VzLnNocmluaywgZmNzLm1hcmdpbiA9PT0gJ2RlbnNlJyAmJiBjbGFzc2VzLm1hcmdpbkRlbnNlLCB7XG4gICAgICAnZmlsbGVkJzogY2xhc3Nlcy5maWxsZWQsXG4gICAgICAnb3V0bGluZWQnOiBjbGFzc2VzLm91dGxpbmVkXG4gICAgfVtmY3MudmFyaWFudF0pLFxuICAgIGNsYXNzZXM6IHtcbiAgICAgIGZvY3VzZWQ6IGNsYXNzZXMuZm9jdXNlZCxcbiAgICAgIGRpc2FibGVkOiBjbGFzc2VzLmRpc2FibGVkLFxuICAgICAgZXJyb3I6IGNsYXNzZXMuZXJyb3IsXG4gICAgICByZXF1aXJlZDogY2xhc3Nlcy5yZXF1aXJlZCxcbiAgICAgIGFzdGVyaXNrOiBjbGFzc2VzLmFzdGVyaXNrXG4gICAgfSxcbiAgICByZWY6IHJlZlxuICB9LCBvdGhlcikpO1xufSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBJbnB1dExhYmVsLnByb3BUeXBlcyA9IHtcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gV2FybmluZyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAvLyB8IFRoZXNlIFByb3BUeXBlcyBhcmUgZ2VuZXJhdGVkIGZyb20gdGhlIFR5cGVTY3JpcHQgdHlwZSBkZWZpbml0aW9ucyB8XG4gIC8vIHwgICAgIFRvIHVwZGF0ZSB0aGVtIGVkaXQgdGhlIGQudHMgZmlsZSBhbmQgcnVuIFwieWFybiBwcm9wdHlwZXNcIiAgICAgfFxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbiAgLyoqXG4gICAqIFRoZSBjb250ZW50cyBvZiB0aGUgYElucHV0TGFiZWxgLlxuICAgKi9cbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuXG4gIC8qKlxuICAgKiBPdmVycmlkZSBvciBleHRlbmQgdGhlIHN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAqIFNlZSBbQ1NTIEFQSV0oI2NzcykgYmVsb3cgZm9yIG1vcmUgZGV0YWlscy5cbiAgICovXG4gIGNsYXNzZXM6IFByb3BUeXBlcy5vYmplY3QsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogVGhlIGNvbG9yIG9mIHRoZSBjb21wb25lbnQuIEl0IHN1cHBvcnRzIHRob3NlIHRoZW1lIGNvbG9ycyB0aGF0IG1ha2Ugc2Vuc2UgZm9yIHRoaXMgY29tcG9uZW50LlxuICAgKi9cbiAgY29sb3I6IFByb3BUeXBlcy5vbmVPZihbJ3ByaW1hcnknLCAnc2Vjb25kYXJ5J10pLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSB0cmFuc2l0aW9uIGFuaW1hdGlvbiBpcyBkaXNhYmxlZC5cbiAgICovXG4gIGRpc2FibGVBbmltYXRpb246IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIGFwcGx5IGRpc2FibGVkIGNsYXNzLlxuICAgKi9cbiAgZGlzYWJsZWQ6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBsYWJlbCB3aWxsIGJlIGRpc3BsYXllZCBpbiBhbiBlcnJvciBzdGF0ZS5cbiAgICovXG4gIGVycm9yOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgaW5wdXQgb2YgdGhpcyBsYWJlbCBpcyBmb2N1c2VkLlxuICAgKi9cbiAgZm9jdXNlZDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIElmIGBkZW5zZWAsIHdpbGwgYWRqdXN0IHZlcnRpY2FsIHNwYWNpbmcuIFRoaXMgaXMgbm9ybWFsbHkgb2J0YWluZWQgdmlhIGNvbnRleHQgZnJvbVxuICAgKiBGb3JtQ29udHJvbC5cbiAgICovXG4gIG1hcmdpbjogUHJvcFR5cGVzLm9uZU9mKFsnZGVuc2UnXSksXG5cbiAgLyoqXG4gICAqIGlmIGB0cnVlYCwgdGhlIGxhYmVsIHdpbGwgaW5kaWNhdGUgdGhhdCB0aGUgaW5wdXQgaXMgcmVxdWlyZWQuXG4gICAqL1xuICByZXF1aXJlZDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGxhYmVsIGlzIHNocnVuay5cbiAgICovXG4gIHNocmluazogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIFRoZSB2YXJpYW50IHRvIHVzZS5cbiAgICovXG4gIHZhcmlhbnQ6IFByb3BUeXBlcy5vbmVPZihbJ2ZpbGxlZCcsICdvdXRsaW5lZCcsICdzdGFuZGFyZCddKVxufSA6IHZvaWQgMDtcbmV4cG9ydCBkZWZhdWx0IHdpdGhTdHlsZXMoc3R5bGVzLCB7XG4gIG5hbWU6ICdNdWlJbnB1dExhYmVsJ1xufSkoSW5wdXRMYWJlbCk7IiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gaXNNdWlFbGVtZW50KGVsZW1lbnQsIG11aU5hbWVzKSB7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuaXNWYWxpZEVsZW1lbnQoZWxlbWVudCkgJiYgbXVpTmFtZXMuaW5kZXhPZihlbGVtZW50LnR5cGUubXVpTmFtZSkgIT09IC0xO1xufSIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNcIjtcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgY2xzeCBmcm9tICdjbHN4JztcbmltcG9ydCB7IGlzRmlsbGVkLCBpc0Fkb3JuZWRTdGFydCB9IGZyb20gJy4uL0lucHV0QmFzZS91dGlscyc7XG5pbXBvcnQgd2l0aFN0eWxlcyBmcm9tICcuLi9zdHlsZXMvd2l0aFN0eWxlcyc7XG5pbXBvcnQgY2FwaXRhbGl6ZSBmcm9tICcuLi91dGlscy9jYXBpdGFsaXplJztcbmltcG9ydCBpc011aUVsZW1lbnQgZnJvbSAnLi4vdXRpbHMvaXNNdWlFbGVtZW50JztcbmltcG9ydCBGb3JtQ29udHJvbENvbnRleHQgZnJvbSAnLi9Gb3JtQ29udHJvbENvbnRleHQnO1xuZXhwb3J0IHZhciBzdHlsZXMgPSB7XG4gIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQuICovXG4gIHJvb3Q6IHtcbiAgICBkaXNwbGF5OiAnaW5saW5lLWZsZXgnLFxuICAgIGZsZXhEaXJlY3Rpb246ICdjb2x1bW4nLFxuICAgIHBvc2l0aW9uOiAncmVsYXRpdmUnLFxuICAgIC8vIFJlc2V0IGZpZWxkc2V0IGRlZmF1bHQgc3R5bGUuXG4gICAgbWluV2lkdGg6IDAsXG4gICAgcGFkZGluZzogMCxcbiAgICBtYXJnaW46IDAsXG4gICAgYm9yZGVyOiAwLFxuICAgIHZlcnRpY2FsQWxpZ246ICd0b3AnIC8vIEZpeCBhbGlnbm1lbnQgaXNzdWUgb24gU2FmYXJpLlxuXG4gIH0sXG5cbiAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgbWFyZ2luPVwibm9ybWFsXCJgLiAqL1xuICBtYXJnaW5Ob3JtYWw6IHtcbiAgICBtYXJnaW5Ub3A6IDE2LFxuICAgIG1hcmdpbkJvdHRvbTogOFxuICB9LFxuXG4gIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYG1hcmdpbj1cImRlbnNlXCJgLiAqL1xuICBtYXJnaW5EZW5zZToge1xuICAgIG1hcmdpblRvcDogOCxcbiAgICBtYXJnaW5Cb3R0b206IDRcbiAgfSxcblxuICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBmdWxsV2lkdGg9e3RydWV9YC4gKi9cbiAgZnVsbFdpZHRoOiB7XG4gICAgd2lkdGg6ICcxMDAlJ1xuICB9XG59O1xuLyoqXG4gKiBQcm92aWRlcyBjb250ZXh0IHN1Y2ggYXMgZmlsbGVkL2ZvY3VzZWQvZXJyb3IvcmVxdWlyZWQgZm9yIGZvcm0gaW5wdXRzLlxuICogUmVseWluZyBvbiB0aGUgY29udGV4dCBwcm92aWRlcyBoaWdoIGZsZXhpYmlsaXR5IGFuZCBlbnN1cmVzIHRoYXQgdGhlIHN0YXRlIGFsd2F5cyBzdGF5c1xuICogY29uc2lzdGVudCBhY3Jvc3MgdGhlIGNoaWxkcmVuIG9mIHRoZSBgRm9ybUNvbnRyb2xgLlxuICogVGhpcyBjb250ZXh0IGlzIHVzZWQgYnkgdGhlIGZvbGxvd2luZyBjb21wb25lbnRzOlxuICpcbiAqICAtIEZvcm1MYWJlbFxuICogIC0gRm9ybUhlbHBlclRleHRcbiAqICAtIElucHV0XG4gKiAgLSBJbnB1dExhYmVsXG4gKlxuICogWW91IGNhbiBmaW5kIG9uZSBjb21wb3NpdGlvbiBleGFtcGxlIGJlbG93IGFuZCBtb3JlIGdvaW5nIHRvIFt0aGUgZGVtb3NdKC9jb21wb25lbnRzL3RleHQtZmllbGRzLyNjb21wb25lbnRzKS5cbiAqXG4gKiBgYGBqc3hcbiAqIDxGb3JtQ29udHJvbD5cbiAqICAgPElucHV0TGFiZWwgaHRtbEZvcj1cIm15LWlucHV0XCI+RW1haWwgYWRkcmVzczwvSW5wdXRMYWJlbD5cbiAqICAgPElucHV0IGlkPVwibXktaW5wdXRcIiBhcmlhLWRlc2NyaWJlZGJ5PVwibXktaGVscGVyLXRleHRcIiAvPlxuICogICA8Rm9ybUhlbHBlclRleHQgaWQ9XCJteS1oZWxwZXItdGV4dFwiPldlJ2xsIG5ldmVyIHNoYXJlIHlvdXIgZW1haWwuPC9Gb3JtSGVscGVyVGV4dD5cbiAqIDwvRm9ybUNvbnRyb2w+XG4gKiBgYGBcbiAqXG4gKiDimqDvuI9Pbmx5IG9uZSBpbnB1dCBjYW4gYmUgdXNlZCB3aXRoaW4gYSBGb3JtQ29udHJvbC5cbiAqL1xuXG52YXIgRm9ybUNvbnRyb2wgPSAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBGb3JtQ29udHJvbChwcm9wcywgcmVmKSB7XG4gIHZhciBjaGlsZHJlbiA9IHByb3BzLmNoaWxkcmVuLFxuICAgICAgY2xhc3NlcyA9IHByb3BzLmNsYXNzZXMsXG4gICAgICBjbGFzc05hbWUgPSBwcm9wcy5jbGFzc05hbWUsXG4gICAgICBfcHJvcHMkY29sb3IgPSBwcm9wcy5jb2xvcixcbiAgICAgIGNvbG9yID0gX3Byb3BzJGNvbG9yID09PSB2b2lkIDAgPyAncHJpbWFyeScgOiBfcHJvcHMkY29sb3IsXG4gICAgICBfcHJvcHMkY29tcG9uZW50ID0gcHJvcHMuY29tcG9uZW50LFxuICAgICAgQ29tcG9uZW50ID0gX3Byb3BzJGNvbXBvbmVudCA9PT0gdm9pZCAwID8gJ2RpdicgOiBfcHJvcHMkY29tcG9uZW50LFxuICAgICAgX3Byb3BzJGRpc2FibGVkID0gcHJvcHMuZGlzYWJsZWQsXG4gICAgICBkaXNhYmxlZCA9IF9wcm9wcyRkaXNhYmxlZCA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcHJvcHMkZGlzYWJsZWQsXG4gICAgICBfcHJvcHMkZXJyb3IgPSBwcm9wcy5lcnJvcixcbiAgICAgIGVycm9yID0gX3Byb3BzJGVycm9yID09PSB2b2lkIDAgPyBmYWxzZSA6IF9wcm9wcyRlcnJvcixcbiAgICAgIF9wcm9wcyRmdWxsV2lkdGggPSBwcm9wcy5mdWxsV2lkdGgsXG4gICAgICBmdWxsV2lkdGggPSBfcHJvcHMkZnVsbFdpZHRoID09PSB2b2lkIDAgPyBmYWxzZSA6IF9wcm9wcyRmdWxsV2lkdGgsXG4gICAgICB2aXN1YWxseUZvY3VzZWQgPSBwcm9wcy5mb2N1c2VkLFxuICAgICAgX3Byb3BzJGhpZGRlbkxhYmVsID0gcHJvcHMuaGlkZGVuTGFiZWwsXG4gICAgICBoaWRkZW5MYWJlbCA9IF9wcm9wcyRoaWRkZW5MYWJlbCA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcHJvcHMkaGlkZGVuTGFiZWwsXG4gICAgICBfcHJvcHMkbWFyZ2luID0gcHJvcHMubWFyZ2luLFxuICAgICAgbWFyZ2luID0gX3Byb3BzJG1hcmdpbiA9PT0gdm9pZCAwID8gJ25vbmUnIDogX3Byb3BzJG1hcmdpbixcbiAgICAgIF9wcm9wcyRyZXF1aXJlZCA9IHByb3BzLnJlcXVpcmVkLFxuICAgICAgcmVxdWlyZWQgPSBfcHJvcHMkcmVxdWlyZWQgPT09IHZvaWQgMCA/IGZhbHNlIDogX3Byb3BzJHJlcXVpcmVkLFxuICAgICAgc2l6ZSA9IHByb3BzLnNpemUsXG4gICAgICBfcHJvcHMkdmFyaWFudCA9IHByb3BzLnZhcmlhbnQsXG4gICAgICB2YXJpYW50ID0gX3Byb3BzJHZhcmlhbnQgPT09IHZvaWQgMCA/ICdzdGFuZGFyZCcgOiBfcHJvcHMkdmFyaWFudCxcbiAgICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKHByb3BzLCBbXCJjaGlsZHJlblwiLCBcImNsYXNzZXNcIiwgXCJjbGFzc05hbWVcIiwgXCJjb2xvclwiLCBcImNvbXBvbmVudFwiLCBcImRpc2FibGVkXCIsIFwiZXJyb3JcIiwgXCJmdWxsV2lkdGhcIiwgXCJmb2N1c2VkXCIsIFwiaGlkZGVuTGFiZWxcIiwgXCJtYXJnaW5cIiwgXCJyZXF1aXJlZFwiLCBcInNpemVcIiwgXCJ2YXJpYW50XCJdKTtcblxuICB2YXIgX1JlYWN0JHVzZVN0YXRlID0gUmVhY3QudXNlU3RhdGUoZnVuY3Rpb24gKCkge1xuICAgIC8vIFdlIG5lZWQgdG8gaXRlcmF0ZSB0aHJvdWdoIHRoZSBjaGlsZHJlbiBhbmQgZmluZCB0aGUgSW5wdXQgaW4gb3JkZXJcbiAgICAvLyB0byBmdWxseSBzdXBwb3J0IHNlcnZlci1zaWRlIHJlbmRlcmluZy5cbiAgICB2YXIgaW5pdGlhbEFkb3JuZWRTdGFydCA9IGZhbHNlO1xuXG4gICAgaWYgKGNoaWxkcmVuKSB7XG4gICAgICBSZWFjdC5DaGlsZHJlbi5mb3JFYWNoKGNoaWxkcmVuLCBmdW5jdGlvbiAoY2hpbGQpIHtcbiAgICAgICAgaWYgKCFpc011aUVsZW1lbnQoY2hpbGQsIFsnSW5wdXQnLCAnU2VsZWN0J10pKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGlucHV0ID0gaXNNdWlFbGVtZW50KGNoaWxkLCBbJ1NlbGVjdCddKSA/IGNoaWxkLnByb3BzLmlucHV0IDogY2hpbGQ7XG5cbiAgICAgICAgaWYgKGlucHV0ICYmIGlzQWRvcm5lZFN0YXJ0KGlucHV0LnByb3BzKSkge1xuICAgICAgICAgIGluaXRpYWxBZG9ybmVkU3RhcnQgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gaW5pdGlhbEFkb3JuZWRTdGFydDtcbiAgfSksXG4gICAgICBhZG9ybmVkU3RhcnQgPSBfUmVhY3QkdXNlU3RhdGVbMF0sXG4gICAgICBzZXRBZG9ybmVkU3RhcnQgPSBfUmVhY3QkdXNlU3RhdGVbMV07XG5cbiAgdmFyIF9SZWFjdCR1c2VTdGF0ZTIgPSBSZWFjdC51c2VTdGF0ZShmdW5jdGlvbiAoKSB7XG4gICAgLy8gV2UgbmVlZCB0byBpdGVyYXRlIHRocm91Z2ggdGhlIGNoaWxkcmVuIGFuZCBmaW5kIHRoZSBJbnB1dCBpbiBvcmRlclxuICAgIC8vIHRvIGZ1bGx5IHN1cHBvcnQgc2VydmVyLXNpZGUgcmVuZGVyaW5nLlxuICAgIHZhciBpbml0aWFsRmlsbGVkID0gZmFsc2U7XG5cbiAgICBpZiAoY2hpbGRyZW4pIHtcbiAgICAgIFJlYWN0LkNoaWxkcmVuLmZvckVhY2goY2hpbGRyZW4sIGZ1bmN0aW9uIChjaGlsZCkge1xuICAgICAgICBpZiAoIWlzTXVpRWxlbWVudChjaGlsZCwgWydJbnB1dCcsICdTZWxlY3QnXSkpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoaXNGaWxsZWQoY2hpbGQucHJvcHMsIHRydWUpKSB7XG4gICAgICAgICAgaW5pdGlhbEZpbGxlZCA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiBpbml0aWFsRmlsbGVkO1xuICB9KSxcbiAgICAgIGZpbGxlZCA9IF9SZWFjdCR1c2VTdGF0ZTJbMF0sXG4gICAgICBzZXRGaWxsZWQgPSBfUmVhY3QkdXNlU3RhdGUyWzFdO1xuXG4gIHZhciBfUmVhY3QkdXNlU3RhdGUzID0gUmVhY3QudXNlU3RhdGUoZmFsc2UpLFxuICAgICAgX2ZvY3VzZWQgPSBfUmVhY3QkdXNlU3RhdGUzWzBdLFxuICAgICAgc2V0Rm9jdXNlZCA9IF9SZWFjdCR1c2VTdGF0ZTNbMV07XG5cbiAgdmFyIGZvY3VzZWQgPSB2aXN1YWxseUZvY3VzZWQgIT09IHVuZGVmaW5lZCA/IHZpc3VhbGx5Rm9jdXNlZCA6IF9mb2N1c2VkO1xuXG4gIGlmIChkaXNhYmxlZCAmJiBmb2N1c2VkKSB7XG4gICAgc2V0Rm9jdXNlZChmYWxzZSk7XG4gIH1cblxuICB2YXIgcmVnaXN0ZXJFZmZlY3Q7XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3QtaG9va3MvcnVsZXMtb2YtaG9va3NcbiAgICB2YXIgcmVnaXN0ZXJlZElucHV0ID0gUmVhY3QudXNlUmVmKGZhbHNlKTtcblxuICAgIHJlZ2lzdGVyRWZmZWN0ID0gZnVuY3Rpb24gcmVnaXN0ZXJFZmZlY3QoKSB7XG4gICAgICBpZiAocmVnaXN0ZXJlZElucHV0LmN1cnJlbnQpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihbJ01hdGVyaWFsLVVJOiBUaGVyZSBhcmUgbXVsdGlwbGUgSW5wdXRCYXNlIGNvbXBvbmVudHMgaW5zaWRlIGEgRm9ybUNvbnRyb2wuJywgJ1RoaXMgaXMgbm90IHN1cHBvcnRlZC4gSXQgbWlnaHQgY2F1c2UgaW5maW5pdGUgcmVuZGVyaW5nIGxvb3BzLicsICdPbmx5IHVzZSBvbmUgSW5wdXRCYXNlLiddLmpvaW4oJ1xcbicpKTtcbiAgICAgIH1cblxuICAgICAgcmVnaXN0ZXJlZElucHV0LmN1cnJlbnQgPSB0cnVlO1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmVnaXN0ZXJlZElucHV0LmN1cnJlbnQgPSBmYWxzZTtcbiAgICAgIH07XG4gICAgfTtcbiAgfVxuXG4gIHZhciBvbkZpbGxlZCA9IFJlYWN0LnVzZUNhbGxiYWNrKGZ1bmN0aW9uICgpIHtcbiAgICBzZXRGaWxsZWQodHJ1ZSk7XG4gIH0sIFtdKTtcbiAgdmFyIG9uRW1wdHkgPSBSZWFjdC51c2VDYWxsYmFjayhmdW5jdGlvbiAoKSB7XG4gICAgc2V0RmlsbGVkKGZhbHNlKTtcbiAgfSwgW10pO1xuICB2YXIgY2hpbGRDb250ZXh0ID0ge1xuICAgIGFkb3JuZWRTdGFydDogYWRvcm5lZFN0YXJ0LFxuICAgIHNldEFkb3JuZWRTdGFydDogc2V0QWRvcm5lZFN0YXJ0LFxuICAgIGNvbG9yOiBjb2xvcixcbiAgICBkaXNhYmxlZDogZGlzYWJsZWQsXG4gICAgZXJyb3I6IGVycm9yLFxuICAgIGZpbGxlZDogZmlsbGVkLFxuICAgIGZvY3VzZWQ6IGZvY3VzZWQsXG4gICAgZnVsbFdpZHRoOiBmdWxsV2lkdGgsXG4gICAgaGlkZGVuTGFiZWw6IGhpZGRlbkxhYmVsLFxuICAgIG1hcmdpbjogKHNpemUgPT09ICdzbWFsbCcgPyAnZGVuc2UnIDogdW5kZWZpbmVkKSB8fCBtYXJnaW4sXG4gICAgb25CbHVyOiBmdW5jdGlvbiBvbkJsdXIoKSB7XG4gICAgICBzZXRGb2N1c2VkKGZhbHNlKTtcbiAgICB9LFxuICAgIG9uRW1wdHk6IG9uRW1wdHksXG4gICAgb25GaWxsZWQ6IG9uRmlsbGVkLFxuICAgIG9uRm9jdXM6IGZ1bmN0aW9uIG9uRm9jdXMoKSB7XG4gICAgICBzZXRGb2N1c2VkKHRydWUpO1xuICAgIH0sXG4gICAgcmVnaXN0ZXJFZmZlY3Q6IHJlZ2lzdGVyRWZmZWN0LFxuICAgIHJlcXVpcmVkOiByZXF1aXJlZCxcbiAgICB2YXJpYW50OiB2YXJpYW50XG4gIH07XG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChGb3JtQ29udHJvbENvbnRleHQuUHJvdmlkZXIsIHtcbiAgICB2YWx1ZTogY2hpbGRDb250ZXh0XG4gIH0sIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KENvbXBvbmVudCwgX2V4dGVuZHMoe1xuICAgIGNsYXNzTmFtZTogY2xzeChjbGFzc2VzLnJvb3QsIGNsYXNzTmFtZSwgbWFyZ2luICE9PSAnbm9uZScgJiYgY2xhc3Nlc1tcIm1hcmdpblwiLmNvbmNhdChjYXBpdGFsaXplKG1hcmdpbikpXSwgZnVsbFdpZHRoICYmIGNsYXNzZXMuZnVsbFdpZHRoKSxcbiAgICByZWY6IHJlZlxuICB9LCBvdGhlciksIGNoaWxkcmVuKSk7XG59KTtcbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IEZvcm1Db250cm9sLnByb3BUeXBlcyA9IHtcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gV2FybmluZyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAvLyB8IFRoZXNlIFByb3BUeXBlcyBhcmUgZ2VuZXJhdGVkIGZyb20gdGhlIFR5cGVTY3JpcHQgdHlwZSBkZWZpbml0aW9ucyB8XG4gIC8vIHwgICAgIFRvIHVwZGF0ZSB0aGVtIGVkaXQgdGhlIGQudHMgZmlsZSBhbmQgcnVuIFwieWFybiBwcm9wdHlwZXNcIiAgICAgfFxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbiAgLyoqXG4gICAqIFRoZSBjb250ZW50cyBvZiB0aGUgZm9ybSBjb250cm9sLlxuICAgKi9cbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuXG4gIC8qKlxuICAgKiBPdmVycmlkZSBvciBleHRlbmQgdGhlIHN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAqIFNlZSBbQ1NTIEFQSV0oI2NzcykgYmVsb3cgZm9yIG1vcmUgZGV0YWlscy5cbiAgICovXG4gIGNsYXNzZXM6IFByb3BUeXBlcy5vYmplY3QsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogVGhlIGNvbG9yIG9mIHRoZSBjb21wb25lbnQuIEl0IHN1cHBvcnRzIHRob3NlIHRoZW1lIGNvbG9ycyB0aGF0IG1ha2Ugc2Vuc2UgZm9yIHRoaXMgY29tcG9uZW50LlxuICAgKi9cbiAgY29sb3I6IFByb3BUeXBlcy5vbmVPZihbJ3ByaW1hcnknLCAnc2Vjb25kYXJ5J10pLFxuXG4gIC8qKlxuICAgKiBUaGUgY29tcG9uZW50IHVzZWQgZm9yIHRoZSByb290IG5vZGUuXG4gICAqIEVpdGhlciBhIHN0cmluZyB0byB1c2UgYSBIVE1MIGVsZW1lbnQgb3IgYSBjb21wb25lbnQuXG4gICAqL1xuICBjb21wb25lbnQ6IFByb3BUeXBlc1xuICAvKiBAdHlwZXNjcmlwdC10by1wcm9wdHlwZXMtaWdub3JlICovXG4gIC5lbGVtZW50VHlwZSxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgbGFiZWwsIGlucHV0IGFuZCBoZWxwZXIgdGV4dCBzaG91bGQgYmUgZGlzcGxheWVkIGluIGEgZGlzYWJsZWQgc3RhdGUuXG4gICAqL1xuICBkaXNhYmxlZDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGxhYmVsIHNob3VsZCBiZSBkaXNwbGF5ZWQgaW4gYW4gZXJyb3Igc3RhdGUuXG4gICAqL1xuICBlcnJvcjogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGNvbXBvbmVudCB3aWxsIGJlIGRpc3BsYXllZCBpbiBmb2N1c2VkIHN0YXRlLlxuICAgKi9cbiAgZm9jdXNlZDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGNvbXBvbmVudCB3aWxsIHRha2UgdXAgdGhlIGZ1bGwgd2lkdGggb2YgaXRzIGNvbnRhaW5lci5cbiAgICovXG4gIGZ1bGxXaWR0aDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGxhYmVsIHdpbGwgYmUgaGlkZGVuLlxuICAgKiBUaGlzIGlzIHVzZWQgdG8gaW5jcmVhc2UgZGVuc2l0eSBmb3IgYSBgRmlsbGVkSW5wdXRgLlxuICAgKiBCZSBzdXJlIHRvIGFkZCBgYXJpYS1sYWJlbGAgdG8gdGhlIGBpbnB1dGAgZWxlbWVudC5cbiAgICovXG4gIGhpZGRlbkxhYmVsOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogSWYgYGRlbnNlYCBvciBgbm9ybWFsYCwgd2lsbCBhZGp1c3QgdmVydGljYWwgc3BhY2luZyBvZiB0aGlzIGFuZCBjb250YWluZWQgY29tcG9uZW50cy5cbiAgICovXG4gIG1hcmdpbjogUHJvcFR5cGVzLm9uZU9mKFsnZGVuc2UnLCAnbm9uZScsICdub3JtYWwnXSksXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGxhYmVsIHdpbGwgaW5kaWNhdGUgdGhhdCB0aGUgaW5wdXQgaXMgcmVxdWlyZWQuXG4gICAqL1xuICByZXF1aXJlZDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIFRoZSBzaXplIG9mIHRoZSB0ZXh0IGZpZWxkLlxuICAgKi9cbiAgc2l6ZTogUHJvcFR5cGVzLm9uZU9mKFsnbWVkaXVtJywgJ3NtYWxsJ10pLFxuXG4gIC8qKlxuICAgKiBUaGUgdmFyaWFudCB0byB1c2UuXG4gICAqL1xuICB2YXJpYW50OiBQcm9wVHlwZXMub25lT2YoWydmaWxsZWQnLCAnb3V0bGluZWQnLCAnc3RhbmRhcmQnXSlcbn0gOiB2b2lkIDA7XG5leHBvcnQgZGVmYXVsdCB3aXRoU3R5bGVzKHN0eWxlcywge1xuICBuYW1lOiAnTXVpRm9ybUNvbnRyb2wnXG59KShGb3JtQ29udHJvbCk7IiwiaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNcIjtcbmltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBjbHN4IGZyb20gJ2Nsc3gnO1xuaW1wb3J0IGZvcm1Db250cm9sU3RhdGUgZnJvbSAnLi4vRm9ybUNvbnRyb2wvZm9ybUNvbnRyb2xTdGF0ZSc7XG5pbXBvcnQgdXNlRm9ybUNvbnRyb2wgZnJvbSAnLi4vRm9ybUNvbnRyb2wvdXNlRm9ybUNvbnRyb2wnO1xuaW1wb3J0IHdpdGhTdHlsZXMgZnJvbSAnLi4vc3R5bGVzL3dpdGhTdHlsZXMnO1xuZXhwb3J0IHZhciBzdHlsZXMgPSBmdW5jdGlvbiBzdHlsZXModGhlbWUpIHtcbiAgcmV0dXJuIHtcbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50LiAqL1xuICAgIHJvb3Q6IF9leHRlbmRzKHtcbiAgICAgIGNvbG9yOiB0aGVtZS5wYWxldHRlLnRleHQuc2Vjb25kYXJ5XG4gICAgfSwgdGhlbWUudHlwb2dyYXBoeS5jYXB0aW9uLCB7XG4gICAgICB0ZXh0QWxpZ246ICdsZWZ0JyxcbiAgICAgIG1hcmdpblRvcDogMyxcbiAgICAgIG1hcmdpbjogMCxcbiAgICAgICcmJGRpc2FibGVkJzoge1xuICAgICAgICBjb2xvcjogdGhlbWUucGFsZXR0ZS50ZXh0LmRpc2FibGVkXG4gICAgICB9LFxuICAgICAgJyYkZXJyb3InOiB7XG4gICAgICAgIGNvbG9yOiB0aGVtZS5wYWxldHRlLmVycm9yLm1haW5cbiAgICAgIH1cbiAgICB9KSxcblxuICAgIC8qIFBzZXVkby1jbGFzcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGVycm9yPXt0cnVlfWAuICovXG4gICAgZXJyb3I6IHt9LFxuXG4gICAgLyogUHNldWRvLWNsYXNzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgZGlzYWJsZWQ9e3RydWV9YC4gKi9cbiAgICBkaXNhYmxlZDoge30sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBtYXJnaW49XCJkZW5zZVwiYC4gKi9cbiAgICBtYXJnaW5EZW5zZToge1xuICAgICAgbWFyZ2luVG9wOiA0XG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYHZhcmlhbnQ9XCJmaWxsZWRcImAgb3IgYHZhcmlhbnQ9XCJvdXRsaW5lZFwiYC4gKi9cbiAgICBjb250YWluZWQ6IHtcbiAgICAgIG1hcmdpbkxlZnQ6IDE0LFxuICAgICAgbWFyZ2luUmlnaHQ6IDE0XG4gICAgfSxcblxuICAgIC8qIFBzZXVkby1jbGFzcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGZvY3VzZWQ9e3RydWV9YC4gKi9cbiAgICBmb2N1c2VkOiB7fSxcblxuICAgIC8qIFBzZXVkby1jbGFzcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGZpbGxlZD17dHJ1ZX1gLiAqL1xuICAgIGZpbGxlZDoge30sXG5cbiAgICAvKiBQc2V1ZG8tY2xhc3MgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGByZXF1aXJlZD17dHJ1ZX1gLiAqL1xuICAgIHJlcXVpcmVkOiB7fVxuICB9O1xufTtcbnZhciBGb3JtSGVscGVyVGV4dCA9IC8qI19fUFVSRV9fKi9SZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIEZvcm1IZWxwZXJUZXh0KHByb3BzLCByZWYpIHtcbiAgdmFyIGNoaWxkcmVuID0gcHJvcHMuY2hpbGRyZW4sXG4gICAgICBjbGFzc2VzID0gcHJvcHMuY2xhc3NlcyxcbiAgICAgIGNsYXNzTmFtZSA9IHByb3BzLmNsYXNzTmFtZSxcbiAgICAgIF9wcm9wcyRjb21wb25lbnQgPSBwcm9wcy5jb21wb25lbnQsXG4gICAgICBDb21wb25lbnQgPSBfcHJvcHMkY29tcG9uZW50ID09PSB2b2lkIDAgPyAncCcgOiBfcHJvcHMkY29tcG9uZW50LFxuICAgICAgZGlzYWJsZWQgPSBwcm9wcy5kaXNhYmxlZCxcbiAgICAgIGVycm9yID0gcHJvcHMuZXJyb3IsXG4gICAgICBmaWxsZWQgPSBwcm9wcy5maWxsZWQsXG4gICAgICBmb2N1c2VkID0gcHJvcHMuZm9jdXNlZCxcbiAgICAgIG1hcmdpbiA9IHByb3BzLm1hcmdpbixcbiAgICAgIHJlcXVpcmVkID0gcHJvcHMucmVxdWlyZWQsXG4gICAgICB2YXJpYW50ID0gcHJvcHMudmFyaWFudCxcbiAgICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKHByb3BzLCBbXCJjaGlsZHJlblwiLCBcImNsYXNzZXNcIiwgXCJjbGFzc05hbWVcIiwgXCJjb21wb25lbnRcIiwgXCJkaXNhYmxlZFwiLCBcImVycm9yXCIsIFwiZmlsbGVkXCIsIFwiZm9jdXNlZFwiLCBcIm1hcmdpblwiLCBcInJlcXVpcmVkXCIsIFwidmFyaWFudFwiXSk7XG5cbiAgdmFyIG11aUZvcm1Db250cm9sID0gdXNlRm9ybUNvbnRyb2woKTtcbiAgdmFyIGZjcyA9IGZvcm1Db250cm9sU3RhdGUoe1xuICAgIHByb3BzOiBwcm9wcyxcbiAgICBtdWlGb3JtQ29udHJvbDogbXVpRm9ybUNvbnRyb2wsXG4gICAgc3RhdGVzOiBbJ3ZhcmlhbnQnLCAnbWFyZ2luJywgJ2Rpc2FibGVkJywgJ2Vycm9yJywgJ2ZpbGxlZCcsICdmb2N1c2VkJywgJ3JlcXVpcmVkJ11cbiAgfSk7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChDb21wb25lbnQsIF9leHRlbmRzKHtcbiAgICBjbGFzc05hbWU6IGNsc3goY2xhc3Nlcy5yb290LCAoZmNzLnZhcmlhbnQgPT09ICdmaWxsZWQnIHx8IGZjcy52YXJpYW50ID09PSAnb3V0bGluZWQnKSAmJiBjbGFzc2VzLmNvbnRhaW5lZCwgY2xhc3NOYW1lLCBmY3MuZGlzYWJsZWQgJiYgY2xhc3Nlcy5kaXNhYmxlZCwgZmNzLmVycm9yICYmIGNsYXNzZXMuZXJyb3IsIGZjcy5maWxsZWQgJiYgY2xhc3Nlcy5maWxsZWQsIGZjcy5mb2N1c2VkICYmIGNsYXNzZXMuZm9jdXNlZCwgZmNzLnJlcXVpcmVkICYmIGNsYXNzZXMucmVxdWlyZWQsIGZjcy5tYXJnaW4gPT09ICdkZW5zZScgJiYgY2xhc3Nlcy5tYXJnaW5EZW5zZSksXG4gICAgcmVmOiByZWZcbiAgfSwgb3RoZXIpLCBjaGlsZHJlbiA9PT0gJyAnID9cbiAgLyojX19QVVJFX18qL1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3Qvbm8tZGFuZ2VyXG4gIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIsIHtcbiAgICBkYW5nZXJvdXNseVNldElubmVySFRNTDoge1xuICAgICAgX19odG1sOiAnJiM4MjAzOydcbiAgICB9XG4gIH0pIDogY2hpbGRyZW4pO1xufSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBGb3JtSGVscGVyVGV4dC5wcm9wVHlwZXMgPSB7XG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIFdhcm5pbmcgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgLy8gfCBUaGVzZSBQcm9wVHlwZXMgYXJlIGdlbmVyYXRlZCBmcm9tIHRoZSBUeXBlU2NyaXB0IHR5cGUgZGVmaW5pdGlvbnMgfFxuICAvLyB8ICAgICBUbyB1cGRhdGUgdGhlbSBlZGl0IHRoZSBkLnRzIGZpbGUgYW5kIHJ1biBcInlhcm4gcHJvcHR5cGVzXCIgICAgIHxcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4gIC8qKlxuICAgKiBUaGUgY29udGVudCBvZiB0aGUgY29tcG9uZW50LlxuICAgKlxuICAgKiBJZiBgJyAnYCBpcyBwcm92aWRlZCwgdGhlIGNvbXBvbmVudCByZXNlcnZlcyBvbmUgbGluZSBoZWlnaHQgZm9yIGRpc3BsYXlpbmcgYSBmdXR1cmUgbWVzc2FnZS5cbiAgICovXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcblxuICAvKipcbiAgICogT3ZlcnJpZGUgb3IgZXh0ZW5kIHRoZSBzdHlsZXMgYXBwbGllZCB0byB0aGUgY29tcG9uZW50LlxuICAgKiBTZWUgW0NTUyBBUEldKCNjc3MpIGJlbG93IGZvciBtb3JlIGRldGFpbHMuXG4gICAqL1xuICBjbGFzc2VzOiBQcm9wVHlwZXMub2JqZWN0LFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIFRoZSBjb21wb25lbnQgdXNlZCBmb3IgdGhlIHJvb3Qgbm9kZS5cbiAgICogRWl0aGVyIGEgc3RyaW5nIHRvIHVzZSBhIEhUTUwgZWxlbWVudCBvciBhIGNvbXBvbmVudC5cbiAgICovXG4gIGNvbXBvbmVudDogUHJvcFR5cGVzXG4gIC8qIEB0eXBlc2NyaXB0LXRvLXByb3B0eXBlcy1pZ25vcmUgKi9cbiAgLmVsZW1lbnRUeXBlLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBoZWxwZXIgdGV4dCBzaG91bGQgYmUgZGlzcGxheWVkIGluIGEgZGlzYWJsZWQgc3RhdGUuXG4gICAqL1xuICBkaXNhYmxlZDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgaGVscGVyIHRleHQgc2hvdWxkIGJlIGRpc3BsYXllZCBpbiBhbiBlcnJvciBzdGF0ZS5cbiAgICovXG4gIGVycm9yOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgaGVscGVyIHRleHQgc2hvdWxkIHVzZSBmaWxsZWQgY2xhc3NlcyBrZXkuXG4gICAqL1xuICBmaWxsZWQ6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBoZWxwZXIgdGV4dCBzaG91bGQgdXNlIGZvY3VzZWQgY2xhc3NlcyBrZXkuXG4gICAqL1xuICBmb2N1c2VkOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogSWYgYGRlbnNlYCwgd2lsbCBhZGp1c3QgdmVydGljYWwgc3BhY2luZy4gVGhpcyBpcyBub3JtYWxseSBvYnRhaW5lZCB2aWEgY29udGV4dCBmcm9tXG4gICAqIEZvcm1Db250cm9sLlxuICAgKi9cbiAgbWFyZ2luOiBQcm9wVHlwZXMub25lT2YoWydkZW5zZSddKSxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgaGVscGVyIHRleHQgc2hvdWxkIHVzZSByZXF1aXJlZCBjbGFzc2VzIGtleS5cbiAgICovXG4gIHJlcXVpcmVkOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogVGhlIHZhcmlhbnQgdG8gdXNlLlxuICAgKi9cbiAgdmFyaWFudDogUHJvcFR5cGVzLm9uZU9mKFsnZmlsbGVkJywgJ291dGxpbmVkJywgJ3N0YW5kYXJkJ10pXG59IDogdm9pZCAwO1xuZXhwb3J0IGRlZmF1bHQgd2l0aFN0eWxlcyhzdHlsZXMsIHtcbiAgbmFtZTogJ011aUZvcm1IZWxwZXJUZXh0J1xufSkoRm9ybUhlbHBlclRleHQpOyIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIG93bmVyRG9jdW1lbnQobm9kZSkge1xuICByZXR1cm4gbm9kZSAmJiBub2RlLm93bmVyRG9jdW1lbnQgfHwgZG9jdW1lbnQ7XG59IiwiaW1wb3J0IG93bmVyRG9jdW1lbnQgZnJvbSAnLi9vd25lckRvY3VtZW50JztcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIG93bmVyV2luZG93KG5vZGUpIHtcbiAgdmFyIGRvYyA9IG93bmVyRG9jdW1lbnQobm9kZSk7XG4gIHJldHVybiBkb2MuZGVmYXVsdFZpZXcgfHwgd2luZG93O1xufSIsIi8qKlxuICogU2FmZSBjaGFpbmVkIGZ1bmN0aW9uXG4gKlxuICogV2lsbCBvbmx5IGNyZWF0ZSBhIG5ldyBmdW5jdGlvbiBpZiBuZWVkZWQsXG4gKiBvdGhlcndpc2Ugd2lsbCBwYXNzIGJhY2sgZXhpc3RpbmcgZnVuY3Rpb25zIG9yIG51bGwuXG4gKlxuICogQHBhcmFtIHtmdW5jdGlvbn0gZnVuY3Rpb25zIHRvIGNoYWluXG4gKiBAcmV0dXJucyB7ZnVuY3Rpb258bnVsbH1cbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY3JlYXRlQ2hhaW5lZEZ1bmN0aW9uKCkge1xuICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgZnVuY3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgZnVuY3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gIH1cblxuICByZXR1cm4gZnVuY3MucmVkdWNlKGZ1bmN0aW9uIChhY2MsIGZ1bmMpIHtcbiAgICBpZiAoZnVuYyA9PSBudWxsKSB7XG4gICAgICByZXR1cm4gYWNjO1xuICAgIH1cblxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBpZiAodHlwZW9mIGZ1bmMgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcignTWF0ZXJpYWwtVUk6IEludmFsaWQgQXJndW1lbnQgVHlwZSwgbXVzdCBvbmx5IHByb3ZpZGUgZnVuY3Rpb25zLCB1bmRlZmluZWQsIG9yIG51bGwuJyk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGZ1bmN0aW9uIGNoYWluZWRGdW5jdGlvbigpIHtcbiAgICAgIGZvciAodmFyIF9sZW4yID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuMiksIF9rZXkyID0gMDsgX2tleTIgPCBfbGVuMjsgX2tleTIrKykge1xuICAgICAgICBhcmdzW19rZXkyXSA9IGFyZ3VtZW50c1tfa2V5Ml07XG4gICAgICB9XG5cbiAgICAgIGFjYy5hcHBseSh0aGlzLCBhcmdzKTtcbiAgICAgIGZ1bmMuYXBwbHkodGhpcywgYXJncyk7XG4gICAgfTtcbiAgfSwgZnVuY3Rpb24gKCkge30pO1xufSIsImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCAqIGFzIFJlYWN0RE9NIGZyb20gJ3JlYWN0LWRvbSc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHsgZXhhY3RQcm9wLCBIVE1MRWxlbWVudFR5cGUgfSBmcm9tICdAbWF0ZXJpYWwtdWkvdXRpbHMnO1xuaW1wb3J0IHNldFJlZiBmcm9tICcuLi91dGlscy9zZXRSZWYnO1xuaW1wb3J0IHVzZUZvcmtSZWYgZnJvbSAnLi4vdXRpbHMvdXNlRm9ya1JlZic7XG5cbmZ1bmN0aW9uIGdldENvbnRhaW5lcihjb250YWluZXIpIHtcbiAgY29udGFpbmVyID0gdHlwZW9mIGNvbnRhaW5lciA9PT0gJ2Z1bmN0aW9uJyA/IGNvbnRhaW5lcigpIDogY29udGFpbmVyOyAvLyAjU3RyaWN0TW9kZSByZWFkeVxuXG4gIHJldHVybiBSZWFjdERPTS5maW5kRE9NTm9kZShjb250YWluZXIpO1xufVxuXG52YXIgdXNlRW5oYW5jZWRFZmZlY3QgPSB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyA/IFJlYWN0LnVzZUxheW91dEVmZmVjdCA6IFJlYWN0LnVzZUVmZmVjdDtcbi8qKlxuICogUG9ydGFscyBwcm92aWRlIGEgZmlyc3QtY2xhc3Mgd2F5IHRvIHJlbmRlciBjaGlsZHJlbiBpbnRvIGEgRE9NIG5vZGVcbiAqIHRoYXQgZXhpc3RzIG91dHNpZGUgdGhlIERPTSBoaWVyYXJjaHkgb2YgdGhlIHBhcmVudCBjb21wb25lbnQuXG4gKi9cblxudmFyIFBvcnRhbCA9IC8qI19fUFVSRV9fKi9SZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIFBvcnRhbChwcm9wcywgcmVmKSB7XG4gIHZhciBjaGlsZHJlbiA9IHByb3BzLmNoaWxkcmVuLFxuICAgICAgY29udGFpbmVyID0gcHJvcHMuY29udGFpbmVyLFxuICAgICAgX3Byb3BzJGRpc2FibGVQb3J0YWwgPSBwcm9wcy5kaXNhYmxlUG9ydGFsLFxuICAgICAgZGlzYWJsZVBvcnRhbCA9IF9wcm9wcyRkaXNhYmxlUG9ydGFsID09PSB2b2lkIDAgPyBmYWxzZSA6IF9wcm9wcyRkaXNhYmxlUG9ydGFsLFxuICAgICAgb25SZW5kZXJlZCA9IHByb3BzLm9uUmVuZGVyZWQ7XG5cbiAgdmFyIF9SZWFjdCR1c2VTdGF0ZSA9IFJlYWN0LnVzZVN0YXRlKG51bGwpLFxuICAgICAgbW91bnROb2RlID0gX1JlYWN0JHVzZVN0YXRlWzBdLFxuICAgICAgc2V0TW91bnROb2RlID0gX1JlYWN0JHVzZVN0YXRlWzFdO1xuXG4gIHZhciBoYW5kbGVSZWYgPSB1c2VGb3JrUmVmKCAvKiNfX1BVUkVfXyovUmVhY3QuaXNWYWxpZEVsZW1lbnQoY2hpbGRyZW4pID8gY2hpbGRyZW4ucmVmIDogbnVsbCwgcmVmKTtcbiAgdXNlRW5oYW5jZWRFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgIGlmICghZGlzYWJsZVBvcnRhbCkge1xuICAgICAgc2V0TW91bnROb2RlKGdldENvbnRhaW5lcihjb250YWluZXIpIHx8IGRvY3VtZW50LmJvZHkpO1xuICAgIH1cbiAgfSwgW2NvbnRhaW5lciwgZGlzYWJsZVBvcnRhbF0pO1xuICB1c2VFbmhhbmNlZEVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgaWYgKG1vdW50Tm9kZSAmJiAhZGlzYWJsZVBvcnRhbCkge1xuICAgICAgc2V0UmVmKHJlZiwgbW91bnROb2RlKTtcbiAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHNldFJlZihyZWYsIG51bGwpO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9LCBbcmVmLCBtb3VudE5vZGUsIGRpc2FibGVQb3J0YWxdKTtcbiAgdXNlRW5oYW5jZWRFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgIGlmIChvblJlbmRlcmVkICYmIChtb3VudE5vZGUgfHwgZGlzYWJsZVBvcnRhbCkpIHtcbiAgICAgIG9uUmVuZGVyZWQoKTtcbiAgICB9XG4gIH0sIFtvblJlbmRlcmVkLCBtb3VudE5vZGUsIGRpc2FibGVQb3J0YWxdKTtcblxuICBpZiAoZGlzYWJsZVBvcnRhbCkge1xuICAgIGlmICggLyojX19QVVJFX18qL1JlYWN0LmlzVmFsaWRFbGVtZW50KGNoaWxkcmVuKSkge1xuICAgICAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jbG9uZUVsZW1lbnQoY2hpbGRyZW4sIHtcbiAgICAgICAgcmVmOiBoYW5kbGVSZWZcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiBjaGlsZHJlbjtcbiAgfVxuXG4gIHJldHVybiBtb3VudE5vZGUgPyAvKiNfX1BVUkVfXyovUmVhY3RET00uY3JlYXRlUG9ydGFsKGNoaWxkcmVuLCBtb3VudE5vZGUpIDogbW91bnROb2RlO1xufSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBQb3J0YWwucHJvcFR5cGVzID0ge1xuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBXYXJuaW5nIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIC8vIHwgVGhlc2UgUHJvcFR5cGVzIGFyZSBnZW5lcmF0ZWQgZnJvbSB0aGUgVHlwZVNjcmlwdCB0eXBlIGRlZmluaXRpb25zIHxcbiAgLy8gfCAgICAgVG8gdXBkYXRlIHRoZW0gZWRpdCB0aGUgZC50cyBmaWxlIGFuZCBydW4gXCJ5YXJuIHByb3B0eXBlc1wiICAgICB8XG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuICAvKipcbiAgICogVGhlIGNoaWxkcmVuIHRvIHJlbmRlciBpbnRvIHRoZSBgY29udGFpbmVyYC5cbiAgICovXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcblxuICAvKipcbiAgICogQSBIVE1MIGVsZW1lbnQsIGNvbXBvbmVudCBpbnN0YW5jZSwgb3IgZnVuY3Rpb24gdGhhdCByZXR1cm5zIGVpdGhlci5cbiAgICogVGhlIGBjb250YWluZXJgIHdpbGwgaGF2ZSB0aGUgcG9ydGFsIGNoaWxkcmVuIGFwcGVuZGVkIHRvIGl0LlxuICAgKlxuICAgKiBCeSBkZWZhdWx0LCBpdCB1c2VzIHRoZSBib2R5IG9mIHRoZSB0b3AtbGV2ZWwgZG9jdW1lbnQgb2JqZWN0LFxuICAgKiBzbyBpdCdzIHNpbXBseSBgZG9jdW1lbnQuYm9keWAgbW9zdCBvZiB0aGUgdGltZS5cbiAgICovXG4gIGNvbnRhaW5lcjogUHJvcFR5cGVzXG4gIC8qIEB0eXBlc2NyaXB0LXRvLXByb3B0eXBlcy1pZ25vcmUgKi9cbiAgLm9uZU9mVHlwZShbSFRNTEVsZW1lbnRUeXBlLCBQcm9wVHlwZXMuaW5zdGFuY2VPZihSZWFjdC5Db21wb25lbnQpLCBQcm9wVHlwZXMuZnVuY10pLFxuXG4gIC8qKlxuICAgKiBEaXNhYmxlIHRoZSBwb3J0YWwgYmVoYXZpb3IuXG4gICAqIFRoZSBjaGlsZHJlbiBzdGF5IHdpdGhpbiBpdCdzIHBhcmVudCBET00gaGllcmFyY2h5LlxuICAgKi9cbiAgZGlzYWJsZVBvcnRhbDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIG9uY2UgdGhlIGNoaWxkcmVuIGhhcyBiZWVuIG1vdW50ZWQgaW50byB0aGUgYGNvbnRhaW5lcmAuXG4gICAqXG4gICAqIFRoaXMgcHJvcCB3aWxsIGJlIGRlcHJlY2F0ZWQgYW5kIHJlbW92ZWQgaW4gdjUsIHRoZSByZWYgY2FuIGJlIHVzZWQgaW5zdGVhZC5cbiAgICovXG4gIG9uUmVuZGVyZWQ6IFByb3BUeXBlcy5mdW5jXG59IDogdm9pZCAwO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcbiAgUG9ydGFsWydwcm9wVHlwZXMnICsgJyddID0gZXhhY3RQcm9wKFBvcnRhbC5wcm9wVHlwZXMpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBQb3J0YWw7IiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xudmFyIHVzZUVuaGFuY2VkRWZmZWN0ID0gdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgPyBSZWFjdC51c2VMYXlvdXRFZmZlY3QgOiBSZWFjdC51c2VFZmZlY3Q7XG4vKipcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9yZWFjdC9pc3N1ZXMvMTQwOTkjaXNzdWVjb21tZW50LTQ0MDAxMzg5MlxuICpcbiAqIEBwYXJhbSB7ZnVuY3Rpb259IGZuXG4gKi9cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdXNlRXZlbnRDYWxsYmFjayhmbikge1xuICB2YXIgcmVmID0gUmVhY3QudXNlUmVmKGZuKTtcbiAgdXNlRW5oYW5jZWRFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgIHJlZi5jdXJyZW50ID0gZm47XG4gIH0pO1xuICByZXR1cm4gUmVhY3QudXNlQ2FsbGJhY2soZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiAoMCwgcmVmLmN1cnJlbnQpLmFwcGx5KHZvaWQgMCwgYXJndW1lbnRzKTtcbiAgfSwgW10pO1xufSIsIi8vIEEgY2hhbmdlIG9mIHRoZSBicm93c2VyIHpvb20gY2hhbmdlIHRoZSBzY3JvbGxiYXIgc2l6ZS5cbi8vIENyZWRpdCBodHRwczovL2dpdGh1Yi5jb20vdHdicy9ib290c3RyYXAvYmxvYi8zZmZlM2E1ZDgyZjZmNTYxYjgyZmY3OGQ4MmIzMmE3ZDE0YWVkNTU4L2pzL3NyYy9tb2RhbC5qcyNMNTEyLUw1MTlcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldFNjcm9sbGJhclNpemUoKSB7XG4gIHZhciBzY3JvbGxEaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgc2Nyb2xsRGl2LnN0eWxlLndpZHRoID0gJzk5cHgnO1xuICBzY3JvbGxEaXYuc3R5bGUuaGVpZ2h0ID0gJzk5cHgnO1xuICBzY3JvbGxEaXYuc3R5bGUucG9zaXRpb24gPSAnYWJzb2x1dGUnO1xuICBzY3JvbGxEaXYuc3R5bGUudG9wID0gJy05OTk5cHgnO1xuICBzY3JvbGxEaXYuc3R5bGUub3ZlcmZsb3cgPSAnc2Nyb2xsJztcbiAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChzY3JvbGxEaXYpO1xuICB2YXIgc2Nyb2xsYmFyU2l6ZSA9IHNjcm9sbERpdi5vZmZzZXRXaWR0aCAtIHNjcm9sbERpdi5jbGllbnRXaWR0aDtcbiAgZG9jdW1lbnQuYm9keS5yZW1vdmVDaGlsZChzY3JvbGxEaXYpO1xuICByZXR1cm4gc2Nyb2xsYmFyU2l6ZTtcbn0iLCJpbXBvcnQgX2NsYXNzQ2FsbENoZWNrIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9jbGFzc0NhbGxDaGVja1wiO1xuaW1wb3J0IF9jcmVhdGVDbGFzcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vY3JlYXRlQ2xhc3NcIjtcbmltcG9ydCBfdG9Db25zdW1hYmxlQXJyYXkgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL3RvQ29uc3VtYWJsZUFycmF5XCI7XG5pbXBvcnQgZ2V0U2Nyb2xsYmFyU2l6ZSBmcm9tICcuLi91dGlscy9nZXRTY3JvbGxiYXJTaXplJztcbmltcG9ydCBvd25lckRvY3VtZW50IGZyb20gJy4uL3V0aWxzL293bmVyRG9jdW1lbnQnO1xuaW1wb3J0IG93bmVyV2luZG93IGZyb20gJy4uL3V0aWxzL293bmVyV2luZG93JzsgLy8gSXMgYSB2ZXJ0aWNhbCBzY3JvbGxiYXIgZGlzcGxheWVkP1xuXG5mdW5jdGlvbiBpc092ZXJmbG93aW5nKGNvbnRhaW5lcikge1xuICB2YXIgZG9jID0gb3duZXJEb2N1bWVudChjb250YWluZXIpO1xuXG4gIGlmIChkb2MuYm9keSA9PT0gY29udGFpbmVyKSB7XG4gICAgcmV0dXJuIG93bmVyV2luZG93KGRvYykuaW5uZXJXaWR0aCA+IGRvYy5kb2N1bWVudEVsZW1lbnQuY2xpZW50V2lkdGg7XG4gIH1cblxuICByZXR1cm4gY29udGFpbmVyLnNjcm9sbEhlaWdodCA+IGNvbnRhaW5lci5jbGllbnRIZWlnaHQ7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBhcmlhSGlkZGVuKG5vZGUsIHNob3cpIHtcbiAgaWYgKHNob3cpIHtcbiAgICBub2RlLnNldEF0dHJpYnV0ZSgnYXJpYS1oaWRkZW4nLCAndHJ1ZScpO1xuICB9IGVsc2Uge1xuICAgIG5vZGUucmVtb3ZlQXR0cmlidXRlKCdhcmlhLWhpZGRlbicpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGdldFBhZGRpbmdSaWdodChub2RlKSB7XG4gIHJldHVybiBwYXJzZUludCh3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShub2RlKVsncGFkZGluZy1yaWdodCddLCAxMCkgfHwgMDtcbn1cblxuZnVuY3Rpb24gYXJpYUhpZGRlblNpYmxpbmdzKGNvbnRhaW5lciwgbW91bnROb2RlLCBjdXJyZW50Tm9kZSkge1xuICB2YXIgbm9kZXNUb0V4Y2x1ZGUgPSBhcmd1bWVudHMubGVuZ3RoID4gMyAmJiBhcmd1bWVudHNbM10gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1szXSA6IFtdO1xuICB2YXIgc2hvdyA9IGFyZ3VtZW50cy5sZW5ndGggPiA0ID8gYXJndW1lbnRzWzRdIDogdW5kZWZpbmVkO1xuICB2YXIgYmxhY2tsaXN0ID0gW21vdW50Tm9kZSwgY3VycmVudE5vZGVdLmNvbmNhdChfdG9Db25zdW1hYmxlQXJyYXkobm9kZXNUb0V4Y2x1ZGUpKTtcbiAgdmFyIGJsYWNrbGlzdFRhZ05hbWVzID0gWydURU1QTEFURScsICdTQ1JJUFQnLCAnU1RZTEUnXTtcbiAgW10uZm9yRWFjaC5jYWxsKGNvbnRhaW5lci5jaGlsZHJlbiwgZnVuY3Rpb24gKG5vZGUpIHtcbiAgICBpZiAobm9kZS5ub2RlVHlwZSA9PT0gMSAmJiBibGFja2xpc3QuaW5kZXhPZihub2RlKSA9PT0gLTEgJiYgYmxhY2tsaXN0VGFnTmFtZXMuaW5kZXhPZihub2RlLnRhZ05hbWUpID09PSAtMSkge1xuICAgICAgYXJpYUhpZGRlbihub2RlLCBzaG93KTtcbiAgICB9XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBmaW5kSW5kZXhPZihjb250YWluZXJJbmZvLCBjYWxsYmFjaykge1xuICB2YXIgaWR4ID0gLTE7XG4gIGNvbnRhaW5lckluZm8uc29tZShmdW5jdGlvbiAoaXRlbSwgaW5kZXgpIHtcbiAgICBpZiAoY2FsbGJhY2soaXRlbSkpIHtcbiAgICAgIGlkeCA9IGluZGV4O1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZhbHNlO1xuICB9KTtcbiAgcmV0dXJuIGlkeDtcbn1cblxuZnVuY3Rpb24gaGFuZGxlQ29udGFpbmVyKGNvbnRhaW5lckluZm8sIHByb3BzKSB7XG4gIHZhciByZXN0b3JlU3R5bGUgPSBbXTtcbiAgdmFyIHJlc3RvcmVQYWRkaW5ncyA9IFtdO1xuICB2YXIgY29udGFpbmVyID0gY29udGFpbmVySW5mby5jb250YWluZXI7XG4gIHZhciBmaXhlZE5vZGVzO1xuXG4gIGlmICghcHJvcHMuZGlzYWJsZVNjcm9sbExvY2spIHtcbiAgICBpZiAoaXNPdmVyZmxvd2luZyhjb250YWluZXIpKSB7XG4gICAgICAvLyBDb21wdXRlIHRoZSBzaXplIGJlZm9yZSBhcHBseWluZyBvdmVyZmxvdyBoaWRkZW4gdG8gYXZvaWQgYW55IHNjcm9sbCBqdW1wcy5cbiAgICAgIHZhciBzY3JvbGxiYXJTaXplID0gZ2V0U2Nyb2xsYmFyU2l6ZSgpO1xuICAgICAgcmVzdG9yZVN0eWxlLnB1c2goe1xuICAgICAgICB2YWx1ZTogY29udGFpbmVyLnN0eWxlLnBhZGRpbmdSaWdodCxcbiAgICAgICAga2V5OiAncGFkZGluZy1yaWdodCcsXG4gICAgICAgIGVsOiBjb250YWluZXJcbiAgICAgIH0pOyAvLyBVc2UgY29tcHV0ZWQgc3R5bGUsIGhlcmUgdG8gZ2V0IHRoZSByZWFsIHBhZGRpbmcgdG8gYWRkIG91ciBzY3JvbGxiYXIgd2lkdGguXG5cbiAgICAgIGNvbnRhaW5lci5zdHlsZVsncGFkZGluZy1yaWdodCddID0gXCJcIi5jb25jYXQoZ2V0UGFkZGluZ1JpZ2h0KGNvbnRhaW5lcikgKyBzY3JvbGxiYXJTaXplLCBcInB4XCIpOyAvLyAubXVpLWZpeGVkIGlzIGEgZ2xvYmFsIGhlbHBlci5cblxuICAgICAgZml4ZWROb2RlcyA9IG93bmVyRG9jdW1lbnQoY29udGFpbmVyKS5xdWVyeVNlbGVjdG9yQWxsKCcubXVpLWZpeGVkJyk7XG4gICAgICBbXS5mb3JFYWNoLmNhbGwoZml4ZWROb2RlcywgZnVuY3Rpb24gKG5vZGUpIHtcbiAgICAgICAgcmVzdG9yZVBhZGRpbmdzLnB1c2gobm9kZS5zdHlsZS5wYWRkaW5nUmlnaHQpO1xuICAgICAgICBub2RlLnN0eWxlLnBhZGRpbmdSaWdodCA9IFwiXCIuY29uY2F0KGdldFBhZGRpbmdSaWdodChub2RlKSArIHNjcm9sbGJhclNpemUsIFwicHhcIik7XG4gICAgICB9KTtcbiAgICB9IC8vIEltcHJvdmUgR2F0c2J5IHN1cHBvcnRcbiAgICAvLyBodHRwczovL2Nzcy10cmlja3MuY29tL3NuaXBwZXRzL2Nzcy9mb3JjZS12ZXJ0aWNhbC1zY3JvbGxiYXIvXG5cblxuICAgIHZhciBwYXJlbnQgPSBjb250YWluZXIucGFyZW50RWxlbWVudDtcbiAgICB2YXIgc2Nyb2xsQ29udGFpbmVyID0gcGFyZW50Lm5vZGVOYW1lID09PSAnSFRNTCcgJiYgd2luZG93LmdldENvbXB1dGVkU3R5bGUocGFyZW50KVsnb3ZlcmZsb3cteSddID09PSAnc2Nyb2xsJyA/IHBhcmVudCA6IGNvbnRhaW5lcjsgLy8gQmxvY2sgdGhlIHNjcm9sbCBldmVuIGlmIG5vIHNjcm9sbGJhciBpcyB2aXNpYmxlIHRvIGFjY291bnQgZm9yIG1vYmlsZSBrZXlib2FyZFxuICAgIC8vIHNjcmVlbnNpemUgc2hyaW5rLlxuXG4gICAgcmVzdG9yZVN0eWxlLnB1c2goe1xuICAgICAgdmFsdWU6IHNjcm9sbENvbnRhaW5lci5zdHlsZS5vdmVyZmxvdyxcbiAgICAgIGtleTogJ292ZXJmbG93JyxcbiAgICAgIGVsOiBzY3JvbGxDb250YWluZXJcbiAgICB9KTtcbiAgICBzY3JvbGxDb250YWluZXIuc3R5bGUub3ZlcmZsb3cgPSAnaGlkZGVuJztcbiAgfVxuXG4gIHZhciByZXN0b3JlID0gZnVuY3Rpb24gcmVzdG9yZSgpIHtcbiAgICBpZiAoZml4ZWROb2Rlcykge1xuICAgICAgW10uZm9yRWFjaC5jYWxsKGZpeGVkTm9kZXMsIGZ1bmN0aW9uIChub2RlLCBpKSB7XG4gICAgICAgIGlmIChyZXN0b3JlUGFkZGluZ3NbaV0pIHtcbiAgICAgICAgICBub2RlLnN0eWxlLnBhZGRpbmdSaWdodCA9IHJlc3RvcmVQYWRkaW5nc1tpXTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBub2RlLnN0eWxlLnJlbW92ZVByb3BlcnR5KCdwYWRkaW5nLXJpZ2h0Jyk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHJlc3RvcmVTdHlsZS5mb3JFYWNoKGZ1bmN0aW9uIChfcmVmKSB7XG4gICAgICB2YXIgdmFsdWUgPSBfcmVmLnZhbHVlLFxuICAgICAgICAgIGVsID0gX3JlZi5lbCxcbiAgICAgICAgICBrZXkgPSBfcmVmLmtleTtcblxuICAgICAgaWYgKHZhbHVlKSB7XG4gICAgICAgIGVsLnN0eWxlLnNldFByb3BlcnR5KGtleSwgdmFsdWUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZWwuc3R5bGUucmVtb3ZlUHJvcGVydHkoa2V5KTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfTtcblxuICByZXR1cm4gcmVzdG9yZTtcbn1cblxuZnVuY3Rpb24gZ2V0SGlkZGVuU2libGluZ3MoY29udGFpbmVyKSB7XG4gIHZhciBoaWRkZW5TaWJsaW5ncyA9IFtdO1xuICBbXS5mb3JFYWNoLmNhbGwoY29udGFpbmVyLmNoaWxkcmVuLCBmdW5jdGlvbiAobm9kZSkge1xuICAgIGlmIChub2RlLmdldEF0dHJpYnV0ZSAmJiBub2RlLmdldEF0dHJpYnV0ZSgnYXJpYS1oaWRkZW4nKSA9PT0gJ3RydWUnKSB7XG4gICAgICBoaWRkZW5TaWJsaW5ncy5wdXNoKG5vZGUpO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiBoaWRkZW5TaWJsaW5ncztcbn1cbi8qKlxuICogQGlnbm9yZSAtIGRvIG5vdCBkb2N1bWVudC5cbiAqXG4gKiBQcm9wZXIgc3RhdGUgbWFuYWdlbWVudCBmb3IgY29udGFpbmVycyBhbmQgdGhlIG1vZGFscyBpbiB0aG9zZSBjb250YWluZXJzLlxuICogU2ltcGxpZmllZCwgYnV0IGluc3BpcmVkIGJ5IHJlYWN0LW92ZXJsYXkncyBNb2RhbE1hbmFnZXIgY2xhc3MuXG4gKiBVc2VkIGJ5IHRoZSBNb2RhbCB0byBlbnN1cmUgcHJvcGVyIHN0eWxpbmcgb2YgY29udGFpbmVycy5cbiAqL1xuXG5cbnZhciBNb2RhbE1hbmFnZXIgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBNb2RhbE1hbmFnZXIoKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIE1vZGFsTWFuYWdlcik7XG5cbiAgICAvLyB0aGlzLm1vZGFsc1ttb2RhbEluZGV4XSA9IG1vZGFsXG4gICAgdGhpcy5tb2RhbHMgPSBbXTsgLy8gdGhpcy5jb250YWluZXJzW2NvbnRhaW5lckluZGV4XSA9IHtcbiAgICAvLyAgIG1vZGFsczogW10sXG4gICAgLy8gICBjb250YWluZXIsXG4gICAgLy8gICByZXN0b3JlOiBudWxsLFxuICAgIC8vIH1cblxuICAgIHRoaXMuY29udGFpbmVycyA9IFtdO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKE1vZGFsTWFuYWdlciwgW3tcbiAgICBrZXk6IFwiYWRkXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGFkZChtb2RhbCwgY29udGFpbmVyKSB7XG4gICAgICB2YXIgbW9kYWxJbmRleCA9IHRoaXMubW9kYWxzLmluZGV4T2YobW9kYWwpO1xuXG4gICAgICBpZiAobW9kYWxJbmRleCAhPT0gLTEpIHtcbiAgICAgICAgcmV0dXJuIG1vZGFsSW5kZXg7XG4gICAgICB9XG5cbiAgICAgIG1vZGFsSW5kZXggPSB0aGlzLm1vZGFscy5sZW5ndGg7XG4gICAgICB0aGlzLm1vZGFscy5wdXNoKG1vZGFsKTsgLy8gSWYgdGhlIG1vZGFsIHdlIGFyZSBhZGRpbmcgaXMgYWxyZWFkeSBpbiB0aGUgRE9NLlxuXG4gICAgICBpZiAobW9kYWwubW9kYWxSZWYpIHtcbiAgICAgICAgYXJpYUhpZGRlbihtb2RhbC5tb2RhbFJlZiwgZmFsc2UpO1xuICAgICAgfVxuXG4gICAgICB2YXIgaGlkZGVuU2libGluZ05vZGVzID0gZ2V0SGlkZGVuU2libGluZ3MoY29udGFpbmVyKTtcbiAgICAgIGFyaWFIaWRkZW5TaWJsaW5ncyhjb250YWluZXIsIG1vZGFsLm1vdW50Tm9kZSwgbW9kYWwubW9kYWxSZWYsIGhpZGRlblNpYmxpbmdOb2RlcywgdHJ1ZSk7XG4gICAgICB2YXIgY29udGFpbmVySW5kZXggPSBmaW5kSW5kZXhPZih0aGlzLmNvbnRhaW5lcnMsIGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICAgIHJldHVybiBpdGVtLmNvbnRhaW5lciA9PT0gY29udGFpbmVyO1xuICAgICAgfSk7XG5cbiAgICAgIGlmIChjb250YWluZXJJbmRleCAhPT0gLTEpIHtcbiAgICAgICAgdGhpcy5jb250YWluZXJzW2NvbnRhaW5lckluZGV4XS5tb2RhbHMucHVzaChtb2RhbCk7XG4gICAgICAgIHJldHVybiBtb2RhbEluZGV4O1xuICAgICAgfVxuXG4gICAgICB0aGlzLmNvbnRhaW5lcnMucHVzaCh7XG4gICAgICAgIG1vZGFsczogW21vZGFsXSxcbiAgICAgICAgY29udGFpbmVyOiBjb250YWluZXIsXG4gICAgICAgIHJlc3RvcmU6IG51bGwsXG4gICAgICAgIGhpZGRlblNpYmxpbmdOb2RlczogaGlkZGVuU2libGluZ05vZGVzXG4gICAgICB9KTtcbiAgICAgIHJldHVybiBtb2RhbEluZGV4O1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJtb3VudFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBtb3VudChtb2RhbCwgcHJvcHMpIHtcbiAgICAgIHZhciBjb250YWluZXJJbmRleCA9IGZpbmRJbmRleE9mKHRoaXMuY29udGFpbmVycywgZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgICAgcmV0dXJuIGl0ZW0ubW9kYWxzLmluZGV4T2YobW9kYWwpICE9PSAtMTtcbiAgICAgIH0pO1xuICAgICAgdmFyIGNvbnRhaW5lckluZm8gPSB0aGlzLmNvbnRhaW5lcnNbY29udGFpbmVySW5kZXhdO1xuXG4gICAgICBpZiAoIWNvbnRhaW5lckluZm8ucmVzdG9yZSkge1xuICAgICAgICBjb250YWluZXJJbmZvLnJlc3RvcmUgPSBoYW5kbGVDb250YWluZXIoY29udGFpbmVySW5mbywgcHJvcHMpO1xuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJyZW1vdmVcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVtb3ZlKG1vZGFsKSB7XG4gICAgICB2YXIgbW9kYWxJbmRleCA9IHRoaXMubW9kYWxzLmluZGV4T2YobW9kYWwpO1xuXG4gICAgICBpZiAobW9kYWxJbmRleCA9PT0gLTEpIHtcbiAgICAgICAgcmV0dXJuIG1vZGFsSW5kZXg7XG4gICAgICB9XG5cbiAgICAgIHZhciBjb250YWluZXJJbmRleCA9IGZpbmRJbmRleE9mKHRoaXMuY29udGFpbmVycywgZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgICAgcmV0dXJuIGl0ZW0ubW9kYWxzLmluZGV4T2YobW9kYWwpICE9PSAtMTtcbiAgICAgIH0pO1xuICAgICAgdmFyIGNvbnRhaW5lckluZm8gPSB0aGlzLmNvbnRhaW5lcnNbY29udGFpbmVySW5kZXhdO1xuICAgICAgY29udGFpbmVySW5mby5tb2RhbHMuc3BsaWNlKGNvbnRhaW5lckluZm8ubW9kYWxzLmluZGV4T2YobW9kYWwpLCAxKTtcbiAgICAgIHRoaXMubW9kYWxzLnNwbGljZShtb2RhbEluZGV4LCAxKTsgLy8gSWYgdGhhdCB3YXMgdGhlIGxhc3QgbW9kYWwgaW4gYSBjb250YWluZXIsIGNsZWFuIHVwIHRoZSBjb250YWluZXIuXG5cbiAgICAgIGlmIChjb250YWluZXJJbmZvLm1vZGFscy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgLy8gVGhlIG1vZGFsIG1pZ2h0IGJlIGNsb3NlZCBiZWZvcmUgaXQgaGFkIHRoZSBjaGFuY2UgdG8gYmUgbW91bnRlZCBpbiB0aGUgRE9NLlxuICAgICAgICBpZiAoY29udGFpbmVySW5mby5yZXN0b3JlKSB7XG4gICAgICAgICAgY29udGFpbmVySW5mby5yZXN0b3JlKCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAobW9kYWwubW9kYWxSZWYpIHtcbiAgICAgICAgICAvLyBJbiBjYXNlIHRoZSBtb2RhbCB3YXNuJ3QgaW4gdGhlIERPTSB5ZXQuXG4gICAgICAgICAgYXJpYUhpZGRlbihtb2RhbC5tb2RhbFJlZiwgdHJ1ZSk7XG4gICAgICAgIH1cblxuICAgICAgICBhcmlhSGlkZGVuU2libGluZ3MoY29udGFpbmVySW5mby5jb250YWluZXIsIG1vZGFsLm1vdW50Tm9kZSwgbW9kYWwubW9kYWxSZWYsIGNvbnRhaW5lckluZm8uaGlkZGVuU2libGluZ05vZGVzLCBmYWxzZSk7XG4gICAgICAgIHRoaXMuY29udGFpbmVycy5zcGxpY2UoY29udGFpbmVySW5kZXgsIDEpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gT3RoZXJ3aXNlIG1ha2Ugc3VyZSB0aGUgbmV4dCB0b3AgbW9kYWwgaXMgdmlzaWJsZSB0byBhIHNjcmVlbiByZWFkZXIuXG4gICAgICAgIHZhciBuZXh0VG9wID0gY29udGFpbmVySW5mby5tb2RhbHNbY29udGFpbmVySW5mby5tb2RhbHMubGVuZ3RoIC0gMV07IC8vIGFzIHNvb24gYXMgYSBtb2RhbCBpcyBhZGRpbmcgaXRzIG1vZGFsUmVmIGlzIHVuZGVmaW5lZC4gaXQgY2FuJ3Qgc2V0XG4gICAgICAgIC8vIGFyaWEtaGlkZGVuIGJlY2F1c2UgdGhlIGRvbSBlbGVtZW50IGRvZXNuJ3QgZXhpc3QgZWl0aGVyXG4gICAgICAgIC8vIHdoZW4gbW9kYWwgd2FzIHVubW91bnRlZCBiZWZvcmUgbW9kYWxSZWYgZ2V0cyBudWxsXG5cbiAgICAgICAgaWYgKG5leHRUb3AubW9kYWxSZWYpIHtcbiAgICAgICAgICBhcmlhSGlkZGVuKG5leHRUb3AubW9kYWxSZWYsIGZhbHNlKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gbW9kYWxJbmRleDtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiaXNUb3BNb2RhbFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBpc1RvcE1vZGFsKG1vZGFsKSB7XG4gICAgICByZXR1cm4gdGhpcy5tb2RhbHMubGVuZ3RoID4gMCAmJiB0aGlzLm1vZGFsc1t0aGlzLm1vZGFscy5sZW5ndGggLSAxXSA9PT0gbW9kYWw7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIE1vZGFsTWFuYWdlcjtcbn0oKTtcblxuZXhwb3J0IHsgTW9kYWxNYW5hZ2VyIGFzIGRlZmF1bHQgfTsiLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7XG4gIGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTtcbiAgfVxufSIsIi8qIGVzbGludC1kaXNhYmxlIGNvbnNpc3RlbnQtcmV0dXJuLCBqc3gtYTExeS9uby1ub25pbnRlcmFjdGl2ZS10YWJpbmRleCwgY2FtZWxjYXNlICovXG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgKiBhcyBSZWFjdERPTSBmcm9tICdyZWFjdC1kb20nO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBvd25lckRvY3VtZW50IGZyb20gJy4uL3V0aWxzL293bmVyRG9jdW1lbnQnO1xuaW1wb3J0IHVzZUZvcmtSZWYgZnJvbSAnLi4vdXRpbHMvdXNlRm9ya1JlZic7XG5pbXBvcnQgeyBleGFjdFByb3AgfSBmcm9tICdAbWF0ZXJpYWwtdWkvdXRpbHMnO1xuLyoqXG4gKiBVdGlsaXR5IGNvbXBvbmVudCB0aGF0IGxvY2tzIGZvY3VzIGluc2lkZSB0aGUgY29tcG9uZW50LlxuICovXG5cbmZ1bmN0aW9uIFVuc3RhYmxlX1RyYXBGb2N1cyhwcm9wcykge1xuICB2YXIgY2hpbGRyZW4gPSBwcm9wcy5jaGlsZHJlbixcbiAgICAgIF9wcm9wcyRkaXNhYmxlQXV0b0ZvYyA9IHByb3BzLmRpc2FibGVBdXRvRm9jdXMsXG4gICAgICBkaXNhYmxlQXV0b0ZvY3VzID0gX3Byb3BzJGRpc2FibGVBdXRvRm9jID09PSB2b2lkIDAgPyBmYWxzZSA6IF9wcm9wcyRkaXNhYmxlQXV0b0ZvYyxcbiAgICAgIF9wcm9wcyRkaXNhYmxlRW5mb3JjZSA9IHByb3BzLmRpc2FibGVFbmZvcmNlRm9jdXMsXG4gICAgICBkaXNhYmxlRW5mb3JjZUZvY3VzID0gX3Byb3BzJGRpc2FibGVFbmZvcmNlID09PSB2b2lkIDAgPyBmYWxzZSA6IF9wcm9wcyRkaXNhYmxlRW5mb3JjZSxcbiAgICAgIF9wcm9wcyRkaXNhYmxlUmVzdG9yZSA9IHByb3BzLmRpc2FibGVSZXN0b3JlRm9jdXMsXG4gICAgICBkaXNhYmxlUmVzdG9yZUZvY3VzID0gX3Byb3BzJGRpc2FibGVSZXN0b3JlID09PSB2b2lkIDAgPyBmYWxzZSA6IF9wcm9wcyRkaXNhYmxlUmVzdG9yZSxcbiAgICAgIGdldERvYyA9IHByb3BzLmdldERvYyxcbiAgICAgIGlzRW5hYmxlZCA9IHByb3BzLmlzRW5hYmxlZCxcbiAgICAgIG9wZW4gPSBwcm9wcy5vcGVuO1xuICB2YXIgaWdub3JlTmV4dEVuZm9yY2VGb2N1cyA9IFJlYWN0LnVzZVJlZigpO1xuICB2YXIgc2VudGluZWxTdGFydCA9IFJlYWN0LnVzZVJlZihudWxsKTtcbiAgdmFyIHNlbnRpbmVsRW5kID0gUmVhY3QudXNlUmVmKG51bGwpO1xuICB2YXIgbm9kZVRvUmVzdG9yZSA9IFJlYWN0LnVzZVJlZigpO1xuICB2YXIgcm9vdFJlZiA9IFJlYWN0LnVzZVJlZihudWxsKTsgLy8gY2FuIGJlIHJlbW92ZWQgb25jZSB3ZSBkcm9wIHN1cHBvcnQgZm9yIG5vbiByZWYgZm9yd2FyZGluZyBjbGFzcyBjb21wb25lbnRzXG5cbiAgdmFyIGhhbmRsZU93blJlZiA9IFJlYWN0LnVzZUNhbGxiYWNrKGZ1bmN0aW9uIChpbnN0YW5jZSkge1xuICAgIC8vICNTdHJpY3RNb2RlIHJlYWR5XG4gICAgcm9vdFJlZi5jdXJyZW50ID0gUmVhY3RET00uZmluZERPTU5vZGUoaW5zdGFuY2UpO1xuICB9LCBbXSk7XG4gIHZhciBoYW5kbGVSZWYgPSB1c2VGb3JrUmVmKGNoaWxkcmVuLnJlZiwgaGFuZGxlT3duUmVmKTtcbiAgdmFyIHByZXZPcGVuUmVmID0gUmVhY3QudXNlUmVmKCk7XG4gIFJlYWN0LnVzZUVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgcHJldk9wZW5SZWYuY3VycmVudCA9IG9wZW47XG4gIH0sIFtvcGVuXSk7XG5cbiAgaWYgKCFwcmV2T3BlblJlZi5jdXJyZW50ICYmIG9wZW4gJiYgdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAvLyBXQVJOSU5HOiBQb3RlbnRpYWxseSB1bnNhZmUgaW4gY29uY3VycmVudCBtb2RlLlxuICAgIC8vIFRoZSB3YXkgdGhlIHJlYWQgb24gYG5vZGVUb1Jlc3RvcmVgIGlzIHNldHVwIGNvdWxkIG1ha2UgdGhpcyBhY3R1YWxseSBzYWZlLlxuICAgIC8vIFNheSB3ZSByZW5kZXIgYG9wZW49e2ZhbHNlfWAgLT4gYG9wZW49e3RydWV9YCBidXQgbmV2ZXIgY29tbWl0LlxuICAgIC8vIFdlIGhhdmUgbm93IHdyaXR0ZW4gYSBzdGF0ZSB0aGF0IHdhc24ndCBjb21taXR0ZWQuIEJ1dCBubyBjb21taXR0ZWQgZWZmZWN0XG4gICAgLy8gd2lsbCByZWFkIHRoaXMgd3JvbmcgdmFsdWUuIFdlIG9ubHkgcmVhZCBmcm9tIGBub2RlVG9SZXN0b3JlYCBpbiBlZmZlY3RzXG4gICAgLy8gdGhhdCB3ZXJlIGNvbW1pdHRlZCBvbiBgb3Blbj17dHJ1ZX1gXG4gICAgLy8gV0FSTklORzogUHJldmVudHMgdGhlIGluc3RhbmNlIGZyb20gYmVpbmcgZ2FyYmFnZSBjb2xsZWN0ZWQuIFNob3VsZCBvbmx5XG4gICAgLy8gaG9sZCBhIHdlYWsgcmVmLlxuICAgIG5vZGVUb1Jlc3RvcmUuY3VycmVudCA9IGdldERvYygpLmFjdGl2ZUVsZW1lbnQ7XG4gIH1cblxuICBSZWFjdC51c2VFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgIGlmICghb3Blbikge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciBkb2MgPSBvd25lckRvY3VtZW50KHJvb3RSZWYuY3VycmVudCk7IC8vIFdlIG1pZ2h0IHJlbmRlciBhbiBlbXB0eSBjaGlsZC5cblxuICAgIGlmICghZGlzYWJsZUF1dG9Gb2N1cyAmJiByb290UmVmLmN1cnJlbnQgJiYgIXJvb3RSZWYuY3VycmVudC5jb250YWlucyhkb2MuYWN0aXZlRWxlbWVudCkpIHtcbiAgICAgIGlmICghcm9vdFJlZi5jdXJyZW50Lmhhc0F0dHJpYnV0ZSgndGFiSW5kZXgnKSkge1xuICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoWydNYXRlcmlhbC1VSTogVGhlIG1vZGFsIGNvbnRlbnQgbm9kZSBkb2VzIG5vdCBhY2NlcHQgZm9jdXMuJywgJ0ZvciB0aGUgYmVuZWZpdCBvZiBhc3Npc3RpdmUgdGVjaG5vbG9naWVzLCAnICsgJ3RoZSB0YWJJbmRleCBvZiB0aGUgbm9kZSBpcyBiZWluZyBzZXQgdG8gXCItMVwiLiddLmpvaW4oJ1xcbicpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJvb3RSZWYuY3VycmVudC5zZXRBdHRyaWJ1dGUoJ3RhYkluZGV4JywgLTEpO1xuICAgICAgfVxuXG4gICAgICByb290UmVmLmN1cnJlbnQuZm9jdXMoKTtcbiAgICB9XG5cbiAgICB2YXIgY29udGFpbiA9IGZ1bmN0aW9uIGNvbnRhaW4oKSB7XG4gICAgICBpZiAoIWRvYy5oYXNGb2N1cygpIHx8IGRpc2FibGVFbmZvcmNlRm9jdXMgfHwgIWlzRW5hYmxlZCgpIHx8IGlnbm9yZU5leHRFbmZvcmNlRm9jdXMuY3VycmVudCkge1xuICAgICAgICBpZ25vcmVOZXh0RW5mb3JjZUZvY3VzLmN1cnJlbnQgPSBmYWxzZTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAocm9vdFJlZi5jdXJyZW50ICYmICFyb290UmVmLmN1cnJlbnQuY29udGFpbnMoZG9jLmFjdGl2ZUVsZW1lbnQpKSB7XG4gICAgICAgIHJvb3RSZWYuY3VycmVudC5mb2N1cygpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICB2YXIgbG9vcEZvY3VzID0gZnVuY3Rpb24gbG9vcEZvY3VzKGV2ZW50KSB7XG4gICAgICAvLyA5ID0gVGFiXG4gICAgICBpZiAoZGlzYWJsZUVuZm9yY2VGb2N1cyB8fCAhaXNFbmFibGVkKCkgfHwgZXZlbnQua2V5Q29kZSAhPT0gOSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9IC8vIE1ha2Ugc3VyZSB0aGUgbmV4dCB0YWIgc3RhcnRzIGZyb20gdGhlIHJpZ2h0IHBsYWNlLlxuXG5cbiAgICAgIGlmIChkb2MuYWN0aXZlRWxlbWVudCA9PT0gcm9vdFJlZi5jdXJyZW50KSB7XG4gICAgICAgIC8vIFdlIG5lZWQgdG8gaWdub3JlIHRoZSBuZXh0IGNvbnRhaW4gYXNcbiAgICAgICAgLy8gaXQgd2lsbCB0cnkgdG8gbW92ZSB0aGUgZm9jdXMgYmFjayB0byB0aGUgcm9vdFJlZiBlbGVtZW50LlxuICAgICAgICBpZ25vcmVOZXh0RW5mb3JjZUZvY3VzLmN1cnJlbnQgPSB0cnVlO1xuXG4gICAgICAgIGlmIChldmVudC5zaGlmdEtleSkge1xuICAgICAgICAgIHNlbnRpbmVsRW5kLmN1cnJlbnQuZm9jdXMoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzZW50aW5lbFN0YXJ0LmN1cnJlbnQuZm9jdXMoKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG5cbiAgICBkb2MuYWRkRXZlbnRMaXN0ZW5lcignZm9jdXMnLCBjb250YWluLCB0cnVlKTtcbiAgICBkb2MuYWRkRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsIGxvb3BGb2N1cywgdHJ1ZSk7IC8vIFdpdGggRWRnZSwgU2FmYXJpIGFuZCBGaXJlZm94LCBubyBmb2N1cyByZWxhdGVkIGV2ZW50cyBhcmUgZmlyZWQgd2hlbiB0aGUgZm9jdXNlZCBhcmVhIHN0b3BzIGJlaW5nIGEgZm9jdXNlZCBhcmVhXG4gICAgLy8gZS5nLiBodHRwczovL2J1Z3ppbGxhLm1vemlsbGEub3JnL3Nob3dfYnVnLmNnaT9pZD01NTk1NjEuXG4gICAgLy9cbiAgICAvLyBUaGUgd2hhdHdnIHNwZWMgZGVmaW5lcyBob3cgdGhlIGJyb3dzZXIgc2hvdWxkIGJlaGF2ZSBidXQgZG9lcyBub3QgZXhwbGljaXRseSBtZW50aW9uIGFueSBldmVudHM6XG4gICAgLy8gaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2UvaW50ZXJhY3Rpb24uaHRtbCNmb2N1cy1maXh1cC1ydWxlLlxuXG4gICAgdmFyIGludGVydmFsID0gc2V0SW50ZXJ2YWwoZnVuY3Rpb24gKCkge1xuICAgICAgY29udGFpbigpO1xuICAgIH0sIDUwKTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgY2xlYXJJbnRlcnZhbChpbnRlcnZhbCk7XG4gICAgICBkb2MucmVtb3ZlRXZlbnRMaXN0ZW5lcignZm9jdXMnLCBjb250YWluLCB0cnVlKTtcbiAgICAgIGRvYy5yZW1vdmVFdmVudExpc3RlbmVyKCdrZXlkb3duJywgbG9vcEZvY3VzLCB0cnVlKTsgLy8gcmVzdG9yZUxhc3RGb2N1cygpXG5cbiAgICAgIGlmICghZGlzYWJsZVJlc3RvcmVGb2N1cykge1xuICAgICAgICAvLyBJbiBJRSAxMSBpdCBpcyBwb3NzaWJsZSBmb3IgZG9jdW1lbnQuYWN0aXZlRWxlbWVudCB0byBiZSBudWxsIHJlc3VsdGluZ1xuICAgICAgICAvLyBpbiBub2RlVG9SZXN0b3JlLmN1cnJlbnQgYmVpbmcgbnVsbC5cbiAgICAgICAgLy8gTm90IGFsbCBlbGVtZW50cyBpbiBJRSAxMSBoYXZlIGEgZm9jdXMgbWV0aG9kLlxuICAgICAgICAvLyBPbmNlIElFIDExIHN1cHBvcnQgaXMgZHJvcHBlZCB0aGUgZm9jdXMoKSBjYWxsIGNhbiBiZSB1bmNvbmRpdGlvbmFsLlxuICAgICAgICBpZiAobm9kZVRvUmVzdG9yZS5jdXJyZW50ICYmIG5vZGVUb1Jlc3RvcmUuY3VycmVudC5mb2N1cykge1xuICAgICAgICAgIG5vZGVUb1Jlc3RvcmUuY3VycmVudC5mb2N1cygpO1xuICAgICAgICB9XG5cbiAgICAgICAgbm9kZVRvUmVzdG9yZS5jdXJyZW50ID0gbnVsbDtcbiAgICAgIH1cbiAgICB9O1xuICB9LCBbZGlzYWJsZUF1dG9Gb2N1cywgZGlzYWJsZUVuZm9yY2VGb2N1cywgZGlzYWJsZVJlc3RvcmVGb2N1cywgaXNFbmFibGVkLCBvcGVuXSk7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChSZWFjdC5GcmFnbWVudCwgbnVsbCwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwge1xuICAgIHRhYkluZGV4OiAwLFxuICAgIHJlZjogc2VudGluZWxTdGFydCxcbiAgICBcImRhdGEtdGVzdFwiOiBcInNlbnRpbmVsU3RhcnRcIlxuICB9KSwgLyojX19QVVJFX18qL1JlYWN0LmNsb25lRWxlbWVudChjaGlsZHJlbiwge1xuICAgIHJlZjogaGFuZGxlUmVmXG4gIH0pLCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7XG4gICAgdGFiSW5kZXg6IDAsXG4gICAgcmVmOiBzZW50aW5lbEVuZCxcbiAgICBcImRhdGEtdGVzdFwiOiBcInNlbnRpbmVsRW5kXCJcbiAgfSkpO1xufVxuXG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBVbnN0YWJsZV9UcmFwRm9jdXMucHJvcFR5cGVzID0ge1xuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBXYXJuaW5nIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIC8vIHwgVGhlc2UgUHJvcFR5cGVzIGFyZSBnZW5lcmF0ZWQgZnJvbSB0aGUgVHlwZVNjcmlwdCB0eXBlIGRlZmluaXRpb25zIHxcbiAgLy8gfCAgICAgVG8gdXBkYXRlIHRoZW0gZWRpdCB0aGUgZC50cyBmaWxlIGFuZCBydW4gXCJ5YXJuIHByb3B0eXBlc1wiICAgICB8XG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuICAvKipcbiAgICogQSBzaW5nbGUgY2hpbGQgY29udGVudCBlbGVtZW50LlxuICAgKi9cbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSB0cmFwIGZvY3VzIHdpbGwgbm90IGF1dG9tYXRpY2FsbHkgc2hpZnQgZm9jdXMgdG8gaXRzZWxmIHdoZW4gaXQgb3BlbnMsIGFuZFxuICAgKiByZXBsYWNlIGl0IHRvIHRoZSBsYXN0IGZvY3VzZWQgZWxlbWVudCB3aGVuIGl0IGNsb3Nlcy5cbiAgICogVGhpcyBhbHNvIHdvcmtzIGNvcnJlY3RseSB3aXRoIGFueSB0cmFwIGZvY3VzIGNoaWxkcmVuIHRoYXQgaGF2ZSB0aGUgYGRpc2FibGVBdXRvRm9jdXNgIHByb3AuXG4gICAqXG4gICAqIEdlbmVyYWxseSB0aGlzIHNob3VsZCBuZXZlciBiZSBzZXQgdG8gYHRydWVgIGFzIGl0IG1ha2VzIHRoZSB0cmFwIGZvY3VzIGxlc3NcbiAgICogYWNjZXNzaWJsZSB0byBhc3Npc3RpdmUgdGVjaG5vbG9naWVzLCBsaWtlIHNjcmVlbiByZWFkZXJzLlxuICAgKi9cbiAgZGlzYWJsZUF1dG9Gb2N1czogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIHRyYXAgZm9jdXMgd2lsbCBub3QgcHJldmVudCBmb2N1cyBmcm9tIGxlYXZpbmcgdGhlIHRyYXAgZm9jdXMgd2hpbGUgb3Blbi5cbiAgICpcbiAgICogR2VuZXJhbGx5IHRoaXMgc2hvdWxkIG5ldmVyIGJlIHNldCB0byBgdHJ1ZWAgYXMgaXQgbWFrZXMgdGhlIHRyYXAgZm9jdXMgbGVzc1xuICAgKiBhY2Nlc3NpYmxlIHRvIGFzc2lzdGl2ZSB0ZWNobm9sb2dpZXMsIGxpa2Ugc2NyZWVuIHJlYWRlcnMuXG4gICAqL1xuICBkaXNhYmxlRW5mb3JjZUZvY3VzOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgdHJhcCBmb2N1cyB3aWxsIG5vdCByZXN0b3JlIGZvY3VzIHRvIHByZXZpb3VzbHkgZm9jdXNlZCBlbGVtZW50IG9uY2VcbiAgICogdHJhcCBmb2N1cyBpcyBoaWRkZW4uXG4gICAqL1xuICBkaXNhYmxlUmVzdG9yZUZvY3VzOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogUmV0dXJuIHRoZSBkb2N1bWVudCB0byBjb25zaWRlci5cbiAgICogV2UgdXNlIGl0IHRvIGltcGxlbWVudCB0aGUgcmVzdG9yZSBmb2N1cyBiZXR3ZWVuIGRpZmZlcmVudCBicm93c2VyIGRvY3VtZW50cy5cbiAgICovXG4gIGdldERvYzogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcblxuICAvKipcbiAgICogRG8gd2Ugc3RpbGwgd2FudCB0byBlbmZvcmNlIHRoZSBmb2N1cz9cbiAgICogVGhpcyBwcm9wIGhlbHBzIG5lc3RpbmcgVHJhcEZvY3VzIGVsZW1lbnRzLlxuICAgKi9cbiAgaXNFbmFibGVkOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIGZvY3VzIHdpbGwgYmUgbG9ja2VkLlxuICAgKi9cbiAgb3BlbjogUHJvcFR5cGVzLmJvb2wuaXNSZXF1aXJlZFxufSA6IHZvaWQgMDtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG4gIFVuc3RhYmxlX1RyYXBGb2N1c1sncHJvcFR5cGVzJyArICcnXSA9IGV4YWN0UHJvcChVbnN0YWJsZV9UcmFwRm9jdXMucHJvcFR5cGVzKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgVW5zdGFibGVfVHJhcEZvY3VzOyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNcIjtcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5leHBvcnQgdmFyIHN0eWxlcyA9IHtcbiAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudC4gKi9cbiAgcm9vdDoge1xuICAgIHpJbmRleDogLTEsXG4gICAgcG9zaXRpb246ICdmaXhlZCcsXG4gICAgcmlnaHQ6IDAsXG4gICAgYm90dG9tOiAwLFxuICAgIHRvcDogMCxcbiAgICBsZWZ0OiAwLFxuICAgIGJhY2tncm91bmRDb2xvcjogJ3JnYmEoMCwgMCwgMCwgMC41KScsXG4gICAgV2Via2l0VGFwSGlnaGxpZ2h0Q29sb3I6ICd0cmFuc3BhcmVudCdcbiAgfSxcblxuICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBpbnZpc2libGU9e3RydWV9YC4gKi9cbiAgaW52aXNpYmxlOiB7XG4gICAgYmFja2dyb3VuZENvbG9yOiAndHJhbnNwYXJlbnQnXG4gIH1cbn07XG4vKipcbiAqIEBpZ25vcmUgLSBpbnRlcm5hbCBjb21wb25lbnQuXG4gKi9cblxudmFyIFNpbXBsZUJhY2tkcm9wID0gLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gU2ltcGxlQmFja2Ryb3AocHJvcHMsIHJlZikge1xuICB2YXIgX3Byb3BzJGludmlzaWJsZSA9IHByb3BzLmludmlzaWJsZSxcbiAgICAgIGludmlzaWJsZSA9IF9wcm9wcyRpbnZpc2libGUgPT09IHZvaWQgMCA/IGZhbHNlIDogX3Byb3BzJGludmlzaWJsZSxcbiAgICAgIG9wZW4gPSBwcm9wcy5vcGVuLFxuICAgICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMocHJvcHMsIFtcImludmlzaWJsZVwiLCBcIm9wZW5cIl0pO1xuXG4gIHJldHVybiBvcGVuID8gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgX2V4dGVuZHMoe1xuICAgIFwiYXJpYS1oaWRkZW5cIjogdHJ1ZSxcbiAgICByZWY6IHJlZlxuICB9LCBvdGhlciwge1xuICAgIHN0eWxlOiBfZXh0ZW5kcyh7fSwgc3R5bGVzLnJvb3QsIGludmlzaWJsZSA/IHN0eWxlcy5pbnZpc2libGUgOiB7fSwgb3RoZXIuc3R5bGUpXG4gIH0pKSA6IG51bGw7XG59KTtcbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFNpbXBsZUJhY2tkcm9wLnByb3BUeXBlcyA9IHtcbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGJhY2tkcm9wIGlzIGludmlzaWJsZS5cbiAgICogSXQgY2FuIGJlIHVzZWQgd2hlbiByZW5kZXJpbmcgYSBwb3BvdmVyIG9yIGEgY3VzdG9tIHNlbGVjdCBjb21wb25lbnQuXG4gICAqL1xuICBpbnZpc2libGU6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBiYWNrZHJvcCBpcyBvcGVuLlxuICAgKi9cbiAgb3BlbjogUHJvcFR5cGVzLmJvb2wuaXNSZXF1aXJlZFxufSA6IHZvaWQgMDtcbmV4cG9ydCBkZWZhdWx0IFNpbXBsZUJhY2tkcm9wOyIsImltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzXCI7XG5pbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCAqIGFzIFJlYWN0RE9NIGZyb20gJ3JlYWN0LWRvbSc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHsgZ2V0VGhlbWVQcm9wcywgdXNlVGhlbWUgfSBmcm9tICdAbWF0ZXJpYWwtdWkvc3R5bGVzJztcbmltcG9ydCB7IGVsZW1lbnRBY2NlcHRpbmdSZWYsIEhUTUxFbGVtZW50VHlwZSB9IGZyb20gJ0BtYXRlcmlhbC11aS91dGlscyc7XG5pbXBvcnQgb3duZXJEb2N1bWVudCBmcm9tICcuLi91dGlscy9vd25lckRvY3VtZW50JztcbmltcG9ydCBQb3J0YWwgZnJvbSAnLi4vUG9ydGFsJztcbmltcG9ydCBjcmVhdGVDaGFpbmVkRnVuY3Rpb24gZnJvbSAnLi4vdXRpbHMvY3JlYXRlQ2hhaW5lZEZ1bmN0aW9uJztcbmltcG9ydCB1c2VGb3JrUmVmIGZyb20gJy4uL3V0aWxzL3VzZUZvcmtSZWYnO1xuaW1wb3J0IHVzZUV2ZW50Q2FsbGJhY2sgZnJvbSAnLi4vdXRpbHMvdXNlRXZlbnRDYWxsYmFjayc7XG5pbXBvcnQgekluZGV4IGZyb20gJy4uL3N0eWxlcy96SW5kZXgnO1xuaW1wb3J0IE1vZGFsTWFuYWdlciwgeyBhcmlhSGlkZGVuIH0gZnJvbSAnLi9Nb2RhbE1hbmFnZXInO1xuaW1wb3J0IFRyYXBGb2N1cyBmcm9tICcuLi9VbnN0YWJsZV9UcmFwRm9jdXMnO1xuaW1wb3J0IFNpbXBsZUJhY2tkcm9wIGZyb20gJy4vU2ltcGxlQmFja2Ryb3AnO1xuXG5mdW5jdGlvbiBnZXRDb250YWluZXIoY29udGFpbmVyKSB7XG4gIGNvbnRhaW5lciA9IHR5cGVvZiBjb250YWluZXIgPT09ICdmdW5jdGlvbicgPyBjb250YWluZXIoKSA6IGNvbnRhaW5lcjtcbiAgcmV0dXJuIFJlYWN0RE9NLmZpbmRET01Ob2RlKGNvbnRhaW5lcik7XG59XG5cbmZ1bmN0aW9uIGdldEhhc1RyYW5zaXRpb24ocHJvcHMpIHtcbiAgcmV0dXJuIHByb3BzLmNoaWxkcmVuID8gcHJvcHMuY2hpbGRyZW4ucHJvcHMuaGFzT3duUHJvcGVydHkoJ2luJykgOiBmYWxzZTtcbn0gLy8gQSBtb2RhbCBtYW5hZ2VyIHVzZWQgdG8gdHJhY2sgYW5kIG1hbmFnZSB0aGUgc3RhdGUgb2Ygb3BlbiBNb2RhbHMuXG4vLyBNb2RhbHMgZG9uJ3Qgb3BlbiBvbiB0aGUgc2VydmVyIHNvIHRoaXMgd29uJ3QgY29uZmxpY3Qgd2l0aCBjb25jdXJyZW50IHJlcXVlc3RzLlxuXG5cbnZhciBkZWZhdWx0TWFuYWdlciA9IG5ldyBNb2RhbE1hbmFnZXIoKTtcbmV4cG9ydCB2YXIgc3R5bGVzID0gZnVuY3Rpb24gc3R5bGVzKHRoZW1lKSB7XG4gIHJldHVybiB7XG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudC4gKi9cbiAgICByb290OiB7XG4gICAgICBwb3NpdGlvbjogJ2ZpeGVkJyxcbiAgICAgIHpJbmRleDogdGhlbWUuekluZGV4Lm1vZGFsLFxuICAgICAgcmlnaHQ6IDAsXG4gICAgICBib3R0b206IDAsXG4gICAgICB0b3A6IDAsXG4gICAgICBsZWZ0OiAwXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgdGhlIGBNb2RhbGAgaGFzIGV4aXRlZC4gKi9cbiAgICBoaWRkZW46IHtcbiAgICAgIHZpc2liaWxpdHk6ICdoaWRkZW4nXG4gICAgfVxuICB9O1xufTtcbi8qKlxuICogTW9kYWwgaXMgYSBsb3dlci1sZXZlbCBjb25zdHJ1Y3QgdGhhdCBpcyBsZXZlcmFnZWQgYnkgdGhlIGZvbGxvd2luZyBjb21wb25lbnRzOlxuICpcbiAqIC0gW0RpYWxvZ10oL2FwaS9kaWFsb2cvKVxuICogLSBbRHJhd2VyXSgvYXBpL2RyYXdlci8pXG4gKiAtIFtNZW51XSgvYXBpL21lbnUvKVxuICogLSBbUG9wb3Zlcl0oL2FwaS9wb3BvdmVyLylcbiAqXG4gKiBJZiB5b3UgYXJlIGNyZWF0aW5nIGEgbW9kYWwgZGlhbG9nLCB5b3UgcHJvYmFibHkgd2FudCB0byB1c2UgdGhlIFtEaWFsb2ddKC9hcGkvZGlhbG9nLykgY29tcG9uZW50XG4gKiByYXRoZXIgdGhhbiBkaXJlY3RseSB1c2luZyBNb2RhbC5cbiAqXG4gKiBUaGlzIGNvbXBvbmVudCBzaGFyZXMgbWFueSBjb25jZXB0cyB3aXRoIFtyZWFjdC1vdmVybGF5c10oaHR0cHM6Ly9yZWFjdC1ib290c3RyYXAuZ2l0aHViLmlvL3JlYWN0LW92ZXJsYXlzLyNtb2RhbHMpLlxuICovXG5cbnZhciBNb2RhbCA9IC8qI19fUFVSRV9fKi9SZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIE1vZGFsKGluUHJvcHMsIHJlZikge1xuICB2YXIgdGhlbWUgPSB1c2VUaGVtZSgpO1xuICB2YXIgcHJvcHMgPSBnZXRUaGVtZVByb3BzKHtcbiAgICBuYW1lOiAnTXVpTW9kYWwnLFxuICAgIHByb3BzOiBfZXh0ZW5kcyh7fSwgaW5Qcm9wcyksXG4gICAgdGhlbWU6IHRoZW1lXG4gIH0pO1xuXG4gIHZhciBfcHJvcHMkQmFja2Ryb3BDb21wb24gPSBwcm9wcy5CYWNrZHJvcENvbXBvbmVudCxcbiAgICAgIEJhY2tkcm9wQ29tcG9uZW50ID0gX3Byb3BzJEJhY2tkcm9wQ29tcG9uID09PSB2b2lkIDAgPyBTaW1wbGVCYWNrZHJvcCA6IF9wcm9wcyRCYWNrZHJvcENvbXBvbixcbiAgICAgIEJhY2tkcm9wUHJvcHMgPSBwcm9wcy5CYWNrZHJvcFByb3BzLFxuICAgICAgY2hpbGRyZW4gPSBwcm9wcy5jaGlsZHJlbixcbiAgICAgIF9wcm9wcyRjbG9zZUFmdGVyVHJhbiA9IHByb3BzLmNsb3NlQWZ0ZXJUcmFuc2l0aW9uLFxuICAgICAgY2xvc2VBZnRlclRyYW5zaXRpb24gPSBfcHJvcHMkY2xvc2VBZnRlclRyYW4gPT09IHZvaWQgMCA/IGZhbHNlIDogX3Byb3BzJGNsb3NlQWZ0ZXJUcmFuLFxuICAgICAgY29udGFpbmVyID0gcHJvcHMuY29udGFpbmVyLFxuICAgICAgX3Byb3BzJGRpc2FibGVBdXRvRm9jID0gcHJvcHMuZGlzYWJsZUF1dG9Gb2N1cyxcbiAgICAgIGRpc2FibGVBdXRvRm9jdXMgPSBfcHJvcHMkZGlzYWJsZUF1dG9Gb2MgPT09IHZvaWQgMCA/IGZhbHNlIDogX3Byb3BzJGRpc2FibGVBdXRvRm9jLFxuICAgICAgX3Byb3BzJGRpc2FibGVCYWNrZHJvID0gcHJvcHMuZGlzYWJsZUJhY2tkcm9wQ2xpY2ssXG4gICAgICBkaXNhYmxlQmFja2Ryb3BDbGljayA9IF9wcm9wcyRkaXNhYmxlQmFja2RybyA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcHJvcHMkZGlzYWJsZUJhY2tkcm8sXG4gICAgICBfcHJvcHMkZGlzYWJsZUVuZm9yY2UgPSBwcm9wcy5kaXNhYmxlRW5mb3JjZUZvY3VzLFxuICAgICAgZGlzYWJsZUVuZm9yY2VGb2N1cyA9IF9wcm9wcyRkaXNhYmxlRW5mb3JjZSA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcHJvcHMkZGlzYWJsZUVuZm9yY2UsXG4gICAgICBfcHJvcHMkZGlzYWJsZUVzY2FwZUsgPSBwcm9wcy5kaXNhYmxlRXNjYXBlS2V5RG93bixcbiAgICAgIGRpc2FibGVFc2NhcGVLZXlEb3duID0gX3Byb3BzJGRpc2FibGVFc2NhcGVLID09PSB2b2lkIDAgPyBmYWxzZSA6IF9wcm9wcyRkaXNhYmxlRXNjYXBlSyxcbiAgICAgIF9wcm9wcyRkaXNhYmxlUG9ydGFsID0gcHJvcHMuZGlzYWJsZVBvcnRhbCxcbiAgICAgIGRpc2FibGVQb3J0YWwgPSBfcHJvcHMkZGlzYWJsZVBvcnRhbCA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcHJvcHMkZGlzYWJsZVBvcnRhbCxcbiAgICAgIF9wcm9wcyRkaXNhYmxlUmVzdG9yZSA9IHByb3BzLmRpc2FibGVSZXN0b3JlRm9jdXMsXG4gICAgICBkaXNhYmxlUmVzdG9yZUZvY3VzID0gX3Byb3BzJGRpc2FibGVSZXN0b3JlID09PSB2b2lkIDAgPyBmYWxzZSA6IF9wcm9wcyRkaXNhYmxlUmVzdG9yZSxcbiAgICAgIF9wcm9wcyRkaXNhYmxlU2Nyb2xsTCA9IHByb3BzLmRpc2FibGVTY3JvbGxMb2NrLFxuICAgICAgZGlzYWJsZVNjcm9sbExvY2sgPSBfcHJvcHMkZGlzYWJsZVNjcm9sbEwgPT09IHZvaWQgMCA/IGZhbHNlIDogX3Byb3BzJGRpc2FibGVTY3JvbGxMLFxuICAgICAgX3Byb3BzJGhpZGVCYWNrZHJvcCA9IHByb3BzLmhpZGVCYWNrZHJvcCxcbiAgICAgIGhpZGVCYWNrZHJvcCA9IF9wcm9wcyRoaWRlQmFja2Ryb3AgPT09IHZvaWQgMCA/IGZhbHNlIDogX3Byb3BzJGhpZGVCYWNrZHJvcCxcbiAgICAgIF9wcm9wcyRrZWVwTW91bnRlZCA9IHByb3BzLmtlZXBNb3VudGVkLFxuICAgICAga2VlcE1vdW50ZWQgPSBfcHJvcHMka2VlcE1vdW50ZWQgPT09IHZvaWQgMCA/IGZhbHNlIDogX3Byb3BzJGtlZXBNb3VudGVkLFxuICAgICAgX3Byb3BzJG1hbmFnZXIgPSBwcm9wcy5tYW5hZ2VyLFxuICAgICAgbWFuYWdlciA9IF9wcm9wcyRtYW5hZ2VyID09PSB2b2lkIDAgPyBkZWZhdWx0TWFuYWdlciA6IF9wcm9wcyRtYW5hZ2VyLFxuICAgICAgb25CYWNrZHJvcENsaWNrID0gcHJvcHMub25CYWNrZHJvcENsaWNrLFxuICAgICAgb25DbG9zZSA9IHByb3BzLm9uQ2xvc2UsXG4gICAgICBvbkVzY2FwZUtleURvd24gPSBwcm9wcy5vbkVzY2FwZUtleURvd24sXG4gICAgICBvblJlbmRlcmVkID0gcHJvcHMub25SZW5kZXJlZCxcbiAgICAgIG9wZW4gPSBwcm9wcy5vcGVuLFxuICAgICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMocHJvcHMsIFtcIkJhY2tkcm9wQ29tcG9uZW50XCIsIFwiQmFja2Ryb3BQcm9wc1wiLCBcImNoaWxkcmVuXCIsIFwiY2xvc2VBZnRlclRyYW5zaXRpb25cIiwgXCJjb250YWluZXJcIiwgXCJkaXNhYmxlQXV0b0ZvY3VzXCIsIFwiZGlzYWJsZUJhY2tkcm9wQ2xpY2tcIiwgXCJkaXNhYmxlRW5mb3JjZUZvY3VzXCIsIFwiZGlzYWJsZUVzY2FwZUtleURvd25cIiwgXCJkaXNhYmxlUG9ydGFsXCIsIFwiZGlzYWJsZVJlc3RvcmVGb2N1c1wiLCBcImRpc2FibGVTY3JvbGxMb2NrXCIsIFwiaGlkZUJhY2tkcm9wXCIsIFwia2VlcE1vdW50ZWRcIiwgXCJtYW5hZ2VyXCIsIFwib25CYWNrZHJvcENsaWNrXCIsIFwib25DbG9zZVwiLCBcIm9uRXNjYXBlS2V5RG93blwiLCBcIm9uUmVuZGVyZWRcIiwgXCJvcGVuXCJdKTtcblxuICB2YXIgX1JlYWN0JHVzZVN0YXRlID0gUmVhY3QudXNlU3RhdGUodHJ1ZSksXG4gICAgICBleGl0ZWQgPSBfUmVhY3QkdXNlU3RhdGVbMF0sXG4gICAgICBzZXRFeGl0ZWQgPSBfUmVhY3QkdXNlU3RhdGVbMV07XG5cbiAgdmFyIG1vZGFsID0gUmVhY3QudXNlUmVmKHt9KTtcbiAgdmFyIG1vdW50Tm9kZVJlZiA9IFJlYWN0LnVzZVJlZihudWxsKTtcbiAgdmFyIG1vZGFsUmVmID0gUmVhY3QudXNlUmVmKG51bGwpO1xuICB2YXIgaGFuZGxlUmVmID0gdXNlRm9ya1JlZihtb2RhbFJlZiwgcmVmKTtcbiAgdmFyIGhhc1RyYW5zaXRpb24gPSBnZXRIYXNUcmFuc2l0aW9uKHByb3BzKTtcblxuICB2YXIgZ2V0RG9jID0gZnVuY3Rpb24gZ2V0RG9jKCkge1xuICAgIHJldHVybiBvd25lckRvY3VtZW50KG1vdW50Tm9kZVJlZi5jdXJyZW50KTtcbiAgfTtcblxuICB2YXIgZ2V0TW9kYWwgPSBmdW5jdGlvbiBnZXRNb2RhbCgpIHtcbiAgICBtb2RhbC5jdXJyZW50Lm1vZGFsUmVmID0gbW9kYWxSZWYuY3VycmVudDtcbiAgICBtb2RhbC5jdXJyZW50Lm1vdW50Tm9kZSA9IG1vdW50Tm9kZVJlZi5jdXJyZW50O1xuICAgIHJldHVybiBtb2RhbC5jdXJyZW50O1xuICB9O1xuXG4gIHZhciBoYW5kbGVNb3VudGVkID0gZnVuY3Rpb24gaGFuZGxlTW91bnRlZCgpIHtcbiAgICBtYW5hZ2VyLm1vdW50KGdldE1vZGFsKCksIHtcbiAgICAgIGRpc2FibGVTY3JvbGxMb2NrOiBkaXNhYmxlU2Nyb2xsTG9ja1xuICAgIH0pOyAvLyBGaXggYSBidWcgb24gQ2hyb21lIHdoZXJlIHRoZSBzY3JvbGwgaXNuJ3QgaW5pdGlhbGx5IDAuXG5cbiAgICBtb2RhbFJlZi5jdXJyZW50LnNjcm9sbFRvcCA9IDA7XG4gIH07XG5cbiAgdmFyIGhhbmRsZU9wZW4gPSB1c2VFdmVudENhbGxiYWNrKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgcmVzb2x2ZWRDb250YWluZXIgPSBnZXRDb250YWluZXIoY29udGFpbmVyKSB8fCBnZXREb2MoKS5ib2R5O1xuICAgIG1hbmFnZXIuYWRkKGdldE1vZGFsKCksIHJlc29sdmVkQ29udGFpbmVyKTsgLy8gVGhlIGVsZW1lbnQgd2FzIGFscmVhZHkgbW91bnRlZC5cblxuICAgIGlmIChtb2RhbFJlZi5jdXJyZW50KSB7XG4gICAgICBoYW5kbGVNb3VudGVkKCk7XG4gICAgfVxuICB9KTtcbiAgdmFyIGlzVG9wTW9kYWwgPSBSZWFjdC51c2VDYWxsYmFjayhmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIG1hbmFnZXIuaXNUb3BNb2RhbChnZXRNb2RhbCgpKTtcbiAgfSwgW21hbmFnZXJdKTtcbiAgdmFyIGhhbmRsZVBvcnRhbFJlZiA9IHVzZUV2ZW50Q2FsbGJhY2soZnVuY3Rpb24gKG5vZGUpIHtcbiAgICBtb3VudE5vZGVSZWYuY3VycmVudCA9IG5vZGU7XG5cbiAgICBpZiAoIW5vZGUpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAob25SZW5kZXJlZCkge1xuICAgICAgb25SZW5kZXJlZCgpO1xuICAgIH1cblxuICAgIGlmIChvcGVuICYmIGlzVG9wTW9kYWwoKSkge1xuICAgICAgaGFuZGxlTW91bnRlZCgpO1xuICAgIH0gZWxzZSB7XG4gICAgICBhcmlhSGlkZGVuKG1vZGFsUmVmLmN1cnJlbnQsIHRydWUpO1xuICAgIH1cbiAgfSk7XG4gIHZhciBoYW5kbGVDbG9zZSA9IFJlYWN0LnVzZUNhbGxiYWNrKGZ1bmN0aW9uICgpIHtcbiAgICBtYW5hZ2VyLnJlbW92ZShnZXRNb2RhbCgpKTtcbiAgfSwgW21hbmFnZXJdKTtcbiAgUmVhY3QudXNlRWZmZWN0KGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgaGFuZGxlQ2xvc2UoKTtcbiAgICB9O1xuICB9LCBbaGFuZGxlQ2xvc2VdKTtcbiAgUmVhY3QudXNlRWZmZWN0KGZ1bmN0aW9uICgpIHtcbiAgICBpZiAob3Blbikge1xuICAgICAgaGFuZGxlT3BlbigpO1xuICAgIH0gZWxzZSBpZiAoIWhhc1RyYW5zaXRpb24gfHwgIWNsb3NlQWZ0ZXJUcmFuc2l0aW9uKSB7XG4gICAgICBoYW5kbGVDbG9zZSgpO1xuICAgIH1cbiAgfSwgW29wZW4sIGhhbmRsZUNsb3NlLCBoYXNUcmFuc2l0aW9uLCBjbG9zZUFmdGVyVHJhbnNpdGlvbiwgaGFuZGxlT3Blbl0pO1xuXG4gIGlmICgha2VlcE1vdW50ZWQgJiYgIW9wZW4gJiYgKCFoYXNUcmFuc2l0aW9uIHx8IGV4aXRlZCkpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIHZhciBoYW5kbGVFbnRlciA9IGZ1bmN0aW9uIGhhbmRsZUVudGVyKCkge1xuICAgIHNldEV4aXRlZChmYWxzZSk7XG4gIH07XG5cbiAgdmFyIGhhbmRsZUV4aXRlZCA9IGZ1bmN0aW9uIGhhbmRsZUV4aXRlZCgpIHtcbiAgICBzZXRFeGl0ZWQodHJ1ZSk7XG5cbiAgICBpZiAoY2xvc2VBZnRlclRyYW5zaXRpb24pIHtcbiAgICAgIGhhbmRsZUNsb3NlKCk7XG4gICAgfVxuICB9O1xuXG4gIHZhciBoYW5kbGVCYWNrZHJvcENsaWNrID0gZnVuY3Rpb24gaGFuZGxlQmFja2Ryb3BDbGljayhldmVudCkge1xuICAgIGlmIChldmVudC50YXJnZXQgIT09IGV2ZW50LmN1cnJlbnRUYXJnZXQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAob25CYWNrZHJvcENsaWNrKSB7XG4gICAgICBvbkJhY2tkcm9wQ2xpY2soZXZlbnQpO1xuICAgIH1cblxuICAgIGlmICghZGlzYWJsZUJhY2tkcm9wQ2xpY2sgJiYgb25DbG9zZSkge1xuICAgICAgb25DbG9zZShldmVudCwgJ2JhY2tkcm9wQ2xpY2snKTtcbiAgICB9XG4gIH07XG5cbiAgdmFyIGhhbmRsZUtleURvd24gPSBmdW5jdGlvbiBoYW5kbGVLZXlEb3duKGV2ZW50KSB7XG4gICAgLy8gVGhlIGhhbmRsZXIgZG9lc24ndCB0YWtlIGV2ZW50LmRlZmF1bHRQcmV2ZW50ZWQgaW50byBhY2NvdW50OlxuICAgIC8vXG4gICAgLy8gZXZlbnQucHJldmVudERlZmF1bHQoKSBpcyBtZWFudCB0byBzdG9wIGRlZmF1bHQgYmVoYXZpb3VycyBsaWtlXG4gICAgLy8gY2xpY2tpbmcgYSBjaGVja2JveCB0byBjaGVjayBpdCwgaGl0dGluZyBhIGJ1dHRvbiB0byBzdWJtaXQgYSBmb3JtLFxuICAgIC8vIGFuZCBoaXR0aW5nIGxlZnQgYXJyb3cgdG8gbW92ZSB0aGUgY3Vyc29yIGluIGEgdGV4dCBpbnB1dCBldGMuXG4gICAgLy8gT25seSBzcGVjaWFsIEhUTUwgZWxlbWVudHMgaGF2ZSB0aGVzZSBkZWZhdWx0IGJlaGF2aW9ycy5cbiAgICBpZiAoZXZlbnQua2V5ICE9PSAnRXNjYXBlJyB8fCAhaXNUb3BNb2RhbCgpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKG9uRXNjYXBlS2V5RG93bikge1xuICAgICAgb25Fc2NhcGVLZXlEb3duKGV2ZW50KTtcbiAgICB9XG5cbiAgICBpZiAoIWRpc2FibGVFc2NhcGVLZXlEb3duKSB7XG4gICAgICAvLyBTd2FsbG93IHRoZSBldmVudCwgaW4gY2FzZSBzb21lb25lIGlzIGxpc3RlbmluZyBmb3IgdGhlIGVzY2FwZSBrZXkgb24gdGhlIGJvZHkuXG4gICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcblxuICAgICAgaWYgKG9uQ2xvc2UpIHtcbiAgICAgICAgb25DbG9zZShldmVudCwgJ2VzY2FwZUtleURvd24nKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgdmFyIGlubGluZVN0eWxlID0gc3R5bGVzKHRoZW1lIHx8IHtcbiAgICB6SW5kZXg6IHpJbmRleFxuICB9KTtcbiAgdmFyIGNoaWxkUHJvcHMgPSB7fTtcblxuICBpZiAoY2hpbGRyZW4ucHJvcHMudGFiSW5kZXggPT09IHVuZGVmaW5lZCkge1xuICAgIGNoaWxkUHJvcHMudGFiSW5kZXggPSBjaGlsZHJlbi5wcm9wcy50YWJJbmRleCB8fCAnLTEnO1xuICB9IC8vIEl0J3MgYSBUcmFuc2l0aW9uIGxpa2UgY29tcG9uZW50XG5cblxuICBpZiAoaGFzVHJhbnNpdGlvbikge1xuICAgIGNoaWxkUHJvcHMub25FbnRlciA9IGNyZWF0ZUNoYWluZWRGdW5jdGlvbihoYW5kbGVFbnRlciwgY2hpbGRyZW4ucHJvcHMub25FbnRlcik7XG4gICAgY2hpbGRQcm9wcy5vbkV4aXRlZCA9IGNyZWF0ZUNoYWluZWRGdW5jdGlvbihoYW5kbGVFeGl0ZWQsIGNoaWxkcmVuLnByb3BzLm9uRXhpdGVkKTtcbiAgfVxuXG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChQb3J0YWwsIHtcbiAgICByZWY6IGhhbmRsZVBvcnRhbFJlZixcbiAgICBjb250YWluZXI6IGNvbnRhaW5lcixcbiAgICBkaXNhYmxlUG9ydGFsOiBkaXNhYmxlUG9ydGFsXG4gIH0sIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIF9leHRlbmRzKHtcbiAgICByZWY6IGhhbmRsZVJlZixcbiAgICBvbktleURvd246IGhhbmRsZUtleURvd24sXG4gICAgcm9sZTogXCJwcmVzZW50YXRpb25cIlxuICB9LCBvdGhlciwge1xuICAgIHN0eWxlOiBfZXh0ZW5kcyh7fSwgaW5saW5lU3R5bGUucm9vdCwgIW9wZW4gJiYgZXhpdGVkID8gaW5saW5lU3R5bGUuaGlkZGVuIDoge30sIG90aGVyLnN0eWxlKVxuICB9KSwgaGlkZUJhY2tkcm9wID8gbnVsbCA6IC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KEJhY2tkcm9wQ29tcG9uZW50LCBfZXh0ZW5kcyh7XG4gICAgb3Blbjogb3BlbixcbiAgICBvbkNsaWNrOiBoYW5kbGVCYWNrZHJvcENsaWNrXG4gIH0sIEJhY2tkcm9wUHJvcHMpKSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoVHJhcEZvY3VzLCB7XG4gICAgZGlzYWJsZUVuZm9yY2VGb2N1czogZGlzYWJsZUVuZm9yY2VGb2N1cyxcbiAgICBkaXNhYmxlQXV0b0ZvY3VzOiBkaXNhYmxlQXV0b0ZvY3VzLFxuICAgIGRpc2FibGVSZXN0b3JlRm9jdXM6IGRpc2FibGVSZXN0b3JlRm9jdXMsXG4gICAgZ2V0RG9jOiBnZXREb2MsXG4gICAgaXNFbmFibGVkOiBpc1RvcE1vZGFsLFxuICAgIG9wZW46IG9wZW5cbiAgfSwgLyojX19QVVJFX18qL1JlYWN0LmNsb25lRWxlbWVudChjaGlsZHJlbiwgY2hpbGRQcm9wcykpKSk7XG59KTtcbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IE1vZGFsLnByb3BUeXBlcyA9IHtcbiAgLyoqXG4gICAqIEEgYmFja2Ryb3AgY29tcG9uZW50LiBUaGlzIHByb3AgZW5hYmxlcyBjdXN0b20gYmFja2Ryb3AgcmVuZGVyaW5nLlxuICAgKi9cbiAgQmFja2Ryb3BDb21wb25lbnQ6IFByb3BUeXBlcy5lbGVtZW50VHlwZSxcblxuICAvKipcbiAgICogUHJvcHMgYXBwbGllZCB0byB0aGUgW2BCYWNrZHJvcGBdKC9hcGkvYmFja2Ryb3AvKSBlbGVtZW50LlxuICAgKi9cbiAgQmFja2Ryb3BQcm9wczogUHJvcFR5cGVzLm9iamVjdCxcblxuICAvKipcbiAgICogQSBzaW5nbGUgY2hpbGQgY29udGVudCBlbGVtZW50LlxuICAgKi9cbiAgY2hpbGRyZW46IGVsZW1lbnRBY2NlcHRpbmdSZWYuaXNSZXF1aXJlZCxcblxuICAvKipcbiAgICogV2hlbiBzZXQgdG8gdHJ1ZSB0aGUgTW9kYWwgd2FpdHMgdW50aWwgYSBuZXN0ZWQgVHJhbnNpdGlvbiBpcyBjb21wbGV0ZWQgYmVmb3JlIGNsb3NpbmcuXG4gICAqL1xuICBjbG9zZUFmdGVyVHJhbnNpdGlvbjogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIEEgSFRNTCBlbGVtZW50LCBjb21wb25lbnQgaW5zdGFuY2UsIG9yIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyBlaXRoZXIuXG4gICAqIFRoZSBgY29udGFpbmVyYCB3aWxsIGhhdmUgdGhlIHBvcnRhbCBjaGlsZHJlbiBhcHBlbmRlZCB0byBpdC5cbiAgICpcbiAgICogQnkgZGVmYXVsdCwgaXQgdXNlcyB0aGUgYm9keSBvZiB0aGUgdG9wLWxldmVsIGRvY3VtZW50IG9iamVjdCxcbiAgICogc28gaXQncyBzaW1wbHkgYGRvY3VtZW50LmJvZHlgIG1vc3Qgb2YgdGhlIHRpbWUuXG4gICAqL1xuICBjb250YWluZXI6IFByb3BUeXBlc1xuICAvKiBAdHlwZXNjcmlwdC10by1wcm9wdHlwZXMtaWdub3JlICovXG4gIC5vbmVPZlR5cGUoW0hUTUxFbGVtZW50VHlwZSwgUHJvcFR5cGVzLmluc3RhbmNlT2YoUmVhY3QuQ29tcG9uZW50KSwgUHJvcFR5cGVzLmZ1bmNdKSxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgbW9kYWwgd2lsbCBub3QgYXV0b21hdGljYWxseSBzaGlmdCBmb2N1cyB0byBpdHNlbGYgd2hlbiBpdCBvcGVucywgYW5kXG4gICAqIHJlcGxhY2UgaXQgdG8gdGhlIGxhc3QgZm9jdXNlZCBlbGVtZW50IHdoZW4gaXQgY2xvc2VzLlxuICAgKiBUaGlzIGFsc28gd29ya3MgY29ycmVjdGx5IHdpdGggYW55IG1vZGFsIGNoaWxkcmVuIHRoYXQgaGF2ZSB0aGUgYGRpc2FibGVBdXRvRm9jdXNgIHByb3AuXG4gICAqXG4gICAqIEdlbmVyYWxseSB0aGlzIHNob3VsZCBuZXZlciBiZSBzZXQgdG8gYHRydWVgIGFzIGl0IG1ha2VzIHRoZSBtb2RhbCBsZXNzXG4gICAqIGFjY2Vzc2libGUgdG8gYXNzaXN0aXZlIHRlY2hub2xvZ2llcywgbGlrZSBzY3JlZW4gcmVhZGVycy5cbiAgICovXG4gIGRpc2FibGVBdXRvRm9jdXM6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIGNsaWNraW5nIHRoZSBiYWNrZHJvcCB3aWxsIG5vdCBmaXJlIGBvbkNsb3NlYC5cbiAgICovXG4gIGRpc2FibGVCYWNrZHJvcENsaWNrOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgbW9kYWwgd2lsbCBub3QgcHJldmVudCBmb2N1cyBmcm9tIGxlYXZpbmcgdGhlIG1vZGFsIHdoaWxlIG9wZW4uXG4gICAqXG4gICAqIEdlbmVyYWxseSB0aGlzIHNob3VsZCBuZXZlciBiZSBzZXQgdG8gYHRydWVgIGFzIGl0IG1ha2VzIHRoZSBtb2RhbCBsZXNzXG4gICAqIGFjY2Vzc2libGUgdG8gYXNzaXN0aXZlIHRlY2hub2xvZ2llcywgbGlrZSBzY3JlZW4gcmVhZGVycy5cbiAgICovXG4gIGRpc2FibGVFbmZvcmNlRm9jdXM6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIGhpdHRpbmcgZXNjYXBlIHdpbGwgbm90IGZpcmUgYG9uQ2xvc2VgLlxuICAgKi9cbiAgZGlzYWJsZUVzY2FwZUtleURvd246IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBEaXNhYmxlIHRoZSBwb3J0YWwgYmVoYXZpb3IuXG4gICAqIFRoZSBjaGlsZHJlbiBzdGF5IHdpdGhpbiBpdCdzIHBhcmVudCBET00gaGllcmFyY2h5LlxuICAgKi9cbiAgZGlzYWJsZVBvcnRhbDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIG1vZGFsIHdpbGwgbm90IHJlc3RvcmUgZm9jdXMgdG8gcHJldmlvdXNseSBmb2N1c2VkIGVsZW1lbnQgb25jZVxuICAgKiBtb2RhbCBpcyBoaWRkZW4uXG4gICAqL1xuICBkaXNhYmxlUmVzdG9yZUZvY3VzOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogRGlzYWJsZSB0aGUgc2Nyb2xsIGxvY2sgYmVoYXZpb3IuXG4gICAqL1xuICBkaXNhYmxlU2Nyb2xsTG9jazogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGJhY2tkcm9wIGlzIG5vdCByZW5kZXJlZC5cbiAgICovXG4gIGhpZGVCYWNrZHJvcDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIEFsd2F5cyBrZWVwIHRoZSBjaGlsZHJlbiBpbiB0aGUgRE9NLlxuICAgKiBUaGlzIHByb3AgY2FuIGJlIHVzZWZ1bCBpbiBTRU8gc2l0dWF0aW9uIG9yXG4gICAqIHdoZW4geW91IHdhbnQgdG8gbWF4aW1pemUgdGhlIHJlc3BvbnNpdmVuZXNzIG9mIHRoZSBNb2RhbC5cbiAgICovXG4gIGtlZXBNb3VudGVkOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgbWFuYWdlcjogUHJvcFR5cGVzLm9iamVjdCxcblxuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgd2hlbiB0aGUgYmFja2Ryb3AgaXMgY2xpY2tlZC5cbiAgICovXG4gIG9uQmFja2Ryb3BDbGljazogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIHdoZW4gdGhlIGNvbXBvbmVudCByZXF1ZXN0cyB0byBiZSBjbG9zZWQuXG4gICAqIFRoZSBgcmVhc29uYCBwYXJhbWV0ZXIgY2FuIG9wdGlvbmFsbHkgYmUgdXNlZCB0byBjb250cm9sIHRoZSByZXNwb25zZSB0byBgb25DbG9zZWAuXG4gICAqXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBldmVudCBUaGUgZXZlbnQgc291cmNlIG9mIHRoZSBjYWxsYmFjay5cbiAgICogQHBhcmFtIHtzdHJpbmd9IHJlYXNvbiBDYW4gYmU6IGBcImVzY2FwZUtleURvd25cImAsIGBcImJhY2tkcm9wQ2xpY2tcImAuXG4gICAqL1xuICBvbkNsb3NlOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgd2hlbiB0aGUgZXNjYXBlIGtleSBpcyBwcmVzc2VkLFxuICAgKiBgZGlzYWJsZUVzY2FwZUtleURvd25gIGlzIGZhbHNlIGFuZCB0aGUgbW9kYWwgaXMgaW4gZm9jdXMuXG4gICAqL1xuICBvbkVzY2FwZUtleURvd246IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCBvbmNlIHRoZSBjaGlsZHJlbiBoYXMgYmVlbiBtb3VudGVkIGludG8gdGhlIGBjb250YWluZXJgLlxuICAgKiBJdCBzaWduYWxzIHRoYXQgdGhlIGBvcGVuPXt0cnVlfWAgcHJvcCB0b29rIGVmZmVjdC5cbiAgICpcbiAgICogVGhpcyBwcm9wIHdpbGwgYmUgZGVwcmVjYXRlZCBhbmQgcmVtb3ZlZCBpbiB2NSwgdGhlIHJlZiBjYW4gYmUgdXNlZCBpbnN0ZWFkLlxuICAgKi9cbiAgb25SZW5kZXJlZDogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIG1vZGFsIGlzIG9wZW4uXG4gICAqL1xuICBvcGVuOiBQcm9wVHlwZXMuYm9vbC5pc1JlcXVpcmVkXG59IDogdm9pZCAwO1xuZXhwb3J0IGRlZmF1bHQgTW9kYWw7IiwiZXhwb3J0IGRlZmF1bHQge1xuICBkaXNhYmxlZDogZmFsc2Vcbn07IiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmV4cG9ydCBkZWZhdWx0IFJlYWN0LmNyZWF0ZUNvbnRleHQobnVsbCk7IiwiaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5pbXBvcnQgX2luaGVyaXRzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2luaGVyaXRzTG9vc2VcIjtcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFJlYWN0RE9NIGZyb20gJ3JlYWN0LWRvbSc7XG5pbXBvcnQgY29uZmlnIGZyb20gJy4vY29uZmlnJztcbmltcG9ydCB7IHRpbWVvdXRzU2hhcGUgfSBmcm9tICcuL3V0aWxzL1Byb3BUeXBlcyc7XG5pbXBvcnQgVHJhbnNpdGlvbkdyb3VwQ29udGV4dCBmcm9tICcuL1RyYW5zaXRpb25Hcm91cENvbnRleHQnO1xuZXhwb3J0IHZhciBVTk1PVU5URUQgPSAndW5tb3VudGVkJztcbmV4cG9ydCB2YXIgRVhJVEVEID0gJ2V4aXRlZCc7XG5leHBvcnQgdmFyIEVOVEVSSU5HID0gJ2VudGVyaW5nJztcbmV4cG9ydCB2YXIgRU5URVJFRCA9ICdlbnRlcmVkJztcbmV4cG9ydCB2YXIgRVhJVElORyA9ICdleGl0aW5nJztcbi8qKlxuICogVGhlIFRyYW5zaXRpb24gY29tcG9uZW50IGxldHMgeW91IGRlc2NyaWJlIGEgdHJhbnNpdGlvbiBmcm9tIG9uZSBjb21wb25lbnRcbiAqIHN0YXRlIHRvIGFub3RoZXIgX292ZXIgdGltZV8gd2l0aCBhIHNpbXBsZSBkZWNsYXJhdGl2ZSBBUEkuIE1vc3QgY29tbW9ubHlcbiAqIGl0J3MgdXNlZCB0byBhbmltYXRlIHRoZSBtb3VudGluZyBhbmQgdW5tb3VudGluZyBvZiBhIGNvbXBvbmVudCwgYnV0IGNhbiBhbHNvXG4gKiBiZSB1c2VkIHRvIGRlc2NyaWJlIGluLXBsYWNlIHRyYW5zaXRpb24gc3RhdGVzIGFzIHdlbGwuXG4gKlxuICogLS0tXG4gKlxuICogKipOb3RlKio6IGBUcmFuc2l0aW9uYCBpcyBhIHBsYXRmb3JtLWFnbm9zdGljIGJhc2UgY29tcG9uZW50LiBJZiB5b3UncmUgdXNpbmdcbiAqIHRyYW5zaXRpb25zIGluIENTUywgeW91J2xsIHByb2JhYmx5IHdhbnQgdG8gdXNlXG4gKiBbYENTU1RyYW5zaXRpb25gXShodHRwczovL3JlYWN0Y29tbXVuaXR5Lm9yZy9yZWFjdC10cmFuc2l0aW9uLWdyb3VwL2Nzcy10cmFuc2l0aW9uKVxuICogaW5zdGVhZC4gSXQgaW5oZXJpdHMgYWxsIHRoZSBmZWF0dXJlcyBvZiBgVHJhbnNpdGlvbmAsIGJ1dCBjb250YWluc1xuICogYWRkaXRpb25hbCBmZWF0dXJlcyBuZWNlc3NhcnkgdG8gcGxheSBuaWNlIHdpdGggQ1NTIHRyYW5zaXRpb25zIChoZW5jZSB0aGVcbiAqIG5hbWUgb2YgdGhlIGNvbXBvbmVudCkuXG4gKlxuICogLS0tXG4gKlxuICogQnkgZGVmYXVsdCB0aGUgYFRyYW5zaXRpb25gIGNvbXBvbmVudCBkb2VzIG5vdCBhbHRlciB0aGUgYmVoYXZpb3Igb2YgdGhlXG4gKiBjb21wb25lbnQgaXQgcmVuZGVycywgaXQgb25seSB0cmFja3MgXCJlbnRlclwiIGFuZCBcImV4aXRcIiBzdGF0ZXMgZm9yIHRoZVxuICogY29tcG9uZW50cy4gSXQncyB1cCB0byB5b3UgdG8gZ2l2ZSBtZWFuaW5nIGFuZCBlZmZlY3QgdG8gdGhvc2Ugc3RhdGVzLiBGb3JcbiAqIGV4YW1wbGUgd2UgY2FuIGFkZCBzdHlsZXMgdG8gYSBjb21wb25lbnQgd2hlbiBpdCBlbnRlcnMgb3IgZXhpdHM6XG4gKlxuICogYGBganN4XG4gKiBpbXBvcnQgeyBUcmFuc2l0aW9uIH0gZnJvbSAncmVhY3QtdHJhbnNpdGlvbi1ncm91cCc7XG4gKlxuICogY29uc3QgZHVyYXRpb24gPSAzMDA7XG4gKlxuICogY29uc3QgZGVmYXVsdFN0eWxlID0ge1xuICogICB0cmFuc2l0aW9uOiBgb3BhY2l0eSAke2R1cmF0aW9ufW1zIGVhc2UtaW4tb3V0YCxcbiAqICAgb3BhY2l0eTogMCxcbiAqIH1cbiAqXG4gKiBjb25zdCB0cmFuc2l0aW9uU3R5bGVzID0ge1xuICogICBlbnRlcmluZzogeyBvcGFjaXR5OiAxIH0sXG4gKiAgIGVudGVyZWQ6ICB7IG9wYWNpdHk6IDEgfSxcbiAqICAgZXhpdGluZzogIHsgb3BhY2l0eTogMCB9LFxuICogICBleGl0ZWQ6ICB7IG9wYWNpdHk6IDAgfSxcbiAqIH07XG4gKlxuICogY29uc3QgRmFkZSA9ICh7IGluOiBpblByb3AgfSkgPT4gKFxuICogICA8VHJhbnNpdGlvbiBpbj17aW5Qcm9wfSB0aW1lb3V0PXtkdXJhdGlvbn0+XG4gKiAgICAge3N0YXRlID0+IChcbiAqICAgICAgIDxkaXYgc3R5bGU9e3tcbiAqICAgICAgICAgLi4uZGVmYXVsdFN0eWxlLFxuICogICAgICAgICAuLi50cmFuc2l0aW9uU3R5bGVzW3N0YXRlXVxuICogICAgICAgfX0+XG4gKiAgICAgICAgIEknbSBhIGZhZGUgVHJhbnNpdGlvbiFcbiAqICAgICAgIDwvZGl2PlxuICogICAgICl9XG4gKiAgIDwvVHJhbnNpdGlvbj5cbiAqICk7XG4gKiBgYGBcbiAqXG4gKiBUaGVyZSBhcmUgNCBtYWluIHN0YXRlcyBhIFRyYW5zaXRpb24gY2FuIGJlIGluOlxuICogIC0gYCdlbnRlcmluZydgXG4gKiAgLSBgJ2VudGVyZWQnYFxuICogIC0gYCdleGl0aW5nJ2BcbiAqICAtIGAnZXhpdGVkJ2BcbiAqXG4gKiBUcmFuc2l0aW9uIHN0YXRlIGlzIHRvZ2dsZWQgdmlhIHRoZSBgaW5gIHByb3AuIFdoZW4gYHRydWVgIHRoZSBjb21wb25lbnRcbiAqIGJlZ2lucyB0aGUgXCJFbnRlclwiIHN0YWdlLiBEdXJpbmcgdGhpcyBzdGFnZSwgdGhlIGNvbXBvbmVudCB3aWxsIHNoaWZ0IGZyb21cbiAqIGl0cyBjdXJyZW50IHRyYW5zaXRpb24gc3RhdGUsIHRvIGAnZW50ZXJpbmcnYCBmb3IgdGhlIGR1cmF0aW9uIG9mIHRoZVxuICogdHJhbnNpdGlvbiBhbmQgdGhlbiB0byB0aGUgYCdlbnRlcmVkJ2Agc3RhZ2Ugb25jZSBpdCdzIGNvbXBsZXRlLiBMZXQncyB0YWtlXG4gKiB0aGUgZm9sbG93aW5nIGV4YW1wbGUgKHdlJ2xsIHVzZSB0aGVcbiAqIFt1c2VTdGF0ZV0oaHR0cHM6Ly9yZWFjdGpzLm9yZy9kb2NzL2hvb2tzLXJlZmVyZW5jZS5odG1sI3VzZXN0YXRlKSBob29rKTpcbiAqXG4gKiBgYGBqc3hcbiAqIGZ1bmN0aW9uIEFwcCgpIHtcbiAqICAgY29uc3QgW2luUHJvcCwgc2V0SW5Qcm9wXSA9IHVzZVN0YXRlKGZhbHNlKTtcbiAqICAgcmV0dXJuIChcbiAqICAgICA8ZGl2PlxuICogICAgICAgPFRyYW5zaXRpb24gaW49e2luUHJvcH0gdGltZW91dD17NTAwfT5cbiAqICAgICAgICAge3N0YXRlID0+IChcbiAqICAgICAgICAgICAvLyAuLi5cbiAqICAgICAgICAgKX1cbiAqICAgICAgIDwvVHJhbnNpdGlvbj5cbiAqICAgICAgIDxidXR0b24gb25DbGljaz17KCkgPT4gc2V0SW5Qcm9wKHRydWUpfT5cbiAqICAgICAgICAgQ2xpY2sgdG8gRW50ZXJcbiAqICAgICAgIDwvYnV0dG9uPlxuICogICAgIDwvZGl2PlxuICogICApO1xuICogfVxuICogYGBgXG4gKlxuICogV2hlbiB0aGUgYnV0dG9uIGlzIGNsaWNrZWQgdGhlIGNvbXBvbmVudCB3aWxsIHNoaWZ0IHRvIHRoZSBgJ2VudGVyaW5nJ2Agc3RhdGVcbiAqIGFuZCBzdGF5IHRoZXJlIGZvciA1MDBtcyAodGhlIHZhbHVlIG9mIGB0aW1lb3V0YCkgYmVmb3JlIGl0IGZpbmFsbHkgc3dpdGNoZXNcbiAqIHRvIGAnZW50ZXJlZCdgLlxuICpcbiAqIFdoZW4gYGluYCBpcyBgZmFsc2VgIHRoZSBzYW1lIHRoaW5nIGhhcHBlbnMgZXhjZXB0IHRoZSBzdGF0ZSBtb3ZlcyBmcm9tXG4gKiBgJ2V4aXRpbmcnYCB0byBgJ2V4aXRlZCdgLlxuICovXG5cbnZhciBUcmFuc2l0aW9uID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0c0xvb3NlKFRyYW5zaXRpb24sIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIFRyYW5zaXRpb24ocHJvcHMsIGNvbnRleHQpIHtcbiAgICB2YXIgX3RoaXM7XG5cbiAgICBfdGhpcyA9IF9SZWFjdCRDb21wb25lbnQuY2FsbCh0aGlzLCBwcm9wcywgY29udGV4dCkgfHwgdGhpcztcbiAgICB2YXIgcGFyZW50R3JvdXAgPSBjb250ZXh0OyAvLyBJbiB0aGUgY29udGV4dCBvZiBhIFRyYW5zaXRpb25Hcm91cCBhbGwgZW50ZXJzIGFyZSByZWFsbHkgYXBwZWFyc1xuXG4gICAgdmFyIGFwcGVhciA9IHBhcmVudEdyb3VwICYmICFwYXJlbnRHcm91cC5pc01vdW50aW5nID8gcHJvcHMuZW50ZXIgOiBwcm9wcy5hcHBlYXI7XG4gICAgdmFyIGluaXRpYWxTdGF0dXM7XG4gICAgX3RoaXMuYXBwZWFyU3RhdHVzID0gbnVsbDtcblxuICAgIGlmIChwcm9wcy5pbikge1xuICAgICAgaWYgKGFwcGVhcikge1xuICAgICAgICBpbml0aWFsU3RhdHVzID0gRVhJVEVEO1xuICAgICAgICBfdGhpcy5hcHBlYXJTdGF0dXMgPSBFTlRFUklORztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGluaXRpYWxTdGF0dXMgPSBFTlRFUkVEO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBpZiAocHJvcHMudW5tb3VudE9uRXhpdCB8fCBwcm9wcy5tb3VudE9uRW50ZXIpIHtcbiAgICAgICAgaW5pdGlhbFN0YXR1cyA9IFVOTU9VTlRFRDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGluaXRpYWxTdGF0dXMgPSBFWElURUQ7XG4gICAgICB9XG4gICAgfVxuXG4gICAgX3RoaXMuc3RhdGUgPSB7XG4gICAgICBzdGF0dXM6IGluaXRpYWxTdGF0dXNcbiAgICB9O1xuICAgIF90aGlzLm5leHRDYWxsYmFjayA9IG51bGw7XG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgVHJhbnNpdGlvbi5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMgPSBmdW5jdGlvbiBnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMoX3JlZiwgcHJldlN0YXRlKSB7XG4gICAgdmFyIG5leHRJbiA9IF9yZWYuaW47XG5cbiAgICBpZiAobmV4dEluICYmIHByZXZTdGF0ZS5zdGF0dXMgPT09IFVOTU9VTlRFRCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgc3RhdHVzOiBFWElURURcbiAgICAgIH07XG4gICAgfVxuXG4gICAgcmV0dXJuIG51bGw7XG4gIH0gLy8gZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUocHJldlByb3BzKSB7XG4gIC8vICAgbGV0IG5leHRTdGF0dXMgPSBudWxsXG4gIC8vICAgaWYgKHByZXZQcm9wcyAhPT0gdGhpcy5wcm9wcykge1xuICAvLyAgICAgY29uc3QgeyBzdGF0dXMgfSA9IHRoaXMuc3RhdGVcbiAgLy8gICAgIGlmICh0aGlzLnByb3BzLmluKSB7XG4gIC8vICAgICAgIGlmIChzdGF0dXMgIT09IEVOVEVSSU5HICYmIHN0YXR1cyAhPT0gRU5URVJFRCkge1xuICAvLyAgICAgICAgIG5leHRTdGF0dXMgPSBFTlRFUklOR1xuICAvLyAgICAgICB9XG4gIC8vICAgICB9IGVsc2Uge1xuICAvLyAgICAgICBpZiAoc3RhdHVzID09PSBFTlRFUklORyB8fCBzdGF0dXMgPT09IEVOVEVSRUQpIHtcbiAgLy8gICAgICAgICBuZXh0U3RhdHVzID0gRVhJVElOR1xuICAvLyAgICAgICB9XG4gIC8vICAgICB9XG4gIC8vICAgfVxuICAvLyAgIHJldHVybiB7IG5leHRTdGF0dXMgfVxuICAvLyB9XG4gIDtcblxuICB2YXIgX3Byb3RvID0gVHJhbnNpdGlvbi5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLmNvbXBvbmVudERpZE1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgdGhpcy51cGRhdGVTdGF0dXModHJ1ZSwgdGhpcy5hcHBlYXJTdGF0dXMpO1xuICB9O1xuXG4gIF9wcm90by5jb21wb25lbnREaWRVcGRhdGUgPSBmdW5jdGlvbiBjb21wb25lbnREaWRVcGRhdGUocHJldlByb3BzKSB7XG4gICAgdmFyIG5leHRTdGF0dXMgPSBudWxsO1xuXG4gICAgaWYgKHByZXZQcm9wcyAhPT0gdGhpcy5wcm9wcykge1xuICAgICAgdmFyIHN0YXR1cyA9IHRoaXMuc3RhdGUuc3RhdHVzO1xuXG4gICAgICBpZiAodGhpcy5wcm9wcy5pbikge1xuICAgICAgICBpZiAoc3RhdHVzICE9PSBFTlRFUklORyAmJiBzdGF0dXMgIT09IEVOVEVSRUQpIHtcbiAgICAgICAgICBuZXh0U3RhdHVzID0gRU5URVJJTkc7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChzdGF0dXMgPT09IEVOVEVSSU5HIHx8IHN0YXR1cyA9PT0gRU5URVJFRCkge1xuICAgICAgICAgIG5leHRTdGF0dXMgPSBFWElUSU5HO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy51cGRhdGVTdGF0dXMoZmFsc2UsIG5leHRTdGF0dXMpO1xuICB9O1xuXG4gIF9wcm90by5jb21wb25lbnRXaWxsVW5tb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgIHRoaXMuY2FuY2VsTmV4dENhbGxiYWNrKCk7XG4gIH07XG5cbiAgX3Byb3RvLmdldFRpbWVvdXRzID0gZnVuY3Rpb24gZ2V0VGltZW91dHMoKSB7XG4gICAgdmFyIHRpbWVvdXQgPSB0aGlzLnByb3BzLnRpbWVvdXQ7XG4gICAgdmFyIGV4aXQsIGVudGVyLCBhcHBlYXI7XG4gICAgZXhpdCA9IGVudGVyID0gYXBwZWFyID0gdGltZW91dDtcblxuICAgIGlmICh0aW1lb3V0ICE9IG51bGwgJiYgdHlwZW9mIHRpbWVvdXQgIT09ICdudW1iZXInKSB7XG4gICAgICBleGl0ID0gdGltZW91dC5leGl0O1xuICAgICAgZW50ZXIgPSB0aW1lb3V0LmVudGVyOyAvLyBUT0RPOiByZW1vdmUgZmFsbGJhY2sgZm9yIG5leHQgbWFqb3JcblxuICAgICAgYXBwZWFyID0gdGltZW91dC5hcHBlYXIgIT09IHVuZGVmaW5lZCA/IHRpbWVvdXQuYXBwZWFyIDogZW50ZXI7XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgIGV4aXQ6IGV4aXQsXG4gICAgICBlbnRlcjogZW50ZXIsXG4gICAgICBhcHBlYXI6IGFwcGVhclxuICAgIH07XG4gIH07XG5cbiAgX3Byb3RvLnVwZGF0ZVN0YXR1cyA9IGZ1bmN0aW9uIHVwZGF0ZVN0YXR1cyhtb3VudGluZywgbmV4dFN0YXR1cykge1xuICAgIGlmIChtb3VudGluZyA9PT0gdm9pZCAwKSB7XG4gICAgICBtb3VudGluZyA9IGZhbHNlO1xuICAgIH1cblxuICAgIGlmIChuZXh0U3RhdHVzICE9PSBudWxsKSB7XG4gICAgICAvLyBuZXh0U3RhdHVzIHdpbGwgYWx3YXlzIGJlIEVOVEVSSU5HIG9yIEVYSVRJTkcuXG4gICAgICB0aGlzLmNhbmNlbE5leHRDYWxsYmFjaygpO1xuXG4gICAgICBpZiAobmV4dFN0YXR1cyA9PT0gRU5URVJJTkcpIHtcbiAgICAgICAgdGhpcy5wZXJmb3JtRW50ZXIobW91bnRpbmcpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5wZXJmb3JtRXhpdCgpO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAodGhpcy5wcm9wcy51bm1vdW50T25FeGl0ICYmIHRoaXMuc3RhdGUuc3RhdHVzID09PSBFWElURUQpIHtcbiAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICBzdGF0dXM6IFVOTU9VTlRFRFxuICAgICAgfSk7XG4gICAgfVxuICB9O1xuXG4gIF9wcm90by5wZXJmb3JtRW50ZXIgPSBmdW5jdGlvbiBwZXJmb3JtRW50ZXIobW91bnRpbmcpIHtcbiAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgIHZhciBlbnRlciA9IHRoaXMucHJvcHMuZW50ZXI7XG4gICAgdmFyIGFwcGVhcmluZyA9IHRoaXMuY29udGV4dCA/IHRoaXMuY29udGV4dC5pc01vdW50aW5nIDogbW91bnRpbmc7XG5cbiAgICB2YXIgX3JlZjIgPSB0aGlzLnByb3BzLm5vZGVSZWYgPyBbYXBwZWFyaW5nXSA6IFtSZWFjdERPTS5maW5kRE9NTm9kZSh0aGlzKSwgYXBwZWFyaW5nXSxcbiAgICAgICAgbWF5YmVOb2RlID0gX3JlZjJbMF0sXG4gICAgICAgIG1heWJlQXBwZWFyaW5nID0gX3JlZjJbMV07XG5cbiAgICB2YXIgdGltZW91dHMgPSB0aGlzLmdldFRpbWVvdXRzKCk7XG4gICAgdmFyIGVudGVyVGltZW91dCA9IGFwcGVhcmluZyA/IHRpbWVvdXRzLmFwcGVhciA6IHRpbWVvdXRzLmVudGVyOyAvLyBubyBlbnRlciBhbmltYXRpb24gc2tpcCByaWdodCB0byBFTlRFUkVEXG4gICAgLy8gaWYgd2UgYXJlIG1vdW50aW5nIGFuZCBydW5uaW5nIHRoaXMgaXQgbWVhbnMgYXBwZWFyIF9tdXN0XyBiZSBzZXRcblxuICAgIGlmICghbW91bnRpbmcgJiYgIWVudGVyIHx8IGNvbmZpZy5kaXNhYmxlZCkge1xuICAgICAgdGhpcy5zYWZlU2V0U3RhdGUoe1xuICAgICAgICBzdGF0dXM6IEVOVEVSRURcbiAgICAgIH0sIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgX3RoaXMyLnByb3BzLm9uRW50ZXJlZChtYXliZU5vZGUpO1xuICAgICAgfSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy5wcm9wcy5vbkVudGVyKG1heWJlTm9kZSwgbWF5YmVBcHBlYXJpbmcpO1xuICAgIHRoaXMuc2FmZVNldFN0YXRlKHtcbiAgICAgIHN0YXR1czogRU5URVJJTkdcbiAgICB9LCBmdW5jdGlvbiAoKSB7XG4gICAgICBfdGhpczIucHJvcHMub25FbnRlcmluZyhtYXliZU5vZGUsIG1heWJlQXBwZWFyaW5nKTtcblxuICAgICAgX3RoaXMyLm9uVHJhbnNpdGlvbkVuZChlbnRlclRpbWVvdXQsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgX3RoaXMyLnNhZmVTZXRTdGF0ZSh7XG4gICAgICAgICAgc3RhdHVzOiBFTlRFUkVEXG4gICAgICAgIH0sIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBfdGhpczIucHJvcHMub25FbnRlcmVkKG1heWJlTm9kZSwgbWF5YmVBcHBlYXJpbmcpO1xuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9O1xuXG4gIF9wcm90by5wZXJmb3JtRXhpdCA9IGZ1bmN0aW9uIHBlcmZvcm1FeGl0KCkge1xuICAgIHZhciBfdGhpczMgPSB0aGlzO1xuXG4gICAgdmFyIGV4aXQgPSB0aGlzLnByb3BzLmV4aXQ7XG4gICAgdmFyIHRpbWVvdXRzID0gdGhpcy5nZXRUaW1lb3V0cygpO1xuICAgIHZhciBtYXliZU5vZGUgPSB0aGlzLnByb3BzLm5vZGVSZWYgPyB1bmRlZmluZWQgOiBSZWFjdERPTS5maW5kRE9NTm9kZSh0aGlzKTsgLy8gbm8gZXhpdCBhbmltYXRpb24gc2tpcCByaWdodCB0byBFWElURURcblxuICAgIGlmICghZXhpdCB8fCBjb25maWcuZGlzYWJsZWQpIHtcbiAgICAgIHRoaXMuc2FmZVNldFN0YXRlKHtcbiAgICAgICAgc3RhdHVzOiBFWElURURcbiAgICAgIH0sIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgX3RoaXMzLnByb3BzLm9uRXhpdGVkKG1heWJlTm9kZSk7XG4gICAgICB9KTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0aGlzLnByb3BzLm9uRXhpdChtYXliZU5vZGUpO1xuICAgIHRoaXMuc2FmZVNldFN0YXRlKHtcbiAgICAgIHN0YXR1czogRVhJVElOR1xuICAgIH0sIGZ1bmN0aW9uICgpIHtcbiAgICAgIF90aGlzMy5wcm9wcy5vbkV4aXRpbmcobWF5YmVOb2RlKTtcblxuICAgICAgX3RoaXMzLm9uVHJhbnNpdGlvbkVuZCh0aW1lb3V0cy5leGl0LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIF90aGlzMy5zYWZlU2V0U3RhdGUoe1xuICAgICAgICAgIHN0YXR1czogRVhJVEVEXG4gICAgICAgIH0sIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBfdGhpczMucHJvcHMub25FeGl0ZWQobWF5YmVOb2RlKTtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfTtcblxuICBfcHJvdG8uY2FuY2VsTmV4dENhbGxiYWNrID0gZnVuY3Rpb24gY2FuY2VsTmV4dENhbGxiYWNrKCkge1xuICAgIGlmICh0aGlzLm5leHRDYWxsYmFjayAhPT0gbnVsbCkge1xuICAgICAgdGhpcy5uZXh0Q2FsbGJhY2suY2FuY2VsKCk7XG4gICAgICB0aGlzLm5leHRDYWxsYmFjayA9IG51bGw7XG4gICAgfVxuICB9O1xuXG4gIF9wcm90by5zYWZlU2V0U3RhdGUgPSBmdW5jdGlvbiBzYWZlU2V0U3RhdGUobmV4dFN0YXRlLCBjYWxsYmFjaykge1xuICAgIC8vIFRoaXMgc2hvdWxkbid0IGJlIG5lY2Vzc2FyeSwgYnV0IHRoZXJlIGFyZSB3ZWlyZCByYWNlIGNvbmRpdGlvbnMgd2l0aFxuICAgIC8vIHNldFN0YXRlIGNhbGxiYWNrcyBhbmQgdW5tb3VudGluZyBpbiB0ZXN0aW5nLCBzbyBhbHdheXMgbWFrZSBzdXJlIHRoYXRcbiAgICAvLyB3ZSBjYW4gY2FuY2VsIGFueSBwZW5kaW5nIHNldFN0YXRlIGNhbGxiYWNrcyBhZnRlciB3ZSB1bm1vdW50LlxuICAgIGNhbGxiYWNrID0gdGhpcy5zZXROZXh0Q2FsbGJhY2soY2FsbGJhY2spO1xuICAgIHRoaXMuc2V0U3RhdGUobmV4dFN0YXRlLCBjYWxsYmFjayk7XG4gIH07XG5cbiAgX3Byb3RvLnNldE5leHRDYWxsYmFjayA9IGZ1bmN0aW9uIHNldE5leHRDYWxsYmFjayhjYWxsYmFjaykge1xuICAgIHZhciBfdGhpczQgPSB0aGlzO1xuXG4gICAgdmFyIGFjdGl2ZSA9IHRydWU7XG5cbiAgICB0aGlzLm5leHRDYWxsYmFjayA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgaWYgKGFjdGl2ZSkge1xuICAgICAgICBhY3RpdmUgPSBmYWxzZTtcbiAgICAgICAgX3RoaXM0Lm5leHRDYWxsYmFjayA9IG51bGw7XG4gICAgICAgIGNhbGxiYWNrKGV2ZW50KTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgdGhpcy5uZXh0Q2FsbGJhY2suY2FuY2VsID0gZnVuY3Rpb24gKCkge1xuICAgICAgYWN0aXZlID0gZmFsc2U7XG4gICAgfTtcblxuICAgIHJldHVybiB0aGlzLm5leHRDYWxsYmFjaztcbiAgfTtcblxuICBfcHJvdG8ub25UcmFuc2l0aW9uRW5kID0gZnVuY3Rpb24gb25UcmFuc2l0aW9uRW5kKHRpbWVvdXQsIGhhbmRsZXIpIHtcbiAgICB0aGlzLnNldE5leHRDYWxsYmFjayhoYW5kbGVyKTtcbiAgICB2YXIgbm9kZSA9IHRoaXMucHJvcHMubm9kZVJlZiA/IHRoaXMucHJvcHMubm9kZVJlZi5jdXJyZW50IDogUmVhY3RET00uZmluZERPTU5vZGUodGhpcyk7XG4gICAgdmFyIGRvZXNOb3RIYXZlVGltZW91dE9yTGlzdGVuZXIgPSB0aW1lb3V0ID09IG51bGwgJiYgIXRoaXMucHJvcHMuYWRkRW5kTGlzdGVuZXI7XG5cbiAgICBpZiAoIW5vZGUgfHwgZG9lc05vdEhhdmVUaW1lb3V0T3JMaXN0ZW5lcikge1xuICAgICAgc2V0VGltZW91dCh0aGlzLm5leHRDYWxsYmFjaywgMCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKHRoaXMucHJvcHMuYWRkRW5kTGlzdGVuZXIpIHtcbiAgICAgIHZhciBfcmVmMyA9IHRoaXMucHJvcHMubm9kZVJlZiA/IFt0aGlzLm5leHRDYWxsYmFja10gOiBbbm9kZSwgdGhpcy5uZXh0Q2FsbGJhY2tdLFxuICAgICAgICAgIG1heWJlTm9kZSA9IF9yZWYzWzBdLFxuICAgICAgICAgIG1heWJlTmV4dENhbGxiYWNrID0gX3JlZjNbMV07XG5cbiAgICAgIHRoaXMucHJvcHMuYWRkRW5kTGlzdGVuZXIobWF5YmVOb2RlLCBtYXliZU5leHRDYWxsYmFjayk7XG4gICAgfVxuXG4gICAgaWYgKHRpbWVvdXQgIT0gbnVsbCkge1xuICAgICAgc2V0VGltZW91dCh0aGlzLm5leHRDYWxsYmFjaywgdGltZW91dCk7XG4gICAgfVxuICB9O1xuXG4gIF9wcm90by5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIHN0YXR1cyA9IHRoaXMuc3RhdGUuc3RhdHVzO1xuXG4gICAgaWYgKHN0YXR1cyA9PT0gVU5NT1VOVEVEKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICB2YXIgX3RoaXMkcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICBjaGlsZHJlbiA9IF90aGlzJHByb3BzLmNoaWxkcmVuLFxuICAgICAgICBfaW4gPSBfdGhpcyRwcm9wcy5pbixcbiAgICAgICAgX21vdW50T25FbnRlciA9IF90aGlzJHByb3BzLm1vdW50T25FbnRlcixcbiAgICAgICAgX3VubW91bnRPbkV4aXQgPSBfdGhpcyRwcm9wcy51bm1vdW50T25FeGl0LFxuICAgICAgICBfYXBwZWFyID0gX3RoaXMkcHJvcHMuYXBwZWFyLFxuICAgICAgICBfZW50ZXIgPSBfdGhpcyRwcm9wcy5lbnRlcixcbiAgICAgICAgX2V4aXQgPSBfdGhpcyRwcm9wcy5leGl0LFxuICAgICAgICBfdGltZW91dCA9IF90aGlzJHByb3BzLnRpbWVvdXQsXG4gICAgICAgIF9hZGRFbmRMaXN0ZW5lciA9IF90aGlzJHByb3BzLmFkZEVuZExpc3RlbmVyLFxuICAgICAgICBfb25FbnRlciA9IF90aGlzJHByb3BzLm9uRW50ZXIsXG4gICAgICAgIF9vbkVudGVyaW5nID0gX3RoaXMkcHJvcHMub25FbnRlcmluZyxcbiAgICAgICAgX29uRW50ZXJlZCA9IF90aGlzJHByb3BzLm9uRW50ZXJlZCxcbiAgICAgICAgX29uRXhpdCA9IF90aGlzJHByb3BzLm9uRXhpdCxcbiAgICAgICAgX29uRXhpdGluZyA9IF90aGlzJHByb3BzLm9uRXhpdGluZyxcbiAgICAgICAgX29uRXhpdGVkID0gX3RoaXMkcHJvcHMub25FeGl0ZWQsXG4gICAgICAgIF9ub2RlUmVmID0gX3RoaXMkcHJvcHMubm9kZVJlZixcbiAgICAgICAgY2hpbGRQcm9wcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKF90aGlzJHByb3BzLCBbXCJjaGlsZHJlblwiLCBcImluXCIsIFwibW91bnRPbkVudGVyXCIsIFwidW5tb3VudE9uRXhpdFwiLCBcImFwcGVhclwiLCBcImVudGVyXCIsIFwiZXhpdFwiLCBcInRpbWVvdXRcIiwgXCJhZGRFbmRMaXN0ZW5lclwiLCBcIm9uRW50ZXJcIiwgXCJvbkVudGVyaW5nXCIsIFwib25FbnRlcmVkXCIsIFwib25FeGl0XCIsIFwib25FeGl0aW5nXCIsIFwib25FeGl0ZWRcIiwgXCJub2RlUmVmXCJdKTtcblxuICAgIHJldHVybiAoXG4gICAgICAvKiNfX1BVUkVfXyovXG4gICAgICAvLyBhbGxvd3MgZm9yIG5lc3RlZCBUcmFuc2l0aW9uc1xuICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChUcmFuc2l0aW9uR3JvdXBDb250ZXh0LlByb3ZpZGVyLCB7XG4gICAgICAgIHZhbHVlOiBudWxsXG4gICAgICB9LCB0eXBlb2YgY2hpbGRyZW4gPT09ICdmdW5jdGlvbicgPyBjaGlsZHJlbihzdGF0dXMsIGNoaWxkUHJvcHMpIDogUmVhY3QuY2xvbmVFbGVtZW50KFJlYWN0LkNoaWxkcmVuLm9ubHkoY2hpbGRyZW4pLCBjaGlsZFByb3BzKSlcbiAgICApO1xuICB9O1xuXG4gIHJldHVybiBUcmFuc2l0aW9uO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5UcmFuc2l0aW9uLmNvbnRleHRUeXBlID0gVHJhbnNpdGlvbkdyb3VwQ29udGV4dDtcblRyYW5zaXRpb24ucHJvcFR5cGVzID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8ge1xuICAvKipcbiAgICogQSBSZWFjdCByZWZlcmVuY2UgdG8gRE9NIGVsZW1lbnQgdGhhdCBuZWVkIHRvIHRyYW5zaXRpb246XG4gICAqIGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vYS81MTEyNzEzMC80NjcxOTMyXG4gICAqXG4gICAqICAgLSBXaGVuIGBub2RlUmVmYCBwcm9wIGlzIHVzZWQsIGBub2RlYCBpcyBub3QgcGFzc2VkIHRvIGNhbGxiYWNrIGZ1bmN0aW9uc1xuICAgKiAgICAgIChlLmcuIGBvbkVudGVyYCkgYmVjYXVzZSB1c2VyIGFscmVhZHkgaGFzIGRpcmVjdCBhY2Nlc3MgdG8gdGhlIG5vZGUuXG4gICAqICAgLSBXaGVuIGNoYW5naW5nIGBrZXlgIHByb3Agb2YgYFRyYW5zaXRpb25gIGluIGEgYFRyYW5zaXRpb25Hcm91cGAgYSBuZXdcbiAgICogICAgIGBub2RlUmVmYCBuZWVkIHRvIGJlIHByb3ZpZGVkIHRvIGBUcmFuc2l0aW9uYCB3aXRoIGNoYW5nZWQgYGtleWAgcHJvcFxuICAgKiAgICAgKHNlZVxuICAgKiAgICAgW3Rlc3QvQ1NTVHJhbnNpdGlvbi10ZXN0LmpzXShodHRwczovL2dpdGh1Yi5jb20vcmVhY3Rqcy9yZWFjdC10cmFuc2l0aW9uLWdyb3VwL2Jsb2IvMTM0MzVmODk3YjNhYjcxZjZlMTlkNzI0ZjE0NTU5NmY1OTEwNTgxYy90ZXN0L0NTU1RyYW5zaXRpb24tdGVzdC5qcyNMMzYyLUw0MzcpKS5cbiAgICovXG4gIG5vZGVSZWY6IFByb3BUeXBlcy5zaGFwZSh7XG4gICAgY3VycmVudDogdHlwZW9mIEVsZW1lbnQgPT09ICd1bmRlZmluZWQnID8gUHJvcFR5cGVzLmFueSA6IFByb3BUeXBlcy5pbnN0YW5jZU9mKEVsZW1lbnQpXG4gIH0pLFxuXG4gIC8qKlxuICAgKiBBIGBmdW5jdGlvbmAgY2hpbGQgY2FuIGJlIHVzZWQgaW5zdGVhZCBvZiBhIFJlYWN0IGVsZW1lbnQuIFRoaXMgZnVuY3Rpb24gaXNcbiAgICogY2FsbGVkIHdpdGggdGhlIGN1cnJlbnQgdHJhbnNpdGlvbiBzdGF0dXMgKGAnZW50ZXJpbmcnYCwgYCdlbnRlcmVkJ2AsXG4gICAqIGAnZXhpdGluZydgLCBgJ2V4aXRlZCdgKSwgd2hpY2ggY2FuIGJlIHVzZWQgdG8gYXBwbHkgY29udGV4dFxuICAgKiBzcGVjaWZpYyBwcm9wcyB0byBhIGNvbXBvbmVudC5cbiAgICpcbiAgICogYGBganN4XG4gICAqIDxUcmFuc2l0aW9uIGluPXt0aGlzLnN0YXRlLmlufSB0aW1lb3V0PXsxNTB9PlxuICAgKiAgIHtzdGF0ZSA9PiAoXG4gICAqICAgICA8TXlDb21wb25lbnQgY2xhc3NOYW1lPXtgZmFkZSBmYWRlLSR7c3RhdGV9YH0gLz5cbiAgICogICApfVxuICAgKiA8L1RyYW5zaXRpb24+XG4gICAqIGBgYFxuICAgKi9cbiAgY2hpbGRyZW46IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsIFByb3BUeXBlcy5lbGVtZW50LmlzUmVxdWlyZWRdKS5pc1JlcXVpcmVkLFxuXG4gIC8qKlxuICAgKiBTaG93IHRoZSBjb21wb25lbnQ7IHRyaWdnZXJzIHRoZSBlbnRlciBvciBleGl0IHN0YXRlc1xuICAgKi9cbiAgaW46IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBCeSBkZWZhdWx0IHRoZSBjaGlsZCBjb21wb25lbnQgaXMgbW91bnRlZCBpbW1lZGlhdGVseSBhbG9uZyB3aXRoXG4gICAqIHRoZSBwYXJlbnQgYFRyYW5zaXRpb25gIGNvbXBvbmVudC4gSWYgeW91IHdhbnQgdG8gXCJsYXp5IG1vdW50XCIgdGhlIGNvbXBvbmVudCBvbiB0aGVcbiAgICogZmlyc3QgYGluPXt0cnVlfWAgeW91IGNhbiBzZXQgYG1vdW50T25FbnRlcmAuIEFmdGVyIHRoZSBmaXJzdCBlbnRlciB0cmFuc2l0aW9uIHRoZSBjb21wb25lbnQgd2lsbCBzdGF5XG4gICAqIG1vdW50ZWQsIGV2ZW4gb24gXCJleGl0ZWRcIiwgdW5sZXNzIHlvdSBhbHNvIHNwZWNpZnkgYHVubW91bnRPbkV4aXRgLlxuICAgKi9cbiAgbW91bnRPbkVudGVyOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogQnkgZGVmYXVsdCB0aGUgY2hpbGQgY29tcG9uZW50IHN0YXlzIG1vdW50ZWQgYWZ0ZXIgaXQgcmVhY2hlcyB0aGUgYCdleGl0ZWQnYCBzdGF0ZS5cbiAgICogU2V0IGB1bm1vdW50T25FeGl0YCBpZiB5b3UnZCBwcmVmZXIgdG8gdW5tb3VudCB0aGUgY29tcG9uZW50IGFmdGVyIGl0IGZpbmlzaGVzIGV4aXRpbmcuXG4gICAqL1xuICB1bm1vdW50T25FeGl0OiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogQnkgZGVmYXVsdCB0aGUgY2hpbGQgY29tcG9uZW50IGRvZXMgbm90IHBlcmZvcm0gdGhlIGVudGVyIHRyYW5zaXRpb24gd2hlblxuICAgKiBpdCBmaXJzdCBtb3VudHMsIHJlZ2FyZGxlc3Mgb2YgdGhlIHZhbHVlIG9mIGBpbmAuIElmIHlvdSB3YW50IHRoaXNcbiAgICogYmVoYXZpb3IsIHNldCBib3RoIGBhcHBlYXJgIGFuZCBgaW5gIHRvIGB0cnVlYC5cbiAgICpcbiAgICogPiAqKk5vdGUqKjogdGhlcmUgYXJlIG5vIHNwZWNpYWwgYXBwZWFyIHN0YXRlcyBsaWtlIGBhcHBlYXJpbmdgL2BhcHBlYXJlZGAsIHRoaXMgcHJvcFxuICAgKiA+IG9ubHkgYWRkcyBhbiBhZGRpdGlvbmFsIGVudGVyIHRyYW5zaXRpb24uIEhvd2V2ZXIsIGluIHRoZVxuICAgKiA+IGA8Q1NTVHJhbnNpdGlvbj5gIGNvbXBvbmVudCB0aGF0IGZpcnN0IGVudGVyIHRyYW5zaXRpb24gZG9lcyByZXN1bHQgaW5cbiAgICogPiBhZGRpdGlvbmFsIGAuYXBwZWFyLSpgIGNsYXNzZXMsIHRoYXQgd2F5IHlvdSBjYW4gY2hvb3NlIHRvIHN0eWxlIGl0XG4gICAqID4gZGlmZmVyZW50bHkuXG4gICAqL1xuICBhcHBlYXI6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBFbmFibGUgb3IgZGlzYWJsZSBlbnRlciB0cmFuc2l0aW9ucy5cbiAgICovXG4gIGVudGVyOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogRW5hYmxlIG9yIGRpc2FibGUgZXhpdCB0cmFuc2l0aW9ucy5cbiAgICovXG4gIGV4aXQ6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBUaGUgZHVyYXRpb24gb2YgdGhlIHRyYW5zaXRpb24sIGluIG1pbGxpc2Vjb25kcy5cbiAgICogUmVxdWlyZWQgdW5sZXNzIGBhZGRFbmRMaXN0ZW5lcmAgaXMgcHJvdmlkZWQuXG4gICAqXG4gICAqIFlvdSBtYXkgc3BlY2lmeSBhIHNpbmdsZSB0aW1lb3V0IGZvciBhbGwgdHJhbnNpdGlvbnM6XG4gICAqXG4gICAqIGBgYGpzeFxuICAgKiB0aW1lb3V0PXs1MDB9XG4gICAqIGBgYFxuICAgKlxuICAgKiBvciBpbmRpdmlkdWFsbHk6XG4gICAqXG4gICAqIGBgYGpzeFxuICAgKiB0aW1lb3V0PXt7XG4gICAqICBhcHBlYXI6IDUwMCxcbiAgICogIGVudGVyOiAzMDAsXG4gICAqICBleGl0OiA1MDAsXG4gICAqIH19XG4gICAqIGBgYFxuICAgKlxuICAgKiAtIGBhcHBlYXJgIGRlZmF1bHRzIHRvIHRoZSB2YWx1ZSBvZiBgZW50ZXJgXG4gICAqIC0gYGVudGVyYCBkZWZhdWx0cyB0byBgMGBcbiAgICogLSBgZXhpdGAgZGVmYXVsdHMgdG8gYDBgXG4gICAqXG4gICAqIEB0eXBlIHtudW1iZXIgfCB7IGVudGVyPzogbnVtYmVyLCBleGl0PzogbnVtYmVyLCBhcHBlYXI/OiBudW1iZXIgfX1cbiAgICovXG4gIHRpbWVvdXQ6IGZ1bmN0aW9uIHRpbWVvdXQocHJvcHMpIHtcbiAgICB2YXIgcHQgPSB0aW1lb3V0c1NoYXBlO1xuICAgIGlmICghcHJvcHMuYWRkRW5kTGlzdGVuZXIpIHB0ID0gcHQuaXNSZXF1aXJlZDtcblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4gPiAxID8gX2xlbiAtIDEgOiAwKSwgX2tleSA9IDE7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleSAtIDFdID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIHJldHVybiBwdC5hcHBseSh2b2lkIDAsIFtwcm9wc10uY29uY2F0KGFyZ3MpKTtcbiAgfSxcblxuICAvKipcbiAgICogQWRkIGEgY3VzdG9tIHRyYW5zaXRpb24gZW5kIHRyaWdnZXIuIENhbGxlZCB3aXRoIHRoZSB0cmFuc2l0aW9uaW5nXG4gICAqIERPTSBub2RlIGFuZCBhIGBkb25lYCBjYWxsYmFjay4gQWxsb3dzIGZvciBtb3JlIGZpbmUgZ3JhaW5lZCB0cmFuc2l0aW9uIGVuZFxuICAgKiBsb2dpYy4gVGltZW91dHMgYXJlIHN0aWxsIHVzZWQgYXMgYSBmYWxsYmFjayBpZiBwcm92aWRlZC5cbiAgICpcbiAgICogKipOb3RlKio6IHdoZW4gYG5vZGVSZWZgIHByb3AgaXMgcGFzc2VkLCBgbm9kZWAgaXMgbm90IHBhc3NlZC5cbiAgICpcbiAgICogYGBganN4XG4gICAqIGFkZEVuZExpc3RlbmVyPXsobm9kZSwgZG9uZSkgPT4ge1xuICAgKiAgIC8vIHVzZSB0aGUgY3NzIHRyYW5zaXRpb25lbmQgZXZlbnQgdG8gbWFyayB0aGUgZmluaXNoIG9mIGEgdHJhbnNpdGlvblxuICAgKiAgIG5vZGUuYWRkRXZlbnRMaXN0ZW5lcigndHJhbnNpdGlvbmVuZCcsIGRvbmUsIGZhbHNlKTtcbiAgICogfX1cbiAgICogYGBgXG4gICAqL1xuICBhZGRFbmRMaXN0ZW5lcjogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIGJlZm9yZSB0aGUgXCJlbnRlcmluZ1wiIHN0YXR1cyBpcyBhcHBsaWVkLiBBbiBleHRyYSBwYXJhbWV0ZXJcbiAgICogYGlzQXBwZWFyaW5nYCBpcyBzdXBwbGllZCB0byBpbmRpY2F0ZSBpZiB0aGUgZW50ZXIgc3RhZ2UgaXMgb2NjdXJyaW5nIG9uIHRoZSBpbml0aWFsIG1vdW50XG4gICAqXG4gICAqICoqTm90ZSoqOiB3aGVuIGBub2RlUmVmYCBwcm9wIGlzIHBhc3NlZCwgYG5vZGVgIGlzIG5vdCBwYXNzZWQuXG4gICAqXG4gICAqIEB0eXBlIEZ1bmN0aW9uKG5vZGU6IEh0bWxFbGVtZW50LCBpc0FwcGVhcmluZzogYm9vbCkgLT4gdm9pZFxuICAgKi9cbiAgb25FbnRlcjogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIGFmdGVyIHRoZSBcImVudGVyaW5nXCIgc3RhdHVzIGlzIGFwcGxpZWQuIEFuIGV4dHJhIHBhcmFtZXRlclxuICAgKiBgaXNBcHBlYXJpbmdgIGlzIHN1cHBsaWVkIHRvIGluZGljYXRlIGlmIHRoZSBlbnRlciBzdGFnZSBpcyBvY2N1cnJpbmcgb24gdGhlIGluaXRpYWwgbW91bnRcbiAgICpcbiAgICogKipOb3RlKio6IHdoZW4gYG5vZGVSZWZgIHByb3AgaXMgcGFzc2VkLCBgbm9kZWAgaXMgbm90IHBhc3NlZC5cbiAgICpcbiAgICogQHR5cGUgRnVuY3Rpb24obm9kZTogSHRtbEVsZW1lbnQsIGlzQXBwZWFyaW5nOiBib29sKVxuICAgKi9cbiAgb25FbnRlcmluZzogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIGFmdGVyIHRoZSBcImVudGVyZWRcIiBzdGF0dXMgaXMgYXBwbGllZC4gQW4gZXh0cmEgcGFyYW1ldGVyXG4gICAqIGBpc0FwcGVhcmluZ2AgaXMgc3VwcGxpZWQgdG8gaW5kaWNhdGUgaWYgdGhlIGVudGVyIHN0YWdlIGlzIG9jY3VycmluZyBvbiB0aGUgaW5pdGlhbCBtb3VudFxuICAgKlxuICAgKiAqKk5vdGUqKjogd2hlbiBgbm9kZVJlZmAgcHJvcCBpcyBwYXNzZWQsIGBub2RlYCBpcyBub3QgcGFzc2VkLlxuICAgKlxuICAgKiBAdHlwZSBGdW5jdGlvbihub2RlOiBIdG1sRWxlbWVudCwgaXNBcHBlYXJpbmc6IGJvb2wpIC0+IHZvaWRcbiAgICovXG4gIG9uRW50ZXJlZDogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIGJlZm9yZSB0aGUgXCJleGl0aW5nXCIgc3RhdHVzIGlzIGFwcGxpZWQuXG4gICAqXG4gICAqICoqTm90ZSoqOiB3aGVuIGBub2RlUmVmYCBwcm9wIGlzIHBhc3NlZCwgYG5vZGVgIGlzIG5vdCBwYXNzZWQuXG4gICAqXG4gICAqIEB0eXBlIEZ1bmN0aW9uKG5vZGU6IEh0bWxFbGVtZW50KSAtPiB2b2lkXG4gICAqL1xuICBvbkV4aXQ6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCBhZnRlciB0aGUgXCJleGl0aW5nXCIgc3RhdHVzIGlzIGFwcGxpZWQuXG4gICAqXG4gICAqICoqTm90ZSoqOiB3aGVuIGBub2RlUmVmYCBwcm9wIGlzIHBhc3NlZCwgYG5vZGVgIGlzIG5vdCBwYXNzZWQuXG4gICAqXG4gICAqIEB0eXBlIEZ1bmN0aW9uKG5vZGU6IEh0bWxFbGVtZW50KSAtPiB2b2lkXG4gICAqL1xuICBvbkV4aXRpbmc6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCBhZnRlciB0aGUgXCJleGl0ZWRcIiBzdGF0dXMgaXMgYXBwbGllZC5cbiAgICpcbiAgICogKipOb3RlKio6IHdoZW4gYG5vZGVSZWZgIHByb3AgaXMgcGFzc2VkLCBgbm9kZWAgaXMgbm90IHBhc3NlZFxuICAgKlxuICAgKiBAdHlwZSBGdW5jdGlvbihub2RlOiBIdG1sRWxlbWVudCkgLT4gdm9pZFxuICAgKi9cbiAgb25FeGl0ZWQ6IFByb3BUeXBlcy5mdW5jXG59IDoge307IC8vIE5hbWUgdGhlIGZ1bmN0aW9uIHNvIGl0IGlzIGNsZWFyZXIgaW4gdGhlIGRvY3VtZW50YXRpb25cblxuZnVuY3Rpb24gbm9vcCgpIHt9XG5cblRyYW5zaXRpb24uZGVmYXVsdFByb3BzID0ge1xuICBpbjogZmFsc2UsXG4gIG1vdW50T25FbnRlcjogZmFsc2UsXG4gIHVubW91bnRPbkV4aXQ6IGZhbHNlLFxuICBhcHBlYXI6IGZhbHNlLFxuICBlbnRlcjogdHJ1ZSxcbiAgZXhpdDogdHJ1ZSxcbiAgb25FbnRlcjogbm9vcCxcbiAgb25FbnRlcmluZzogbm9vcCxcbiAgb25FbnRlcmVkOiBub29wLFxuICBvbkV4aXQ6IG5vb3AsXG4gIG9uRXhpdGluZzogbm9vcCxcbiAgb25FeGl0ZWQ6IG5vb3Bcbn07XG5UcmFuc2l0aW9uLlVOTU9VTlRFRCA9IFVOTU9VTlRFRDtcblRyYW5zaXRpb24uRVhJVEVEID0gRVhJVEVEO1xuVHJhbnNpdGlvbi5FTlRFUklORyA9IEVOVEVSSU5HO1xuVHJhbnNpdGlvbi5FTlRFUkVEID0gRU5URVJFRDtcblRyYW5zaXRpb24uRVhJVElORyA9IEVYSVRJTkc7XG5leHBvcnQgZGVmYXVsdCBUcmFuc2l0aW9uOyIsImV4cG9ydCB2YXIgcmVmbG93ID0gZnVuY3Rpb24gcmVmbG93KG5vZGUpIHtcbiAgcmV0dXJuIG5vZGUuc2Nyb2xsVG9wO1xufTtcbmV4cG9ydCBmdW5jdGlvbiBnZXRUcmFuc2l0aW9uUHJvcHMocHJvcHMsIG9wdGlvbnMpIHtcbiAgdmFyIHRpbWVvdXQgPSBwcm9wcy50aW1lb3V0LFxuICAgICAgX3Byb3BzJHN0eWxlID0gcHJvcHMuc3R5bGUsXG4gICAgICBzdHlsZSA9IF9wcm9wcyRzdHlsZSA9PT0gdm9pZCAwID8ge30gOiBfcHJvcHMkc3R5bGU7XG4gIHJldHVybiB7XG4gICAgZHVyYXRpb246IHN0eWxlLnRyYW5zaXRpb25EdXJhdGlvbiB8fCB0eXBlb2YgdGltZW91dCA9PT0gJ251bWJlcicgPyB0aW1lb3V0IDogdGltZW91dFtvcHRpb25zLm1vZGVdIHx8IDAsXG4gICAgZGVsYXk6IHN0eWxlLnRyYW5zaXRpb25EZWxheVxuICB9O1xufSIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF9zbGljZWRUb0FycmF5IGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9zbGljZWRUb0FycmF5XCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc1wiO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCB7IFRyYW5zaXRpb24gfSBmcm9tICdyZWFjdC10cmFuc2l0aW9uLWdyb3VwJztcbmltcG9ydCB1c2VUaGVtZSBmcm9tICcuLi9zdHlsZXMvdXNlVGhlbWUnO1xuaW1wb3J0IHsgcmVmbG93LCBnZXRUcmFuc2l0aW9uUHJvcHMgfSBmcm9tICcuLi90cmFuc2l0aW9ucy91dGlscyc7XG5pbXBvcnQgdXNlRm9ya1JlZiBmcm9tICcuLi91dGlscy91c2VGb3JrUmVmJztcblxuZnVuY3Rpb24gZ2V0U2NhbGUodmFsdWUpIHtcbiAgcmV0dXJuIFwic2NhbGUoXCIuY29uY2F0KHZhbHVlLCBcIiwgXCIpLmNvbmNhdChNYXRoLnBvdyh2YWx1ZSwgMiksIFwiKVwiKTtcbn1cblxudmFyIHN0eWxlcyA9IHtcbiAgZW50ZXJpbmc6IHtcbiAgICBvcGFjaXR5OiAxLFxuICAgIHRyYW5zZm9ybTogZ2V0U2NhbGUoMSlcbiAgfSxcbiAgZW50ZXJlZDoge1xuICAgIG9wYWNpdHk6IDEsXG4gICAgdHJhbnNmb3JtOiAnbm9uZSdcbiAgfVxufTtcbi8qKlxuICogVGhlIEdyb3cgdHJhbnNpdGlvbiBpcyB1c2VkIGJ5IHRoZSBbVG9vbHRpcF0oL2NvbXBvbmVudHMvdG9vbHRpcHMvKSBhbmRcbiAqIFtQb3BvdmVyXSgvY29tcG9uZW50cy9wb3BvdmVyLykgY29tcG9uZW50cy5cbiAqIEl0IHVzZXMgW3JlYWN0LXRyYW5zaXRpb24tZ3JvdXBdKGh0dHBzOi8vZ2l0aHViLmNvbS9yZWFjdGpzL3JlYWN0LXRyYW5zaXRpb24tZ3JvdXApIGludGVybmFsbHkuXG4gKi9cblxudmFyIEdyb3cgPSAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBHcm93KHByb3BzLCByZWYpIHtcbiAgdmFyIGNoaWxkcmVuID0gcHJvcHMuY2hpbGRyZW4sXG4gICAgICBfcHJvcHMkZGlzYWJsZVN0cmljdE0gPSBwcm9wcy5kaXNhYmxlU3RyaWN0TW9kZUNvbXBhdCxcbiAgICAgIGRpc2FibGVTdHJpY3RNb2RlQ29tcGF0ID0gX3Byb3BzJGRpc2FibGVTdHJpY3RNID09PSB2b2lkIDAgPyBmYWxzZSA6IF9wcm9wcyRkaXNhYmxlU3RyaWN0TSxcbiAgICAgIGluUHJvcCA9IHByb3BzLmluLFxuICAgICAgb25FbnRlciA9IHByb3BzLm9uRW50ZXIsXG4gICAgICBvbkVudGVyZWQgPSBwcm9wcy5vbkVudGVyZWQsXG4gICAgICBvbkVudGVyaW5nID0gcHJvcHMub25FbnRlcmluZyxcbiAgICAgIG9uRXhpdCA9IHByb3BzLm9uRXhpdCxcbiAgICAgIG9uRXhpdGVkID0gcHJvcHMub25FeGl0ZWQsXG4gICAgICBvbkV4aXRpbmcgPSBwcm9wcy5vbkV4aXRpbmcsXG4gICAgICBzdHlsZSA9IHByb3BzLnN0eWxlLFxuICAgICAgX3Byb3BzJHRpbWVvdXQgPSBwcm9wcy50aW1lb3V0LFxuICAgICAgdGltZW91dCA9IF9wcm9wcyR0aW1lb3V0ID09PSB2b2lkIDAgPyAnYXV0bycgOiBfcHJvcHMkdGltZW91dCxcbiAgICAgIF9wcm9wcyRUcmFuc2l0aW9uQ29tcCA9IHByb3BzLlRyYW5zaXRpb25Db21wb25lbnQsXG4gICAgICBUcmFuc2l0aW9uQ29tcG9uZW50ID0gX3Byb3BzJFRyYW5zaXRpb25Db21wID09PSB2b2lkIDAgPyBUcmFuc2l0aW9uIDogX3Byb3BzJFRyYW5zaXRpb25Db21wLFxuICAgICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMocHJvcHMsIFtcImNoaWxkcmVuXCIsIFwiZGlzYWJsZVN0cmljdE1vZGVDb21wYXRcIiwgXCJpblwiLCBcIm9uRW50ZXJcIiwgXCJvbkVudGVyZWRcIiwgXCJvbkVudGVyaW5nXCIsIFwib25FeGl0XCIsIFwib25FeGl0ZWRcIiwgXCJvbkV4aXRpbmdcIiwgXCJzdHlsZVwiLCBcInRpbWVvdXRcIiwgXCJUcmFuc2l0aW9uQ29tcG9uZW50XCJdKTtcblxuICB2YXIgdGltZXIgPSBSZWFjdC51c2VSZWYoKTtcbiAgdmFyIGF1dG9UaW1lb3V0ID0gUmVhY3QudXNlUmVmKCk7XG4gIHZhciB0aGVtZSA9IHVzZVRoZW1lKCk7XG4gIHZhciBlbmFibGVTdHJpY3RNb2RlQ29tcGF0ID0gdGhlbWUudW5zdGFibGVfc3RyaWN0TW9kZSAmJiAhZGlzYWJsZVN0cmljdE1vZGVDb21wYXQ7XG4gIHZhciBub2RlUmVmID0gUmVhY3QudXNlUmVmKG51bGwpO1xuICB2YXIgZm9yZWlnblJlZiA9IHVzZUZvcmtSZWYoY2hpbGRyZW4ucmVmLCByZWYpO1xuICB2YXIgaGFuZGxlUmVmID0gdXNlRm9ya1JlZihlbmFibGVTdHJpY3RNb2RlQ29tcGF0ID8gbm9kZVJlZiA6IHVuZGVmaW5lZCwgZm9yZWlnblJlZik7XG5cbiAgdmFyIG5vcm1hbGl6ZWRUcmFuc2l0aW9uQ2FsbGJhY2sgPSBmdW5jdGlvbiBub3JtYWxpemVkVHJhbnNpdGlvbkNhbGxiYWNrKGNhbGxiYWNrKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChub2RlT3JBcHBlYXJpbmcsIG1heWJlQXBwZWFyaW5nKSB7XG4gICAgICBpZiAoY2FsbGJhY2spIHtcbiAgICAgICAgdmFyIF9yZWYgPSBlbmFibGVTdHJpY3RNb2RlQ29tcGF0ID8gW25vZGVSZWYuY3VycmVudCwgbm9kZU9yQXBwZWFyaW5nXSA6IFtub2RlT3JBcHBlYXJpbmcsIG1heWJlQXBwZWFyaW5nXSxcbiAgICAgICAgICAgIF9yZWYyID0gX3NsaWNlZFRvQXJyYXkoX3JlZiwgMiksXG4gICAgICAgICAgICBub2RlID0gX3JlZjJbMF0sXG4gICAgICAgICAgICBpc0FwcGVhcmluZyA9IF9yZWYyWzFdOyAvLyBvbkVudGVyWHh4IGFuZCBvbkV4aXRYeHggY2FsbGJhY2tzIGhhdmUgYSBkaWZmZXJlbnQgYXJndW1lbnRzLmxlbmd0aCB2YWx1ZS5cblxuXG4gICAgICAgIGlmIChpc0FwcGVhcmluZyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgY2FsbGJhY2sobm9kZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY2FsbGJhY2sobm9kZSwgaXNBcHBlYXJpbmcpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcbiAgfTtcblxuICB2YXIgaGFuZGxlRW50ZXJpbmcgPSBub3JtYWxpemVkVHJhbnNpdGlvbkNhbGxiYWNrKG9uRW50ZXJpbmcpO1xuICB2YXIgaGFuZGxlRW50ZXIgPSBub3JtYWxpemVkVHJhbnNpdGlvbkNhbGxiYWNrKGZ1bmN0aW9uIChub2RlLCBpc0FwcGVhcmluZykge1xuICAgIHJlZmxvdyhub2RlKTsgLy8gU28gdGhlIGFuaW1hdGlvbiBhbHdheXMgc3RhcnQgZnJvbSB0aGUgc3RhcnQuXG5cbiAgICB2YXIgX2dldFRyYW5zaXRpb25Qcm9wcyA9IGdldFRyYW5zaXRpb25Qcm9wcyh7XG4gICAgICBzdHlsZTogc3R5bGUsXG4gICAgICB0aW1lb3V0OiB0aW1lb3V0XG4gICAgfSwge1xuICAgICAgbW9kZTogJ2VudGVyJ1xuICAgIH0pLFxuICAgICAgICB0cmFuc2l0aW9uRHVyYXRpb24gPSBfZ2V0VHJhbnNpdGlvblByb3BzLmR1cmF0aW9uLFxuICAgICAgICBkZWxheSA9IF9nZXRUcmFuc2l0aW9uUHJvcHMuZGVsYXk7XG5cbiAgICB2YXIgZHVyYXRpb247XG5cbiAgICBpZiAodGltZW91dCA9PT0gJ2F1dG8nKSB7XG4gICAgICBkdXJhdGlvbiA9IHRoZW1lLnRyYW5zaXRpb25zLmdldEF1dG9IZWlnaHREdXJhdGlvbihub2RlLmNsaWVudEhlaWdodCk7XG4gICAgICBhdXRvVGltZW91dC5jdXJyZW50ID0gZHVyYXRpb247XG4gICAgfSBlbHNlIHtcbiAgICAgIGR1cmF0aW9uID0gdHJhbnNpdGlvbkR1cmF0aW9uO1xuICAgIH1cblxuICAgIG5vZGUuc3R5bGUudHJhbnNpdGlvbiA9IFt0aGVtZS50cmFuc2l0aW9ucy5jcmVhdGUoJ29wYWNpdHknLCB7XG4gICAgICBkdXJhdGlvbjogZHVyYXRpb24sXG4gICAgICBkZWxheTogZGVsYXlcbiAgICB9KSwgdGhlbWUudHJhbnNpdGlvbnMuY3JlYXRlKCd0cmFuc2Zvcm0nLCB7XG4gICAgICBkdXJhdGlvbjogZHVyYXRpb24gKiAwLjY2NixcbiAgICAgIGRlbGF5OiBkZWxheVxuICAgIH0pXS5qb2luKCcsJyk7XG5cbiAgICBpZiAob25FbnRlcikge1xuICAgICAgb25FbnRlcihub2RlLCBpc0FwcGVhcmluZyk7XG4gICAgfVxuICB9KTtcbiAgdmFyIGhhbmRsZUVudGVyZWQgPSBub3JtYWxpemVkVHJhbnNpdGlvbkNhbGxiYWNrKG9uRW50ZXJlZCk7XG4gIHZhciBoYW5kbGVFeGl0aW5nID0gbm9ybWFsaXplZFRyYW5zaXRpb25DYWxsYmFjayhvbkV4aXRpbmcpO1xuICB2YXIgaGFuZGxlRXhpdCA9IG5vcm1hbGl6ZWRUcmFuc2l0aW9uQ2FsbGJhY2soZnVuY3Rpb24gKG5vZGUpIHtcbiAgICB2YXIgX2dldFRyYW5zaXRpb25Qcm9wczIgPSBnZXRUcmFuc2l0aW9uUHJvcHMoe1xuICAgICAgc3R5bGU6IHN0eWxlLFxuICAgICAgdGltZW91dDogdGltZW91dFxuICAgIH0sIHtcbiAgICAgIG1vZGU6ICdleGl0J1xuICAgIH0pLFxuICAgICAgICB0cmFuc2l0aW9uRHVyYXRpb24gPSBfZ2V0VHJhbnNpdGlvblByb3BzMi5kdXJhdGlvbixcbiAgICAgICAgZGVsYXkgPSBfZ2V0VHJhbnNpdGlvblByb3BzMi5kZWxheTtcblxuICAgIHZhciBkdXJhdGlvbjtcblxuICAgIGlmICh0aW1lb3V0ID09PSAnYXV0bycpIHtcbiAgICAgIGR1cmF0aW9uID0gdGhlbWUudHJhbnNpdGlvbnMuZ2V0QXV0b0hlaWdodER1cmF0aW9uKG5vZGUuY2xpZW50SGVpZ2h0KTtcbiAgICAgIGF1dG9UaW1lb3V0LmN1cnJlbnQgPSBkdXJhdGlvbjtcbiAgICB9IGVsc2Uge1xuICAgICAgZHVyYXRpb24gPSB0cmFuc2l0aW9uRHVyYXRpb247XG4gICAgfVxuXG4gICAgbm9kZS5zdHlsZS50cmFuc2l0aW9uID0gW3RoZW1lLnRyYW5zaXRpb25zLmNyZWF0ZSgnb3BhY2l0eScsIHtcbiAgICAgIGR1cmF0aW9uOiBkdXJhdGlvbixcbiAgICAgIGRlbGF5OiBkZWxheVxuICAgIH0pLCB0aGVtZS50cmFuc2l0aW9ucy5jcmVhdGUoJ3RyYW5zZm9ybScsIHtcbiAgICAgIGR1cmF0aW9uOiBkdXJhdGlvbiAqIDAuNjY2LFxuICAgICAgZGVsYXk6IGRlbGF5IHx8IGR1cmF0aW9uICogMC4zMzNcbiAgICB9KV0uam9pbignLCcpO1xuICAgIG5vZGUuc3R5bGUub3BhY2l0eSA9ICcwJztcbiAgICBub2RlLnN0eWxlLnRyYW5zZm9ybSA9IGdldFNjYWxlKDAuNzUpO1xuXG4gICAgaWYgKG9uRXhpdCkge1xuICAgICAgb25FeGl0KG5vZGUpO1xuICAgIH1cbiAgfSk7XG4gIHZhciBoYW5kbGVFeGl0ZWQgPSBub3JtYWxpemVkVHJhbnNpdGlvbkNhbGxiYWNrKG9uRXhpdGVkKTtcblxuICB2YXIgYWRkRW5kTGlzdGVuZXIgPSBmdW5jdGlvbiBhZGRFbmRMaXN0ZW5lcihub2RlT3JOZXh0LCBtYXliZU5leHQpIHtcbiAgICB2YXIgbmV4dCA9IGVuYWJsZVN0cmljdE1vZGVDb21wYXQgPyBub2RlT3JOZXh0IDogbWF5YmVOZXh0O1xuXG4gICAgaWYgKHRpbWVvdXQgPT09ICdhdXRvJykge1xuICAgICAgdGltZXIuY3VycmVudCA9IHNldFRpbWVvdXQobmV4dCwgYXV0b1RpbWVvdXQuY3VycmVudCB8fCAwKTtcbiAgICB9XG4gIH07XG5cbiAgUmVhY3QudXNlRWZmZWN0KGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgY2xlYXJUaW1lb3V0KHRpbWVyLmN1cnJlbnQpO1xuICAgIH07XG4gIH0sIFtdKTtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFRyYW5zaXRpb25Db21wb25lbnQsIF9leHRlbmRzKHtcbiAgICBhcHBlYXI6IHRydWUsXG4gICAgaW46IGluUHJvcCxcbiAgICBub2RlUmVmOiBlbmFibGVTdHJpY3RNb2RlQ29tcGF0ID8gbm9kZVJlZiA6IHVuZGVmaW5lZCxcbiAgICBvbkVudGVyOiBoYW5kbGVFbnRlcixcbiAgICBvbkVudGVyZWQ6IGhhbmRsZUVudGVyZWQsXG4gICAgb25FbnRlcmluZzogaGFuZGxlRW50ZXJpbmcsXG4gICAgb25FeGl0OiBoYW5kbGVFeGl0LFxuICAgIG9uRXhpdGVkOiBoYW5kbGVFeGl0ZWQsXG4gICAgb25FeGl0aW5nOiBoYW5kbGVFeGl0aW5nLFxuICAgIGFkZEVuZExpc3RlbmVyOiBhZGRFbmRMaXN0ZW5lcixcbiAgICB0aW1lb3V0OiB0aW1lb3V0ID09PSAnYXV0bycgPyBudWxsIDogdGltZW91dFxuICB9LCBvdGhlciksIGZ1bmN0aW9uIChzdGF0ZSwgY2hpbGRQcm9wcykge1xuICAgIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY2xvbmVFbGVtZW50KGNoaWxkcmVuLCBfZXh0ZW5kcyh7XG4gICAgICBzdHlsZTogX2V4dGVuZHMoe1xuICAgICAgICBvcGFjaXR5OiAwLFxuICAgICAgICB0cmFuc2Zvcm06IGdldFNjYWxlKDAuNzUpLFxuICAgICAgICB2aXNpYmlsaXR5OiBzdGF0ZSA9PT0gJ2V4aXRlZCcgJiYgIWluUHJvcCA/ICdoaWRkZW4nIDogdW5kZWZpbmVkXG4gICAgICB9LCBzdHlsZXNbc3RhdGVdLCBzdHlsZSwgY2hpbGRyZW4ucHJvcHMuc3R5bGUpLFxuICAgICAgcmVmOiBoYW5kbGVSZWZcbiAgICB9LCBjaGlsZFByb3BzKSk7XG4gIH0pO1xufSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBHcm93LnByb3BUeXBlcyA9IHtcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gV2FybmluZyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAvLyB8IFRoZXNlIFByb3BUeXBlcyBhcmUgZ2VuZXJhdGVkIGZyb20gdGhlIFR5cGVTY3JpcHQgdHlwZSBkZWZpbml0aW9ucyB8XG4gIC8vIHwgICAgIFRvIHVwZGF0ZSB0aGVtIGVkaXQgdGhlIGQudHMgZmlsZSBhbmQgcnVuIFwieWFybiBwcm9wdHlwZXNcIiAgICAgfFxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbiAgLyoqXG4gICAqIEEgc2luZ2xlIGNoaWxkIGNvbnRlbnQgZWxlbWVudC5cbiAgICovXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMuZWxlbWVudCxcblxuICAvKipcbiAgICogRW5hYmxlIHRoaXMgcHJvcCBpZiB5b3UgZW5jb3VudGVyICdGdW5jdGlvbiBjb21wb25lbnRzIGNhbm5vdCBiZSBnaXZlbiByZWZzJyxcbiAgICogdXNlIGB1bnN0YWJsZV9jcmVhdGVTdHJpY3RNb2RlVGhlbWVgLFxuICAgKiBhbmQgY2FuJ3QgZm9yd2FyZCB0aGUgcmVmIGluIHRoZSBjaGlsZCBjb21wb25lbnQuXG4gICAqL1xuICBkaXNhYmxlU3RyaWN0TW9kZUNvbXBhdDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgc2hvdyB0aGUgY29tcG9uZW50OyB0cmlnZ2VycyB0aGUgZW50ZXIgb3IgZXhpdCBhbmltYXRpb24uXG4gICAqL1xuICBpbjogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIG9uRW50ZXI6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBvbkVudGVyZWQ6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBvbkVudGVyaW5nOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgb25FeGl0OiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgb25FeGl0ZWQ6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBvbkV4aXRpbmc6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBzdHlsZTogUHJvcFR5cGVzLm9iamVjdCxcblxuICAvKipcbiAgICogVGhlIGR1cmF0aW9uIGZvciB0aGUgdHJhbnNpdGlvbiwgaW4gbWlsbGlzZWNvbmRzLlxuICAgKiBZb3UgbWF5IHNwZWNpZnkgYSBzaW5nbGUgdGltZW91dCBmb3IgYWxsIHRyYW5zaXRpb25zLCBvciBpbmRpdmlkdWFsbHkgd2l0aCBhbiBvYmplY3QuXG4gICAqXG4gICAqIFNldCB0byAnYXV0bycgdG8gYXV0b21hdGljYWxseSBjYWxjdWxhdGUgdHJhbnNpdGlvbiB0aW1lIGJhc2VkIG9uIGhlaWdodC5cbiAgICovXG4gIHRpbWVvdXQ6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5vbmVPZihbJ2F1dG8nXSksIFByb3BUeXBlcy5udW1iZXIsIFByb3BUeXBlcy5zaGFwZSh7XG4gICAgYXBwZWFyOiBQcm9wVHlwZXMubnVtYmVyLFxuICAgIGVudGVyOiBQcm9wVHlwZXMubnVtYmVyLFxuICAgIGV4aXQ6IFByb3BUeXBlcy5udW1iZXJcbiAgfSldKVxufSA6IHZvaWQgMDtcbkdyb3cubXVpU3VwcG9ydEF1dG8gPSB0cnVlO1xuZXhwb3J0IGRlZmF1bHQgR3JvdzsiLCJpbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc1wiO1xuaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGNsc3ggZnJvbSAnY2xzeCc7XG5pbXBvcnQgeyBjaGFpblByb3BUeXBlcyB9IGZyb20gJ0BtYXRlcmlhbC11aS91dGlscyc7XG5pbXBvcnQgd2l0aFN0eWxlcyBmcm9tICcuLi9zdHlsZXMvd2l0aFN0eWxlcyc7XG5leHBvcnQgdmFyIHN0eWxlcyA9IGZ1bmN0aW9uIHN0eWxlcyh0aGVtZSkge1xuICB2YXIgZWxldmF0aW9ucyA9IHt9O1xuICB0aGVtZS5zaGFkb3dzLmZvckVhY2goZnVuY3Rpb24gKHNoYWRvdywgaW5kZXgpIHtcbiAgICBlbGV2YXRpb25zW1wiZWxldmF0aW9uXCIuY29uY2F0KGluZGV4KV0gPSB7XG4gICAgICBib3hTaGFkb3c6IHNoYWRvd1xuICAgIH07XG4gIH0pO1xuICByZXR1cm4gX2V4dGVuZHMoe1xuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQuICovXG4gICAgcm9vdDoge1xuICAgICAgYmFja2dyb3VuZENvbG9yOiB0aGVtZS5wYWxldHRlLmJhY2tncm91bmQucGFwZXIsXG4gICAgICBjb2xvcjogdGhlbWUucGFsZXR0ZS50ZXh0LnByaW1hcnksXG4gICAgICB0cmFuc2l0aW9uOiB0aGVtZS50cmFuc2l0aW9ucy5jcmVhdGUoJ2JveC1zaGFkb3cnKVxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBzcXVhcmU9e2ZhbHNlfWAuICovXG4gICAgcm91bmRlZDoge1xuICAgICAgYm9yZGVyUmFkaXVzOiB0aGVtZS5zaGFwZS5ib3JkZXJSYWRpdXNcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgdmFyaWFudD1cIm91dGxpbmVkXCJgLiAqL1xuICAgIG91dGxpbmVkOiB7XG4gICAgICBib3JkZXI6IFwiMXB4IHNvbGlkIFwiLmNvbmNhdCh0aGVtZS5wYWxldHRlLmRpdmlkZXIpXG4gICAgfVxuICB9LCBlbGV2YXRpb25zKTtcbn07XG52YXIgUGFwZXIgPSAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBQYXBlcihwcm9wcywgcmVmKSB7XG4gIHZhciBjbGFzc2VzID0gcHJvcHMuY2xhc3NlcyxcbiAgICAgIGNsYXNzTmFtZSA9IHByb3BzLmNsYXNzTmFtZSxcbiAgICAgIF9wcm9wcyRjb21wb25lbnQgPSBwcm9wcy5jb21wb25lbnQsXG4gICAgICBDb21wb25lbnQgPSBfcHJvcHMkY29tcG9uZW50ID09PSB2b2lkIDAgPyAnZGl2JyA6IF9wcm9wcyRjb21wb25lbnQsXG4gICAgICBfcHJvcHMkc3F1YXJlID0gcHJvcHMuc3F1YXJlLFxuICAgICAgc3F1YXJlID0gX3Byb3BzJHNxdWFyZSA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcHJvcHMkc3F1YXJlLFxuICAgICAgX3Byb3BzJGVsZXZhdGlvbiA9IHByb3BzLmVsZXZhdGlvbixcbiAgICAgIGVsZXZhdGlvbiA9IF9wcm9wcyRlbGV2YXRpb24gPT09IHZvaWQgMCA/IDEgOiBfcHJvcHMkZWxldmF0aW9uLFxuICAgICAgX3Byb3BzJHZhcmlhbnQgPSBwcm9wcy52YXJpYW50LFxuICAgICAgdmFyaWFudCA9IF9wcm9wcyR2YXJpYW50ID09PSB2b2lkIDAgPyAnZWxldmF0aW9uJyA6IF9wcm9wcyR2YXJpYW50LFxuICAgICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMocHJvcHMsIFtcImNsYXNzZXNcIiwgXCJjbGFzc05hbWVcIiwgXCJjb21wb25lbnRcIiwgXCJzcXVhcmVcIiwgXCJlbGV2YXRpb25cIiwgXCJ2YXJpYW50XCJdKTtcblxuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoQ29tcG9uZW50LCBfZXh0ZW5kcyh7XG4gICAgY2xhc3NOYW1lOiBjbHN4KGNsYXNzZXMucm9vdCwgY2xhc3NOYW1lLCB2YXJpYW50ID09PSAnb3V0bGluZWQnID8gY2xhc3Nlcy5vdXRsaW5lZCA6IGNsYXNzZXNbXCJlbGV2YXRpb25cIi5jb25jYXQoZWxldmF0aW9uKV0sICFzcXVhcmUgJiYgY2xhc3Nlcy5yb3VuZGVkKSxcbiAgICByZWY6IHJlZlxuICB9LCBvdGhlcikpO1xufSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBQYXBlci5wcm9wVHlwZXMgPSB7XG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIFdhcm5pbmcgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgLy8gfCBUaGVzZSBQcm9wVHlwZXMgYXJlIGdlbmVyYXRlZCBmcm9tIHRoZSBUeXBlU2NyaXB0IHR5cGUgZGVmaW5pdGlvbnMgfFxuICAvLyB8ICAgICBUbyB1cGRhdGUgdGhlbSBlZGl0IHRoZSBkLnRzIGZpbGUgYW5kIHJ1biBcInlhcm4gcHJvcHR5cGVzXCIgICAgIHxcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4gIC8qKlxuICAgKiBUaGUgY29udGVudCBvZiB0aGUgY29tcG9uZW50LlxuICAgKi9cbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuXG4gIC8qKlxuICAgKiBPdmVycmlkZSBvciBleHRlbmQgdGhlIHN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAqIFNlZSBbQ1NTIEFQSV0oI2NzcykgYmVsb3cgZm9yIG1vcmUgZGV0YWlscy5cbiAgICovXG4gIGNsYXNzZXM6IFByb3BUeXBlcy5vYmplY3QsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogVGhlIGNvbXBvbmVudCB1c2VkIGZvciB0aGUgcm9vdCBub2RlLlxuICAgKiBFaXRoZXIgYSBzdHJpbmcgdG8gdXNlIGEgSFRNTCBlbGVtZW50IG9yIGEgY29tcG9uZW50LlxuICAgKi9cbiAgY29tcG9uZW50OiBQcm9wVHlwZXNcbiAgLyogQHR5cGVzY3JpcHQtdG8tcHJvcHR5cGVzLWlnbm9yZSAqL1xuICAuZWxlbWVudFR5cGUsXG5cbiAgLyoqXG4gICAqIFNoYWRvdyBkZXB0aCwgY29ycmVzcG9uZHMgdG8gYGRwYCBpbiB0aGUgc3BlYy5cbiAgICogSXQgYWNjZXB0cyB2YWx1ZXMgYmV0d2VlbiAwIGFuZCAyNCBpbmNsdXNpdmUuXG4gICAqL1xuICBlbGV2YXRpb246IGNoYWluUHJvcFR5cGVzKFByb3BUeXBlcy5udW1iZXIsIGZ1bmN0aW9uIChwcm9wcykge1xuICAgIHZhciBjbGFzc2VzID0gcHJvcHMuY2xhc3NlcyxcbiAgICAgICAgZWxldmF0aW9uID0gcHJvcHMuZWxldmF0aW9uOyAvLyBpbiBjYXNlIGB3aXRoU3R5bGVzYCBmYWlscyB0byBpbmplY3Qgd2UgZG9uJ3QgbmVlZCB0aGlzIHdhcm5pbmdcblxuICAgIGlmIChjbGFzc2VzID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIGlmIChlbGV2YXRpb24gIT0gbnVsbCAmJiBjbGFzc2VzW1wiZWxldmF0aW9uXCIuY29uY2F0KGVsZXZhdGlvbildID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybiBuZXcgRXJyb3IoXCJNYXRlcmlhbC1VSTogVGhpcyBlbGV2YXRpb24gYFwiLmNvbmNhdChlbGV2YXRpb24sIFwiYCBpcyBub3QgaW1wbGVtZW50ZWQuXCIpKTtcbiAgICB9XG5cbiAgICByZXR1cm4gbnVsbDtcbiAgfSksXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgcm91bmRlZCBjb3JuZXJzIGFyZSBkaXNhYmxlZC5cbiAgICovXG4gIHNxdWFyZTogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIFRoZSB2YXJpYW50IHRvIHVzZS5cbiAgICovXG4gIHZhcmlhbnQ6IFByb3BUeXBlcy5vbmVPZihbJ2VsZXZhdGlvbicsICdvdXRsaW5lZCddKVxufSA6IHZvaWQgMDtcbmV4cG9ydCBkZWZhdWx0IHdpdGhTdHlsZXMoc3R5bGVzLCB7XG4gIG5hbWU6ICdNdWlQYXBlcidcbn0pKFBhcGVyKTsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzXCI7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0ICogYXMgUmVhY3RET00gZnJvbSAncmVhY3QtZG9tJztcbmltcG9ydCB7IGNoYWluUHJvcFR5cGVzLCBlbGVtZW50VHlwZUFjY2VwdGluZ1JlZiwgcmVmVHlwZSwgSFRNTEVsZW1lbnRUeXBlIH0gZnJvbSAnQG1hdGVyaWFsLXVpL3V0aWxzJztcbmltcG9ydCBkZWJvdW5jZSBmcm9tICcuLi91dGlscy9kZWJvdW5jZSc7XG5pbXBvcnQgY2xzeCBmcm9tICdjbHN4JztcbmltcG9ydCBvd25lckRvY3VtZW50IGZyb20gJy4uL3V0aWxzL293bmVyRG9jdW1lbnQnO1xuaW1wb3J0IG93bmVyV2luZG93IGZyb20gJy4uL3V0aWxzL293bmVyV2luZG93JztcbmltcG9ydCBjcmVhdGVDaGFpbmVkRnVuY3Rpb24gZnJvbSAnLi4vdXRpbHMvY3JlYXRlQ2hhaW5lZEZ1bmN0aW9uJztcbmltcG9ydCB3aXRoU3R5bGVzIGZyb20gJy4uL3N0eWxlcy93aXRoU3R5bGVzJztcbmltcG9ydCBNb2RhbCBmcm9tICcuLi9Nb2RhbCc7XG5pbXBvcnQgR3JvdyBmcm9tICcuLi9Hcm93JztcbmltcG9ydCBQYXBlciBmcm9tICcuLi9QYXBlcic7XG5leHBvcnQgZnVuY3Rpb24gZ2V0T2Zmc2V0VG9wKHJlY3QsIHZlcnRpY2FsKSB7XG4gIHZhciBvZmZzZXQgPSAwO1xuXG4gIGlmICh0eXBlb2YgdmVydGljYWwgPT09ICdudW1iZXInKSB7XG4gICAgb2Zmc2V0ID0gdmVydGljYWw7XG4gIH0gZWxzZSBpZiAodmVydGljYWwgPT09ICdjZW50ZXInKSB7XG4gICAgb2Zmc2V0ID0gcmVjdC5oZWlnaHQgLyAyO1xuICB9IGVsc2UgaWYgKHZlcnRpY2FsID09PSAnYm90dG9tJykge1xuICAgIG9mZnNldCA9IHJlY3QuaGVpZ2h0O1xuICB9XG5cbiAgcmV0dXJuIG9mZnNldDtcbn1cbmV4cG9ydCBmdW5jdGlvbiBnZXRPZmZzZXRMZWZ0KHJlY3QsIGhvcml6b250YWwpIHtcbiAgdmFyIG9mZnNldCA9IDA7XG5cbiAgaWYgKHR5cGVvZiBob3Jpem9udGFsID09PSAnbnVtYmVyJykge1xuICAgIG9mZnNldCA9IGhvcml6b250YWw7XG4gIH0gZWxzZSBpZiAoaG9yaXpvbnRhbCA9PT0gJ2NlbnRlcicpIHtcbiAgICBvZmZzZXQgPSByZWN0LndpZHRoIC8gMjtcbiAgfSBlbHNlIGlmIChob3Jpem9udGFsID09PSAncmlnaHQnKSB7XG4gICAgb2Zmc2V0ID0gcmVjdC53aWR0aDtcbiAgfVxuXG4gIHJldHVybiBvZmZzZXQ7XG59XG5cbmZ1bmN0aW9uIGdldFRyYW5zZm9ybU9yaWdpblZhbHVlKHRyYW5zZm9ybU9yaWdpbikge1xuICByZXR1cm4gW3RyYW5zZm9ybU9yaWdpbi5ob3Jpem9udGFsLCB0cmFuc2Zvcm1PcmlnaW4udmVydGljYWxdLm1hcChmdW5jdGlvbiAobikge1xuICAgIHJldHVybiB0eXBlb2YgbiA9PT0gJ251bWJlcicgPyBcIlwiLmNvbmNhdChuLCBcInB4XCIpIDogbjtcbiAgfSkuam9pbignICcpO1xufSAvLyBTdW0gdGhlIHNjcm9sbFRvcCBiZXR3ZWVuIHR3byBlbGVtZW50cy5cblxuXG5mdW5jdGlvbiBnZXRTY3JvbGxQYXJlbnQocGFyZW50LCBjaGlsZCkge1xuICB2YXIgZWxlbWVudCA9IGNoaWxkO1xuICB2YXIgc2Nyb2xsVG9wID0gMDtcblxuICB3aGlsZSAoZWxlbWVudCAmJiBlbGVtZW50ICE9PSBwYXJlbnQpIHtcbiAgICBlbGVtZW50ID0gZWxlbWVudC5wYXJlbnRFbGVtZW50O1xuICAgIHNjcm9sbFRvcCArPSBlbGVtZW50LnNjcm9sbFRvcDtcbiAgfVxuXG4gIHJldHVybiBzY3JvbGxUb3A7XG59XG5cbmZ1bmN0aW9uIGdldEFuY2hvckVsKGFuY2hvckVsKSB7XG4gIHJldHVybiB0eXBlb2YgYW5jaG9yRWwgPT09ICdmdW5jdGlvbicgPyBhbmNob3JFbCgpIDogYW5jaG9yRWw7XG59XG5cbmV4cG9ydCB2YXIgc3R5bGVzID0ge1xuICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50LiAqL1xuICByb290OiB7fSxcblxuICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgYFBhcGVyYCBjb21wb25lbnQuICovXG4gIHBhcGVyOiB7XG4gICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gICAgb3ZlcmZsb3dZOiAnYXV0bycsXG4gICAgb3ZlcmZsb3dYOiAnaGlkZGVuJyxcbiAgICAvLyBTbyB3ZSBzZWUgdGhlIHBvcG92ZXIgd2hlbiBpdCdzIGVtcHR5LlxuICAgIC8vIEl0J3MgbW9zdCBsaWtlbHkgb24gaXNzdWUgb24gdXNlcmxhbmQuXG4gICAgbWluV2lkdGg6IDE2LFxuICAgIG1pbkhlaWdodDogMTYsXG4gICAgbWF4V2lkdGg6ICdjYWxjKDEwMCUgLSAzMnB4KScsXG4gICAgbWF4SGVpZ2h0OiAnY2FsYygxMDAlIC0gMzJweCknLFxuICAgIC8vIFdlIGRpc2FibGUgdGhlIGZvY3VzIHJpbmcgZm9yIG1vdXNlLCB0b3VjaCBhbmQga2V5Ym9hcmQgdXNlcnMuXG4gICAgb3V0bGluZTogMFxuICB9XG59O1xudmFyIFBvcG92ZXIgPSAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBQb3BvdmVyKHByb3BzLCByZWYpIHtcbiAgdmFyIGFjdGlvbiA9IHByb3BzLmFjdGlvbixcbiAgICAgIGFuY2hvckVsID0gcHJvcHMuYW5jaG9yRWwsXG4gICAgICBfcHJvcHMkYW5jaG9yT3JpZ2luID0gcHJvcHMuYW5jaG9yT3JpZ2luLFxuICAgICAgYW5jaG9yT3JpZ2luID0gX3Byb3BzJGFuY2hvck9yaWdpbiA9PT0gdm9pZCAwID8ge1xuICAgIHZlcnRpY2FsOiAndG9wJyxcbiAgICBob3Jpem9udGFsOiAnbGVmdCdcbiAgfSA6IF9wcm9wcyRhbmNob3JPcmlnaW4sXG4gICAgICBhbmNob3JQb3NpdGlvbiA9IHByb3BzLmFuY2hvclBvc2l0aW9uLFxuICAgICAgX3Byb3BzJGFuY2hvclJlZmVyZW5jID0gcHJvcHMuYW5jaG9yUmVmZXJlbmNlLFxuICAgICAgYW5jaG9yUmVmZXJlbmNlID0gX3Byb3BzJGFuY2hvclJlZmVyZW5jID09PSB2b2lkIDAgPyAnYW5jaG9yRWwnIDogX3Byb3BzJGFuY2hvclJlZmVyZW5jLFxuICAgICAgY2hpbGRyZW4gPSBwcm9wcy5jaGlsZHJlbixcbiAgICAgIGNsYXNzZXMgPSBwcm9wcy5jbGFzc2VzLFxuICAgICAgY2xhc3NOYW1lID0gcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgY29udGFpbmVyUHJvcCA9IHByb3BzLmNvbnRhaW5lcixcbiAgICAgIF9wcm9wcyRlbGV2YXRpb24gPSBwcm9wcy5lbGV2YXRpb24sXG4gICAgICBlbGV2YXRpb24gPSBfcHJvcHMkZWxldmF0aW9uID09PSB2b2lkIDAgPyA4IDogX3Byb3BzJGVsZXZhdGlvbixcbiAgICAgIGdldENvbnRlbnRBbmNob3JFbCA9IHByb3BzLmdldENvbnRlbnRBbmNob3JFbCxcbiAgICAgIF9wcm9wcyRtYXJnaW5UaHJlc2hvbCA9IHByb3BzLm1hcmdpblRocmVzaG9sZCxcbiAgICAgIG1hcmdpblRocmVzaG9sZCA9IF9wcm9wcyRtYXJnaW5UaHJlc2hvbCA9PT0gdm9pZCAwID8gMTYgOiBfcHJvcHMkbWFyZ2luVGhyZXNob2wsXG4gICAgICBvbkVudGVyID0gcHJvcHMub25FbnRlcixcbiAgICAgIG9uRW50ZXJlZCA9IHByb3BzLm9uRW50ZXJlZCxcbiAgICAgIG9uRW50ZXJpbmcgPSBwcm9wcy5vbkVudGVyaW5nLFxuICAgICAgb25FeGl0ID0gcHJvcHMub25FeGl0LFxuICAgICAgb25FeGl0ZWQgPSBwcm9wcy5vbkV4aXRlZCxcbiAgICAgIG9uRXhpdGluZyA9IHByb3BzLm9uRXhpdGluZyxcbiAgICAgIG9wZW4gPSBwcm9wcy5vcGVuLFxuICAgICAgX3Byb3BzJFBhcGVyUHJvcHMgPSBwcm9wcy5QYXBlclByb3BzLFxuICAgICAgUGFwZXJQcm9wcyA9IF9wcm9wcyRQYXBlclByb3BzID09PSB2b2lkIDAgPyB7fSA6IF9wcm9wcyRQYXBlclByb3BzLFxuICAgICAgX3Byb3BzJHRyYW5zZm9ybU9yaWdpID0gcHJvcHMudHJhbnNmb3JtT3JpZ2luLFxuICAgICAgdHJhbnNmb3JtT3JpZ2luID0gX3Byb3BzJHRyYW5zZm9ybU9yaWdpID09PSB2b2lkIDAgPyB7XG4gICAgdmVydGljYWw6ICd0b3AnLFxuICAgIGhvcml6b250YWw6ICdsZWZ0J1xuICB9IDogX3Byb3BzJHRyYW5zZm9ybU9yaWdpLFxuICAgICAgX3Byb3BzJFRyYW5zaXRpb25Db21wID0gcHJvcHMuVHJhbnNpdGlvbkNvbXBvbmVudCxcbiAgICAgIFRyYW5zaXRpb25Db21wb25lbnQgPSBfcHJvcHMkVHJhbnNpdGlvbkNvbXAgPT09IHZvaWQgMCA/IEdyb3cgOiBfcHJvcHMkVHJhbnNpdGlvbkNvbXAsXG4gICAgICBfcHJvcHMkdHJhbnNpdGlvbkR1cmEgPSBwcm9wcy50cmFuc2l0aW9uRHVyYXRpb24sXG4gICAgICB0cmFuc2l0aW9uRHVyYXRpb25Qcm9wID0gX3Byb3BzJHRyYW5zaXRpb25EdXJhID09PSB2b2lkIDAgPyAnYXV0bycgOiBfcHJvcHMkdHJhbnNpdGlvbkR1cmEsXG4gICAgICBfcHJvcHMkVHJhbnNpdGlvblByb3AgPSBwcm9wcy5UcmFuc2l0aW9uUHJvcHMsXG4gICAgICBUcmFuc2l0aW9uUHJvcHMgPSBfcHJvcHMkVHJhbnNpdGlvblByb3AgPT09IHZvaWQgMCA/IHt9IDogX3Byb3BzJFRyYW5zaXRpb25Qcm9wLFxuICAgICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMocHJvcHMsIFtcImFjdGlvblwiLCBcImFuY2hvckVsXCIsIFwiYW5jaG9yT3JpZ2luXCIsIFwiYW5jaG9yUG9zaXRpb25cIiwgXCJhbmNob3JSZWZlcmVuY2VcIiwgXCJjaGlsZHJlblwiLCBcImNsYXNzZXNcIiwgXCJjbGFzc05hbWVcIiwgXCJjb250YWluZXJcIiwgXCJlbGV2YXRpb25cIiwgXCJnZXRDb250ZW50QW5jaG9yRWxcIiwgXCJtYXJnaW5UaHJlc2hvbGRcIiwgXCJvbkVudGVyXCIsIFwib25FbnRlcmVkXCIsIFwib25FbnRlcmluZ1wiLCBcIm9uRXhpdFwiLCBcIm9uRXhpdGVkXCIsIFwib25FeGl0aW5nXCIsIFwib3BlblwiLCBcIlBhcGVyUHJvcHNcIiwgXCJ0cmFuc2Zvcm1PcmlnaW5cIiwgXCJUcmFuc2l0aW9uQ29tcG9uZW50XCIsIFwidHJhbnNpdGlvbkR1cmF0aW9uXCIsIFwiVHJhbnNpdGlvblByb3BzXCJdKTtcblxuICB2YXIgcGFwZXJSZWYgPSBSZWFjdC51c2VSZWYoKTsgLy8gUmV0dXJucyB0aGUgdG9wL2xlZnQgb2Zmc2V0IG9mIHRoZSBwb3NpdGlvblxuICAvLyB0byBhdHRhY2ggdG8gb24gdGhlIGFuY2hvciBlbGVtZW50IChvciBib2R5IGlmIG5vbmUgaXMgcHJvdmlkZWQpXG5cbiAgdmFyIGdldEFuY2hvck9mZnNldCA9IFJlYWN0LnVzZUNhbGxiYWNrKGZ1bmN0aW9uIChjb250ZW50QW5jaG9yT2Zmc2V0KSB7XG4gICAgaWYgKGFuY2hvclJlZmVyZW5jZSA9PT0gJ2FuY2hvclBvc2l0aW9uJykge1xuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgaWYgKCFhbmNob3JQb3NpdGlvbikge1xuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ01hdGVyaWFsLVVJOiBZb3UgbmVlZCB0byBwcm92aWRlIGEgYGFuY2hvclBvc2l0aW9uYCBwcm9wIHdoZW4gdXNpbmcgJyArICc8UG9wb3ZlciBhbmNob3JSZWZlcmVuY2U9XCJhbmNob3JQb3NpdGlvblwiIC8+LicpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBhbmNob3JQb3NpdGlvbjtcbiAgICB9XG5cbiAgICB2YXIgcmVzb2x2ZWRBbmNob3JFbCA9IGdldEFuY2hvckVsKGFuY2hvckVsKTsgLy8gSWYgYW4gYW5jaG9yIGVsZW1lbnQgd2Fzbid0IHByb3ZpZGVkLCBqdXN0IHVzZSB0aGUgcGFyZW50IGJvZHkgZWxlbWVudCBvZiB0aGlzIFBvcG92ZXJcblxuICAgIHZhciBhbmNob3JFbGVtZW50ID0gcmVzb2x2ZWRBbmNob3JFbCAmJiByZXNvbHZlZEFuY2hvckVsLm5vZGVUeXBlID09PSAxID8gcmVzb2x2ZWRBbmNob3JFbCA6IG93bmVyRG9jdW1lbnQocGFwZXJSZWYuY3VycmVudCkuYm9keTtcbiAgICB2YXIgYW5jaG9yUmVjdCA9IGFuY2hvckVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG5cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgdmFyIGJveCA9IGFuY2hvckVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG5cbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Rlc3QnICYmIGJveC50b3AgPT09IDAgJiYgYm94LmxlZnQgPT09IDAgJiYgYm94LnJpZ2h0ID09PSAwICYmIGJveC5ib3R0b20gPT09IDApIHtcbiAgICAgICAgY29uc29sZS53YXJuKFsnTWF0ZXJpYWwtVUk6IFRoZSBgYW5jaG9yRWxgIHByb3AgcHJvdmlkZWQgdG8gdGhlIGNvbXBvbmVudCBpcyBpbnZhbGlkLicsICdUaGUgYW5jaG9yIGVsZW1lbnQgc2hvdWxkIGJlIHBhcnQgb2YgdGhlIGRvY3VtZW50IGxheW91dC4nLCBcIk1ha2Ugc3VyZSB0aGUgZWxlbWVudCBpcyBwcmVzZW50IGluIHRoZSBkb2N1bWVudCBvciB0aGF0IGl0J3Mgbm90IGRpc3BsYXkgbm9uZS5cIl0uam9pbignXFxuJykpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhciBhbmNob3JWZXJ0aWNhbCA9IGNvbnRlbnRBbmNob3JPZmZzZXQgPT09IDAgPyBhbmNob3JPcmlnaW4udmVydGljYWwgOiAnY2VudGVyJztcbiAgICByZXR1cm4ge1xuICAgICAgdG9wOiBhbmNob3JSZWN0LnRvcCArIGdldE9mZnNldFRvcChhbmNob3JSZWN0LCBhbmNob3JWZXJ0aWNhbCksXG4gICAgICBsZWZ0OiBhbmNob3JSZWN0LmxlZnQgKyBnZXRPZmZzZXRMZWZ0KGFuY2hvclJlY3QsIGFuY2hvck9yaWdpbi5ob3Jpem9udGFsKVxuICAgIH07XG4gIH0sIFthbmNob3JFbCwgYW5jaG9yT3JpZ2luLmhvcml6b250YWwsIGFuY2hvck9yaWdpbi52ZXJ0aWNhbCwgYW5jaG9yUG9zaXRpb24sIGFuY2hvclJlZmVyZW5jZV0pOyAvLyBSZXR1cm5zIHRoZSB2ZXJ0aWNhbCBvZmZzZXQgb2YgaW5uZXIgY29udGVudCB0byBhbmNob3IgdGhlIHRyYW5zZm9ybSBvbiBpZiBwcm92aWRlZFxuXG4gIHZhciBnZXRDb250ZW50QW5jaG9yT2Zmc2V0ID0gUmVhY3QudXNlQ2FsbGJhY2soZnVuY3Rpb24gKGVsZW1lbnQpIHtcbiAgICB2YXIgY29udGVudEFuY2hvck9mZnNldCA9IDA7XG5cbiAgICBpZiAoZ2V0Q29udGVudEFuY2hvckVsICYmIGFuY2hvclJlZmVyZW5jZSA9PT0gJ2FuY2hvckVsJykge1xuICAgICAgdmFyIGNvbnRlbnRBbmNob3JFbCA9IGdldENvbnRlbnRBbmNob3JFbChlbGVtZW50KTtcblxuICAgICAgaWYgKGNvbnRlbnRBbmNob3JFbCAmJiBlbGVtZW50LmNvbnRhaW5zKGNvbnRlbnRBbmNob3JFbCkpIHtcbiAgICAgICAgdmFyIHNjcm9sbFRvcCA9IGdldFNjcm9sbFBhcmVudChlbGVtZW50LCBjb250ZW50QW5jaG9yRWwpO1xuICAgICAgICBjb250ZW50QW5jaG9yT2Zmc2V0ID0gY29udGVudEFuY2hvckVsLm9mZnNldFRvcCArIGNvbnRlbnRBbmNob3JFbC5jbGllbnRIZWlnaHQgLyAyIC0gc2Nyb2xsVG9wIHx8IDA7XG4gICAgICB9IC8vICE9IHRoZSBkZWZhdWx0IHZhbHVlXG5cblxuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgaWYgKGFuY2hvck9yaWdpbi52ZXJ0aWNhbCAhPT0gJ3RvcCcpIHtcbiAgICAgICAgICBjb25zb2xlLmVycm9yKFsnTWF0ZXJpYWwtVUk6IFlvdSBjYW4gbm90IGNoYW5nZSB0aGUgZGVmYXVsdCBgYW5jaG9yT3JpZ2luLnZlcnRpY2FsYCB2YWx1ZSAnLCAnd2hlbiBhbHNvIHByb3ZpZGluZyB0aGUgYGdldENvbnRlbnRBbmNob3JFbGAgcHJvcCB0byB0aGUgcG9wb3ZlciBjb21wb25lbnQuJywgJ09ubHkgdXNlIG9uZSBvZiB0aGUgdHdvIHByb3BzLicsICdTZXQgYGdldENvbnRlbnRBbmNob3JFbGAgdG8gYG51bGwgfCB1bmRlZmluZWRgJyArICcgb3IgbGVhdmUgYGFuY2hvck9yaWdpbi52ZXJ0aWNhbGAgdW5jaGFuZ2VkLiddLmpvaW4oJ1xcbicpKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBjb250ZW50QW5jaG9yT2Zmc2V0O1xuICB9LCBbYW5jaG9yT3JpZ2luLnZlcnRpY2FsLCBhbmNob3JSZWZlcmVuY2UsIGdldENvbnRlbnRBbmNob3JFbF0pOyAvLyBSZXR1cm4gdGhlIGJhc2UgdHJhbnNmb3JtIG9yaWdpbiB1c2luZyB0aGUgZWxlbWVudFxuICAvLyBhbmQgdGFraW5nIHRoZSBjb250ZW50IGFuY2hvciBvZmZzZXQgaW50byBhY2NvdW50IGlmIGluIHVzZVxuXG4gIHZhciBnZXRUcmFuc2Zvcm1PcmlnaW4gPSBSZWFjdC51c2VDYWxsYmFjayhmdW5jdGlvbiAoZWxlbVJlY3QpIHtcbiAgICB2YXIgY29udGVudEFuY2hvck9mZnNldCA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogMDtcbiAgICByZXR1cm4ge1xuICAgICAgdmVydGljYWw6IGdldE9mZnNldFRvcChlbGVtUmVjdCwgdHJhbnNmb3JtT3JpZ2luLnZlcnRpY2FsKSArIGNvbnRlbnRBbmNob3JPZmZzZXQsXG4gICAgICBob3Jpem9udGFsOiBnZXRPZmZzZXRMZWZ0KGVsZW1SZWN0LCB0cmFuc2Zvcm1PcmlnaW4uaG9yaXpvbnRhbClcbiAgICB9O1xuICB9LCBbdHJhbnNmb3JtT3JpZ2luLmhvcml6b250YWwsIHRyYW5zZm9ybU9yaWdpbi52ZXJ0aWNhbF0pO1xuICB2YXIgZ2V0UG9zaXRpb25pbmdTdHlsZSA9IFJlYWN0LnVzZUNhbGxiYWNrKGZ1bmN0aW9uIChlbGVtZW50KSB7XG4gICAgLy8gQ2hlY2sgaWYgdGhlIHBhcmVudCBoYXMgcmVxdWVzdGVkIGFuY2hvcmluZyBvbiBhbiBpbm5lciBjb250ZW50IG5vZGVcbiAgICB2YXIgY29udGVudEFuY2hvck9mZnNldCA9IGdldENvbnRlbnRBbmNob3JPZmZzZXQoZWxlbWVudCk7XG4gICAgdmFyIGVsZW1SZWN0ID0ge1xuICAgICAgd2lkdGg6IGVsZW1lbnQub2Zmc2V0V2lkdGgsXG4gICAgICBoZWlnaHQ6IGVsZW1lbnQub2Zmc2V0SGVpZ2h0XG4gICAgfTsgLy8gR2V0IHRoZSB0cmFuc2Zvcm0gb3JpZ2luIHBvaW50IG9uIHRoZSBlbGVtZW50IGl0c2VsZlxuXG4gICAgdmFyIGVsZW1UcmFuc2Zvcm1PcmlnaW4gPSBnZXRUcmFuc2Zvcm1PcmlnaW4oZWxlbVJlY3QsIGNvbnRlbnRBbmNob3JPZmZzZXQpO1xuXG4gICAgaWYgKGFuY2hvclJlZmVyZW5jZSA9PT0gJ25vbmUnKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICB0b3A6IG51bGwsXG4gICAgICAgIGxlZnQ6IG51bGwsXG4gICAgICAgIHRyYW5zZm9ybU9yaWdpbjogZ2V0VHJhbnNmb3JtT3JpZ2luVmFsdWUoZWxlbVRyYW5zZm9ybU9yaWdpbilcbiAgICAgIH07XG4gICAgfSAvLyBHZXQgdGhlIG9mZnNldCBvZiBvZiB0aGUgYW5jaG9yaW5nIGVsZW1lbnRcblxuXG4gICAgdmFyIGFuY2hvck9mZnNldCA9IGdldEFuY2hvck9mZnNldChjb250ZW50QW5jaG9yT2Zmc2V0KTsgLy8gQ2FsY3VsYXRlIGVsZW1lbnQgcG9zaXRpb25pbmdcblxuICAgIHZhciB0b3AgPSBhbmNob3JPZmZzZXQudG9wIC0gZWxlbVRyYW5zZm9ybU9yaWdpbi52ZXJ0aWNhbDtcbiAgICB2YXIgbGVmdCA9IGFuY2hvck9mZnNldC5sZWZ0IC0gZWxlbVRyYW5zZm9ybU9yaWdpbi5ob3Jpem9udGFsO1xuICAgIHZhciBib3R0b20gPSB0b3AgKyBlbGVtUmVjdC5oZWlnaHQ7XG4gICAgdmFyIHJpZ2h0ID0gbGVmdCArIGVsZW1SZWN0LndpZHRoOyAvLyBVc2UgdGhlIHBhcmVudCB3aW5kb3cgb2YgdGhlIGFuY2hvckVsIGlmIHByb3ZpZGVkXG5cbiAgICB2YXIgY29udGFpbmVyV2luZG93ID0gb3duZXJXaW5kb3coZ2V0QW5jaG9yRWwoYW5jaG9yRWwpKTsgLy8gV2luZG93IHRocmVzaG9sZHMgdGFraW5nIHJlcXVpcmVkIG1hcmdpbiBpbnRvIGFjY291bnRcblxuICAgIHZhciBoZWlnaHRUaHJlc2hvbGQgPSBjb250YWluZXJXaW5kb3cuaW5uZXJIZWlnaHQgLSBtYXJnaW5UaHJlc2hvbGQ7XG4gICAgdmFyIHdpZHRoVGhyZXNob2xkID0gY29udGFpbmVyV2luZG93LmlubmVyV2lkdGggLSBtYXJnaW5UaHJlc2hvbGQ7IC8vIENoZWNrIGlmIHRoZSB2ZXJ0aWNhbCBheGlzIG5lZWRzIHNoaWZ0aW5nXG5cbiAgICBpZiAodG9wIDwgbWFyZ2luVGhyZXNob2xkKSB7XG4gICAgICB2YXIgZGlmZiA9IHRvcCAtIG1hcmdpblRocmVzaG9sZDtcbiAgICAgIHRvcCAtPSBkaWZmO1xuICAgICAgZWxlbVRyYW5zZm9ybU9yaWdpbi52ZXJ0aWNhbCArPSBkaWZmO1xuICAgIH0gZWxzZSBpZiAoYm90dG9tID4gaGVpZ2h0VGhyZXNob2xkKSB7XG4gICAgICB2YXIgX2RpZmYgPSBib3R0b20gLSBoZWlnaHRUaHJlc2hvbGQ7XG5cbiAgICAgIHRvcCAtPSBfZGlmZjtcbiAgICAgIGVsZW1UcmFuc2Zvcm1PcmlnaW4udmVydGljYWwgKz0gX2RpZmY7XG4gICAgfVxuXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIGlmIChlbGVtUmVjdC5oZWlnaHQgPiBoZWlnaHRUaHJlc2hvbGQgJiYgZWxlbVJlY3QuaGVpZ2h0ICYmIGhlaWdodFRocmVzaG9sZCkge1xuICAgICAgICBjb25zb2xlLmVycm9yKFsnTWF0ZXJpYWwtVUk6IFRoZSBwb3BvdmVyIGNvbXBvbmVudCBpcyB0b28gdGFsbC4nLCBcIlNvbWUgcGFydCBvZiBpdCBjYW4gbm90IGJlIHNlZW4gb24gdGhlIHNjcmVlbiAoXCIuY29uY2F0KGVsZW1SZWN0LmhlaWdodCAtIGhlaWdodFRocmVzaG9sZCwgXCJweCkuXCIpLCAnUGxlYXNlIGNvbnNpZGVyIGFkZGluZyBhIGBtYXgtaGVpZ2h0YCB0byBpbXByb3ZlIHRoZSB1c2VyLWV4cGVyaWVuY2UuJ10uam9pbignXFxuJykpO1xuICAgICAgfVxuICAgIH0gLy8gQ2hlY2sgaWYgdGhlIGhvcml6b250YWwgYXhpcyBuZWVkcyBzaGlmdGluZ1xuXG5cbiAgICBpZiAobGVmdCA8IG1hcmdpblRocmVzaG9sZCkge1xuICAgICAgdmFyIF9kaWZmMiA9IGxlZnQgLSBtYXJnaW5UaHJlc2hvbGQ7XG5cbiAgICAgIGxlZnQgLT0gX2RpZmYyO1xuICAgICAgZWxlbVRyYW5zZm9ybU9yaWdpbi5ob3Jpem9udGFsICs9IF9kaWZmMjtcbiAgICB9IGVsc2UgaWYgKHJpZ2h0ID4gd2lkdGhUaHJlc2hvbGQpIHtcbiAgICAgIHZhciBfZGlmZjMgPSByaWdodCAtIHdpZHRoVGhyZXNob2xkO1xuXG4gICAgICBsZWZ0IC09IF9kaWZmMztcbiAgICAgIGVsZW1UcmFuc2Zvcm1PcmlnaW4uaG9yaXpvbnRhbCArPSBfZGlmZjM7XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgIHRvcDogXCJcIi5jb25jYXQoTWF0aC5yb3VuZCh0b3ApLCBcInB4XCIpLFxuICAgICAgbGVmdDogXCJcIi5jb25jYXQoTWF0aC5yb3VuZChsZWZ0KSwgXCJweFwiKSxcbiAgICAgIHRyYW5zZm9ybU9yaWdpbjogZ2V0VHJhbnNmb3JtT3JpZ2luVmFsdWUoZWxlbVRyYW5zZm9ybU9yaWdpbilcbiAgICB9O1xuICB9LCBbYW5jaG9yRWwsIGFuY2hvclJlZmVyZW5jZSwgZ2V0QW5jaG9yT2Zmc2V0LCBnZXRDb250ZW50QW5jaG9yT2Zmc2V0LCBnZXRUcmFuc2Zvcm1PcmlnaW4sIG1hcmdpblRocmVzaG9sZF0pO1xuICB2YXIgc2V0UG9zaXRpb25pbmdTdHlsZXMgPSBSZWFjdC51c2VDYWxsYmFjayhmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGVsZW1lbnQgPSBwYXBlclJlZi5jdXJyZW50O1xuXG4gICAgaWYgKCFlbGVtZW50KSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIHBvc2l0aW9uaW5nID0gZ2V0UG9zaXRpb25pbmdTdHlsZShlbGVtZW50KTtcblxuICAgIGlmIChwb3NpdGlvbmluZy50b3AgIT09IG51bGwpIHtcbiAgICAgIGVsZW1lbnQuc3R5bGUudG9wID0gcG9zaXRpb25pbmcudG9wO1xuICAgIH1cblxuICAgIGlmIChwb3NpdGlvbmluZy5sZWZ0ICE9PSBudWxsKSB7XG4gICAgICBlbGVtZW50LnN0eWxlLmxlZnQgPSBwb3NpdGlvbmluZy5sZWZ0O1xuICAgIH1cblxuICAgIGVsZW1lbnQuc3R5bGUudHJhbnNmb3JtT3JpZ2luID0gcG9zaXRpb25pbmcudHJhbnNmb3JtT3JpZ2luO1xuICB9LCBbZ2V0UG9zaXRpb25pbmdTdHlsZV0pO1xuXG4gIHZhciBoYW5kbGVFbnRlcmluZyA9IGZ1bmN0aW9uIGhhbmRsZUVudGVyaW5nKGVsZW1lbnQsIGlzQXBwZWFyaW5nKSB7XG4gICAgaWYgKG9uRW50ZXJpbmcpIHtcbiAgICAgIG9uRW50ZXJpbmcoZWxlbWVudCwgaXNBcHBlYXJpbmcpO1xuICAgIH1cblxuICAgIHNldFBvc2l0aW9uaW5nU3R5bGVzKCk7XG4gIH07XG5cbiAgdmFyIGhhbmRsZVBhcGVyUmVmID0gUmVhY3QudXNlQ2FsbGJhY2soZnVuY3Rpb24gKGluc3RhbmNlKSB7XG4gICAgLy8gI1N0cmljdE1vZGUgcmVhZHlcbiAgICBwYXBlclJlZi5jdXJyZW50ID0gUmVhY3RET00uZmluZERPTU5vZGUoaW5zdGFuY2UpO1xuICB9LCBbXSk7XG4gIFJlYWN0LnVzZUVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgaWYgKG9wZW4pIHtcbiAgICAgIHNldFBvc2l0aW9uaW5nU3R5bGVzKCk7XG4gICAgfVxuICB9KTtcbiAgUmVhY3QudXNlSW1wZXJhdGl2ZUhhbmRsZShhY3Rpb24sIGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gb3BlbiA/IHtcbiAgICAgIHVwZGF0ZVBvc2l0aW9uOiBmdW5jdGlvbiB1cGRhdGVQb3NpdGlvbigpIHtcbiAgICAgICAgc2V0UG9zaXRpb25pbmdTdHlsZXMoKTtcbiAgICAgIH1cbiAgICB9IDogbnVsbDtcbiAgfSwgW29wZW4sIHNldFBvc2l0aW9uaW5nU3R5bGVzXSk7XG4gIFJlYWN0LnVzZUVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgaWYgKCFvcGVuKSB7XG4gICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIHZhciBoYW5kbGVSZXNpemUgPSBkZWJvdW5jZShmdW5jdGlvbiAoKSB7XG4gICAgICBzZXRQb3NpdGlvbmluZ1N0eWxlcygpO1xuICAgIH0pO1xuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdyZXNpemUnLCBoYW5kbGVSZXNpemUpO1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICBoYW5kbGVSZXNpemUuY2xlYXIoKTtcbiAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdyZXNpemUnLCBoYW5kbGVSZXNpemUpO1xuICAgIH07XG4gIH0sIFtvcGVuLCBzZXRQb3NpdGlvbmluZ1N0eWxlc10pO1xuICB2YXIgdHJhbnNpdGlvbkR1cmF0aW9uID0gdHJhbnNpdGlvbkR1cmF0aW9uUHJvcDtcblxuICBpZiAodHJhbnNpdGlvbkR1cmF0aW9uUHJvcCA9PT0gJ2F1dG8nICYmICFUcmFuc2l0aW9uQ29tcG9uZW50Lm11aVN1cHBvcnRBdXRvKSB7XG4gICAgdHJhbnNpdGlvbkR1cmF0aW9uID0gdW5kZWZpbmVkO1xuICB9IC8vIElmIHRoZSBjb250YWluZXIgcHJvcCBpcyBwcm92aWRlZCwgdXNlIHRoYXRcbiAgLy8gSWYgdGhlIGFuY2hvckVsIHByb3AgaXMgcHJvdmlkZWQsIHVzZSBpdHMgcGFyZW50IGJvZHkgZWxlbWVudCBhcyB0aGUgY29udGFpbmVyXG4gIC8vIElmIG5laXRoZXIgYXJlIHByb3ZpZGVkIGxldCB0aGUgTW9kYWwgdGFrZSBjYXJlIG9mIGNob29zaW5nIHRoZSBjb250YWluZXJcblxuXG4gIHZhciBjb250YWluZXIgPSBjb250YWluZXJQcm9wIHx8IChhbmNob3JFbCA/IG93bmVyRG9jdW1lbnQoZ2V0QW5jaG9yRWwoYW5jaG9yRWwpKS5ib2R5IDogdW5kZWZpbmVkKTtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KE1vZGFsLCBfZXh0ZW5kcyh7XG4gICAgY29udGFpbmVyOiBjb250YWluZXIsXG4gICAgb3Blbjogb3BlbixcbiAgICByZWY6IHJlZixcbiAgICBCYWNrZHJvcFByb3BzOiB7XG4gICAgICBpbnZpc2libGU6IHRydWVcbiAgICB9LFxuICAgIGNsYXNzTmFtZTogY2xzeChjbGFzc2VzLnJvb3QsIGNsYXNzTmFtZSlcbiAgfSwgb3RoZXIpLCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChUcmFuc2l0aW9uQ29tcG9uZW50LCBfZXh0ZW5kcyh7XG4gICAgYXBwZWFyOiB0cnVlLFxuICAgIGluOiBvcGVuLFxuICAgIG9uRW50ZXI6IG9uRW50ZXIsXG4gICAgb25FbnRlcmVkOiBvbkVudGVyZWQsXG4gICAgb25FeGl0OiBvbkV4aXQsXG4gICAgb25FeGl0ZWQ6IG9uRXhpdGVkLFxuICAgIG9uRXhpdGluZzogb25FeGl0aW5nLFxuICAgIHRpbWVvdXQ6IHRyYW5zaXRpb25EdXJhdGlvblxuICB9LCBUcmFuc2l0aW9uUHJvcHMsIHtcbiAgICBvbkVudGVyaW5nOiBjcmVhdGVDaGFpbmVkRnVuY3Rpb24oaGFuZGxlRW50ZXJpbmcsIFRyYW5zaXRpb25Qcm9wcy5vbkVudGVyaW5nKVxuICB9KSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoUGFwZXIsIF9leHRlbmRzKHtcbiAgICBlbGV2YXRpb246IGVsZXZhdGlvbixcbiAgICByZWY6IGhhbmRsZVBhcGVyUmVmXG4gIH0sIFBhcGVyUHJvcHMsIHtcbiAgICBjbGFzc05hbWU6IGNsc3goY2xhc3Nlcy5wYXBlciwgUGFwZXJQcm9wcy5jbGFzc05hbWUpXG4gIH0pLCBjaGlsZHJlbikpKTtcbn0pO1xucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gUG9wb3Zlci5wcm9wVHlwZXMgPSB7XG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIFdhcm5pbmcgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgLy8gfCBUaGVzZSBQcm9wVHlwZXMgYXJlIGdlbmVyYXRlZCBmcm9tIHRoZSBUeXBlU2NyaXB0IHR5cGUgZGVmaW5pdGlvbnMgfFxuICAvLyB8ICAgICBUbyB1cGRhdGUgdGhlbSBlZGl0IHRoZSBkLnRzIGZpbGUgYW5kIHJ1biBcInlhcm4gcHJvcHR5cGVzXCIgICAgIHxcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4gIC8qKlxuICAgKiBBIHJlZiBmb3IgaW1wZXJhdGl2ZSBhY3Rpb25zLlxuICAgKiBJdCBjdXJyZW50bHkgb25seSBzdXBwb3J0cyB1cGRhdGVQb3NpdGlvbigpIGFjdGlvbi5cbiAgICovXG4gIGFjdGlvbjogcmVmVHlwZSxcblxuICAvKipcbiAgICogQSBIVE1MIGVsZW1lbnQsIG9yIGEgZnVuY3Rpb24gdGhhdCByZXR1cm5zIGl0LlxuICAgKiBJdCdzIHVzZWQgdG8gc2V0IHRoZSBwb3NpdGlvbiBvZiB0aGUgcG9wb3Zlci5cbiAgICovXG4gIGFuY2hvckVsOiBjaGFpblByb3BUeXBlcyhQcm9wVHlwZXMub25lT2ZUeXBlKFtIVE1MRWxlbWVudFR5cGUsIFByb3BUeXBlcy5mdW5jXSksIGZ1bmN0aW9uIChwcm9wcykge1xuICAgIGlmIChwcm9wcy5vcGVuICYmICghcHJvcHMuYW5jaG9yUmVmZXJlbmNlIHx8IHByb3BzLmFuY2hvclJlZmVyZW5jZSA9PT0gJ2FuY2hvckVsJykpIHtcbiAgICAgIHZhciByZXNvbHZlZEFuY2hvckVsID0gZ2V0QW5jaG9yRWwocHJvcHMuYW5jaG9yRWwpO1xuXG4gICAgICBpZiAocmVzb2x2ZWRBbmNob3JFbCAmJiByZXNvbHZlZEFuY2hvckVsLm5vZGVUeXBlID09PSAxKSB7XG4gICAgICAgIHZhciBib3ggPSByZXNvbHZlZEFuY2hvckVsLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuXG4gICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Rlc3QnICYmIGJveC50b3AgPT09IDAgJiYgYm94LmxlZnQgPT09IDAgJiYgYm94LnJpZ2h0ID09PSAwICYmIGJveC5ib3R0b20gPT09IDApIHtcbiAgICAgICAgICByZXR1cm4gbmV3IEVycm9yKFsnTWF0ZXJpYWwtVUk6IFRoZSBgYW5jaG9yRWxgIHByb3AgcHJvdmlkZWQgdG8gdGhlIGNvbXBvbmVudCBpcyBpbnZhbGlkLicsICdUaGUgYW5jaG9yIGVsZW1lbnQgc2hvdWxkIGJlIHBhcnQgb2YgdGhlIGRvY3VtZW50IGxheW91dC4nLCBcIk1ha2Ugc3VyZSB0aGUgZWxlbWVudCBpcyBwcmVzZW50IGluIHRoZSBkb2N1bWVudCBvciB0aGF0IGl0J3Mgbm90IGRpc3BsYXkgbm9uZS5cIl0uam9pbignXFxuJykpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gbmV3IEVycm9yKFsnTWF0ZXJpYWwtVUk6IFRoZSBgYW5jaG9yRWxgIHByb3AgcHJvdmlkZWQgdG8gdGhlIGNvbXBvbmVudCBpcyBpbnZhbGlkLicsIFwiSXQgc2hvdWxkIGJlIGFuIEVsZW1lbnQgaW5zdGFuY2UgYnV0IGl0J3MgYFwiLmNvbmNhdChyZXNvbHZlZEFuY2hvckVsLCBcImAgaW5zdGVhZC5cIildLmpvaW4oJ1xcbicpKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gbnVsbDtcbiAgfSksXG5cbiAgLyoqXG4gICAqIFRoaXMgaXMgdGhlIHBvaW50IG9uIHRoZSBhbmNob3Igd2hlcmUgdGhlIHBvcG92ZXInc1xuICAgKiBgYW5jaG9yRWxgIHdpbGwgYXR0YWNoIHRvLiBUaGlzIGlzIG5vdCB1c2VkIHdoZW4gdGhlXG4gICAqIGFuY2hvclJlZmVyZW5jZSBpcyAnYW5jaG9yUG9zaXRpb24nLlxuICAgKlxuICAgKiBPcHRpb25zOlxuICAgKiB2ZXJ0aWNhbDogW3RvcCwgY2VudGVyLCBib3R0b21dO1xuICAgKiBob3Jpem9udGFsOiBbbGVmdCwgY2VudGVyLCByaWdodF0uXG4gICAqL1xuICBhbmNob3JPcmlnaW46IFByb3BUeXBlcy5zaGFwZSh7XG4gICAgaG9yaXpvbnRhbDogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLm9uZU9mKFsnY2VudGVyJywgJ2xlZnQnLCAncmlnaHQnXSksIFByb3BUeXBlcy5udW1iZXJdKS5pc1JlcXVpcmVkLFxuICAgIHZlcnRpY2FsOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMub25lT2YoWydib3R0b20nLCAnY2VudGVyJywgJ3RvcCddKSwgUHJvcFR5cGVzLm51bWJlcl0pLmlzUmVxdWlyZWRcbiAgfSksXG5cbiAgLyoqXG4gICAqIFRoaXMgaXMgdGhlIHBvc2l0aW9uIHRoYXQgbWF5IGJlIHVzZWRcbiAgICogdG8gc2V0IHRoZSBwb3NpdGlvbiBvZiB0aGUgcG9wb3Zlci5cbiAgICogVGhlIGNvb3JkaW5hdGVzIGFyZSByZWxhdGl2ZSB0b1xuICAgKiB0aGUgYXBwbGljYXRpb24ncyBjbGllbnQgYXJlYS5cbiAgICovXG4gIGFuY2hvclBvc2l0aW9uOiBQcm9wVHlwZXMuc2hhcGUoe1xuICAgIGxlZnQ6IFByb3BUeXBlcy5udW1iZXIuaXNSZXF1aXJlZCxcbiAgICB0b3A6IFByb3BUeXBlcy5udW1iZXIuaXNSZXF1aXJlZFxuICB9KSxcblxuICAvKipcbiAgICogVGhpcyBkZXRlcm1pbmVzIHdoaWNoIGFuY2hvciBwcm9wIHRvIHJlZmVyIHRvIHRvIHNldFxuICAgKiB0aGUgcG9zaXRpb24gb2YgdGhlIHBvcG92ZXIuXG4gICAqL1xuICBhbmNob3JSZWZlcmVuY2U6IFByb3BUeXBlcy5vbmVPZihbJ2FuY2hvckVsJywgJ2FuY2hvclBvc2l0aW9uJywgJ25vbmUnXSksXG5cbiAgLyoqXG4gICAqIFRoZSBjb250ZW50IG9mIHRoZSBjb21wb25lbnQuXG4gICAqL1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG5cbiAgLyoqXG4gICAqIE92ZXJyaWRlIG9yIGV4dGVuZCB0aGUgc3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICogU2VlIFtDU1MgQVBJXSgjY3NzKSBiZWxvdyBmb3IgbW9yZSBkZXRhaWxzLlxuICAgKi9cbiAgY2xhc3NlczogUHJvcFR5cGVzLm9iamVjdCxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBBIEhUTUwgZWxlbWVudCwgY29tcG9uZW50IGluc3RhbmNlLCBvciBmdW5jdGlvbiB0aGF0IHJldHVybnMgZWl0aGVyLlxuICAgKiBUaGUgYGNvbnRhaW5lcmAgd2lsbCBwYXNzZWQgdG8gdGhlIE1vZGFsIGNvbXBvbmVudC5cbiAgICpcbiAgICogQnkgZGVmYXVsdCwgaXQgdXNlcyB0aGUgYm9keSBvZiB0aGUgYW5jaG9yRWwncyB0b3AtbGV2ZWwgZG9jdW1lbnQgb2JqZWN0LFxuICAgKiBzbyBpdCdzIHNpbXBseSBgZG9jdW1lbnQuYm9keWAgbW9zdCBvZiB0aGUgdGltZS5cbiAgICovXG4gIGNvbnRhaW5lcjogUHJvcFR5cGVzXG4gIC8qIEB0eXBlc2NyaXB0LXRvLXByb3B0eXBlcy1pZ25vcmUgKi9cbiAgLm9uZU9mVHlwZShbSFRNTEVsZW1lbnRUeXBlLCBQcm9wVHlwZXMuaW5zdGFuY2VPZihSZWFjdC5Db21wb25lbnQpLCBQcm9wVHlwZXMuZnVuY10pLFxuXG4gIC8qKlxuICAgKiBUaGUgZWxldmF0aW9uIG9mIHRoZSBwb3BvdmVyLlxuICAgKi9cbiAgZWxldmF0aW9uOiBQcm9wVHlwZXMubnVtYmVyLFxuXG4gIC8qKlxuICAgKiBUaGlzIGZ1bmN0aW9uIGlzIGNhbGxlZCBpbiBvcmRlciB0byByZXRyaWV2ZSB0aGUgY29udGVudCBhbmNob3IgZWxlbWVudC5cbiAgICogSXQncyB0aGUgb3Bwb3NpdGUgb2YgdGhlIGBhbmNob3JFbGAgcHJvcC5cbiAgICogVGhlIGNvbnRlbnQgYW5jaG9yIGVsZW1lbnQgc2hvdWxkIGJlIGFuIGVsZW1lbnQgaW5zaWRlIHRoZSBwb3BvdmVyLlxuICAgKiBJdCdzIHVzZWQgdG8gY29ycmVjdGx5IHNjcm9sbCBhbmQgc2V0IHRoZSBwb3NpdGlvbiBvZiB0aGUgcG9wb3Zlci5cbiAgICogVGhlIHBvc2l0aW9uaW5nIHN0cmF0ZWd5IHRyaWVzIHRvIG1ha2UgdGhlIGNvbnRlbnQgYW5jaG9yIGVsZW1lbnQganVzdCBhYm92ZSB0aGVcbiAgICogYW5jaG9yIGVsZW1lbnQuXG4gICAqL1xuICBnZXRDb250ZW50QW5jaG9yRWw6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBTcGVjaWZpZXMgaG93IGNsb3NlIHRvIHRoZSBlZGdlIG9mIHRoZSB3aW5kb3cgdGhlIHBvcG92ZXIgY2FuIGFwcGVhci5cbiAgICovXG4gIG1hcmdpblRocmVzaG9sZDogUHJvcFR5cGVzLm51bWJlcixcblxuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgd2hlbiB0aGUgY29tcG9uZW50IHJlcXVlc3RzIHRvIGJlIGNsb3NlZC5cbiAgICovXG4gIG9uQ2xvc2U6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCBiZWZvcmUgdGhlIGNvbXBvbmVudCBpcyBlbnRlcmluZy5cbiAgICovXG4gIG9uRW50ZXI6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCB3aGVuIHRoZSBjb21wb25lbnQgaGFzIGVudGVyZWQuXG4gICAqL1xuICBvbkVudGVyZWQ6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCB3aGVuIHRoZSBjb21wb25lbnQgaXMgZW50ZXJpbmcuXG4gICAqL1xuICBvbkVudGVyaW5nOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgYmVmb3JlIHRoZSBjb21wb25lbnQgaXMgZXhpdGluZy5cbiAgICovXG4gIG9uRXhpdDogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIHdoZW4gdGhlIGNvbXBvbmVudCBoYXMgZXhpdGVkLlxuICAgKi9cbiAgb25FeGl0ZWQ6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCB3aGVuIHRoZSBjb21wb25lbnQgaXMgZXhpdGluZy5cbiAgICovXG4gIG9uRXhpdGluZzogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIHBvcG92ZXIgaXMgdmlzaWJsZS5cbiAgICovXG4gIG9wZW46IFByb3BUeXBlcy5ib29sLmlzUmVxdWlyZWQsXG5cbiAgLyoqXG4gICAqIFByb3BzIGFwcGxpZWQgdG8gdGhlIFtgUGFwZXJgXSgvYXBpL3BhcGVyLykgZWxlbWVudC5cbiAgICovXG4gIFBhcGVyUHJvcHM6IFByb3BUeXBlc1xuICAvKiBAdHlwZXNjcmlwdC10by1wcm9wdHlwZXMtaWdub3JlICovXG4gIC5zaGFwZSh7XG4gICAgY29tcG9uZW50OiBlbGVtZW50VHlwZUFjY2VwdGluZ1JlZlxuICB9KSxcblxuICAvKipcbiAgICogVGhpcyBpcyB0aGUgcG9pbnQgb24gdGhlIHBvcG92ZXIgd2hpY2hcbiAgICogd2lsbCBhdHRhY2ggdG8gdGhlIGFuY2hvcidzIG9yaWdpbi5cbiAgICpcbiAgICogT3B0aW9uczpcbiAgICogdmVydGljYWw6IFt0b3AsIGNlbnRlciwgYm90dG9tLCB4KHB4KV07XG4gICAqIGhvcml6b250YWw6IFtsZWZ0LCBjZW50ZXIsIHJpZ2h0LCB4KHB4KV0uXG4gICAqL1xuICB0cmFuc2Zvcm1PcmlnaW46IFByb3BUeXBlcy5zaGFwZSh7XG4gICAgaG9yaXpvbnRhbDogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLm9uZU9mKFsnY2VudGVyJywgJ2xlZnQnLCAncmlnaHQnXSksIFByb3BUeXBlcy5udW1iZXJdKS5pc1JlcXVpcmVkLFxuICAgIHZlcnRpY2FsOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMub25lT2YoWydib3R0b20nLCAnY2VudGVyJywgJ3RvcCddKSwgUHJvcFR5cGVzLm51bWJlcl0pLmlzUmVxdWlyZWRcbiAgfSksXG5cbiAgLyoqXG4gICAqIFRoZSBjb21wb25lbnQgdXNlZCBmb3IgdGhlIHRyYW5zaXRpb24uXG4gICAqIFtGb2xsb3cgdGhpcyBndWlkZV0oL2NvbXBvbmVudHMvdHJhbnNpdGlvbnMvI3RyYW5zaXRpb25jb21wb25lbnQtcHJvcCkgdG8gbGVhcm4gbW9yZSBhYm91dCB0aGUgcmVxdWlyZW1lbnRzIGZvciB0aGlzIGNvbXBvbmVudC5cbiAgICovXG4gIFRyYW5zaXRpb25Db21wb25lbnQ6IFByb3BUeXBlcy5lbGVtZW50VHlwZSxcblxuICAvKipcbiAgICogU2V0IHRvICdhdXRvJyB0byBhdXRvbWF0aWNhbGx5IGNhbGN1bGF0ZSB0cmFuc2l0aW9uIHRpbWUgYmFzZWQgb24gaGVpZ2h0LlxuICAgKi9cbiAgdHJhbnNpdGlvbkR1cmF0aW9uOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMub25lT2YoWydhdXRvJ10pLCBQcm9wVHlwZXMubnVtYmVyLCBQcm9wVHlwZXMuc2hhcGUoe1xuICAgIGFwcGVhcjogUHJvcFR5cGVzLm51bWJlcixcbiAgICBlbnRlcjogUHJvcFR5cGVzLm51bWJlcixcbiAgICBleGl0OiBQcm9wVHlwZXMubnVtYmVyXG4gIH0pXSksXG5cbiAgLyoqXG4gICAqIFByb3BzIGFwcGxpZWQgdG8gdGhlIFtgVHJhbnNpdGlvbmBdKGh0dHA6Ly9yZWFjdGNvbW11bml0eS5vcmcvcmVhY3QtdHJhbnNpdGlvbi1ncm91cC90cmFuc2l0aW9uI1RyYW5zaXRpb24tcHJvcHMpIGVsZW1lbnQuXG4gICAqL1xuICBUcmFuc2l0aW9uUHJvcHM6IFByb3BUeXBlcy5vYmplY3Rcbn0gOiB2b2lkIDA7XG5leHBvcnQgZGVmYXVsdCB3aXRoU3R5bGVzKHN0eWxlcywge1xuICBuYW1lOiAnTXVpUG9wb3Zlcidcbn0pKFBvcG92ZXIpOyIsImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0Jztcbi8qKlxuICogQGlnbm9yZSAtIGludGVybmFsIGNvbXBvbmVudC5cbiAqL1xuXG52YXIgTGlzdENvbnRleHQgPSAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlQ29udGV4dCh7fSk7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIExpc3RDb250ZXh0LmRpc3BsYXlOYW1lID0gJ0xpc3RDb250ZXh0Jztcbn1cblxuZXhwb3J0IGRlZmF1bHQgTGlzdENvbnRleHQ7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc1wiO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBjbHN4IGZyb20gJ2Nsc3gnO1xuaW1wb3J0IHdpdGhTdHlsZXMgZnJvbSAnLi4vc3R5bGVzL3dpdGhTdHlsZXMnO1xuaW1wb3J0IExpc3RDb250ZXh0IGZyb20gJy4vTGlzdENvbnRleHQnO1xuZXhwb3J0IHZhciBzdHlsZXMgPSB7XG4gIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQuICovXG4gIHJvb3Q6IHtcbiAgICBsaXN0U3R5bGU6ICdub25lJyxcbiAgICBtYXJnaW46IDAsXG4gICAgcGFkZGluZzogMCxcbiAgICBwb3NpdGlvbjogJ3JlbGF0aXZlJ1xuICB9LFxuXG4gIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGRpc2FibGVQYWRkaW5nPXtmYWxzZX1gLiAqL1xuICBwYWRkaW5nOiB7XG4gICAgcGFkZGluZ1RvcDogOCxcbiAgICBwYWRkaW5nQm90dG9tOiA4XG4gIH0sXG5cbiAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBkZW5zZS4gKi9cbiAgZGVuc2U6IHt9LFxuXG4gIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYSBgc3ViaGVhZGVyYCBpcyBwcm92aWRlZC4gKi9cbiAgc3ViaGVhZGVyOiB7XG4gICAgcGFkZGluZ1RvcDogMFxuICB9XG59O1xudmFyIExpc3QgPSAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBMaXN0KHByb3BzLCByZWYpIHtcbiAgdmFyIGNoaWxkcmVuID0gcHJvcHMuY2hpbGRyZW4sXG4gICAgICBjbGFzc2VzID0gcHJvcHMuY2xhc3NlcyxcbiAgICAgIGNsYXNzTmFtZSA9IHByb3BzLmNsYXNzTmFtZSxcbiAgICAgIF9wcm9wcyRjb21wb25lbnQgPSBwcm9wcy5jb21wb25lbnQsXG4gICAgICBDb21wb25lbnQgPSBfcHJvcHMkY29tcG9uZW50ID09PSB2b2lkIDAgPyAndWwnIDogX3Byb3BzJGNvbXBvbmVudCxcbiAgICAgIF9wcm9wcyRkZW5zZSA9IHByb3BzLmRlbnNlLFxuICAgICAgZGVuc2UgPSBfcHJvcHMkZGVuc2UgPT09IHZvaWQgMCA/IGZhbHNlIDogX3Byb3BzJGRlbnNlLFxuICAgICAgX3Byb3BzJGRpc2FibGVQYWRkaW5nID0gcHJvcHMuZGlzYWJsZVBhZGRpbmcsXG4gICAgICBkaXNhYmxlUGFkZGluZyA9IF9wcm9wcyRkaXNhYmxlUGFkZGluZyA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcHJvcHMkZGlzYWJsZVBhZGRpbmcsXG4gICAgICBzdWJoZWFkZXIgPSBwcm9wcy5zdWJoZWFkZXIsXG4gICAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhwcm9wcywgW1wiY2hpbGRyZW5cIiwgXCJjbGFzc2VzXCIsIFwiY2xhc3NOYW1lXCIsIFwiY29tcG9uZW50XCIsIFwiZGVuc2VcIiwgXCJkaXNhYmxlUGFkZGluZ1wiLCBcInN1YmhlYWRlclwiXSk7XG5cbiAgdmFyIGNvbnRleHQgPSBSZWFjdC51c2VNZW1vKGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgZGVuc2U6IGRlbnNlXG4gICAgfTtcbiAgfSwgW2RlbnNlXSk7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChMaXN0Q29udGV4dC5Qcm92aWRlciwge1xuICAgIHZhbHVlOiBjb250ZXh0XG4gIH0sIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KENvbXBvbmVudCwgX2V4dGVuZHMoe1xuICAgIGNsYXNzTmFtZTogY2xzeChjbGFzc2VzLnJvb3QsIGNsYXNzTmFtZSwgZGVuc2UgJiYgY2xhc3Nlcy5kZW5zZSwgIWRpc2FibGVQYWRkaW5nICYmIGNsYXNzZXMucGFkZGluZywgc3ViaGVhZGVyICYmIGNsYXNzZXMuc3ViaGVhZGVyKSxcbiAgICByZWY6IHJlZlxuICB9LCBvdGhlciksIHN1YmhlYWRlciwgY2hpbGRyZW4pKTtcbn0pO1xucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gTGlzdC5wcm9wVHlwZXMgPSB7XG4gIC8qKlxuICAgKiBUaGUgY29udGVudCBvZiB0aGUgY29tcG9uZW50LlxuICAgKi9cbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuXG4gIC8qKlxuICAgKiBPdmVycmlkZSBvciBleHRlbmQgdGhlIHN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAqIFNlZSBbQ1NTIEFQSV0oI2NzcykgYmVsb3cgZm9yIG1vcmUgZGV0YWlscy5cbiAgICovXG4gIGNsYXNzZXM6IFByb3BUeXBlcy5vYmplY3QuaXNSZXF1aXJlZCxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBUaGUgY29tcG9uZW50IHVzZWQgZm9yIHRoZSByb290IG5vZGUuXG4gICAqIEVpdGhlciBhIHN0cmluZyB0byB1c2UgYSBIVE1MIGVsZW1lbnQgb3IgYSBjb21wb25lbnQuXG4gICAqL1xuICBjb21wb25lbnQ6IFByb3BUeXBlc1xuICAvKiBAdHlwZXNjcmlwdC10by1wcm9wdHlwZXMtaWdub3JlICovXG4gIC5lbGVtZW50VHlwZSxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCBjb21wYWN0IHZlcnRpY2FsIHBhZGRpbmcgZGVzaWduZWQgZm9yIGtleWJvYXJkIGFuZCBtb3VzZSBpbnB1dCB3aWxsIGJlIHVzZWQgZm9yXG4gICAqIHRoZSBsaXN0IGFuZCBsaXN0IGl0ZW1zLlxuICAgKiBUaGUgcHJvcCBpcyBhdmFpbGFibGUgdG8gZGVzY2VuZGFudCBjb21wb25lbnRzIGFzIHRoZSBgZGVuc2VgIGNvbnRleHQuXG4gICAqL1xuICBkZW5zZTogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdmVydGljYWwgcGFkZGluZyB3aWxsIGJlIHJlbW92ZWQgZnJvbSB0aGUgbGlzdC5cbiAgICovXG4gIGRpc2FibGVQYWRkaW5nOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogVGhlIGNvbnRlbnQgb2YgdGhlIHN1YmhlYWRlciwgbm9ybWFsbHkgYExpc3RTdWJoZWFkZXJgLlxuICAgKi9cbiAgc3ViaGVhZGVyOiBQcm9wVHlwZXMubm9kZVxufSA6IHZvaWQgMDtcbmV4cG9ydCBkZWZhdWx0IHdpdGhTdHlsZXMoc3R5bGVzLCB7XG4gIG5hbWU6ICdNdWlMaXN0J1xufSkoTGlzdCk7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc1wiO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgaXNGcmFnbWVudCB9IGZyb20gJ3JlYWN0LWlzJztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgKiBhcyBSZWFjdERPTSBmcm9tICdyZWFjdC1kb20nO1xuaW1wb3J0IG93bmVyRG9jdW1lbnQgZnJvbSAnLi4vdXRpbHMvb3duZXJEb2N1bWVudCc7XG5pbXBvcnQgTGlzdCBmcm9tICcuLi9MaXN0JztcbmltcG9ydCBnZXRTY3JvbGxiYXJTaXplIGZyb20gJy4uL3V0aWxzL2dldFNjcm9sbGJhclNpemUnO1xuaW1wb3J0IHVzZUZvcmtSZWYgZnJvbSAnLi4vdXRpbHMvdXNlRm9ya1JlZic7XG5cbmZ1bmN0aW9uIG5leHRJdGVtKGxpc3QsIGl0ZW0sIGRpc2FibGVMaXN0V3JhcCkge1xuICBpZiAobGlzdCA9PT0gaXRlbSkge1xuICAgIHJldHVybiBsaXN0LmZpcnN0Q2hpbGQ7XG4gIH1cblxuICBpZiAoaXRlbSAmJiBpdGVtLm5leHRFbGVtZW50U2libGluZykge1xuICAgIHJldHVybiBpdGVtLm5leHRFbGVtZW50U2libGluZztcbiAgfVxuXG4gIHJldHVybiBkaXNhYmxlTGlzdFdyYXAgPyBudWxsIDogbGlzdC5maXJzdENoaWxkO1xufVxuXG5mdW5jdGlvbiBwcmV2aW91c0l0ZW0obGlzdCwgaXRlbSwgZGlzYWJsZUxpc3RXcmFwKSB7XG4gIGlmIChsaXN0ID09PSBpdGVtKSB7XG4gICAgcmV0dXJuIGRpc2FibGVMaXN0V3JhcCA/IGxpc3QuZmlyc3RDaGlsZCA6IGxpc3QubGFzdENoaWxkO1xuICB9XG5cbiAgaWYgKGl0ZW0gJiYgaXRlbS5wcmV2aW91c0VsZW1lbnRTaWJsaW5nKSB7XG4gICAgcmV0dXJuIGl0ZW0ucHJldmlvdXNFbGVtZW50U2libGluZztcbiAgfVxuXG4gIHJldHVybiBkaXNhYmxlTGlzdFdyYXAgPyBudWxsIDogbGlzdC5sYXN0Q2hpbGQ7XG59XG5cbmZ1bmN0aW9uIHRleHRDcml0ZXJpYU1hdGNoZXMobmV4dEZvY3VzLCB0ZXh0Q3JpdGVyaWEpIHtcbiAgaWYgKHRleHRDcml0ZXJpYSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICB2YXIgdGV4dCA9IG5leHRGb2N1cy5pbm5lclRleHQ7XG5cbiAgaWYgKHRleHQgPT09IHVuZGVmaW5lZCkge1xuICAgIC8vIGpzZG9tIGRvZXNuJ3Qgc3VwcG9ydCBpbm5lclRleHRcbiAgICB0ZXh0ID0gbmV4dEZvY3VzLnRleHRDb250ZW50O1xuICB9XG5cbiAgdGV4dCA9IHRleHQudHJpbSgpLnRvTG93ZXJDYXNlKCk7XG5cbiAgaWYgKHRleHQubGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgaWYgKHRleHRDcml0ZXJpYS5yZXBlYXRpbmcpIHtcbiAgICByZXR1cm4gdGV4dFswXSA9PT0gdGV4dENyaXRlcmlhLmtleXNbMF07XG4gIH1cblxuICByZXR1cm4gdGV4dC5pbmRleE9mKHRleHRDcml0ZXJpYS5rZXlzLmpvaW4oJycpKSA9PT0gMDtcbn1cblxuZnVuY3Rpb24gbW92ZUZvY3VzKGxpc3QsIGN1cnJlbnRGb2N1cywgZGlzYWJsZUxpc3RXcmFwLCBkaXNhYmxlZEl0ZW1zRm9jdXNhYmxlLCB0cmF2ZXJzYWxGdW5jdGlvbiwgdGV4dENyaXRlcmlhKSB7XG4gIHZhciB3cmFwcGVkT25jZSA9IGZhbHNlO1xuICB2YXIgbmV4dEZvY3VzID0gdHJhdmVyc2FsRnVuY3Rpb24obGlzdCwgY3VycmVudEZvY3VzLCBjdXJyZW50Rm9jdXMgPyBkaXNhYmxlTGlzdFdyYXAgOiBmYWxzZSk7XG5cbiAgd2hpbGUgKG5leHRGb2N1cykge1xuICAgIC8vIFByZXZlbnQgaW5maW5pdGUgbG9vcC5cbiAgICBpZiAobmV4dEZvY3VzID09PSBsaXN0LmZpcnN0Q2hpbGQpIHtcbiAgICAgIGlmICh3cmFwcGVkT25jZSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHdyYXBwZWRPbmNlID0gdHJ1ZTtcbiAgICB9IC8vIFNhbWUgbG9naWMgYXMgdXNlQXV0b2NvbXBsZXRlLmpzXG5cblxuICAgIHZhciBuZXh0Rm9jdXNEaXNhYmxlZCA9IGRpc2FibGVkSXRlbXNGb2N1c2FibGUgPyBmYWxzZSA6IG5leHRGb2N1cy5kaXNhYmxlZCB8fCBuZXh0Rm9jdXMuZ2V0QXR0cmlidXRlKCdhcmlhLWRpc2FibGVkJykgPT09ICd0cnVlJztcblxuICAgIGlmICghbmV4dEZvY3VzLmhhc0F0dHJpYnV0ZSgndGFiaW5kZXgnKSB8fCAhdGV4dENyaXRlcmlhTWF0Y2hlcyhuZXh0Rm9jdXMsIHRleHRDcml0ZXJpYSkgfHwgbmV4dEZvY3VzRGlzYWJsZWQpIHtcbiAgICAgIC8vIE1vdmUgdG8gdGhlIG5leHQgZWxlbWVudC5cbiAgICAgIG5leHRGb2N1cyA9IHRyYXZlcnNhbEZ1bmN0aW9uKGxpc3QsIG5leHRGb2N1cywgZGlzYWJsZUxpc3RXcmFwKTtcbiAgICB9IGVsc2Uge1xuICAgICAgbmV4dEZvY3VzLmZvY3VzKCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICB9XG59XG5cbnZhciB1c2VFbmhhbmNlZEVmZmVjdCA9IHR5cGVvZiB3aW5kb3cgPT09ICd1bmRlZmluZWQnID8gUmVhY3QudXNlRWZmZWN0IDogUmVhY3QudXNlTGF5b3V0RWZmZWN0O1xuLyoqXG4gKiBBIHBlcm1hbmVudGx5IGRpc3BsYXllZCBtZW51IGZvbGxvd2luZyBodHRwczovL3d3dy53My5vcmcvVFIvd2FpLWFyaWEtcHJhY3RpY2VzLyNtZW51YnV0dG9uLlxuICogSXQncyBleHBvc2VkIHRvIGhlbHAgY3VzdG9taXphdGlvbiBvZiB0aGUgW2BNZW51YF0oL2FwaS9tZW51LykgY29tcG9uZW50LiBJZiB5b3VcbiAqIHVzZSBpdCBzZXBhcmF0ZWx5IHlvdSBuZWVkIHRvIG1vdmUgZm9jdXMgaW50byB0aGUgY29tcG9uZW50IG1hbnVhbGx5LiBPbmNlXG4gKiB0aGUgZm9jdXMgaXMgcGxhY2VkIGluc2lkZSB0aGUgY29tcG9uZW50IGl0IGlzIGZ1bGx5IGtleWJvYXJkIGFjY2Vzc2libGUuXG4gKi9cblxudmFyIE1lbnVMaXN0ID0gLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gTWVudUxpc3QocHJvcHMsIHJlZikge1xuICB2YXIgYWN0aW9ucyA9IHByb3BzLmFjdGlvbnMsXG4gICAgICBfcHJvcHMkYXV0b0ZvY3VzID0gcHJvcHMuYXV0b0ZvY3VzLFxuICAgICAgYXV0b0ZvY3VzID0gX3Byb3BzJGF1dG9Gb2N1cyA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcHJvcHMkYXV0b0ZvY3VzLFxuICAgICAgX3Byb3BzJGF1dG9Gb2N1c0l0ZW0gPSBwcm9wcy5hdXRvRm9jdXNJdGVtLFxuICAgICAgYXV0b0ZvY3VzSXRlbSA9IF9wcm9wcyRhdXRvRm9jdXNJdGVtID09PSB2b2lkIDAgPyBmYWxzZSA6IF9wcm9wcyRhdXRvRm9jdXNJdGVtLFxuICAgICAgY2hpbGRyZW4gPSBwcm9wcy5jaGlsZHJlbixcbiAgICAgIGNsYXNzTmFtZSA9IHByb3BzLmNsYXNzTmFtZSxcbiAgICAgIF9wcm9wcyRkaXNhYmxlZEl0ZW1zRiA9IHByb3BzLmRpc2FibGVkSXRlbXNGb2N1c2FibGUsXG4gICAgICBkaXNhYmxlZEl0ZW1zRm9jdXNhYmxlID0gX3Byb3BzJGRpc2FibGVkSXRlbXNGID09PSB2b2lkIDAgPyBmYWxzZSA6IF9wcm9wcyRkaXNhYmxlZEl0ZW1zRixcbiAgICAgIF9wcm9wcyRkaXNhYmxlTGlzdFdyYSA9IHByb3BzLmRpc2FibGVMaXN0V3JhcCxcbiAgICAgIGRpc2FibGVMaXN0V3JhcCA9IF9wcm9wcyRkaXNhYmxlTGlzdFdyYSA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcHJvcHMkZGlzYWJsZUxpc3RXcmEsXG4gICAgICBvbktleURvd24gPSBwcm9wcy5vbktleURvd24sXG4gICAgICBfcHJvcHMkdmFyaWFudCA9IHByb3BzLnZhcmlhbnQsXG4gICAgICB2YXJpYW50ID0gX3Byb3BzJHZhcmlhbnQgPT09IHZvaWQgMCA/ICdzZWxlY3RlZE1lbnUnIDogX3Byb3BzJHZhcmlhbnQsXG4gICAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhwcm9wcywgW1wiYWN0aW9uc1wiLCBcImF1dG9Gb2N1c1wiLCBcImF1dG9Gb2N1c0l0ZW1cIiwgXCJjaGlsZHJlblwiLCBcImNsYXNzTmFtZVwiLCBcImRpc2FibGVkSXRlbXNGb2N1c2FibGVcIiwgXCJkaXNhYmxlTGlzdFdyYXBcIiwgXCJvbktleURvd25cIiwgXCJ2YXJpYW50XCJdKTtcblxuICB2YXIgbGlzdFJlZiA9IFJlYWN0LnVzZVJlZihudWxsKTtcbiAgdmFyIHRleHRDcml0ZXJpYVJlZiA9IFJlYWN0LnVzZVJlZih7XG4gICAga2V5czogW10sXG4gICAgcmVwZWF0aW5nOiB0cnVlLFxuICAgIHByZXZpb3VzS2V5TWF0Y2hlZDogdHJ1ZSxcbiAgICBsYXN0VGltZTogbnVsbFxuICB9KTtcbiAgdXNlRW5oYW5jZWRFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgIGlmIChhdXRvRm9jdXMpIHtcbiAgICAgIGxpc3RSZWYuY3VycmVudC5mb2N1cygpO1xuICAgIH1cbiAgfSwgW2F1dG9Gb2N1c10pO1xuICBSZWFjdC51c2VJbXBlcmF0aXZlSGFuZGxlKGFjdGlvbnMsIGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgYWRqdXN0U3R5bGVGb3JTY3JvbGxiYXI6IGZ1bmN0aW9uIGFkanVzdFN0eWxlRm9yU2Nyb2xsYmFyKGNvbnRhaW5lckVsZW1lbnQsIHRoZW1lKSB7XG4gICAgICAgIC8vIExldCdzIGlnbm9yZSB0aGF0IHBpZWNlIG9mIGxvZ2ljIGlmIHVzZXJzIGFyZSBhbHJlYWR5IG92ZXJyaWRpbmcgdGhlIHdpZHRoXG4gICAgICAgIC8vIG9mIHRoZSBtZW51LlxuICAgICAgICB2YXIgbm9FeHBsaWNpdFdpZHRoID0gIWxpc3RSZWYuY3VycmVudC5zdHlsZS53aWR0aDtcblxuICAgICAgICBpZiAoY29udGFpbmVyRWxlbWVudC5jbGllbnRIZWlnaHQgPCBsaXN0UmVmLmN1cnJlbnQuY2xpZW50SGVpZ2h0ICYmIG5vRXhwbGljaXRXaWR0aCkge1xuICAgICAgICAgIHZhciBzY3JvbGxiYXJTaXplID0gXCJcIi5jb25jYXQoZ2V0U2Nyb2xsYmFyU2l6ZSh0cnVlKSwgXCJweFwiKTtcbiAgICAgICAgICBsaXN0UmVmLmN1cnJlbnQuc3R5bGVbdGhlbWUuZGlyZWN0aW9uID09PSAncnRsJyA/ICdwYWRkaW5nTGVmdCcgOiAncGFkZGluZ1JpZ2h0J10gPSBzY3JvbGxiYXJTaXplO1xuICAgICAgICAgIGxpc3RSZWYuY3VycmVudC5zdHlsZS53aWR0aCA9IFwiY2FsYygxMDAlICsgXCIuY29uY2F0KHNjcm9sbGJhclNpemUsIFwiKVwiKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBsaXN0UmVmLmN1cnJlbnQ7XG4gICAgICB9XG4gICAgfTtcbiAgfSwgW10pO1xuXG4gIHZhciBoYW5kbGVLZXlEb3duID0gZnVuY3Rpb24gaGFuZGxlS2V5RG93bihldmVudCkge1xuICAgIHZhciBsaXN0ID0gbGlzdFJlZi5jdXJyZW50O1xuICAgIHZhciBrZXkgPSBldmVudC5rZXk7XG4gICAgLyoqXG4gICAgICogQHR5cGUge0VsZW1lbnR9IC0gd2lsbCBhbHdheXMgYmUgZGVmaW5lZCBzaW5jZSB3ZSBhcmUgaW4gYSBrZXlkb3duIGhhbmRsZXJcbiAgICAgKiBhdHRhY2hlZCB0byBhbiBlbGVtZW50LiBBIGtleWRvd24gZXZlbnQgaXMgZWl0aGVyIGRpc3BhdGNoZWQgdG8gdGhlIGFjdGl2ZUVsZW1lbnRcbiAgICAgKiBvciBkb2N1bWVudC5ib2R5IG9yIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC4gT25seSB0aGUgZmlyc3QgY2FzZSB3aWxsXG4gICAgICogdHJpZ2dlciB0aGlzIHNwZWNpZmljIGhhbmRsZXIuXG4gICAgICovXG5cbiAgICB2YXIgY3VycmVudEZvY3VzID0gb3duZXJEb2N1bWVudChsaXN0KS5hY3RpdmVFbGVtZW50O1xuXG4gICAgaWYgKGtleSA9PT0gJ0Fycm93RG93bicpIHtcbiAgICAgIC8vIFByZXZlbnQgc2Nyb2xsIG9mIHRoZSBwYWdlXG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgbW92ZUZvY3VzKGxpc3QsIGN1cnJlbnRGb2N1cywgZGlzYWJsZUxpc3RXcmFwLCBkaXNhYmxlZEl0ZW1zRm9jdXNhYmxlLCBuZXh0SXRlbSk7XG4gICAgfSBlbHNlIGlmIChrZXkgPT09ICdBcnJvd1VwJykge1xuICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgIG1vdmVGb2N1cyhsaXN0LCBjdXJyZW50Rm9jdXMsIGRpc2FibGVMaXN0V3JhcCwgZGlzYWJsZWRJdGVtc0ZvY3VzYWJsZSwgcHJldmlvdXNJdGVtKTtcbiAgICB9IGVsc2UgaWYgKGtleSA9PT0gJ0hvbWUnKSB7XG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgbW92ZUZvY3VzKGxpc3QsIG51bGwsIGRpc2FibGVMaXN0V3JhcCwgZGlzYWJsZWRJdGVtc0ZvY3VzYWJsZSwgbmV4dEl0ZW0pO1xuICAgIH0gZWxzZSBpZiAoa2V5ID09PSAnRW5kJykge1xuICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgIG1vdmVGb2N1cyhsaXN0LCBudWxsLCBkaXNhYmxlTGlzdFdyYXAsIGRpc2FibGVkSXRlbXNGb2N1c2FibGUsIHByZXZpb3VzSXRlbSk7XG4gICAgfSBlbHNlIGlmIChrZXkubGVuZ3RoID09PSAxKSB7XG4gICAgICB2YXIgY3JpdGVyaWEgPSB0ZXh0Q3JpdGVyaWFSZWYuY3VycmVudDtcbiAgICAgIHZhciBsb3dlcktleSA9IGtleS50b0xvd2VyQ2FzZSgpO1xuICAgICAgdmFyIGN1cnJUaW1lID0gcGVyZm9ybWFuY2Uubm93KCk7XG5cbiAgICAgIGlmIChjcml0ZXJpYS5rZXlzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgLy8gUmVzZXRcbiAgICAgICAgaWYgKGN1cnJUaW1lIC0gY3JpdGVyaWEubGFzdFRpbWUgPiA1MDApIHtcbiAgICAgICAgICBjcml0ZXJpYS5rZXlzID0gW107XG4gICAgICAgICAgY3JpdGVyaWEucmVwZWF0aW5nID0gdHJ1ZTtcbiAgICAgICAgICBjcml0ZXJpYS5wcmV2aW91c0tleU1hdGNoZWQgPSB0cnVlO1xuICAgICAgICB9IGVsc2UgaWYgKGNyaXRlcmlhLnJlcGVhdGluZyAmJiBsb3dlcktleSAhPT0gY3JpdGVyaWEua2V5c1swXSkge1xuICAgICAgICAgIGNyaXRlcmlhLnJlcGVhdGluZyA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGNyaXRlcmlhLmxhc3RUaW1lID0gY3VyclRpbWU7XG4gICAgICBjcml0ZXJpYS5rZXlzLnB1c2gobG93ZXJLZXkpO1xuICAgICAgdmFyIGtlZXBGb2N1c09uQ3VycmVudCA9IGN1cnJlbnRGb2N1cyAmJiAhY3JpdGVyaWEucmVwZWF0aW5nICYmIHRleHRDcml0ZXJpYU1hdGNoZXMoY3VycmVudEZvY3VzLCBjcml0ZXJpYSk7XG5cbiAgICAgIGlmIChjcml0ZXJpYS5wcmV2aW91c0tleU1hdGNoZWQgJiYgKGtlZXBGb2N1c09uQ3VycmVudCB8fCBtb3ZlRm9jdXMobGlzdCwgY3VycmVudEZvY3VzLCBmYWxzZSwgZGlzYWJsZWRJdGVtc0ZvY3VzYWJsZSwgbmV4dEl0ZW0sIGNyaXRlcmlhKSkpIHtcbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNyaXRlcmlhLnByZXZpb3VzS2V5TWF0Y2hlZCA9IGZhbHNlO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChvbktleURvd24pIHtcbiAgICAgIG9uS2V5RG93bihldmVudCk7XG4gICAgfVxuICB9O1xuXG4gIHZhciBoYW5kbGVPd25SZWYgPSBSZWFjdC51c2VDYWxsYmFjayhmdW5jdGlvbiAoaW5zdGFuY2UpIHtcbiAgICAvLyAjU3RyaWN0TW9kZSByZWFkeVxuICAgIGxpc3RSZWYuY3VycmVudCA9IFJlYWN0RE9NLmZpbmRET01Ob2RlKGluc3RhbmNlKTtcbiAgfSwgW10pO1xuICB2YXIgaGFuZGxlUmVmID0gdXNlRm9ya1JlZihoYW5kbGVPd25SZWYsIHJlZik7XG4gIC8qKlxuICAgKiB0aGUgaW5kZXggb2YgdGhlIGl0ZW0gc2hvdWxkIHJlY2VpdmUgZm9jdXNcbiAgICogaW4gYSBgdmFyaWFudD1cInNlbGVjdGVkTWVudVwiYCBpdCdzIHRoZSBmaXJzdCBgc2VsZWN0ZWRgIGl0ZW1cbiAgICogb3RoZXJ3aXNlIGl0J3MgdGhlIHZlcnkgZmlyc3QgaXRlbS5cbiAgICovXG5cbiAgdmFyIGFjdGl2ZUl0ZW1JbmRleCA9IC0xOyAvLyBzaW5jZSB3ZSBpbmplY3QgZm9jdXMgcmVsYXRlZCBwcm9wcyBpbnRvIGNoaWxkcmVuIHdlIGhhdmUgdG8gZG8gYSBsb29rYWhlYWRcbiAgLy8gdG8gY2hlY2sgaWYgdGhlcmUgaXMgYSBgc2VsZWN0ZWRgIGl0ZW0uIFdlJ3JlIGxvb2tpbmcgZm9yIHRoZSBsYXN0IGBzZWxlY3RlZGBcbiAgLy8gaXRlbSBhbmQgdXNlIHRoZSBmaXJzdCB2YWxpZCBpdGVtIGFzIGEgZmFsbGJhY2tcblxuICBSZWFjdC5DaGlsZHJlbi5mb3JFYWNoKGNoaWxkcmVuLCBmdW5jdGlvbiAoY2hpbGQsIGluZGV4KSB7XG4gICAgaWYgKCEgLyojX19QVVJFX18qL1JlYWN0LmlzVmFsaWRFbGVtZW50KGNoaWxkKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBpZiAoaXNGcmFnbWVudChjaGlsZCkpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihbXCJNYXRlcmlhbC1VSTogVGhlIE1lbnUgY29tcG9uZW50IGRvZXNuJ3QgYWNjZXB0IGEgRnJhZ21lbnQgYXMgYSBjaGlsZC5cIiwgJ0NvbnNpZGVyIHByb3ZpZGluZyBhbiBhcnJheSBpbnN0ZWFkLiddLmpvaW4oJ1xcbicpKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoIWNoaWxkLnByb3BzLmRpc2FibGVkKSB7XG4gICAgICBpZiAodmFyaWFudCA9PT0gJ3NlbGVjdGVkTWVudScgJiYgY2hpbGQucHJvcHMuc2VsZWN0ZWQpIHtcbiAgICAgICAgYWN0aXZlSXRlbUluZGV4ID0gaW5kZXg7XG4gICAgICB9IGVsc2UgaWYgKGFjdGl2ZUl0ZW1JbmRleCA9PT0gLTEpIHtcbiAgICAgICAgYWN0aXZlSXRlbUluZGV4ID0gaW5kZXg7XG4gICAgICB9XG4gICAgfVxuICB9KTtcbiAgdmFyIGl0ZW1zID0gUmVhY3QuQ2hpbGRyZW4ubWFwKGNoaWxkcmVuLCBmdW5jdGlvbiAoY2hpbGQsIGluZGV4KSB7XG4gICAgaWYgKGluZGV4ID09PSBhY3RpdmVJdGVtSW5kZXgpIHtcbiAgICAgIHZhciBuZXdDaGlsZFByb3BzID0ge307XG5cbiAgICAgIGlmIChhdXRvRm9jdXNJdGVtKSB7XG4gICAgICAgIG5ld0NoaWxkUHJvcHMuYXV0b0ZvY3VzID0gdHJ1ZTtcbiAgICAgIH1cblxuICAgICAgaWYgKGNoaWxkLnByb3BzLnRhYkluZGV4ID09PSB1bmRlZmluZWQgJiYgdmFyaWFudCA9PT0gJ3NlbGVjdGVkTWVudScpIHtcbiAgICAgICAgbmV3Q2hpbGRQcm9wcy50YWJJbmRleCA9IDA7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY2xvbmVFbGVtZW50KGNoaWxkLCBuZXdDaGlsZFByb3BzKTtcbiAgICB9XG5cbiAgICByZXR1cm4gY2hpbGQ7XG4gIH0pO1xuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoTGlzdCwgX2V4dGVuZHMoe1xuICAgIHJvbGU6IFwibWVudVwiLFxuICAgIHJlZjogaGFuZGxlUmVmLFxuICAgIGNsYXNzTmFtZTogY2xhc3NOYW1lLFxuICAgIG9uS2V5RG93bjogaGFuZGxlS2V5RG93bixcbiAgICB0YWJJbmRleDogYXV0b0ZvY3VzID8gMCA6IC0xXG4gIH0sIG90aGVyKSwgaXRlbXMpO1xufSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBNZW51TGlzdC5wcm9wVHlwZXMgPSB7XG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIFdhcm5pbmcgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgLy8gfCBUaGVzZSBQcm9wVHlwZXMgYXJlIGdlbmVyYXRlZCBmcm9tIHRoZSBUeXBlU2NyaXB0IHR5cGUgZGVmaW5pdGlvbnMgfFxuICAvLyB8ICAgICBUbyB1cGRhdGUgdGhlbSBlZGl0IHRoZSBkLnRzIGZpbGUgYW5kIHJ1biBcInlhcm4gcHJvcHR5cGVzXCIgICAgIHxcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHdpbGwgZm9jdXMgdGhlIGBbcm9sZT1cIm1lbnVcIl1gIGNvbnRhaW5lciBhbmQgbW92ZSBpbnRvIHRhYiBvcmRlci5cbiAgICovXG4gIGF1dG9Gb2N1czogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgd2lsbCBmb2N1cyB0aGUgZmlyc3QgbWVudWl0ZW0gaWYgYHZhcmlhbnQ9XCJtZW51XCJgIG9yIHNlbGVjdGVkIGl0ZW1cbiAgICogaWYgYHZhcmlhbnQ9XCJzZWxlY3RlZE1lbnVcImAuXG4gICAqL1xuICBhdXRvRm9jdXNJdGVtOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogTWVudUxpc3QgY29udGVudHMsIG5vcm1hbGx5IGBNZW51SXRlbWBzLlxuICAgKi9cbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgd2lsbCBhbGxvdyBmb2N1cyBvbiBkaXNhYmxlZCBpdGVtcy5cbiAgICovXG4gIGRpc2FibGVkSXRlbXNGb2N1c2FibGU6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBtZW51IGl0ZW1zIHdpbGwgbm90IHdyYXAgZm9jdXMuXG4gICAqL1xuICBkaXNhYmxlTGlzdFdyYXA6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBvbktleURvd246IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBUaGUgdmFyaWFudCB0byB1c2UuIFVzZSBgbWVudWAgdG8gcHJldmVudCBzZWxlY3RlZCBpdGVtcyBmcm9tIGltcGFjdGluZyB0aGUgaW5pdGlhbCBmb2N1c1xuICAgKiBhbmQgdGhlIHZlcnRpY2FsIGFsaWdubWVudCByZWxhdGl2ZSB0byB0aGUgYW5jaG9yIGVsZW1lbnQuXG4gICAqL1xuICB2YXJpYW50OiBQcm9wVHlwZXMub25lT2YoWydtZW51JywgJ3NlbGVjdGVkTWVudSddKVxufSA6IHZvaWQgMDtcbmV4cG9ydCBkZWZhdWx0IE1lbnVMaXN0OyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNcIjtcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IGlzRnJhZ21lbnQgfSBmcm9tICdyZWFjdC1pcyc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGNsc3ggZnJvbSAnY2xzeCc7XG5pbXBvcnQgeyBIVE1MRWxlbWVudFR5cGUgfSBmcm9tICdAbWF0ZXJpYWwtdWkvdXRpbHMnO1xuaW1wb3J0IHdpdGhTdHlsZXMgZnJvbSAnLi4vc3R5bGVzL3dpdGhTdHlsZXMnO1xuaW1wb3J0IFBvcG92ZXIgZnJvbSAnLi4vUG9wb3Zlcic7XG5pbXBvcnQgTWVudUxpc3QgZnJvbSAnLi4vTWVudUxpc3QnO1xuaW1wb3J0ICogYXMgUmVhY3RET00gZnJvbSAncmVhY3QtZG9tJztcbmltcG9ydCBzZXRSZWYgZnJvbSAnLi4vdXRpbHMvc2V0UmVmJztcbmltcG9ydCB1c2VUaGVtZSBmcm9tICcuLi9zdHlsZXMvdXNlVGhlbWUnO1xudmFyIFJUTF9PUklHSU4gPSB7XG4gIHZlcnRpY2FsOiAndG9wJyxcbiAgaG9yaXpvbnRhbDogJ3JpZ2h0J1xufTtcbnZhciBMVFJfT1JJR0lOID0ge1xuICB2ZXJ0aWNhbDogJ3RvcCcsXG4gIGhvcml6b250YWw6ICdsZWZ0J1xufTtcbmV4cG9ydCB2YXIgc3R5bGVzID0ge1xuICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgYFBhcGVyYCBjb21wb25lbnQuICovXG4gIHBhcGVyOiB7XG4gICAgLy8gc3BlY1o6IFRoZSBtYXhpbXVtIGhlaWdodCBvZiBhIHNpbXBsZSBtZW51IHNob3VsZCBiZSBvbmUgb3IgbW9yZSByb3dzIGxlc3MgdGhhbiB0aGUgdmlld1xuICAgIC8vIGhlaWdodC4gVGhpcyBlbnN1cmVzIGEgdGFwYWJsZSBhcmVhIG91dHNpZGUgb2YgdGhlIHNpbXBsZSBtZW51IHdpdGggd2hpY2ggdG8gZGlzbWlzc1xuICAgIC8vIHRoZSBtZW51LlxuICAgIG1heEhlaWdodDogJ2NhbGMoMTAwJSAtIDk2cHgpJyxcbiAgICAvLyBBZGQgaU9TIG1vbWVudHVtIHNjcm9sbGluZy5cbiAgICBXZWJraXRPdmVyZmxvd1Njcm9sbGluZzogJ3RvdWNoJ1xuICB9LFxuXG4gIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSBgTGlzdGAgY29tcG9uZW50IHZpYSBgTWVudUxpc3RgLiAqL1xuICBsaXN0OiB7XG4gICAgLy8gV2UgZGlzYWJsZSB0aGUgZm9jdXMgcmluZyBmb3IgbW91c2UsIHRvdWNoIGFuZCBrZXlib2FyZCB1c2Vycy5cbiAgICBvdXRsaW5lOiAwXG4gIH1cbn07XG52YXIgTWVudSA9IC8qI19fUFVSRV9fKi9SZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIE1lbnUocHJvcHMsIHJlZikge1xuICB2YXIgX3Byb3BzJGF1dG9Gb2N1cyA9IHByb3BzLmF1dG9Gb2N1cyxcbiAgICAgIGF1dG9Gb2N1cyA9IF9wcm9wcyRhdXRvRm9jdXMgPT09IHZvaWQgMCA/IHRydWUgOiBfcHJvcHMkYXV0b0ZvY3VzLFxuICAgICAgY2hpbGRyZW4gPSBwcm9wcy5jaGlsZHJlbixcbiAgICAgIGNsYXNzZXMgPSBwcm9wcy5jbGFzc2VzLFxuICAgICAgX3Byb3BzJGRpc2FibGVBdXRvRm9jID0gcHJvcHMuZGlzYWJsZUF1dG9Gb2N1c0l0ZW0sXG4gICAgICBkaXNhYmxlQXV0b0ZvY3VzSXRlbSA9IF9wcm9wcyRkaXNhYmxlQXV0b0ZvYyA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcHJvcHMkZGlzYWJsZUF1dG9Gb2MsXG4gICAgICBfcHJvcHMkTWVudUxpc3RQcm9wcyA9IHByb3BzLk1lbnVMaXN0UHJvcHMsXG4gICAgICBNZW51TGlzdFByb3BzID0gX3Byb3BzJE1lbnVMaXN0UHJvcHMgPT09IHZvaWQgMCA/IHt9IDogX3Byb3BzJE1lbnVMaXN0UHJvcHMsXG4gICAgICBvbkNsb3NlID0gcHJvcHMub25DbG9zZSxcbiAgICAgIG9uRW50ZXJpbmcgPSBwcm9wcy5vbkVudGVyaW5nLFxuICAgICAgb3BlbiA9IHByb3BzLm9wZW4sXG4gICAgICBfcHJvcHMkUGFwZXJQcm9wcyA9IHByb3BzLlBhcGVyUHJvcHMsXG4gICAgICBQYXBlclByb3BzID0gX3Byb3BzJFBhcGVyUHJvcHMgPT09IHZvaWQgMCA/IHt9IDogX3Byb3BzJFBhcGVyUHJvcHMsXG4gICAgICBQb3BvdmVyQ2xhc3NlcyA9IHByb3BzLlBvcG92ZXJDbGFzc2VzLFxuICAgICAgX3Byb3BzJHRyYW5zaXRpb25EdXJhID0gcHJvcHMudHJhbnNpdGlvbkR1cmF0aW9uLFxuICAgICAgdHJhbnNpdGlvbkR1cmF0aW9uID0gX3Byb3BzJHRyYW5zaXRpb25EdXJhID09PSB2b2lkIDAgPyAnYXV0bycgOiBfcHJvcHMkdHJhbnNpdGlvbkR1cmEsXG4gICAgICBfcHJvcHMkdmFyaWFudCA9IHByb3BzLnZhcmlhbnQsXG4gICAgICB2YXJpYW50ID0gX3Byb3BzJHZhcmlhbnQgPT09IHZvaWQgMCA/ICdzZWxlY3RlZE1lbnUnIDogX3Byb3BzJHZhcmlhbnQsXG4gICAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhwcm9wcywgW1wiYXV0b0ZvY3VzXCIsIFwiY2hpbGRyZW5cIiwgXCJjbGFzc2VzXCIsIFwiZGlzYWJsZUF1dG9Gb2N1c0l0ZW1cIiwgXCJNZW51TGlzdFByb3BzXCIsIFwib25DbG9zZVwiLCBcIm9uRW50ZXJpbmdcIiwgXCJvcGVuXCIsIFwiUGFwZXJQcm9wc1wiLCBcIlBvcG92ZXJDbGFzc2VzXCIsIFwidHJhbnNpdGlvbkR1cmF0aW9uXCIsIFwidmFyaWFudFwiXSk7XG5cbiAgdmFyIHRoZW1lID0gdXNlVGhlbWUoKTtcbiAgdmFyIGF1dG9Gb2N1c0l0ZW0gPSBhdXRvRm9jdXMgJiYgIWRpc2FibGVBdXRvRm9jdXNJdGVtICYmIG9wZW47XG4gIHZhciBtZW51TGlzdEFjdGlvbnNSZWYgPSBSZWFjdC51c2VSZWYobnVsbCk7XG4gIHZhciBjb250ZW50QW5jaG9yUmVmID0gUmVhY3QudXNlUmVmKG51bGwpO1xuXG4gIHZhciBnZXRDb250ZW50QW5jaG9yRWwgPSBmdW5jdGlvbiBnZXRDb250ZW50QW5jaG9yRWwoKSB7XG4gICAgcmV0dXJuIGNvbnRlbnRBbmNob3JSZWYuY3VycmVudDtcbiAgfTtcblxuICB2YXIgaGFuZGxlRW50ZXJpbmcgPSBmdW5jdGlvbiBoYW5kbGVFbnRlcmluZyhlbGVtZW50LCBpc0FwcGVhcmluZykge1xuICAgIGlmIChtZW51TGlzdEFjdGlvbnNSZWYuY3VycmVudCkge1xuICAgICAgbWVudUxpc3RBY3Rpb25zUmVmLmN1cnJlbnQuYWRqdXN0U3R5bGVGb3JTY3JvbGxiYXIoZWxlbWVudCwgdGhlbWUpO1xuICAgIH1cblxuICAgIGlmIChvbkVudGVyaW5nKSB7XG4gICAgICBvbkVudGVyaW5nKGVsZW1lbnQsIGlzQXBwZWFyaW5nKTtcbiAgICB9XG4gIH07XG5cbiAgdmFyIGhhbmRsZUxpc3RLZXlEb3duID0gZnVuY3Rpb24gaGFuZGxlTGlzdEtleURvd24oZXZlbnQpIHtcbiAgICBpZiAoZXZlbnQua2V5ID09PSAnVGFiJykge1xuICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcblxuICAgICAgaWYgKG9uQ2xvc2UpIHtcbiAgICAgICAgb25DbG9zZShldmVudCwgJ3RhYktleURvd24nKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG4gIC8qKlxuICAgKiB0aGUgaW5kZXggb2YgdGhlIGl0ZW0gc2hvdWxkIHJlY2VpdmUgZm9jdXNcbiAgICogaW4gYSBgdmFyaWFudD1cInNlbGVjdGVkTWVudVwiYCBpdCdzIHRoZSBmaXJzdCBgc2VsZWN0ZWRgIGl0ZW1cbiAgICogb3RoZXJ3aXNlIGl0J3MgdGhlIHZlcnkgZmlyc3QgaXRlbS5cbiAgICovXG5cblxuICB2YXIgYWN0aXZlSXRlbUluZGV4ID0gLTE7IC8vIHNpbmNlIHdlIGluamVjdCBmb2N1cyByZWxhdGVkIHByb3BzIGludG8gY2hpbGRyZW4gd2UgaGF2ZSB0byBkbyBhIGxvb2thaGVhZFxuICAvLyB0byBjaGVjayBpZiB0aGVyZSBpcyBhIGBzZWxlY3RlZGAgaXRlbS4gV2UncmUgbG9va2luZyBmb3IgdGhlIGxhc3QgYHNlbGVjdGVkYFxuICAvLyBpdGVtIGFuZCB1c2UgdGhlIGZpcnN0IHZhbGlkIGl0ZW0gYXMgYSBmYWxsYmFja1xuXG4gIFJlYWN0LkNoaWxkcmVuLm1hcChjaGlsZHJlbiwgZnVuY3Rpb24gKGNoaWxkLCBpbmRleCkge1xuICAgIGlmICghIC8qI19fUFVSRV9fKi9SZWFjdC5pc1ZhbGlkRWxlbWVudChjaGlsZCkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgaWYgKGlzRnJhZ21lbnQoY2hpbGQpKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoW1wiTWF0ZXJpYWwtVUk6IFRoZSBNZW51IGNvbXBvbmVudCBkb2Vzbid0IGFjY2VwdCBhIEZyYWdtZW50IGFzIGEgY2hpbGQuXCIsICdDb25zaWRlciBwcm92aWRpbmcgYW4gYXJyYXkgaW5zdGVhZC4nXS5qb2luKCdcXG4nKSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKCFjaGlsZC5wcm9wcy5kaXNhYmxlZCkge1xuICAgICAgaWYgKHZhcmlhbnQgIT09IFwibWVudVwiICYmIGNoaWxkLnByb3BzLnNlbGVjdGVkKSB7XG4gICAgICAgIGFjdGl2ZUl0ZW1JbmRleCA9IGluZGV4O1xuICAgICAgfSBlbHNlIGlmIChhY3RpdmVJdGVtSW5kZXggPT09IC0xKSB7XG4gICAgICAgIGFjdGl2ZUl0ZW1JbmRleCA9IGluZGV4O1xuICAgICAgfVxuICAgIH1cbiAgfSk7XG4gIHZhciBpdGVtcyA9IFJlYWN0LkNoaWxkcmVuLm1hcChjaGlsZHJlbiwgZnVuY3Rpb24gKGNoaWxkLCBpbmRleCkge1xuICAgIGlmIChpbmRleCA9PT0gYWN0aXZlSXRlbUluZGV4KSB7XG4gICAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNsb25lRWxlbWVudChjaGlsZCwge1xuICAgICAgICByZWY6IGZ1bmN0aW9uIHJlZihpbnN0YW5jZSkge1xuICAgICAgICAgIC8vICNTdHJpY3RNb2RlIHJlYWR5XG4gICAgICAgICAgY29udGVudEFuY2hvclJlZi5jdXJyZW50ID0gUmVhY3RET00uZmluZERPTU5vZGUoaW5zdGFuY2UpO1xuICAgICAgICAgIHNldFJlZihjaGlsZC5yZWYsIGluc3RhbmNlKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGNoaWxkO1xuICB9KTtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFBvcG92ZXIsIF9leHRlbmRzKHtcbiAgICBnZXRDb250ZW50QW5jaG9yRWw6IGdldENvbnRlbnRBbmNob3JFbCxcbiAgICBjbGFzc2VzOiBQb3BvdmVyQ2xhc3NlcyxcbiAgICBvbkNsb3NlOiBvbkNsb3NlLFxuICAgIG9uRW50ZXJpbmc6IGhhbmRsZUVudGVyaW5nLFxuICAgIGFuY2hvck9yaWdpbjogdGhlbWUuZGlyZWN0aW9uID09PSAncnRsJyA/IFJUTF9PUklHSU4gOiBMVFJfT1JJR0lOLFxuICAgIHRyYW5zZm9ybU9yaWdpbjogdGhlbWUuZGlyZWN0aW9uID09PSAncnRsJyA/IFJUTF9PUklHSU4gOiBMVFJfT1JJR0lOLFxuICAgIFBhcGVyUHJvcHM6IF9leHRlbmRzKHt9LCBQYXBlclByb3BzLCB7XG4gICAgICBjbGFzc2VzOiBfZXh0ZW5kcyh7fSwgUGFwZXJQcm9wcy5jbGFzc2VzLCB7XG4gICAgICAgIHJvb3Q6IGNsYXNzZXMucGFwZXJcbiAgICAgIH0pXG4gICAgfSksXG4gICAgb3Blbjogb3BlbixcbiAgICByZWY6IHJlZixcbiAgICB0cmFuc2l0aW9uRHVyYXRpb246IHRyYW5zaXRpb25EdXJhdGlvblxuICB9LCBvdGhlciksIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KE1lbnVMaXN0LCBfZXh0ZW5kcyh7XG4gICAgb25LZXlEb3duOiBoYW5kbGVMaXN0S2V5RG93bixcbiAgICBhY3Rpb25zOiBtZW51TGlzdEFjdGlvbnNSZWYsXG4gICAgYXV0b0ZvY3VzOiBhdXRvRm9jdXMgJiYgKGFjdGl2ZUl0ZW1JbmRleCA9PT0gLTEgfHwgZGlzYWJsZUF1dG9Gb2N1c0l0ZW0pLFxuICAgIGF1dG9Gb2N1c0l0ZW06IGF1dG9Gb2N1c0l0ZW0sXG4gICAgdmFyaWFudDogdmFyaWFudFxuICB9LCBNZW51TGlzdFByb3BzLCB7XG4gICAgY2xhc3NOYW1lOiBjbHN4KGNsYXNzZXMubGlzdCwgTWVudUxpc3RQcm9wcy5jbGFzc05hbWUpXG4gIH0pLCBpdGVtcykpO1xufSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBNZW51LnByb3BUeXBlcyA9IHtcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gV2FybmluZyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAvLyB8IFRoZXNlIFByb3BUeXBlcyBhcmUgZ2VuZXJhdGVkIGZyb20gdGhlIFR5cGVTY3JpcHQgdHlwZSBkZWZpbml0aW9ucyB8XG4gIC8vIHwgICAgIFRvIHVwZGF0ZSB0aGVtIGVkaXQgdGhlIGQudHMgZmlsZSBhbmQgcnVuIFwieWFybiBwcm9wdHlwZXNcIiAgICAgfFxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbiAgLyoqXG4gICAqIEEgSFRNTCBlbGVtZW50LCBvciBhIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyBpdC5cbiAgICogSXQncyB1c2VkIHRvIHNldCB0aGUgcG9zaXRpb24gb2YgdGhlIG1lbnUuXG4gICAqL1xuICBhbmNob3JFbDogUHJvcFR5cGVzXG4gIC8qIEB0eXBlc2NyaXB0LXRvLXByb3B0eXBlcy1pZ25vcmUgKi9cbiAgLm9uZU9mVHlwZShbSFRNTEVsZW1lbnRUeXBlLCBQcm9wVHlwZXMuZnVuY10pLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAgKERlZmF1bHQpIHdpbGwgZm9jdXMgdGhlIGBbcm9sZT1cIm1lbnVcIl1gIGlmIG5vIGZvY3VzYWJsZSBjaGlsZCBpcyBmb3VuZC4gRGlzYWJsZWRcbiAgICogY2hpbGRyZW4gYXJlIG5vdCBmb2N1c2FibGUuIElmIHlvdSBzZXQgdGhpcyBwcm9wIHRvIGBmYWxzZWAgZm9jdXMgd2lsbCBiZSBwbGFjZWRcbiAgICogb24gdGhlIHBhcmVudCBtb2RhbCBjb250YWluZXIuIFRoaXMgaGFzIHNldmVyZSBhY2Nlc3NpYmlsaXR5IGltcGxpY2F0aW9uc1xuICAgKiBhbmQgc2hvdWxkIG9ubHkgYmUgY29uc2lkZXJlZCBpZiB5b3UgbWFuYWdlIGZvY3VzIG90aGVyd2lzZS5cbiAgICovXG4gIGF1dG9Gb2N1czogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIE1lbnUgY29udGVudHMsIG5vcm1hbGx5IGBNZW51SXRlbWBzLlxuICAgKi9cbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuXG4gIC8qKlxuICAgKiBPdmVycmlkZSBvciBleHRlbmQgdGhlIHN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAqIFNlZSBbQ1NTIEFQSV0oI2NzcykgYmVsb3cgZm9yIG1vcmUgZGV0YWlscy5cbiAgICovXG4gIGNsYXNzZXM6IFByb3BUeXBlcy5vYmplY3QsXG5cbiAgLyoqXG4gICAqIFdoZW4gb3BlbmluZyB0aGUgbWVudSB3aWxsIG5vdCBmb2N1cyB0aGUgYWN0aXZlIGl0ZW0gYnV0IHRoZSBgW3JvbGU9XCJtZW51XCJdYFxuICAgKiB1bmxlc3MgYGF1dG9Gb2N1c2AgaXMgYWxzbyBzZXQgdG8gYGZhbHNlYC4gTm90IHVzaW5nIHRoZSBkZWZhdWx0IG1lYW5zIG5vdFxuICAgKiBmb2xsb3dpbmcgV0FJLUFSSUEgYXV0aG9yaW5nIHByYWN0aWNlcy4gUGxlYXNlIGJlIGNvbnNpZGVyYXRlIGFib3V0IHBvc3NpYmxlXG4gICAqIGFjY2Vzc2liaWxpdHkgaW1wbGljYXRpb25zLlxuICAgKi9cbiAgZGlzYWJsZUF1dG9Gb2N1c0l0ZW06IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBQcm9wcyBhcHBsaWVkIHRvIHRoZSBbYE1lbnVMaXN0YF0oL2FwaS9tZW51LWxpc3QvKSBlbGVtZW50LlxuICAgKi9cbiAgTWVudUxpc3RQcm9wczogUHJvcFR5cGVzLm9iamVjdCxcblxuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgd2hlbiB0aGUgY29tcG9uZW50IHJlcXVlc3RzIHRvIGJlIGNsb3NlZC5cbiAgICpcbiAgICogQHBhcmFtIHtvYmplY3R9IGV2ZW50IFRoZSBldmVudCBzb3VyY2Ugb2YgdGhlIGNhbGxiYWNrLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gcmVhc29uIENhbiBiZTogYFwiZXNjYXBlS2V5RG93blwiYCwgYFwiYmFja2Ryb3BDbGlja1wiYCwgYFwidGFiS2V5RG93blwiYC5cbiAgICovXG4gIG9uQ2xvc2U6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCBiZWZvcmUgdGhlIE1lbnUgZW50ZXJzLlxuICAgKi9cbiAgb25FbnRlcjogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIHdoZW4gdGhlIE1lbnUgaGFzIGVudGVyZWQuXG4gICAqL1xuICBvbkVudGVyZWQ6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCB3aGVuIHRoZSBNZW51IGlzIGVudGVyaW5nLlxuICAgKi9cbiAgb25FbnRlcmluZzogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIGJlZm9yZSB0aGUgTWVudSBleGl0cy5cbiAgICovXG4gIG9uRXhpdDogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIHdoZW4gdGhlIE1lbnUgaGFzIGV4aXRlZC5cbiAgICovXG4gIG9uRXhpdGVkOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgd2hlbiB0aGUgTWVudSBpcyBleGl0aW5nLlxuICAgKi9cbiAgb25FeGl0aW5nOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgbWVudSBpcyB2aXNpYmxlLlxuICAgKi9cbiAgb3BlbjogUHJvcFR5cGVzLmJvb2wuaXNSZXF1aXJlZCxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgUGFwZXJQcm9wczogUHJvcFR5cGVzLm9iamVjdCxcblxuICAvKipcbiAgICogYGNsYXNzZXNgIHByb3AgYXBwbGllZCB0byB0aGUgW2BQb3BvdmVyYF0oL2FwaS9wb3BvdmVyLykgZWxlbWVudC5cbiAgICovXG4gIFBvcG92ZXJDbGFzc2VzOiBQcm9wVHlwZXMub2JqZWN0LFxuXG4gIC8qKlxuICAgKiBUaGUgbGVuZ3RoIG9mIHRoZSB0cmFuc2l0aW9uIGluIGBtc2AsIG9yICdhdXRvJ1xuICAgKi9cbiAgdHJhbnNpdGlvbkR1cmF0aW9uOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMub25lT2YoWydhdXRvJ10pLCBQcm9wVHlwZXMubnVtYmVyLCBQcm9wVHlwZXMuc2hhcGUoe1xuICAgIGFwcGVhcjogUHJvcFR5cGVzLm51bWJlcixcbiAgICBlbnRlcjogUHJvcFR5cGVzLm51bWJlcixcbiAgICBleGl0OiBQcm9wVHlwZXMubnVtYmVyXG4gIH0pXSksXG5cbiAgLyoqXG4gICAqIFRoZSB2YXJpYW50IHRvIHVzZS4gVXNlIGBtZW51YCB0byBwcmV2ZW50IHNlbGVjdGVkIGl0ZW1zIGZyb20gaW1wYWN0aW5nIHRoZSBpbml0aWFsIGZvY3VzXG4gICAqIGFuZCB0aGUgdmVydGljYWwgYWxpZ25tZW50IHJlbGF0aXZlIHRvIHRoZSBhbmNob3IgZWxlbWVudC5cbiAgICovXG4gIHZhcmlhbnQ6IFByb3BUeXBlcy5vbmVPZihbJ21lbnUnLCAnc2VsZWN0ZWRNZW51J10pXG59IDogdm9pZCAwO1xuZXhwb3J0IGRlZmF1bHQgd2l0aFN0eWxlcyhzdHlsZXMsIHtcbiAgbmFtZTogJ011aU1lbnUnXG59KShNZW51KTsiLCIvKiBlc2xpbnQtZGlzYWJsZSByZWFjdC1ob29rcy9ydWxlcy1vZi1ob29rcywgcmVhY3QtaG9va3MvZXhoYXVzdGl2ZS1kZXBzICovXG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB1c2VDb250cm9sbGVkKF9yZWYpIHtcbiAgdmFyIGNvbnRyb2xsZWQgPSBfcmVmLmNvbnRyb2xsZWQsXG4gICAgICBkZWZhdWx0UHJvcCA9IF9yZWYuZGVmYXVsdCxcbiAgICAgIG5hbWUgPSBfcmVmLm5hbWUsXG4gICAgICBfcmVmJHN0YXRlID0gX3JlZi5zdGF0ZSxcbiAgICAgIHN0YXRlID0gX3JlZiRzdGF0ZSA9PT0gdm9pZCAwID8gJ3ZhbHVlJyA6IF9yZWYkc3RhdGU7XG5cbiAgdmFyIF9SZWFjdCR1c2VSZWYgPSBSZWFjdC51c2VSZWYoY29udHJvbGxlZCAhPT0gdW5kZWZpbmVkKSxcbiAgICAgIGlzQ29udHJvbGxlZCA9IF9SZWFjdCR1c2VSZWYuY3VycmVudDtcblxuICB2YXIgX1JlYWN0JHVzZVN0YXRlID0gUmVhY3QudXNlU3RhdGUoZGVmYXVsdFByb3ApLFxuICAgICAgdmFsdWVTdGF0ZSA9IF9SZWFjdCR1c2VTdGF0ZVswXSxcbiAgICAgIHNldFZhbHVlID0gX1JlYWN0JHVzZVN0YXRlWzFdO1xuXG4gIHZhciB2YWx1ZSA9IGlzQ29udHJvbGxlZCA/IGNvbnRyb2xsZWQgOiB2YWx1ZVN0YXRlO1xuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgUmVhY3QudXNlRWZmZWN0KGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmIChpc0NvbnRyb2xsZWQgIT09IChjb250cm9sbGVkICE9PSB1bmRlZmluZWQpKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoW1wiTWF0ZXJpYWwtVUk6IEEgY29tcG9uZW50IGlzIGNoYW5naW5nIHRoZSBcIi5jb25jYXQoaXNDb250cm9sbGVkID8gJycgOiAndW4nLCBcImNvbnRyb2xsZWQgXCIpLmNvbmNhdChzdGF0ZSwgXCIgc3RhdGUgb2YgXCIpLmNvbmNhdChuYW1lLCBcIiB0byBiZSBcIikuY29uY2F0KGlzQ29udHJvbGxlZCA/ICd1bicgOiAnJywgXCJjb250cm9sbGVkLlwiKSwgJ0VsZW1lbnRzIHNob3VsZCBub3Qgc3dpdGNoIGZyb20gdW5jb250cm9sbGVkIHRvIGNvbnRyb2xsZWQgKG9yIHZpY2UgdmVyc2EpLicsIFwiRGVjaWRlIGJldHdlZW4gdXNpbmcgYSBjb250cm9sbGVkIG9yIHVuY29udHJvbGxlZCBcIi5jb25jYXQobmFtZSwgXCIgXCIpICsgJ2VsZW1lbnQgZm9yIHRoZSBsaWZldGltZSBvZiB0aGUgY29tcG9uZW50LicsIFwiVGhlIG5hdHVyZSBvZiB0aGUgc3RhdGUgaXMgZGV0ZXJtaW5lZCBkdXJpbmcgdGhlIGZpcnN0IHJlbmRlciwgaXQncyBjb25zaWRlcmVkIGNvbnRyb2xsZWQgaWYgdGhlIHZhbHVlIGlzIG5vdCBgdW5kZWZpbmVkYC5cIiwgJ01vcmUgaW5mbzogaHR0cHM6Ly9mYi5tZS9yZWFjdC1jb250cm9sbGVkLWNvbXBvbmVudHMnXS5qb2luKCdcXG4nKSk7XG4gICAgICB9XG4gICAgfSwgW2NvbnRyb2xsZWRdKTtcblxuICAgIHZhciBfUmVhY3QkdXNlUmVmMiA9IFJlYWN0LnVzZVJlZihkZWZhdWx0UHJvcCksXG4gICAgICAgIGRlZmF1bHRWYWx1ZSA9IF9SZWFjdCR1c2VSZWYyLmN1cnJlbnQ7XG5cbiAgICBSZWFjdC51c2VFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKCFpc0NvbnRyb2xsZWQgJiYgZGVmYXVsdFZhbHVlICE9PSBkZWZhdWx0UHJvcCkge1xuICAgICAgICBjb25zb2xlLmVycm9yKFtcIk1hdGVyaWFsLVVJOiBBIGNvbXBvbmVudCBpcyBjaGFuZ2luZyB0aGUgZGVmYXVsdCBcIi5jb25jYXQoc3RhdGUsIFwiIHN0YXRlIG9mIGFuIHVuY29udHJvbGxlZCBcIikuY29uY2F0KG5hbWUsIFwiIGFmdGVyIGJlaW5nIGluaXRpYWxpemVkLiBcIikgKyBcIlRvIHN1cHByZXNzIHRoaXMgd2FybmluZyBvcHQgdG8gdXNlIGEgY29udHJvbGxlZCBcIi5jb25jYXQobmFtZSwgXCIuXCIpXS5qb2luKCdcXG4nKSk7XG4gICAgICB9XG4gICAgfSwgW0pTT04uc3RyaW5naWZ5KGRlZmF1bHRQcm9wKV0pO1xuICB9XG5cbiAgdmFyIHNldFZhbHVlSWZVbmNvbnRyb2xsZWQgPSBSZWFjdC51c2VDYWxsYmFjayhmdW5jdGlvbiAobmV3VmFsdWUpIHtcbiAgICBpZiAoIWlzQ29udHJvbGxlZCkge1xuICAgICAgc2V0VmFsdWUobmV3VmFsdWUpO1xuICAgIH1cbiAgfSwgW10pO1xuICByZXR1cm4gW3ZhbHVlLCBzZXRWYWx1ZUlmVW5jb250cm9sbGVkXTtcbn0iLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfc2xpY2VkVG9BcnJheSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vc2xpY2VkVG9BcnJheVwiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNcIjtcbmltcG9ydCBfdHlwZW9mIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS90eXBlb2ZcIjtcbmltcG9ydCB7IGZvcm1hdE11aUVycm9yTWVzc2FnZSBhcyBfZm9ybWF0TXVpRXJyb3JNZXNzYWdlIH0gZnJvbSBcIkBtYXRlcmlhbC11aS91dGlsc1wiO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgaXNGcmFnbWVudCB9IGZyb20gJ3JlYWN0LWlzJztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgY2xzeCBmcm9tICdjbHN4JztcbmltcG9ydCBvd25lckRvY3VtZW50IGZyb20gJy4uL3V0aWxzL293bmVyRG9jdW1lbnQnO1xuaW1wb3J0IGNhcGl0YWxpemUgZnJvbSAnLi4vdXRpbHMvY2FwaXRhbGl6ZSc7XG5pbXBvcnQgeyByZWZUeXBlIH0gZnJvbSAnQG1hdGVyaWFsLXVpL3V0aWxzJztcbmltcG9ydCBNZW51IGZyb20gJy4uL01lbnUvTWVudSc7XG5pbXBvcnQgeyBpc0ZpbGxlZCB9IGZyb20gJy4uL0lucHV0QmFzZS91dGlscyc7XG5pbXBvcnQgdXNlRm9ya1JlZiBmcm9tICcuLi91dGlscy91c2VGb3JrUmVmJztcbmltcG9ydCB1c2VDb250cm9sbGVkIGZyb20gJy4uL3V0aWxzL3VzZUNvbnRyb2xsZWQnO1xuXG5mdW5jdGlvbiBhcmVFcXVhbFZhbHVlcyhhLCBiKSB7XG4gIGlmIChfdHlwZW9mKGIpID09PSAnb2JqZWN0JyAmJiBiICE9PSBudWxsKSB7XG4gICAgcmV0dXJuIGEgPT09IGI7XG4gIH1cblxuICByZXR1cm4gU3RyaW5nKGEpID09PSBTdHJpbmcoYik7XG59XG5cbmZ1bmN0aW9uIGlzRW1wdHkoZGlzcGxheSkge1xuICByZXR1cm4gZGlzcGxheSA9PSBudWxsIHx8IHR5cGVvZiBkaXNwbGF5ID09PSAnc3RyaW5nJyAmJiAhZGlzcGxheS50cmltKCk7XG59XG4vKipcbiAqIEBpZ25vcmUgLSBpbnRlcm5hbCBjb21wb25lbnQuXG4gKi9cblxuXG52YXIgU2VsZWN0SW5wdXQgPSAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBTZWxlY3RJbnB1dChwcm9wcywgcmVmKSB7XG4gIHZhciBhcmlhTGFiZWwgPSBwcm9wc1snYXJpYS1sYWJlbCddLFxuICAgICAgYXV0b0ZvY3VzID0gcHJvcHMuYXV0b0ZvY3VzLFxuICAgICAgYXV0b1dpZHRoID0gcHJvcHMuYXV0b1dpZHRoLFxuICAgICAgY2hpbGRyZW4gPSBwcm9wcy5jaGlsZHJlbixcbiAgICAgIGNsYXNzZXMgPSBwcm9wcy5jbGFzc2VzLFxuICAgICAgY2xhc3NOYW1lID0gcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgZGVmYXVsdFZhbHVlID0gcHJvcHMuZGVmYXVsdFZhbHVlLFxuICAgICAgZGlzYWJsZWQgPSBwcm9wcy5kaXNhYmxlZCxcbiAgICAgIGRpc3BsYXlFbXB0eSA9IHByb3BzLmRpc3BsYXlFbXB0eSxcbiAgICAgIEljb25Db21wb25lbnQgPSBwcm9wcy5JY29uQ29tcG9uZW50LFxuICAgICAgaW5wdXRSZWZQcm9wID0gcHJvcHMuaW5wdXRSZWYsXG4gICAgICBsYWJlbElkID0gcHJvcHMubGFiZWxJZCxcbiAgICAgIF9wcm9wcyRNZW51UHJvcHMgPSBwcm9wcy5NZW51UHJvcHMsXG4gICAgICBNZW51UHJvcHMgPSBfcHJvcHMkTWVudVByb3BzID09PSB2b2lkIDAgPyB7fSA6IF9wcm9wcyRNZW51UHJvcHMsXG4gICAgICBtdWx0aXBsZSA9IHByb3BzLm11bHRpcGxlLFxuICAgICAgbmFtZSA9IHByb3BzLm5hbWUsXG4gICAgICBvbkJsdXIgPSBwcm9wcy5vbkJsdXIsXG4gICAgICBvbkNoYW5nZSA9IHByb3BzLm9uQ2hhbmdlLFxuICAgICAgb25DbG9zZSA9IHByb3BzLm9uQ2xvc2UsXG4gICAgICBvbkZvY3VzID0gcHJvcHMub25Gb2N1cyxcbiAgICAgIG9uT3BlbiA9IHByb3BzLm9uT3BlbixcbiAgICAgIG9wZW5Qcm9wID0gcHJvcHMub3BlbixcbiAgICAgIHJlYWRPbmx5ID0gcHJvcHMucmVhZE9ubHksXG4gICAgICByZW5kZXJWYWx1ZSA9IHByb3BzLnJlbmRlclZhbHVlLFxuICAgICAgX3Byb3BzJFNlbGVjdERpc3BsYXlQID0gcHJvcHMuU2VsZWN0RGlzcGxheVByb3BzLFxuICAgICAgU2VsZWN0RGlzcGxheVByb3BzID0gX3Byb3BzJFNlbGVjdERpc3BsYXlQID09PSB2b2lkIDAgPyB7fSA6IF9wcm9wcyRTZWxlY3REaXNwbGF5UCxcbiAgICAgIHRhYkluZGV4UHJvcCA9IHByb3BzLnRhYkluZGV4LFxuICAgICAgdHlwZSA9IHByb3BzLnR5cGUsXG4gICAgICB2YWx1ZVByb3AgPSBwcm9wcy52YWx1ZSxcbiAgICAgIF9wcm9wcyR2YXJpYW50ID0gcHJvcHMudmFyaWFudCxcbiAgICAgIHZhcmlhbnQgPSBfcHJvcHMkdmFyaWFudCA9PT0gdm9pZCAwID8gJ3N0YW5kYXJkJyA6IF9wcm9wcyR2YXJpYW50LFxuICAgICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMocHJvcHMsIFtcImFyaWEtbGFiZWxcIiwgXCJhdXRvRm9jdXNcIiwgXCJhdXRvV2lkdGhcIiwgXCJjaGlsZHJlblwiLCBcImNsYXNzZXNcIiwgXCJjbGFzc05hbWVcIiwgXCJkZWZhdWx0VmFsdWVcIiwgXCJkaXNhYmxlZFwiLCBcImRpc3BsYXlFbXB0eVwiLCBcIkljb25Db21wb25lbnRcIiwgXCJpbnB1dFJlZlwiLCBcImxhYmVsSWRcIiwgXCJNZW51UHJvcHNcIiwgXCJtdWx0aXBsZVwiLCBcIm5hbWVcIiwgXCJvbkJsdXJcIiwgXCJvbkNoYW5nZVwiLCBcIm9uQ2xvc2VcIiwgXCJvbkZvY3VzXCIsIFwib25PcGVuXCIsIFwib3BlblwiLCBcInJlYWRPbmx5XCIsIFwicmVuZGVyVmFsdWVcIiwgXCJTZWxlY3REaXNwbGF5UHJvcHNcIiwgXCJ0YWJJbmRleFwiLCBcInR5cGVcIiwgXCJ2YWx1ZVwiLCBcInZhcmlhbnRcIl0pO1xuXG4gIHZhciBfdXNlQ29udHJvbGxlZCA9IHVzZUNvbnRyb2xsZWQoe1xuICAgIGNvbnRyb2xsZWQ6IHZhbHVlUHJvcCxcbiAgICBkZWZhdWx0OiBkZWZhdWx0VmFsdWUsXG4gICAgbmFtZTogJ1NlbGVjdCdcbiAgfSksXG4gICAgICBfdXNlQ29udHJvbGxlZDIgPSBfc2xpY2VkVG9BcnJheShfdXNlQ29udHJvbGxlZCwgMiksXG4gICAgICB2YWx1ZSA9IF91c2VDb250cm9sbGVkMlswXSxcbiAgICAgIHNldFZhbHVlID0gX3VzZUNvbnRyb2xsZWQyWzFdO1xuXG4gIHZhciBpbnB1dFJlZiA9IFJlYWN0LnVzZVJlZihudWxsKTtcblxuICB2YXIgX1JlYWN0JHVzZVN0YXRlID0gUmVhY3QudXNlU3RhdGUobnVsbCksXG4gICAgICBkaXNwbGF5Tm9kZSA9IF9SZWFjdCR1c2VTdGF0ZVswXSxcbiAgICAgIHNldERpc3BsYXlOb2RlID0gX1JlYWN0JHVzZVN0YXRlWzFdO1xuXG4gIHZhciBfUmVhY3QkdXNlUmVmID0gUmVhY3QudXNlUmVmKG9wZW5Qcm9wICE9IG51bGwpLFxuICAgICAgaXNPcGVuQ29udHJvbGxlZCA9IF9SZWFjdCR1c2VSZWYuY3VycmVudDtcblxuICB2YXIgX1JlYWN0JHVzZVN0YXRlMiA9IFJlYWN0LnVzZVN0YXRlKCksXG4gICAgICBtZW51TWluV2lkdGhTdGF0ZSA9IF9SZWFjdCR1c2VTdGF0ZTJbMF0sXG4gICAgICBzZXRNZW51TWluV2lkdGhTdGF0ZSA9IF9SZWFjdCR1c2VTdGF0ZTJbMV07XG5cbiAgdmFyIF9SZWFjdCR1c2VTdGF0ZTMgPSBSZWFjdC51c2VTdGF0ZShmYWxzZSksXG4gICAgICBvcGVuU3RhdGUgPSBfUmVhY3QkdXNlU3RhdGUzWzBdLFxuICAgICAgc2V0T3BlblN0YXRlID0gX1JlYWN0JHVzZVN0YXRlM1sxXTtcblxuICB2YXIgaGFuZGxlUmVmID0gdXNlRm9ya1JlZihyZWYsIGlucHV0UmVmUHJvcCk7XG4gIFJlYWN0LnVzZUltcGVyYXRpdmVIYW5kbGUoaGFuZGxlUmVmLCBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGZvY3VzOiBmdW5jdGlvbiBmb2N1cygpIHtcbiAgICAgICAgZGlzcGxheU5vZGUuZm9jdXMoKTtcbiAgICAgIH0sXG4gICAgICBub2RlOiBpbnB1dFJlZi5jdXJyZW50LFxuICAgICAgdmFsdWU6IHZhbHVlXG4gICAgfTtcbiAgfSwgW2Rpc3BsYXlOb2RlLCB2YWx1ZV0pO1xuICBSZWFjdC51c2VFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgIGlmIChhdXRvRm9jdXMgJiYgZGlzcGxheU5vZGUpIHtcbiAgICAgIGRpc3BsYXlOb2RlLmZvY3VzKCk7XG4gICAgfVxuICB9LCBbYXV0b0ZvY3VzLCBkaXNwbGF5Tm9kZV0pO1xuICBSZWFjdC51c2VFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgIGlmIChkaXNwbGF5Tm9kZSkge1xuICAgICAgdmFyIGxhYmVsID0gb3duZXJEb2N1bWVudChkaXNwbGF5Tm9kZSkuZ2V0RWxlbWVudEJ5SWQobGFiZWxJZCk7XG5cbiAgICAgIGlmIChsYWJlbCkge1xuICAgICAgICB2YXIgaGFuZGxlciA9IGZ1bmN0aW9uIGhhbmRsZXIoKSB7XG4gICAgICAgICAgaWYgKGdldFNlbGVjdGlvbigpLmlzQ29sbGFwc2VkKSB7XG4gICAgICAgICAgICBkaXNwbGF5Tm9kZS5mb2N1cygpO1xuICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICBsYWJlbC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGhhbmRsZXIpO1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgICAgIGxhYmVsLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgaGFuZGxlcik7XG4gICAgICAgIH07XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfSwgW2xhYmVsSWQsIGRpc3BsYXlOb2RlXSk7XG5cbiAgdmFyIHVwZGF0ZSA9IGZ1bmN0aW9uIHVwZGF0ZShvcGVuLCBldmVudCkge1xuICAgIGlmIChvcGVuKSB7XG4gICAgICBpZiAob25PcGVuKSB7XG4gICAgICAgIG9uT3BlbihldmVudCk7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChvbkNsb3NlKSB7XG4gICAgICBvbkNsb3NlKGV2ZW50KTtcbiAgICB9XG5cbiAgICBpZiAoIWlzT3BlbkNvbnRyb2xsZWQpIHtcbiAgICAgIHNldE1lbnVNaW5XaWR0aFN0YXRlKGF1dG9XaWR0aCA/IG51bGwgOiBkaXNwbGF5Tm9kZS5jbGllbnRXaWR0aCk7XG4gICAgICBzZXRPcGVuU3RhdGUob3Blbik7XG4gICAgfVxuICB9O1xuXG4gIHZhciBoYW5kbGVNb3VzZURvd24gPSBmdW5jdGlvbiBoYW5kbGVNb3VzZURvd24oZXZlbnQpIHtcbiAgICAvLyBJZ25vcmUgZXZlcnl0aGluZyBidXQgbGVmdC1jbGlja1xuICAgIGlmIChldmVudC5idXR0b24gIT09IDApIHtcbiAgICAgIHJldHVybjtcbiAgICB9IC8vIEhpamFjayB0aGUgZGVmYXVsdCBmb2N1cyBiZWhhdmlvci5cblxuXG4gICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICBkaXNwbGF5Tm9kZS5mb2N1cygpO1xuICAgIHVwZGF0ZSh0cnVlLCBldmVudCk7XG4gIH07XG5cbiAgdmFyIGhhbmRsZUNsb3NlID0gZnVuY3Rpb24gaGFuZGxlQ2xvc2UoZXZlbnQpIHtcbiAgICB1cGRhdGUoZmFsc2UsIGV2ZW50KTtcbiAgfTtcblxuICB2YXIgY2hpbGRyZW5BcnJheSA9IFJlYWN0LkNoaWxkcmVuLnRvQXJyYXkoY2hpbGRyZW4pOyAvLyBTdXBwb3J0IGF1dG9maWxsLlxuXG4gIHZhciBoYW5kbGVDaGFuZ2UgPSBmdW5jdGlvbiBoYW5kbGVDaGFuZ2UoZXZlbnQpIHtcbiAgICB2YXIgaW5kZXggPSBjaGlsZHJlbkFycmF5Lm1hcChmdW5jdGlvbiAoY2hpbGQpIHtcbiAgICAgIHJldHVybiBjaGlsZC5wcm9wcy52YWx1ZTtcbiAgICB9KS5pbmRleE9mKGV2ZW50LnRhcmdldC52YWx1ZSk7XG5cbiAgICBpZiAoaW5kZXggPT09IC0xKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIGNoaWxkID0gY2hpbGRyZW5BcnJheVtpbmRleF07XG4gICAgc2V0VmFsdWUoY2hpbGQucHJvcHMudmFsdWUpO1xuXG4gICAgaWYgKG9uQ2hhbmdlKSB7XG4gICAgICBvbkNoYW5nZShldmVudCwgY2hpbGQpO1xuICAgIH1cbiAgfTtcblxuICB2YXIgaGFuZGxlSXRlbUNsaWNrID0gZnVuY3Rpb24gaGFuZGxlSXRlbUNsaWNrKGNoaWxkKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgaWYgKCFtdWx0aXBsZSkge1xuICAgICAgICB1cGRhdGUoZmFsc2UsIGV2ZW50KTtcbiAgICAgIH1cblxuICAgICAgdmFyIG5ld1ZhbHVlO1xuXG4gICAgICBpZiAobXVsdGlwbGUpIHtcbiAgICAgICAgbmV3VmFsdWUgPSBBcnJheS5pc0FycmF5KHZhbHVlKSA/IHZhbHVlLnNsaWNlKCkgOiBbXTtcbiAgICAgICAgdmFyIGl0ZW1JbmRleCA9IHZhbHVlLmluZGV4T2YoY2hpbGQucHJvcHMudmFsdWUpO1xuXG4gICAgICAgIGlmIChpdGVtSW5kZXggPT09IC0xKSB7XG4gICAgICAgICAgbmV3VmFsdWUucHVzaChjaGlsZC5wcm9wcy52YWx1ZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbmV3VmFsdWUuc3BsaWNlKGl0ZW1JbmRleCwgMSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG5ld1ZhbHVlID0gY2hpbGQucHJvcHMudmFsdWU7XG4gICAgICB9XG5cbiAgICAgIGlmIChjaGlsZC5wcm9wcy5vbkNsaWNrKSB7XG4gICAgICAgIGNoaWxkLnByb3BzLm9uQ2xpY2soZXZlbnQpO1xuICAgICAgfVxuXG4gICAgICBpZiAodmFsdWUgPT09IG5ld1ZhbHVlKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgc2V0VmFsdWUobmV3VmFsdWUpO1xuXG4gICAgICBpZiAob25DaGFuZ2UpIHtcbiAgICAgICAgZXZlbnQucGVyc2lzdCgpOyAvLyBQcmVhY3Qgc3VwcG9ydCwgdGFyZ2V0IGlzIHJlYWQgb25seSBwcm9wZXJ0eSBvbiBhIG5hdGl2ZSBldmVudC5cblxuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZXZlbnQsICd0YXJnZXQnLCB7XG4gICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgdmFsdWU6IHtcbiAgICAgICAgICAgIHZhbHVlOiBuZXdWYWx1ZSxcbiAgICAgICAgICAgIG5hbWU6IG5hbWVcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICBvbkNoYW5nZShldmVudCwgY2hpbGQpO1xuICAgICAgfVxuICAgIH07XG4gIH07XG5cbiAgdmFyIGhhbmRsZUtleURvd24gPSBmdW5jdGlvbiBoYW5kbGVLZXlEb3duKGV2ZW50KSB7XG4gICAgaWYgKCFyZWFkT25seSkge1xuICAgICAgdmFyIHZhbGlkS2V5cyA9IFsnICcsICdBcnJvd1VwJywgJ0Fycm93RG93bicsIC8vIFRoZSBuYXRpdmUgc2VsZWN0IGRvZXNuJ3QgcmVzcG9uZCB0byBlbnRlciBvbiBNYWNPUywgYnV0IGl0J3MgcmVjb21tZW5kZWQgYnlcbiAgICAgIC8vIGh0dHBzOi8vd3d3LnczLm9yZy9UUi93YWktYXJpYS1wcmFjdGljZXMvZXhhbXBsZXMvbGlzdGJveC9saXN0Ym94LWNvbGxhcHNpYmxlLmh0bWxcbiAgICAgICdFbnRlciddO1xuXG4gICAgICBpZiAodmFsaWRLZXlzLmluZGV4T2YoZXZlbnQua2V5KSAhPT0gLTEpIHtcbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgdXBkYXRlKHRydWUsIGV2ZW50KTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgdmFyIG9wZW4gPSBkaXNwbGF5Tm9kZSAhPT0gbnVsbCAmJiAoaXNPcGVuQ29udHJvbGxlZCA/IG9wZW5Qcm9wIDogb3BlblN0YXRlKTtcblxuICB2YXIgaGFuZGxlQmx1ciA9IGZ1bmN0aW9uIGhhbmRsZUJsdXIoZXZlbnQpIHtcbiAgICAvLyBpZiBvcGVuIGV2ZW50LnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvblxuICAgIGlmICghb3BlbiAmJiBvbkJsdXIpIHtcbiAgICAgIGV2ZW50LnBlcnNpc3QoKTsgLy8gUHJlYWN0IHN1cHBvcnQsIHRhcmdldCBpcyByZWFkIG9ubHkgcHJvcGVydHkgb24gYSBuYXRpdmUgZXZlbnQuXG5cbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShldmVudCwgJ3RhcmdldCcsIHtcbiAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgIHZhbHVlOiB7XG4gICAgICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgICAgIG5hbWU6IG5hbWVcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICBvbkJsdXIoZXZlbnQpO1xuICAgIH1cbiAgfTtcblxuICBkZWxldGUgb3RoZXJbJ2FyaWEtaW52YWxpZCddO1xuICB2YXIgZGlzcGxheTtcbiAgdmFyIGRpc3BsYXlTaW5nbGU7XG4gIHZhciBkaXNwbGF5TXVsdGlwbGUgPSBbXTtcbiAgdmFyIGNvbXB1dGVEaXNwbGF5ID0gZmFsc2U7XG4gIHZhciBmb3VuZE1hdGNoID0gZmFsc2U7IC8vIE5vIG5lZWQgdG8gZGlzcGxheSBhbnkgdmFsdWUgaWYgdGhlIGZpZWxkIGlzIGVtcHR5LlxuXG4gIGlmIChpc0ZpbGxlZCh7XG4gICAgdmFsdWU6IHZhbHVlXG4gIH0pIHx8IGRpc3BsYXlFbXB0eSkge1xuICAgIGlmIChyZW5kZXJWYWx1ZSkge1xuICAgICAgZGlzcGxheSA9IHJlbmRlclZhbHVlKHZhbHVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29tcHV0ZURpc3BsYXkgPSB0cnVlO1xuICAgIH1cbiAgfVxuXG4gIHZhciBpdGVtcyA9IGNoaWxkcmVuQXJyYXkubWFwKGZ1bmN0aW9uIChjaGlsZCkge1xuICAgIGlmICghIC8qI19fUFVSRV9fKi9SZWFjdC5pc1ZhbGlkRWxlbWVudChjaGlsZCkpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBpZiAoaXNGcmFnbWVudChjaGlsZCkpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihbXCJNYXRlcmlhbC1VSTogVGhlIFNlbGVjdCBjb21wb25lbnQgZG9lc24ndCBhY2NlcHQgYSBGcmFnbWVudCBhcyBhIGNoaWxkLlwiLCAnQ29uc2lkZXIgcHJvdmlkaW5nIGFuIGFycmF5IGluc3RlYWQuJ10uam9pbignXFxuJykpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhciBzZWxlY3RlZDtcblxuICAgIGlmIChtdWx0aXBsZSkge1xuICAgICAgaWYgKCFBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gXCJNYXRlcmlhbC1VSTogVGhlIGB2YWx1ZWAgcHJvcCBtdXN0IGJlIGFuIGFycmF5IHdoZW4gdXNpbmcgdGhlIGBTZWxlY3RgIGNvbXBvbmVudCB3aXRoIGBtdWx0aXBsZWAuXCIgOiBfZm9ybWF0TXVpRXJyb3JNZXNzYWdlKDIpKTtcbiAgICAgIH1cblxuICAgICAgc2VsZWN0ZWQgPSB2YWx1ZS5zb21lKGZ1bmN0aW9uICh2KSB7XG4gICAgICAgIHJldHVybiBhcmVFcXVhbFZhbHVlcyh2LCBjaGlsZC5wcm9wcy52YWx1ZSk7XG4gICAgICB9KTtcblxuICAgICAgaWYgKHNlbGVjdGVkICYmIGNvbXB1dGVEaXNwbGF5KSB7XG4gICAgICAgIGRpc3BsYXlNdWx0aXBsZS5wdXNoKGNoaWxkLnByb3BzLmNoaWxkcmVuKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgc2VsZWN0ZWQgPSBhcmVFcXVhbFZhbHVlcyh2YWx1ZSwgY2hpbGQucHJvcHMudmFsdWUpO1xuXG4gICAgICBpZiAoc2VsZWN0ZWQgJiYgY29tcHV0ZURpc3BsYXkpIHtcbiAgICAgICAgZGlzcGxheVNpbmdsZSA9IGNoaWxkLnByb3BzLmNoaWxkcmVuO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChzZWxlY3RlZCkge1xuICAgICAgZm91bmRNYXRjaCA9IHRydWU7XG4gICAgfVxuXG4gICAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jbG9uZUVsZW1lbnQoY2hpbGQsIHtcbiAgICAgICdhcmlhLXNlbGVjdGVkJzogc2VsZWN0ZWQgPyAndHJ1ZScgOiB1bmRlZmluZWQsXG4gICAgICBvbkNsaWNrOiBoYW5kbGVJdGVtQ2xpY2soY2hpbGQpLFxuICAgICAgb25LZXlVcDogZnVuY3Rpb24gb25LZXlVcChldmVudCkge1xuICAgICAgICBpZiAoZXZlbnQua2V5ID09PSAnICcpIHtcbiAgICAgICAgICAvLyBvdGhlcndpc2Ugb3VyIE1lbnVJdGVtcyBkaXNwYXRjaGVzIGEgY2xpY2sgZXZlbnRcbiAgICAgICAgICAvLyBpdCdzIG5vdCBiZWhhdmlvciBvZiB0aGUgbmF0aXZlIDxvcHRpb24+IGFuZCBjYXVzZXNcbiAgICAgICAgICAvLyB0aGUgc2VsZWN0IHRvIGNsb3NlIGltbWVkaWF0ZWx5IHNpbmNlIHdlIG9wZW4gb24gc3BhY2Uga2V5ZG93blxuICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoY2hpbGQucHJvcHMub25LZXlVcCkge1xuICAgICAgICAgIGNoaWxkLnByb3BzLm9uS2V5VXAoZXZlbnQpO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgcm9sZTogJ29wdGlvbicsXG4gICAgICBzZWxlY3RlZDogc2VsZWN0ZWQsXG4gICAgICB2YWx1ZTogdW5kZWZpbmVkLFxuICAgICAgLy8gVGhlIHZhbHVlIGlzIG1vc3QgbGlrZWx5IG5vdCBhIHZhbGlkIEhUTUwgYXR0cmlidXRlLlxuICAgICAgJ2RhdGEtdmFsdWUnOiBjaGlsZC5wcm9wcy52YWx1ZSAvLyBJbnN0ZWFkLCB3ZSBwcm92aWRlIGl0IGFzIGEgZGF0YSBhdHRyaWJ1dGUuXG5cbiAgICB9KTtcbiAgfSk7XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3QtaG9va3MvcnVsZXMtb2YtaG9va3NcbiAgICBSZWFjdC51c2VFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKCFmb3VuZE1hdGNoICYmICFtdWx0aXBsZSAmJiB2YWx1ZSAhPT0gJycpIHtcbiAgICAgICAgdmFyIHZhbHVlcyA9IGNoaWxkcmVuQXJyYXkubWFwKGZ1bmN0aW9uIChjaGlsZCkge1xuICAgICAgICAgIHJldHVybiBjaGlsZC5wcm9wcy52YWx1ZTtcbiAgICAgICAgfSk7XG4gICAgICAgIGNvbnNvbGUud2FybihbXCJNYXRlcmlhbC1VSTogWW91IGhhdmUgcHJvdmlkZWQgYW4gb3V0LW9mLXJhbmdlIHZhbHVlIGBcIi5jb25jYXQodmFsdWUsIFwiYCBmb3IgdGhlIHNlbGVjdCBcIikuY29uY2F0KG5hbWUgPyBcIihuYW1lPVxcXCJcIi5jb25jYXQobmFtZSwgXCJcXFwiKSBcIikgOiAnJywgXCJjb21wb25lbnQuXCIpLCBcIkNvbnNpZGVyIHByb3ZpZGluZyBhIHZhbHVlIHRoYXQgbWF0Y2hlcyBvbmUgb2YgdGhlIGF2YWlsYWJsZSBvcHRpb25zIG9yICcnLlwiLCBcIlRoZSBhdmFpbGFibGUgdmFsdWVzIGFyZSBcIi5jb25jYXQodmFsdWVzLmZpbHRlcihmdW5jdGlvbiAoeCkge1xuICAgICAgICAgIHJldHVybiB4ICE9IG51bGw7XG4gICAgICAgIH0pLm1hcChmdW5jdGlvbiAoeCkge1xuICAgICAgICAgIHJldHVybiBcImBcIi5jb25jYXQoeCwgXCJgXCIpO1xuICAgICAgICB9KS5qb2luKCcsICcpIHx8ICdcIlwiJywgXCIuXCIpXS5qb2luKCdcXG4nKSk7XG4gICAgICB9XG4gICAgfSwgW2ZvdW5kTWF0Y2gsIGNoaWxkcmVuQXJyYXksIG11bHRpcGxlLCBuYW1lLCB2YWx1ZV0pO1xuICB9XG5cbiAgaWYgKGNvbXB1dGVEaXNwbGF5KSB7XG4gICAgZGlzcGxheSA9IG11bHRpcGxlID8gZGlzcGxheU11bHRpcGxlLmpvaW4oJywgJykgOiBkaXNwbGF5U2luZ2xlO1xuICB9IC8vIEF2b2lkIHBlcmZvcm1pbmcgYSBsYXlvdXQgY29tcHV0YXRpb24gaW4gdGhlIHJlbmRlciBtZXRob2QuXG5cblxuICB2YXIgbWVudU1pbldpZHRoID0gbWVudU1pbldpZHRoU3RhdGU7XG5cbiAgaWYgKCFhdXRvV2lkdGggJiYgaXNPcGVuQ29udHJvbGxlZCAmJiBkaXNwbGF5Tm9kZSkge1xuICAgIG1lbnVNaW5XaWR0aCA9IGRpc3BsYXlOb2RlLmNsaWVudFdpZHRoO1xuICB9XG5cbiAgdmFyIHRhYkluZGV4O1xuXG4gIGlmICh0eXBlb2YgdGFiSW5kZXhQcm9wICE9PSAndW5kZWZpbmVkJykge1xuICAgIHRhYkluZGV4ID0gdGFiSW5kZXhQcm9wO1xuICB9IGVsc2Uge1xuICAgIHRhYkluZGV4ID0gZGlzYWJsZWQgPyBudWxsIDogMDtcbiAgfVxuXG4gIHZhciBidXR0b25JZCA9IFNlbGVjdERpc3BsYXlQcm9wcy5pZCB8fCAobmFtZSA/IFwibXVpLWNvbXBvbmVudC1zZWxlY3QtXCIuY29uY2F0KG5hbWUpIDogdW5kZWZpbmVkKTtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFJlYWN0LkZyYWdtZW50LCBudWxsLCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCBfZXh0ZW5kcyh7XG4gICAgY2xhc3NOYW1lOiBjbHN4KGNsYXNzZXMucm9vdCwgLy8gVE9ETyB2NTogbWVyZ2Ugcm9vdCBhbmQgc2VsZWN0XG4gICAgY2xhc3Nlcy5zZWxlY3QsIGNsYXNzZXMuc2VsZWN0TWVudSwgY2xhc3Nlc1t2YXJpYW50XSwgY2xhc3NOYW1lLCBkaXNhYmxlZCAmJiBjbGFzc2VzLmRpc2FibGVkKSxcbiAgICByZWY6IHNldERpc3BsYXlOb2RlLFxuICAgIHRhYkluZGV4OiB0YWJJbmRleCxcbiAgICByb2xlOiBcImJ1dHRvblwiLFxuICAgIFwiYXJpYS1kaXNhYmxlZFwiOiBkaXNhYmxlZCA/ICd0cnVlJyA6IHVuZGVmaW5lZCxcbiAgICBcImFyaWEtZXhwYW5kZWRcIjogb3BlbiA/ICd0cnVlJyA6IHVuZGVmaW5lZCxcbiAgICBcImFyaWEtaGFzcG9wdXBcIjogXCJsaXN0Ym94XCIsXG4gICAgXCJhcmlhLWxhYmVsXCI6IGFyaWFMYWJlbCxcbiAgICBcImFyaWEtbGFiZWxsZWRieVwiOiBbbGFiZWxJZCwgYnV0dG9uSWRdLmZpbHRlcihCb29sZWFuKS5qb2luKCcgJykgfHwgdW5kZWZpbmVkLFxuICAgIG9uS2V5RG93bjogaGFuZGxlS2V5RG93bixcbiAgICBvbk1vdXNlRG93bjogZGlzYWJsZWQgfHwgcmVhZE9ubHkgPyBudWxsIDogaGFuZGxlTW91c2VEb3duLFxuICAgIG9uQmx1cjogaGFuZGxlQmx1cixcbiAgICBvbkZvY3VzOiBvbkZvY3VzXG4gIH0sIFNlbGVjdERpc3BsYXlQcm9wcywge1xuICAgIC8vIFRoZSBpZCBpcyByZXF1aXJlZCBmb3IgcHJvcGVyIGExMXlcbiAgICBpZDogYnV0dG9uSWRcbiAgfSksIGlzRW1wdHkoZGlzcGxheSkgP1xuICAvKiNfX1BVUkVfXyovXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWFjdC9uby1kYW5nZXJcbiAgUmVhY3QuY3JlYXRlRWxlbWVudChcInNwYW5cIiwge1xuICAgIGRhbmdlcm91c2x5U2V0SW5uZXJIVE1MOiB7XG4gICAgICBfX2h0bWw6ICcmIzgyMDM7J1xuICAgIH1cbiAgfSkgOiBkaXNwbGF5KSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJpbnB1dFwiLCBfZXh0ZW5kcyh7XG4gICAgdmFsdWU6IEFycmF5LmlzQXJyYXkodmFsdWUpID8gdmFsdWUuam9pbignLCcpIDogdmFsdWUsXG4gICAgbmFtZTogbmFtZSxcbiAgICByZWY6IGlucHV0UmVmLFxuICAgIFwiYXJpYS1oaWRkZW5cIjogdHJ1ZSxcbiAgICBvbkNoYW5nZTogaGFuZGxlQ2hhbmdlLFxuICAgIHRhYkluZGV4OiAtMSxcbiAgICBjbGFzc05hbWU6IGNsYXNzZXMubmF0aXZlSW5wdXQsXG4gICAgYXV0b0ZvY3VzOiBhdXRvRm9jdXNcbiAgfSwgb3RoZXIpKSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoSWNvbkNvbXBvbmVudCwge1xuICAgIGNsYXNzTmFtZTogY2xzeChjbGFzc2VzLmljb24sIGNsYXNzZXNbXCJpY29uXCIuY29uY2F0KGNhcGl0YWxpemUodmFyaWFudCkpXSwgb3BlbiAmJiBjbGFzc2VzLmljb25PcGVuLCBkaXNhYmxlZCAmJiBjbGFzc2VzLmRpc2FibGVkKVxuICB9KSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoTWVudSwgX2V4dGVuZHMoe1xuICAgIGlkOiBcIm1lbnUtXCIuY29uY2F0KG5hbWUgfHwgJycpLFxuICAgIGFuY2hvckVsOiBkaXNwbGF5Tm9kZSxcbiAgICBvcGVuOiBvcGVuLFxuICAgIG9uQ2xvc2U6IGhhbmRsZUNsb3NlXG4gIH0sIE1lbnVQcm9wcywge1xuICAgIE1lbnVMaXN0UHJvcHM6IF9leHRlbmRzKHtcbiAgICAgICdhcmlhLWxhYmVsbGVkYnknOiBsYWJlbElkLFxuICAgICAgcm9sZTogJ2xpc3Rib3gnLFxuICAgICAgZGlzYWJsZUxpc3RXcmFwOiB0cnVlXG4gICAgfSwgTWVudVByb3BzLk1lbnVMaXN0UHJvcHMpLFxuICAgIFBhcGVyUHJvcHM6IF9leHRlbmRzKHt9LCBNZW51UHJvcHMuUGFwZXJQcm9wcywge1xuICAgICAgc3R5bGU6IF9leHRlbmRzKHtcbiAgICAgICAgbWluV2lkdGg6IG1lbnVNaW5XaWR0aFxuICAgICAgfSwgTWVudVByb3BzLlBhcGVyUHJvcHMgIT0gbnVsbCA/IE1lbnVQcm9wcy5QYXBlclByb3BzLnN0eWxlIDogbnVsbClcbiAgICB9KVxuICB9KSwgaXRlbXMpKTtcbn0pO1xucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gU2VsZWN0SW5wdXQucHJvcFR5cGVzID0ge1xuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgJ2FyaWEtbGFiZWwnOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBhdXRvRm9jdXM6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSB3aWR0aCBvZiB0aGUgcG9wb3ZlciB3aWxsIGF1dG9tYXRpY2FsbHkgYmUgc2V0IGFjY29yZGluZyB0byB0aGUgaXRlbXMgaW5zaWRlIHRoZVxuICAgKiBtZW51LCBvdGhlcndpc2UgaXQgd2lsbCBiZSBhdCBsZWFzdCB0aGUgd2lkdGggb2YgdGhlIHNlbGVjdCBpbnB1dC5cbiAgICovXG4gIGF1dG9XaWR0aDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIFRoZSBvcHRpb24gZWxlbWVudHMgdG8gcG9wdWxhdGUgdGhlIHNlbGVjdCB3aXRoLlxuICAgKiBDYW4gYmUgc29tZSBgPE1lbnVJdGVtPmAgZWxlbWVudHMuXG4gICAqL1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG5cbiAgLyoqXG4gICAqIE92ZXJyaWRlIG9yIGV4dGVuZCB0aGUgc3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICogU2VlIFtDU1MgQVBJXSgjY3NzKSBiZWxvdyBmb3IgbW9yZSBkZXRhaWxzLlxuICAgKi9cbiAgY2xhc3NlczogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkLFxuXG4gIC8qKlxuICAgKiBUaGUgQ1NTIGNsYXNzIG5hbWUgb2YgdGhlIHNlbGVjdCBlbGVtZW50LlxuICAgKi9cbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBUaGUgZGVmYXVsdCBlbGVtZW50IHZhbHVlLiBVc2Ugd2hlbiB0aGUgY29tcG9uZW50IGlzIG5vdCBjb250cm9sbGVkLlxuICAgKi9cbiAgZGVmYXVsdFZhbHVlOiBQcm9wVHlwZXMuYW55LFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBzZWxlY3Qgd2lsbCBiZSBkaXNhYmxlZC5cbiAgICovXG4gIGRpc2FibGVkOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgc2VsZWN0ZWQgaXRlbSBpcyBkaXNwbGF5ZWQgZXZlbiBpZiBpdHMgdmFsdWUgaXMgZW1wdHkuXG4gICAqL1xuICBkaXNwbGF5RW1wdHk6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBUaGUgaWNvbiB0aGF0IGRpc3BsYXlzIHRoZSBhcnJvdy5cbiAgICovXG4gIEljb25Db21wb25lbnQ6IFByb3BUeXBlcy5lbGVtZW50VHlwZS5pc1JlcXVpcmVkLFxuXG4gIC8qKlxuICAgKiBJbXBlcmF0aXZlIGhhbmRsZSBpbXBsZW1lbnRpbmcgYHsgdmFsdWU6IFQsIG5vZGU6IEhUTUxFbGVtZW50LCBmb2N1cygpOiB2b2lkIH1gXG4gICAqIEVxdWl2YWxlbnQgdG8gYHJlZmBcbiAgICovXG4gIGlucHV0UmVmOiByZWZUeXBlLFxuXG4gIC8qKlxuICAgKiBUaGUgSUQgb2YgYW4gZWxlbWVudCB0aGF0IGFjdHMgYXMgYW4gYWRkaXRpb25hbCBsYWJlbC4gVGhlIFNlbGVjdCB3aWxsXG4gICAqIGJlIGxhYmVsbGVkIGJ5IHRoZSBhZGRpdGlvbmFsIGxhYmVsIGFuZCB0aGUgc2VsZWN0ZWQgdmFsdWUuXG4gICAqL1xuICBsYWJlbElkOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBQcm9wcyBhcHBsaWVkIHRvIHRoZSBbYE1lbnVgXSgvYXBpL21lbnUvKSBlbGVtZW50LlxuICAgKi9cbiAgTWVudVByb3BzOiBQcm9wVHlwZXMub2JqZWN0LFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIGB2YWx1ZWAgbXVzdCBiZSBhbiBhcnJheSBhbmQgdGhlIG1lbnUgd2lsbCBzdXBwb3J0IG11bHRpcGxlIHNlbGVjdGlvbnMuXG4gICAqL1xuICBtdWx0aXBsZTogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIE5hbWUgYXR0cmlidXRlIG9mIHRoZSBgc2VsZWN0YCBvciBoaWRkZW4gYGlucHV0YCBlbGVtZW50LlxuICAgKi9cbiAgbmFtZTogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgb25CbHVyOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQ2FsbGJhY2sgZnVuY3Rpb24gZmlyZWQgd2hlbiBhIG1lbnUgaXRlbSBpcyBzZWxlY3RlZC5cbiAgICpcbiAgICogQHBhcmFtIHtvYmplY3R9IGV2ZW50IFRoZSBldmVudCBzb3VyY2Ugb2YgdGhlIGNhbGxiYWNrLlxuICAgKiBZb3UgY2FuIHB1bGwgb3V0IHRoZSBuZXcgdmFsdWUgYnkgYWNjZXNzaW5nIGBldmVudC50YXJnZXQudmFsdWVgIChhbnkpLlxuICAgKiBAcGFyYW0ge29iamVjdH0gW2NoaWxkXSBUaGUgcmVhY3QgZWxlbWVudCB0aGF0IHdhcyBzZWxlY3RlZC5cbiAgICovXG4gIG9uQ2hhbmdlOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgd2hlbiB0aGUgY29tcG9uZW50IHJlcXVlc3RzIHRvIGJlIGNsb3NlZC5cbiAgICogVXNlIGluIGNvbnRyb2xsZWQgbW9kZSAoc2VlIG9wZW4pLlxuICAgKlxuICAgKiBAcGFyYW0ge29iamVjdH0gZXZlbnQgVGhlIGV2ZW50IHNvdXJjZSBvZiB0aGUgY2FsbGJhY2suXG4gICAqL1xuICBvbkNsb3NlOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgb25Gb2N1czogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIHdoZW4gdGhlIGNvbXBvbmVudCByZXF1ZXN0cyB0byBiZSBvcGVuZWQuXG4gICAqIFVzZSBpbiBjb250cm9sbGVkIG1vZGUgKHNlZSBvcGVuKS5cbiAgICpcbiAgICogQHBhcmFtIHtvYmplY3R9IGV2ZW50IFRoZSBldmVudCBzb3VyY2Ugb2YgdGhlIGNhbGxiYWNrLlxuICAgKi9cbiAgb25PcGVuOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQ29udHJvbCBgc2VsZWN0YCBvcGVuIHN0YXRlLlxuICAgKi9cbiAgb3BlbjogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIHJlYWRPbmx5OiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogUmVuZGVyIHRoZSBzZWxlY3RlZCB2YWx1ZS5cbiAgICpcbiAgICogQHBhcmFtIHthbnl9IHZhbHVlIFRoZSBgdmFsdWVgIHByb3ZpZGVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAqIEByZXR1cm5zIHtSZWFjdE5vZGV9XG4gICAqL1xuICByZW5kZXJWYWx1ZTogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIFByb3BzIGFwcGxpZWQgdG8gdGhlIGNsaWNrYWJsZSBkaXYgZWxlbWVudC5cbiAgICovXG4gIFNlbGVjdERpc3BsYXlQcm9wczogUHJvcFR5cGVzLm9iamVjdCxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgdGFiSW5kZXg6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5udW1iZXIsIFByb3BUeXBlcy5zdHJpbmddKSxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgdHlwZTogUHJvcFR5cGVzLmFueSxcblxuICAvKipcbiAgICogVGhlIGlucHV0IHZhbHVlLlxuICAgKi9cbiAgdmFsdWU6IFByb3BUeXBlcy5hbnksXG5cbiAgLyoqXG4gICAqIFRoZSB2YXJpYW50IHRvIHVzZS5cbiAgICovXG4gIHZhcmlhbnQ6IFByb3BUeXBlcy5vbmVPZihbJ3N0YW5kYXJkJywgJ291dGxpbmVkJywgJ2ZpbGxlZCddKVxufSA6IHZvaWQgMDtcbmV4cG9ydCBkZWZhdWx0IFNlbGVjdElucHV0OyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBTdmdJY29uIGZyb20gJy4uL1N2Z0ljb24nO1xuLyoqXG4gKiBQcml2YXRlIG1vZHVsZSByZXNlcnZlZCBmb3IgQG1hdGVyaWFsLXVpL3ggcGFja2FnZXMuXG4gKi9cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY3JlYXRlU3ZnSWNvbihwYXRoLCBkaXNwbGF5TmFtZSkge1xuICB2YXIgQ29tcG9uZW50ID0gZnVuY3Rpb24gQ29tcG9uZW50KHByb3BzLCByZWYpIHtcbiAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoU3ZnSWNvbiwgX2V4dGVuZHMoe1xuICAgICAgcmVmOiByZWZcbiAgICB9LCBwcm9wcyksIHBhdGgpO1xuICB9O1xuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgLy8gTmVlZCB0byBzZXQgYGRpc3BsYXlOYW1lYCBvbiB0aGUgaW5uZXIgY29tcG9uZW50IGZvciBSZWFjdC5tZW1vLlxuICAgIC8vIFJlYWN0IHByaW9yIHRvIDE2LjE0IGlnbm9yZXMgYGRpc3BsYXlOYW1lYCBvbiB0aGUgd3JhcHBlci5cbiAgICBDb21wb25lbnQuZGlzcGxheU5hbWUgPSBcIlwiLmNvbmNhdChkaXNwbGF5TmFtZSwgXCJJY29uXCIpO1xuICB9XG5cbiAgQ29tcG9uZW50Lm11aU5hbWUgPSBTdmdJY29uLm11aU5hbWU7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QubWVtbyggLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoQ29tcG9uZW50KSk7XG59IiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IGNyZWF0ZVN2Z0ljb24gZnJvbSAnLi4vLi4vdXRpbHMvY3JlYXRlU3ZnSWNvbic7XG4vKipcbiAqIEBpZ25vcmUgLSBpbnRlcm5hbCBjb21wb25lbnQuXG4gKi9cblxuZXhwb3J0IGRlZmF1bHQgY3JlYXRlU3ZnSWNvbiggLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJwYXRoXCIsIHtcbiAgZDogXCJNNyAxMGw1IDUgNS01elwiXG59KSwgJ0Fycm93RHJvcERvd24nKTsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzXCI7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGNsc3ggZnJvbSAnY2xzeCc7XG5pbXBvcnQgeyByZWZUeXBlIH0gZnJvbSAnQG1hdGVyaWFsLXVpL3V0aWxzJztcbmltcG9ydCBjYXBpdGFsaXplIGZyb20gJy4uL3V0aWxzL2NhcGl0YWxpemUnO1xuLyoqXG4gKiBAaWdub3JlIC0gaW50ZXJuYWwgY29tcG9uZW50LlxuICovXG5cbnZhciBOYXRpdmVTZWxlY3RJbnB1dCA9IC8qI19fUFVSRV9fKi9SZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIE5hdGl2ZVNlbGVjdElucHV0KHByb3BzLCByZWYpIHtcbiAgdmFyIGNsYXNzZXMgPSBwcm9wcy5jbGFzc2VzLFxuICAgICAgY2xhc3NOYW1lID0gcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgZGlzYWJsZWQgPSBwcm9wcy5kaXNhYmxlZCxcbiAgICAgIEljb25Db21wb25lbnQgPSBwcm9wcy5JY29uQ29tcG9uZW50LFxuICAgICAgaW5wdXRSZWYgPSBwcm9wcy5pbnB1dFJlZixcbiAgICAgIF9wcm9wcyR2YXJpYW50ID0gcHJvcHMudmFyaWFudCxcbiAgICAgIHZhcmlhbnQgPSBfcHJvcHMkdmFyaWFudCA9PT0gdm9pZCAwID8gJ3N0YW5kYXJkJyA6IF9wcm9wcyR2YXJpYW50LFxuICAgICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMocHJvcHMsIFtcImNsYXNzZXNcIiwgXCJjbGFzc05hbWVcIiwgXCJkaXNhYmxlZFwiLCBcIkljb25Db21wb25lbnRcIiwgXCJpbnB1dFJlZlwiLCBcInZhcmlhbnRcIl0pO1xuXG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChSZWFjdC5GcmFnbWVudCwgbnVsbCwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJzZWxlY3RcIiwgX2V4dGVuZHMoe1xuICAgIGNsYXNzTmFtZTogY2xzeChjbGFzc2VzLnJvb3QsIC8vIFRPRE8gdjU6IG1lcmdlIHJvb3QgYW5kIHNlbGVjdFxuICAgIGNsYXNzZXMuc2VsZWN0LCBjbGFzc2VzW3ZhcmlhbnRdLCBjbGFzc05hbWUsIGRpc2FibGVkICYmIGNsYXNzZXMuZGlzYWJsZWQpLFxuICAgIGRpc2FibGVkOiBkaXNhYmxlZCxcbiAgICByZWY6IGlucHV0UmVmIHx8IHJlZlxuICB9LCBvdGhlcikpLCBwcm9wcy5tdWx0aXBsZSA/IG51bGwgOiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChJY29uQ29tcG9uZW50LCB7XG4gICAgY2xhc3NOYW1lOiBjbHN4KGNsYXNzZXMuaWNvbiwgY2xhc3Nlc1tcImljb25cIi5jb25jYXQoY2FwaXRhbGl6ZSh2YXJpYW50KSldLCBkaXNhYmxlZCAmJiBjbGFzc2VzLmRpc2FibGVkKVxuICB9KSk7XG59KTtcbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IE5hdGl2ZVNlbGVjdElucHV0LnByb3BUeXBlcyA9IHtcbiAgLyoqXG4gICAqIFRoZSBvcHRpb24gZWxlbWVudHMgdG8gcG9wdWxhdGUgdGhlIHNlbGVjdCB3aXRoLlxuICAgKiBDYW4gYmUgc29tZSBgPG9wdGlvbj5gIGVsZW1lbnRzLlxuICAgKi9cbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuXG4gIC8qKlxuICAgKiBPdmVycmlkZSBvciBleHRlbmQgdGhlIHN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAqIFNlZSBbQ1NTIEFQSV0oI2NzcykgYmVsb3cgZm9yIG1vcmUgZGV0YWlscy5cbiAgICovXG4gIGNsYXNzZXM6IFByb3BUeXBlcy5vYmplY3QuaXNSZXF1aXJlZCxcblxuICAvKipcbiAgICogVGhlIENTUyBjbGFzcyBuYW1lIG9mIHRoZSBzZWxlY3QgZWxlbWVudC5cbiAgICovXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgc2VsZWN0IHdpbGwgYmUgZGlzYWJsZWQuXG4gICAqL1xuICBkaXNhYmxlZDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIFRoZSBpY29uIHRoYXQgZGlzcGxheXMgdGhlIGFycm93LlxuICAgKi9cbiAgSWNvbkNvbXBvbmVudDogUHJvcFR5cGVzLmVsZW1lbnRUeXBlLmlzUmVxdWlyZWQsXG5cbiAgLyoqXG4gICAqIFVzZSB0aGF0IHByb3AgdG8gcGFzcyBhIHJlZiB0byB0aGUgbmF0aXZlIHNlbGVjdCBlbGVtZW50LlxuICAgKiBAZGVwcmVjYXRlZFxuICAgKi9cbiAgaW5wdXRSZWY6IHJlZlR5cGUsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIG11bHRpcGxlOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogTmFtZSBhdHRyaWJ1dGUgb2YgdGhlIGBzZWxlY3RgIG9yIGhpZGRlbiBgaW5wdXRgIGVsZW1lbnQuXG4gICAqL1xuICBuYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmdW5jdGlvbiBmaXJlZCB3aGVuIGEgbWVudSBpdGVtIGlzIHNlbGVjdGVkLlxuICAgKlxuICAgKiBAcGFyYW0ge29iamVjdH0gZXZlbnQgVGhlIGV2ZW50IHNvdXJjZSBvZiB0aGUgY2FsbGJhY2suXG4gICAqIFlvdSBjYW4gcHVsbCBvdXQgdGhlIG5ldyB2YWx1ZSBieSBhY2Nlc3NpbmcgYGV2ZW50LnRhcmdldC52YWx1ZWAgKHN0cmluZykuXG4gICAqL1xuICBvbkNoYW5nZTogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIFRoZSBpbnB1dCB2YWx1ZS5cbiAgICovXG4gIHZhbHVlOiBQcm9wVHlwZXMuYW55LFxuXG4gIC8qKlxuICAgKiBUaGUgdmFyaWFudCB0byB1c2UuXG4gICAqL1xuICB2YXJpYW50OiBQcm9wVHlwZXMub25lT2YoWydzdGFuZGFyZCcsICdvdXRsaW5lZCcsICdmaWxsZWQnXSlcbn0gOiB2b2lkIDA7XG5leHBvcnQgZGVmYXVsdCBOYXRpdmVTZWxlY3RJbnB1dDsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzXCI7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IE5hdGl2ZVNlbGVjdElucHV0IGZyb20gJy4vTmF0aXZlU2VsZWN0SW5wdXQnO1xuaW1wb3J0IHdpdGhTdHlsZXMgZnJvbSAnLi4vc3R5bGVzL3dpdGhTdHlsZXMnO1xuaW1wb3J0IGZvcm1Db250cm9sU3RhdGUgZnJvbSAnLi4vRm9ybUNvbnRyb2wvZm9ybUNvbnRyb2xTdGF0ZSc7XG5pbXBvcnQgdXNlRm9ybUNvbnRyb2wgZnJvbSAnLi4vRm9ybUNvbnRyb2wvdXNlRm9ybUNvbnRyb2wnO1xuaW1wb3J0IEFycm93RHJvcERvd25JY29uIGZyb20gJy4uL2ludGVybmFsL3N2Zy1pY29ucy9BcnJvd0Ryb3BEb3duJztcbmltcG9ydCBJbnB1dCBmcm9tICcuLi9JbnB1dCc7XG5leHBvcnQgdmFyIHN0eWxlcyA9IGZ1bmN0aW9uIHN0eWxlcyh0aGVtZSkge1xuICByZXR1cm4ge1xuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSBzZWxlY3QgY29tcG9uZW50IGByb290YCBjbGFzcy4gKi9cbiAgICByb290OiB7fSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSBzZWxlY3QgY29tcG9uZW50IGBzZWxlY3RgIGNsYXNzLiAqL1xuICAgIHNlbGVjdDoge1xuICAgICAgJy1tb3otYXBwZWFyYW5jZSc6ICdub25lJyxcbiAgICAgIC8vIFJlc2V0XG4gICAgICAnLXdlYmtpdC1hcHBlYXJhbmNlJzogJ25vbmUnLFxuICAgICAgLy8gUmVzZXRcbiAgICAgIC8vIFdoZW4gaW50ZXJhY3RpbmcgcXVpY2tseSwgdGhlIHRleHQgY2FuIGVuZCB1cCBzZWxlY3RlZC5cbiAgICAgIC8vIE5hdGl2ZSBzZWxlY3QgY2FuJ3QgYmUgc2VsZWN0ZWQgZWl0aGVyLlxuICAgICAgdXNlclNlbGVjdDogJ25vbmUnLFxuICAgICAgYm9yZGVyUmFkaXVzOiAwLFxuICAgICAgLy8gUmVzZXRcbiAgICAgIG1pbldpZHRoOiAxNixcbiAgICAgIC8vIFNvIGl0IGRvZXNuJ3QgY29sbGFwc2UuXG4gICAgICBjdXJzb3I6ICdwb2ludGVyJyxcbiAgICAgICcmOmZvY3VzJzoge1xuICAgICAgICAvLyBTaG93IHRoYXQgaXQncyBub3QgYW4gdGV4dCBpbnB1dFxuICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IHRoZW1lLnBhbGV0dGUudHlwZSA9PT0gJ2xpZ2h0JyA/ICdyZ2JhKDAsIDAsIDAsIDAuMDUpJyA6ICdyZ2JhKDI1NSwgMjU1LCAyNTUsIDAuMDUpJyxcbiAgICAgICAgYm9yZGVyUmFkaXVzOiAwIC8vIFJlc2V0IENocm9tZSBzdHlsZVxuXG4gICAgICB9LFxuICAgICAgLy8gUmVtb3ZlIElFIDExIGFycm93XG4gICAgICAnJjo6LW1zLWV4cGFuZCc6IHtcbiAgICAgICAgZGlzcGxheTogJ25vbmUnXG4gICAgICB9LFxuICAgICAgJyYkZGlzYWJsZWQnOiB7XG4gICAgICAgIGN1cnNvcjogJ2RlZmF1bHQnXG4gICAgICB9LFxuICAgICAgJyZbbXVsdGlwbGVdJzoge1xuICAgICAgICBoZWlnaHQ6ICdhdXRvJ1xuICAgICAgfSxcbiAgICAgICcmOm5vdChbbXVsdGlwbGVdKSBvcHRpb24sICY6bm90KFttdWx0aXBsZV0pIG9wdGdyb3VwJzoge1xuICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IHRoZW1lLnBhbGV0dGUuYmFja2dyb3VuZC5wYXBlclxuICAgICAgfSxcbiAgICAgICcmJic6IHtcbiAgICAgICAgcGFkZGluZ1JpZ2h0OiAyNFxuICAgICAgfVxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgc2VsZWN0IGNvbXBvbmVudCBpZiBgdmFyaWFudD1cImZpbGxlZFwiYC4gKi9cbiAgICBmaWxsZWQ6IHtcbiAgICAgICcmJic6IHtcbiAgICAgICAgcGFkZGluZ1JpZ2h0OiAzMlxuICAgICAgfVxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgc2VsZWN0IGNvbXBvbmVudCBpZiBgdmFyaWFudD1cIm91dGxpbmVkXCJgLiAqL1xuICAgIG91dGxpbmVkOiB7XG4gICAgICBib3JkZXJSYWRpdXM6IHRoZW1lLnNoYXBlLmJvcmRlclJhZGl1cyxcbiAgICAgICcmJic6IHtcbiAgICAgICAgcGFkZGluZ1JpZ2h0OiAzMlxuICAgICAgfVxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgc2VsZWN0IGNvbXBvbmVudCBgc2VsZWN0TWVudWAgY2xhc3MuICovXG4gICAgc2VsZWN0TWVudToge1xuICAgICAgaGVpZ2h0OiAnYXV0bycsXG4gICAgICAvLyBSZXNldHMgZm9yIG11bHRwaWxlIHNlbGVjdCB3aXRoIGNoaXBzXG4gICAgICBtaW5IZWlnaHQ6ICcxLjE4NzZlbScsXG4gICAgICAvLyBSZXF1aXJlZCBmb3Igc2VsZWN0XFx0ZXh0LWZpZWxkIGhlaWdodCBjb25zaXN0ZW5jeVxuICAgICAgdGV4dE92ZXJmbG93OiAnZWxsaXBzaXMnLFxuICAgICAgd2hpdGVTcGFjZTogJ25vd3JhcCcsXG4gICAgICBvdmVyZmxvdzogJ2hpZGRlbidcbiAgICB9LFxuXG4gICAgLyogUHNldWRvLWNsYXNzIGFwcGxpZWQgdG8gdGhlIHNlbGVjdCBjb21wb25lbnQgYGRpc2FibGVkYCBjbGFzcy4gKi9cbiAgICBkaXNhYmxlZDoge30sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgaWNvbiBjb21wb25lbnQuICovXG4gICAgaWNvbjoge1xuICAgICAgLy8gV2UgdXNlIGEgcG9zaXRpb24gYWJzb2x1dGUgb3ZlciBhIGZsZXhib3ggaW4gb3JkZXIgdG8gZm9yd2FyZCB0aGUgcG9pbnRlciBldmVudHNcbiAgICAgIC8vIHRvIHRoZSBpbnB1dCBhbmQgdG8gc3VwcG9ydCB3cmFwcGluZyB0YWdzLi5cbiAgICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgICAgcmlnaHQ6IDAsXG4gICAgICB0b3A6ICdjYWxjKDUwJSAtIDEycHgpJyxcbiAgICAgIC8vIENlbnRlciB2ZXJ0aWNhbGx5XG4gICAgICBwb2ludGVyRXZlbnRzOiAnbm9uZScsXG4gICAgICAvLyBEb24ndCBibG9jayBwb2ludGVyIGV2ZW50cyBvbiB0aGUgc2VsZWN0IHVuZGVyIHRoZSBpY29uLlxuICAgICAgY29sb3I6IHRoZW1lLnBhbGV0dGUuYWN0aW9uLmFjdGl2ZSxcbiAgICAgICcmJGRpc2FibGVkJzoge1xuICAgICAgICBjb2xvcjogdGhlbWUucGFsZXR0ZS5hY3Rpb24uZGlzYWJsZWRcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIGljb24gY29tcG9uZW50IGlmIHRoZSBwb3B1cCBpcyBvcGVuLiAqL1xuICAgIGljb25PcGVuOiB7XG4gICAgICB0cmFuc2Zvcm06ICdyb3RhdGUoMTgwZGVnKSdcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIGljb24gY29tcG9uZW50IGlmIGB2YXJpYW50PVwiZmlsbGVkXCJgLiAqL1xuICAgIGljb25GaWxsZWQ6IHtcbiAgICAgIHJpZ2h0OiA3XG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSBpY29uIGNvbXBvbmVudCBpZiBgdmFyaWFudD1cIm91dGxpbmVkXCJgLiAqL1xuICAgIGljb25PdXRsaW5lZDoge1xuICAgICAgcmlnaHQ6IDdcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHVuZGVybHlpbmcgbmF0aXZlIGlucHV0IGNvbXBvbmVudC4gKi9cbiAgICBuYXRpdmVJbnB1dDoge1xuICAgICAgYm90dG9tOiAwLFxuICAgICAgbGVmdDogMCxcbiAgICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgICAgb3BhY2l0eTogMCxcbiAgICAgIHBvaW50ZXJFdmVudHM6ICdub25lJyxcbiAgICAgIHdpZHRoOiAnMTAwJSdcbiAgICB9XG4gIH07XG59O1xudmFyIGRlZmF1bHRJbnB1dCA9IC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KElucHV0LCBudWxsKTtcbi8qKlxuICogQW4gYWx0ZXJuYXRpdmUgdG8gYDxTZWxlY3QgbmF0aXZlIC8+YCB3aXRoIGEgbXVjaCBzbWFsbGVyIGJ1bmRsZSBzaXplIGZvb3RwcmludC5cbiAqL1xuXG52YXIgTmF0aXZlU2VsZWN0ID0gLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gTmF0aXZlU2VsZWN0KHByb3BzLCByZWYpIHtcbiAgdmFyIGNoaWxkcmVuID0gcHJvcHMuY2hpbGRyZW4sXG4gICAgICBjbGFzc2VzID0gcHJvcHMuY2xhc3NlcyxcbiAgICAgIF9wcm9wcyRJY29uQ29tcG9uZW50ID0gcHJvcHMuSWNvbkNvbXBvbmVudCxcbiAgICAgIEljb25Db21wb25lbnQgPSBfcHJvcHMkSWNvbkNvbXBvbmVudCA9PT0gdm9pZCAwID8gQXJyb3dEcm9wRG93bkljb24gOiBfcHJvcHMkSWNvbkNvbXBvbmVudCxcbiAgICAgIF9wcm9wcyRpbnB1dCA9IHByb3BzLmlucHV0LFxuICAgICAgaW5wdXQgPSBfcHJvcHMkaW5wdXQgPT09IHZvaWQgMCA/IGRlZmF1bHRJbnB1dCA6IF9wcm9wcyRpbnB1dCxcbiAgICAgIGlucHV0UHJvcHMgPSBwcm9wcy5pbnB1dFByb3BzLFxuICAgICAgdmFyaWFudCA9IHByb3BzLnZhcmlhbnQsXG4gICAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhwcm9wcywgW1wiY2hpbGRyZW5cIiwgXCJjbGFzc2VzXCIsIFwiSWNvbkNvbXBvbmVudFwiLCBcImlucHV0XCIsIFwiaW5wdXRQcm9wc1wiLCBcInZhcmlhbnRcIl0pO1xuXG4gIHZhciBtdWlGb3JtQ29udHJvbCA9IHVzZUZvcm1Db250cm9sKCk7XG4gIHZhciBmY3MgPSBmb3JtQ29udHJvbFN0YXRlKHtcbiAgICBwcm9wczogcHJvcHMsXG4gICAgbXVpRm9ybUNvbnRyb2w6IG11aUZvcm1Db250cm9sLFxuICAgIHN0YXRlczogWyd2YXJpYW50J11cbiAgfSk7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY2xvbmVFbGVtZW50KGlucHV0LCBfZXh0ZW5kcyh7XG4gICAgLy8gTW9zdCBvZiB0aGUgbG9naWMgaXMgaW1wbGVtZW50ZWQgaW4gYE5hdGl2ZVNlbGVjdElucHV0YC5cbiAgICAvLyBUaGUgYFNlbGVjdGAgY29tcG9uZW50IGlzIGEgc2ltcGxlIEFQSSB3cmFwcGVyIHRvIGV4cG9zZSBzb21ldGhpbmcgYmV0dGVyIHRvIHBsYXkgd2l0aC5cbiAgICBpbnB1dENvbXBvbmVudDogTmF0aXZlU2VsZWN0SW5wdXQsXG4gICAgaW5wdXRQcm9wczogX2V4dGVuZHMoe1xuICAgICAgY2hpbGRyZW46IGNoaWxkcmVuLFxuICAgICAgY2xhc3NlczogY2xhc3NlcyxcbiAgICAgIEljb25Db21wb25lbnQ6IEljb25Db21wb25lbnQsXG4gICAgICB2YXJpYW50OiBmY3MudmFyaWFudCxcbiAgICAgIHR5cGU6IHVuZGVmaW5lZFxuICAgIH0sIGlucHV0UHJvcHMsIGlucHV0ID8gaW5wdXQucHJvcHMuaW5wdXRQcm9wcyA6IHt9KSxcbiAgICByZWY6IHJlZlxuICB9LCBvdGhlcikpO1xufSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBOYXRpdmVTZWxlY3QucHJvcFR5cGVzID0ge1xuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBXYXJuaW5nIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIC8vIHwgVGhlc2UgUHJvcFR5cGVzIGFyZSBnZW5lcmF0ZWQgZnJvbSB0aGUgVHlwZVNjcmlwdCB0eXBlIGRlZmluaXRpb25zIHxcbiAgLy8gfCAgICAgVG8gdXBkYXRlIHRoZW0gZWRpdCB0aGUgZC50cyBmaWxlIGFuZCBydW4gXCJ5YXJuIHByb3B0eXBlc1wiICAgICB8XG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuICAvKipcbiAgICogVGhlIG9wdGlvbiBlbGVtZW50cyB0byBwb3B1bGF0ZSB0aGUgc2VsZWN0IHdpdGguXG4gICAqIENhbiBiZSBzb21lIGA8b3B0aW9uPmAgZWxlbWVudHMuXG4gICAqL1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG5cbiAgLyoqXG4gICAqIE92ZXJyaWRlIG9yIGV4dGVuZCB0aGUgc3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICogU2VlIFtDU1MgQVBJXSgjY3NzKSBiZWxvdyBmb3IgbW9yZSBkZXRhaWxzLlxuICAgKi9cbiAgY2xhc3NlczogUHJvcFR5cGVzLm9iamVjdCxcblxuICAvKipcbiAgICogVGhlIGljb24gdGhhdCBkaXNwbGF5cyB0aGUgYXJyb3cuXG4gICAqL1xuICBJY29uQ29tcG9uZW50OiBQcm9wVHlwZXMuZWxlbWVudFR5cGUsXG5cbiAgLyoqXG4gICAqIEFuIGBJbnB1dGAgZWxlbWVudDsgZG9lcyBub3QgaGF2ZSB0byBiZSBhIG1hdGVyaWFsLXVpIHNwZWNpZmljIGBJbnB1dGAuXG4gICAqL1xuICBpbnB1dDogUHJvcFR5cGVzLmVsZW1lbnQsXG5cbiAgLyoqXG4gICAqIEF0dHJpYnV0ZXMgYXBwbGllZCB0byB0aGUgYHNlbGVjdGAgZWxlbWVudC5cbiAgICovXG4gIGlucHV0UHJvcHM6IFByb3BUeXBlcy5vYmplY3QsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGZ1bmN0aW9uIGZpcmVkIHdoZW4gYSBtZW51IGl0ZW0gaXMgc2VsZWN0ZWQuXG4gICAqXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBldmVudCBUaGUgZXZlbnQgc291cmNlIG9mIHRoZSBjYWxsYmFjay5cbiAgICogWW91IGNhbiBwdWxsIG91dCB0aGUgbmV3IHZhbHVlIGJ5IGFjY2Vzc2luZyBgZXZlbnQudGFyZ2V0LnZhbHVlYCAoc3RyaW5nKS5cbiAgICovXG4gIG9uQ2hhbmdlOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogVGhlIGlucHV0IHZhbHVlLiBUaGUgRE9NIEFQSSBjYXN0cyB0aGlzIHRvIGEgc3RyaW5nLlxuICAgKi9cbiAgdmFsdWU6IFByb3BUeXBlcy5hbnksXG5cbiAgLyoqXG4gICAqIFRoZSB2YXJpYW50IHRvIHVzZS5cbiAgICovXG4gIHZhcmlhbnQ6IFByb3BUeXBlcy5vbmVPZihbJ2ZpbGxlZCcsICdvdXRsaW5lZCcsICdzdGFuZGFyZCddKVxufSA6IHZvaWQgMDtcbk5hdGl2ZVNlbGVjdC5tdWlOYW1lID0gJ1NlbGVjdCc7XG5leHBvcnQgZGVmYXVsdCB3aXRoU3R5bGVzKHN0eWxlcywge1xuICBuYW1lOiAnTXVpTmF0aXZlU2VsZWN0J1xufSkoTmF0aXZlU2VsZWN0KTsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzXCI7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHsgbWVyZ2VDbGFzc2VzIH0gZnJvbSAnQG1hdGVyaWFsLXVpL3N0eWxlcyc7XG5pbXBvcnQgU2VsZWN0SW5wdXQgZnJvbSAnLi9TZWxlY3RJbnB1dCc7XG5pbXBvcnQgZm9ybUNvbnRyb2xTdGF0ZSBmcm9tICcuLi9Gb3JtQ29udHJvbC9mb3JtQ29udHJvbFN0YXRlJztcbmltcG9ydCB1c2VGb3JtQ29udHJvbCBmcm9tICcuLi9Gb3JtQ29udHJvbC91c2VGb3JtQ29udHJvbCc7XG5pbXBvcnQgd2l0aFN0eWxlcyBmcm9tICcuLi9zdHlsZXMvd2l0aFN0eWxlcyc7XG5pbXBvcnQgQXJyb3dEcm9wRG93bkljb24gZnJvbSAnLi4vaW50ZXJuYWwvc3ZnLWljb25zL0Fycm93RHJvcERvd24nO1xuaW1wb3J0IElucHV0IGZyb20gJy4uL0lucHV0JztcbmltcG9ydCB7IHN0eWxlcyBhcyBuYXRpdmVTZWxlY3RTdHlsZXMgfSBmcm9tICcuLi9OYXRpdmVTZWxlY3QvTmF0aXZlU2VsZWN0JztcbmltcG9ydCBOYXRpdmVTZWxlY3RJbnB1dCBmcm9tICcuLi9OYXRpdmVTZWxlY3QvTmF0aXZlU2VsZWN0SW5wdXQnO1xuaW1wb3J0IEZpbGxlZElucHV0IGZyb20gJy4uL0ZpbGxlZElucHV0JztcbmltcG9ydCBPdXRsaW5lZElucHV0IGZyb20gJy4uL091dGxpbmVkSW5wdXQnO1xuZXhwb3J0IHZhciBzdHlsZXMgPSBuYXRpdmVTZWxlY3RTdHlsZXM7XG5cbnZhciBfcmVmID0gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoSW5wdXQsIG51bGwpO1xuXG52YXIgX3JlZjIgPSAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChGaWxsZWRJbnB1dCwgbnVsbCk7XG5cbnZhciBTZWxlY3QgPSAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBTZWxlY3QocHJvcHMsIHJlZikge1xuICB2YXIgX3Byb3BzJGF1dG9XaWR0aCA9IHByb3BzLmF1dG9XaWR0aCxcbiAgICAgIGF1dG9XaWR0aCA9IF9wcm9wcyRhdXRvV2lkdGggPT09IHZvaWQgMCA/IGZhbHNlIDogX3Byb3BzJGF1dG9XaWR0aCxcbiAgICAgIGNoaWxkcmVuID0gcHJvcHMuY2hpbGRyZW4sXG4gICAgICBjbGFzc2VzID0gcHJvcHMuY2xhc3NlcyxcbiAgICAgIF9wcm9wcyRkaXNwbGF5RW1wdHkgPSBwcm9wcy5kaXNwbGF5RW1wdHksXG4gICAgICBkaXNwbGF5RW1wdHkgPSBfcHJvcHMkZGlzcGxheUVtcHR5ID09PSB2b2lkIDAgPyBmYWxzZSA6IF9wcm9wcyRkaXNwbGF5RW1wdHksXG4gICAgICBfcHJvcHMkSWNvbkNvbXBvbmVudCA9IHByb3BzLkljb25Db21wb25lbnQsXG4gICAgICBJY29uQ29tcG9uZW50ID0gX3Byb3BzJEljb25Db21wb25lbnQgPT09IHZvaWQgMCA/IEFycm93RHJvcERvd25JY29uIDogX3Byb3BzJEljb25Db21wb25lbnQsXG4gICAgICBpZCA9IHByb3BzLmlkLFxuICAgICAgaW5wdXQgPSBwcm9wcy5pbnB1dCxcbiAgICAgIGlucHV0UHJvcHMgPSBwcm9wcy5pbnB1dFByb3BzLFxuICAgICAgbGFiZWwgPSBwcm9wcy5sYWJlbCxcbiAgICAgIGxhYmVsSWQgPSBwcm9wcy5sYWJlbElkLFxuICAgICAgX3Byb3BzJGxhYmVsV2lkdGggPSBwcm9wcy5sYWJlbFdpZHRoLFxuICAgICAgbGFiZWxXaWR0aCA9IF9wcm9wcyRsYWJlbFdpZHRoID09PSB2b2lkIDAgPyAwIDogX3Byb3BzJGxhYmVsV2lkdGgsXG4gICAgICBNZW51UHJvcHMgPSBwcm9wcy5NZW51UHJvcHMsXG4gICAgICBfcHJvcHMkbXVsdGlwbGUgPSBwcm9wcy5tdWx0aXBsZSxcbiAgICAgIG11bHRpcGxlID0gX3Byb3BzJG11bHRpcGxlID09PSB2b2lkIDAgPyBmYWxzZSA6IF9wcm9wcyRtdWx0aXBsZSxcbiAgICAgIF9wcm9wcyRuYXRpdmUgPSBwcm9wcy5uYXRpdmUsXG4gICAgICBuYXRpdmUgPSBfcHJvcHMkbmF0aXZlID09PSB2b2lkIDAgPyBmYWxzZSA6IF9wcm9wcyRuYXRpdmUsXG4gICAgICBvbkNsb3NlID0gcHJvcHMub25DbG9zZSxcbiAgICAgIG9uT3BlbiA9IHByb3BzLm9uT3BlbixcbiAgICAgIG9wZW4gPSBwcm9wcy5vcGVuLFxuICAgICAgcmVuZGVyVmFsdWUgPSBwcm9wcy5yZW5kZXJWYWx1ZSxcbiAgICAgIFNlbGVjdERpc3BsYXlQcm9wcyA9IHByb3BzLlNlbGVjdERpc3BsYXlQcm9wcyxcbiAgICAgIF9wcm9wcyR2YXJpYW50ID0gcHJvcHMudmFyaWFudCxcbiAgICAgIHZhcmlhbnRQcm9wcyA9IF9wcm9wcyR2YXJpYW50ID09PSB2b2lkIDAgPyAnc3RhbmRhcmQnIDogX3Byb3BzJHZhcmlhbnQsXG4gICAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhwcm9wcywgW1wiYXV0b1dpZHRoXCIsIFwiY2hpbGRyZW5cIiwgXCJjbGFzc2VzXCIsIFwiZGlzcGxheUVtcHR5XCIsIFwiSWNvbkNvbXBvbmVudFwiLCBcImlkXCIsIFwiaW5wdXRcIiwgXCJpbnB1dFByb3BzXCIsIFwibGFiZWxcIiwgXCJsYWJlbElkXCIsIFwibGFiZWxXaWR0aFwiLCBcIk1lbnVQcm9wc1wiLCBcIm11bHRpcGxlXCIsIFwibmF0aXZlXCIsIFwib25DbG9zZVwiLCBcIm9uT3BlblwiLCBcIm9wZW5cIiwgXCJyZW5kZXJWYWx1ZVwiLCBcIlNlbGVjdERpc3BsYXlQcm9wc1wiLCBcInZhcmlhbnRcIl0pO1xuXG4gIHZhciBpbnB1dENvbXBvbmVudCA9IG5hdGl2ZSA/IE5hdGl2ZVNlbGVjdElucHV0IDogU2VsZWN0SW5wdXQ7XG4gIHZhciBtdWlGb3JtQ29udHJvbCA9IHVzZUZvcm1Db250cm9sKCk7XG4gIHZhciBmY3MgPSBmb3JtQ29udHJvbFN0YXRlKHtcbiAgICBwcm9wczogcHJvcHMsXG4gICAgbXVpRm9ybUNvbnRyb2w6IG11aUZvcm1Db250cm9sLFxuICAgIHN0YXRlczogWyd2YXJpYW50J11cbiAgfSk7XG4gIHZhciB2YXJpYW50ID0gZmNzLnZhcmlhbnQgfHwgdmFyaWFudFByb3BzO1xuICB2YXIgSW5wdXRDb21wb25lbnQgPSBpbnB1dCB8fCB7XG4gICAgc3RhbmRhcmQ6IF9yZWYsXG4gICAgb3V0bGluZWQ6IC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KE91dGxpbmVkSW5wdXQsIHtcbiAgICAgIGxhYmVsOiBsYWJlbCxcbiAgICAgIGxhYmVsV2lkdGg6IGxhYmVsV2lkdGhcbiAgICB9KSxcbiAgICBmaWxsZWQ6IF9yZWYyXG4gIH1bdmFyaWFudF07XG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY2xvbmVFbGVtZW50KElucHV0Q29tcG9uZW50LCBfZXh0ZW5kcyh7XG4gICAgLy8gTW9zdCBvZiB0aGUgbG9naWMgaXMgaW1wbGVtZW50ZWQgaW4gYFNlbGVjdElucHV0YC5cbiAgICAvLyBUaGUgYFNlbGVjdGAgY29tcG9uZW50IGlzIGEgc2ltcGxlIEFQSSB3cmFwcGVyIHRvIGV4cG9zZSBzb21ldGhpbmcgYmV0dGVyIHRvIHBsYXkgd2l0aC5cbiAgICBpbnB1dENvbXBvbmVudDogaW5wdXRDb21wb25lbnQsXG4gICAgaW5wdXRQcm9wczogX2V4dGVuZHMoe1xuICAgICAgY2hpbGRyZW46IGNoaWxkcmVuLFxuICAgICAgSWNvbkNvbXBvbmVudDogSWNvbkNvbXBvbmVudCxcbiAgICAgIHZhcmlhbnQ6IHZhcmlhbnQsXG4gICAgICB0eXBlOiB1bmRlZmluZWQsXG4gICAgICAvLyBXZSByZW5kZXIgYSBzZWxlY3QuIFdlIGNhbiBpZ25vcmUgdGhlIHR5cGUgcHJvdmlkZWQgYnkgdGhlIGBJbnB1dGAuXG4gICAgICBtdWx0aXBsZTogbXVsdGlwbGVcbiAgICB9LCBuYXRpdmUgPyB7XG4gICAgICBpZDogaWRcbiAgICB9IDoge1xuICAgICAgYXV0b1dpZHRoOiBhdXRvV2lkdGgsXG4gICAgICBkaXNwbGF5RW1wdHk6IGRpc3BsYXlFbXB0eSxcbiAgICAgIGxhYmVsSWQ6IGxhYmVsSWQsXG4gICAgICBNZW51UHJvcHM6IE1lbnVQcm9wcyxcbiAgICAgIG9uQ2xvc2U6IG9uQ2xvc2UsXG4gICAgICBvbk9wZW46IG9uT3BlbixcbiAgICAgIG9wZW46IG9wZW4sXG4gICAgICByZW5kZXJWYWx1ZTogcmVuZGVyVmFsdWUsXG4gICAgICBTZWxlY3REaXNwbGF5UHJvcHM6IF9leHRlbmRzKHtcbiAgICAgICAgaWQ6IGlkXG4gICAgICB9LCBTZWxlY3REaXNwbGF5UHJvcHMpXG4gICAgfSwgaW5wdXRQcm9wcywge1xuICAgICAgY2xhc3NlczogaW5wdXRQcm9wcyA/IG1lcmdlQ2xhc3Nlcyh7XG4gICAgICAgIGJhc2VDbGFzc2VzOiBjbGFzc2VzLFxuICAgICAgICBuZXdDbGFzc2VzOiBpbnB1dFByb3BzLmNsYXNzZXMsXG4gICAgICAgIENvbXBvbmVudDogU2VsZWN0XG4gICAgICB9KSA6IGNsYXNzZXNcbiAgICB9LCBpbnB1dCA/IGlucHV0LnByb3BzLmlucHV0UHJvcHMgOiB7fSksXG4gICAgcmVmOiByZWZcbiAgfSwgb3RoZXIpKTtcbn0pO1xucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gU2VsZWN0LnByb3BUeXBlcyA9IHtcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gV2FybmluZyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAvLyB8IFRoZXNlIFByb3BUeXBlcyBhcmUgZ2VuZXJhdGVkIGZyb20gdGhlIFR5cGVTY3JpcHQgdHlwZSBkZWZpbml0aW9ucyB8XG4gIC8vIHwgICAgIFRvIHVwZGF0ZSB0aGVtIGVkaXQgdGhlIGQudHMgZmlsZSBhbmQgcnVuIFwieWFybiBwcm9wdHlwZXNcIiAgICAgfFxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIHdpZHRoIG9mIHRoZSBwb3BvdmVyIHdpbGwgYXV0b21hdGljYWxseSBiZSBzZXQgYWNjb3JkaW5nIHRvIHRoZSBpdGVtcyBpbnNpZGUgdGhlXG4gICAqIG1lbnUsIG90aGVyd2lzZSBpdCB3aWxsIGJlIGF0IGxlYXN0IHRoZSB3aWR0aCBvZiB0aGUgc2VsZWN0IGlucHV0LlxuICAgKi9cbiAgYXV0b1dpZHRoOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogVGhlIG9wdGlvbiBlbGVtZW50cyB0byBwb3B1bGF0ZSB0aGUgc2VsZWN0IHdpdGguXG4gICAqIENhbiBiZSBzb21lIGBNZW51SXRlbWAgd2hlbiBgbmF0aXZlYCBpcyBmYWxzZSBhbmQgYG9wdGlvbmAgd2hlbiBgbmF0aXZlYCBpcyB0cnVlLlxuICAgKlxuICAgKiDimqDvuI9UaGUgYE1lbnVJdGVtYCBlbGVtZW50cyAqKm11c3QqKiBiZSBkaXJlY3QgZGVzY2VuZGFudHMgd2hlbiBgbmF0aXZlYCBpcyBmYWxzZS5cbiAgICovXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcblxuICAvKipcbiAgICogT3ZlcnJpZGUgb3IgZXh0ZW5kIHRoZSBzdHlsZXMgYXBwbGllZCB0byB0aGUgY29tcG9uZW50LlxuICAgKiBTZWUgW0NTUyBBUEldKCNjc3MpIGJlbG93IGZvciBtb3JlIGRldGFpbHMuXG4gICAqL1xuICBjbGFzc2VzOiBQcm9wVHlwZXMub2JqZWN0LFxuXG4gIC8qKlxuICAgKiBUaGUgZGVmYXVsdCBlbGVtZW50IHZhbHVlLiBVc2Ugd2hlbiB0aGUgY29tcG9uZW50IGlzIG5vdCBjb250cm9sbGVkLlxuICAgKi9cbiAgZGVmYXVsdFZhbHVlOiBQcm9wVHlwZXMuYW55LFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIGEgdmFsdWUgaXMgZGlzcGxheWVkIGV2ZW4gaWYgbm8gaXRlbXMgYXJlIHNlbGVjdGVkLlxuICAgKlxuICAgKiBJbiBvcmRlciB0byBkaXNwbGF5IGEgbWVhbmluZ2Z1bCB2YWx1ZSwgYSBmdW5jdGlvbiBzaG91bGQgYmUgcGFzc2VkIHRvIHRoZSBgcmVuZGVyVmFsdWVgIHByb3Agd2hpY2ggcmV0dXJucyB0aGUgdmFsdWUgdG8gYmUgZGlzcGxheWVkIHdoZW4gbm8gaXRlbXMgYXJlIHNlbGVjdGVkLlxuICAgKiBZb3UgY2FuIG9ubHkgdXNlIGl0IHdoZW4gdGhlIGBuYXRpdmVgIHByb3AgaXMgYGZhbHNlYCAoZGVmYXVsdCkuXG4gICAqL1xuICBkaXNwbGF5RW1wdHk6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBUaGUgaWNvbiB0aGF0IGRpc3BsYXlzIHRoZSBhcnJvdy5cbiAgICovXG4gIEljb25Db21wb25lbnQ6IFByb3BUeXBlcy5lbGVtZW50VHlwZSxcblxuICAvKipcbiAgICogVGhlIGBpZGAgb2YgdGhlIHdyYXBwZXIgZWxlbWVudCBvciB0aGUgYHNlbGVjdGAgZWxlbWVudCB3aGVuIGBuYXRpdmVgLlxuICAgKi9cbiAgaWQ6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIEFuIGBJbnB1dGAgZWxlbWVudDsgZG9lcyBub3QgaGF2ZSB0byBiZSBhIG1hdGVyaWFsLXVpIHNwZWNpZmljIGBJbnB1dGAuXG4gICAqL1xuICBpbnB1dDogUHJvcFR5cGVzLmVsZW1lbnQsXG5cbiAgLyoqXG4gICAqIFtBdHRyaWJ1dGVzXShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9IVE1ML0VsZW1lbnQvaW5wdXQjQXR0cmlidXRlcykgYXBwbGllZCB0byB0aGUgYGlucHV0YCBlbGVtZW50LlxuICAgKiBXaGVuIGBuYXRpdmVgIGlzIGB0cnVlYCwgdGhlIGF0dHJpYnV0ZXMgYXJlIGFwcGxpZWQgb24gdGhlIGBzZWxlY3RgIGVsZW1lbnQuXG4gICAqL1xuICBpbnB1dFByb3BzOiBQcm9wVHlwZXMub2JqZWN0LFxuXG4gIC8qKlxuICAgKiBTZWUgW091dGxpbmVkSW5wdXQjbGFiZWxdKC9hcGkvb3V0bGluZWQtaW5wdXQvI3Byb3BzKVxuICAgKi9cbiAgbGFiZWw6IFByb3BUeXBlcy5ub2RlLFxuXG4gIC8qKlxuICAgKiBUaGUgSUQgb2YgYW4gZWxlbWVudCB0aGF0IGFjdHMgYXMgYW4gYWRkaXRpb25hbCBsYWJlbC4gVGhlIFNlbGVjdCB3aWxsXG4gICAqIGJlIGxhYmVsbGVkIGJ5IHRoZSBhZGRpdGlvbmFsIGxhYmVsIGFuZCB0aGUgc2VsZWN0ZWQgdmFsdWUuXG4gICAqL1xuICBsYWJlbElkOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBTZWUgW091dGxpbmVkSW5wdXQjbGFiZWxdKC9hcGkvb3V0bGluZWQtaW5wdXQvI3Byb3BzKVxuICAgKi9cbiAgbGFiZWxXaWR0aDogUHJvcFR5cGVzLm51bWJlcixcblxuICAvKipcbiAgICogUHJvcHMgYXBwbGllZCB0byB0aGUgW2BNZW51YF0oL2FwaS9tZW51LykgZWxlbWVudC5cbiAgICovXG4gIE1lbnVQcm9wczogUHJvcFR5cGVzLm9iamVjdCxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCBgdmFsdWVgIG11c3QgYmUgYW4gYXJyYXkgYW5kIHRoZSBtZW51IHdpbGwgc3VwcG9ydCBtdWx0aXBsZSBzZWxlY3Rpb25zLlxuICAgKi9cbiAgbXVsdGlwbGU6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBjb21wb25lbnQgd2lsbCBiZSB1c2luZyBhIG5hdGl2ZSBgc2VsZWN0YCBlbGVtZW50LlxuICAgKi9cbiAgbmF0aXZlOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogQ2FsbGJhY2sgZnVuY3Rpb24gZmlyZWQgd2hlbiBhIG1lbnUgaXRlbSBpcyBzZWxlY3RlZC5cbiAgICpcbiAgICogQHBhcmFtIHtvYmplY3R9IGV2ZW50IFRoZSBldmVudCBzb3VyY2Ugb2YgdGhlIGNhbGxiYWNrLlxuICAgKiBZb3UgY2FuIHB1bGwgb3V0IHRoZSBuZXcgdmFsdWUgYnkgYWNjZXNzaW5nIGBldmVudC50YXJnZXQudmFsdWVgIChhbnkpLlxuICAgKiBAcGFyYW0ge29iamVjdH0gW2NoaWxkXSBUaGUgcmVhY3QgZWxlbWVudCB0aGF0IHdhcyBzZWxlY3RlZCB3aGVuIGBuYXRpdmVgIGlzIGBmYWxzZWAgKGRlZmF1bHQpLlxuICAgKi9cbiAgb25DaGFuZ2U6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCB3aGVuIHRoZSBjb21wb25lbnQgcmVxdWVzdHMgdG8gYmUgY2xvc2VkLlxuICAgKiBVc2UgaW4gY29udHJvbGxlZCBtb2RlIChzZWUgb3BlbikuXG4gICAqXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBldmVudCBUaGUgZXZlbnQgc291cmNlIG9mIHRoZSBjYWxsYmFjay5cbiAgICovXG4gIG9uQ2xvc2U6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCB3aGVuIHRoZSBjb21wb25lbnQgcmVxdWVzdHMgdG8gYmUgb3BlbmVkLlxuICAgKiBVc2UgaW4gY29udHJvbGxlZCBtb2RlIChzZWUgb3BlbikuXG4gICAqXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBldmVudCBUaGUgZXZlbnQgc291cmNlIG9mIHRoZSBjYWxsYmFjay5cbiAgICovXG4gIG9uT3BlbjogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIENvbnRyb2wgYHNlbGVjdGAgb3BlbiBzdGF0ZS5cbiAgICogWW91IGNhbiBvbmx5IHVzZSBpdCB3aGVuIHRoZSBgbmF0aXZlYCBwcm9wIGlzIGBmYWxzZWAgKGRlZmF1bHQpLlxuICAgKi9cbiAgb3BlbjogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIFJlbmRlciB0aGUgc2VsZWN0ZWQgdmFsdWUuXG4gICAqIFlvdSBjYW4gb25seSB1c2UgaXQgd2hlbiB0aGUgYG5hdGl2ZWAgcHJvcCBpcyBgZmFsc2VgIChkZWZhdWx0KS5cbiAgICpcbiAgICogQHBhcmFtIHthbnl9IHZhbHVlIFRoZSBgdmFsdWVgIHByb3ZpZGVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAqIEByZXR1cm5zIHtSZWFjdE5vZGV9XG4gICAqL1xuICByZW5kZXJWYWx1ZTogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIFByb3BzIGFwcGxpZWQgdG8gdGhlIGNsaWNrYWJsZSBkaXYgZWxlbWVudC5cbiAgICovXG4gIFNlbGVjdERpc3BsYXlQcm9wczogUHJvcFR5cGVzLm9iamVjdCxcblxuICAvKipcbiAgICogVGhlIGlucHV0IHZhbHVlLiBQcm92aWRpbmcgYW4gZW1wdHkgc3RyaW5nIHdpbGwgc2VsZWN0IG5vIG9wdGlvbnMuXG4gICAqIFRoaXMgcHJvcCBpcyByZXF1aXJlZCB3aGVuIHRoZSBgbmF0aXZlYCBwcm9wIGlzIGBmYWxzZWAgKGRlZmF1bHQpLlxuICAgKiBTZXQgdG8gYW4gZW1wdHkgc3RyaW5nIGAnJ2AgaWYgeW91IGRvbid0IHdhbnQgYW55IG9mIHRoZSBhdmFpbGFibGUgb3B0aW9ucyB0byBiZSBzZWxlY3RlZC5cbiAgICpcbiAgICogSWYgdGhlIHZhbHVlIGlzIGFuIG9iamVjdCBpdCBtdXN0IGhhdmUgcmVmZXJlbmNlIGVxdWFsaXR5IHdpdGggdGhlIG9wdGlvbiBpbiBvcmRlciB0byBiZSBzZWxlY3RlZC5cbiAgICogSWYgdGhlIHZhbHVlIGlzIG5vdCBhbiBvYmplY3QsIHRoZSBzdHJpbmcgcmVwcmVzZW50YXRpb24gbXVzdCBtYXRjaCB3aXRoIHRoZSBzdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgdGhlIG9wdGlvbiBpbiBvcmRlciB0byBiZSBzZWxlY3RlZC5cbiAgICovXG4gIHZhbHVlOiBQcm9wVHlwZXMuYW55LFxuXG4gIC8qKlxuICAgKiBUaGUgdmFyaWFudCB0byB1c2UuXG4gICAqL1xuICB2YXJpYW50OiBQcm9wVHlwZXMub25lT2YoWydmaWxsZWQnLCAnb3V0bGluZWQnLCAnc3RhbmRhcmQnXSlcbn0gOiB2b2lkIDA7XG5TZWxlY3QubXVpTmFtZSA9ICdTZWxlY3QnO1xuZXhwb3J0IGRlZmF1bHQgd2l0aFN0eWxlcyhzdHlsZXMsIHtcbiAgbmFtZTogJ011aVNlbGVjdCdcbn0pKFNlbGVjdCk7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc1wiO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBjbHN4IGZyb20gJ2Nsc3gnO1xuaW1wb3J0IHsgcmVmVHlwZSB9IGZyb20gJ0BtYXRlcmlhbC11aS91dGlscyc7XG5pbXBvcnQgSW5wdXQgZnJvbSAnLi4vSW5wdXQnO1xuaW1wb3J0IEZpbGxlZElucHV0IGZyb20gJy4uL0ZpbGxlZElucHV0JztcbmltcG9ydCBPdXRsaW5lZElucHV0IGZyb20gJy4uL091dGxpbmVkSW5wdXQnO1xuaW1wb3J0IElucHV0TGFiZWwgZnJvbSAnLi4vSW5wdXRMYWJlbCc7XG5pbXBvcnQgRm9ybUNvbnRyb2wgZnJvbSAnLi4vRm9ybUNvbnRyb2wnO1xuaW1wb3J0IEZvcm1IZWxwZXJUZXh0IGZyb20gJy4uL0Zvcm1IZWxwZXJUZXh0JztcbmltcG9ydCBTZWxlY3QgZnJvbSAnLi4vU2VsZWN0JztcbmltcG9ydCB3aXRoU3R5bGVzIGZyb20gJy4uL3N0eWxlcy93aXRoU3R5bGVzJztcbnZhciB2YXJpYW50Q29tcG9uZW50ID0ge1xuICBzdGFuZGFyZDogSW5wdXQsXG4gIGZpbGxlZDogRmlsbGVkSW5wdXQsXG4gIG91dGxpbmVkOiBPdXRsaW5lZElucHV0XG59O1xuZXhwb3J0IHZhciBzdHlsZXMgPSB7XG4gIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQuICovXG4gIHJvb3Q6IHt9XG59O1xuLyoqXG4gKiBUaGUgYFRleHRGaWVsZGAgaXMgYSBjb252ZW5pZW5jZSB3cmFwcGVyIGZvciB0aGUgbW9zdCBjb21tb24gY2FzZXMgKDgwJSkuXG4gKiBJdCBjYW5ub3QgYmUgYWxsIHRoaW5ncyB0byBhbGwgcGVvcGxlLCBvdGhlcndpc2UgdGhlIEFQSSB3b3VsZCBncm93IG91dCBvZiBjb250cm9sLlxuICpcbiAqICMjIEFkdmFuY2VkIENvbmZpZ3VyYXRpb25cbiAqXG4gKiBJdCdzIGltcG9ydGFudCB0byB1bmRlcnN0YW5kIHRoYXQgdGhlIHRleHQgZmllbGQgaXMgYSBzaW1wbGUgYWJzdHJhY3Rpb25cbiAqIG9uIHRvcCBvZiB0aGUgZm9sbG93aW5nIGNvbXBvbmVudHM6XG4gKlxuICogLSBbRm9ybUNvbnRyb2xdKC9hcGkvZm9ybS1jb250cm9sLylcbiAqIC0gW0lucHV0TGFiZWxdKC9hcGkvaW5wdXQtbGFiZWwvKVxuICogLSBbRmlsbGVkSW5wdXRdKC9hcGkvZmlsbGVkLWlucHV0LylcbiAqIC0gW091dGxpbmVkSW5wdXRdKC9hcGkvb3V0bGluZWQtaW5wdXQvKVxuICogLSBbSW5wdXRdKC9hcGkvaW5wdXQvKVxuICogLSBbRm9ybUhlbHBlclRleHRdKC9hcGkvZm9ybS1oZWxwZXItdGV4dC8pXG4gKlxuICogSWYgeW91IHdpc2ggdG8gYWx0ZXIgdGhlIHByb3BzIGFwcGxpZWQgdG8gdGhlIGBpbnB1dGAgZWxlbWVudCwgeW91IGNhbiBkbyBzbyBhcyBmb2xsb3dzOlxuICpcbiAqIGBgYGpzeFxuICogY29uc3QgaW5wdXRQcm9wcyA9IHtcbiAqICAgc3RlcDogMzAwLFxuICogfTtcbiAqXG4gKiByZXR1cm4gPFRleHRGaWVsZCBpZD1cInRpbWVcIiB0eXBlPVwidGltZVwiIGlucHV0UHJvcHM9e2lucHV0UHJvcHN9IC8+O1xuICogYGBgXG4gKlxuICogRm9yIGFkdmFuY2VkIGNhc2VzLCBwbGVhc2UgbG9vayBhdCB0aGUgc291cmNlIG9mIFRleHRGaWVsZCBieSBjbGlja2luZyBvbiB0aGVcbiAqIFwiRWRpdCB0aGlzIHBhZ2VcIiBidXR0b24gYWJvdmUuIENvbnNpZGVyIGVpdGhlcjpcbiAqXG4gKiAtIHVzaW5nIHRoZSB1cHBlciBjYXNlIHByb3BzIGZvciBwYXNzaW5nIHZhbHVlcyBkaXJlY3RseSB0byB0aGUgY29tcG9uZW50c1xuICogLSB1c2luZyB0aGUgdW5kZXJseWluZyBjb21wb25lbnRzIGRpcmVjdGx5IGFzIHNob3duIGluIHRoZSBkZW1vc1xuICovXG5cbnZhciBUZXh0RmllbGQgPSAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBUZXh0RmllbGQocHJvcHMsIHJlZikge1xuICB2YXIgYXV0b0NvbXBsZXRlID0gcHJvcHMuYXV0b0NvbXBsZXRlLFxuICAgICAgX3Byb3BzJGF1dG9Gb2N1cyA9IHByb3BzLmF1dG9Gb2N1cyxcbiAgICAgIGF1dG9Gb2N1cyA9IF9wcm9wcyRhdXRvRm9jdXMgPT09IHZvaWQgMCA/IGZhbHNlIDogX3Byb3BzJGF1dG9Gb2N1cyxcbiAgICAgIGNoaWxkcmVuID0gcHJvcHMuY2hpbGRyZW4sXG4gICAgICBjbGFzc2VzID0gcHJvcHMuY2xhc3NlcyxcbiAgICAgIGNsYXNzTmFtZSA9IHByb3BzLmNsYXNzTmFtZSxcbiAgICAgIF9wcm9wcyRjb2xvciA9IHByb3BzLmNvbG9yLFxuICAgICAgY29sb3IgPSBfcHJvcHMkY29sb3IgPT09IHZvaWQgMCA/ICdwcmltYXJ5JyA6IF9wcm9wcyRjb2xvcixcbiAgICAgIGRlZmF1bHRWYWx1ZSA9IHByb3BzLmRlZmF1bHRWYWx1ZSxcbiAgICAgIF9wcm9wcyRkaXNhYmxlZCA9IHByb3BzLmRpc2FibGVkLFxuICAgICAgZGlzYWJsZWQgPSBfcHJvcHMkZGlzYWJsZWQgPT09IHZvaWQgMCA/IGZhbHNlIDogX3Byb3BzJGRpc2FibGVkLFxuICAgICAgX3Byb3BzJGVycm9yID0gcHJvcHMuZXJyb3IsXG4gICAgICBlcnJvciA9IF9wcm9wcyRlcnJvciA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcHJvcHMkZXJyb3IsXG4gICAgICBGb3JtSGVscGVyVGV4dFByb3BzID0gcHJvcHMuRm9ybUhlbHBlclRleHRQcm9wcyxcbiAgICAgIF9wcm9wcyRmdWxsV2lkdGggPSBwcm9wcy5mdWxsV2lkdGgsXG4gICAgICBmdWxsV2lkdGggPSBfcHJvcHMkZnVsbFdpZHRoID09PSB2b2lkIDAgPyBmYWxzZSA6IF9wcm9wcyRmdWxsV2lkdGgsXG4gICAgICBoZWxwZXJUZXh0ID0gcHJvcHMuaGVscGVyVGV4dCxcbiAgICAgIGhpZGRlbkxhYmVsID0gcHJvcHMuaGlkZGVuTGFiZWwsXG4gICAgICBpZCA9IHByb3BzLmlkLFxuICAgICAgSW5wdXRMYWJlbFByb3BzID0gcHJvcHMuSW5wdXRMYWJlbFByb3BzLFxuICAgICAgaW5wdXRQcm9wcyA9IHByb3BzLmlucHV0UHJvcHMsXG4gICAgICBJbnB1dFByb3BzID0gcHJvcHMuSW5wdXRQcm9wcyxcbiAgICAgIGlucHV0UmVmID0gcHJvcHMuaW5wdXRSZWYsXG4gICAgICBsYWJlbCA9IHByb3BzLmxhYmVsLFxuICAgICAgX3Byb3BzJG11bHRpbGluZSA9IHByb3BzLm11bHRpbGluZSxcbiAgICAgIG11bHRpbGluZSA9IF9wcm9wcyRtdWx0aWxpbmUgPT09IHZvaWQgMCA/IGZhbHNlIDogX3Byb3BzJG11bHRpbGluZSxcbiAgICAgIG5hbWUgPSBwcm9wcy5uYW1lLFxuICAgICAgb25CbHVyID0gcHJvcHMub25CbHVyLFxuICAgICAgb25DaGFuZ2UgPSBwcm9wcy5vbkNoYW5nZSxcbiAgICAgIG9uRm9jdXMgPSBwcm9wcy5vbkZvY3VzLFxuICAgICAgcGxhY2Vob2xkZXIgPSBwcm9wcy5wbGFjZWhvbGRlcixcbiAgICAgIF9wcm9wcyRyZXF1aXJlZCA9IHByb3BzLnJlcXVpcmVkLFxuICAgICAgcmVxdWlyZWQgPSBfcHJvcHMkcmVxdWlyZWQgPT09IHZvaWQgMCA/IGZhbHNlIDogX3Byb3BzJHJlcXVpcmVkLFxuICAgICAgcm93cyA9IHByb3BzLnJvd3MsXG4gICAgICByb3dzTWF4ID0gcHJvcHMucm93c01heCxcbiAgICAgIF9wcm9wcyRzZWxlY3QgPSBwcm9wcy5zZWxlY3QsXG4gICAgICBzZWxlY3QgPSBfcHJvcHMkc2VsZWN0ID09PSB2b2lkIDAgPyBmYWxzZSA6IF9wcm9wcyRzZWxlY3QsXG4gICAgICBTZWxlY3RQcm9wcyA9IHByb3BzLlNlbGVjdFByb3BzLFxuICAgICAgdHlwZSA9IHByb3BzLnR5cGUsXG4gICAgICB2YWx1ZSA9IHByb3BzLnZhbHVlLFxuICAgICAgX3Byb3BzJHZhcmlhbnQgPSBwcm9wcy52YXJpYW50LFxuICAgICAgdmFyaWFudCA9IF9wcm9wcyR2YXJpYW50ID09PSB2b2lkIDAgPyAnc3RhbmRhcmQnIDogX3Byb3BzJHZhcmlhbnQsXG4gICAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhwcm9wcywgW1wiYXV0b0NvbXBsZXRlXCIsIFwiYXV0b0ZvY3VzXCIsIFwiY2hpbGRyZW5cIiwgXCJjbGFzc2VzXCIsIFwiY2xhc3NOYW1lXCIsIFwiY29sb3JcIiwgXCJkZWZhdWx0VmFsdWVcIiwgXCJkaXNhYmxlZFwiLCBcImVycm9yXCIsIFwiRm9ybUhlbHBlclRleHRQcm9wc1wiLCBcImZ1bGxXaWR0aFwiLCBcImhlbHBlclRleHRcIiwgXCJoaWRkZW5MYWJlbFwiLCBcImlkXCIsIFwiSW5wdXRMYWJlbFByb3BzXCIsIFwiaW5wdXRQcm9wc1wiLCBcIklucHV0UHJvcHNcIiwgXCJpbnB1dFJlZlwiLCBcImxhYmVsXCIsIFwibXVsdGlsaW5lXCIsIFwibmFtZVwiLCBcIm9uQmx1clwiLCBcIm9uQ2hhbmdlXCIsIFwib25Gb2N1c1wiLCBcInBsYWNlaG9sZGVyXCIsIFwicmVxdWlyZWRcIiwgXCJyb3dzXCIsIFwicm93c01heFwiLCBcInNlbGVjdFwiLCBcIlNlbGVjdFByb3BzXCIsIFwidHlwZVwiLCBcInZhbHVlXCIsIFwidmFyaWFudFwiXSk7XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBpZiAoc2VsZWN0ICYmICFjaGlsZHJlbikge1xuICAgICAgY29uc29sZS5lcnJvcignTWF0ZXJpYWwtVUk6IGBjaGlsZHJlbmAgbXVzdCBiZSBwYXNzZWQgd2hlbiB1c2luZyB0aGUgYFRleHRGaWVsZGAgY29tcG9uZW50IHdpdGggYHNlbGVjdGAuJyk7XG4gICAgfVxuICB9XG5cbiAgdmFyIElucHV0TW9yZSA9IHt9O1xuXG4gIGlmICh2YXJpYW50ID09PSAnb3V0bGluZWQnKSB7XG4gICAgaWYgKElucHV0TGFiZWxQcm9wcyAmJiB0eXBlb2YgSW5wdXRMYWJlbFByb3BzLnNocmluayAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIElucHV0TW9yZS5ub3RjaGVkID0gSW5wdXRMYWJlbFByb3BzLnNocmluaztcbiAgICB9XG5cbiAgICBpZiAobGFiZWwpIHtcbiAgICAgIHZhciBfSW5wdXRMYWJlbFByb3BzJHJlcXU7XG5cbiAgICAgIHZhciBkaXNwbGF5UmVxdWlyZWQgPSAoX0lucHV0TGFiZWxQcm9wcyRyZXF1ID0gSW5wdXRMYWJlbFByb3BzID09PSBudWxsIHx8IElucHV0TGFiZWxQcm9wcyA9PT0gdm9pZCAwID8gdm9pZCAwIDogSW5wdXRMYWJlbFByb3BzLnJlcXVpcmVkKSAhPT0gbnVsbCAmJiBfSW5wdXRMYWJlbFByb3BzJHJlcXUgIT09IHZvaWQgMCA/IF9JbnB1dExhYmVsUHJvcHMkcmVxdSA6IHJlcXVpcmVkO1xuICAgICAgSW5wdXRNb3JlLmxhYmVsID0gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoUmVhY3QuRnJhZ21lbnQsIG51bGwsIGxhYmVsLCBkaXNwbGF5UmVxdWlyZWQgJiYgXCJcXHhBMCpcIik7XG4gICAgfVxuICB9XG5cbiAgaWYgKHNlbGVjdCkge1xuICAgIC8vIHVuc2V0IGRlZmF1bHRzIGZyb20gdGV4dGJveCBpbnB1dHNcbiAgICBpZiAoIVNlbGVjdFByb3BzIHx8ICFTZWxlY3RQcm9wcy5uYXRpdmUpIHtcbiAgICAgIElucHV0TW9yZS5pZCA9IHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICBJbnB1dE1vcmVbJ2FyaWEtZGVzY3JpYmVkYnknXSA9IHVuZGVmaW5lZDtcbiAgfVxuXG4gIHZhciBoZWxwZXJUZXh0SWQgPSBoZWxwZXJUZXh0ICYmIGlkID8gXCJcIi5jb25jYXQoaWQsIFwiLWhlbHBlci10ZXh0XCIpIDogdW5kZWZpbmVkO1xuICB2YXIgaW5wdXRMYWJlbElkID0gbGFiZWwgJiYgaWQgPyBcIlwiLmNvbmNhdChpZCwgXCItbGFiZWxcIikgOiB1bmRlZmluZWQ7XG4gIHZhciBJbnB1dENvbXBvbmVudCA9IHZhcmlhbnRDb21wb25lbnRbdmFyaWFudF07XG4gIHZhciBJbnB1dEVsZW1lbnQgPSAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChJbnB1dENvbXBvbmVudCwgX2V4dGVuZHMoe1xuICAgIFwiYXJpYS1kZXNjcmliZWRieVwiOiBoZWxwZXJUZXh0SWQsXG4gICAgYXV0b0NvbXBsZXRlOiBhdXRvQ29tcGxldGUsXG4gICAgYXV0b0ZvY3VzOiBhdXRvRm9jdXMsXG4gICAgZGVmYXVsdFZhbHVlOiBkZWZhdWx0VmFsdWUsXG4gICAgZnVsbFdpZHRoOiBmdWxsV2lkdGgsXG4gICAgbXVsdGlsaW5lOiBtdWx0aWxpbmUsXG4gICAgbmFtZTogbmFtZSxcbiAgICByb3dzOiByb3dzLFxuICAgIHJvd3NNYXg6IHJvd3NNYXgsXG4gICAgdHlwZTogdHlwZSxcbiAgICB2YWx1ZTogdmFsdWUsXG4gICAgaWQ6IGlkLFxuICAgIGlucHV0UmVmOiBpbnB1dFJlZixcbiAgICBvbkJsdXI6IG9uQmx1cixcbiAgICBvbkNoYW5nZTogb25DaGFuZ2UsXG4gICAgb25Gb2N1czogb25Gb2N1cyxcbiAgICBwbGFjZWhvbGRlcjogcGxhY2Vob2xkZXIsXG4gICAgaW5wdXRQcm9wczogaW5wdXRQcm9wc1xuICB9LCBJbnB1dE1vcmUsIElucHV0UHJvcHMpKTtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KEZvcm1Db250cm9sLCBfZXh0ZW5kcyh7XG4gICAgY2xhc3NOYW1lOiBjbHN4KGNsYXNzZXMucm9vdCwgY2xhc3NOYW1lKSxcbiAgICBkaXNhYmxlZDogZGlzYWJsZWQsXG4gICAgZXJyb3I6IGVycm9yLFxuICAgIGZ1bGxXaWR0aDogZnVsbFdpZHRoLFxuICAgIGhpZGRlbkxhYmVsOiBoaWRkZW5MYWJlbCxcbiAgICByZWY6IHJlZixcbiAgICByZXF1aXJlZDogcmVxdWlyZWQsXG4gICAgY29sb3I6IGNvbG9yLFxuICAgIHZhcmlhbnQ6IHZhcmlhbnRcbiAgfSwgb3RoZXIpLCBsYWJlbCAmJiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChJbnB1dExhYmVsLCBfZXh0ZW5kcyh7XG4gICAgaHRtbEZvcjogaWQsXG4gICAgaWQ6IGlucHV0TGFiZWxJZFxuICB9LCBJbnB1dExhYmVsUHJvcHMpLCBsYWJlbCksIHNlbGVjdCA/IC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFNlbGVjdCwgX2V4dGVuZHMoe1xuICAgIFwiYXJpYS1kZXNjcmliZWRieVwiOiBoZWxwZXJUZXh0SWQsXG4gICAgaWQ6IGlkLFxuICAgIGxhYmVsSWQ6IGlucHV0TGFiZWxJZCxcbiAgICB2YWx1ZTogdmFsdWUsXG4gICAgaW5wdXQ6IElucHV0RWxlbWVudFxuICB9LCBTZWxlY3RQcm9wcyksIGNoaWxkcmVuKSA6IElucHV0RWxlbWVudCwgaGVscGVyVGV4dCAmJiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChGb3JtSGVscGVyVGV4dCwgX2V4dGVuZHMoe1xuICAgIGlkOiBoZWxwZXJUZXh0SWRcbiAgfSwgRm9ybUhlbHBlclRleHRQcm9wcyksIGhlbHBlclRleHQpKTtcbn0pO1xucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gVGV4dEZpZWxkLnByb3BUeXBlcyA9IHtcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gV2FybmluZyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAvLyB8IFRoZXNlIFByb3BUeXBlcyBhcmUgZ2VuZXJhdGVkIGZyb20gdGhlIFR5cGVTY3JpcHQgdHlwZSBkZWZpbml0aW9ucyB8XG4gIC8vIHwgICAgIFRvIHVwZGF0ZSB0aGVtIGVkaXQgdGhlIGQudHMgZmlsZSBhbmQgcnVuIFwieWFybiBwcm9wdHlwZXNcIiAgICAgfFxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbiAgLyoqXG4gICAqIFRoaXMgcHJvcCBoZWxwcyB1c2VycyB0byBmaWxsIGZvcm1zIGZhc3RlciwgZXNwZWNpYWxseSBvbiBtb2JpbGUgZGV2aWNlcy5cbiAgICogVGhlIG5hbWUgY2FuIGJlIGNvbmZ1c2luZywgYXMgaXQncyBtb3JlIGxpa2UgYW4gYXV0b2ZpbGwuXG4gICAqIFlvdSBjYW4gbGVhcm4gbW9yZSBhYm91dCBpdCBbZm9sbG93aW5nIHRoZSBzcGVjaWZpY2F0aW9uXShodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9mb3JtLWNvbnRyb2wtaW5mcmFzdHJ1Y3R1cmUuaHRtbCNhdXRvZmlsbCkuXG4gICAqL1xuICBhdXRvQ29tcGxldGU6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGBpbnB1dGAgZWxlbWVudCB3aWxsIGJlIGZvY3VzZWQgZHVyaW5nIHRoZSBmaXJzdCBtb3VudC5cbiAgICovXG4gIGF1dG9Gb2N1czogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcblxuICAvKipcbiAgICogT3ZlcnJpZGUgb3IgZXh0ZW5kIHRoZSBzdHlsZXMgYXBwbGllZCB0byB0aGUgY29tcG9uZW50LlxuICAgKiBTZWUgW0NTUyBBUEldKCNjc3MpIGJlbG93IGZvciBtb3JlIGRldGFpbHMuXG4gICAqL1xuICBjbGFzc2VzOiBQcm9wVHlwZXMub2JqZWN0LFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIFRoZSBjb2xvciBvZiB0aGUgY29tcG9uZW50LiBJdCBzdXBwb3J0cyB0aG9zZSB0aGVtZSBjb2xvcnMgdGhhdCBtYWtlIHNlbnNlIGZvciB0aGlzIGNvbXBvbmVudC5cbiAgICovXG4gIGNvbG9yOiBQcm9wVHlwZXMub25lT2YoWydwcmltYXJ5JywgJ3NlY29uZGFyeSddKSxcblxuICAvKipcbiAgICogVGhlIGRlZmF1bHQgdmFsdWUgb2YgdGhlIGBpbnB1dGAgZWxlbWVudC5cbiAgICovXG4gIGRlZmF1bHRWYWx1ZTogUHJvcFR5cGVzLmFueSxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgYGlucHV0YCBlbGVtZW50IHdpbGwgYmUgZGlzYWJsZWQuXG4gICAqL1xuICBkaXNhYmxlZDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGxhYmVsIHdpbGwgYmUgZGlzcGxheWVkIGluIGFuIGVycm9yIHN0YXRlLlxuICAgKi9cbiAgZXJyb3I6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBQcm9wcyBhcHBsaWVkIHRvIHRoZSBbYEZvcm1IZWxwZXJUZXh0YF0oL2FwaS9mb3JtLWhlbHBlci10ZXh0LykgZWxlbWVudC5cbiAgICovXG4gIEZvcm1IZWxwZXJUZXh0UHJvcHM6IFByb3BUeXBlcy5vYmplY3QsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGlucHV0IHdpbGwgdGFrZSB1cCB0aGUgZnVsbCB3aWR0aCBvZiBpdHMgY29udGFpbmVyLlxuICAgKi9cbiAgZnVsbFdpZHRoOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogVGhlIGhlbHBlciB0ZXh0IGNvbnRlbnQuXG4gICAqL1xuICBoZWxwZXJUZXh0OiBQcm9wVHlwZXMubm9kZSxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgaGlkZGVuTGFiZWw6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBUaGUgaWQgb2YgdGhlIGBpbnB1dGAgZWxlbWVudC5cbiAgICogVXNlIHRoaXMgcHJvcCB0byBtYWtlIGBsYWJlbGAgYW5kIGBoZWxwZXJUZXh0YCBhY2Nlc3NpYmxlIGZvciBzY3JlZW4gcmVhZGVycy5cbiAgICovXG4gIGlkOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBQcm9wcyBhcHBsaWVkIHRvIHRoZSBbYElucHV0TGFiZWxgXSgvYXBpL2lucHV0LWxhYmVsLykgZWxlbWVudC5cbiAgICovXG4gIElucHV0TGFiZWxQcm9wczogUHJvcFR5cGVzLm9iamVjdCxcblxuICAvKipcbiAgICogW0F0dHJpYnV0ZXNdKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0hUTUwvRWxlbWVudC9pbnB1dCNBdHRyaWJ1dGVzKSBhcHBsaWVkIHRvIHRoZSBgaW5wdXRgIGVsZW1lbnQuXG4gICAqL1xuICBpbnB1dFByb3BzOiBQcm9wVHlwZXMub2JqZWN0LFxuXG4gIC8qKlxuICAgKiBQcm9wcyBhcHBsaWVkIHRvIHRoZSBJbnB1dCBlbGVtZW50LlxuICAgKiBJdCB3aWxsIGJlIGEgW2BGaWxsZWRJbnB1dGBdKC9hcGkvZmlsbGVkLWlucHV0LyksXG4gICAqIFtgT3V0bGluZWRJbnB1dGBdKC9hcGkvb3V0bGluZWQtaW5wdXQvKSBvciBbYElucHV0YF0oL2FwaS9pbnB1dC8pXG4gICAqIGNvbXBvbmVudCBkZXBlbmRpbmcgb24gdGhlIGB2YXJpYW50YCBwcm9wIHZhbHVlLlxuICAgKi9cbiAgSW5wdXRQcm9wczogUHJvcFR5cGVzLm9iamVjdCxcblxuICAvKipcbiAgICogUGFzcyBhIHJlZiB0byB0aGUgYGlucHV0YCBlbGVtZW50LlxuICAgKi9cbiAgaW5wdXRSZWY6IHJlZlR5cGUsXG5cbiAgLyoqXG4gICAqIFRoZSBsYWJlbCBjb250ZW50LlxuICAgKi9cbiAgbGFiZWw6IFByb3BUeXBlcy5ub2RlLFxuXG4gIC8qKlxuICAgKiBJZiBgZGVuc2VgIG9yIGBub3JtYWxgLCB3aWxsIGFkanVzdCB2ZXJ0aWNhbCBzcGFjaW5nIG9mIHRoaXMgYW5kIGNvbnRhaW5lZCBjb21wb25lbnRzLlxuICAgKi9cbiAgbWFyZ2luOiBQcm9wVHlwZXMub25lT2YoWydkZW5zZScsICdub25lJywgJ25vcm1hbCddKSxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCBhIHRleHRhcmVhIGVsZW1lbnQgd2lsbCBiZSByZW5kZXJlZCBpbnN0ZWFkIG9mIGFuIGlucHV0LlxuICAgKi9cbiAgbXVsdGlsaW5lOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogTmFtZSBhdHRyaWJ1dGUgb2YgdGhlIGBpbnB1dGAgZWxlbWVudC5cbiAgICovXG4gIG5hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIG9uQmx1cjogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIHdoZW4gdGhlIHZhbHVlIGlzIGNoYW5nZWQuXG4gICAqXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBldmVudCBUaGUgZXZlbnQgc291cmNlIG9mIHRoZSBjYWxsYmFjay5cbiAgICogWW91IGNhbiBwdWxsIG91dCB0aGUgbmV3IHZhbHVlIGJ5IGFjY2Vzc2luZyBgZXZlbnQudGFyZ2V0LnZhbHVlYCAoc3RyaW5nKS5cbiAgICovXG4gIG9uQ2hhbmdlOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgb25Gb2N1czogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIFRoZSBzaG9ydCBoaW50IGRpc3BsYXllZCBpbiB0aGUgaW5wdXQgYmVmb3JlIHRoZSB1c2VyIGVudGVycyBhIHZhbHVlLlxuICAgKi9cbiAgcGxhY2Vob2xkZXI6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGxhYmVsIGlzIGRpc3BsYXllZCBhcyByZXF1aXJlZCBhbmQgdGhlIGBpbnB1dGAgZWxlbWVudGAgd2lsbCBiZSByZXF1aXJlZC5cbiAgICovXG4gIHJlcXVpcmVkOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogTnVtYmVyIG9mIHJvd3MgdG8gZGlzcGxheSB3aGVuIG11bHRpbGluZSBvcHRpb24gaXMgc2V0IHRvIHRydWUuXG4gICAqL1xuICByb3dzOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMubnVtYmVyLCBQcm9wVHlwZXMuc3RyaW5nXSksXG5cbiAgLyoqXG4gICAqIE1heGltdW0gbnVtYmVyIG9mIHJvd3MgdG8gZGlzcGxheSB3aGVuIG11bHRpbGluZSBvcHRpb24gaXMgc2V0IHRvIHRydWUuXG4gICAqL1xuICByb3dzTWF4OiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMubnVtYmVyLCBQcm9wVHlwZXMuc3RyaW5nXSksXG5cbiAgLyoqXG4gICAqIFJlbmRlciBhIFtgU2VsZWN0YF0oL2FwaS9zZWxlY3QvKSBlbGVtZW50IHdoaWxlIHBhc3NpbmcgdGhlIElucHV0IGVsZW1lbnQgdG8gYFNlbGVjdGAgYXMgYGlucHV0YCBwYXJhbWV0ZXIuXG4gICAqIElmIHRoaXMgb3B0aW9uIGlzIHNldCB5b3UgbXVzdCBwYXNzIHRoZSBvcHRpb25zIG9mIHRoZSBzZWxlY3QgYXMgY2hpbGRyZW4uXG4gICAqL1xuICBzZWxlY3Q6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBQcm9wcyBhcHBsaWVkIHRvIHRoZSBbYFNlbGVjdGBdKC9hcGkvc2VsZWN0LykgZWxlbWVudC5cbiAgICovXG4gIFNlbGVjdFByb3BzOiBQcm9wVHlwZXMub2JqZWN0LFxuXG4gIC8qKlxuICAgKiBUaGUgc2l6ZSBvZiB0aGUgdGV4dCBmaWVsZC5cbiAgICovXG4gIHNpemU6IFByb3BUeXBlcy5vbmVPZihbJ21lZGl1bScsICdzbWFsbCddKSxcblxuICAvKipcbiAgICogVHlwZSBvZiB0aGUgYGlucHV0YCBlbGVtZW50LiBJdCBzaG91bGQgYmUgW2EgdmFsaWQgSFRNTDUgaW5wdXQgdHlwZV0oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSFRNTC9FbGVtZW50L2lucHV0I0Zvcm1fJTNDaW5wdXQlM0VfdHlwZXMpLlxuICAgKi9cbiAgdHlwZTogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogVGhlIHZhbHVlIG9mIHRoZSBgaW5wdXRgIGVsZW1lbnQsIHJlcXVpcmVkIGZvciBhIGNvbnRyb2xsZWQgY29tcG9uZW50LlxuICAgKi9cbiAgdmFsdWU6IFByb3BUeXBlcy5hbnksXG5cbiAgLyoqXG4gICAqIFRoZSB2YXJpYW50IHRvIHVzZS5cbiAgICovXG4gIHZhcmlhbnQ6IFByb3BUeXBlcy5vbmVPZihbJ2ZpbGxlZCcsICdvdXRsaW5lZCcsICdzdGFuZGFyZCddKVxufSA6IHZvaWQgMDtcbmV4cG9ydCBkZWZhdWx0IHdpdGhTdHlsZXMoc3R5bGVzLCB7XG4gIG5hbWU6ICdNdWlUZXh0RmllbGQnXG59KShUZXh0RmllbGQpOyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNcIjtcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgY2xzeCBmcm9tICdjbHN4JztcbmltcG9ydCB7IHJlZlR5cGUgfSBmcm9tICdAbWF0ZXJpYWwtdWkvdXRpbHMnO1xuaW1wb3J0IHsgdXNlRm9ybUNvbnRyb2wgfSBmcm9tICcuLi9Gb3JtQ29udHJvbCc7XG5pbXBvcnQgd2l0aFN0eWxlcyBmcm9tICcuLi9zdHlsZXMvd2l0aFN0eWxlcyc7XG5pbXBvcnQgVHlwb2dyYXBoeSBmcm9tICcuLi9UeXBvZ3JhcGh5JztcbmltcG9ydCBjYXBpdGFsaXplIGZyb20gJy4uL3V0aWxzL2NhcGl0YWxpemUnO1xuZXhwb3J0IHZhciBzdHlsZXMgPSBmdW5jdGlvbiBzdHlsZXModGhlbWUpIHtcbiAgcmV0dXJuIHtcbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50LiAqL1xuICAgIHJvb3Q6IHtcbiAgICAgIGRpc3BsYXk6ICdpbmxpbmUtZmxleCcsXG4gICAgICBhbGlnbkl0ZW1zOiAnY2VudGVyJyxcbiAgICAgIGN1cnNvcjogJ3BvaW50ZXInLFxuICAgICAgLy8gRm9yIGNvcnJlY3QgYWxpZ25tZW50IHdpdGggdGhlIHRleHQuXG4gICAgICB2ZXJ0aWNhbEFsaWduOiAnbWlkZGxlJyxcbiAgICAgIFdlYmtpdFRhcEhpZ2hsaWdodENvbG9yOiAndHJhbnNwYXJlbnQnLFxuICAgICAgbWFyZ2luTGVmdDogLTExLFxuICAgICAgbWFyZ2luUmlnaHQ6IDE2LFxuICAgICAgLy8gdXNlZCBmb3Igcm93IHByZXNlbnRhdGlvbiBvZiByYWRpby9jaGVja2JveFxuICAgICAgJyYkZGlzYWJsZWQnOiB7XG4gICAgICAgIGN1cnNvcjogJ2RlZmF1bHQnXG4gICAgICB9XG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGxhYmVsUGxhY2VtZW50PVwic3RhcnRcImAuICovXG4gICAgbGFiZWxQbGFjZW1lbnRTdGFydDoge1xuICAgICAgZmxleERpcmVjdGlvbjogJ3Jvdy1yZXZlcnNlJyxcbiAgICAgIG1hcmdpbkxlZnQ6IDE2LFxuICAgICAgLy8gdXNlZCBmb3Igcm93IHByZXNlbnRhdGlvbiBvZiByYWRpby9jaGVja2JveFxuICAgICAgbWFyZ2luUmlnaHQ6IC0xMVxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBsYWJlbFBsYWNlbWVudD1cInRvcFwiYC4gKi9cbiAgICBsYWJlbFBsYWNlbWVudFRvcDoge1xuICAgICAgZmxleERpcmVjdGlvbjogJ2NvbHVtbi1yZXZlcnNlJyxcbiAgICAgIG1hcmdpbkxlZnQ6IDE2XG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGxhYmVsUGxhY2VtZW50PVwiYm90dG9tXCJgLiAqL1xuICAgIGxhYmVsUGxhY2VtZW50Qm90dG9tOiB7XG4gICAgICBmbGV4RGlyZWN0aW9uOiAnY29sdW1uJyxcbiAgICAgIG1hcmdpbkxlZnQ6IDE2XG4gICAgfSxcblxuICAgIC8qIFBzZXVkby1jbGFzcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGRpc2FibGVkPXt0cnVlfWAuICovXG4gICAgZGlzYWJsZWQ6IHt9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIGxhYmVsJ3MgVHlwb2dyYXBoeSBjb21wb25lbnQuICovXG4gICAgbGFiZWw6IHtcbiAgICAgICcmJGRpc2FibGVkJzoge1xuICAgICAgICBjb2xvcjogdGhlbWUucGFsZXR0ZS50ZXh0LmRpc2FibGVkXG4gICAgICB9XG4gICAgfVxuICB9O1xufTtcbi8qKlxuICogRHJvcCBpbiByZXBsYWNlbWVudCBvZiB0aGUgYFJhZGlvYCwgYFN3aXRjaGAgYW5kIGBDaGVja2JveGAgY29tcG9uZW50LlxuICogVXNlIHRoaXMgY29tcG9uZW50IGlmIHlvdSB3YW50IHRvIGRpc3BsYXkgYW4gZXh0cmEgbGFiZWwuXG4gKi9cblxudmFyIEZvcm1Db250cm9sTGFiZWwgPSAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBGb3JtQ29udHJvbExhYmVsKHByb3BzLCByZWYpIHtcbiAgdmFyIGNoZWNrZWQgPSBwcm9wcy5jaGVja2VkLFxuICAgICAgY2xhc3NlcyA9IHByb3BzLmNsYXNzZXMsXG4gICAgICBjbGFzc05hbWUgPSBwcm9wcy5jbGFzc05hbWUsXG4gICAgICBjb250cm9sID0gcHJvcHMuY29udHJvbCxcbiAgICAgIGRpc2FibGVkUHJvcCA9IHByb3BzLmRpc2FibGVkLFxuICAgICAgaW5wdXRSZWYgPSBwcm9wcy5pbnB1dFJlZixcbiAgICAgIGxhYmVsID0gcHJvcHMubGFiZWwsXG4gICAgICBfcHJvcHMkbGFiZWxQbGFjZW1lbnQgPSBwcm9wcy5sYWJlbFBsYWNlbWVudCxcbiAgICAgIGxhYmVsUGxhY2VtZW50ID0gX3Byb3BzJGxhYmVsUGxhY2VtZW50ID09PSB2b2lkIDAgPyAnZW5kJyA6IF9wcm9wcyRsYWJlbFBsYWNlbWVudCxcbiAgICAgIG5hbWUgPSBwcm9wcy5uYW1lLFxuICAgICAgb25DaGFuZ2UgPSBwcm9wcy5vbkNoYW5nZSxcbiAgICAgIHZhbHVlID0gcHJvcHMudmFsdWUsXG4gICAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhwcm9wcywgW1wiY2hlY2tlZFwiLCBcImNsYXNzZXNcIiwgXCJjbGFzc05hbWVcIiwgXCJjb250cm9sXCIsIFwiZGlzYWJsZWRcIiwgXCJpbnB1dFJlZlwiLCBcImxhYmVsXCIsIFwibGFiZWxQbGFjZW1lbnRcIiwgXCJuYW1lXCIsIFwib25DaGFuZ2VcIiwgXCJ2YWx1ZVwiXSk7XG5cbiAgdmFyIG11aUZvcm1Db250cm9sID0gdXNlRm9ybUNvbnRyb2woKTtcbiAgdmFyIGRpc2FibGVkID0gZGlzYWJsZWRQcm9wO1xuXG4gIGlmICh0eXBlb2YgZGlzYWJsZWQgPT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBjb250cm9sLnByb3BzLmRpc2FibGVkICE9PSAndW5kZWZpbmVkJykge1xuICAgIGRpc2FibGVkID0gY29udHJvbC5wcm9wcy5kaXNhYmxlZDtcbiAgfVxuXG4gIGlmICh0eXBlb2YgZGlzYWJsZWQgPT09ICd1bmRlZmluZWQnICYmIG11aUZvcm1Db250cm9sKSB7XG4gICAgZGlzYWJsZWQgPSBtdWlGb3JtQ29udHJvbC5kaXNhYmxlZDtcbiAgfVxuXG4gIHZhciBjb250cm9sUHJvcHMgPSB7XG4gICAgZGlzYWJsZWQ6IGRpc2FibGVkXG4gIH07XG4gIFsnY2hlY2tlZCcsICduYW1lJywgJ29uQ2hhbmdlJywgJ3ZhbHVlJywgJ2lucHV0UmVmJ10uZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgaWYgKHR5cGVvZiBjb250cm9sLnByb3BzW2tleV0gPT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBwcm9wc1trZXldICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgY29udHJvbFByb3BzW2tleV0gPSBwcm9wc1trZXldO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcImxhYmVsXCIsIF9leHRlbmRzKHtcbiAgICBjbGFzc05hbWU6IGNsc3goY2xhc3Nlcy5yb290LCBjbGFzc05hbWUsIGxhYmVsUGxhY2VtZW50ICE9PSAnZW5kJyAmJiBjbGFzc2VzW1wibGFiZWxQbGFjZW1lbnRcIi5jb25jYXQoY2FwaXRhbGl6ZShsYWJlbFBsYWNlbWVudCkpXSwgZGlzYWJsZWQgJiYgY2xhc3Nlcy5kaXNhYmxlZCksXG4gICAgcmVmOiByZWZcbiAgfSwgb3RoZXIpLCAvKiNfX1BVUkVfXyovUmVhY3QuY2xvbmVFbGVtZW50KGNvbnRyb2wsIGNvbnRyb2xQcm9wcyksIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFR5cG9ncmFwaHksIHtcbiAgICBjb21wb25lbnQ6IFwic3BhblwiLFxuICAgIGNsYXNzTmFtZTogY2xzeChjbGFzc2VzLmxhYmVsLCBkaXNhYmxlZCAmJiBjbGFzc2VzLmRpc2FibGVkKVxuICB9LCBsYWJlbCkpO1xufSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBGb3JtQ29udHJvbExhYmVsLnByb3BUeXBlcyA9IHtcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gV2FybmluZyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAvLyB8IFRoZXNlIFByb3BUeXBlcyBhcmUgZ2VuZXJhdGVkIGZyb20gdGhlIFR5cGVTY3JpcHQgdHlwZSBkZWZpbml0aW9ucyB8XG4gIC8vIHwgICAgIFRvIHVwZGF0ZSB0aGVtIGVkaXQgdGhlIGQudHMgZmlsZSBhbmQgcnVuIFwieWFybiBwcm9wdHlwZXNcIiAgICAgfFxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGNvbXBvbmVudCBhcHBlYXJzIHNlbGVjdGVkLlxuICAgKi9cbiAgY2hlY2tlZDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIE92ZXJyaWRlIG9yIGV4dGVuZCB0aGUgc3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICogU2VlIFtDU1MgQVBJXSgjY3NzKSBiZWxvdyBmb3IgbW9yZSBkZXRhaWxzLlxuICAgKi9cbiAgY2xhc3NlczogUHJvcFR5cGVzLm9iamVjdCxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBBIGNvbnRyb2wgZWxlbWVudC4gRm9yIGluc3RhbmNlLCBpdCBjYW4gYmUgYmUgYSBgUmFkaW9gLCBhIGBTd2l0Y2hgIG9yIGEgYENoZWNrYm94YC5cbiAgICovXG4gIGNvbnRyb2w6IFByb3BUeXBlcy5lbGVtZW50LmlzUmVxdWlyZWQsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGNvbnRyb2wgd2lsbCBiZSBkaXNhYmxlZC5cbiAgICovXG4gIGRpc2FibGVkOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogUGFzcyBhIHJlZiB0byB0aGUgYGlucHV0YCBlbGVtZW50LlxuICAgKi9cbiAgaW5wdXRSZWY6IHJlZlR5cGUsXG5cbiAgLyoqXG4gICAqIFRoZSB0ZXh0IHRvIGJlIHVzZWQgaW4gYW4gZW5jbG9zaW5nIGxhYmVsIGVsZW1lbnQuXG4gICAqL1xuICBsYWJlbDogUHJvcFR5cGVzLm5vZGUsXG5cbiAgLyoqXG4gICAqIFRoZSBwb3NpdGlvbiBvZiB0aGUgbGFiZWwuXG4gICAqL1xuICBsYWJlbFBsYWNlbWVudDogUHJvcFR5cGVzLm9uZU9mKFsnYm90dG9tJywgJ2VuZCcsICdzdGFydCcsICd0b3AnXSksXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIG5hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIHdoZW4gdGhlIHN0YXRlIGlzIGNoYW5nZWQuXG4gICAqXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBldmVudCBUaGUgZXZlbnQgc291cmNlIG9mIHRoZSBjYWxsYmFjay5cbiAgICogWW91IGNhbiBwdWxsIG91dCB0aGUgbmV3IGNoZWNrZWQgc3RhdGUgYnkgYWNjZXNzaW5nIGBldmVudC50YXJnZXQuY2hlY2tlZGAgKGJvb2xlYW4pLlxuICAgKi9cbiAgb25DaGFuZ2U6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBUaGUgdmFsdWUgb2YgdGhlIGNvbXBvbmVudC5cbiAgICovXG4gIHZhbHVlOiBQcm9wVHlwZXMuYW55XG59IDogdm9pZCAwO1xuZXhwb3J0IGRlZmF1bHQgd2l0aFN0eWxlcyhzdHlsZXMsIHtcbiAgbmFtZTogJ011aUZvcm1Db250cm9sTGFiZWwnXG59KShGb3JtQ29udHJvbExhYmVsKTsiLCIvLyBiYXNlZCBvbiBodHRwczovL2dpdGh1Yi5jb20vV0lDRy9mb2N1cy12aXNpYmxlL2Jsb2IvdjQuMS41L3NyYy9mb2N1cy12aXNpYmxlLmpzXG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgKiBhcyBSZWFjdERPTSBmcm9tICdyZWFjdC1kb20nO1xudmFyIGhhZEtleWJvYXJkRXZlbnQgPSB0cnVlO1xudmFyIGhhZEZvY3VzVmlzaWJsZVJlY2VudGx5ID0gZmFsc2U7XG52YXIgaGFkRm9jdXNWaXNpYmxlUmVjZW50bHlUaW1lb3V0ID0gbnVsbDtcbnZhciBpbnB1dFR5cGVzV2hpdGVsaXN0ID0ge1xuICB0ZXh0OiB0cnVlLFxuICBzZWFyY2g6IHRydWUsXG4gIHVybDogdHJ1ZSxcbiAgdGVsOiB0cnVlLFxuICBlbWFpbDogdHJ1ZSxcbiAgcGFzc3dvcmQ6IHRydWUsXG4gIG51bWJlcjogdHJ1ZSxcbiAgZGF0ZTogdHJ1ZSxcbiAgbW9udGg6IHRydWUsXG4gIHdlZWs6IHRydWUsXG4gIHRpbWU6IHRydWUsXG4gIGRhdGV0aW1lOiB0cnVlLFxuICAnZGF0ZXRpbWUtbG9jYWwnOiB0cnVlXG59O1xuLyoqXG4gKiBDb21wdXRlcyB3aGV0aGVyIHRoZSBnaXZlbiBlbGVtZW50IHNob3VsZCBhdXRvbWF0aWNhbGx5IHRyaWdnZXIgdGhlXG4gKiBgZm9jdXMtdmlzaWJsZWAgY2xhc3MgYmVpbmcgYWRkZWQsIGkuZS4gd2hldGhlciBpdCBzaG91bGQgYWx3YXlzIG1hdGNoXG4gKiBgOmZvY3VzLXZpc2libGVgIHdoZW4gZm9jdXNlZC5cbiAqIEBwYXJhbSB7RWxlbWVudH0gbm9kZVxuICogQHJldHVybiB7Ym9vbGVhbn1cbiAqL1xuXG5mdW5jdGlvbiBmb2N1c1RyaWdnZXJzS2V5Ym9hcmRNb2RhbGl0eShub2RlKSB7XG4gIHZhciB0eXBlID0gbm9kZS50eXBlLFxuICAgICAgdGFnTmFtZSA9IG5vZGUudGFnTmFtZTtcblxuICBpZiAodGFnTmFtZSA9PT0gJ0lOUFVUJyAmJiBpbnB1dFR5cGVzV2hpdGVsaXN0W3R5cGVdICYmICFub2RlLnJlYWRPbmx5KSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICBpZiAodGFnTmFtZSA9PT0gJ1RFWFRBUkVBJyAmJiAhbm9kZS5yZWFkT25seSkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgaWYgKG5vZGUuaXNDb250ZW50RWRpdGFibGUpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIHJldHVybiBmYWxzZTtcbn1cbi8qKlxuICogS2VlcCB0cmFjayBvZiBvdXIga2V5Ym9hcmQgbW9kYWxpdHkgc3RhdGUgd2l0aCBgaGFkS2V5Ym9hcmRFdmVudGAuXG4gKiBJZiB0aGUgbW9zdCByZWNlbnQgdXNlciBpbnRlcmFjdGlvbiB3YXMgdmlhIHRoZSBrZXlib2FyZDtcbiAqIGFuZCB0aGUga2V5IHByZXNzIGRpZCBub3QgaW5jbHVkZSBhIG1ldGEsIGFsdC9vcHRpb24sIG9yIGNvbnRyb2wga2V5O1xuICogdGhlbiB0aGUgbW9kYWxpdHkgaXMga2V5Ym9hcmQuIE90aGVyd2lzZSwgdGhlIG1vZGFsaXR5IGlzIG5vdCBrZXlib2FyZC5cbiAqIEBwYXJhbSB7S2V5Ym9hcmRFdmVudH0gZXZlbnRcbiAqL1xuXG5cbmZ1bmN0aW9uIGhhbmRsZUtleURvd24oZXZlbnQpIHtcbiAgaWYgKGV2ZW50Lm1ldGFLZXkgfHwgZXZlbnQuYWx0S2V5IHx8IGV2ZW50LmN0cmxLZXkpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBoYWRLZXlib2FyZEV2ZW50ID0gdHJ1ZTtcbn1cbi8qKlxuICogSWYgYXQgYW55IHBvaW50IGEgdXNlciBjbGlja3Mgd2l0aCBhIHBvaW50aW5nIGRldmljZSwgZW5zdXJlIHRoYXQgd2UgY2hhbmdlXG4gKiB0aGUgbW9kYWxpdHkgYXdheSBmcm9tIGtleWJvYXJkLlxuICogVGhpcyBhdm9pZHMgdGhlIHNpdHVhdGlvbiB3aGVyZSBhIHVzZXIgcHJlc3NlcyBhIGtleSBvbiBhbiBhbHJlYWR5IGZvY3VzZWRcbiAqIGVsZW1lbnQsIGFuZCB0aGVuIGNsaWNrcyBvbiBhIGRpZmZlcmVudCBlbGVtZW50LCBmb2N1c2luZyBpdCB3aXRoIGFcbiAqIHBvaW50aW5nIGRldmljZSwgd2hpbGUgd2Ugc3RpbGwgdGhpbmsgd2UncmUgaW4ga2V5Ym9hcmQgbW9kYWxpdHkuXG4gKi9cblxuXG5mdW5jdGlvbiBoYW5kbGVQb2ludGVyRG93bigpIHtcbiAgaGFkS2V5Ym9hcmRFdmVudCA9IGZhbHNlO1xufVxuXG5mdW5jdGlvbiBoYW5kbGVWaXNpYmlsaXR5Q2hhbmdlKCkge1xuICBpZiAodGhpcy52aXNpYmlsaXR5U3RhdGUgPT09ICdoaWRkZW4nKSB7XG4gICAgLy8gSWYgdGhlIHRhYiBiZWNvbWVzIGFjdGl2ZSBhZ2FpbiwgdGhlIGJyb3dzZXIgd2lsbCBoYW5kbGUgY2FsbGluZyBmb2N1c1xuICAgIC8vIG9uIHRoZSBlbGVtZW50IChTYWZhcmkgYWN0dWFsbHkgY2FsbHMgaXQgdHdpY2UpLlxuICAgIC8vIElmIHRoaXMgdGFiIGNoYW5nZSBjYXVzZWQgYSBibHVyIG9uIGFuIGVsZW1lbnQgd2l0aCBmb2N1cy12aXNpYmxlLFxuICAgIC8vIHJlLWFwcGx5IHRoZSBjbGFzcyB3aGVuIHRoZSB1c2VyIHN3aXRjaGVzIGJhY2sgdG8gdGhlIHRhYi5cbiAgICBpZiAoaGFkRm9jdXNWaXNpYmxlUmVjZW50bHkpIHtcbiAgICAgIGhhZEtleWJvYXJkRXZlbnQgPSB0cnVlO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBwcmVwYXJlKGRvYykge1xuICBkb2MuYWRkRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsIGhhbmRsZUtleURvd24sIHRydWUpO1xuICBkb2MuYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vkb3duJywgaGFuZGxlUG9pbnRlckRvd24sIHRydWUpO1xuICBkb2MuYWRkRXZlbnRMaXN0ZW5lcigncG9pbnRlcmRvd24nLCBoYW5kbGVQb2ludGVyRG93biwgdHJ1ZSk7XG4gIGRvYy5hZGRFdmVudExpc3RlbmVyKCd0b3VjaHN0YXJ0JywgaGFuZGxlUG9pbnRlckRvd24sIHRydWUpO1xuICBkb2MuYWRkRXZlbnRMaXN0ZW5lcigndmlzaWJpbGl0eWNoYW5nZScsIGhhbmRsZVZpc2liaWxpdHlDaGFuZ2UsIHRydWUpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdGVhcmRvd24oZG9jKSB7XG4gIGRvYy5yZW1vdmVFdmVudExpc3RlbmVyKCdrZXlkb3duJywgaGFuZGxlS2V5RG93biwgdHJ1ZSk7XG4gIGRvYy5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3VzZWRvd24nLCBoYW5kbGVQb2ludGVyRG93biwgdHJ1ZSk7XG4gIGRvYy5yZW1vdmVFdmVudExpc3RlbmVyKCdwb2ludGVyZG93bicsIGhhbmRsZVBvaW50ZXJEb3duLCB0cnVlKTtcbiAgZG9jLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3RvdWNoc3RhcnQnLCBoYW5kbGVQb2ludGVyRG93biwgdHJ1ZSk7XG4gIGRvYy5yZW1vdmVFdmVudExpc3RlbmVyKCd2aXNpYmlsaXR5Y2hhbmdlJywgaGFuZGxlVmlzaWJpbGl0eUNoYW5nZSwgdHJ1ZSk7XG59XG5cbmZ1bmN0aW9uIGlzRm9jdXNWaXNpYmxlKGV2ZW50KSB7XG4gIHZhciB0YXJnZXQgPSBldmVudC50YXJnZXQ7XG5cbiAgdHJ5IHtcbiAgICByZXR1cm4gdGFyZ2V0Lm1hdGNoZXMoJzpmb2N1cy12aXNpYmxlJyk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7Ly8gYnJvd3NlcnMgbm90IGltcGxlbWVudGluZyA6Zm9jdXMtdmlzaWJsZSB3aWxsIHRocm93IGEgU3ludGF4RXJyb3JcbiAgICAvLyB3ZSB1c2Ugb3VyIG93biBoZXVyaXN0aWMgZm9yIHRob3NlIGJyb3dzZXJzXG4gICAgLy8gcmV0aHJvdyBtaWdodCBiZSBiZXR0ZXIgaWYgaXQncyBub3QgdGhlIGV4cGVjdGVkIGVycm9yIGJ1dCBkbyB3ZSByZWFsbHlcbiAgICAvLyB3YW50IHRvIGNyYXNoIGlmIGZvY3VzLXZpc2libGUgbWFsZnVuY3Rpb25lZD9cbiAgfSAvLyBubyBuZWVkIGZvciB2YWxpZEZvY3VzVGFyZ2V0IGNoZWNrLiB0aGUgdXNlciBkb2VzIHRoYXQgYnkgYXR0YWNoaW5nIGl0IHRvXG4gIC8vIGZvY3VzYWJsZSBldmVudHMgb25seVxuXG5cbiAgcmV0dXJuIGhhZEtleWJvYXJkRXZlbnQgfHwgZm9jdXNUcmlnZ2Vyc0tleWJvYXJkTW9kYWxpdHkodGFyZ2V0KTtcbn1cbi8qKlxuICogU2hvdWxkIGJlIGNhbGxlZCBpZiBhIGJsdXIgZXZlbnQgaXMgZmlyZWQgb24gYSBmb2N1cy12aXNpYmxlIGVsZW1lbnRcbiAqL1xuXG5cbmZ1bmN0aW9uIGhhbmRsZUJsdXJWaXNpYmxlKCkge1xuICAvLyBUbyBkZXRlY3QgYSB0YWIvd2luZG93IHN3aXRjaCwgd2UgbG9vayBmb3IgYSBibHVyIGV2ZW50IGZvbGxvd2VkXG4gIC8vIHJhcGlkbHkgYnkgYSB2aXNpYmlsaXR5IGNoYW5nZS5cbiAgLy8gSWYgd2UgZG9uJ3Qgc2VlIGEgdmlzaWJpbGl0eSBjaGFuZ2Ugd2l0aGluIDEwMG1zLCBpdCdzIHByb2JhYmx5IGFcbiAgLy8gcmVndWxhciBmb2N1cyBjaGFuZ2UuXG4gIGhhZEZvY3VzVmlzaWJsZVJlY2VudGx5ID0gdHJ1ZTtcbiAgd2luZG93LmNsZWFyVGltZW91dChoYWRGb2N1c1Zpc2libGVSZWNlbnRseVRpbWVvdXQpO1xuICBoYWRGb2N1c1Zpc2libGVSZWNlbnRseVRpbWVvdXQgPSB3aW5kb3cuc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgaGFkRm9jdXNWaXNpYmxlUmVjZW50bHkgPSBmYWxzZTtcbiAgfSwgMTAwKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdXNlSXNGb2N1c1Zpc2libGUoKSB7XG4gIHZhciByZWYgPSBSZWFjdC51c2VDYWxsYmFjayhmdW5jdGlvbiAoaW5zdGFuY2UpIHtcbiAgICB2YXIgbm9kZSA9IFJlYWN0RE9NLmZpbmRET01Ob2RlKGluc3RhbmNlKTtcblxuICAgIGlmIChub2RlICE9IG51bGwpIHtcbiAgICAgIHByZXBhcmUobm9kZS5vd25lckRvY3VtZW50KTtcbiAgICB9XG4gIH0sIFtdKTtcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWFjdC1ob29rcy9ydWxlcy1vZi1ob29rc1xuICAgIFJlYWN0LnVzZURlYnVnVmFsdWUoaXNGb2N1c1Zpc2libGUpO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBpc0ZvY3VzVmlzaWJsZTogaXNGb2N1c1Zpc2libGUsXG4gICAgb25CbHVyVmlzaWJsZTogaGFuZGxlQmx1clZpc2libGUsXG4gICAgcmVmOiByZWZcbiAgfTtcbn0iLCJpbXBvcnQgeyBDaGlsZHJlbiwgY2xvbmVFbGVtZW50LCBpc1ZhbGlkRWxlbWVudCB9IGZyb20gJ3JlYWN0Jztcbi8qKlxuICogR2l2ZW4gYHRoaXMucHJvcHMuY2hpbGRyZW5gLCByZXR1cm4gYW4gb2JqZWN0IG1hcHBpbmcga2V5IHRvIGNoaWxkLlxuICpcbiAqIEBwYXJhbSB7Kn0gY2hpbGRyZW4gYHRoaXMucHJvcHMuY2hpbGRyZW5gXG4gKiBAcmV0dXJuIHtvYmplY3R9IE1hcHBpbmcgb2Yga2V5IHRvIGNoaWxkXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGdldENoaWxkTWFwcGluZyhjaGlsZHJlbiwgbWFwRm4pIHtcbiAgdmFyIG1hcHBlciA9IGZ1bmN0aW9uIG1hcHBlcihjaGlsZCkge1xuICAgIHJldHVybiBtYXBGbiAmJiBpc1ZhbGlkRWxlbWVudChjaGlsZCkgPyBtYXBGbihjaGlsZCkgOiBjaGlsZDtcbiAgfTtcblxuICB2YXIgcmVzdWx0ID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgaWYgKGNoaWxkcmVuKSBDaGlsZHJlbi5tYXAoY2hpbGRyZW4sIGZ1bmN0aW9uIChjKSB7XG4gICAgcmV0dXJuIGM7XG4gIH0pLmZvckVhY2goZnVuY3Rpb24gKGNoaWxkKSB7XG4gICAgLy8gcnVuIHRoZSBtYXAgZnVuY3Rpb24gaGVyZSBpbnN0ZWFkIHNvIHRoYXQgdGhlIGtleSBpcyB0aGUgY29tcHV0ZWQgb25lXG4gICAgcmVzdWx0W2NoaWxkLmtleV0gPSBtYXBwZXIoY2hpbGQpO1xuICB9KTtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cbi8qKlxuICogV2hlbiB5b3UncmUgYWRkaW5nIG9yIHJlbW92aW5nIGNoaWxkcmVuIHNvbWUgbWF5IGJlIGFkZGVkIG9yIHJlbW92ZWQgaW4gdGhlXG4gKiBzYW1lIHJlbmRlciBwYXNzLiBXZSB3YW50IHRvIHNob3cgKmJvdGgqIHNpbmNlIHdlIHdhbnQgdG8gc2ltdWx0YW5lb3VzbHlcbiAqIGFuaW1hdGUgZWxlbWVudHMgaW4gYW5kIG91dC4gVGhpcyBmdW5jdGlvbiB0YWtlcyBhIHByZXZpb3VzIHNldCBvZiBrZXlzXG4gKiBhbmQgYSBuZXcgc2V0IG9mIGtleXMgYW5kIG1lcmdlcyB0aGVtIHdpdGggaXRzIGJlc3QgZ3Vlc3Mgb2YgdGhlIGNvcnJlY3RcbiAqIG9yZGVyaW5nLiBJbiB0aGUgZnV0dXJlIHdlIG1heSBleHBvc2Ugc29tZSBvZiB0aGUgdXRpbGl0aWVzIGluXG4gKiBSZWFjdE11bHRpQ2hpbGQgdG8gbWFrZSB0aGlzIGVhc3ksIGJ1dCBmb3Igbm93IFJlYWN0IGl0c2VsZiBkb2VzIG5vdFxuICogZGlyZWN0bHkgaGF2ZSB0aGlzIGNvbmNlcHQgb2YgdGhlIHVuaW9uIG9mIHByZXZDaGlsZHJlbiBhbmQgbmV4dENoaWxkcmVuXG4gKiBzbyB3ZSBpbXBsZW1lbnQgaXQgaGVyZS5cbiAqXG4gKiBAcGFyYW0ge29iamVjdH0gcHJldiBwcmV2IGNoaWxkcmVuIGFzIHJldHVybmVkIGZyb21cbiAqIGBSZWFjdFRyYW5zaXRpb25DaGlsZE1hcHBpbmcuZ2V0Q2hpbGRNYXBwaW5nKClgLlxuICogQHBhcmFtIHtvYmplY3R9IG5leHQgbmV4dCBjaGlsZHJlbiBhcyByZXR1cm5lZCBmcm9tXG4gKiBgUmVhY3RUcmFuc2l0aW9uQ2hpbGRNYXBwaW5nLmdldENoaWxkTWFwcGluZygpYC5cbiAqIEByZXR1cm4ge29iamVjdH0gYSBrZXkgc2V0IHRoYXQgY29udGFpbnMgYWxsIGtleXMgaW4gYHByZXZgIGFuZCBhbGwga2V5c1xuICogaW4gYG5leHRgIGluIGEgcmVhc29uYWJsZSBvcmRlci5cbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gbWVyZ2VDaGlsZE1hcHBpbmdzKHByZXYsIG5leHQpIHtcbiAgcHJldiA9IHByZXYgfHwge307XG4gIG5leHQgPSBuZXh0IHx8IHt9O1xuXG4gIGZ1bmN0aW9uIGdldFZhbHVlRm9yS2V5KGtleSkge1xuICAgIHJldHVybiBrZXkgaW4gbmV4dCA/IG5leHRba2V5XSA6IHByZXZba2V5XTtcbiAgfSAvLyBGb3IgZWFjaCBrZXkgb2YgYG5leHRgLCB0aGUgbGlzdCBvZiBrZXlzIHRvIGluc2VydCBiZWZvcmUgdGhhdCBrZXkgaW5cbiAgLy8gdGhlIGNvbWJpbmVkIGxpc3RcblxuXG4gIHZhciBuZXh0S2V5c1BlbmRpbmcgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICB2YXIgcGVuZGluZ0tleXMgPSBbXTtcblxuICBmb3IgKHZhciBwcmV2S2V5IGluIHByZXYpIHtcbiAgICBpZiAocHJldktleSBpbiBuZXh0KSB7XG4gICAgICBpZiAocGVuZGluZ0tleXMubGVuZ3RoKSB7XG4gICAgICAgIG5leHRLZXlzUGVuZGluZ1twcmV2S2V5XSA9IHBlbmRpbmdLZXlzO1xuICAgICAgICBwZW5kaW5nS2V5cyA9IFtdO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBwZW5kaW5nS2V5cy5wdXNoKHByZXZLZXkpO1xuICAgIH1cbiAgfVxuXG4gIHZhciBpO1xuICB2YXIgY2hpbGRNYXBwaW5nID0ge307XG5cbiAgZm9yICh2YXIgbmV4dEtleSBpbiBuZXh0KSB7XG4gICAgaWYgKG5leHRLZXlzUGVuZGluZ1tuZXh0S2V5XSkge1xuICAgICAgZm9yIChpID0gMDsgaSA8IG5leHRLZXlzUGVuZGluZ1tuZXh0S2V5XS5sZW5ndGg7IGkrKykge1xuICAgICAgICB2YXIgcGVuZGluZ05leHRLZXkgPSBuZXh0S2V5c1BlbmRpbmdbbmV4dEtleV1baV07XG4gICAgICAgIGNoaWxkTWFwcGluZ1tuZXh0S2V5c1BlbmRpbmdbbmV4dEtleV1baV1dID0gZ2V0VmFsdWVGb3JLZXkocGVuZGluZ05leHRLZXkpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGNoaWxkTWFwcGluZ1tuZXh0S2V5XSA9IGdldFZhbHVlRm9yS2V5KG5leHRLZXkpO1xuICB9IC8vIEZpbmFsbHksIGFkZCB0aGUga2V5cyB3aGljaCBkaWRuJ3QgYXBwZWFyIGJlZm9yZSBhbnkga2V5IGluIGBuZXh0YFxuXG5cbiAgZm9yIChpID0gMDsgaSA8IHBlbmRpbmdLZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAgY2hpbGRNYXBwaW5nW3BlbmRpbmdLZXlzW2ldXSA9IGdldFZhbHVlRm9yS2V5KHBlbmRpbmdLZXlzW2ldKTtcbiAgfVxuXG4gIHJldHVybiBjaGlsZE1hcHBpbmc7XG59XG5cbmZ1bmN0aW9uIGdldFByb3AoY2hpbGQsIHByb3AsIHByb3BzKSB7XG4gIHJldHVybiBwcm9wc1twcm9wXSAhPSBudWxsID8gcHJvcHNbcHJvcF0gOiBjaGlsZC5wcm9wc1twcm9wXTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldEluaXRpYWxDaGlsZE1hcHBpbmcocHJvcHMsIG9uRXhpdGVkKSB7XG4gIHJldHVybiBnZXRDaGlsZE1hcHBpbmcocHJvcHMuY2hpbGRyZW4sIGZ1bmN0aW9uIChjaGlsZCkge1xuICAgIHJldHVybiBjbG9uZUVsZW1lbnQoY2hpbGQsIHtcbiAgICAgIG9uRXhpdGVkOiBvbkV4aXRlZC5iaW5kKG51bGwsIGNoaWxkKSxcbiAgICAgIGluOiB0cnVlLFxuICAgICAgYXBwZWFyOiBnZXRQcm9wKGNoaWxkLCAnYXBwZWFyJywgcHJvcHMpLFxuICAgICAgZW50ZXI6IGdldFByb3AoY2hpbGQsICdlbnRlcicsIHByb3BzKSxcbiAgICAgIGV4aXQ6IGdldFByb3AoY2hpbGQsICdleGl0JywgcHJvcHMpXG4gICAgfSk7XG4gIH0pO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGdldE5leHRDaGlsZE1hcHBpbmcobmV4dFByb3BzLCBwcmV2Q2hpbGRNYXBwaW5nLCBvbkV4aXRlZCkge1xuICB2YXIgbmV4dENoaWxkTWFwcGluZyA9IGdldENoaWxkTWFwcGluZyhuZXh0UHJvcHMuY2hpbGRyZW4pO1xuICB2YXIgY2hpbGRyZW4gPSBtZXJnZUNoaWxkTWFwcGluZ3MocHJldkNoaWxkTWFwcGluZywgbmV4dENoaWxkTWFwcGluZyk7XG4gIE9iamVjdC5rZXlzKGNoaWxkcmVuKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICB2YXIgY2hpbGQgPSBjaGlsZHJlbltrZXldO1xuICAgIGlmICghaXNWYWxpZEVsZW1lbnQoY2hpbGQpKSByZXR1cm47XG4gICAgdmFyIGhhc1ByZXYgPSAoa2V5IGluIHByZXZDaGlsZE1hcHBpbmcpO1xuICAgIHZhciBoYXNOZXh0ID0gKGtleSBpbiBuZXh0Q2hpbGRNYXBwaW5nKTtcbiAgICB2YXIgcHJldkNoaWxkID0gcHJldkNoaWxkTWFwcGluZ1trZXldO1xuICAgIHZhciBpc0xlYXZpbmcgPSBpc1ZhbGlkRWxlbWVudChwcmV2Q2hpbGQpICYmICFwcmV2Q2hpbGQucHJvcHMuaW47IC8vIGl0ZW0gaXMgbmV3IChlbnRlcmluZylcblxuICAgIGlmIChoYXNOZXh0ICYmICghaGFzUHJldiB8fCBpc0xlYXZpbmcpKSB7XG4gICAgICAvLyBjb25zb2xlLmxvZygnZW50ZXJpbmcnLCBrZXkpXG4gICAgICBjaGlsZHJlbltrZXldID0gY2xvbmVFbGVtZW50KGNoaWxkLCB7XG4gICAgICAgIG9uRXhpdGVkOiBvbkV4aXRlZC5iaW5kKG51bGwsIGNoaWxkKSxcbiAgICAgICAgaW46IHRydWUsXG4gICAgICAgIGV4aXQ6IGdldFByb3AoY2hpbGQsICdleGl0JywgbmV4dFByb3BzKSxcbiAgICAgICAgZW50ZXI6IGdldFByb3AoY2hpbGQsICdlbnRlcicsIG5leHRQcm9wcylcbiAgICAgIH0pO1xuICAgIH0gZWxzZSBpZiAoIWhhc05leHQgJiYgaGFzUHJldiAmJiAhaXNMZWF2aW5nKSB7XG4gICAgICAvLyBpdGVtIGlzIG9sZCAoZXhpdGluZylcbiAgICAgIC8vIGNvbnNvbGUubG9nKCdsZWF2aW5nJywga2V5KVxuICAgICAgY2hpbGRyZW5ba2V5XSA9IGNsb25lRWxlbWVudChjaGlsZCwge1xuICAgICAgICBpbjogZmFsc2VcbiAgICAgIH0pO1xuICAgIH0gZWxzZSBpZiAoaGFzTmV4dCAmJiBoYXNQcmV2ICYmIGlzVmFsaWRFbGVtZW50KHByZXZDaGlsZCkpIHtcbiAgICAgIC8vIGl0ZW0gaGFzbid0IGNoYW5nZWQgdHJhbnNpdGlvbiBzdGF0ZXNcbiAgICAgIC8vIGNvcHkgb3ZlciB0aGUgbGFzdCB0cmFuc2l0aW9uIHByb3BzO1xuICAgICAgLy8gY29uc29sZS5sb2coJ3VuY2hhbmdlZCcsIGtleSlcbiAgICAgIGNoaWxkcmVuW2tleV0gPSBjbG9uZUVsZW1lbnQoY2hpbGQsIHtcbiAgICAgICAgb25FeGl0ZWQ6IG9uRXhpdGVkLmJpbmQobnVsbCwgY2hpbGQpLFxuICAgICAgICBpbjogcHJldkNoaWxkLnByb3BzLmluLFxuICAgICAgICBleGl0OiBnZXRQcm9wKGNoaWxkLCAnZXhpdCcsIG5leHRQcm9wcyksXG4gICAgICAgIGVudGVyOiBnZXRQcm9wKGNoaWxkLCAnZW50ZXInLCBuZXh0UHJvcHMpXG4gICAgICB9KTtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gY2hpbGRyZW47XG59IiwiaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5pbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfYXNzZXJ0VGhpc0luaXRpYWxpemVkIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9hc3NlcnRUaGlzSW5pdGlhbGl6ZWRcIjtcbmltcG9ydCBfaW5oZXJpdHNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vaW5oZXJpdHNMb29zZVwiO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgVHJhbnNpdGlvbkdyb3VwQ29udGV4dCBmcm9tICcuL1RyYW5zaXRpb25Hcm91cENvbnRleHQnO1xuaW1wb3J0IHsgZ2V0Q2hpbGRNYXBwaW5nLCBnZXRJbml0aWFsQ2hpbGRNYXBwaW5nLCBnZXROZXh0Q2hpbGRNYXBwaW5nIH0gZnJvbSAnLi91dGlscy9DaGlsZE1hcHBpbmcnO1xuXG52YXIgdmFsdWVzID0gT2JqZWN0LnZhbHVlcyB8fCBmdW5jdGlvbiAob2JqKSB7XG4gIHJldHVybiBPYmplY3Qua2V5cyhvYmopLm1hcChmdW5jdGlvbiAoaykge1xuICAgIHJldHVybiBvYmpba107XG4gIH0pO1xufTtcblxudmFyIGRlZmF1bHRQcm9wcyA9IHtcbiAgY29tcG9uZW50OiAnZGl2JyxcbiAgY2hpbGRGYWN0b3J5OiBmdW5jdGlvbiBjaGlsZEZhY3RvcnkoY2hpbGQpIHtcbiAgICByZXR1cm4gY2hpbGQ7XG4gIH1cbn07XG4vKipcbiAqIFRoZSBgPFRyYW5zaXRpb25Hcm91cD5gIGNvbXBvbmVudCBtYW5hZ2VzIGEgc2V0IG9mIHRyYW5zaXRpb24gY29tcG9uZW50c1xuICogKGA8VHJhbnNpdGlvbj5gIGFuZCBgPENTU1RyYW5zaXRpb24+YCkgaW4gYSBsaXN0LiBMaWtlIHdpdGggdGhlIHRyYW5zaXRpb25cbiAqIGNvbXBvbmVudHMsIGA8VHJhbnNpdGlvbkdyb3VwPmAgaXMgYSBzdGF0ZSBtYWNoaW5lIGZvciBtYW5hZ2luZyB0aGUgbW91bnRpbmdcbiAqIGFuZCB1bm1vdW50aW5nIG9mIGNvbXBvbmVudHMgb3ZlciB0aW1lLlxuICpcbiAqIENvbnNpZGVyIHRoZSBleGFtcGxlIGJlbG93LiBBcyBpdGVtcyBhcmUgcmVtb3ZlZCBvciBhZGRlZCB0byB0aGUgVG9kb0xpc3QgdGhlXG4gKiBgaW5gIHByb3AgaXMgdG9nZ2xlZCBhdXRvbWF0aWNhbGx5IGJ5IHRoZSBgPFRyYW5zaXRpb25Hcm91cD5gLlxuICpcbiAqIE5vdGUgdGhhdCBgPFRyYW5zaXRpb25Hcm91cD5gICBkb2VzIG5vdCBkZWZpbmUgYW55IGFuaW1hdGlvbiBiZWhhdmlvciFcbiAqIEV4YWN0bHkgX2hvd18gYSBsaXN0IGl0ZW0gYW5pbWF0ZXMgaXMgdXAgdG8gdGhlIGluZGl2aWR1YWwgdHJhbnNpdGlvblxuICogY29tcG9uZW50LiBUaGlzIG1lYW5zIHlvdSBjYW4gbWl4IGFuZCBtYXRjaCBhbmltYXRpb25zIGFjcm9zcyBkaWZmZXJlbnQgbGlzdFxuICogaXRlbXMuXG4gKi9cblxudmFyIFRyYW5zaXRpb25Hcm91cCA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHNMb29zZShUcmFuc2l0aW9uR3JvdXAsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIFRyYW5zaXRpb25Hcm91cChwcm9wcywgY29udGV4dCkge1xuICAgIHZhciBfdGhpcztcblxuICAgIF90aGlzID0gX1JlYWN0JENvbXBvbmVudC5jYWxsKHRoaXMsIHByb3BzLCBjb250ZXh0KSB8fCB0aGlzO1xuXG4gICAgdmFyIGhhbmRsZUV4aXRlZCA9IF90aGlzLmhhbmRsZUV4aXRlZC5iaW5kKF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpKTsgLy8gSW5pdGlhbCBjaGlsZHJlbiBzaG91bGQgYWxsIGJlIGVudGVyaW5nLCBkZXBlbmRlbnQgb24gYXBwZWFyXG5cblxuICAgIF90aGlzLnN0YXRlID0ge1xuICAgICAgY29udGV4dFZhbHVlOiB7XG4gICAgICAgIGlzTW91bnRpbmc6IHRydWVcbiAgICAgIH0sXG4gICAgICBoYW5kbGVFeGl0ZWQ6IGhhbmRsZUV4aXRlZCxcbiAgICAgIGZpcnN0UmVuZGVyOiB0cnVlXG4gICAgfTtcbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gVHJhbnNpdGlvbkdyb3VwLnByb3RvdHlwZTtcblxuICBfcHJvdG8uY29tcG9uZW50RGlkTW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICB0aGlzLm1vdW50ZWQgPSB0cnVlO1xuICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgY29udGV4dFZhbHVlOiB7XG4gICAgICAgIGlzTW91bnRpbmc6IGZhbHNlXG4gICAgICB9XG4gICAgfSk7XG4gIH07XG5cbiAgX3Byb3RvLmNvbXBvbmVudFdpbGxVbm1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgdGhpcy5tb3VudGVkID0gZmFsc2U7XG4gIH07XG5cbiAgVHJhbnNpdGlvbkdyb3VwLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyA9IGZ1bmN0aW9uIGdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyhuZXh0UHJvcHMsIF9yZWYpIHtcbiAgICB2YXIgcHJldkNoaWxkTWFwcGluZyA9IF9yZWYuY2hpbGRyZW4sXG4gICAgICAgIGhhbmRsZUV4aXRlZCA9IF9yZWYuaGFuZGxlRXhpdGVkLFxuICAgICAgICBmaXJzdFJlbmRlciA9IF9yZWYuZmlyc3RSZW5kZXI7XG4gICAgcmV0dXJuIHtcbiAgICAgIGNoaWxkcmVuOiBmaXJzdFJlbmRlciA/IGdldEluaXRpYWxDaGlsZE1hcHBpbmcobmV4dFByb3BzLCBoYW5kbGVFeGl0ZWQpIDogZ2V0TmV4dENoaWxkTWFwcGluZyhuZXh0UHJvcHMsIHByZXZDaGlsZE1hcHBpbmcsIGhhbmRsZUV4aXRlZCksXG4gICAgICBmaXJzdFJlbmRlcjogZmFsc2VcbiAgICB9O1xuICB9IC8vIG5vZGUgaXMgYHVuZGVmaW5lZGAgd2hlbiB1c2VyIHByb3ZpZGVkIGBub2RlUmVmYCBwcm9wXG4gIDtcblxuICBfcHJvdG8uaGFuZGxlRXhpdGVkID0gZnVuY3Rpb24gaGFuZGxlRXhpdGVkKGNoaWxkLCBub2RlKSB7XG4gICAgdmFyIGN1cnJlbnRDaGlsZE1hcHBpbmcgPSBnZXRDaGlsZE1hcHBpbmcodGhpcy5wcm9wcy5jaGlsZHJlbik7XG4gICAgaWYgKGNoaWxkLmtleSBpbiBjdXJyZW50Q2hpbGRNYXBwaW5nKSByZXR1cm47XG5cbiAgICBpZiAoY2hpbGQucHJvcHMub25FeGl0ZWQpIHtcbiAgICAgIGNoaWxkLnByb3BzLm9uRXhpdGVkKG5vZGUpO1xuICAgIH1cblxuICAgIGlmICh0aGlzLm1vdW50ZWQpIHtcbiAgICAgIHRoaXMuc2V0U3RhdGUoZnVuY3Rpb24gKHN0YXRlKSB7XG4gICAgICAgIHZhciBjaGlsZHJlbiA9IF9leHRlbmRzKHt9LCBzdGF0ZS5jaGlsZHJlbik7XG5cbiAgICAgICAgZGVsZXRlIGNoaWxkcmVuW2NoaWxkLmtleV07XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgY2hpbGRyZW46IGNoaWxkcmVuXG4gICAgICAgIH07XG4gICAgICB9KTtcbiAgICB9XG4gIH07XG5cbiAgX3Byb3RvLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgX3RoaXMkcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICBDb21wb25lbnQgPSBfdGhpcyRwcm9wcy5jb21wb25lbnQsXG4gICAgICAgIGNoaWxkRmFjdG9yeSA9IF90aGlzJHByb3BzLmNoaWxkRmFjdG9yeSxcbiAgICAgICAgcHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShfdGhpcyRwcm9wcywgW1wiY29tcG9uZW50XCIsIFwiY2hpbGRGYWN0b3J5XCJdKTtcblxuICAgIHZhciBjb250ZXh0VmFsdWUgPSB0aGlzLnN0YXRlLmNvbnRleHRWYWx1ZTtcbiAgICB2YXIgY2hpbGRyZW4gPSB2YWx1ZXModGhpcy5zdGF0ZS5jaGlsZHJlbikubWFwKGNoaWxkRmFjdG9yeSk7XG4gICAgZGVsZXRlIHByb3BzLmFwcGVhcjtcbiAgICBkZWxldGUgcHJvcHMuZW50ZXI7XG4gICAgZGVsZXRlIHByb3BzLmV4aXQ7XG5cbiAgICBpZiAoQ29tcG9uZW50ID09PSBudWxsKSB7XG4gICAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoVHJhbnNpdGlvbkdyb3VwQ29udGV4dC5Qcm92aWRlciwge1xuICAgICAgICB2YWx1ZTogY29udGV4dFZhbHVlXG4gICAgICB9LCBjaGlsZHJlbik7XG4gICAgfVxuXG4gICAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFRyYW5zaXRpb25Hcm91cENvbnRleHQuUHJvdmlkZXIsIHtcbiAgICAgIHZhbHVlOiBjb250ZXh0VmFsdWVcbiAgICB9LCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChDb21wb25lbnQsIHByb3BzLCBjaGlsZHJlbikpO1xuICB9O1xuXG4gIHJldHVybiBUcmFuc2l0aW9uR3JvdXA7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cblRyYW5zaXRpb25Hcm91cC5wcm9wVHlwZXMgPSBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB7XG4gIC8qKlxuICAgKiBgPFRyYW5zaXRpb25Hcm91cD5gIHJlbmRlcnMgYSBgPGRpdj5gIGJ5IGRlZmF1bHQuIFlvdSBjYW4gY2hhbmdlIHRoaXNcbiAgICogYmVoYXZpb3IgYnkgcHJvdmlkaW5nIGEgYGNvbXBvbmVudGAgcHJvcC5cbiAgICogSWYgeW91IHVzZSBSZWFjdCB2MTYrIGFuZCB3b3VsZCBsaWtlIHRvIGF2b2lkIGEgd3JhcHBpbmcgYDxkaXY+YCBlbGVtZW50XG4gICAqIHlvdSBjYW4gcGFzcyBpbiBgY29tcG9uZW50PXtudWxsfWAuIFRoaXMgaXMgdXNlZnVsIGlmIHRoZSB3cmFwcGluZyBkaXZcbiAgICogYm9ya3MgeW91ciBjc3Mgc3R5bGVzLlxuICAgKi9cbiAgY29tcG9uZW50OiBQcm9wVHlwZXMuYW55LFxuXG4gIC8qKlxuICAgKiBBIHNldCBvZiBgPFRyYW5zaXRpb24+YCBjb21wb25lbnRzLCB0aGF0IGFyZSB0b2dnbGVkIGBpbmAgYW5kIG91dCBhcyB0aGV5XG4gICAqIGxlYXZlLiB0aGUgYDxUcmFuc2l0aW9uR3JvdXA+YCB3aWxsIGluamVjdCBzcGVjaWZpYyB0cmFuc2l0aW9uIHByb3BzLCBzb1xuICAgKiByZW1lbWJlciB0byBzcHJlYWQgdGhlbSB0aHJvdWdoIGlmIHlvdSBhcmUgd3JhcHBpbmcgdGhlIGA8VHJhbnNpdGlvbj5gIGFzXG4gICAqIHdpdGggb3VyIGA8RmFkZT5gIGV4YW1wbGUuXG4gICAqXG4gICAqIFdoaWxlIHRoaXMgY29tcG9uZW50IGlzIG1lYW50IGZvciBtdWx0aXBsZSBgVHJhbnNpdGlvbmAgb3IgYENTU1RyYW5zaXRpb25gXG4gICAqIGNoaWxkcmVuLCBzb21ldGltZXMgeW91IG1heSB3YW50IHRvIGhhdmUgYSBzaW5nbGUgdHJhbnNpdGlvbiBjaGlsZCB3aXRoXG4gICAqIGNvbnRlbnQgdGhhdCB5b3Ugd2FudCB0byBiZSB0cmFuc2l0aW9uZWQgb3V0IGFuZCBpbiB3aGVuIHlvdSBjaGFuZ2UgaXRcbiAgICogKGUuZy4gcm91dGVzLCBpbWFnZXMgZXRjLikgSW4gdGhhdCBjYXNlIHlvdSBjYW4gY2hhbmdlIHRoZSBga2V5YCBwcm9wIG9mXG4gICAqIHRoZSB0cmFuc2l0aW9uIGNoaWxkIGFzIHlvdSBjaGFuZ2UgaXRzIGNvbnRlbnQsIHRoaXMgd2lsbCBjYXVzZVxuICAgKiBgVHJhbnNpdGlvbkdyb3VwYCB0byB0cmFuc2l0aW9uIHRoZSBjaGlsZCBvdXQgYW5kIGJhY2sgaW4uXG4gICAqL1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG5cbiAgLyoqXG4gICAqIEEgY29udmVuaWVuY2UgcHJvcCB0aGF0IGVuYWJsZXMgb3IgZGlzYWJsZXMgYXBwZWFyIGFuaW1hdGlvbnNcbiAgICogZm9yIGFsbCBjaGlsZHJlbi4gTm90ZSB0aGF0IHNwZWNpZnlpbmcgdGhpcyB3aWxsIG92ZXJyaWRlIGFueSBkZWZhdWx0cyBzZXRcbiAgICogb24gaW5kaXZpZHVhbCBjaGlsZHJlbiBUcmFuc2l0aW9ucy5cbiAgICovXG4gIGFwcGVhcjogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIEEgY29udmVuaWVuY2UgcHJvcCB0aGF0IGVuYWJsZXMgb3IgZGlzYWJsZXMgZW50ZXIgYW5pbWF0aW9uc1xuICAgKiBmb3IgYWxsIGNoaWxkcmVuLiBOb3RlIHRoYXQgc3BlY2lmeWluZyB0aGlzIHdpbGwgb3ZlcnJpZGUgYW55IGRlZmF1bHRzIHNldFxuICAgKiBvbiBpbmRpdmlkdWFsIGNoaWxkcmVuIFRyYW5zaXRpb25zLlxuICAgKi9cbiAgZW50ZXI6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBBIGNvbnZlbmllbmNlIHByb3AgdGhhdCBlbmFibGVzIG9yIGRpc2FibGVzIGV4aXQgYW5pbWF0aW9uc1xuICAgKiBmb3IgYWxsIGNoaWxkcmVuLiBOb3RlIHRoYXQgc3BlY2lmeWluZyB0aGlzIHdpbGwgb3ZlcnJpZGUgYW55IGRlZmF1bHRzIHNldFxuICAgKiBvbiBpbmRpdmlkdWFsIGNoaWxkcmVuIFRyYW5zaXRpb25zLlxuICAgKi9cbiAgZXhpdDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIFlvdSBtYXkgbmVlZCB0byBhcHBseSByZWFjdGl2ZSB1cGRhdGVzIHRvIGEgY2hpbGQgYXMgaXQgaXMgZXhpdGluZy5cbiAgICogVGhpcyBpcyBnZW5lcmFsbHkgZG9uZSBieSB1c2luZyBgY2xvbmVFbGVtZW50YCBob3dldmVyIGluIHRoZSBjYXNlIG9mIGFuIGV4aXRpbmdcbiAgICogY2hpbGQgdGhlIGVsZW1lbnQgaGFzIGFscmVhZHkgYmVlbiByZW1vdmVkIGFuZCBub3QgYWNjZXNzaWJsZSB0byB0aGUgY29uc3VtZXIuXG4gICAqXG4gICAqIElmIHlvdSBkbyBuZWVkIHRvIHVwZGF0ZSBhIGNoaWxkIGFzIGl0IGxlYXZlcyB5b3UgY2FuIHByb3ZpZGUgYSBgY2hpbGRGYWN0b3J5YFxuICAgKiB0byB3cmFwIGV2ZXJ5IGNoaWxkLCBldmVuIHRoZSBvbmVzIHRoYXQgYXJlIGxlYXZpbmcuXG4gICAqXG4gICAqIEB0eXBlIEZ1bmN0aW9uKGNoaWxkOiBSZWFjdEVsZW1lbnQpIC0+IFJlYWN0RWxlbWVudFxuICAgKi9cbiAgY2hpbGRGYWN0b3J5OiBQcm9wVHlwZXMuZnVuY1xufSA6IHt9O1xuVHJhbnNpdGlvbkdyb3VwLmRlZmF1bHRQcm9wcyA9IGRlZmF1bHRQcm9wcztcbmV4cG9ydCBkZWZhdWx0IFRyYW5zaXRpb25Hcm91cDsiLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGNsc3ggZnJvbSAnY2xzeCc7XG5pbXBvcnQgdXNlRXZlbnRDYWxsYmFjayBmcm9tICcuLi91dGlscy91c2VFdmVudENhbGxiYWNrJztcbnZhciB1c2VFbmhhbmNlZEVmZmVjdCA9IHR5cGVvZiB3aW5kb3cgPT09ICd1bmRlZmluZWQnID8gUmVhY3QudXNlRWZmZWN0IDogUmVhY3QudXNlTGF5b3V0RWZmZWN0O1xuLyoqXG4gKiBAaWdub3JlIC0gaW50ZXJuYWwgY29tcG9uZW50LlxuICovXG5cbmZ1bmN0aW9uIFJpcHBsZShwcm9wcykge1xuICB2YXIgY2xhc3NlcyA9IHByb3BzLmNsYXNzZXMsXG4gICAgICBfcHJvcHMkcHVsc2F0ZSA9IHByb3BzLnB1bHNhdGUsXG4gICAgICBwdWxzYXRlID0gX3Byb3BzJHB1bHNhdGUgPT09IHZvaWQgMCA/IGZhbHNlIDogX3Byb3BzJHB1bHNhdGUsXG4gICAgICByaXBwbGVYID0gcHJvcHMucmlwcGxlWCxcbiAgICAgIHJpcHBsZVkgPSBwcm9wcy5yaXBwbGVZLFxuICAgICAgcmlwcGxlU2l6ZSA9IHByb3BzLnJpcHBsZVNpemUsXG4gICAgICBpblByb3AgPSBwcm9wcy5pbixcbiAgICAgIF9wcm9wcyRvbkV4aXRlZCA9IHByb3BzLm9uRXhpdGVkLFxuICAgICAgb25FeGl0ZWQgPSBfcHJvcHMkb25FeGl0ZWQgPT09IHZvaWQgMCA/IGZ1bmN0aW9uICgpIHt9IDogX3Byb3BzJG9uRXhpdGVkLFxuICAgICAgdGltZW91dCA9IHByb3BzLnRpbWVvdXQ7XG5cbiAgdmFyIF9SZWFjdCR1c2VTdGF0ZSA9IFJlYWN0LnVzZVN0YXRlKGZhbHNlKSxcbiAgICAgIGxlYXZpbmcgPSBfUmVhY3QkdXNlU3RhdGVbMF0sXG4gICAgICBzZXRMZWF2aW5nID0gX1JlYWN0JHVzZVN0YXRlWzFdO1xuXG4gIHZhciByaXBwbGVDbGFzc05hbWUgPSBjbHN4KGNsYXNzZXMucmlwcGxlLCBjbGFzc2VzLnJpcHBsZVZpc2libGUsIHB1bHNhdGUgJiYgY2xhc3Nlcy5yaXBwbGVQdWxzYXRlKTtcbiAgdmFyIHJpcHBsZVN0eWxlcyA9IHtcbiAgICB3aWR0aDogcmlwcGxlU2l6ZSxcbiAgICBoZWlnaHQ6IHJpcHBsZVNpemUsXG4gICAgdG9wOiAtKHJpcHBsZVNpemUgLyAyKSArIHJpcHBsZVksXG4gICAgbGVmdDogLShyaXBwbGVTaXplIC8gMikgKyByaXBwbGVYXG4gIH07XG4gIHZhciBjaGlsZENsYXNzTmFtZSA9IGNsc3goY2xhc3Nlcy5jaGlsZCwgbGVhdmluZyAmJiBjbGFzc2VzLmNoaWxkTGVhdmluZywgcHVsc2F0ZSAmJiBjbGFzc2VzLmNoaWxkUHVsc2F0ZSk7XG4gIHZhciBoYW5kbGVFeGl0ZWQgPSB1c2VFdmVudENhbGxiYWNrKG9uRXhpdGVkKTsgLy8gUmlwcGxlIGlzIHVzZWQgZm9yIHVzZXIgZmVlZGJhY2sgKGUuZy4gY2xpY2sgb3IgcHJlc3MpIHNvIHdlIHdhbnQgdG8gYXBwbHkgc3R5bGVzIHdpdGggdGhlIGhpZ2hlc3QgcHJpb3JpdHlcblxuICB1c2VFbmhhbmNlZEVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgaWYgKCFpblByb3ApIHtcbiAgICAgIC8vIHJlYWN0LXRyYW5zaXRpb24tZ3JvdXAjb25FeGl0XG4gICAgICBzZXRMZWF2aW5nKHRydWUpOyAvLyByZWFjdC10cmFuc2l0aW9uLWdyb3VwI29uRXhpdGVkXG5cbiAgICAgIHZhciB0aW1lb3V0SWQgPSBzZXRUaW1lb3V0KGhhbmRsZUV4aXRlZCwgdGltZW91dCk7XG4gICAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgICBjbGVhclRpbWVvdXQodGltZW91dElkKTtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfSwgW2hhbmRsZUV4aXRlZCwgaW5Qcm9wLCB0aW1lb3V0XSk7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcInNwYW5cIiwge1xuICAgIGNsYXNzTmFtZTogcmlwcGxlQ2xhc3NOYW1lLFxuICAgIHN0eWxlOiByaXBwbGVTdHlsZXNcbiAgfSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIsIHtcbiAgICBjbGFzc05hbWU6IGNoaWxkQ2xhc3NOYW1lXG4gIH0pKTtcbn1cblxucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gUmlwcGxlLnByb3BUeXBlcyA9IHtcbiAgLyoqXG4gICAqIE92ZXJyaWRlIG9yIGV4dGVuZCB0aGUgc3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICogU2VlIFtDU1MgQVBJXSgjY3NzKSBiZWxvdyBmb3IgbW9yZSBkZXRhaWxzLlxuICAgKi9cbiAgY2xhc3NlczogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlIC0gaW5qZWN0ZWQgZnJvbSBUcmFuc2l0aW9uR3JvdXBcbiAgICovXG4gIGluOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogQGlnbm9yZSAtIGluamVjdGVkIGZyb20gVHJhbnNpdGlvbkdyb3VwXG4gICAqL1xuICBvbkV4aXRlZDogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIHJpcHBsZSBwdWxzYXRlcywgdHlwaWNhbGx5IGluZGljYXRpbmcgdGhlIGtleWJvYXJkIGZvY3VzIHN0YXRlIG9mIGFuIGVsZW1lbnQuXG4gICAqL1xuICBwdWxzYXRlOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogRGlhbWV0ZXIgb2YgdGhlIHJpcHBsZS5cbiAgICovXG4gIHJpcHBsZVNpemU6IFByb3BUeXBlcy5udW1iZXIsXG5cbiAgLyoqXG4gICAqIEhvcml6b250YWwgcG9zaXRpb24gb2YgdGhlIHJpcHBsZSBjZW50ZXIuXG4gICAqL1xuICByaXBwbGVYOiBQcm9wVHlwZXMubnVtYmVyLFxuXG4gIC8qKlxuICAgKiBWZXJ0aWNhbCBwb3NpdGlvbiBvZiB0aGUgcmlwcGxlIGNlbnRlci5cbiAgICovXG4gIHJpcHBsZVk6IFByb3BUeXBlcy5udW1iZXIsXG5cbiAgLyoqXG4gICAqIGV4aXQgZGVsYXlcbiAgICovXG4gIHRpbWVvdXQ6IFByb3BUeXBlcy5udW1iZXIuaXNSZXF1aXJlZFxufSA6IHZvaWQgMDtcbmV4cG9ydCBkZWZhdWx0IFJpcHBsZTsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfdG9Db25zdW1hYmxlQXJyYXkgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL3RvQ29uc3VtYWJsZUFycmF5XCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc1wiO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCB7IFRyYW5zaXRpb25Hcm91cCB9IGZyb20gJ3JlYWN0LXRyYW5zaXRpb24tZ3JvdXAnO1xuaW1wb3J0IGNsc3ggZnJvbSAnY2xzeCc7XG5pbXBvcnQgd2l0aFN0eWxlcyBmcm9tICcuLi9zdHlsZXMvd2l0aFN0eWxlcyc7XG5pbXBvcnQgUmlwcGxlIGZyb20gJy4vUmlwcGxlJztcbnZhciBEVVJBVElPTiA9IDU1MDtcbmV4cG9ydCB2YXIgREVMQVlfUklQUExFID0gODA7XG5leHBvcnQgdmFyIHN0eWxlcyA9IGZ1bmN0aW9uIHN0eWxlcyh0aGVtZSkge1xuICByZXR1cm4ge1xuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQuICovXG4gICAgcm9vdDoge1xuICAgICAgb3ZlcmZsb3c6ICdoaWRkZW4nLFxuICAgICAgcG9pbnRlckV2ZW50czogJ25vbmUnLFxuICAgICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gICAgICB6SW5kZXg6IDAsXG4gICAgICB0b3A6IDAsXG4gICAgICByaWdodDogMCxcbiAgICAgIGJvdHRvbTogMCxcbiAgICAgIGxlZnQ6IDAsXG4gICAgICBib3JkZXJSYWRpdXM6ICdpbmhlcml0J1xuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgaW50ZXJuYWwgYFJpcHBsZWAgY29tcG9uZW50cyBgcmlwcGxlYCBjbGFzcy4gKi9cbiAgICByaXBwbGU6IHtcbiAgICAgIG9wYWNpdHk6IDAsXG4gICAgICBwb3NpdGlvbjogJ2Fic29sdXRlJ1xuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgaW50ZXJuYWwgYFJpcHBsZWAgY29tcG9uZW50cyBgcmlwcGxlVmlzaWJsZWAgY2xhc3MuICovXG4gICAgcmlwcGxlVmlzaWJsZToge1xuICAgICAgb3BhY2l0eTogMC4zLFxuICAgICAgdHJhbnNmb3JtOiAnc2NhbGUoMSknLFxuICAgICAgYW5pbWF0aW9uOiBcIiRlbnRlciBcIi5jb25jYXQoRFVSQVRJT04sIFwibXMgXCIpLmNvbmNhdCh0aGVtZS50cmFuc2l0aW9ucy5lYXNpbmcuZWFzZUluT3V0KVxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgaW50ZXJuYWwgYFJpcHBsZWAgY29tcG9uZW50cyBgcmlwcGxlUHVsc2F0ZWAgY2xhc3MuICovXG4gICAgcmlwcGxlUHVsc2F0ZToge1xuICAgICAgYW5pbWF0aW9uRHVyYXRpb246IFwiXCIuY29uY2F0KHRoZW1lLnRyYW5zaXRpb25zLmR1cmF0aW9uLnNob3J0ZXIsIFwibXNcIilcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIGludGVybmFsIGBSaXBwbGVgIGNvbXBvbmVudHMgYGNoaWxkYCBjbGFzcy4gKi9cbiAgICBjaGlsZDoge1xuICAgICAgb3BhY2l0eTogMSxcbiAgICAgIGRpc3BsYXk6ICdibG9jaycsXG4gICAgICB3aWR0aDogJzEwMCUnLFxuICAgICAgaGVpZ2h0OiAnMTAwJScsXG4gICAgICBib3JkZXJSYWRpdXM6ICc1MCUnLFxuICAgICAgYmFja2dyb3VuZENvbG9yOiAnY3VycmVudENvbG9yJ1xuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgaW50ZXJuYWwgYFJpcHBsZWAgY29tcG9uZW50cyBgY2hpbGRMZWF2aW5nYCBjbGFzcy4gKi9cbiAgICBjaGlsZExlYXZpbmc6IHtcbiAgICAgIG9wYWNpdHk6IDAsXG4gICAgICBhbmltYXRpb246IFwiJGV4aXQgXCIuY29uY2F0KERVUkFUSU9OLCBcIm1zIFwiKS5jb25jYXQodGhlbWUudHJhbnNpdGlvbnMuZWFzaW5nLmVhc2VJbk91dClcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIGludGVybmFsIGBSaXBwbGVgIGNvbXBvbmVudHMgYGNoaWxkUHVsc2F0ZWAgY2xhc3MuICovXG4gICAgY2hpbGRQdWxzYXRlOiB7XG4gICAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICAgIGxlZnQ6IDAsXG4gICAgICB0b3A6IDAsXG4gICAgICBhbmltYXRpb246IFwiJHB1bHNhdGUgMjUwMG1zIFwiLmNvbmNhdCh0aGVtZS50cmFuc2l0aW9ucy5lYXNpbmcuZWFzZUluT3V0LCBcIiAyMDBtcyBpbmZpbml0ZVwiKVxuICAgIH0sXG4gICAgJ0BrZXlmcmFtZXMgZW50ZXInOiB7XG4gICAgICAnMCUnOiB7XG4gICAgICAgIHRyYW5zZm9ybTogJ3NjYWxlKDApJyxcbiAgICAgICAgb3BhY2l0eTogMC4xXG4gICAgICB9LFxuICAgICAgJzEwMCUnOiB7XG4gICAgICAgIHRyYW5zZm9ybTogJ3NjYWxlKDEpJyxcbiAgICAgICAgb3BhY2l0eTogMC4zXG4gICAgICB9XG4gICAgfSxcbiAgICAnQGtleWZyYW1lcyBleGl0Jzoge1xuICAgICAgJzAlJzoge1xuICAgICAgICBvcGFjaXR5OiAxXG4gICAgICB9LFxuICAgICAgJzEwMCUnOiB7XG4gICAgICAgIG9wYWNpdHk6IDBcbiAgICAgIH1cbiAgICB9LFxuICAgICdAa2V5ZnJhbWVzIHB1bHNhdGUnOiB7XG4gICAgICAnMCUnOiB7XG4gICAgICAgIHRyYW5zZm9ybTogJ3NjYWxlKDEpJ1xuICAgICAgfSxcbiAgICAgICc1MCUnOiB7XG4gICAgICAgIHRyYW5zZm9ybTogJ3NjYWxlKDAuOTIpJ1xuICAgICAgfSxcbiAgICAgICcxMDAlJzoge1xuICAgICAgICB0cmFuc2Zvcm06ICdzY2FsZSgxKSdcbiAgICAgIH1cbiAgICB9XG4gIH07XG59O1xuLyoqXG4gKiBAaWdub3JlIC0gaW50ZXJuYWwgY29tcG9uZW50LlxuICpcbiAqIFRPRE8gdjU6IE1ha2UgcHJpdmF0ZVxuICovXG5cbnZhciBUb3VjaFJpcHBsZSA9IC8qI19fUFVSRV9fKi9SZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIFRvdWNoUmlwcGxlKHByb3BzLCByZWYpIHtcbiAgdmFyIF9wcm9wcyRjZW50ZXIgPSBwcm9wcy5jZW50ZXIsXG4gICAgICBjZW50ZXJQcm9wID0gX3Byb3BzJGNlbnRlciA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcHJvcHMkY2VudGVyLFxuICAgICAgY2xhc3NlcyA9IHByb3BzLmNsYXNzZXMsXG4gICAgICBjbGFzc05hbWUgPSBwcm9wcy5jbGFzc05hbWUsXG4gICAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhwcm9wcywgW1wiY2VudGVyXCIsIFwiY2xhc3Nlc1wiLCBcImNsYXNzTmFtZVwiXSk7XG5cbiAgdmFyIF9SZWFjdCR1c2VTdGF0ZSA9IFJlYWN0LnVzZVN0YXRlKFtdKSxcbiAgICAgIHJpcHBsZXMgPSBfUmVhY3QkdXNlU3RhdGVbMF0sXG4gICAgICBzZXRSaXBwbGVzID0gX1JlYWN0JHVzZVN0YXRlWzFdO1xuXG4gIHZhciBuZXh0S2V5ID0gUmVhY3QudXNlUmVmKDApO1xuICB2YXIgcmlwcGxlQ2FsbGJhY2sgPSBSZWFjdC51c2VSZWYobnVsbCk7XG4gIFJlYWN0LnVzZUVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgaWYgKHJpcHBsZUNhbGxiYWNrLmN1cnJlbnQpIHtcbiAgICAgIHJpcHBsZUNhbGxiYWNrLmN1cnJlbnQoKTtcbiAgICAgIHJpcHBsZUNhbGxiYWNrLmN1cnJlbnQgPSBudWxsO1xuICAgIH1cbiAgfSwgW3JpcHBsZXNdKTsgLy8gVXNlZCB0byBmaWx0ZXIgb3V0IG1vdXNlIGVtdWxhdGVkIGV2ZW50cyBvbiBtb2JpbGUuXG5cbiAgdmFyIGlnbm9yaW5nTW91c2VEb3duID0gUmVhY3QudXNlUmVmKGZhbHNlKTsgLy8gV2UgdXNlIGEgdGltZXIgaW4gb3JkZXIgdG8gb25seSBzaG93IHRoZSByaXBwbGVzIGZvciB0b3VjaCBcImNsaWNrXCIgbGlrZSBldmVudHMuXG4gIC8vIFdlIGRvbid0IHdhbnQgdG8gZGlzcGxheSB0aGUgcmlwcGxlIGZvciB0b3VjaCBzY3JvbGwgZXZlbnRzLlxuXG4gIHZhciBzdGFydFRpbWVyID0gUmVhY3QudXNlUmVmKG51bGwpOyAvLyBUaGlzIGlzIHRoZSBob29rIGNhbGxlZCBvbmNlIHRoZSBwcmV2aW91cyB0aW1lb3V0IGlzIHJlYWR5LlxuXG4gIHZhciBzdGFydFRpbWVyQ29tbWl0ID0gUmVhY3QudXNlUmVmKG51bGwpO1xuICB2YXIgY29udGFpbmVyID0gUmVhY3QudXNlUmVmKG51bGwpO1xuICBSZWFjdC51c2VFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICBjbGVhclRpbWVvdXQoc3RhcnRUaW1lci5jdXJyZW50KTtcbiAgICB9O1xuICB9LCBbXSk7XG4gIHZhciBzdGFydENvbW1pdCA9IFJlYWN0LnVzZUNhbGxiYWNrKGZ1bmN0aW9uIChwYXJhbXMpIHtcbiAgICB2YXIgcHVsc2F0ZSA9IHBhcmFtcy5wdWxzYXRlLFxuICAgICAgICByaXBwbGVYID0gcGFyYW1zLnJpcHBsZVgsXG4gICAgICAgIHJpcHBsZVkgPSBwYXJhbXMucmlwcGxlWSxcbiAgICAgICAgcmlwcGxlU2l6ZSA9IHBhcmFtcy5yaXBwbGVTaXplLFxuICAgICAgICBjYiA9IHBhcmFtcy5jYjtcbiAgICBzZXRSaXBwbGVzKGZ1bmN0aW9uIChvbGRSaXBwbGVzKSB7XG4gICAgICByZXR1cm4gW10uY29uY2F0KF90b0NvbnN1bWFibGVBcnJheShvbGRSaXBwbGVzKSwgWy8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFJpcHBsZSwge1xuICAgICAgICBrZXk6IG5leHRLZXkuY3VycmVudCxcbiAgICAgICAgY2xhc3NlczogY2xhc3NlcyxcbiAgICAgICAgdGltZW91dDogRFVSQVRJT04sXG4gICAgICAgIHB1bHNhdGU6IHB1bHNhdGUsXG4gICAgICAgIHJpcHBsZVg6IHJpcHBsZVgsXG4gICAgICAgIHJpcHBsZVk6IHJpcHBsZVksXG4gICAgICAgIHJpcHBsZVNpemU6IHJpcHBsZVNpemVcbiAgICAgIH0pXSk7XG4gICAgfSk7XG4gICAgbmV4dEtleS5jdXJyZW50ICs9IDE7XG4gICAgcmlwcGxlQ2FsbGJhY2suY3VycmVudCA9IGNiO1xuICB9LCBbY2xhc3Nlc10pO1xuICB2YXIgc3RhcnQgPSBSZWFjdC51c2VDYWxsYmFjayhmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGV2ZW50ID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB7fTtcbiAgICB2YXIgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDoge307XG4gICAgdmFyIGNiID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgPyBhcmd1bWVudHNbMl0gOiB1bmRlZmluZWQ7XG4gICAgdmFyIF9vcHRpb25zJHB1bHNhdGUgPSBvcHRpb25zLnB1bHNhdGUsXG4gICAgICAgIHB1bHNhdGUgPSBfb3B0aW9ucyRwdWxzYXRlID09PSB2b2lkIDAgPyBmYWxzZSA6IF9vcHRpb25zJHB1bHNhdGUsXG4gICAgICAgIF9vcHRpb25zJGNlbnRlciA9IG9wdGlvbnMuY2VudGVyLFxuICAgICAgICBjZW50ZXIgPSBfb3B0aW9ucyRjZW50ZXIgPT09IHZvaWQgMCA/IGNlbnRlclByb3AgfHwgb3B0aW9ucy5wdWxzYXRlIDogX29wdGlvbnMkY2VudGVyLFxuICAgICAgICBfb3B0aW9ucyRmYWtlRWxlbWVudCA9IG9wdGlvbnMuZmFrZUVsZW1lbnQsXG4gICAgICAgIGZha2VFbGVtZW50ID0gX29wdGlvbnMkZmFrZUVsZW1lbnQgPT09IHZvaWQgMCA/IGZhbHNlIDogX29wdGlvbnMkZmFrZUVsZW1lbnQ7XG5cbiAgICBpZiAoZXZlbnQudHlwZSA9PT0gJ21vdXNlZG93bicgJiYgaWdub3JpbmdNb3VzZURvd24uY3VycmVudCkge1xuICAgICAgaWdub3JpbmdNb3VzZURvd24uY3VycmVudCA9IGZhbHNlO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmIChldmVudC50eXBlID09PSAndG91Y2hzdGFydCcpIHtcbiAgICAgIGlnbm9yaW5nTW91c2VEb3duLmN1cnJlbnQgPSB0cnVlO1xuICAgIH1cblxuICAgIHZhciBlbGVtZW50ID0gZmFrZUVsZW1lbnQgPyBudWxsIDogY29udGFpbmVyLmN1cnJlbnQ7XG4gICAgdmFyIHJlY3QgPSBlbGVtZW50ID8gZWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKSA6IHtcbiAgICAgIHdpZHRoOiAwLFxuICAgICAgaGVpZ2h0OiAwLFxuICAgICAgbGVmdDogMCxcbiAgICAgIHRvcDogMFxuICAgIH07IC8vIEdldCB0aGUgc2l6ZSBvZiB0aGUgcmlwcGxlXG5cbiAgICB2YXIgcmlwcGxlWDtcbiAgICB2YXIgcmlwcGxlWTtcbiAgICB2YXIgcmlwcGxlU2l6ZTtcblxuICAgIGlmIChjZW50ZXIgfHwgZXZlbnQuY2xpZW50WCA9PT0gMCAmJiBldmVudC5jbGllbnRZID09PSAwIHx8ICFldmVudC5jbGllbnRYICYmICFldmVudC50b3VjaGVzKSB7XG4gICAgICByaXBwbGVYID0gTWF0aC5yb3VuZChyZWN0LndpZHRoIC8gMik7XG4gICAgICByaXBwbGVZID0gTWF0aC5yb3VuZChyZWN0LmhlaWdodCAvIDIpO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgX3JlZiA9IGV2ZW50LnRvdWNoZXMgPyBldmVudC50b3VjaGVzWzBdIDogZXZlbnQsXG4gICAgICAgICAgY2xpZW50WCA9IF9yZWYuY2xpZW50WCxcbiAgICAgICAgICBjbGllbnRZID0gX3JlZi5jbGllbnRZO1xuXG4gICAgICByaXBwbGVYID0gTWF0aC5yb3VuZChjbGllbnRYIC0gcmVjdC5sZWZ0KTtcbiAgICAgIHJpcHBsZVkgPSBNYXRoLnJvdW5kKGNsaWVudFkgLSByZWN0LnRvcCk7XG4gICAgfVxuXG4gICAgaWYgKGNlbnRlcikge1xuICAgICAgcmlwcGxlU2l6ZSA9IE1hdGguc3FydCgoMiAqIE1hdGgucG93KHJlY3Qud2lkdGgsIDIpICsgTWF0aC5wb3cocmVjdC5oZWlnaHQsIDIpKSAvIDMpOyAvLyBGb3Igc29tZSByZWFzb24gdGhlIGFuaW1hdGlvbiBpcyBicm9rZW4gb24gTW9iaWxlIENocm9tZSBpZiB0aGUgc2l6ZSBpZiBldmVuLlxuXG4gICAgICBpZiAocmlwcGxlU2l6ZSAlIDIgPT09IDApIHtcbiAgICAgICAgcmlwcGxlU2l6ZSArPSAxO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgc2l6ZVggPSBNYXRoLm1heChNYXRoLmFicygoZWxlbWVudCA/IGVsZW1lbnQuY2xpZW50V2lkdGggOiAwKSAtIHJpcHBsZVgpLCByaXBwbGVYKSAqIDIgKyAyO1xuICAgICAgdmFyIHNpemVZID0gTWF0aC5tYXgoTWF0aC5hYnMoKGVsZW1lbnQgPyBlbGVtZW50LmNsaWVudEhlaWdodCA6IDApIC0gcmlwcGxlWSksIHJpcHBsZVkpICogMiArIDI7XG4gICAgICByaXBwbGVTaXplID0gTWF0aC5zcXJ0KE1hdGgucG93KHNpemVYLCAyKSArIE1hdGgucG93KHNpemVZLCAyKSk7XG4gICAgfSAvLyBUb3VjaGUgZGV2aWNlc1xuXG5cbiAgICBpZiAoZXZlbnQudG91Y2hlcykge1xuICAgICAgLy8gY2hlY2sgdGhhdCB0aGlzIGlzbid0IGFub3RoZXIgdG91Y2hzdGFydCBkdWUgdG8gbXVsdGl0b3VjaFxuICAgICAgLy8gb3RoZXJ3aXNlIHdlIHdpbGwgb25seSBjbGVhciBhIHNpbmdsZSB0aW1lciB3aGVuIHVubW91bnRpbmcgd2hpbGUgdHdvXG4gICAgICAvLyBhcmUgcnVubmluZ1xuICAgICAgaWYgKHN0YXJ0VGltZXJDb21taXQuY3VycmVudCA9PT0gbnVsbCkge1xuICAgICAgICAvLyBQcmVwYXJlIHRoZSByaXBwbGUgZWZmZWN0LlxuICAgICAgICBzdGFydFRpbWVyQ29tbWl0LmN1cnJlbnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgc3RhcnRDb21taXQoe1xuICAgICAgICAgICAgcHVsc2F0ZTogcHVsc2F0ZSxcbiAgICAgICAgICAgIHJpcHBsZVg6IHJpcHBsZVgsXG4gICAgICAgICAgICByaXBwbGVZOiByaXBwbGVZLFxuICAgICAgICAgICAgcmlwcGxlU2l6ZTogcmlwcGxlU2l6ZSxcbiAgICAgICAgICAgIGNiOiBjYlxuICAgICAgICAgIH0pO1xuICAgICAgICB9OyAvLyBEZWxheSB0aGUgZXhlY3V0aW9uIG9mIHRoZSByaXBwbGUgZWZmZWN0LlxuXG5cbiAgICAgICAgc3RhcnRUaW1lci5jdXJyZW50ID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgaWYgKHN0YXJ0VGltZXJDb21taXQuY3VycmVudCkge1xuICAgICAgICAgICAgc3RhcnRUaW1lckNvbW1pdC5jdXJyZW50KCk7XG4gICAgICAgICAgICBzdGFydFRpbWVyQ29tbWl0LmN1cnJlbnQgPSBudWxsO1xuICAgICAgICAgIH1cbiAgICAgICAgfSwgREVMQVlfUklQUExFKTsgLy8gV2UgaGF2ZSB0byBtYWtlIGEgdHJhZGVvZmYgd2l0aCB0aGlzIHZhbHVlLlxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBzdGFydENvbW1pdCh7XG4gICAgICAgIHB1bHNhdGU6IHB1bHNhdGUsXG4gICAgICAgIHJpcHBsZVg6IHJpcHBsZVgsXG4gICAgICAgIHJpcHBsZVk6IHJpcHBsZVksXG4gICAgICAgIHJpcHBsZVNpemU6IHJpcHBsZVNpemUsXG4gICAgICAgIGNiOiBjYlxuICAgICAgfSk7XG4gICAgfVxuICB9LCBbY2VudGVyUHJvcCwgc3RhcnRDb21taXRdKTtcbiAgdmFyIHB1bHNhdGUgPSBSZWFjdC51c2VDYWxsYmFjayhmdW5jdGlvbiAoKSB7XG4gICAgc3RhcnQoe30sIHtcbiAgICAgIHB1bHNhdGU6IHRydWVcbiAgICB9KTtcbiAgfSwgW3N0YXJ0XSk7XG4gIHZhciBzdG9wID0gUmVhY3QudXNlQ2FsbGJhY2soZnVuY3Rpb24gKGV2ZW50LCBjYikge1xuICAgIGNsZWFyVGltZW91dChzdGFydFRpbWVyLmN1cnJlbnQpOyAvLyBUaGUgdG91Y2ggaW50ZXJhY3Rpb24gb2NjdXJzIHRvbyBxdWlja2x5LlxuICAgIC8vIFdlIHN0aWxsIHdhbnQgdG8gc2hvdyByaXBwbGUgZWZmZWN0LlxuXG4gICAgaWYgKGV2ZW50LnR5cGUgPT09ICd0b3VjaGVuZCcgJiYgc3RhcnRUaW1lckNvbW1pdC5jdXJyZW50KSB7XG4gICAgICBldmVudC5wZXJzaXN0KCk7XG4gICAgICBzdGFydFRpbWVyQ29tbWl0LmN1cnJlbnQoKTtcbiAgICAgIHN0YXJ0VGltZXJDb21taXQuY3VycmVudCA9IG51bGw7XG4gICAgICBzdGFydFRpbWVyLmN1cnJlbnQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgc3RvcChldmVudCwgY2IpO1xuICAgICAgfSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgc3RhcnRUaW1lckNvbW1pdC5jdXJyZW50ID0gbnVsbDtcbiAgICBzZXRSaXBwbGVzKGZ1bmN0aW9uIChvbGRSaXBwbGVzKSB7XG4gICAgICBpZiAob2xkUmlwcGxlcy5sZW5ndGggPiAwKSB7XG4gICAgICAgIHJldHVybiBvbGRSaXBwbGVzLnNsaWNlKDEpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gb2xkUmlwcGxlcztcbiAgICB9KTtcbiAgICByaXBwbGVDYWxsYmFjay5jdXJyZW50ID0gY2I7XG4gIH0sIFtdKTtcbiAgUmVhY3QudXNlSW1wZXJhdGl2ZUhhbmRsZShyZWYsIGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgcHVsc2F0ZTogcHVsc2F0ZSxcbiAgICAgIHN0YXJ0OiBzdGFydCxcbiAgICAgIHN0b3A6IHN0b3BcbiAgICB9O1xuICB9LCBbcHVsc2F0ZSwgc3RhcnQsIHN0b3BdKTtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwic3BhblwiLCBfZXh0ZW5kcyh7XG4gICAgY2xhc3NOYW1lOiBjbHN4KGNsYXNzZXMucm9vdCwgY2xhc3NOYW1lKSxcbiAgICByZWY6IGNvbnRhaW5lclxuICB9LCBvdGhlciksIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFRyYW5zaXRpb25Hcm91cCwge1xuICAgIGNvbXBvbmVudDogbnVsbCxcbiAgICBleGl0OiB0cnVlXG4gIH0sIHJpcHBsZXMpKTtcbn0pO1xucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gVG91Y2hSaXBwbGUucHJvcFR5cGVzID0ge1xuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgcmlwcGxlIHN0YXJ0cyBhdCB0aGUgY2VudGVyIG9mIHRoZSBjb21wb25lbnRcbiAgICogcmF0aGVyIHRoYW4gYXQgdGhlIHBvaW50IG9mIGludGVyYWN0aW9uLlxuICAgKi9cbiAgY2VudGVyOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogT3ZlcnJpZGUgb3IgZXh0ZW5kIHRoZSBzdHlsZXMgYXBwbGllZCB0byB0aGUgY29tcG9uZW50LlxuICAgKiBTZWUgW0NTUyBBUEldKCNjc3MpIGJlbG93IGZvciBtb3JlIGRldGFpbHMuXG4gICAqL1xuICBjbGFzc2VzOiBQcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWQsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZ1xufSA6IHZvaWQgMDtcbmV4cG9ydCBkZWZhdWx0IHdpdGhTdHlsZXMoc3R5bGVzLCB7XG4gIGZsaXA6IGZhbHNlLFxuICBuYW1lOiAnTXVpVG91Y2hSaXBwbGUnXG59KSggLyojX19QVVJFX18qL1JlYWN0Lm1lbW8oVG91Y2hSaXBwbGUpKTsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzXCI7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0ICogYXMgUmVhY3RET00gZnJvbSAncmVhY3QtZG9tJztcbmltcG9ydCBjbHN4IGZyb20gJ2Nsc3gnO1xuaW1wb3J0IHsgZWxlbWVudFR5cGVBY2NlcHRpbmdSZWYsIHJlZlR5cGUgfSBmcm9tICdAbWF0ZXJpYWwtdWkvdXRpbHMnO1xuaW1wb3J0IHVzZUZvcmtSZWYgZnJvbSAnLi4vdXRpbHMvdXNlRm9ya1JlZic7XG5pbXBvcnQgdXNlRXZlbnRDYWxsYmFjayBmcm9tICcuLi91dGlscy91c2VFdmVudENhbGxiYWNrJztcbmltcG9ydCB3aXRoU3R5bGVzIGZyb20gJy4uL3N0eWxlcy93aXRoU3R5bGVzJztcbmltcG9ydCB1c2VJc0ZvY3VzVmlzaWJsZSBmcm9tICcuLi91dGlscy91c2VJc0ZvY3VzVmlzaWJsZSc7XG5pbXBvcnQgVG91Y2hSaXBwbGUgZnJvbSAnLi9Ub3VjaFJpcHBsZSc7XG5leHBvcnQgdmFyIHN0eWxlcyA9IHtcbiAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudC4gKi9cbiAgcm9vdDoge1xuICAgIGRpc3BsYXk6ICdpbmxpbmUtZmxleCcsXG4gICAgYWxpZ25JdGVtczogJ2NlbnRlcicsXG4gICAganVzdGlmeUNvbnRlbnQ6ICdjZW50ZXInLFxuICAgIHBvc2l0aW9uOiAncmVsYXRpdmUnLFxuICAgIFdlYmtpdFRhcEhpZ2hsaWdodENvbG9yOiAndHJhbnNwYXJlbnQnLFxuICAgIGJhY2tncm91bmRDb2xvcjogJ3RyYW5zcGFyZW50JyxcbiAgICAvLyBSZXNldCBkZWZhdWx0IHZhbHVlXG4gICAgLy8gV2UgZGlzYWJsZSB0aGUgZm9jdXMgcmluZyBmb3IgbW91c2UsIHRvdWNoIGFuZCBrZXlib2FyZCB1c2Vycy5cbiAgICBvdXRsaW5lOiAwLFxuICAgIGJvcmRlcjogMCxcbiAgICBtYXJnaW46IDAsXG4gICAgLy8gUmVtb3ZlIHRoZSBtYXJnaW4gaW4gU2FmYXJpXG4gICAgYm9yZGVyUmFkaXVzOiAwLFxuICAgIHBhZGRpbmc6IDAsXG4gICAgLy8gUmVtb3ZlIHRoZSBwYWRkaW5nIGluIEZpcmVmb3hcbiAgICBjdXJzb3I6ICdwb2ludGVyJyxcbiAgICB1c2VyU2VsZWN0OiAnbm9uZScsXG4gICAgdmVydGljYWxBbGlnbjogJ21pZGRsZScsXG4gICAgJy1tb3otYXBwZWFyYW5jZSc6ICdub25lJyxcbiAgICAvLyBSZXNldFxuICAgICctd2Via2l0LWFwcGVhcmFuY2UnOiAnbm9uZScsXG4gICAgLy8gUmVzZXRcbiAgICB0ZXh0RGVjb3JhdGlvbjogJ25vbmUnLFxuICAgIC8vIFNvIHdlIHRha2UgcHJlY2VkZW50IG92ZXIgdGhlIHN0eWxlIG9mIGEgbmF0aXZlIDxhIC8+IGVsZW1lbnQuXG4gICAgY29sb3I6ICdpbmhlcml0JyxcbiAgICAnJjo6LW1vei1mb2N1cy1pbm5lcic6IHtcbiAgICAgIGJvcmRlclN0eWxlOiAnbm9uZScgLy8gUmVtb3ZlIEZpcmVmb3ggZG90dGVkIG91dGxpbmUuXG5cbiAgICB9LFxuICAgICcmJGRpc2FibGVkJzoge1xuICAgICAgcG9pbnRlckV2ZW50czogJ25vbmUnLFxuICAgICAgLy8gRGlzYWJsZSBsaW5rIGludGVyYWN0aW9uc1xuICAgICAgY3Vyc29yOiAnZGVmYXVsdCdcbiAgICB9LFxuICAgICdAbWVkaWEgcHJpbnQnOiB7XG4gICAgICBjb2xvckFkanVzdDogJ2V4YWN0J1xuICAgIH1cbiAgfSxcblxuICAvKiBQc2V1ZG8tY2xhc3MgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBkaXNhYmxlZD17dHJ1ZX1gLiAqL1xuICBkaXNhYmxlZDoge30sXG5cbiAgLyogUHNldWRvLWNsYXNzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBrZXlib2FyZCBmb2N1c2VkLiAqL1xuICBmb2N1c1Zpc2libGU6IHt9XG59O1xuLyoqXG4gKiBgQnV0dG9uQmFzZWAgY29udGFpbnMgYXMgZmV3IHN0eWxlcyBhcyBwb3NzaWJsZS5cbiAqIEl0IGFpbXMgdG8gYmUgYSBzaW1wbGUgYnVpbGRpbmcgYmxvY2sgZm9yIGNyZWF0aW5nIGEgYnV0dG9uLlxuICogSXQgY29udGFpbnMgYSBsb2FkIG9mIHN0eWxlIHJlc2V0IGFuZCBzb21lIGZvY3VzL3JpcHBsZSBsb2dpYy5cbiAqL1xuXG52YXIgQnV0dG9uQmFzZSA9IC8qI19fUFVSRV9fKi9SZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIEJ1dHRvbkJhc2UocHJvcHMsIHJlZikge1xuICB2YXIgYWN0aW9uID0gcHJvcHMuYWN0aW9uLFxuICAgICAgYnV0dG9uUmVmUHJvcCA9IHByb3BzLmJ1dHRvblJlZixcbiAgICAgIF9wcm9wcyRjZW50ZXJSaXBwbGUgPSBwcm9wcy5jZW50ZXJSaXBwbGUsXG4gICAgICBjZW50ZXJSaXBwbGUgPSBfcHJvcHMkY2VudGVyUmlwcGxlID09PSB2b2lkIDAgPyBmYWxzZSA6IF9wcm9wcyRjZW50ZXJSaXBwbGUsXG4gICAgICBjaGlsZHJlbiA9IHByb3BzLmNoaWxkcmVuLFxuICAgICAgY2xhc3NlcyA9IHByb3BzLmNsYXNzZXMsXG4gICAgICBjbGFzc05hbWUgPSBwcm9wcy5jbGFzc05hbWUsXG4gICAgICBfcHJvcHMkY29tcG9uZW50ID0gcHJvcHMuY29tcG9uZW50LFxuICAgICAgY29tcG9uZW50ID0gX3Byb3BzJGNvbXBvbmVudCA9PT0gdm9pZCAwID8gJ2J1dHRvbicgOiBfcHJvcHMkY29tcG9uZW50LFxuICAgICAgX3Byb3BzJGRpc2FibGVkID0gcHJvcHMuZGlzYWJsZWQsXG4gICAgICBkaXNhYmxlZCA9IF9wcm9wcyRkaXNhYmxlZCA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcHJvcHMkZGlzYWJsZWQsXG4gICAgICBfcHJvcHMkZGlzYWJsZVJpcHBsZSA9IHByb3BzLmRpc2FibGVSaXBwbGUsXG4gICAgICBkaXNhYmxlUmlwcGxlID0gX3Byb3BzJGRpc2FibGVSaXBwbGUgPT09IHZvaWQgMCA/IGZhbHNlIDogX3Byb3BzJGRpc2FibGVSaXBwbGUsXG4gICAgICBfcHJvcHMkZGlzYWJsZVRvdWNoUmkgPSBwcm9wcy5kaXNhYmxlVG91Y2hSaXBwbGUsXG4gICAgICBkaXNhYmxlVG91Y2hSaXBwbGUgPSBfcHJvcHMkZGlzYWJsZVRvdWNoUmkgPT09IHZvaWQgMCA/IGZhbHNlIDogX3Byb3BzJGRpc2FibGVUb3VjaFJpLFxuICAgICAgX3Byb3BzJGZvY3VzUmlwcGxlID0gcHJvcHMuZm9jdXNSaXBwbGUsXG4gICAgICBmb2N1c1JpcHBsZSA9IF9wcm9wcyRmb2N1c1JpcHBsZSA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcHJvcHMkZm9jdXNSaXBwbGUsXG4gICAgICBmb2N1c1Zpc2libGVDbGFzc05hbWUgPSBwcm9wcy5mb2N1c1Zpc2libGVDbGFzc05hbWUsXG4gICAgICBvbkJsdXIgPSBwcm9wcy5vbkJsdXIsXG4gICAgICBvbkNsaWNrID0gcHJvcHMub25DbGljayxcbiAgICAgIG9uRm9jdXMgPSBwcm9wcy5vbkZvY3VzLFxuICAgICAgb25Gb2N1c1Zpc2libGUgPSBwcm9wcy5vbkZvY3VzVmlzaWJsZSxcbiAgICAgIG9uS2V5RG93biA9IHByb3BzLm9uS2V5RG93bixcbiAgICAgIG9uS2V5VXAgPSBwcm9wcy5vbktleVVwLFxuICAgICAgb25Nb3VzZURvd24gPSBwcm9wcy5vbk1vdXNlRG93bixcbiAgICAgIG9uTW91c2VMZWF2ZSA9IHByb3BzLm9uTW91c2VMZWF2ZSxcbiAgICAgIG9uTW91c2VVcCA9IHByb3BzLm9uTW91c2VVcCxcbiAgICAgIG9uVG91Y2hFbmQgPSBwcm9wcy5vblRvdWNoRW5kLFxuICAgICAgb25Ub3VjaE1vdmUgPSBwcm9wcy5vblRvdWNoTW92ZSxcbiAgICAgIG9uVG91Y2hTdGFydCA9IHByb3BzLm9uVG91Y2hTdGFydCxcbiAgICAgIG9uRHJhZ0xlYXZlID0gcHJvcHMub25EcmFnTGVhdmUsXG4gICAgICBfcHJvcHMkdGFiSW5kZXggPSBwcm9wcy50YWJJbmRleCxcbiAgICAgIHRhYkluZGV4ID0gX3Byb3BzJHRhYkluZGV4ID09PSB2b2lkIDAgPyAwIDogX3Byb3BzJHRhYkluZGV4LFxuICAgICAgVG91Y2hSaXBwbGVQcm9wcyA9IHByb3BzLlRvdWNoUmlwcGxlUHJvcHMsXG4gICAgICBfcHJvcHMkdHlwZSA9IHByb3BzLnR5cGUsXG4gICAgICB0eXBlID0gX3Byb3BzJHR5cGUgPT09IHZvaWQgMCA/ICdidXR0b24nIDogX3Byb3BzJHR5cGUsXG4gICAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhwcm9wcywgW1wiYWN0aW9uXCIsIFwiYnV0dG9uUmVmXCIsIFwiY2VudGVyUmlwcGxlXCIsIFwiY2hpbGRyZW5cIiwgXCJjbGFzc2VzXCIsIFwiY2xhc3NOYW1lXCIsIFwiY29tcG9uZW50XCIsIFwiZGlzYWJsZWRcIiwgXCJkaXNhYmxlUmlwcGxlXCIsIFwiZGlzYWJsZVRvdWNoUmlwcGxlXCIsIFwiZm9jdXNSaXBwbGVcIiwgXCJmb2N1c1Zpc2libGVDbGFzc05hbWVcIiwgXCJvbkJsdXJcIiwgXCJvbkNsaWNrXCIsIFwib25Gb2N1c1wiLCBcIm9uRm9jdXNWaXNpYmxlXCIsIFwib25LZXlEb3duXCIsIFwib25LZXlVcFwiLCBcIm9uTW91c2VEb3duXCIsIFwib25Nb3VzZUxlYXZlXCIsIFwib25Nb3VzZVVwXCIsIFwib25Ub3VjaEVuZFwiLCBcIm9uVG91Y2hNb3ZlXCIsIFwib25Ub3VjaFN0YXJ0XCIsIFwib25EcmFnTGVhdmVcIiwgXCJ0YWJJbmRleFwiLCBcIlRvdWNoUmlwcGxlUHJvcHNcIiwgXCJ0eXBlXCJdKTtcblxuICB2YXIgYnV0dG9uUmVmID0gUmVhY3QudXNlUmVmKG51bGwpO1xuXG4gIGZ1bmN0aW9uIGdldEJ1dHRvbk5vZGUoKSB7XG4gICAgLy8gI1N0cmljdE1vZGUgcmVhZHlcbiAgICByZXR1cm4gUmVhY3RET00uZmluZERPTU5vZGUoYnV0dG9uUmVmLmN1cnJlbnQpO1xuICB9XG5cbiAgdmFyIHJpcHBsZVJlZiA9IFJlYWN0LnVzZVJlZihudWxsKTtcblxuICB2YXIgX1JlYWN0JHVzZVN0YXRlID0gUmVhY3QudXNlU3RhdGUoZmFsc2UpLFxuICAgICAgZm9jdXNWaXNpYmxlID0gX1JlYWN0JHVzZVN0YXRlWzBdLFxuICAgICAgc2V0Rm9jdXNWaXNpYmxlID0gX1JlYWN0JHVzZVN0YXRlWzFdO1xuXG4gIGlmIChkaXNhYmxlZCAmJiBmb2N1c1Zpc2libGUpIHtcbiAgICBzZXRGb2N1c1Zpc2libGUoZmFsc2UpO1xuICB9XG5cbiAgdmFyIF91c2VJc0ZvY3VzVmlzaWJsZSA9IHVzZUlzRm9jdXNWaXNpYmxlKCksXG4gICAgICBpc0ZvY3VzVmlzaWJsZSA9IF91c2VJc0ZvY3VzVmlzaWJsZS5pc0ZvY3VzVmlzaWJsZSxcbiAgICAgIG9uQmx1clZpc2libGUgPSBfdXNlSXNGb2N1c1Zpc2libGUub25CbHVyVmlzaWJsZSxcbiAgICAgIGZvY3VzVmlzaWJsZVJlZiA9IF91c2VJc0ZvY3VzVmlzaWJsZS5yZWY7XG5cbiAgUmVhY3QudXNlSW1wZXJhdGl2ZUhhbmRsZShhY3Rpb24sIGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgZm9jdXNWaXNpYmxlOiBmdW5jdGlvbiBmb2N1c1Zpc2libGUoKSB7XG4gICAgICAgIHNldEZvY3VzVmlzaWJsZSh0cnVlKTtcbiAgICAgICAgYnV0dG9uUmVmLmN1cnJlbnQuZm9jdXMoKTtcbiAgICAgIH1cbiAgICB9O1xuICB9LCBbXSk7XG4gIFJlYWN0LnVzZUVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgaWYgKGZvY3VzVmlzaWJsZSAmJiBmb2N1c1JpcHBsZSAmJiAhZGlzYWJsZVJpcHBsZSkge1xuICAgICAgcmlwcGxlUmVmLmN1cnJlbnQucHVsc2F0ZSgpO1xuICAgIH1cbiAgfSwgW2Rpc2FibGVSaXBwbGUsIGZvY3VzUmlwcGxlLCBmb2N1c1Zpc2libGVdKTtcblxuICBmdW5jdGlvbiB1c2VSaXBwbGVIYW5kbGVyKHJpcHBsZUFjdGlvbiwgZXZlbnRDYWxsYmFjaykge1xuICAgIHZhciBza2lwUmlwcGxlQWN0aW9uID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiBkaXNhYmxlVG91Y2hSaXBwbGU7XG4gICAgcmV0dXJuIHVzZUV2ZW50Q2FsbGJhY2soZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICBpZiAoZXZlbnRDYWxsYmFjaykge1xuICAgICAgICBldmVudENhbGxiYWNrKGV2ZW50KTtcbiAgICAgIH1cblxuICAgICAgdmFyIGlnbm9yZSA9IHNraXBSaXBwbGVBY3Rpb247XG5cbiAgICAgIGlmICghaWdub3JlICYmIHJpcHBsZVJlZi5jdXJyZW50KSB7XG4gICAgICAgIHJpcHBsZVJlZi5jdXJyZW50W3JpcHBsZUFjdGlvbl0oZXZlbnQpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9KTtcbiAgfVxuXG4gIHZhciBoYW5kbGVNb3VzZURvd24gPSB1c2VSaXBwbGVIYW5kbGVyKCdzdGFydCcsIG9uTW91c2VEb3duKTtcbiAgdmFyIGhhbmRsZURyYWdMZWF2ZSA9IHVzZVJpcHBsZUhhbmRsZXIoJ3N0b3AnLCBvbkRyYWdMZWF2ZSk7XG4gIHZhciBoYW5kbGVNb3VzZVVwID0gdXNlUmlwcGxlSGFuZGxlcignc3RvcCcsIG9uTW91c2VVcCk7XG4gIHZhciBoYW5kbGVNb3VzZUxlYXZlID0gdXNlUmlwcGxlSGFuZGxlcignc3RvcCcsIGZ1bmN0aW9uIChldmVudCkge1xuICAgIGlmIChmb2N1c1Zpc2libGUpIHtcbiAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgfVxuXG4gICAgaWYgKG9uTW91c2VMZWF2ZSkge1xuICAgICAgb25Nb3VzZUxlYXZlKGV2ZW50KTtcbiAgICB9XG4gIH0pO1xuICB2YXIgaGFuZGxlVG91Y2hTdGFydCA9IHVzZVJpcHBsZUhhbmRsZXIoJ3N0YXJ0Jywgb25Ub3VjaFN0YXJ0KTtcbiAgdmFyIGhhbmRsZVRvdWNoRW5kID0gdXNlUmlwcGxlSGFuZGxlcignc3RvcCcsIG9uVG91Y2hFbmQpO1xuICB2YXIgaGFuZGxlVG91Y2hNb3ZlID0gdXNlUmlwcGxlSGFuZGxlcignc3RvcCcsIG9uVG91Y2hNb3ZlKTtcbiAgdmFyIGhhbmRsZUJsdXIgPSB1c2VSaXBwbGVIYW5kbGVyKCdzdG9wJywgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgaWYgKGZvY3VzVmlzaWJsZSkge1xuICAgICAgb25CbHVyVmlzaWJsZShldmVudCk7XG4gICAgICBzZXRGb2N1c1Zpc2libGUoZmFsc2UpO1xuICAgIH1cblxuICAgIGlmIChvbkJsdXIpIHtcbiAgICAgIG9uQmx1cihldmVudCk7XG4gICAgfVxuICB9LCBmYWxzZSk7XG4gIHZhciBoYW5kbGVGb2N1cyA9IHVzZUV2ZW50Q2FsbGJhY2soZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgLy8gRml4IGZvciBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svcmVhY3QvaXNzdWVzLzc3NjlcbiAgICBpZiAoIWJ1dHRvblJlZi5jdXJyZW50KSB7XG4gICAgICBidXR0b25SZWYuY3VycmVudCA9IGV2ZW50LmN1cnJlbnRUYXJnZXQ7XG4gICAgfVxuXG4gICAgaWYgKGlzRm9jdXNWaXNpYmxlKGV2ZW50KSkge1xuICAgICAgc2V0Rm9jdXNWaXNpYmxlKHRydWUpO1xuXG4gICAgICBpZiAob25Gb2N1c1Zpc2libGUpIHtcbiAgICAgICAgb25Gb2N1c1Zpc2libGUoZXZlbnQpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChvbkZvY3VzKSB7XG4gICAgICBvbkZvY3VzKGV2ZW50KTtcbiAgICB9XG4gIH0pO1xuXG4gIHZhciBpc05vbk5hdGl2ZUJ1dHRvbiA9IGZ1bmN0aW9uIGlzTm9uTmF0aXZlQnV0dG9uKCkge1xuICAgIHZhciBidXR0b24gPSBnZXRCdXR0b25Ob2RlKCk7XG4gICAgcmV0dXJuIGNvbXBvbmVudCAmJiBjb21wb25lbnQgIT09ICdidXR0b24nICYmICEoYnV0dG9uLnRhZ05hbWUgPT09ICdBJyAmJiBidXR0b24uaHJlZik7XG4gIH07XG4gIC8qKlxuICAgKiBJRSAxMSBzaGltIGZvciBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvS2V5Ym9hcmRFdmVudC9yZXBlYXRcbiAgICovXG5cblxuICB2YXIga2V5ZG93blJlZiA9IFJlYWN0LnVzZVJlZihmYWxzZSk7XG4gIHZhciBoYW5kbGVLZXlEb3duID0gdXNlRXZlbnRDYWxsYmFjayhmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAvLyBDaGVjayBpZiBrZXkgaXMgYWxyZWFkeSBkb3duIHRvIGF2b2lkIHJlcGVhdHMgYmVpbmcgY291bnRlZCBhcyBtdWx0aXBsZSBhY3RpdmF0aW9uc1xuICAgIGlmIChmb2N1c1JpcHBsZSAmJiAha2V5ZG93blJlZi5jdXJyZW50ICYmIGZvY3VzVmlzaWJsZSAmJiByaXBwbGVSZWYuY3VycmVudCAmJiBldmVudC5rZXkgPT09ICcgJykge1xuICAgICAga2V5ZG93blJlZi5jdXJyZW50ID0gdHJ1ZTtcbiAgICAgIGV2ZW50LnBlcnNpc3QoKTtcbiAgICAgIHJpcHBsZVJlZi5jdXJyZW50LnN0b3AoZXZlbnQsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmlwcGxlUmVmLmN1cnJlbnQuc3RhcnQoZXZlbnQpO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgaWYgKGV2ZW50LnRhcmdldCA9PT0gZXZlbnQuY3VycmVudFRhcmdldCAmJiBpc05vbk5hdGl2ZUJ1dHRvbigpICYmIGV2ZW50LmtleSA9PT0gJyAnKSB7XG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIH1cblxuICAgIGlmIChvbktleURvd24pIHtcbiAgICAgIG9uS2V5RG93bihldmVudCk7XG4gICAgfSAvLyBLZXlib2FyZCBhY2Nlc3NpYmlsaXR5IGZvciBub24gaW50ZXJhY3RpdmUgZWxlbWVudHNcblxuXG4gICAgaWYgKGV2ZW50LnRhcmdldCA9PT0gZXZlbnQuY3VycmVudFRhcmdldCAmJiBpc05vbk5hdGl2ZUJ1dHRvbigpICYmIGV2ZW50LmtleSA9PT0gJ0VudGVyJyAmJiAhZGlzYWJsZWQpIHtcbiAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cbiAgICAgIGlmIChvbkNsaWNrKSB7XG4gICAgICAgIG9uQ2xpY2soZXZlbnQpO1xuICAgICAgfVxuICAgIH1cbiAgfSk7XG4gIHZhciBoYW5kbGVLZXlVcCA9IHVzZUV2ZW50Q2FsbGJhY2soZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgLy8gY2FsbGluZyBwcmV2ZW50RGVmYXVsdCBpbiBrZXlVcCBvbiBhIDxidXR0b24+IHdpbGwgbm90IGRpc3BhdGNoIGEgY2xpY2sgZXZlbnQgaWYgU3BhY2UgaXMgcHJlc3NlZFxuICAgIC8vIGh0dHBzOi8vY29kZXNhbmRib3guaW8vcy9idXR0b24ta2V5dXAtcHJldmVudGRlZmF1bHQtZG43ZjBcbiAgICBpZiAoZm9jdXNSaXBwbGUgJiYgZXZlbnQua2V5ID09PSAnICcgJiYgcmlwcGxlUmVmLmN1cnJlbnQgJiYgZm9jdXNWaXNpYmxlICYmICFldmVudC5kZWZhdWx0UHJldmVudGVkKSB7XG4gICAgICBrZXlkb3duUmVmLmN1cnJlbnQgPSBmYWxzZTtcbiAgICAgIGV2ZW50LnBlcnNpc3QoKTtcbiAgICAgIHJpcHBsZVJlZi5jdXJyZW50LnN0b3AoZXZlbnQsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmlwcGxlUmVmLmN1cnJlbnQucHVsc2F0ZShldmVudCk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBpZiAob25LZXlVcCkge1xuICAgICAgb25LZXlVcChldmVudCk7XG4gICAgfSAvLyBLZXlib2FyZCBhY2Nlc3NpYmlsaXR5IGZvciBub24gaW50ZXJhY3RpdmUgZWxlbWVudHNcblxuXG4gICAgaWYgKG9uQ2xpY2sgJiYgZXZlbnQudGFyZ2V0ID09PSBldmVudC5jdXJyZW50VGFyZ2V0ICYmIGlzTm9uTmF0aXZlQnV0dG9uKCkgJiYgZXZlbnQua2V5ID09PSAnICcgJiYgIWV2ZW50LmRlZmF1bHRQcmV2ZW50ZWQpIHtcbiAgICAgIG9uQ2xpY2soZXZlbnQpO1xuICAgIH1cbiAgfSk7XG4gIHZhciBDb21wb25lbnRQcm9wID0gY29tcG9uZW50O1xuXG4gIGlmIChDb21wb25lbnRQcm9wID09PSAnYnV0dG9uJyAmJiBvdGhlci5ocmVmKSB7XG4gICAgQ29tcG9uZW50UHJvcCA9ICdhJztcbiAgfVxuXG4gIHZhciBidXR0b25Qcm9wcyA9IHt9O1xuXG4gIGlmIChDb21wb25lbnRQcm9wID09PSAnYnV0dG9uJykge1xuICAgIGJ1dHRvblByb3BzLnR5cGUgPSB0eXBlO1xuICAgIGJ1dHRvblByb3BzLmRpc2FibGVkID0gZGlzYWJsZWQ7XG4gIH0gZWxzZSB7XG4gICAgaWYgKENvbXBvbmVudFByb3AgIT09ICdhJyB8fCAhb3RoZXIuaHJlZikge1xuICAgICAgYnV0dG9uUHJvcHMucm9sZSA9ICdidXR0b24nO1xuICAgIH1cblxuICAgIGJ1dHRvblByb3BzWydhcmlhLWRpc2FibGVkJ10gPSBkaXNhYmxlZDtcbiAgfVxuXG4gIHZhciBoYW5kbGVVc2VyUmVmID0gdXNlRm9ya1JlZihidXR0b25SZWZQcm9wLCByZWYpO1xuICB2YXIgaGFuZGxlT3duUmVmID0gdXNlRm9ya1JlZihmb2N1c1Zpc2libGVSZWYsIGJ1dHRvblJlZik7XG4gIHZhciBoYW5kbGVSZWYgPSB1c2VGb3JrUmVmKGhhbmRsZVVzZXJSZWYsIGhhbmRsZU93blJlZik7XG5cbiAgdmFyIF9SZWFjdCR1c2VTdGF0ZTIgPSBSZWFjdC51c2VTdGF0ZShmYWxzZSksXG4gICAgICBtb3VudGVkU3RhdGUgPSBfUmVhY3QkdXNlU3RhdGUyWzBdLFxuICAgICAgc2V0TW91bnRlZFN0YXRlID0gX1JlYWN0JHVzZVN0YXRlMlsxXTtcblxuICBSZWFjdC51c2VFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgIHNldE1vdW50ZWRTdGF0ZSh0cnVlKTtcbiAgfSwgW10pO1xuICB2YXIgZW5hYmxlVG91Y2hSaXBwbGUgPSBtb3VudGVkU3RhdGUgJiYgIWRpc2FibGVSaXBwbGUgJiYgIWRpc2FibGVkO1xuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlYWN0LWhvb2tzL3J1bGVzLW9mLWhvb2tzXG4gICAgUmVhY3QudXNlRWZmZWN0KGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmIChlbmFibGVUb3VjaFJpcHBsZSAmJiAhcmlwcGxlUmVmLmN1cnJlbnQpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihbJ01hdGVyaWFsLVVJOiBUaGUgYGNvbXBvbmVudGAgcHJvcCBwcm92aWRlZCB0byBCdXR0b25CYXNlIGlzIGludmFsaWQuJywgJ1BsZWFzZSBtYWtlIHN1cmUgdGhlIGNoaWxkcmVuIHByb3AgaXMgcmVuZGVyZWQgaW4gdGhpcyBjdXN0b20gY29tcG9uZW50LiddLmpvaW4oJ1xcbicpKTtcbiAgICAgIH1cbiAgICB9LCBbZW5hYmxlVG91Y2hSaXBwbGVdKTtcbiAgfVxuXG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChDb21wb25lbnRQcm9wLCBfZXh0ZW5kcyh7XG4gICAgY2xhc3NOYW1lOiBjbHN4KGNsYXNzZXMucm9vdCwgY2xhc3NOYW1lLCBmb2N1c1Zpc2libGUgJiYgW2NsYXNzZXMuZm9jdXNWaXNpYmxlLCBmb2N1c1Zpc2libGVDbGFzc05hbWVdLCBkaXNhYmxlZCAmJiBjbGFzc2VzLmRpc2FibGVkKSxcbiAgICBvbkJsdXI6IGhhbmRsZUJsdXIsXG4gICAgb25DbGljazogb25DbGljayxcbiAgICBvbkZvY3VzOiBoYW5kbGVGb2N1cyxcbiAgICBvbktleURvd246IGhhbmRsZUtleURvd24sXG4gICAgb25LZXlVcDogaGFuZGxlS2V5VXAsXG4gICAgb25Nb3VzZURvd246IGhhbmRsZU1vdXNlRG93bixcbiAgICBvbk1vdXNlTGVhdmU6IGhhbmRsZU1vdXNlTGVhdmUsXG4gICAgb25Nb3VzZVVwOiBoYW5kbGVNb3VzZVVwLFxuICAgIG9uRHJhZ0xlYXZlOiBoYW5kbGVEcmFnTGVhdmUsXG4gICAgb25Ub3VjaEVuZDogaGFuZGxlVG91Y2hFbmQsXG4gICAgb25Ub3VjaE1vdmU6IGhhbmRsZVRvdWNoTW92ZSxcbiAgICBvblRvdWNoU3RhcnQ6IGhhbmRsZVRvdWNoU3RhcnQsXG4gICAgcmVmOiBoYW5kbGVSZWYsXG4gICAgdGFiSW5kZXg6IGRpc2FibGVkID8gLTEgOiB0YWJJbmRleFxuICB9LCBidXR0b25Qcm9wcywgb3RoZXIpLCBjaGlsZHJlbiwgZW5hYmxlVG91Y2hSaXBwbGUgP1xuICAvKiNfX1BVUkVfXyovXG5cbiAgLyogVG91Y2hSaXBwbGUgaXMgb25seSBuZWVkZWQgY2xpZW50LXNpZGUsIHgyIGJvb3N0IG9uIHRoZSBzZXJ2ZXIuICovXG4gIFJlYWN0LmNyZWF0ZUVsZW1lbnQoVG91Y2hSaXBwbGUsIF9leHRlbmRzKHtcbiAgICByZWY6IHJpcHBsZVJlZixcbiAgICBjZW50ZXI6IGNlbnRlclJpcHBsZVxuICB9LCBUb3VjaFJpcHBsZVByb3BzKSkgOiBudWxsKTtcbn0pO1xucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gQnV0dG9uQmFzZS5wcm9wVHlwZXMgPSB7XG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIFdhcm5pbmcgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgLy8gfCBUaGVzZSBQcm9wVHlwZXMgYXJlIGdlbmVyYXRlZCBmcm9tIHRoZSBUeXBlU2NyaXB0IHR5cGUgZGVmaW5pdGlvbnMgfFxuICAvLyB8ICAgICBUbyB1cGRhdGUgdGhlbSBlZGl0IHRoZSBkLnRzIGZpbGUgYW5kIHJ1biBcInlhcm4gcHJvcHR5cGVzXCIgICAgIHxcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4gIC8qKlxuICAgKiBBIHJlZiBmb3IgaW1wZXJhdGl2ZSBhY3Rpb25zLlxuICAgKiBJdCBjdXJyZW50bHkgb25seSBzdXBwb3J0cyBgZm9jdXNWaXNpYmxlKClgIGFjdGlvbi5cbiAgICovXG4gIGFjdGlvbjogcmVmVHlwZSxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKlxuICAgKiBVc2UgdGhhdCBwcm9wIHRvIHBhc3MgYSByZWYgdG8gdGhlIG5hdGl2ZSBidXR0b24gY29tcG9uZW50LlxuICAgKiBAZGVwcmVjYXRlZCBVc2UgYHJlZmAgaW5zdGVhZC5cbiAgICovXG4gIGJ1dHRvblJlZjogcmVmVHlwZSxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgcmlwcGxlcyB3aWxsIGJlIGNlbnRlcmVkLlxuICAgKiBUaGV5IHdvbid0IHN0YXJ0IGF0IHRoZSBjdXJzb3IgaW50ZXJhY3Rpb24gcG9zaXRpb24uXG4gICAqL1xuICBjZW50ZXJSaXBwbGU6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBUaGUgY29udGVudCBvZiB0aGUgY29tcG9uZW50LlxuICAgKi9cbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuXG4gIC8qKlxuICAgKiBPdmVycmlkZSBvciBleHRlbmQgdGhlIHN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAqIFNlZSBbQ1NTIEFQSV0oI2NzcykgYmVsb3cgZm9yIG1vcmUgZGV0YWlscy5cbiAgICovXG4gIGNsYXNzZXM6IFByb3BUeXBlcy5vYmplY3QsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogVGhlIGNvbXBvbmVudCB1c2VkIGZvciB0aGUgcm9vdCBub2RlLlxuICAgKiBFaXRoZXIgYSBzdHJpbmcgdG8gdXNlIGEgSFRNTCBlbGVtZW50IG9yIGEgY29tcG9uZW50LlxuICAgKi9cbiAgY29tcG9uZW50OiBlbGVtZW50VHlwZUFjY2VwdGluZ1JlZixcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgYmFzZSBidXR0b24gd2lsbCBiZSBkaXNhYmxlZC5cbiAgICovXG4gIGRpc2FibGVkOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgcmlwcGxlIGVmZmVjdCB3aWxsIGJlIGRpc2FibGVkLlxuICAgKlxuICAgKiDimqDvuI8gV2l0aG91dCBhIHJpcHBsZSB0aGVyZSBpcyBubyBzdHlsaW5nIGZvciA6Zm9jdXMtdmlzaWJsZSBieSBkZWZhdWx0LiBCZSBzdXJlXG4gICAqIHRvIGhpZ2hsaWdodCB0aGUgZWxlbWVudCBieSBhcHBseWluZyBzZXBhcmF0ZSBzdHlsZXMgd2l0aCB0aGUgYGZvY3VzVmlzaWJsZUNsYXNzTmFtZWAuXG4gICAqL1xuICBkaXNhYmxlUmlwcGxlOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgdG91Y2ggcmlwcGxlIGVmZmVjdCB3aWxsIGJlIGRpc2FibGVkLlxuICAgKi9cbiAgZGlzYWJsZVRvdWNoUmlwcGxlOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgYmFzZSBidXR0b24gd2lsbCBoYXZlIGEga2V5Ym9hcmQgZm9jdXMgcmlwcGxlLlxuICAgKi9cbiAgZm9jdXNSaXBwbGU6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBUaGlzIHByb3AgY2FuIGhlbHAgYSBwZXJzb24ga25vdyB3aGljaCBlbGVtZW50IGhhcyB0aGUga2V5Ym9hcmQgZm9jdXMuXG4gICAqIFRoZSBjbGFzcyBuYW1lIHdpbGwgYmUgYXBwbGllZCB3aGVuIHRoZSBlbGVtZW50IGdhaW4gdGhlIGZvY3VzIHRocm91Z2ggYSBrZXlib2FyZCBpbnRlcmFjdGlvbi5cbiAgICogSXQncyBhIHBvbHlmaWxsIGZvciB0aGUgW0NTUyA6Zm9jdXMtdmlzaWJsZSBzZWxlY3Rvcl0oaHR0cHM6Ly9kcmFmdHMuY3Nzd2cub3JnL3NlbGVjdG9ycy00LyN0aGUtZm9jdXMtdmlzaWJsZS1wc2V1ZG8pLlxuICAgKiBUaGUgcmF0aW9uYWxlIGZvciB1c2luZyB0aGlzIGZlYXR1cmUgW2lzIGV4cGxhaW5lZCBoZXJlXShodHRwczovL2dpdGh1Yi5jb20vV0lDRy9mb2N1cy12aXNpYmxlL2Jsb2IvbWFzdGVyL2V4cGxhaW5lci5tZCkuXG4gICAqIEEgW3BvbHlmaWxsIGNhbiBiZSB1c2VkXShodHRwczovL2dpdGh1Yi5jb20vV0lDRy9mb2N1cy12aXNpYmxlKSB0byBhcHBseSBhIGBmb2N1cy12aXNpYmxlYCBjbGFzcyB0byBvdGhlciBjb21wb25lbnRzXG4gICAqIGlmIG5lZWRlZC5cbiAgICovXG4gIGZvY3VzVmlzaWJsZUNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgaHJlZjogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgb25CbHVyOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgb25DbGljazogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIG9uRHJhZ0xlYXZlOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgb25Gb2N1czogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIHdoZW4gdGhlIGNvbXBvbmVudCBpcyBmb2N1c2VkIHdpdGggYSBrZXlib2FyZC5cbiAgICogV2UgdHJpZ2dlciBhIGBvbkZvY3VzYCBjYWxsYmFjayB0b28uXG4gICAqL1xuICBvbkZvY3VzVmlzaWJsZTogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIG9uS2V5RG93bjogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIG9uS2V5VXA6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBvbk1vdXNlRG93bjogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIG9uTW91c2VMZWF2ZTogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIG9uTW91c2VVcDogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIG9uVG91Y2hFbmQ6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBvblRvdWNoTW92ZTogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIG9uVG91Y2hTdGFydDogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIHRhYkluZGV4OiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMubnVtYmVyLCBQcm9wVHlwZXMuc3RyaW5nXSksXG5cbiAgLyoqXG4gICAqIFByb3BzIGFwcGxpZWQgdG8gdGhlIGBUb3VjaFJpcHBsZWAgZWxlbWVudC5cbiAgICovXG4gIFRvdWNoUmlwcGxlUHJvcHM6IFByb3BUeXBlcy5vYmplY3QsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIHR5cGU6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5vbmVPZihbJ2J1dHRvbicsICdyZXNldCcsICdzdWJtaXQnXSksIFByb3BUeXBlcy5zdHJpbmddKVxufSA6IHZvaWQgMDtcbmV4cG9ydCBkZWZhdWx0IHdpdGhTdHlsZXMoc3R5bGVzLCB7XG4gIG5hbWU6ICdNdWlCdXR0b25CYXNlJ1xufSkoQnV0dG9uQmFzZSk7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc1wiO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBjbHN4IGZyb20gJ2Nsc3gnO1xuaW1wb3J0IHsgY2hhaW5Qcm9wVHlwZXMgfSBmcm9tICdAbWF0ZXJpYWwtdWkvdXRpbHMnO1xuaW1wb3J0IHdpdGhTdHlsZXMgZnJvbSAnLi4vc3R5bGVzL3dpdGhTdHlsZXMnO1xuaW1wb3J0IHsgZmFkZSB9IGZyb20gJy4uL3N0eWxlcy9jb2xvck1hbmlwdWxhdG9yJztcbmltcG9ydCBCdXR0b25CYXNlIGZyb20gJy4uL0J1dHRvbkJhc2UnO1xuaW1wb3J0IGNhcGl0YWxpemUgZnJvbSAnLi4vdXRpbHMvY2FwaXRhbGl6ZSc7XG5leHBvcnQgdmFyIHN0eWxlcyA9IGZ1bmN0aW9uIHN0eWxlcyh0aGVtZSkge1xuICByZXR1cm4ge1xuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQuICovXG4gICAgcm9vdDoge1xuICAgICAgdGV4dEFsaWduOiAnY2VudGVyJyxcbiAgICAgIGZsZXg6ICcwIDAgYXV0bycsXG4gICAgICBmb250U2l6ZTogdGhlbWUudHlwb2dyYXBoeS5weFRvUmVtKDI0KSxcbiAgICAgIHBhZGRpbmc6IDEyLFxuICAgICAgYm9yZGVyUmFkaXVzOiAnNTAlJyxcbiAgICAgIG92ZXJmbG93OiAndmlzaWJsZScsXG4gICAgICAvLyBFeHBsaWNpdGx5IHNldCB0aGUgZGVmYXVsdCB2YWx1ZSB0byBzb2x2ZSBhIGJ1ZyBvbiBJRSAxMS5cbiAgICAgIGNvbG9yOiB0aGVtZS5wYWxldHRlLmFjdGlvbi5hY3RpdmUsXG4gICAgICB0cmFuc2l0aW9uOiB0aGVtZS50cmFuc2l0aW9ucy5jcmVhdGUoJ2JhY2tncm91bmQtY29sb3InLCB7XG4gICAgICAgIGR1cmF0aW9uOiB0aGVtZS50cmFuc2l0aW9ucy5kdXJhdGlvbi5zaG9ydGVzdFxuICAgICAgfSksXG4gICAgICAnJjpob3Zlcic6IHtcbiAgICAgICAgYmFja2dyb3VuZENvbG9yOiBmYWRlKHRoZW1lLnBhbGV0dGUuYWN0aW9uLmFjdGl2ZSwgdGhlbWUucGFsZXR0ZS5hY3Rpb24uaG92ZXJPcGFjaXR5KSxcbiAgICAgICAgLy8gUmVzZXQgb24gdG91Y2ggZGV2aWNlcywgaXQgZG9lc24ndCBhZGQgc3BlY2lmaWNpdHlcbiAgICAgICAgJ0BtZWRpYSAoaG92ZXI6IG5vbmUpJzoge1xuICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogJ3RyYW5zcGFyZW50J1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgJyYkZGlzYWJsZWQnOiB7XG4gICAgICAgIGJhY2tncm91bmRDb2xvcjogJ3RyYW5zcGFyZW50JyxcbiAgICAgICAgY29sb3I6IHRoZW1lLnBhbGV0dGUuYWN0aW9uLmRpc2FibGVkXG4gICAgICB9XG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGVkZ2U9XCJzdGFydFwiYC4gKi9cbiAgICBlZGdlU3RhcnQ6IHtcbiAgICAgIG1hcmdpbkxlZnQ6IC0xMixcbiAgICAgICckc2l6ZVNtYWxsJic6IHtcbiAgICAgICAgbWFyZ2luTGVmdDogLTNcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgZWRnZT1cImVuZFwiYC4gKi9cbiAgICBlZGdlRW5kOiB7XG4gICAgICBtYXJnaW5SaWdodDogLTEyLFxuICAgICAgJyRzaXplU21hbGwmJzoge1xuICAgICAgICBtYXJnaW5SaWdodDogLTNcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgY29sb3I9XCJpbmhlcml0XCJgLiAqL1xuICAgIGNvbG9ySW5oZXJpdDoge1xuICAgICAgY29sb3I6ICdpbmhlcml0J1xuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBjb2xvcj1cInByaW1hcnlcImAuICovXG4gICAgY29sb3JQcmltYXJ5OiB7XG4gICAgICBjb2xvcjogdGhlbWUucGFsZXR0ZS5wcmltYXJ5Lm1haW4sXG4gICAgICAnJjpob3Zlcic6IHtcbiAgICAgICAgYmFja2dyb3VuZENvbG9yOiBmYWRlKHRoZW1lLnBhbGV0dGUucHJpbWFyeS5tYWluLCB0aGVtZS5wYWxldHRlLmFjdGlvbi5ob3Zlck9wYWNpdHkpLFxuICAgICAgICAvLyBSZXNldCBvbiB0b3VjaCBkZXZpY2VzLCBpdCBkb2Vzbid0IGFkZCBzcGVjaWZpY2l0eVxuICAgICAgICAnQG1lZGlhIChob3Zlcjogbm9uZSknOiB7XG4gICAgICAgICAgYmFja2dyb3VuZENvbG9yOiAndHJhbnNwYXJlbnQnXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgY29sb3I9XCJzZWNvbmRhcnlcImAuICovXG4gICAgY29sb3JTZWNvbmRhcnk6IHtcbiAgICAgIGNvbG9yOiB0aGVtZS5wYWxldHRlLnNlY29uZGFyeS5tYWluLFxuICAgICAgJyY6aG92ZXInOiB7XG4gICAgICAgIGJhY2tncm91bmRDb2xvcjogZmFkZSh0aGVtZS5wYWxldHRlLnNlY29uZGFyeS5tYWluLCB0aGVtZS5wYWxldHRlLmFjdGlvbi5ob3Zlck9wYWNpdHkpLFxuICAgICAgICAvLyBSZXNldCBvbiB0b3VjaCBkZXZpY2VzLCBpdCBkb2Vzbid0IGFkZCBzcGVjaWZpY2l0eVxuICAgICAgICAnQG1lZGlhIChob3Zlcjogbm9uZSknOiB7XG4gICAgICAgICAgYmFja2dyb3VuZENvbG9yOiAndHJhbnNwYXJlbnQnXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuXG4gICAgLyogUHNldWRvLWNsYXNzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgZGlzYWJsZWQ9e3RydWV9YC4gKi9cbiAgICBkaXNhYmxlZDoge30sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBzaXplPVwic21hbGxcImAuICovXG4gICAgc2l6ZVNtYWxsOiB7XG4gICAgICBwYWRkaW5nOiAzLFxuICAgICAgZm9udFNpemU6IHRoZW1lLnR5cG9ncmFwaHkucHhUb1JlbSgxOClcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNoaWxkcmVuIGNvbnRhaW5lciBlbGVtZW50LiAqL1xuICAgIGxhYmVsOiB7XG4gICAgICB3aWR0aDogJzEwMCUnLFxuICAgICAgZGlzcGxheTogJ2ZsZXgnLFxuICAgICAgYWxpZ25JdGVtczogJ2luaGVyaXQnLFxuICAgICAganVzdGlmeUNvbnRlbnQ6ICdpbmhlcml0J1xuICAgIH1cbiAgfTtcbn07XG4vKipcbiAqIFJlZmVyIHRvIHRoZSBbSWNvbnNdKC9jb21wb25lbnRzL2ljb25zLykgc2VjdGlvbiBvZiB0aGUgZG9jdW1lbnRhdGlvblxuICogcmVnYXJkaW5nIHRoZSBhdmFpbGFibGUgaWNvbiBvcHRpb25zLlxuICovXG5cbnZhciBJY29uQnV0dG9uID0gLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gSWNvbkJ1dHRvbihwcm9wcywgcmVmKSB7XG4gIHZhciBfcHJvcHMkZWRnZSA9IHByb3BzLmVkZ2UsXG4gICAgICBlZGdlID0gX3Byb3BzJGVkZ2UgPT09IHZvaWQgMCA/IGZhbHNlIDogX3Byb3BzJGVkZ2UsXG4gICAgICBjaGlsZHJlbiA9IHByb3BzLmNoaWxkcmVuLFxuICAgICAgY2xhc3NlcyA9IHByb3BzLmNsYXNzZXMsXG4gICAgICBjbGFzc05hbWUgPSBwcm9wcy5jbGFzc05hbWUsXG4gICAgICBfcHJvcHMkY29sb3IgPSBwcm9wcy5jb2xvcixcbiAgICAgIGNvbG9yID0gX3Byb3BzJGNvbG9yID09PSB2b2lkIDAgPyAnZGVmYXVsdCcgOiBfcHJvcHMkY29sb3IsXG4gICAgICBfcHJvcHMkZGlzYWJsZWQgPSBwcm9wcy5kaXNhYmxlZCxcbiAgICAgIGRpc2FibGVkID0gX3Byb3BzJGRpc2FibGVkID09PSB2b2lkIDAgPyBmYWxzZSA6IF9wcm9wcyRkaXNhYmxlZCxcbiAgICAgIF9wcm9wcyRkaXNhYmxlRm9jdXNSaSA9IHByb3BzLmRpc2FibGVGb2N1c1JpcHBsZSxcbiAgICAgIGRpc2FibGVGb2N1c1JpcHBsZSA9IF9wcm9wcyRkaXNhYmxlRm9jdXNSaSA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcHJvcHMkZGlzYWJsZUZvY3VzUmksXG4gICAgICBfcHJvcHMkc2l6ZSA9IHByb3BzLnNpemUsXG4gICAgICBzaXplID0gX3Byb3BzJHNpemUgPT09IHZvaWQgMCA/ICdtZWRpdW0nIDogX3Byb3BzJHNpemUsXG4gICAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhwcm9wcywgW1wiZWRnZVwiLCBcImNoaWxkcmVuXCIsIFwiY2xhc3Nlc1wiLCBcImNsYXNzTmFtZVwiLCBcImNvbG9yXCIsIFwiZGlzYWJsZWRcIiwgXCJkaXNhYmxlRm9jdXNSaXBwbGVcIiwgXCJzaXplXCJdKTtcblxuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoQnV0dG9uQmFzZSwgX2V4dGVuZHMoe1xuICAgIGNsYXNzTmFtZTogY2xzeChjbGFzc2VzLnJvb3QsIGNsYXNzTmFtZSwgY29sb3IgIT09ICdkZWZhdWx0JyAmJiBjbGFzc2VzW1wiY29sb3JcIi5jb25jYXQoY2FwaXRhbGl6ZShjb2xvcikpXSwgZGlzYWJsZWQgJiYgY2xhc3Nlcy5kaXNhYmxlZCwgc2l6ZSA9PT0gXCJzbWFsbFwiICYmIGNsYXNzZXNbXCJzaXplXCIuY29uY2F0KGNhcGl0YWxpemUoc2l6ZSkpXSwge1xuICAgICAgJ3N0YXJ0JzogY2xhc3Nlcy5lZGdlU3RhcnQsXG4gICAgICAnZW5kJzogY2xhc3Nlcy5lZGdlRW5kXG4gICAgfVtlZGdlXSksXG4gICAgY2VudGVyUmlwcGxlOiB0cnVlLFxuICAgIGZvY3VzUmlwcGxlOiAhZGlzYWJsZUZvY3VzUmlwcGxlLFxuICAgIGRpc2FibGVkOiBkaXNhYmxlZCxcbiAgICByZWY6IHJlZlxuICB9LCBvdGhlciksIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwic3BhblwiLCB7XG4gICAgY2xhc3NOYW1lOiBjbGFzc2VzLmxhYmVsXG4gIH0sIGNoaWxkcmVuKSk7XG59KTtcbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IEljb25CdXR0b24ucHJvcFR5cGVzID0ge1xuICAvKipcbiAgICogVGhlIGljb24gZWxlbWVudC5cbiAgICovXG4gIGNoaWxkcmVuOiBjaGFpblByb3BUeXBlcyhQcm9wVHlwZXMubm9kZSwgZnVuY3Rpb24gKHByb3BzKSB7XG4gICAgdmFyIGZvdW5kID0gUmVhY3QuQ2hpbGRyZW4udG9BcnJheShwcm9wcy5jaGlsZHJlbikuc29tZShmdW5jdGlvbiAoY2hpbGQpIHtcbiAgICAgIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuaXNWYWxpZEVsZW1lbnQoY2hpbGQpICYmIGNoaWxkLnByb3BzLm9uQ2xpY2s7XG4gICAgfSk7XG5cbiAgICBpZiAoZm91bmQpIHtcbiAgICAgIHJldHVybiBuZXcgRXJyb3IoWydNYXRlcmlhbC1VSTogWW91IGFyZSBwcm92aWRpbmcgYW4gb25DbGljayBldmVudCBsaXN0ZW5lciAnICsgJ3RvIGEgY2hpbGQgb2YgYSBidXR0b24gZWxlbWVudC4nLCAnRmlyZWZveCB3aWxsIG5ldmVyIHRyaWdnZXIgdGhlIGV2ZW50LicsICdZb3Ugc2hvdWxkIG1vdmUgdGhlIG9uQ2xpY2sgbGlzdGVuZXIgdG8gdGhlIHBhcmVudCBidXR0b24gZWxlbWVudC4nLCAnaHR0cHM6Ly9naXRodWIuY29tL211aS1vcmcvbWF0ZXJpYWwtdWkvaXNzdWVzLzEzOTU3J10uam9pbignXFxuJykpO1xuICAgIH1cblxuICAgIHJldHVybiBudWxsO1xuICB9KSxcblxuICAvKipcbiAgICogT3ZlcnJpZGUgb3IgZXh0ZW5kIHRoZSBzdHlsZXMgYXBwbGllZCB0byB0aGUgY29tcG9uZW50LlxuICAgKiBTZWUgW0NTUyBBUEldKCNjc3MpIGJlbG93IGZvciBtb3JlIGRldGFpbHMuXG4gICAqL1xuICBjbGFzc2VzOiBQcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWQsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogVGhlIGNvbG9yIG9mIHRoZSBjb21wb25lbnQuIEl0IHN1cHBvcnRzIHRob3NlIHRoZW1lIGNvbG9ycyB0aGF0IG1ha2Ugc2Vuc2UgZm9yIHRoaXMgY29tcG9uZW50LlxuICAgKi9cbiAgY29sb3I6IFByb3BUeXBlcy5vbmVPZihbJ2RlZmF1bHQnLCAnaW5oZXJpdCcsICdwcmltYXJ5JywgJ3NlY29uZGFyeSddKSxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgYnV0dG9uIHdpbGwgYmUgZGlzYWJsZWQuXG4gICAqL1xuICBkaXNhYmxlZDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlICBrZXlib2FyZCBmb2N1cyByaXBwbGUgd2lsbCBiZSBkaXNhYmxlZC5cbiAgICovXG4gIGRpc2FibGVGb2N1c1JpcHBsZTogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIHJpcHBsZSBlZmZlY3Qgd2lsbCBiZSBkaXNhYmxlZC5cbiAgICovXG4gIGRpc2FibGVSaXBwbGU6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBJZiBnaXZlbiwgdXNlcyBhIG5lZ2F0aXZlIG1hcmdpbiB0byBjb3VudGVyYWN0IHRoZSBwYWRkaW5nIG9uIG9uZVxuICAgKiBzaWRlICh0aGlzIGlzIG9mdGVuIGhlbHBmdWwgZm9yIGFsaWduaW5nIHRoZSBsZWZ0IG9yIHJpZ2h0XG4gICAqIHNpZGUgb2YgdGhlIGljb24gd2l0aCBjb250ZW50IGFib3ZlIG9yIGJlbG93LCB3aXRob3V0IHJ1aW5pbmcgdGhlIGJvcmRlclxuICAgKiBzaXplIGFuZCBzaGFwZSkuXG4gICAqL1xuICBlZGdlOiBQcm9wVHlwZXMub25lT2YoWydzdGFydCcsICdlbmQnLCBmYWxzZV0pLFxuXG4gIC8qKlxuICAgKiBUaGUgc2l6ZSBvZiB0aGUgYnV0dG9uLlxuICAgKiBgc21hbGxgIGlzIGVxdWl2YWxlbnQgdG8gdGhlIGRlbnNlIGJ1dHRvbiBzdHlsaW5nLlxuICAgKi9cbiAgc2l6ZTogUHJvcFR5cGVzLm9uZU9mKFsnc21hbGwnLCAnbWVkaXVtJ10pXG59IDogdm9pZCAwO1xuZXhwb3J0IGRlZmF1bHQgd2l0aFN0eWxlcyhzdHlsZXMsIHtcbiAgbmFtZTogJ011aUljb25CdXR0b24nXG59KShJY29uQnV0dG9uKTsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfc2xpY2VkVG9BcnJheSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vc2xpY2VkVG9BcnJheVwiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNcIjtcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgY2xzeCBmcm9tICdjbHN4JztcbmltcG9ydCB7IHJlZlR5cGUgfSBmcm9tICdAbWF0ZXJpYWwtdWkvdXRpbHMnO1xuaW1wb3J0IHVzZUNvbnRyb2xsZWQgZnJvbSAnLi4vdXRpbHMvdXNlQ29udHJvbGxlZCc7XG5pbXBvcnQgdXNlRm9ybUNvbnRyb2wgZnJvbSAnLi4vRm9ybUNvbnRyb2wvdXNlRm9ybUNvbnRyb2wnO1xuaW1wb3J0IHdpdGhTdHlsZXMgZnJvbSAnLi4vc3R5bGVzL3dpdGhTdHlsZXMnO1xuaW1wb3J0IEljb25CdXR0b24gZnJvbSAnLi4vSWNvbkJ1dHRvbic7XG5leHBvcnQgdmFyIHN0eWxlcyA9IHtcbiAgcm9vdDoge1xuICAgIHBhZGRpbmc6IDlcbiAgfSxcbiAgY2hlY2tlZDoge30sXG4gIGRpc2FibGVkOiB7fSxcbiAgaW5wdXQ6IHtcbiAgICBjdXJzb3I6ICdpbmhlcml0JyxcbiAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICBvcGFjaXR5OiAwLFxuICAgIHdpZHRoOiAnMTAwJScsXG4gICAgaGVpZ2h0OiAnMTAwJScsXG4gICAgdG9wOiAwLFxuICAgIGxlZnQ6IDAsXG4gICAgbWFyZ2luOiAwLFxuICAgIHBhZGRpbmc6IDAsXG4gICAgekluZGV4OiAxXG4gIH1cbn07XG4vKipcbiAqIEBpZ25vcmUgLSBpbnRlcm5hbCBjb21wb25lbnQuXG4gKi9cblxudmFyIFN3aXRjaEJhc2UgPSAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBTd2l0Y2hCYXNlKHByb3BzLCByZWYpIHtcbiAgdmFyIGF1dG9Gb2N1cyA9IHByb3BzLmF1dG9Gb2N1cyxcbiAgICAgIGNoZWNrZWRQcm9wID0gcHJvcHMuY2hlY2tlZCxcbiAgICAgIGNoZWNrZWRJY29uID0gcHJvcHMuY2hlY2tlZEljb24sXG4gICAgICBjbGFzc2VzID0gcHJvcHMuY2xhc3NlcyxcbiAgICAgIGNsYXNzTmFtZSA9IHByb3BzLmNsYXNzTmFtZSxcbiAgICAgIGRlZmF1bHRDaGVja2VkID0gcHJvcHMuZGVmYXVsdENoZWNrZWQsXG4gICAgICBkaXNhYmxlZFByb3AgPSBwcm9wcy5kaXNhYmxlZCxcbiAgICAgIGljb24gPSBwcm9wcy5pY29uLFxuICAgICAgaWQgPSBwcm9wcy5pZCxcbiAgICAgIGlucHV0UHJvcHMgPSBwcm9wcy5pbnB1dFByb3BzLFxuICAgICAgaW5wdXRSZWYgPSBwcm9wcy5pbnB1dFJlZixcbiAgICAgIG5hbWUgPSBwcm9wcy5uYW1lLFxuICAgICAgb25CbHVyID0gcHJvcHMub25CbHVyLFxuICAgICAgb25DaGFuZ2UgPSBwcm9wcy5vbkNoYW5nZSxcbiAgICAgIG9uRm9jdXMgPSBwcm9wcy5vbkZvY3VzLFxuICAgICAgcmVhZE9ubHkgPSBwcm9wcy5yZWFkT25seSxcbiAgICAgIHJlcXVpcmVkID0gcHJvcHMucmVxdWlyZWQsXG4gICAgICB0YWJJbmRleCA9IHByb3BzLnRhYkluZGV4LFxuICAgICAgdHlwZSA9IHByb3BzLnR5cGUsXG4gICAgICB2YWx1ZSA9IHByb3BzLnZhbHVlLFxuICAgICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMocHJvcHMsIFtcImF1dG9Gb2N1c1wiLCBcImNoZWNrZWRcIiwgXCJjaGVja2VkSWNvblwiLCBcImNsYXNzZXNcIiwgXCJjbGFzc05hbWVcIiwgXCJkZWZhdWx0Q2hlY2tlZFwiLCBcImRpc2FibGVkXCIsIFwiaWNvblwiLCBcImlkXCIsIFwiaW5wdXRQcm9wc1wiLCBcImlucHV0UmVmXCIsIFwibmFtZVwiLCBcIm9uQmx1clwiLCBcIm9uQ2hhbmdlXCIsIFwib25Gb2N1c1wiLCBcInJlYWRPbmx5XCIsIFwicmVxdWlyZWRcIiwgXCJ0YWJJbmRleFwiLCBcInR5cGVcIiwgXCJ2YWx1ZVwiXSk7XG5cbiAgdmFyIF91c2VDb250cm9sbGVkID0gdXNlQ29udHJvbGxlZCh7XG4gICAgY29udHJvbGxlZDogY2hlY2tlZFByb3AsXG4gICAgZGVmYXVsdDogQm9vbGVhbihkZWZhdWx0Q2hlY2tlZCksXG4gICAgbmFtZTogJ1N3aXRjaEJhc2UnLFxuICAgIHN0YXRlOiAnY2hlY2tlZCdcbiAgfSksXG4gICAgICBfdXNlQ29udHJvbGxlZDIgPSBfc2xpY2VkVG9BcnJheShfdXNlQ29udHJvbGxlZCwgMiksXG4gICAgICBjaGVja2VkID0gX3VzZUNvbnRyb2xsZWQyWzBdLFxuICAgICAgc2V0Q2hlY2tlZFN0YXRlID0gX3VzZUNvbnRyb2xsZWQyWzFdO1xuXG4gIHZhciBtdWlGb3JtQ29udHJvbCA9IHVzZUZvcm1Db250cm9sKCk7XG5cbiAgdmFyIGhhbmRsZUZvY3VzID0gZnVuY3Rpb24gaGFuZGxlRm9jdXMoZXZlbnQpIHtcbiAgICBpZiAob25Gb2N1cykge1xuICAgICAgb25Gb2N1cyhldmVudCk7XG4gICAgfVxuXG4gICAgaWYgKG11aUZvcm1Db250cm9sICYmIG11aUZvcm1Db250cm9sLm9uRm9jdXMpIHtcbiAgICAgIG11aUZvcm1Db250cm9sLm9uRm9jdXMoZXZlbnQpO1xuICAgIH1cbiAgfTtcblxuICB2YXIgaGFuZGxlQmx1ciA9IGZ1bmN0aW9uIGhhbmRsZUJsdXIoZXZlbnQpIHtcbiAgICBpZiAob25CbHVyKSB7XG4gICAgICBvbkJsdXIoZXZlbnQpO1xuICAgIH1cblxuICAgIGlmIChtdWlGb3JtQ29udHJvbCAmJiBtdWlGb3JtQ29udHJvbC5vbkJsdXIpIHtcbiAgICAgIG11aUZvcm1Db250cm9sLm9uQmx1cihldmVudCk7XG4gICAgfVxuICB9O1xuXG4gIHZhciBoYW5kbGVJbnB1dENoYW5nZSA9IGZ1bmN0aW9uIGhhbmRsZUlucHV0Q2hhbmdlKGV2ZW50KSB7XG4gICAgdmFyIG5ld0NoZWNrZWQgPSBldmVudC50YXJnZXQuY2hlY2tlZDtcbiAgICBzZXRDaGVja2VkU3RhdGUobmV3Q2hlY2tlZCk7XG5cbiAgICBpZiAob25DaGFuZ2UpIHtcbiAgICAgIC8vIFRPRE8gdjU6IHJlbW92ZSB0aGUgc2Vjb25kIGFyZ3VtZW50LlxuICAgICAgb25DaGFuZ2UoZXZlbnQsIG5ld0NoZWNrZWQpO1xuICAgIH1cbiAgfTtcblxuICB2YXIgZGlzYWJsZWQgPSBkaXNhYmxlZFByb3A7XG5cbiAgaWYgKG11aUZvcm1Db250cm9sKSB7XG4gICAgaWYgKHR5cGVvZiBkaXNhYmxlZCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIGRpc2FibGVkID0gbXVpRm9ybUNvbnRyb2wuZGlzYWJsZWQ7XG4gICAgfVxuICB9XG5cbiAgdmFyIGhhc0xhYmVsRm9yID0gdHlwZSA9PT0gJ2NoZWNrYm94JyB8fCB0eXBlID09PSAncmFkaW8nO1xuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoSWNvbkJ1dHRvbiwgX2V4dGVuZHMoe1xuICAgIGNvbXBvbmVudDogXCJzcGFuXCIsXG4gICAgY2xhc3NOYW1lOiBjbHN4KGNsYXNzZXMucm9vdCwgY2xhc3NOYW1lLCBjaGVja2VkICYmIGNsYXNzZXMuY2hlY2tlZCwgZGlzYWJsZWQgJiYgY2xhc3Nlcy5kaXNhYmxlZCksXG4gICAgZGlzYWJsZWQ6IGRpc2FibGVkLFxuICAgIHRhYkluZGV4OiBudWxsLFxuICAgIHJvbGU6IHVuZGVmaW5lZCxcbiAgICBvbkZvY3VzOiBoYW5kbGVGb2N1cyxcbiAgICBvbkJsdXI6IGhhbmRsZUJsdXIsXG4gICAgcmVmOiByZWZcbiAgfSwgb3RoZXIpLCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcImlucHV0XCIsIF9leHRlbmRzKHtcbiAgICBhdXRvRm9jdXM6IGF1dG9Gb2N1cyxcbiAgICBjaGVja2VkOiBjaGVja2VkUHJvcCxcbiAgICBkZWZhdWx0Q2hlY2tlZDogZGVmYXVsdENoZWNrZWQsXG4gICAgY2xhc3NOYW1lOiBjbGFzc2VzLmlucHV0LFxuICAgIGRpc2FibGVkOiBkaXNhYmxlZCxcbiAgICBpZDogaGFzTGFiZWxGb3IgJiYgaWQsXG4gICAgbmFtZTogbmFtZSxcbiAgICBvbkNoYW5nZTogaGFuZGxlSW5wdXRDaGFuZ2UsXG4gICAgcmVhZE9ubHk6IHJlYWRPbmx5LFxuICAgIHJlZjogaW5wdXRSZWYsXG4gICAgcmVxdWlyZWQ6IHJlcXVpcmVkLFxuICAgIHRhYkluZGV4OiB0YWJJbmRleCxcbiAgICB0eXBlOiB0eXBlLFxuICAgIHZhbHVlOiB2YWx1ZVxuICB9LCBpbnB1dFByb3BzKSksIGNoZWNrZWQgPyBjaGVja2VkSWNvbiA6IGljb24pO1xufSk7IC8vIE5COiBJZiBjaGFuZ2VkLCBwbGVhc2UgdXBkYXRlIENoZWNrYm94LCBTd2l0Y2ggYW5kIFJhZGlvXG4vLyBzbyB0aGF0IHRoZSBBUEkgZG9jdW1lbnRhdGlvbiBpcyB1cGRhdGVkLlxuXG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBTd2l0Y2hCYXNlLnByb3BUeXBlcyA9IHtcbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGBpbnB1dGAgZWxlbWVudCB3aWxsIGJlIGZvY3VzZWQgZHVyaW5nIHRoZSBmaXJzdCBtb3VudC5cbiAgICovXG4gIGF1dG9Gb2N1czogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGNvbXBvbmVudCBpcyBjaGVja2VkLlxuICAgKi9cbiAgY2hlY2tlZDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIFRoZSBpY29uIHRvIGRpc3BsYXkgd2hlbiB0aGUgY29tcG9uZW50IGlzIGNoZWNrZWQuXG4gICAqL1xuICBjaGVja2VkSWNvbjogUHJvcFR5cGVzLm5vZGUuaXNSZXF1aXJlZCxcblxuICAvKipcbiAgICogT3ZlcnJpZGUgb3IgZXh0ZW5kIHRoZSBzdHlsZXMgYXBwbGllZCB0byB0aGUgY29tcG9uZW50LlxuICAgKiBTZWUgW0NTUyBBUEldKCNjc3MpIGJlbG93IGZvciBtb3JlIGRldGFpbHMuXG4gICAqL1xuICBjbGFzc2VzOiBQcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWQsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgZGVmYXVsdENoZWNrZWQ6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBzd2l0Y2ggd2lsbCBiZSBkaXNhYmxlZC5cbiAgICovXG4gIGRpc2FibGVkOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogVGhlIGljb24gdG8gZGlzcGxheSB3aGVuIHRoZSBjb21wb25lbnQgaXMgdW5jaGVja2VkLlxuICAgKi9cbiAgaWNvbjogUHJvcFR5cGVzLm5vZGUuaXNSZXF1aXJlZCxcblxuICAvKipcbiAgICogVGhlIGlkIG9mIHRoZSBgaW5wdXRgIGVsZW1lbnQuXG4gICAqL1xuICBpZDogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogW0F0dHJpYnV0ZXNdKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0hUTUwvRWxlbWVudC9pbnB1dCNBdHRyaWJ1dGVzKSBhcHBsaWVkIHRvIHRoZSBgaW5wdXRgIGVsZW1lbnQuXG4gICAqL1xuICBpbnB1dFByb3BzOiBQcm9wVHlwZXMub2JqZWN0LFxuXG4gIC8qKlxuICAgKiBQYXNzIGEgcmVmIHRvIHRoZSBgaW5wdXRgIGVsZW1lbnQuXG4gICAqL1xuICBpbnB1dFJlZjogcmVmVHlwZSxcblxuICAvKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBuYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBvbkJsdXI6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCB3aGVuIHRoZSBzdGF0ZSBpcyBjaGFuZ2VkLlxuICAgKlxuICAgKiBAcGFyYW0ge29iamVjdH0gZXZlbnQgVGhlIGV2ZW50IHNvdXJjZSBvZiB0aGUgY2FsbGJhY2suXG4gICAqIFlvdSBjYW4gcHVsbCBvdXQgdGhlIG5ldyBjaGVja2VkIHN0YXRlIGJ5IGFjY2Vzc2luZyBgZXZlbnQudGFyZ2V0LmNoZWNrZWRgIChib29sZWFuKS5cbiAgICovXG4gIG9uQ2hhbmdlOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgb25Gb2N1czogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIEl0IHByZXZlbnRzIHRoZSB1c2VyIGZyb20gY2hhbmdpbmcgdGhlIHZhbHVlIG9mIHRoZSBmaWVsZFxuICAgKiAobm90IGZyb20gaW50ZXJhY3Rpbmcgd2l0aCB0aGUgZmllbGQpLlxuICAgKi9cbiAgcmVhZE9ubHk6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBgaW5wdXRgIGVsZW1lbnQgd2lsbCBiZSByZXF1aXJlZC5cbiAgICovXG4gIHJlcXVpcmVkOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgdGFiSW5kZXg6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5udW1iZXIsIFByb3BUeXBlcy5zdHJpbmddKSxcblxuICAvKipcbiAgICogVGhlIGlucHV0IGNvbXBvbmVudCBwcm9wIGB0eXBlYC5cbiAgICovXG4gIHR5cGU6IFByb3BUeXBlcy5zdHJpbmcuaXNSZXF1aXJlZCxcblxuICAvKipcbiAgICogVGhlIHZhbHVlIG9mIHRoZSBjb21wb25lbnQuXG4gICAqL1xuICB2YWx1ZTogUHJvcFR5cGVzLmFueVxufSA6IHZvaWQgMDtcbmV4cG9ydCBkZWZhdWx0IHdpdGhTdHlsZXMoc3R5bGVzLCB7XG4gIG5hbWU6ICdQcml2YXRlU3dpdGNoQmFzZSdcbn0pKFN3aXRjaEJhc2UpOyIsImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBjcmVhdGVTdmdJY29uIGZyb20gJy4uLy4uL3V0aWxzL2NyZWF0ZVN2Z0ljb24nO1xuLyoqXG4gKiBAaWdub3JlIC0gaW50ZXJuYWwgY29tcG9uZW50LlxuICovXG5cbmV4cG9ydCBkZWZhdWx0IGNyZWF0ZVN2Z0ljb24oIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwicGF0aFwiLCB7XG4gIGQ6IFwiTTE5IDV2MTRINVY1aDE0bTAtMkg1Yy0xLjEgMC0yIC45LTIgMnYxNGMwIDEuMS45IDIgMiAyaDE0YzEuMSAwIDItLjkgMi0yVjVjMC0xLjEtLjktMi0yLTJ6XCJcbn0pLCAnQ2hlY2tCb3hPdXRsaW5lQmxhbmsnKTsiLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgY3JlYXRlU3ZnSWNvbiBmcm9tICcuLi8uLi91dGlscy9jcmVhdGVTdmdJY29uJztcbi8qKlxuICogQGlnbm9yZSAtIGludGVybmFsIGNvbXBvbmVudC5cbiAqL1xuXG5leHBvcnQgZGVmYXVsdCBjcmVhdGVTdmdJY29uKCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcInBhdGhcIiwge1xuICBkOiBcIk0xOSAzSDVjLTEuMTEgMC0yIC45LTIgMnYxNGMwIDEuMS44OSAyIDIgMmgxNGMxLjExIDAgMi0uOSAyLTJWNWMwLTEuMS0uODktMi0yLTJ6bS05IDE0bC01LTUgMS40MS0xLjQxTDEwIDE0LjE3bDcuNTktNy41OUwxOSA4bC05IDl6XCJcbn0pLCAnQ2hlY2tCb3gnKTsiLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgY3JlYXRlU3ZnSWNvbiBmcm9tICcuLi8uLi91dGlscy9jcmVhdGVTdmdJY29uJztcbi8qKlxuICogQGlnbm9yZSAtIGludGVybmFsIGNvbXBvbmVudC5cbiAqL1xuXG5leHBvcnQgZGVmYXVsdCBjcmVhdGVTdmdJY29uKCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcInBhdGhcIiwge1xuICBkOiBcIk0xOSAzSDVjLTEuMSAwLTIgLjktMiAydjE0YzAgMS4xLjkgMiAyIDJoMTRjMS4xIDAgMi0uOSAyLTJWNWMwLTEuMS0uOS0yLTItMnptLTIgMTBIN3YtMmgxMHYyelwiXG59KSwgJ0luZGV0ZXJtaW5hdGVDaGVja0JveCcpOyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNcIjtcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgY2xzeCBmcm9tICdjbHN4JztcbmltcG9ydCB7IHJlZlR5cGUgfSBmcm9tICdAbWF0ZXJpYWwtdWkvdXRpbHMnO1xuaW1wb3J0IFN3aXRjaEJhc2UgZnJvbSAnLi4vaW50ZXJuYWwvU3dpdGNoQmFzZSc7XG5pbXBvcnQgQ2hlY2tCb3hPdXRsaW5lQmxhbmtJY29uIGZyb20gJy4uL2ludGVybmFsL3N2Zy1pY29ucy9DaGVja0JveE91dGxpbmVCbGFuayc7XG5pbXBvcnQgQ2hlY2tCb3hJY29uIGZyb20gJy4uL2ludGVybmFsL3N2Zy1pY29ucy9DaGVja0JveCc7XG5pbXBvcnQgeyBmYWRlIH0gZnJvbSAnLi4vc3R5bGVzL2NvbG9yTWFuaXB1bGF0b3InO1xuaW1wb3J0IEluZGV0ZXJtaW5hdGVDaGVja0JveEljb24gZnJvbSAnLi4vaW50ZXJuYWwvc3ZnLWljb25zL0luZGV0ZXJtaW5hdGVDaGVja0JveCc7XG5pbXBvcnQgY2FwaXRhbGl6ZSBmcm9tICcuLi91dGlscy9jYXBpdGFsaXplJztcbmltcG9ydCB3aXRoU3R5bGVzIGZyb20gJy4uL3N0eWxlcy93aXRoU3R5bGVzJztcbmV4cG9ydCB2YXIgc3R5bGVzID0gZnVuY3Rpb24gc3R5bGVzKHRoZW1lKSB7XG4gIHJldHVybiB7XG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudC4gKi9cbiAgICByb290OiB7XG4gICAgICBjb2xvcjogdGhlbWUucGFsZXR0ZS50ZXh0LnNlY29uZGFyeVxuICAgIH0sXG5cbiAgICAvKiBQc2V1ZG8tY2xhc3MgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBjaGVja2VkPXt0cnVlfWAuICovXG4gICAgY2hlY2tlZDoge30sXG5cbiAgICAvKiBQc2V1ZG8tY2xhc3MgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBkaXNhYmxlZD17dHJ1ZX1gLiAqL1xuICAgIGRpc2FibGVkOiB7fSxcblxuICAgIC8qIFBzZXVkby1jbGFzcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGluZGV0ZXJtaW5hdGU9e3RydWV9YC4gKi9cbiAgICBpbmRldGVybWluYXRlOiB7fSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGNvbG9yPVwicHJpbWFyeVwiYC4gKi9cbiAgICBjb2xvclByaW1hcnk6IHtcbiAgICAgICcmJGNoZWNrZWQnOiB7XG4gICAgICAgIGNvbG9yOiB0aGVtZS5wYWxldHRlLnByaW1hcnkubWFpbixcbiAgICAgICAgJyY6aG92ZXInOiB7XG4gICAgICAgICAgYmFja2dyb3VuZENvbG9yOiBmYWRlKHRoZW1lLnBhbGV0dGUucHJpbWFyeS5tYWluLCB0aGVtZS5wYWxldHRlLmFjdGlvbi5ob3Zlck9wYWNpdHkpLFxuICAgICAgICAgIC8vIFJlc2V0IG9uIHRvdWNoIGRldmljZXMsIGl0IGRvZXNuJ3QgYWRkIHNwZWNpZmljaXR5XG4gICAgICAgICAgJ0BtZWRpYSAoaG92ZXI6IG5vbmUpJzoge1xuICAgICAgICAgICAgYmFja2dyb3VuZENvbG9yOiAndHJhbnNwYXJlbnQnXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgJyYkZGlzYWJsZWQnOiB7XG4gICAgICAgIGNvbG9yOiB0aGVtZS5wYWxldHRlLmFjdGlvbi5kaXNhYmxlZFxuICAgICAgfVxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBjb2xvcj1cInNlY29uZGFyeVwiYC4gKi9cbiAgICBjb2xvclNlY29uZGFyeToge1xuICAgICAgJyYkY2hlY2tlZCc6IHtcbiAgICAgICAgY29sb3I6IHRoZW1lLnBhbGV0dGUuc2Vjb25kYXJ5Lm1haW4sXG4gICAgICAgICcmOmhvdmVyJzoge1xuICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogZmFkZSh0aGVtZS5wYWxldHRlLnNlY29uZGFyeS5tYWluLCB0aGVtZS5wYWxldHRlLmFjdGlvbi5ob3Zlck9wYWNpdHkpLFxuICAgICAgICAgIC8vIFJlc2V0IG9uIHRvdWNoIGRldmljZXMsIGl0IGRvZXNuJ3QgYWRkIHNwZWNpZmljaXR5XG4gICAgICAgICAgJ0BtZWRpYSAoaG92ZXI6IG5vbmUpJzoge1xuICAgICAgICAgICAgYmFja2dyb3VuZENvbG9yOiAndHJhbnNwYXJlbnQnXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgJyYkZGlzYWJsZWQnOiB7XG4gICAgICAgIGNvbG9yOiB0aGVtZS5wYWxldHRlLmFjdGlvbi5kaXNhYmxlZFxuICAgICAgfVxuICAgIH1cbiAgfTtcbn07XG52YXIgZGVmYXVsdENoZWNrZWRJY29uID0gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoQ2hlY2tCb3hJY29uLCBudWxsKTtcbnZhciBkZWZhdWx0SWNvbiA9IC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KENoZWNrQm94T3V0bGluZUJsYW5rSWNvbiwgbnVsbCk7XG52YXIgZGVmYXVsdEluZGV0ZXJtaW5hdGVJY29uID0gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoSW5kZXRlcm1pbmF0ZUNoZWNrQm94SWNvbiwgbnVsbCk7XG52YXIgQ2hlY2tib3ggPSAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBDaGVja2JveChwcm9wcywgcmVmKSB7XG4gIHZhciBfcHJvcHMkY2hlY2tlZEljb24gPSBwcm9wcy5jaGVja2VkSWNvbixcbiAgICAgIGNoZWNrZWRJY29uID0gX3Byb3BzJGNoZWNrZWRJY29uID09PSB2b2lkIDAgPyBkZWZhdWx0Q2hlY2tlZEljb24gOiBfcHJvcHMkY2hlY2tlZEljb24sXG4gICAgICBjbGFzc2VzID0gcHJvcHMuY2xhc3NlcyxcbiAgICAgIF9wcm9wcyRjb2xvciA9IHByb3BzLmNvbG9yLFxuICAgICAgY29sb3IgPSBfcHJvcHMkY29sb3IgPT09IHZvaWQgMCA/ICdzZWNvbmRhcnknIDogX3Byb3BzJGNvbG9yLFxuICAgICAgX3Byb3BzJGljb24gPSBwcm9wcy5pY29uLFxuICAgICAgaWNvblByb3AgPSBfcHJvcHMkaWNvbiA9PT0gdm9pZCAwID8gZGVmYXVsdEljb24gOiBfcHJvcHMkaWNvbixcbiAgICAgIF9wcm9wcyRpbmRldGVybWluYXRlID0gcHJvcHMuaW5kZXRlcm1pbmF0ZSxcbiAgICAgIGluZGV0ZXJtaW5hdGUgPSBfcHJvcHMkaW5kZXRlcm1pbmF0ZSA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcHJvcHMkaW5kZXRlcm1pbmF0ZSxcbiAgICAgIF9wcm9wcyRpbmRldGVybWluYXRlSSA9IHByb3BzLmluZGV0ZXJtaW5hdGVJY29uLFxuICAgICAgaW5kZXRlcm1pbmF0ZUljb25Qcm9wID0gX3Byb3BzJGluZGV0ZXJtaW5hdGVJID09PSB2b2lkIDAgPyBkZWZhdWx0SW5kZXRlcm1pbmF0ZUljb24gOiBfcHJvcHMkaW5kZXRlcm1pbmF0ZUksXG4gICAgICBpbnB1dFByb3BzID0gcHJvcHMuaW5wdXRQcm9wcyxcbiAgICAgIF9wcm9wcyRzaXplID0gcHJvcHMuc2l6ZSxcbiAgICAgIHNpemUgPSBfcHJvcHMkc2l6ZSA9PT0gdm9pZCAwID8gJ21lZGl1bScgOiBfcHJvcHMkc2l6ZSxcbiAgICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKHByb3BzLCBbXCJjaGVja2VkSWNvblwiLCBcImNsYXNzZXNcIiwgXCJjb2xvclwiLCBcImljb25cIiwgXCJpbmRldGVybWluYXRlXCIsIFwiaW5kZXRlcm1pbmF0ZUljb25cIiwgXCJpbnB1dFByb3BzXCIsIFwic2l6ZVwiXSk7XG5cbiAgdmFyIGljb24gPSBpbmRldGVybWluYXRlID8gaW5kZXRlcm1pbmF0ZUljb25Qcm9wIDogaWNvblByb3A7XG4gIHZhciBpbmRldGVybWluYXRlSWNvbiA9IGluZGV0ZXJtaW5hdGUgPyBpbmRldGVybWluYXRlSWNvblByb3AgOiBjaGVja2VkSWNvbjtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFN3aXRjaEJhc2UsIF9leHRlbmRzKHtcbiAgICB0eXBlOiBcImNoZWNrYm94XCIsXG4gICAgY2xhc3Nlczoge1xuICAgICAgcm9vdDogY2xzeChjbGFzc2VzLnJvb3QsIGNsYXNzZXNbXCJjb2xvclwiLmNvbmNhdChjYXBpdGFsaXplKGNvbG9yKSldLCBpbmRldGVybWluYXRlICYmIGNsYXNzZXMuaW5kZXRlcm1pbmF0ZSksXG4gICAgICBjaGVja2VkOiBjbGFzc2VzLmNoZWNrZWQsXG4gICAgICBkaXNhYmxlZDogY2xhc3Nlcy5kaXNhYmxlZFxuICAgIH0sXG4gICAgY29sb3I6IGNvbG9yLFxuICAgIGlucHV0UHJvcHM6IF9leHRlbmRzKHtcbiAgICAgICdkYXRhLWluZGV0ZXJtaW5hdGUnOiBpbmRldGVybWluYXRlXG4gICAgfSwgaW5wdXRQcm9wcyksXG4gICAgaWNvbjogLyojX19QVVJFX18qL1JlYWN0LmNsb25lRWxlbWVudChpY29uLCB7XG4gICAgICBmb250U2l6ZTogaWNvbi5wcm9wcy5mb250U2l6ZSA9PT0gdW5kZWZpbmVkICYmIHNpemUgPT09IFwic21hbGxcIiA/IHNpemUgOiBpY29uLnByb3BzLmZvbnRTaXplXG4gICAgfSksXG4gICAgY2hlY2tlZEljb246IC8qI19fUFVSRV9fKi9SZWFjdC5jbG9uZUVsZW1lbnQoaW5kZXRlcm1pbmF0ZUljb24sIHtcbiAgICAgIGZvbnRTaXplOiBpbmRldGVybWluYXRlSWNvbi5wcm9wcy5mb250U2l6ZSA9PT0gdW5kZWZpbmVkICYmIHNpemUgPT09IFwic21hbGxcIiA/IHNpemUgOiBpbmRldGVybWluYXRlSWNvbi5wcm9wcy5mb250U2l6ZVxuICAgIH0pLFxuICAgIHJlZjogcmVmXG4gIH0sIG90aGVyKSk7XG59KTtcbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IENoZWNrYm94LnByb3BUeXBlcyA9IHtcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gV2FybmluZyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAvLyB8IFRoZXNlIFByb3BUeXBlcyBhcmUgZ2VuZXJhdGVkIGZyb20gdGhlIFR5cGVTY3JpcHQgdHlwZSBkZWZpbml0aW9ucyB8XG4gIC8vIHwgICAgIFRvIHVwZGF0ZSB0aGVtIGVkaXQgdGhlIGQudHMgZmlsZSBhbmQgcnVuIFwieWFybiBwcm9wdHlwZXNcIiAgICAgfFxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGNvbXBvbmVudCBpcyBjaGVja2VkLlxuICAgKi9cbiAgY2hlY2tlZDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIFRoZSBpY29uIHRvIGRpc3BsYXkgd2hlbiB0aGUgY29tcG9uZW50IGlzIGNoZWNrZWQuXG4gICAqL1xuICBjaGVja2VkSWNvbjogUHJvcFR5cGVzLm5vZGUsXG5cbiAgLyoqXG4gICAqIE92ZXJyaWRlIG9yIGV4dGVuZCB0aGUgc3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICogU2VlIFtDU1MgQVBJXSgjY3NzKSBiZWxvdyBmb3IgbW9yZSBkZXRhaWxzLlxuICAgKi9cbiAgY2xhc3NlczogUHJvcFR5cGVzLm9iamVjdCxcblxuICAvKipcbiAgICogVGhlIGNvbG9yIG9mIHRoZSBjb21wb25lbnQuIEl0IHN1cHBvcnRzIHRob3NlIHRoZW1lIGNvbG9ycyB0aGF0IG1ha2Ugc2Vuc2UgZm9yIHRoaXMgY29tcG9uZW50LlxuICAgKi9cbiAgY29sb3I6IFByb3BUeXBlcy5vbmVPZihbJ2RlZmF1bHQnLCAncHJpbWFyeScsICdzZWNvbmRhcnknXSksXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGNoZWNrYm94IHdpbGwgYmUgZGlzYWJsZWQuXG4gICAqL1xuICBkaXNhYmxlZDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIHJpcHBsZSBlZmZlY3Qgd2lsbCBiZSBkaXNhYmxlZC5cbiAgICovXG4gIGRpc2FibGVSaXBwbGU6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBUaGUgaWNvbiB0byBkaXNwbGF5IHdoZW4gdGhlIGNvbXBvbmVudCBpcyB1bmNoZWNrZWQuXG4gICAqL1xuICBpY29uOiBQcm9wVHlwZXMubm9kZSxcblxuICAvKipcbiAgICogVGhlIGlkIG9mIHRoZSBgaW5wdXRgIGVsZW1lbnQuXG4gICAqL1xuICBpZDogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgY29tcG9uZW50IGFwcGVhcnMgaW5kZXRlcm1pbmF0ZS5cbiAgICogVGhpcyBkb2VzIG5vdCBzZXQgdGhlIG5hdGl2ZSBpbnB1dCBlbGVtZW50IHRvIGluZGV0ZXJtaW5hdGUgZHVlXG4gICAqIHRvIGluY29uc2lzdGVudCBiZWhhdmlvciBhY3Jvc3MgYnJvd3NlcnMuXG4gICAqIEhvd2V2ZXIsIHdlIHNldCBhIGBkYXRhLWluZGV0ZXJtaW5hdGVgIGF0dHJpYnV0ZSBvbiB0aGUgaW5wdXQuXG4gICAqL1xuICBpbmRldGVybWluYXRlOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogVGhlIGljb24gdG8gZGlzcGxheSB3aGVuIHRoZSBjb21wb25lbnQgaXMgaW5kZXRlcm1pbmF0ZS5cbiAgICovXG4gIGluZGV0ZXJtaW5hdGVJY29uOiBQcm9wVHlwZXMubm9kZSxcblxuICAvKipcbiAgICogW0F0dHJpYnV0ZXNdKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0hUTUwvRWxlbWVudC9pbnB1dCNBdHRyaWJ1dGVzKSBhcHBsaWVkIHRvIHRoZSBgaW5wdXRgIGVsZW1lbnQuXG4gICAqL1xuICBpbnB1dFByb3BzOiBQcm9wVHlwZXMub2JqZWN0LFxuXG4gIC8qKlxuICAgKiBQYXNzIGEgcmVmIHRvIHRoZSBgaW5wdXRgIGVsZW1lbnQuXG4gICAqL1xuICBpbnB1dFJlZjogcmVmVHlwZSxcblxuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgd2hlbiB0aGUgc3RhdGUgaXMgY2hhbmdlZC5cbiAgICpcbiAgICogQHBhcmFtIHtvYmplY3R9IGV2ZW50IFRoZSBldmVudCBzb3VyY2Ugb2YgdGhlIGNhbGxiYWNrLlxuICAgKiBZb3UgY2FuIHB1bGwgb3V0IHRoZSBuZXcgY2hlY2tlZCBzdGF0ZSBieSBhY2Nlc3NpbmcgYGV2ZW50LnRhcmdldC5jaGVja2VkYCAoYm9vbGVhbikuXG4gICAqL1xuICBvbkNoYW5nZTogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGBpbnB1dGAgZWxlbWVudCB3aWxsIGJlIHJlcXVpcmVkLlxuICAgKi9cbiAgcmVxdWlyZWQ6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBUaGUgc2l6ZSBvZiB0aGUgY2hlY2tib3guXG4gICAqIGBzbWFsbGAgaXMgZXF1aXZhbGVudCB0byB0aGUgZGVuc2UgY2hlY2tib3ggc3R5bGluZy5cbiAgICovXG4gIHNpemU6IFByb3BUeXBlcy5vbmVPZihbJ21lZGl1bScsICdzbWFsbCddKSxcblxuICAvKipcbiAgICogVGhlIHZhbHVlIG9mIHRoZSBjb21wb25lbnQuIFRoZSBET00gQVBJIGNhc3RzIHRoaXMgdG8gYSBzdHJpbmcuXG4gICAqIFRoZSBicm93c2VyIHVzZXMgXCJvblwiIGFzIHRoZSBkZWZhdWx0IHZhbHVlLlxuICAgKi9cbiAgdmFsdWU6IFByb3BUeXBlcy5hbnlcbn0gOiB2b2lkIDA7XG5leHBvcnQgZGVmYXVsdCB3aXRoU3R5bGVzKHN0eWxlcywge1xuICBuYW1lOiAnTXVpQ2hlY2tib3gnXG59KShDaGVja2JveCk7IiwiaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNcIjtcbmltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBjbHN4IGZyb20gJ2Nsc3gnO1xuaW1wb3J0IHdpdGhTdHlsZXMgZnJvbSAnLi4vc3R5bGVzL3dpdGhTdHlsZXMnO1xuaW1wb3J0IEJ1dHRvbkJhc2UgZnJvbSAnLi4vQnV0dG9uQmFzZSc7XG5pbXBvcnQgY2FwaXRhbGl6ZSBmcm9tICcuLi91dGlscy9jYXBpdGFsaXplJztcbmV4cG9ydCB2YXIgc3R5bGVzID0gZnVuY3Rpb24gc3R5bGVzKHRoZW1lKSB7XG4gIHJldHVybiB7XG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudC4gKi9cbiAgICByb290OiBfZXh0ZW5kcyh7fSwgdGhlbWUudHlwb2dyYXBoeS5idXR0b24sIHtcbiAgICAgIGJveFNpemluZzogJ2JvcmRlci1ib3gnLFxuICAgICAgbWluSGVpZ2h0OiAzNixcbiAgICAgIHRyYW5zaXRpb246IHRoZW1lLnRyYW5zaXRpb25zLmNyZWF0ZShbJ2JhY2tncm91bmQtY29sb3InLCAnYm94LXNoYWRvdycsICdib3JkZXInXSwge1xuICAgICAgICBkdXJhdGlvbjogdGhlbWUudHJhbnNpdGlvbnMuZHVyYXRpb24uc2hvcnRcbiAgICAgIH0pLFxuICAgICAgYm9yZGVyUmFkaXVzOiAnNTAlJyxcbiAgICAgIHBhZGRpbmc6IDAsXG4gICAgICBtaW5XaWR0aDogMCxcbiAgICAgIHdpZHRoOiA1NixcbiAgICAgIGhlaWdodDogNTYsXG4gICAgICBib3hTaGFkb3c6IHRoZW1lLnNoYWRvd3NbNl0sXG4gICAgICAnJjphY3RpdmUnOiB7XG4gICAgICAgIGJveFNoYWRvdzogdGhlbWUuc2hhZG93c1sxMl1cbiAgICAgIH0sXG4gICAgICBjb2xvcjogdGhlbWUucGFsZXR0ZS5nZXRDb250cmFzdFRleHQodGhlbWUucGFsZXR0ZS5ncmV5WzMwMF0pLFxuICAgICAgYmFja2dyb3VuZENvbG9yOiB0aGVtZS5wYWxldHRlLmdyZXlbMzAwXSxcbiAgICAgICcmOmhvdmVyJzoge1xuICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IHRoZW1lLnBhbGV0dGUuZ3JleS5BMTAwLFxuICAgICAgICAvLyBSZXNldCBvbiB0b3VjaCBkZXZpY2VzLCBpdCBkb2Vzbid0IGFkZCBzcGVjaWZpY2l0eVxuICAgICAgICAnQG1lZGlhIChob3Zlcjogbm9uZSknOiB7XG4gICAgICAgICAgYmFja2dyb3VuZENvbG9yOiB0aGVtZS5wYWxldHRlLmdyZXlbMzAwXVxuICAgICAgICB9LFxuICAgICAgICAnJiRkaXNhYmxlZCc6IHtcbiAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IHRoZW1lLnBhbGV0dGUuYWN0aW9uLmRpc2FibGVkQmFja2dyb3VuZFxuICAgICAgICB9LFxuICAgICAgICB0ZXh0RGVjb3JhdGlvbjogJ25vbmUnXG4gICAgICB9LFxuICAgICAgJyYkZm9jdXNWaXNpYmxlJzoge1xuICAgICAgICBib3hTaGFkb3c6IHRoZW1lLnNoYWRvd3NbNl1cbiAgICAgIH0sXG4gICAgICAnJiRkaXNhYmxlZCc6IHtcbiAgICAgICAgY29sb3I6IHRoZW1lLnBhbGV0dGUuYWN0aW9uLmRpc2FibGVkLFxuICAgICAgICBib3hTaGFkb3c6IHRoZW1lLnNoYWRvd3NbMF0sXG4gICAgICAgIGJhY2tncm91bmRDb2xvcjogdGhlbWUucGFsZXR0ZS5hY3Rpb24uZGlzYWJsZWRCYWNrZ3JvdW5kXG4gICAgICB9XG4gICAgfSksXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgc3BhbiBlbGVtZW50IHRoYXQgd3JhcHMgdGhlIGNoaWxkcmVuLiAqL1xuICAgIGxhYmVsOiB7XG4gICAgICB3aWR0aDogJzEwMCUnLFxuICAgICAgLy8gYXNzdXJlIHRoZSBjb3JyZWN0IHdpZHRoIGZvciBpT1MgU2FmYXJpXG4gICAgICBkaXNwbGF5OiAnaW5oZXJpdCcsXG4gICAgICBhbGlnbkl0ZW1zOiAnaW5oZXJpdCcsXG4gICAgICBqdXN0aWZ5Q29udGVudDogJ2luaGVyaXQnXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGNvbG9yPVwicHJpbWFyeVwiYC4gKi9cbiAgICBwcmltYXJ5OiB7XG4gICAgICBjb2xvcjogdGhlbWUucGFsZXR0ZS5wcmltYXJ5LmNvbnRyYXN0VGV4dCxcbiAgICAgIGJhY2tncm91bmRDb2xvcjogdGhlbWUucGFsZXR0ZS5wcmltYXJ5Lm1haW4sXG4gICAgICAnJjpob3Zlcic6IHtcbiAgICAgICAgYmFja2dyb3VuZENvbG9yOiB0aGVtZS5wYWxldHRlLnByaW1hcnkuZGFyayxcbiAgICAgICAgLy8gUmVzZXQgb24gdG91Y2ggZGV2aWNlcywgaXQgZG9lc24ndCBhZGQgc3BlY2lmaWNpdHlcbiAgICAgICAgJ0BtZWRpYSAoaG92ZXI6IG5vbmUpJzoge1xuICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogdGhlbWUucGFsZXR0ZS5wcmltYXJ5Lm1haW5cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBjb2xvcj1cInNlY29uZGFyeVwiYC4gKi9cbiAgICBzZWNvbmRhcnk6IHtcbiAgICAgIGNvbG9yOiB0aGVtZS5wYWxldHRlLnNlY29uZGFyeS5jb250cmFzdFRleHQsXG4gICAgICBiYWNrZ3JvdW5kQ29sb3I6IHRoZW1lLnBhbGV0dGUuc2Vjb25kYXJ5Lm1haW4sXG4gICAgICAnJjpob3Zlcic6IHtcbiAgICAgICAgYmFja2dyb3VuZENvbG9yOiB0aGVtZS5wYWxldHRlLnNlY29uZGFyeS5kYXJrLFxuICAgICAgICAvLyBSZXNldCBvbiB0b3VjaCBkZXZpY2VzLCBpdCBkb2Vzbid0IGFkZCBzcGVjaWZpY2l0eVxuICAgICAgICAnQG1lZGlhIChob3Zlcjogbm9uZSknOiB7XG4gICAgICAgICAgYmFja2dyb3VuZENvbG9yOiB0aGVtZS5wYWxldHRlLnNlY29uZGFyeS5tYWluXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgdmFyaWFudD1cImV4dGVuZGVkXCJgLiAqL1xuICAgIGV4dGVuZGVkOiB7XG4gICAgICBib3JkZXJSYWRpdXM6IDQ4IC8gMixcbiAgICAgIHBhZGRpbmc6ICcwIDE2cHgnLFxuICAgICAgd2lkdGg6ICdhdXRvJyxcbiAgICAgIG1pbkhlaWdodDogJ2F1dG8nLFxuICAgICAgbWluV2lkdGg6IDQ4LFxuICAgICAgaGVpZ2h0OiA0OCxcbiAgICAgICcmJHNpemVTbWFsbCc6IHtcbiAgICAgICAgd2lkdGg6ICdhdXRvJyxcbiAgICAgICAgcGFkZGluZzogJzAgOHB4JyxcbiAgICAgICAgYm9yZGVyUmFkaXVzOiAzNCAvIDIsXG4gICAgICAgIG1pbldpZHRoOiAzNCxcbiAgICAgICAgaGVpZ2h0OiAzNFxuICAgICAgfSxcbiAgICAgICcmJHNpemVNZWRpdW0nOiB7XG4gICAgICAgIHdpZHRoOiAnYXV0bycsXG4gICAgICAgIHBhZGRpbmc6ICcwIDE2cHgnLFxuICAgICAgICBib3JkZXJSYWRpdXM6IDQwIC8gMixcbiAgICAgICAgbWluV2lkdGg6IDQwLFxuICAgICAgICBoZWlnaHQ6IDQwXG4gICAgICB9XG4gICAgfSxcblxuICAgIC8qIFBzZXVkby1jbGFzcyBhcHBsaWVkIHRvIHRoZSBCdXR0b25CYXNlIHJvb3QgZWxlbWVudCBpZiB0aGUgYnV0dG9uIGlzIGtleWJvYXJkIGZvY3VzZWQuICovXG4gICAgZm9jdXNWaXNpYmxlOiB7fSxcblxuICAgIC8qIFBzZXVkby1jbGFzcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGRpc2FibGVkPXt0cnVlfWAuICovXG4gICAgZGlzYWJsZWQ6IHt9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgY29sb3I9XCJpbmhlcml0XCJgLiAqL1xuICAgIGNvbG9ySW5oZXJpdDoge1xuICAgICAgY29sb3I6ICdpbmhlcml0J1xuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBzaXplPVwic21hbGxcImBgLiAqL1xuICAgIHNpemVTbWFsbDoge1xuICAgICAgd2lkdGg6IDQwLFxuICAgICAgaGVpZ2h0OiA0MFxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBzaXplPVwibWVkaXVtXCJgYC4gKi9cbiAgICBzaXplTWVkaXVtOiB7XG4gICAgICB3aWR0aDogNDgsXG4gICAgICBoZWlnaHQ6IDQ4XG4gICAgfVxuICB9O1xufTtcbnZhciBGYWIgPSAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBGYWIocHJvcHMsIHJlZikge1xuICB2YXIgY2hpbGRyZW4gPSBwcm9wcy5jaGlsZHJlbixcbiAgICAgIGNsYXNzZXMgPSBwcm9wcy5jbGFzc2VzLFxuICAgICAgY2xhc3NOYW1lID0gcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgX3Byb3BzJGNvbG9yID0gcHJvcHMuY29sb3IsXG4gICAgICBjb2xvciA9IF9wcm9wcyRjb2xvciA9PT0gdm9pZCAwID8gJ2RlZmF1bHQnIDogX3Byb3BzJGNvbG9yLFxuICAgICAgX3Byb3BzJGNvbXBvbmVudCA9IHByb3BzLmNvbXBvbmVudCxcbiAgICAgIGNvbXBvbmVudCA9IF9wcm9wcyRjb21wb25lbnQgPT09IHZvaWQgMCA/ICdidXR0b24nIDogX3Byb3BzJGNvbXBvbmVudCxcbiAgICAgIF9wcm9wcyRkaXNhYmxlZCA9IHByb3BzLmRpc2FibGVkLFxuICAgICAgZGlzYWJsZWQgPSBfcHJvcHMkZGlzYWJsZWQgPT09IHZvaWQgMCA/IGZhbHNlIDogX3Byb3BzJGRpc2FibGVkLFxuICAgICAgX3Byb3BzJGRpc2FibGVGb2N1c1JpID0gcHJvcHMuZGlzYWJsZUZvY3VzUmlwcGxlLFxuICAgICAgZGlzYWJsZUZvY3VzUmlwcGxlID0gX3Byb3BzJGRpc2FibGVGb2N1c1JpID09PSB2b2lkIDAgPyBmYWxzZSA6IF9wcm9wcyRkaXNhYmxlRm9jdXNSaSxcbiAgICAgIGZvY3VzVmlzaWJsZUNsYXNzTmFtZSA9IHByb3BzLmZvY3VzVmlzaWJsZUNsYXNzTmFtZSxcbiAgICAgIF9wcm9wcyRzaXplID0gcHJvcHMuc2l6ZSxcbiAgICAgIHNpemUgPSBfcHJvcHMkc2l6ZSA9PT0gdm9pZCAwID8gJ2xhcmdlJyA6IF9wcm9wcyRzaXplLFxuICAgICAgX3Byb3BzJHZhcmlhbnQgPSBwcm9wcy52YXJpYW50LFxuICAgICAgdmFyaWFudCA9IF9wcm9wcyR2YXJpYW50ID09PSB2b2lkIDAgPyAncm91bmQnIDogX3Byb3BzJHZhcmlhbnQsXG4gICAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhwcm9wcywgW1wiY2hpbGRyZW5cIiwgXCJjbGFzc2VzXCIsIFwiY2xhc3NOYW1lXCIsIFwiY29sb3JcIiwgXCJjb21wb25lbnRcIiwgXCJkaXNhYmxlZFwiLCBcImRpc2FibGVGb2N1c1JpcHBsZVwiLCBcImZvY3VzVmlzaWJsZUNsYXNzTmFtZVwiLCBcInNpemVcIiwgXCJ2YXJpYW50XCJdKTtcblxuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoQnV0dG9uQmFzZSwgX2V4dGVuZHMoe1xuICAgIGNsYXNzTmFtZTogY2xzeChjbGFzc2VzLnJvb3QsIGNsYXNzTmFtZSwgdmFyaWFudCAhPT0gXCJyb3VuZFwiICYmIGNsYXNzZXMuZXh0ZW5kZWQsIHNpemUgIT09ICdsYXJnZScgJiYgY2xhc3Nlc1tcInNpemVcIi5jb25jYXQoY2FwaXRhbGl6ZShzaXplKSldLCBkaXNhYmxlZCAmJiBjbGFzc2VzLmRpc2FibGVkLCB7XG4gICAgICAncHJpbWFyeSc6IGNsYXNzZXMucHJpbWFyeSxcbiAgICAgICdzZWNvbmRhcnknOiBjbGFzc2VzLnNlY29uZGFyeSxcbiAgICAgICdpbmhlcml0JzogY2xhc3Nlcy5jb2xvckluaGVyaXRcbiAgICB9W2NvbG9yXSksXG4gICAgY29tcG9uZW50OiBjb21wb25lbnQsXG4gICAgZGlzYWJsZWQ6IGRpc2FibGVkLFxuICAgIGZvY3VzUmlwcGxlOiAhZGlzYWJsZUZvY3VzUmlwcGxlLFxuICAgIGZvY3VzVmlzaWJsZUNsYXNzTmFtZTogY2xzeChjbGFzc2VzLmZvY3VzVmlzaWJsZSwgZm9jdXNWaXNpYmxlQ2xhc3NOYW1lKSxcbiAgICByZWY6IHJlZlxuICB9LCBvdGhlciksIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwic3BhblwiLCB7XG4gICAgY2xhc3NOYW1lOiBjbGFzc2VzLmxhYmVsXG4gIH0sIGNoaWxkcmVuKSk7XG59KTtcbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IEZhYi5wcm9wVHlwZXMgPSB7XG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIFdhcm5pbmcgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgLy8gfCBUaGVzZSBQcm9wVHlwZXMgYXJlIGdlbmVyYXRlZCBmcm9tIHRoZSBUeXBlU2NyaXB0IHR5cGUgZGVmaW5pdGlvbnMgfFxuICAvLyB8ICAgICBUbyB1cGRhdGUgdGhlbSBlZGl0IHRoZSBkLnRzIGZpbGUgYW5kIHJ1biBcInlhcm4gcHJvcHR5cGVzXCIgICAgIHxcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4gIC8qKlxuICAgKiBUaGUgY29udGVudCBvZiB0aGUgYnV0dG9uLlxuICAgKi9cbiAgY2hpbGRyZW46IFByb3BUeXBlc1xuICAvKiBAdHlwZXNjcmlwdC10by1wcm9wdHlwZXMtaWdub3JlICovXG4gIC5ub2RlLmlzUmVxdWlyZWQsXG5cbiAgLyoqXG4gICAqIE92ZXJyaWRlIG9yIGV4dGVuZCB0aGUgc3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICogU2VlIFtDU1MgQVBJXSgjY3NzKSBiZWxvdyBmb3IgbW9yZSBkZXRhaWxzLlxuICAgKi9cbiAgY2xhc3NlczogUHJvcFR5cGVzLm9iamVjdCxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBUaGUgY29sb3Igb2YgdGhlIGNvbXBvbmVudC4gSXQgc3VwcG9ydHMgdGhvc2UgdGhlbWUgY29sb3JzIHRoYXQgbWFrZSBzZW5zZSBmb3IgdGhpcyBjb21wb25lbnQuXG4gICAqL1xuICBjb2xvcjogUHJvcFR5cGVzLm9uZU9mKFsnZGVmYXVsdCcsICdpbmhlcml0JywgJ3ByaW1hcnknLCAnc2Vjb25kYXJ5J10pLFxuXG4gIC8qKlxuICAgKiBUaGUgY29tcG9uZW50IHVzZWQgZm9yIHRoZSByb290IG5vZGUuXG4gICAqIEVpdGhlciBhIHN0cmluZyB0byB1c2UgYSBIVE1MIGVsZW1lbnQgb3IgYSBjb21wb25lbnQuXG4gICAqL1xuICBjb21wb25lbnQ6IFByb3BUeXBlc1xuICAvKiBAdHlwZXNjcmlwdC10by1wcm9wdHlwZXMtaWdub3JlICovXG4gIC5lbGVtZW50VHlwZSxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgYnV0dG9uIHdpbGwgYmUgZGlzYWJsZWQuXG4gICAqL1xuICBkaXNhYmxlZDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlICBrZXlib2FyZCBmb2N1cyByaXBwbGUgd2lsbCBiZSBkaXNhYmxlZC5cbiAgICovXG4gIGRpc2FibGVGb2N1c1JpcHBsZTogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIHJpcHBsZSBlZmZlY3Qgd2lsbCBiZSBkaXNhYmxlZC5cbiAgICovXG4gIGRpc2FibGVSaXBwbGU6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBmb2N1c1Zpc2libGVDbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIFRoZSBVUkwgdG8gbGluayB0byB3aGVuIHRoZSBidXR0b24gaXMgY2xpY2tlZC5cbiAgICogSWYgZGVmaW5lZCwgYW4gYGFgIGVsZW1lbnQgd2lsbCBiZSB1c2VkIGFzIHRoZSByb290IG5vZGUuXG4gICAqL1xuICBocmVmOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBUaGUgc2l6ZSBvZiB0aGUgYnV0dG9uLlxuICAgKiBgc21hbGxgIGlzIGVxdWl2YWxlbnQgdG8gdGhlIGRlbnNlIGJ1dHRvbiBzdHlsaW5nLlxuICAgKi9cbiAgc2l6ZTogUHJvcFR5cGVzLm9uZU9mKFsnbGFyZ2UnLCAnbWVkaXVtJywgJ3NtYWxsJ10pLFxuXG4gIC8qKlxuICAgKiBUaGUgdmFyaWFudCB0byB1c2UuXG4gICAqL1xuICB2YXJpYW50OiBQcm9wVHlwZXMub25lT2YoWydleHRlbmRlZCcsICdyb3VuZCddKVxufSA6IHZvaWQgMDtcbmV4cG9ydCBkZWZhdWx0IHdpdGhTdHlsZXMoc3R5bGVzLCB7XG4gIG5hbWU6ICdNdWlGYWInXG59KShGYWIpOyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNcIjtcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgY2xzeCBmcm9tICdjbHN4JztcbmltcG9ydCBQYXBlciBmcm9tICcuLi9QYXBlcic7XG5pbXBvcnQgd2l0aFN0eWxlcyBmcm9tICcuLi9zdHlsZXMvd2l0aFN0eWxlcyc7XG5leHBvcnQgdmFyIHN0eWxlcyA9IHtcbiAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudC4gKi9cbiAgcm9vdDoge1xuICAgIG92ZXJmbG93OiAnaGlkZGVuJ1xuICB9XG59O1xudmFyIENhcmQgPSAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBDYXJkKHByb3BzLCByZWYpIHtcbiAgdmFyIGNsYXNzZXMgPSBwcm9wcy5jbGFzc2VzLFxuICAgICAgY2xhc3NOYW1lID0gcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgX3Byb3BzJHJhaXNlZCA9IHByb3BzLnJhaXNlZCxcbiAgICAgIHJhaXNlZCA9IF9wcm9wcyRyYWlzZWQgPT09IHZvaWQgMCA/IGZhbHNlIDogX3Byb3BzJHJhaXNlZCxcbiAgICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKHByb3BzLCBbXCJjbGFzc2VzXCIsIFwiY2xhc3NOYW1lXCIsIFwicmFpc2VkXCJdKTtcblxuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoUGFwZXIsIF9leHRlbmRzKHtcbiAgICBjbGFzc05hbWU6IGNsc3goY2xhc3Nlcy5yb290LCBjbGFzc05hbWUpLFxuICAgIGVsZXZhdGlvbjogcmFpc2VkID8gOCA6IDEsXG4gICAgcmVmOiByZWZcbiAgfSwgb3RoZXIpKTtcbn0pO1xucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gQ2FyZC5wcm9wVHlwZXMgPSB7XG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIFdhcm5pbmcgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgLy8gfCBUaGVzZSBQcm9wVHlwZXMgYXJlIGdlbmVyYXRlZCBmcm9tIHRoZSBUeXBlU2NyaXB0IHR5cGUgZGVmaW5pdGlvbnMgfFxuICAvLyB8ICAgICBUbyB1cGRhdGUgdGhlbSBlZGl0IHRoZSBkLnRzIGZpbGUgYW5kIHJ1biBcInlhcm4gcHJvcHR5cGVzXCIgICAgIHxcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4gIC8qKlxuICAgKiBUaGUgY29udGVudCBvZiB0aGUgY29tcG9uZW50LlxuICAgKi9cbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuXG4gIC8qKlxuICAgKiBPdmVycmlkZSBvciBleHRlbmQgdGhlIHN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAqIFNlZSBbQ1NTIEFQSV0oI2NzcykgYmVsb3cgZm9yIG1vcmUgZGV0YWlscy5cbiAgICovXG4gIGNsYXNzZXM6IFByb3BUeXBlcy5vYmplY3QsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgY2FyZCB3aWxsIHVzZSByYWlzZWQgc3R5bGluZy5cbiAgICovXG4gIHJhaXNlZDogUHJvcFR5cGVzLmJvb2xcbn0gOiB2b2lkIDA7XG5leHBvcnQgZGVmYXVsdCB3aXRoU3R5bGVzKHN0eWxlcywge1xuICBuYW1lOiAnTXVpQ2FyZCdcbn0pKENhcmQpOyIsImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBjcmVhdGVTdmdJY29uIGZyb20gJy4uLy4uL3V0aWxzL2NyZWF0ZVN2Z0ljb24nO1xuLyoqXG4gKiBAaWdub3JlIC0gaW50ZXJuYWwgY29tcG9uZW50LlxuICovXG5cbmV4cG9ydCBkZWZhdWx0IGNyZWF0ZVN2Z0ljb24oIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwicGF0aFwiLCB7XG4gIGQ6IFwiTTEyIDJDNi40NyAyIDIgNi40NyAyIDEyczQuNDcgMTAgMTAgMTAgMTAtNC40NyAxMC0xMFMxNy41MyAyIDEyIDJ6bTUgMTMuNTlMMTUuNTkgMTcgMTIgMTMuNDEgOC40MSAxNyA3IDE1LjU5IDEwLjU5IDEyIDcgOC40MSA4LjQxIDcgMTIgMTAuNTkgMTUuNTkgNyAxNyA4LjQxIDEzLjQxIDEyIDE3IDE1LjU5elwiXG59KSwgJ0NhbmNlbCcpOyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNcIjtcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgY2xzeCBmcm9tICdjbHN4JztcbmltcG9ydCBDYW5jZWxJY29uIGZyb20gJy4uL2ludGVybmFsL3N2Zy1pY29ucy9DYW5jZWwnO1xuaW1wb3J0IHdpdGhTdHlsZXMgZnJvbSAnLi4vc3R5bGVzL3dpdGhTdHlsZXMnO1xuaW1wb3J0IHsgZW1waGFzaXplLCBmYWRlIH0gZnJvbSAnLi4vc3R5bGVzL2NvbG9yTWFuaXB1bGF0b3InO1xuaW1wb3J0IHVzZUZvcmtSZWYgZnJvbSAnLi4vdXRpbHMvdXNlRm9ya1JlZic7XG5pbXBvcnQgdW5zdXBwb3J0ZWRQcm9wIGZyb20gJy4uL3V0aWxzL3Vuc3VwcG9ydGVkUHJvcCc7XG5pbXBvcnQgY2FwaXRhbGl6ZSBmcm9tICcuLi91dGlscy9jYXBpdGFsaXplJztcbmltcG9ydCBCdXR0b25CYXNlIGZyb20gJy4uL0J1dHRvbkJhc2UnO1xuZXhwb3J0IHZhciBzdHlsZXMgPSBmdW5jdGlvbiBzdHlsZXModGhlbWUpIHtcbiAgdmFyIGJhY2tncm91bmRDb2xvciA9IHRoZW1lLnBhbGV0dGUudHlwZSA9PT0gJ2xpZ2h0JyA/IHRoZW1lLnBhbGV0dGUuZ3JleVszMDBdIDogdGhlbWUucGFsZXR0ZS5ncmV5WzcwMF07XG4gIHZhciBkZWxldGVJY29uQ29sb3IgPSBmYWRlKHRoZW1lLnBhbGV0dGUudGV4dC5wcmltYXJ5LCAwLjI2KTtcbiAgcmV0dXJuIHtcbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50LiAqL1xuICAgIHJvb3Q6IHtcbiAgICAgIGZvbnRGYW1pbHk6IHRoZW1lLnR5cG9ncmFwaHkuZm9udEZhbWlseSxcbiAgICAgIGZvbnRTaXplOiB0aGVtZS50eXBvZ3JhcGh5LnB4VG9SZW0oMTMpLFxuICAgICAgZGlzcGxheTogJ2lubGluZS1mbGV4JyxcbiAgICAgIGFsaWduSXRlbXM6ICdjZW50ZXInLFxuICAgICAganVzdGlmeUNvbnRlbnQ6ICdjZW50ZXInLFxuICAgICAgaGVpZ2h0OiAzMixcbiAgICAgIGNvbG9yOiB0aGVtZS5wYWxldHRlLmdldENvbnRyYXN0VGV4dChiYWNrZ3JvdW5kQ29sb3IpLFxuICAgICAgYmFja2dyb3VuZENvbG9yOiBiYWNrZ3JvdW5kQ29sb3IsXG4gICAgICBib3JkZXJSYWRpdXM6IDMyIC8gMixcbiAgICAgIHdoaXRlU3BhY2U6ICdub3dyYXAnLFxuICAgICAgdHJhbnNpdGlvbjogdGhlbWUudHJhbnNpdGlvbnMuY3JlYXRlKFsnYmFja2dyb3VuZC1jb2xvcicsICdib3gtc2hhZG93J10pLFxuICAgICAgLy8gbGFiZWwgd2lsbCBpbmhlcml0IHRoaXMgZnJvbSByb290LCB0aGVuIGBjbGlja2FibGVgIGNsYXNzIG92ZXJyaWRlcyB0aGlzIGZvciBib3RoXG4gICAgICBjdXJzb3I6ICdkZWZhdWx0JyxcbiAgICAgIC8vIFdlIGRpc2FibGUgdGhlIGZvY3VzIHJpbmcgZm9yIG1vdXNlLCB0b3VjaCBhbmQga2V5Ym9hcmQgdXNlcnMuXG4gICAgICBvdXRsaW5lOiAwLFxuICAgICAgdGV4dERlY29yYXRpb246ICdub25lJyxcbiAgICAgIGJvcmRlcjogJ25vbmUnLFxuICAgICAgLy8gUmVtb3ZlIGBidXR0b25gIGJvcmRlclxuICAgICAgcGFkZGluZzogMCxcbiAgICAgIC8vIFJlbW92ZSBgYnV0dG9uYCBwYWRkaW5nXG4gICAgICB2ZXJ0aWNhbEFsaWduOiAnbWlkZGxlJyxcbiAgICAgIGJveFNpemluZzogJ2JvcmRlci1ib3gnLFxuICAgICAgJyYkZGlzYWJsZWQnOiB7XG4gICAgICAgIG9wYWNpdHk6IDAuNSxcbiAgICAgICAgcG9pbnRlckV2ZW50czogJ25vbmUnXG4gICAgICB9LFxuICAgICAgJyYgJGF2YXRhcic6IHtcbiAgICAgICAgbWFyZ2luTGVmdDogNSxcbiAgICAgICAgbWFyZ2luUmlnaHQ6IC02LFxuICAgICAgICB3aWR0aDogMjQsXG4gICAgICAgIGhlaWdodDogMjQsXG4gICAgICAgIGNvbG9yOiB0aGVtZS5wYWxldHRlLnR5cGUgPT09ICdsaWdodCcgPyB0aGVtZS5wYWxldHRlLmdyZXlbNzAwXSA6IHRoZW1lLnBhbGV0dGUuZ3JleVszMDBdLFxuICAgICAgICBmb250U2l6ZTogdGhlbWUudHlwb2dyYXBoeS5weFRvUmVtKDEyKVxuICAgICAgfSxcbiAgICAgICcmICRhdmF0YXJDb2xvclByaW1hcnknOiB7XG4gICAgICAgIGNvbG9yOiB0aGVtZS5wYWxldHRlLnByaW1hcnkuY29udHJhc3RUZXh0LFxuICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IHRoZW1lLnBhbGV0dGUucHJpbWFyeS5kYXJrXG4gICAgICB9LFxuICAgICAgJyYgJGF2YXRhckNvbG9yU2Vjb25kYXJ5Jzoge1xuICAgICAgICBjb2xvcjogdGhlbWUucGFsZXR0ZS5zZWNvbmRhcnkuY29udHJhc3RUZXh0LFxuICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IHRoZW1lLnBhbGV0dGUuc2Vjb25kYXJ5LmRhcmtcbiAgICAgIH0sXG4gICAgICAnJiAkYXZhdGFyU21hbGwnOiB7XG4gICAgICAgIG1hcmdpbkxlZnQ6IDQsXG4gICAgICAgIG1hcmdpblJpZ2h0OiAtNCxcbiAgICAgICAgd2lkdGg6IDE4LFxuICAgICAgICBoZWlnaHQ6IDE4LFxuICAgICAgICBmb250U2l6ZTogdGhlbWUudHlwb2dyYXBoeS5weFRvUmVtKDEwKVxuICAgICAgfVxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBzaXplPVwic21hbGxcImAuICovXG4gICAgc2l6ZVNtYWxsOiB7XG4gICAgICBoZWlnaHQ6IDI0XG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGNvbG9yPVwicHJpbWFyeVwiYC4gKi9cbiAgICBjb2xvclByaW1hcnk6IHtcbiAgICAgIGJhY2tncm91bmRDb2xvcjogdGhlbWUucGFsZXR0ZS5wcmltYXJ5Lm1haW4sXG4gICAgICBjb2xvcjogdGhlbWUucGFsZXR0ZS5wcmltYXJ5LmNvbnRyYXN0VGV4dFxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBjb2xvcj1cInNlY29uZGFyeVwiYC4gKi9cbiAgICBjb2xvclNlY29uZGFyeToge1xuICAgICAgYmFja2dyb3VuZENvbG9yOiB0aGVtZS5wYWxldHRlLnNlY29uZGFyeS5tYWluLFxuICAgICAgY29sb3I6IHRoZW1lLnBhbGV0dGUuc2Vjb25kYXJ5LmNvbnRyYXN0VGV4dFxuICAgIH0sXG5cbiAgICAvKiBQc2V1ZG8tY2xhc3MgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBkaXNhYmxlZD17dHJ1ZX1gLiAqL1xuICAgIGRpc2FibGVkOiB7fSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYG9uQ2xpY2tgIGlzIGRlZmluZWQgb3IgYGNsaWNrYWJsZT17dHJ1ZX1gLiAqL1xuICAgIGNsaWNrYWJsZToge1xuICAgICAgdXNlclNlbGVjdDogJ25vbmUnLFxuICAgICAgV2Via2l0VGFwSGlnaGxpZ2h0Q29sb3I6ICd0cmFuc3BhcmVudCcsXG4gICAgICBjdXJzb3I6ICdwb2ludGVyJyxcbiAgICAgICcmOmhvdmVyLCAmOmZvY3VzJzoge1xuICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IGVtcGhhc2l6ZShiYWNrZ3JvdW5kQ29sb3IsIDAuMDgpXG4gICAgICB9LFxuICAgICAgJyY6YWN0aXZlJzoge1xuICAgICAgICBib3hTaGFkb3c6IHRoZW1lLnNoYWRvd3NbMV1cbiAgICAgIH1cbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgb25DbGlja2AgYW5kIGBjb2xvcj1cInByaW1hcnlcImAgaXMgZGVmaW5lZCBvciBgY2xpY2thYmxlPXt0cnVlfWAuICovXG4gICAgY2xpY2thYmxlQ29sb3JQcmltYXJ5OiB7XG4gICAgICAnJjpob3ZlciwgJjpmb2N1cyc6IHtcbiAgICAgICAgYmFja2dyb3VuZENvbG9yOiBlbXBoYXNpemUodGhlbWUucGFsZXR0ZS5wcmltYXJ5Lm1haW4sIDAuMDgpXG4gICAgICB9XG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYG9uQ2xpY2tgIGFuZCBgY29sb3I9XCJzZWNvbmRhcnlcImAgaXMgZGVmaW5lZCBvciBgY2xpY2thYmxlPXt0cnVlfWAuICovXG4gICAgY2xpY2thYmxlQ29sb3JTZWNvbmRhcnk6IHtcbiAgICAgICcmOmhvdmVyLCAmOmZvY3VzJzoge1xuICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IGVtcGhhc2l6ZSh0aGVtZS5wYWxldHRlLnNlY29uZGFyeS5tYWluLCAwLjA4KVxuICAgICAgfVxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBvbkRlbGV0ZWAgaXMgZGVmaW5lZC4gKi9cbiAgICBkZWxldGFibGU6IHtcbiAgICAgICcmOmZvY3VzJzoge1xuICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IGVtcGhhc2l6ZShiYWNrZ3JvdW5kQ29sb3IsIDAuMDgpXG4gICAgICB9XG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYG9uRGVsZXRlYCBhbmQgYGNvbG9yPVwicHJpbWFyeVwiYCBpcyBkZWZpbmVkLiAqL1xuICAgIGRlbGV0YWJsZUNvbG9yUHJpbWFyeToge1xuICAgICAgJyY6Zm9jdXMnOiB7XG4gICAgICAgIGJhY2tncm91bmRDb2xvcjogZW1waGFzaXplKHRoZW1lLnBhbGV0dGUucHJpbWFyeS5tYWluLCAwLjIpXG4gICAgICB9XG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYG9uRGVsZXRlYCBhbmQgYGNvbG9yPVwic2Vjb25kYXJ5XCJgIGlzIGRlZmluZWQuICovXG4gICAgZGVsZXRhYmxlQ29sb3JTZWNvbmRhcnk6IHtcbiAgICAgICcmOmZvY3VzJzoge1xuICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IGVtcGhhc2l6ZSh0aGVtZS5wYWxldHRlLnNlY29uZGFyeS5tYWluLCAwLjIpXG4gICAgICB9XG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYHZhcmlhbnQ9XCJvdXRsaW5lZFwiYC4gKi9cbiAgICBvdXRsaW5lZDoge1xuICAgICAgYmFja2dyb3VuZENvbG9yOiAndHJhbnNwYXJlbnQnLFxuICAgICAgYm9yZGVyOiBcIjFweCBzb2xpZCBcIi5jb25jYXQodGhlbWUucGFsZXR0ZS50eXBlID09PSAnbGlnaHQnID8gJ3JnYmEoMCwgMCwgMCwgMC4yMyknIDogJ3JnYmEoMjU1LCAyNTUsIDI1NSwgMC4yMyknKSxcbiAgICAgICckY2xpY2thYmxlJjpob3ZlciwgJGNsaWNrYWJsZSY6Zm9jdXMsICRkZWxldGFibGUmOmZvY3VzJzoge1xuICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IGZhZGUodGhlbWUucGFsZXR0ZS50ZXh0LnByaW1hcnksIHRoZW1lLnBhbGV0dGUuYWN0aW9uLmhvdmVyT3BhY2l0eSlcbiAgICAgIH0sXG4gICAgICAnJiAkYXZhdGFyJzoge1xuICAgICAgICBtYXJnaW5MZWZ0OiA0XG4gICAgICB9LFxuICAgICAgJyYgJGF2YXRhclNtYWxsJzoge1xuICAgICAgICBtYXJnaW5MZWZ0OiAyXG4gICAgICB9LFxuICAgICAgJyYgJGljb24nOiB7XG4gICAgICAgIG1hcmdpbkxlZnQ6IDRcbiAgICAgIH0sXG4gICAgICAnJiAkaWNvblNtYWxsJzoge1xuICAgICAgICBtYXJnaW5MZWZ0OiAyXG4gICAgICB9LFxuICAgICAgJyYgJGRlbGV0ZUljb24nOiB7XG4gICAgICAgIG1hcmdpblJpZ2h0OiA1XG4gICAgICB9LFxuICAgICAgJyYgJGRlbGV0ZUljb25TbWFsbCc6IHtcbiAgICAgICAgbWFyZ2luUmlnaHQ6IDNcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgdmFyaWFudD1cIm91dGxpbmVkXCJgIGFuZCBgY29sb3I9XCJwcmltYXJ5XCJgLiAqL1xuICAgIG91dGxpbmVkUHJpbWFyeToge1xuICAgICAgY29sb3I6IHRoZW1lLnBhbGV0dGUucHJpbWFyeS5tYWluLFxuICAgICAgYm9yZGVyOiBcIjFweCBzb2xpZCBcIi5jb25jYXQodGhlbWUucGFsZXR0ZS5wcmltYXJ5Lm1haW4pLFxuICAgICAgJyRjbGlja2FibGUmOmhvdmVyLCAkY2xpY2thYmxlJjpmb2N1cywgJGRlbGV0YWJsZSY6Zm9jdXMnOiB7XG4gICAgICAgIGJhY2tncm91bmRDb2xvcjogZmFkZSh0aGVtZS5wYWxldHRlLnByaW1hcnkubWFpbiwgdGhlbWUucGFsZXR0ZS5hY3Rpb24uaG92ZXJPcGFjaXR5KVxuICAgICAgfVxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGB2YXJpYW50PVwib3V0bGluZWRcImAgYW5kIGBjb2xvcj1cInNlY29uZGFyeVwiYC4gKi9cbiAgICBvdXRsaW5lZFNlY29uZGFyeToge1xuICAgICAgY29sb3I6IHRoZW1lLnBhbGV0dGUuc2Vjb25kYXJ5Lm1haW4sXG4gICAgICBib3JkZXI6IFwiMXB4IHNvbGlkIFwiLmNvbmNhdCh0aGVtZS5wYWxldHRlLnNlY29uZGFyeS5tYWluKSxcbiAgICAgICckY2xpY2thYmxlJjpob3ZlciwgJGNsaWNrYWJsZSY6Zm9jdXMsICRkZWxldGFibGUmOmZvY3VzJzoge1xuICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IGZhZGUodGhlbWUucGFsZXR0ZS5zZWNvbmRhcnkubWFpbiwgdGhlbWUucGFsZXR0ZS5hY3Rpb24uaG92ZXJPcGFjaXR5KVxuICAgICAgfVxuICAgIH0sXG4gICAgLy8gVE9ETyB2NTogcmVtb3ZlXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgYGF2YXRhcmAgZWxlbWVudC4gKi9cbiAgICBhdmF0YXI6IHt9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIGBhdmF0YXJgIGVsZW1lbnQgaWYgYHNpemU9XCJzbWFsbFwiYC4gKi9cbiAgICBhdmF0YXJTbWFsbDoge30sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgYGF2YXRhcmAgZWxlbWVudCBpZiBgY29sb3I9XCJwcmltYXJ5XCJgLiAqL1xuICAgIGF2YXRhckNvbG9yUHJpbWFyeToge30sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgYGF2YXRhcmAgZWxlbWVudCBpZiBgY29sb3I9XCJzZWNvbmRhcnlcImAuICovXG4gICAgYXZhdGFyQ29sb3JTZWNvbmRhcnk6IHt9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIGBpY29uYCBlbGVtZW50LiAqL1xuICAgIGljb246IHtcbiAgICAgIGNvbG9yOiB0aGVtZS5wYWxldHRlLnR5cGUgPT09ICdsaWdodCcgPyB0aGVtZS5wYWxldHRlLmdyZXlbNzAwXSA6IHRoZW1lLnBhbGV0dGUuZ3JleVszMDBdLFxuICAgICAgbWFyZ2luTGVmdDogNSxcbiAgICAgIG1hcmdpblJpZ2h0OiAtNlxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgYGljb25gIGVsZW1lbnQgaWYgYHNpemU9XCJzbWFsbFwiYC4gKi9cbiAgICBpY29uU21hbGw6IHtcbiAgICAgIHdpZHRoOiAxOCxcbiAgICAgIGhlaWdodDogMTgsXG4gICAgICBtYXJnaW5MZWZ0OiA0LFxuICAgICAgbWFyZ2luUmlnaHQ6IC00XG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSBgaWNvbmAgZWxlbWVudCBpZiBgY29sb3I9XCJwcmltYXJ5XCJgLiAqL1xuICAgIGljb25Db2xvclByaW1hcnk6IHtcbiAgICAgIGNvbG9yOiAnaW5oZXJpdCdcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIGBpY29uYCBlbGVtZW50IGlmIGBjb2xvcj1cInNlY29uZGFyeVwiYC4gKi9cbiAgICBpY29uQ29sb3JTZWNvbmRhcnk6IHtcbiAgICAgIGNvbG9yOiAnaW5oZXJpdCdcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIGxhYmVsIGBzcGFuYCBlbGVtZW50LiAqL1xuICAgIGxhYmVsOiB7XG4gICAgICBvdmVyZmxvdzogJ2hpZGRlbicsXG4gICAgICB0ZXh0T3ZlcmZsb3c6ICdlbGxpcHNpcycsXG4gICAgICBwYWRkaW5nTGVmdDogMTIsXG4gICAgICBwYWRkaW5nUmlnaHQ6IDEyLFxuICAgICAgd2hpdGVTcGFjZTogJ25vd3JhcCdcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIGxhYmVsIGBzcGFuYCBlbGVtZW50IGlmIGBzaXplPVwic21hbGxcImAuICovXG4gICAgbGFiZWxTbWFsbDoge1xuICAgICAgcGFkZGluZ0xlZnQ6IDgsXG4gICAgICBwYWRkaW5nUmlnaHQ6IDhcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIGBkZWxldGVJY29uYCBlbGVtZW50LiAqL1xuICAgIGRlbGV0ZUljb246IHtcbiAgICAgIFdlYmtpdFRhcEhpZ2hsaWdodENvbG9yOiAndHJhbnNwYXJlbnQnLFxuICAgICAgY29sb3I6IGRlbGV0ZUljb25Db2xvcixcbiAgICAgIGhlaWdodDogMjIsXG4gICAgICB3aWR0aDogMjIsXG4gICAgICBjdXJzb3I6ICdwb2ludGVyJyxcbiAgICAgIG1hcmdpbjogJzAgNXB4IDAgLTZweCcsXG4gICAgICAnJjpob3Zlcic6IHtcbiAgICAgICAgY29sb3I6IGZhZGUoZGVsZXRlSWNvbkNvbG9yLCAwLjQpXG4gICAgICB9XG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSBgZGVsZXRlSWNvbmAgZWxlbWVudCBpZiBgc2l6ZT1cInNtYWxsXCJgLiAqL1xuICAgIGRlbGV0ZUljb25TbWFsbDoge1xuICAgICAgaGVpZ2h0OiAxNixcbiAgICAgIHdpZHRoOiAxNixcbiAgICAgIG1hcmdpblJpZ2h0OiA0LFxuICAgICAgbWFyZ2luTGVmdDogLTRcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIGRlbGV0ZUljb24gZWxlbWVudCBpZiBgY29sb3I9XCJwcmltYXJ5XCJgIGFuZCBgdmFyaWFudD1cImRlZmF1bHRcImAuICovXG4gICAgZGVsZXRlSWNvbkNvbG9yUHJpbWFyeToge1xuICAgICAgY29sb3I6IGZhZGUodGhlbWUucGFsZXR0ZS5wcmltYXJ5LmNvbnRyYXN0VGV4dCwgMC43KSxcbiAgICAgICcmOmhvdmVyLCAmOmFjdGl2ZSc6IHtcbiAgICAgICAgY29sb3I6IHRoZW1lLnBhbGV0dGUucHJpbWFyeS5jb250cmFzdFRleHRcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIGRlbGV0ZUljb24gZWxlbWVudCBpZiBgY29sb3I9XCJzZWNvbmRhcnlcImAgYW5kIGB2YXJpYW50PVwiZGVmYXVsdFwiYC4gKi9cbiAgICBkZWxldGVJY29uQ29sb3JTZWNvbmRhcnk6IHtcbiAgICAgIGNvbG9yOiBmYWRlKHRoZW1lLnBhbGV0dGUuc2Vjb25kYXJ5LmNvbnRyYXN0VGV4dCwgMC43KSxcbiAgICAgICcmOmhvdmVyLCAmOmFjdGl2ZSc6IHtcbiAgICAgICAgY29sb3I6IHRoZW1lLnBhbGV0dGUuc2Vjb25kYXJ5LmNvbnRyYXN0VGV4dFxuICAgICAgfVxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgZGVsZXRlSWNvbiBlbGVtZW50IGlmIGBjb2xvcj1cInByaW1hcnlcImAgYW5kIGB2YXJpYW50PVwib3V0bGluZWRcImAuICovXG4gICAgZGVsZXRlSWNvbk91dGxpbmVkQ29sb3JQcmltYXJ5OiB7XG4gICAgICBjb2xvcjogZmFkZSh0aGVtZS5wYWxldHRlLnByaW1hcnkubWFpbiwgMC43KSxcbiAgICAgICcmOmhvdmVyLCAmOmFjdGl2ZSc6IHtcbiAgICAgICAgY29sb3I6IHRoZW1lLnBhbGV0dGUucHJpbWFyeS5tYWluXG4gICAgICB9XG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSBkZWxldGVJY29uIGVsZW1lbnQgaWYgYGNvbG9yPVwic2Vjb25kYXJ5XCJgIGFuZCBgdmFyaWFudD1cIm91dGxpbmVkXCJgLiAqL1xuICAgIGRlbGV0ZUljb25PdXRsaW5lZENvbG9yU2Vjb25kYXJ5OiB7XG4gICAgICBjb2xvcjogZmFkZSh0aGVtZS5wYWxldHRlLnNlY29uZGFyeS5tYWluLCAwLjcpLFxuICAgICAgJyY6aG92ZXIsICY6YWN0aXZlJzoge1xuICAgICAgICBjb2xvcjogdGhlbWUucGFsZXR0ZS5zZWNvbmRhcnkubWFpblxuICAgICAgfVxuICAgIH1cbiAgfTtcbn07XG5cbmZ1bmN0aW9uIGlzRGVsZXRlS2V5Ym9hcmRFdmVudChrZXlib2FyZEV2ZW50KSB7XG4gIHJldHVybiBrZXlib2FyZEV2ZW50LmtleSA9PT0gJ0JhY2tzcGFjZScgfHwga2V5Ym9hcmRFdmVudC5rZXkgPT09ICdEZWxldGUnO1xufVxuLyoqXG4gKiBDaGlwcyByZXByZXNlbnQgY29tcGxleCBlbnRpdGllcyBpbiBzbWFsbCBibG9ja3MsIHN1Y2ggYXMgYSBjb250YWN0LlxuICovXG5cblxudmFyIENoaXAgPSAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBDaGlwKHByb3BzLCByZWYpIHtcbiAgdmFyIGF2YXRhclByb3AgPSBwcm9wcy5hdmF0YXIsXG4gICAgICBjbGFzc2VzID0gcHJvcHMuY2xhc3NlcyxcbiAgICAgIGNsYXNzTmFtZSA9IHByb3BzLmNsYXNzTmFtZSxcbiAgICAgIGNsaWNrYWJsZVByb3AgPSBwcm9wcy5jbGlja2FibGUsXG4gICAgICBfcHJvcHMkY29sb3IgPSBwcm9wcy5jb2xvcixcbiAgICAgIGNvbG9yID0gX3Byb3BzJGNvbG9yID09PSB2b2lkIDAgPyAnZGVmYXVsdCcgOiBfcHJvcHMkY29sb3IsXG4gICAgICBDb21wb25lbnRQcm9wID0gcHJvcHMuY29tcG9uZW50LFxuICAgICAgZGVsZXRlSWNvblByb3AgPSBwcm9wcy5kZWxldGVJY29uLFxuICAgICAgX3Byb3BzJGRpc2FibGVkID0gcHJvcHMuZGlzYWJsZWQsXG4gICAgICBkaXNhYmxlZCA9IF9wcm9wcyRkaXNhYmxlZCA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcHJvcHMkZGlzYWJsZWQsXG4gICAgICBpY29uUHJvcCA9IHByb3BzLmljb24sXG4gICAgICBsYWJlbCA9IHByb3BzLmxhYmVsLFxuICAgICAgb25DbGljayA9IHByb3BzLm9uQ2xpY2ssXG4gICAgICBvbkRlbGV0ZSA9IHByb3BzLm9uRGVsZXRlLFxuICAgICAgb25LZXlEb3duID0gcHJvcHMub25LZXlEb3duLFxuICAgICAgb25LZXlVcCA9IHByb3BzLm9uS2V5VXAsXG4gICAgICBfcHJvcHMkc2l6ZSA9IHByb3BzLnNpemUsXG4gICAgICBzaXplID0gX3Byb3BzJHNpemUgPT09IHZvaWQgMCA/ICdtZWRpdW0nIDogX3Byb3BzJHNpemUsXG4gICAgICBfcHJvcHMkdmFyaWFudCA9IHByb3BzLnZhcmlhbnQsXG4gICAgICB2YXJpYW50ID0gX3Byb3BzJHZhcmlhbnQgPT09IHZvaWQgMCA/ICdkZWZhdWx0JyA6IF9wcm9wcyR2YXJpYW50LFxuICAgICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMocHJvcHMsIFtcImF2YXRhclwiLCBcImNsYXNzZXNcIiwgXCJjbGFzc05hbWVcIiwgXCJjbGlja2FibGVcIiwgXCJjb2xvclwiLCBcImNvbXBvbmVudFwiLCBcImRlbGV0ZUljb25cIiwgXCJkaXNhYmxlZFwiLCBcImljb25cIiwgXCJsYWJlbFwiLCBcIm9uQ2xpY2tcIiwgXCJvbkRlbGV0ZVwiLCBcIm9uS2V5RG93blwiLCBcIm9uS2V5VXBcIiwgXCJzaXplXCIsIFwidmFyaWFudFwiXSk7XG5cbiAgdmFyIGNoaXBSZWYgPSBSZWFjdC51c2VSZWYobnVsbCk7XG4gIHZhciBoYW5kbGVSZWYgPSB1c2VGb3JrUmVmKGNoaXBSZWYsIHJlZik7XG5cbiAgdmFyIGhhbmRsZURlbGV0ZUljb25DbGljayA9IGZ1bmN0aW9uIGhhbmRsZURlbGV0ZUljb25DbGljayhldmVudCkge1xuICAgIC8vIFN0b3AgdGhlIGV2ZW50IGZyb20gYnViYmxpbmcgdXAgdG8gdGhlIGBDaGlwYFxuICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuXG4gICAgaWYgKG9uRGVsZXRlKSB7XG4gICAgICBvbkRlbGV0ZShldmVudCk7XG4gICAgfVxuICB9O1xuXG4gIHZhciBoYW5kbGVLZXlEb3duID0gZnVuY3Rpb24gaGFuZGxlS2V5RG93bihldmVudCkge1xuICAgIC8vIElnbm9yZSBldmVudHMgZnJvbSBjaGlsZHJlbiBvZiBgQ2hpcGAuXG4gICAgaWYgKGV2ZW50LmN1cnJlbnRUYXJnZXQgPT09IGV2ZW50LnRhcmdldCAmJiBpc0RlbGV0ZUtleWJvYXJkRXZlbnQoZXZlbnQpKSB7XG4gICAgICAvLyB3aWxsIGJlIGhhbmRsZWQgaW4ga2V5VXAsIG90aGVyd2lzZSBzb21lIGJyb3dzZXJzXG4gICAgICAvLyBtaWdodCBpbml0IG5hdmlnYXRpb25cbiAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgfVxuXG4gICAgaWYgKG9uS2V5RG93bikge1xuICAgICAgb25LZXlEb3duKGV2ZW50KTtcbiAgICB9XG4gIH07XG5cbiAgdmFyIGhhbmRsZUtleVVwID0gZnVuY3Rpb24gaGFuZGxlS2V5VXAoZXZlbnQpIHtcbiAgICAvLyBJZ25vcmUgZXZlbnRzIGZyb20gY2hpbGRyZW4gb2YgYENoaXBgLlxuICAgIGlmIChldmVudC5jdXJyZW50VGFyZ2V0ID09PSBldmVudC50YXJnZXQpIHtcbiAgICAgIGlmIChvbkRlbGV0ZSAmJiBpc0RlbGV0ZUtleWJvYXJkRXZlbnQoZXZlbnQpKSB7XG4gICAgICAgIG9uRGVsZXRlKGV2ZW50KTtcbiAgICAgIH0gZWxzZSBpZiAoZXZlbnQua2V5ID09PSAnRXNjYXBlJyAmJiBjaGlwUmVmLmN1cnJlbnQpIHtcbiAgICAgICAgY2hpcFJlZi5jdXJyZW50LmJsdXIoKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAob25LZXlVcCkge1xuICAgICAgb25LZXlVcChldmVudCk7XG4gICAgfVxuICB9O1xuXG4gIHZhciBjbGlja2FibGUgPSBjbGlja2FibGVQcm9wICE9PSBmYWxzZSAmJiBvbkNsaWNrID8gdHJ1ZSA6IGNsaWNrYWJsZVByb3A7XG4gIHZhciBzbWFsbCA9IHNpemUgPT09ICdzbWFsbCc7XG4gIHZhciBDb21wb25lbnQgPSBDb21wb25lbnRQcm9wIHx8IChjbGlja2FibGUgPyBCdXR0b25CYXNlIDogJ2RpdicpO1xuICB2YXIgbW9yZVByb3BzID0gQ29tcG9uZW50ID09PSBCdXR0b25CYXNlID8ge1xuICAgIGNvbXBvbmVudDogJ2RpdidcbiAgfSA6IHt9O1xuICB2YXIgZGVsZXRlSWNvbiA9IG51bGw7XG5cbiAgaWYgKG9uRGVsZXRlKSB7XG4gICAgdmFyIGN1c3RvbUNsYXNzZXMgPSBjbHN4KGNvbG9yICE9PSAnZGVmYXVsdCcgJiYgKHZhcmlhbnQgPT09IFwiZGVmYXVsdFwiID8gY2xhc3Nlc1tcImRlbGV0ZUljb25Db2xvclwiLmNvbmNhdChjYXBpdGFsaXplKGNvbG9yKSldIDogY2xhc3Nlc1tcImRlbGV0ZUljb25PdXRsaW5lZENvbG9yXCIuY29uY2F0KGNhcGl0YWxpemUoY29sb3IpKV0pLCBzbWFsbCAmJiBjbGFzc2VzLmRlbGV0ZUljb25TbWFsbCk7XG4gICAgZGVsZXRlSWNvbiA9IGRlbGV0ZUljb25Qcm9wICYmIC8qI19fUFVSRV9fKi9SZWFjdC5pc1ZhbGlkRWxlbWVudChkZWxldGVJY29uUHJvcCkgPyAvKiNfX1BVUkVfXyovUmVhY3QuY2xvbmVFbGVtZW50KGRlbGV0ZUljb25Qcm9wLCB7XG4gICAgICBjbGFzc05hbWU6IGNsc3goZGVsZXRlSWNvblByb3AucHJvcHMuY2xhc3NOYW1lLCBjbGFzc2VzLmRlbGV0ZUljb24sIGN1c3RvbUNsYXNzZXMpLFxuICAgICAgb25DbGljazogaGFuZGxlRGVsZXRlSWNvbkNsaWNrXG4gICAgfSkgOiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChDYW5jZWxJY29uLCB7XG4gICAgICBjbGFzc05hbWU6IGNsc3goY2xhc3Nlcy5kZWxldGVJY29uLCBjdXN0b21DbGFzc2VzKSxcbiAgICAgIG9uQ2xpY2s6IGhhbmRsZURlbGV0ZUljb25DbGlja1xuICAgIH0pO1xuICB9XG5cbiAgdmFyIGF2YXRhciA9IG51bGw7XG5cbiAgaWYgKGF2YXRhclByb3AgJiYgLyojX19QVVJFX18qL1JlYWN0LmlzVmFsaWRFbGVtZW50KGF2YXRhclByb3ApKSB7XG4gICAgYXZhdGFyID0gLyojX19QVVJFX18qL1JlYWN0LmNsb25lRWxlbWVudChhdmF0YXJQcm9wLCB7XG4gICAgICBjbGFzc05hbWU6IGNsc3goY2xhc3Nlcy5hdmF0YXIsIGF2YXRhclByb3AucHJvcHMuY2xhc3NOYW1lLCBzbWFsbCAmJiBjbGFzc2VzLmF2YXRhclNtYWxsLCBjb2xvciAhPT0gJ2RlZmF1bHQnICYmIGNsYXNzZXNbXCJhdmF0YXJDb2xvclwiLmNvbmNhdChjYXBpdGFsaXplKGNvbG9yKSldKVxuICAgIH0pO1xuICB9XG5cbiAgdmFyIGljb24gPSBudWxsO1xuXG4gIGlmIChpY29uUHJvcCAmJiAvKiNfX1BVUkVfXyovUmVhY3QuaXNWYWxpZEVsZW1lbnQoaWNvblByb3ApKSB7XG4gICAgaWNvbiA9IC8qI19fUFVSRV9fKi9SZWFjdC5jbG9uZUVsZW1lbnQoaWNvblByb3AsIHtcbiAgICAgIGNsYXNzTmFtZTogY2xzeChjbGFzc2VzLmljb24sIGljb25Qcm9wLnByb3BzLmNsYXNzTmFtZSwgc21hbGwgJiYgY2xhc3Nlcy5pY29uU21hbGwsIGNvbG9yICE9PSAnZGVmYXVsdCcgJiYgY2xhc3Nlc1tcImljb25Db2xvclwiLmNvbmNhdChjYXBpdGFsaXplKGNvbG9yKSldKVxuICAgIH0pO1xuICB9XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBpZiAoYXZhdGFyICYmIGljb24pIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ01hdGVyaWFsLVVJOiBUaGUgQ2hpcCBjb21wb25lbnQgY2FuIG5vdCBoYW5kbGUgdGhlIGF2YXRhciAnICsgJ2FuZCB0aGUgaWNvbiBwcm9wIGF0IHRoZSBzYW1lIHRpbWUuIFBpY2sgb25lLicpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChDb21wb25lbnQsIF9leHRlbmRzKHtcbiAgICByb2xlOiBjbGlja2FibGUgfHwgb25EZWxldGUgPyAnYnV0dG9uJyA6IHVuZGVmaW5lZCxcbiAgICBjbGFzc05hbWU6IGNsc3goY2xhc3Nlcy5yb290LCBjbGFzc05hbWUsIGNvbG9yICE9PSAnZGVmYXVsdCcgJiYgW2NsYXNzZXNbXCJjb2xvclwiLmNvbmNhdChjYXBpdGFsaXplKGNvbG9yKSldLCBjbGlja2FibGUgJiYgY2xhc3Nlc1tcImNsaWNrYWJsZUNvbG9yXCIuY29uY2F0KGNhcGl0YWxpemUoY29sb3IpKV0sIG9uRGVsZXRlICYmIGNsYXNzZXNbXCJkZWxldGFibGVDb2xvclwiLmNvbmNhdChjYXBpdGFsaXplKGNvbG9yKSldXSwgdmFyaWFudCAhPT0gXCJkZWZhdWx0XCIgJiYgW2NsYXNzZXMub3V0bGluZWQsIHtcbiAgICAgICdwcmltYXJ5JzogY2xhc3Nlcy5vdXRsaW5lZFByaW1hcnksXG4gICAgICAnc2Vjb25kYXJ5JzogY2xhc3Nlcy5vdXRsaW5lZFNlY29uZGFyeVxuICAgIH1bY29sb3JdXSwgZGlzYWJsZWQgJiYgY2xhc3Nlcy5kaXNhYmxlZCwgc21hbGwgJiYgY2xhc3Nlcy5zaXplU21hbGwsIGNsaWNrYWJsZSAmJiBjbGFzc2VzLmNsaWNrYWJsZSwgb25EZWxldGUgJiYgY2xhc3Nlcy5kZWxldGFibGUpLFxuICAgIFwiYXJpYS1kaXNhYmxlZFwiOiBkaXNhYmxlZCA/IHRydWUgOiB1bmRlZmluZWQsXG4gICAgdGFiSW5kZXg6IGNsaWNrYWJsZSB8fCBvbkRlbGV0ZSA/IDAgOiB1bmRlZmluZWQsXG4gICAgb25DbGljazogb25DbGljayxcbiAgICBvbktleURvd246IGhhbmRsZUtleURvd24sXG4gICAgb25LZXlVcDogaGFuZGxlS2V5VXAsXG4gICAgcmVmOiBoYW5kbGVSZWZcbiAgfSwgbW9yZVByb3BzLCBvdGhlciksIGF2YXRhciB8fCBpY29uLCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcInNwYW5cIiwge1xuICAgIGNsYXNzTmFtZTogY2xzeChjbGFzc2VzLmxhYmVsLCBzbWFsbCAmJiBjbGFzc2VzLmxhYmVsU21hbGwpXG4gIH0sIGxhYmVsKSwgZGVsZXRlSWNvbik7XG59KTtcbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IENoaXAucHJvcFR5cGVzID0ge1xuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBXYXJuaW5nIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIC8vIHwgVGhlc2UgUHJvcFR5cGVzIGFyZSBnZW5lcmF0ZWQgZnJvbSB0aGUgVHlwZVNjcmlwdCB0eXBlIGRlZmluaXRpb25zIHxcbiAgLy8gfCAgICAgVG8gdXBkYXRlIHRoZW0gZWRpdCB0aGUgZC50cyBmaWxlIGFuZCBydW4gXCJ5YXJuIHByb3B0eXBlc1wiICAgICB8XG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuICAvKipcbiAgICogQXZhdGFyIGVsZW1lbnQuXG4gICAqL1xuICBhdmF0YXI6IFByb3BUeXBlcy5lbGVtZW50LFxuXG4gIC8qKlxuICAgKiBUaGlzIHByb3AgaXNuJ3Qgc3VwcG9ydGVkLlxuICAgKiBVc2UgdGhlIGBjb21wb25lbnRgIHByb3AgaWYgeW91IG5lZWQgdG8gY2hhbmdlIHRoZSBjaGlsZHJlbiBzdHJ1Y3R1cmUuXG4gICAqL1xuICBjaGlsZHJlbjogdW5zdXBwb3J0ZWRQcm9wLFxuXG4gIC8qKlxuICAgKiBPdmVycmlkZSBvciBleHRlbmQgdGhlIHN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAqIFNlZSBbQ1NTIEFQSV0oI2NzcykgYmVsb3cgZm9yIG1vcmUgZGV0YWlscy5cbiAgICovXG4gIGNsYXNzZXM6IFByb3BUeXBlcy5vYmplY3QsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgY2hpcCB3aWxsIGFwcGVhciBjbGlja2FibGUsIGFuZCB3aWxsIHJhaXNlIHdoZW4gcHJlc3NlZCxcbiAgICogZXZlbiBpZiB0aGUgb25DbGljayBwcm9wIGlzIG5vdCBkZWZpbmVkLlxuICAgKiBJZiBmYWxzZSwgdGhlIGNoaXAgd2lsbCBub3QgYmUgY2xpY2thYmxlLCBldmVuIGlmIG9uQ2xpY2sgcHJvcCBpcyBkZWZpbmVkLlxuICAgKiBUaGlzIGNhbiBiZSB1c2VkLCBmb3IgZXhhbXBsZSxcbiAgICogYWxvbmcgd2l0aCB0aGUgY29tcG9uZW50IHByb3AgdG8gaW5kaWNhdGUgYW4gYW5jaG9yIENoaXAgaXMgY2xpY2thYmxlLlxuICAgKi9cbiAgY2xpY2thYmxlOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogVGhlIGNvbG9yIG9mIHRoZSBjb21wb25lbnQuIEl0IHN1cHBvcnRzIHRob3NlIHRoZW1lIGNvbG9ycyB0aGF0IG1ha2Ugc2Vuc2UgZm9yIHRoaXMgY29tcG9uZW50LlxuICAgKi9cbiAgY29sb3I6IFByb3BUeXBlcy5vbmVPZihbJ2RlZmF1bHQnLCAncHJpbWFyeScsICdzZWNvbmRhcnknXSksXG5cbiAgLyoqXG4gICAqIFRoZSBjb21wb25lbnQgdXNlZCBmb3IgdGhlIHJvb3Qgbm9kZS5cbiAgICogRWl0aGVyIGEgc3RyaW5nIHRvIHVzZSBhIEhUTUwgZWxlbWVudCBvciBhIGNvbXBvbmVudC5cbiAgICovXG4gIGNvbXBvbmVudDogUHJvcFR5cGVzXG4gIC8qIEB0eXBlc2NyaXB0LXRvLXByb3B0eXBlcy1pZ25vcmUgKi9cbiAgLmVsZW1lbnRUeXBlLFxuXG4gIC8qKlxuICAgKiBPdmVycmlkZSB0aGUgZGVmYXVsdCBkZWxldGUgaWNvbiBlbGVtZW50LiBTaG93biBvbmx5IGlmIGBvbkRlbGV0ZWAgaXMgc2V0LlxuICAgKi9cbiAgZGVsZXRlSWNvbjogUHJvcFR5cGVzLmVsZW1lbnQsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGNoaXAgc2hvdWxkIGJlIGRpc3BsYXllZCBpbiBhIGRpc2FibGVkIHN0YXRlLlxuICAgKi9cbiAgZGlzYWJsZWQ6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBJY29uIGVsZW1lbnQuXG4gICAqL1xuICBpY29uOiBQcm9wVHlwZXMuZWxlbWVudCxcblxuICAvKipcbiAgICogVGhlIGNvbnRlbnQgb2YgdGhlIGxhYmVsLlxuICAgKi9cbiAgbGFiZWw6IFByb3BUeXBlcy5ub2RlLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBvbkNsaWNrOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQ2FsbGJhY2sgZnVuY3Rpb24gZmlyZWQgd2hlbiB0aGUgZGVsZXRlIGljb24gaXMgY2xpY2tlZC5cbiAgICogSWYgc2V0LCB0aGUgZGVsZXRlIGljb24gd2lsbCBiZSBzaG93bi5cbiAgICovXG4gIG9uRGVsZXRlOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgb25LZXlEb3duOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgb25LZXlVcDogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIFRoZSBzaXplIG9mIHRoZSBjaGlwLlxuICAgKi9cbiAgc2l6ZTogUHJvcFR5cGVzLm9uZU9mKFsnbWVkaXVtJywgJ3NtYWxsJ10pLFxuXG4gIC8qKlxuICAgKiBUaGUgdmFyaWFudCB0byB1c2UuXG4gICAqL1xuICB2YXJpYW50OiBQcm9wVHlwZXMub25lT2YoWydkZWZhdWx0JywgJ291dGxpbmVkJ10pXG59IDogdm9pZCAwO1xuZXhwb3J0IGRlZmF1bHQgd2l0aFN0eWxlcyhzdHlsZXMsIHtcbiAgbmFtZTogJ011aUNoaXAnXG59KShDaGlwKTsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzXCI7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGNsc3ggZnJvbSAnY2xzeCc7XG5pbXBvcnQgd2l0aFN0eWxlcyBmcm9tICcuLi9zdHlsZXMvd2l0aFN0eWxlcyc7XG5pbXBvcnQgQnV0dG9uQmFzZSBmcm9tICcuLi9CdXR0b25CYXNlJztcbmV4cG9ydCB2YXIgc3R5bGVzID0gZnVuY3Rpb24gc3R5bGVzKHRoZW1lKSB7XG4gIHJldHVybiB7XG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudC4gKi9cbiAgICByb290OiB7XG4gICAgICBkaXNwbGF5OiAnYmxvY2snLFxuICAgICAgdGV4dEFsaWduOiAnaW5oZXJpdCcsXG4gICAgICB3aWR0aDogJzEwMCUnLFxuICAgICAgJyY6aG92ZXIgJGZvY3VzSGlnaGxpZ2h0Jzoge1xuICAgICAgICBvcGFjaXR5OiB0aGVtZS5wYWxldHRlLmFjdGlvbi5ob3Zlck9wYWNpdHlcbiAgICAgIH0sXG4gICAgICAnJiRmb2N1c1Zpc2libGUgJGZvY3VzSGlnaGxpZ2h0Jzoge1xuICAgICAgICBvcGFjaXR5OiAwLjEyXG4gICAgICB9XG4gICAgfSxcblxuICAgIC8qIFBzZXVkby1jbGFzcyBhcHBsaWVkIHRvIHRoZSBCdXR0b25CYXNlIHJvb3QgZWxlbWVudCBpZiB0aGUgYWN0aW9uIGFyZWEgaXMga2V5Ym9hcmQgZm9jdXNlZC4gKi9cbiAgICBmb2N1c1Zpc2libGU6IHt9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIG92ZXJsYXkgdGhhdCBjb3ZlcnMgdGhlIGFjdGlvbiBhcmVhIHdoZW4gaXQgaXMga2V5Ym9hcmQgZm9jdXNlZC4gKi9cbiAgICBmb2N1c0hpZ2hsaWdodDoge1xuICAgICAgb3ZlcmZsb3c6ICdoaWRkZW4nLFxuICAgICAgcG9pbnRlckV2ZW50czogJ25vbmUnLFxuICAgICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gICAgICB0b3A6IDAsXG4gICAgICByaWdodDogMCxcbiAgICAgIGJvdHRvbTogMCxcbiAgICAgIGxlZnQ6IDAsXG4gICAgICBib3JkZXJSYWRpdXM6ICdpbmhlcml0JyxcbiAgICAgIG9wYWNpdHk6IDAsXG4gICAgICBiYWNrZ3JvdW5kQ29sb3I6ICdjdXJyZW50Y29sb3InLFxuICAgICAgdHJhbnNpdGlvbjogdGhlbWUudHJhbnNpdGlvbnMuY3JlYXRlKCdvcGFjaXR5Jywge1xuICAgICAgICBkdXJhdGlvbjogdGhlbWUudHJhbnNpdGlvbnMuZHVyYXRpb24uc2hvcnRcbiAgICAgIH0pXG4gICAgfVxuICB9O1xufTtcbnZhciBDYXJkQWN0aW9uQXJlYSA9IC8qI19fUFVSRV9fKi9SZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIENhcmRBY3Rpb25BcmVhKHByb3BzLCByZWYpIHtcbiAgdmFyIGNoaWxkcmVuID0gcHJvcHMuY2hpbGRyZW4sXG4gICAgICBjbGFzc2VzID0gcHJvcHMuY2xhc3NlcyxcbiAgICAgIGNsYXNzTmFtZSA9IHByb3BzLmNsYXNzTmFtZSxcbiAgICAgIGZvY3VzVmlzaWJsZUNsYXNzTmFtZSA9IHByb3BzLmZvY3VzVmlzaWJsZUNsYXNzTmFtZSxcbiAgICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKHByb3BzLCBbXCJjaGlsZHJlblwiLCBcImNsYXNzZXNcIiwgXCJjbGFzc05hbWVcIiwgXCJmb2N1c1Zpc2libGVDbGFzc05hbWVcIl0pO1xuXG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChCdXR0b25CYXNlLCBfZXh0ZW5kcyh7XG4gICAgY2xhc3NOYW1lOiBjbHN4KGNsYXNzZXMucm9vdCwgY2xhc3NOYW1lKSxcbiAgICBmb2N1c1Zpc2libGVDbGFzc05hbWU6IGNsc3goZm9jdXNWaXNpYmxlQ2xhc3NOYW1lLCBjbGFzc2VzLmZvY3VzVmlzaWJsZSksXG4gICAgcmVmOiByZWZcbiAgfSwgb3RoZXIpLCBjaGlsZHJlbiwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIsIHtcbiAgICBjbGFzc05hbWU6IGNsYXNzZXMuZm9jdXNIaWdobGlnaHRcbiAgfSkpO1xufSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBDYXJkQWN0aW9uQXJlYS5wcm9wVHlwZXMgPSB7XG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIFdhcm5pbmcgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgLy8gfCBUaGVzZSBQcm9wVHlwZXMgYXJlIGdlbmVyYXRlZCBmcm9tIHRoZSBUeXBlU2NyaXB0IHR5cGUgZGVmaW5pdGlvbnMgfFxuICAvLyB8ICAgICBUbyB1cGRhdGUgdGhlbSBlZGl0IHRoZSBkLnRzIGZpbGUgYW5kIHJ1biBcInlhcm4gcHJvcHR5cGVzXCIgICAgIHxcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4gIC8qKlxuICAgKiBUaGUgY29udGVudCBvZiB0aGUgY29tcG9uZW50LlxuICAgKi9cbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuXG4gIC8qKlxuICAgKiBPdmVycmlkZSBvciBleHRlbmQgdGhlIHN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAqIFNlZSBbQ1NTIEFQSV0oI2NzcykgYmVsb3cgZm9yIG1vcmUgZGV0YWlscy5cbiAgICovXG4gIGNsYXNzZXM6IFByb3BUeXBlcy5vYmplY3QsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgZm9jdXNWaXNpYmxlQ2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nXG59IDogdm9pZCAwO1xuZXhwb3J0IGRlZmF1bHQgd2l0aFN0eWxlcyhzdHlsZXMsIHtcbiAgbmFtZTogJ011aUNhcmRBY3Rpb25BcmVhJ1xufSkoQ2FyZEFjdGlvbkFyZWEpOyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNcIjtcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgY2xzeCBmcm9tICdjbHN4JztcbmltcG9ydCB3aXRoU3R5bGVzIGZyb20gJy4uL3N0eWxlcy93aXRoU3R5bGVzJztcbmltcG9ydCB7IGNoYWluUHJvcFR5cGVzIH0gZnJvbSAnQG1hdGVyaWFsLXVpL3V0aWxzJztcbmV4cG9ydCB2YXIgc3R5bGVzID0ge1xuICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50LiAqL1xuICByb290OiB7XG4gICAgZGlzcGxheTogJ2Jsb2NrJyxcbiAgICBiYWNrZ3JvdW5kU2l6ZTogJ2NvdmVyJyxcbiAgICBiYWNrZ3JvdW5kUmVwZWF0OiAnbm8tcmVwZWF0JyxcbiAgICBiYWNrZ3JvdW5kUG9zaXRpb246ICdjZW50ZXInXG4gIH0sXG5cbiAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgY29tcG9uZW50PVwidmlkZW8sIGF1ZGlvLCBwaWN0dXJlLCBpZnJhbWUsIG9yIGltZ1wiYC4gKi9cbiAgbWVkaWE6IHtcbiAgICB3aWR0aDogJzEwMCUnXG4gIH0sXG5cbiAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgY29tcG9uZW50PVwicGljdHVyZSBvciBpbWdcImAuICovXG4gIGltZzoge1xuICAgIC8vIOKaoO+4jyBvYmplY3QtZml0IGlzIG5vdCBzdXBwb3J0ZWQgYnkgSUUgMTEuXG4gICAgb2JqZWN0Rml0OiAnY292ZXInXG4gIH1cbn07XG52YXIgTUVESUFfQ09NUE9ORU5UUyA9IFsndmlkZW8nLCAnYXVkaW8nLCAncGljdHVyZScsICdpZnJhbWUnLCAnaW1nJ107XG52YXIgQ2FyZE1lZGlhID0gLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gQ2FyZE1lZGlhKHByb3BzLCByZWYpIHtcbiAgdmFyIGNoaWxkcmVuID0gcHJvcHMuY2hpbGRyZW4sXG4gICAgICBjbGFzc2VzID0gcHJvcHMuY2xhc3NlcyxcbiAgICAgIGNsYXNzTmFtZSA9IHByb3BzLmNsYXNzTmFtZSxcbiAgICAgIF9wcm9wcyRjb21wb25lbnQgPSBwcm9wcy5jb21wb25lbnQsXG4gICAgICBDb21wb25lbnQgPSBfcHJvcHMkY29tcG9uZW50ID09PSB2b2lkIDAgPyAnZGl2JyA6IF9wcm9wcyRjb21wb25lbnQsXG4gICAgICBpbWFnZSA9IHByb3BzLmltYWdlLFxuICAgICAgc3JjID0gcHJvcHMuc3JjLFxuICAgICAgc3R5bGUgPSBwcm9wcy5zdHlsZSxcbiAgICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKHByb3BzLCBbXCJjaGlsZHJlblwiLCBcImNsYXNzZXNcIiwgXCJjbGFzc05hbWVcIiwgXCJjb21wb25lbnRcIiwgXCJpbWFnZVwiLCBcInNyY1wiLCBcInN0eWxlXCJdKTtcblxuICB2YXIgaXNNZWRpYUNvbXBvbmVudCA9IE1FRElBX0NPTVBPTkVOVFMuaW5kZXhPZihDb21wb25lbnQpICE9PSAtMTtcbiAgdmFyIGNvbXBvc2VkU3R5bGUgPSAhaXNNZWRpYUNvbXBvbmVudCAmJiBpbWFnZSA/IF9leHRlbmRzKHtcbiAgICBiYWNrZ3JvdW5kSW1hZ2U6IFwidXJsKFxcXCJcIi5jb25jYXQoaW1hZ2UsIFwiXFxcIilcIilcbiAgfSwgc3R5bGUpIDogc3R5bGU7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChDb21wb25lbnQsIF9leHRlbmRzKHtcbiAgICBjbGFzc05hbWU6IGNsc3goY2xhc3Nlcy5yb290LCBjbGFzc05hbWUsIGlzTWVkaWFDb21wb25lbnQgJiYgY2xhc3Nlcy5tZWRpYSwgXCJwaWN0dXJlIGltZ1wiLmluZGV4T2YoQ29tcG9uZW50KSAhPT0gLTEgJiYgY2xhc3Nlcy5pbWcpLFxuICAgIHJlZjogcmVmLFxuICAgIHN0eWxlOiBjb21wb3NlZFN0eWxlLFxuICAgIHNyYzogaXNNZWRpYUNvbXBvbmVudCA/IGltYWdlIHx8IHNyYyA6IHVuZGVmaW5lZFxuICB9LCBvdGhlciksIGNoaWxkcmVuKTtcbn0pO1xucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gQ2FyZE1lZGlhLnByb3BUeXBlcyA9IHtcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gV2FybmluZyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAvLyB8IFRoZXNlIFByb3BUeXBlcyBhcmUgZ2VuZXJhdGVkIGZyb20gdGhlIFR5cGVTY3JpcHQgdHlwZSBkZWZpbml0aW9ucyB8XG4gIC8vIHwgICAgIFRvIHVwZGF0ZSB0aGVtIGVkaXQgdGhlIGQudHMgZmlsZSBhbmQgcnVuIFwieWFybiBwcm9wdHlwZXNcIiAgICAgfFxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbiAgLyoqXG4gICAqIFRoZSBjb250ZW50IG9mIHRoZSBjb21wb25lbnQuXG4gICAqL1xuICBjaGlsZHJlbjogY2hhaW5Qcm9wVHlwZXMoUHJvcFR5cGVzLm5vZGUsIGZ1bmN0aW9uIChwcm9wcykge1xuICAgIGlmICghcHJvcHMuY2hpbGRyZW4gJiYgIXByb3BzLmltYWdlICYmICFwcm9wcy5zcmMgJiYgIXByb3BzLmNvbXBvbmVudCkge1xuICAgICAgcmV0dXJuIG5ldyBFcnJvcignTWF0ZXJpYWwtVUk6IEVpdGhlciBgY2hpbGRyZW5gLCBgaW1hZ2VgLCBgc3JjYCBvciBgY29tcG9uZW50YCBwcm9wIG11c3QgYmUgc3BlY2lmaWVkLicpO1xuICAgIH1cblxuICAgIHJldHVybiBudWxsO1xuICB9KSxcblxuICAvKipcbiAgICogT3ZlcnJpZGUgb3IgZXh0ZW5kIHRoZSBzdHlsZXMgYXBwbGllZCB0byB0aGUgY29tcG9uZW50LlxuICAgKiBTZWUgW0NTUyBBUEldKCNjc3MpIGJlbG93IGZvciBtb3JlIGRldGFpbHMuXG4gICAqL1xuICBjbGFzc2VzOiBQcm9wVHlwZXMub2JqZWN0LFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIFRoZSBjb21wb25lbnQgdXNlZCBmb3IgdGhlIHJvb3Qgbm9kZS5cbiAgICogRWl0aGVyIGEgc3RyaW5nIHRvIHVzZSBhIEhUTUwgZWxlbWVudCBvciBhIGNvbXBvbmVudC5cbiAgICovXG4gIGNvbXBvbmVudDogUHJvcFR5cGVzXG4gIC8qIEB0eXBlc2NyaXB0LXRvLXByb3B0eXBlcy1pZ25vcmUgKi9cbiAgLmVsZW1lbnRUeXBlLFxuXG4gIC8qKlxuICAgKiBJbWFnZSB0byBiZSBkaXNwbGF5ZWQgYXMgYSBiYWNrZ3JvdW5kIGltYWdlLlxuICAgKiBFaXRoZXIgYGltYWdlYCBvciBgc3JjYCBwcm9wIG11c3QgYmUgc3BlY2lmaWVkLlxuICAgKiBOb3RlIHRoYXQgY2FsbGVyIG11c3Qgc3BlY2lmeSBoZWlnaHQgb3RoZXJ3aXNlIHRoZSBpbWFnZSB3aWxsIG5vdCBiZSB2aXNpYmxlLlxuICAgKi9cbiAgaW1hZ2U6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIEFuIGFsaWFzIGZvciBgaW1hZ2VgIHByb3BlcnR5LlxuICAgKiBBdmFpbGFibGUgb25seSB3aXRoIG1lZGlhIGNvbXBvbmVudHMuXG4gICAqIE1lZGlhIGNvbXBvbmVudHM6IGB2aWRlb2AsIGBhdWRpb2AsIGBwaWN0dXJlYCwgYGlmcmFtZWAsIGBpbWdgLlxuICAgKi9cbiAgc3JjOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBzdHlsZTogUHJvcFR5cGVzLm9iamVjdFxufSA6IHZvaWQgMDtcbmV4cG9ydCBkZWZhdWx0IHdpdGhTdHlsZXMoc3R5bGVzLCB7XG4gIG5hbWU6ICdNdWlDYXJkTWVkaWEnXG59KShDYXJkTWVkaWEpOyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNcIjtcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgY2xzeCBmcm9tICdjbHN4JztcbmltcG9ydCB3aXRoU3R5bGVzIGZyb20gJy4uL3N0eWxlcy93aXRoU3R5bGVzJztcbmV4cG9ydCB2YXIgc3R5bGVzID0ge1xuICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50LiAqL1xuICByb290OiB7XG4gICAgcGFkZGluZzogMTYsXG4gICAgJyY6bGFzdC1jaGlsZCc6IHtcbiAgICAgIHBhZGRpbmdCb3R0b206IDI0XG4gICAgfVxuICB9XG59O1xudmFyIENhcmRDb250ZW50ID0gLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gQ2FyZENvbnRlbnQocHJvcHMsIHJlZikge1xuICB2YXIgY2xhc3NlcyA9IHByb3BzLmNsYXNzZXMsXG4gICAgICBjbGFzc05hbWUgPSBwcm9wcy5jbGFzc05hbWUsXG4gICAgICBfcHJvcHMkY29tcG9uZW50ID0gcHJvcHMuY29tcG9uZW50LFxuICAgICAgQ29tcG9uZW50ID0gX3Byb3BzJGNvbXBvbmVudCA9PT0gdm9pZCAwID8gJ2RpdicgOiBfcHJvcHMkY29tcG9uZW50LFxuICAgICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMocHJvcHMsIFtcImNsYXNzZXNcIiwgXCJjbGFzc05hbWVcIiwgXCJjb21wb25lbnRcIl0pO1xuXG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChDb21wb25lbnQsIF9leHRlbmRzKHtcbiAgICBjbGFzc05hbWU6IGNsc3goY2xhc3Nlcy5yb290LCBjbGFzc05hbWUpLFxuICAgIHJlZjogcmVmXG4gIH0sIG90aGVyKSk7XG59KTtcbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IENhcmRDb250ZW50LnByb3BUeXBlcyA9IHtcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gV2FybmluZyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAvLyB8IFRoZXNlIFByb3BUeXBlcyBhcmUgZ2VuZXJhdGVkIGZyb20gdGhlIFR5cGVTY3JpcHQgdHlwZSBkZWZpbml0aW9ucyB8XG4gIC8vIHwgICAgIFRvIHVwZGF0ZSB0aGVtIGVkaXQgdGhlIGQudHMgZmlsZSBhbmQgcnVuIFwieWFybiBwcm9wdHlwZXNcIiAgICAgfFxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbiAgLyoqXG4gICAqIFRoZSBjb250ZW50IG9mIHRoZSBjb21wb25lbnQuXG4gICAqL1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG5cbiAgLyoqXG4gICAqIE92ZXJyaWRlIG9yIGV4dGVuZCB0aGUgc3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICogU2VlIFtDU1MgQVBJXSgjY3NzKSBiZWxvdyBmb3IgbW9yZSBkZXRhaWxzLlxuICAgKi9cbiAgY2xhc3NlczogUHJvcFR5cGVzLm9iamVjdCxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBUaGUgY29tcG9uZW50IHVzZWQgZm9yIHRoZSByb290IG5vZGUuXG4gICAqIEVpdGhlciBhIHN0cmluZyB0byB1c2UgYSBIVE1MIGVsZW1lbnQgb3IgYSBjb21wb25lbnQuXG4gICAqL1xuICBjb21wb25lbnQ6IFByb3BUeXBlc1xuICAvKiBAdHlwZXNjcmlwdC10by1wcm9wdHlwZXMtaWdub3JlICovXG4gIC5lbGVtZW50VHlwZVxufSA6IHZvaWQgMDtcbmV4cG9ydCBkZWZhdWx0IHdpdGhTdHlsZXMoc3R5bGVzLCB7XG4gIG5hbWU6ICdNdWlDYXJkQ29udGVudCdcbn0pKENhcmRDb250ZW50KTsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzXCI7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGNsc3ggZnJvbSAnY2xzeCc7XG5pbXBvcnQgd2l0aFN0eWxlcyBmcm9tICcuLi9zdHlsZXMvd2l0aFN0eWxlcyc7XG5pbXBvcnQgVHlwb2dyYXBoeSBmcm9tICcuLi9UeXBvZ3JhcGh5JztcbmV4cG9ydCB2YXIgc3R5bGVzID0ge1xuICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50LiAqL1xuICByb290OiB7XG4gICAgZGlzcGxheTogJ2ZsZXgnLFxuICAgIGFsaWduSXRlbXM6ICdjZW50ZXInLFxuICAgIHBhZGRpbmc6IDE2XG4gIH0sXG5cbiAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIGF2YXRhciBlbGVtZW50LiAqL1xuICBhdmF0YXI6IHtcbiAgICBmbGV4OiAnMCAwIGF1dG8nLFxuICAgIG1hcmdpblJpZ2h0OiAxNlxuICB9LFxuXG4gIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSBhY3Rpb24gZWxlbWVudC4gKi9cbiAgYWN0aW9uOiB7XG4gICAgZmxleDogJzAgMCBhdXRvJyxcbiAgICBhbGlnblNlbGY6ICdmbGV4LXN0YXJ0JyxcbiAgICBtYXJnaW5Ub3A6IC04LFxuICAgIG1hcmdpblJpZ2h0OiAtOFxuICB9LFxuXG4gIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb250ZW50IHdyYXBwZXIgZWxlbWVudC4gKi9cbiAgY29udGVudDoge1xuICAgIGZsZXg6ICcxIDEgYXV0bydcbiAgfSxcblxuICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgdGl0bGUgVHlwb2dyYXBoeSBlbGVtZW50LiAqL1xuICB0aXRsZToge30sXG5cbiAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHN1YmhlYWRlciBUeXBvZ3JhcGh5IGVsZW1lbnQuICovXG4gIHN1YmhlYWRlcjoge31cbn07XG52YXIgQ2FyZEhlYWRlciA9IC8qI19fUFVSRV9fKi9SZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIENhcmRIZWFkZXIocHJvcHMsIHJlZikge1xuICB2YXIgYWN0aW9uID0gcHJvcHMuYWN0aW9uLFxuICAgICAgYXZhdGFyID0gcHJvcHMuYXZhdGFyLFxuICAgICAgY2xhc3NlcyA9IHByb3BzLmNsYXNzZXMsXG4gICAgICBjbGFzc05hbWUgPSBwcm9wcy5jbGFzc05hbWUsXG4gICAgICBfcHJvcHMkY29tcG9uZW50ID0gcHJvcHMuY29tcG9uZW50LFxuICAgICAgQ29tcG9uZW50ID0gX3Byb3BzJGNvbXBvbmVudCA9PT0gdm9pZCAwID8gJ2RpdicgOiBfcHJvcHMkY29tcG9uZW50LFxuICAgICAgX3Byb3BzJGRpc2FibGVUeXBvZ3JhID0gcHJvcHMuZGlzYWJsZVR5cG9ncmFwaHksXG4gICAgICBkaXNhYmxlVHlwb2dyYXBoeSA9IF9wcm9wcyRkaXNhYmxlVHlwb2dyYSA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcHJvcHMkZGlzYWJsZVR5cG9ncmEsXG4gICAgICBzdWJoZWFkZXJQcm9wID0gcHJvcHMuc3ViaGVhZGVyLFxuICAgICAgc3ViaGVhZGVyVHlwb2dyYXBoeVByb3BzID0gcHJvcHMuc3ViaGVhZGVyVHlwb2dyYXBoeVByb3BzLFxuICAgICAgdGl0bGVQcm9wID0gcHJvcHMudGl0bGUsXG4gICAgICB0aXRsZVR5cG9ncmFwaHlQcm9wcyA9IHByb3BzLnRpdGxlVHlwb2dyYXBoeVByb3BzLFxuICAgICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMocHJvcHMsIFtcImFjdGlvblwiLCBcImF2YXRhclwiLCBcImNsYXNzZXNcIiwgXCJjbGFzc05hbWVcIiwgXCJjb21wb25lbnRcIiwgXCJkaXNhYmxlVHlwb2dyYXBoeVwiLCBcInN1YmhlYWRlclwiLCBcInN1YmhlYWRlclR5cG9ncmFwaHlQcm9wc1wiLCBcInRpdGxlXCIsIFwidGl0bGVUeXBvZ3JhcGh5UHJvcHNcIl0pO1xuXG4gIHZhciB0aXRsZSA9IHRpdGxlUHJvcDtcblxuICBpZiAodGl0bGUgIT0gbnVsbCAmJiB0aXRsZS50eXBlICE9PSBUeXBvZ3JhcGh5ICYmICFkaXNhYmxlVHlwb2dyYXBoeSkge1xuICAgIHRpdGxlID0gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoVHlwb2dyYXBoeSwgX2V4dGVuZHMoe1xuICAgICAgdmFyaWFudDogYXZhdGFyID8gJ2JvZHkyJyA6ICdoNScsXG4gICAgICBjbGFzc05hbWU6IGNsYXNzZXMudGl0bGUsXG4gICAgICBjb21wb25lbnQ6IFwic3BhblwiLFxuICAgICAgZGlzcGxheTogXCJibG9ja1wiXG4gICAgfSwgdGl0bGVUeXBvZ3JhcGh5UHJvcHMpLCB0aXRsZSk7XG4gIH1cblxuICB2YXIgc3ViaGVhZGVyID0gc3ViaGVhZGVyUHJvcDtcblxuICBpZiAoc3ViaGVhZGVyICE9IG51bGwgJiYgc3ViaGVhZGVyLnR5cGUgIT09IFR5cG9ncmFwaHkgJiYgIWRpc2FibGVUeXBvZ3JhcGh5KSB7XG4gICAgc3ViaGVhZGVyID0gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoVHlwb2dyYXBoeSwgX2V4dGVuZHMoe1xuICAgICAgdmFyaWFudDogYXZhdGFyID8gJ2JvZHkyJyA6ICdib2R5MScsXG4gICAgICBjbGFzc05hbWU6IGNsYXNzZXMuc3ViaGVhZGVyLFxuICAgICAgY29sb3I6IFwidGV4dFNlY29uZGFyeVwiLFxuICAgICAgY29tcG9uZW50OiBcInNwYW5cIixcbiAgICAgIGRpc3BsYXk6IFwiYmxvY2tcIlxuICAgIH0sIHN1YmhlYWRlclR5cG9ncmFwaHlQcm9wcyksIHN1YmhlYWRlcik7XG4gIH1cblxuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoQ29tcG9uZW50LCBfZXh0ZW5kcyh7XG4gICAgY2xhc3NOYW1lOiBjbHN4KGNsYXNzZXMucm9vdCwgY2xhc3NOYW1lKSxcbiAgICByZWY6IHJlZlxuICB9LCBvdGhlciksIGF2YXRhciAmJiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7XG4gICAgY2xhc3NOYW1lOiBjbGFzc2VzLmF2YXRhclxuICB9LCBhdmF0YXIpLCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7XG4gICAgY2xhc3NOYW1lOiBjbGFzc2VzLmNvbnRlbnRcbiAgfSwgdGl0bGUsIHN1YmhlYWRlciksIGFjdGlvbiAmJiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7XG4gICAgY2xhc3NOYW1lOiBjbGFzc2VzLmFjdGlvblxuICB9LCBhY3Rpb24pKTtcbn0pO1xucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gQ2FyZEhlYWRlci5wcm9wVHlwZXMgPSB7XG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIFdhcm5pbmcgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgLy8gfCBUaGVzZSBQcm9wVHlwZXMgYXJlIGdlbmVyYXRlZCBmcm9tIHRoZSBUeXBlU2NyaXB0IHR5cGUgZGVmaW5pdGlvbnMgfFxuICAvLyB8ICAgICBUbyB1cGRhdGUgdGhlbSBlZGl0IHRoZSBkLnRzIGZpbGUgYW5kIHJ1biBcInlhcm4gcHJvcHR5cGVzXCIgICAgIHxcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4gIC8qKlxuICAgKiBUaGUgYWN0aW9uIHRvIGRpc3BsYXkgaW4gdGhlIGNhcmQgaGVhZGVyLlxuICAgKi9cbiAgYWN0aW9uOiBQcm9wVHlwZXMubm9kZSxcblxuICAvKipcbiAgICogVGhlIEF2YXRhciBmb3IgdGhlIENhcmQgSGVhZGVyLlxuICAgKi9cbiAgYXZhdGFyOiBQcm9wVHlwZXMubm9kZSxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuXG4gIC8qKlxuICAgKiBPdmVycmlkZSBvciBleHRlbmQgdGhlIHN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAqIFNlZSBbQ1NTIEFQSV0oI2NzcykgYmVsb3cgZm9yIG1vcmUgZGV0YWlscy5cbiAgICovXG4gIGNsYXNzZXM6IFByb3BUeXBlcy5vYmplY3QsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogVGhlIGNvbXBvbmVudCB1c2VkIGZvciB0aGUgcm9vdCBub2RlLlxuICAgKiBFaXRoZXIgYSBzdHJpbmcgdG8gdXNlIGEgSFRNTCBlbGVtZW50IG9yIGEgY29tcG9uZW50LlxuICAgKi9cbiAgY29tcG9uZW50OiBQcm9wVHlwZXNcbiAgLyogQHR5cGVzY3JpcHQtdG8tcHJvcHR5cGVzLWlnbm9yZSAqL1xuICAuZWxlbWVudFR5cGUsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgYHN1YmhlYWRlcmAgYW5kIGB0aXRsZWAgd29uJ3QgYmUgd3JhcHBlZCBieSBhIFR5cG9ncmFwaHkgY29tcG9uZW50LlxuICAgKiBUaGlzIGNhbiBiZSB1c2VmdWwgdG8gcmVuZGVyIGFuIGFsdGVybmF0aXZlIFR5cG9ncmFwaHkgdmFyaWFudCBieSB3cmFwcGluZ1xuICAgKiB0aGUgYHRpdGxlYCB0ZXh0LCBhbmQgb3B0aW9uYWwgYHN1YmhlYWRlcmAgdGV4dFxuICAgKiB3aXRoIHRoZSBUeXBvZ3JhcGh5IGNvbXBvbmVudC5cbiAgICovXG4gIGRpc2FibGVUeXBvZ3JhcGh5OiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogVGhlIGNvbnRlbnQgb2YgdGhlIGNvbXBvbmVudC5cbiAgICovXG4gIHN1YmhlYWRlcjogUHJvcFR5cGVzLm5vZGUsXG5cbiAgLyoqXG4gICAqIFRoZXNlIHByb3BzIHdpbGwgYmUgZm9yd2FyZGVkIHRvIHRoZSBzdWJoZWFkZXJcbiAgICogKGFzIGxvbmcgYXMgZGlzYWJsZVR5cG9ncmFwaHkgaXMgbm90IGB0cnVlYCkuXG4gICAqL1xuICBzdWJoZWFkZXJUeXBvZ3JhcGh5UHJvcHM6IFByb3BUeXBlcy5vYmplY3QsXG5cbiAgLyoqXG4gICAqIFRoZSBjb250ZW50IG9mIHRoZSBDYXJkIFRpdGxlLlxuICAgKi9cbiAgdGl0bGU6IFByb3BUeXBlcy5ub2RlLFxuXG4gIC8qKlxuICAgKiBUaGVzZSBwcm9wcyB3aWxsIGJlIGZvcndhcmRlZCB0byB0aGUgdGl0bGVcbiAgICogKGFzIGxvbmcgYXMgZGlzYWJsZVR5cG9ncmFwaHkgaXMgbm90IGB0cnVlYCkuXG4gICAqL1xuICB0aXRsZVR5cG9ncmFwaHlQcm9wczogUHJvcFR5cGVzLm9iamVjdFxufSA6IHZvaWQgMDtcbmV4cG9ydCBkZWZhdWx0IHdpdGhTdHlsZXMoc3R5bGVzLCB7XG4gIG5hbWU6ICdNdWlDYXJkSGVhZGVyJ1xufSkoQ2FyZEhlYWRlcik7IiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0J1xyXG5pbXBvcnQgeyBtYWtlU3R5bGVzIH0gZnJvbSAnQG1hdGVyaWFsLXVpL2NvcmUvc3R5bGVzJ1xyXG5pbXBvcnQge1xyXG4gICAgQ2FyZEhlYWRlcixcclxuICAgIENhcmQsXHJcbiAgICBDYXJkQWN0aW9uQXJlYSxcclxuICAgIENhcmRNZWRpYSxcclxuICAgIENhcmRDb250ZW50LFxyXG4gICAgVHlwb2dyYXBoeSxcclxuICAgIENhcmRBY3Rpb25zLFxyXG4gICAgQnV0dG9uLFxyXG4gICAgR3JvdyxcclxuICAgIERpYWxvZyxcclxuICAgIERpYWxvZ1RpdGxlLFxyXG4gICAgRGlhbG9nQ29udGVudCxcclxuICAgIERpYWxvZ0NvbnRlbnRUZXh0LFxyXG4gICAgRGlhbG9nQWN0aW9ucyxcclxuICAgIENoaXAsXHJcbn0gZnJvbSAnQG1hdGVyaWFsLXVpL2NvcmUnXHJcbmltcG9ydCBEb25lSWNvbiBmcm9tICdAbWF0ZXJpYWwtdWkvaWNvbnMvRG9uZSdcclxuaW1wb3J0IERlbGV0ZUljb24gZnJvbSAnQG1hdGVyaWFsLXVpL2ljb25zL0RlbGV0ZSdcclxuXHJcbmNvbnN0IHVzZVN0eWxlcyA9IG1ha2VTdHlsZXMoKHRoZW1lKSA9PiAoe1xyXG4gICAgcm9vdDoge1xyXG4gICAgICAgIG1heFdpZHRoOiAnMTAwJScsXHJcbiAgICB9LFxyXG4gICAgbWVkaWE6IHtcclxuICAgICAgICBoZWlnaHQ6IDE1MCxcclxuICAgICAgICBtYXhXaWR0aDogJzI1JScsXHJcbiAgICAgICAgd2lkdGg6ICcxMDAlJyxcclxuICAgIH0sXHJcbiAgICBjYXJkOiB7XHJcbiAgICAgICAgcG9zaXRpb246ICdyZWxhdGl2ZScsXHJcbiAgICB9LFxyXG4gICAgY2FyZEFjdGlvbjoge1xyXG4gICAgICAgIGRpc3BsYXk6ICdmbGV4JyxcclxuICAgICAgICBqdXN0aWZ5Q29udGVudDogJ3NwYWNlLWJldHdlZW4nLFxyXG4gICAgfSxcclxuICAgIGNvbnRlbnQ6IHtcclxuICAgICAgICBmbGV4R3JvdzogMSxcclxuICAgIH0sXHJcbiAgICBidXR0b246IHtcclxuICAgICAgICAnJjpub3QoOmxhc3QtY2hpbGQpJzoge1xyXG4gICAgICAgICAgICBtYXJnaW5Cb3R0b206ICcxcmVtJyxcclxuICAgICAgICB9LFxyXG4gICAgfSxcclxuICAgIGNoaXA6IHtcclxuICAgICAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcclxuICAgICAgICB0b3A6ICcxcmVtJyxcclxuICAgICAgICByaWdodDogJy41cmVtJyxcclxuICAgIH0sXHJcbn0pKVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gTGVzc29uSXRlbUJpZyhwcm9wcykge1xyXG4gICAgY29uc3QgY2xhc3NlcyA9IHVzZVN0eWxlcygpXHJcbiAgICBjb25zdCB7IGlkLCB0aXRsZSwgY29udGVudCwgY2F0ZWdvcnksIHByaWNlLCBjb3ZlciwgbGVzc29uSWQgfSA9IHByb3BzXHJcbiAgICBjb25zdCBbb3Blbiwgc2V0T3Blbl0gPSBSZWFjdC51c2VTdGF0ZShmYWxzZSlcclxuICAgIGNvbnN0IFtkZWxldGVEaWFsb2csIHNldERlbGV0ZURpYWxvZ10gPSBSZWFjdC51c2VTdGF0ZShmYWxzZSlcclxuICAgIGNvbnN0IFtpc1JlbmRlciwgc2V0SXNSZW5kZXJdID0gUmVhY3QudXNlU3RhdGUoZmFsc2UpXHJcbiAgICBjb25zdCBbdGltZXIsIHNldFRpbWVyXSA9IFJlYWN0LnVzZVN0YXRlKDUwMClcclxuXHJcbiAgICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xyXG4gICAgICAgIHNldElzUmVuZGVyKHRydWUpXHJcbiAgICAgICAgc2V0VGltZXIoTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogNSkgKiAxMDApXHJcbiAgICB9KVxyXG5cclxuICAgIGNvbnN0IGhhbmRsZU9wZW4gPSAoKSA9PiB7XHJcbiAgICAgICAgc2V0T3Blbighb3BlbilcclxuICAgIH1cclxuXHJcbiAgICBjb25zdCBoYW5kbGVEaWFsb2dDbG9zZSA9ICgpID0+IHtcclxuICAgICAgICBzZXREZWxldGVEaWFsb2coZmFsc2UpXHJcbiAgICB9XHJcblxyXG4gICAgY29uc3QgaGFuZGxlRGVsZXRlSXRlbSA9ICgpID0+IHtcclxuICAgICAgICBwcm9wcy5oYW5kbGVEZWxldGVJdGVtKGlkKVxyXG4gICAgICAgIGhhbmRsZURpYWxvZ0Nsb3NlKClcclxuICAgIH1cclxuXHJcbiAgICBjb25zdCBoYW5kbGVEaWFsb2dPcGVuID0gKCkgPT4ge1xyXG4gICAgICAgIHNldERlbGV0ZURpYWxvZyh0cnVlKVxyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IGhhbmRsZVNlbGVjdExlc3NvbiA9ICgpID0+IHtcclxuICAgICAgICBwcm9wcy5oYW5kbGVTZWxlY3RMZXNzb24oaWQpXHJcbiAgICAgICAgcHJvcHMucmVkaXJlY3QoYC9sZXNzb24vJHtpZH1gKVxyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IGhhbmRsZUNsb3NlID0gKCkgPT4ge1xyXG4gICAgICAgIHNldE9wZW4oZmFsc2UpXHJcbiAgICB9XHJcblxyXG4gICAgY29uc3QgaGFuZGxlQ2FydEFkZCA9ICgpID0+IHtcclxuICAgICAgICBjb25zdCBkYXRhID0geyBpZCwgbmFtZTogcHJvcHMudGl0bGUsIHByaWNlIH1cclxuICAgICAgICBwcm9wcy5oYW5kbGVDYXJ0QWRkKGRhdGEpXHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIChcclxuICAgICAgICA8PlxyXG4gICAgICAgICAgICA8R3JvdyBkaXJlY3Rpb249XCJ1cFwiIHRpbWVvdXQ9e3RpbWVyfSBpbj17aXNSZW5kZXJ9PlxyXG4gICAgICAgICAgICAgICAgPENhcmQgZWxldmF0aW9uPXs1fSBrZXk9e2lkfSBjbGFzc05hbWU9e2NsYXNzZXMuY2FyZH0+XHJcbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9e2NsYXNzZXMuY2hpcH0+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxDaGlwXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2xvcj1cInByaW1hcnlcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWNvbj17PERvbmVJY29uIC8+fVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGFiZWw9XCLQkiDQvNC+0LjRhSDQo9GA0L7QutCw0YVcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyaWFudD1cIm91dGxpbmVkXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNpemU9XCJzbWFsbFwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8+XHJcbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgPENhcmRBY3Rpb25BcmVhXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2xpY2s9e2hhbmRsZVNlbGVjdExlc3Nvbn1cclxuICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPXtjbGFzc2VzLmNhcmRBY3Rpb259XHJcbiAgICAgICAgICAgICAgICAgICAgPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8Q2FyZE1lZGlhXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9e2NsYXNzZXMubWVkaWF9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbWFnZT17Y292ZXJ9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aXRsZT1cImxlc3NvbiBpbWFnZVwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxDYXJkQ29udGVudCBjbGFzc05hbWU9e2NsYXNzZXMuY29udGVudH0+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8Q2FyZEhlYWRlciB0aXRsZT17dGl0bGV9IHN1YmhlYWRlcj17Y29udGVudH0gLz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxUeXBvZ3JhcGh5IHZhcmlhbnQ9XCJib2R5MlwiIGNvbXBvbmVudD1cInBcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7JyAnfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtjb250ZW50fXsnICd9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L1R5cG9ncmFwaHk+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8VHlwb2dyYXBoeVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhcmlhbnQ9XCJib2R5MlwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sb3I9XCJ0ZXh0U2Vjb25kYXJ5XCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb21wb25lbnQ9XCJwXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgID5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7JyAnfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgINGG0LXQvdCwOiB7cHJpY2V9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L1R5cG9ncmFwaHk+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvQ2FyZENvbnRlbnQ+XHJcbiAgICAgICAgICAgICAgICAgICAgPC9DYXJkQWN0aW9uQXJlYT5cclxuICAgICAgICAgICAgICAgIDwvQ2FyZD5cclxuICAgICAgICAgICAgPC9Hcm93PlxyXG4gICAgICAgIDwvPlxyXG4gICAgKVxyXG59XHJcbiIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNcIjtcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgUG9wcGVySnMgZnJvbSAncG9wcGVyLmpzJztcbmltcG9ydCB7IGNoYWluUHJvcFR5cGVzLCByZWZUeXBlLCBIVE1MRWxlbWVudFR5cGUgfSBmcm9tICdAbWF0ZXJpYWwtdWkvdXRpbHMnO1xuaW1wb3J0IHsgdXNlVGhlbWUgfSBmcm9tICdAbWF0ZXJpYWwtdWkvc3R5bGVzJztcbmltcG9ydCBQb3J0YWwgZnJvbSAnLi4vUG9ydGFsJztcbmltcG9ydCBjcmVhdGVDaGFpbmVkRnVuY3Rpb24gZnJvbSAnLi4vdXRpbHMvY3JlYXRlQ2hhaW5lZEZ1bmN0aW9uJztcbmltcG9ydCBzZXRSZWYgZnJvbSAnLi4vdXRpbHMvc2V0UmVmJztcbmltcG9ydCB1c2VGb3JrUmVmIGZyb20gJy4uL3V0aWxzL3VzZUZvcmtSZWYnO1xuXG5mdW5jdGlvbiBmbGlwUGxhY2VtZW50KHBsYWNlbWVudCwgdGhlbWUpIHtcbiAgdmFyIGRpcmVjdGlvbiA9IHRoZW1lICYmIHRoZW1lLmRpcmVjdGlvbiB8fCAnbHRyJztcblxuICBpZiAoZGlyZWN0aW9uID09PSAnbHRyJykge1xuICAgIHJldHVybiBwbGFjZW1lbnQ7XG4gIH1cblxuICBzd2l0Y2ggKHBsYWNlbWVudCkge1xuICAgIGNhc2UgJ2JvdHRvbS1lbmQnOlxuICAgICAgcmV0dXJuICdib3R0b20tc3RhcnQnO1xuXG4gICAgY2FzZSAnYm90dG9tLXN0YXJ0JzpcbiAgICAgIHJldHVybiAnYm90dG9tLWVuZCc7XG5cbiAgICBjYXNlICd0b3AtZW5kJzpcbiAgICAgIHJldHVybiAndG9wLXN0YXJ0JztcblxuICAgIGNhc2UgJ3RvcC1zdGFydCc6XG4gICAgICByZXR1cm4gJ3RvcC1lbmQnO1xuXG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiBwbGFjZW1lbnQ7XG4gIH1cbn1cblxuZnVuY3Rpb24gZ2V0QW5jaG9yRWwoYW5jaG9yRWwpIHtcbiAgcmV0dXJuIHR5cGVvZiBhbmNob3JFbCA9PT0gJ2Z1bmN0aW9uJyA/IGFuY2hvckVsKCkgOiBhbmNob3JFbDtcbn1cblxudmFyIHVzZUVuaGFuY2VkRWZmZWN0ID0gdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgPyBSZWFjdC51c2VMYXlvdXRFZmZlY3QgOiBSZWFjdC51c2VFZmZlY3Q7XG52YXIgZGVmYXVsdFBvcHBlck9wdGlvbnMgPSB7fTtcbi8qKlxuICogUG9wcGVycyByZWx5IG9uIHRoZSAzcmQgcGFydHkgbGlicmFyeSBbUG9wcGVyLmpzXShodHRwczovL3BvcHBlci5qcy5vcmcvZG9jcy92MS8pIGZvciBwb3NpdGlvbmluZy5cbiAqL1xuXG52YXIgUG9wcGVyID0gLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gUG9wcGVyKHByb3BzLCByZWYpIHtcbiAgdmFyIGFuY2hvckVsID0gcHJvcHMuYW5jaG9yRWwsXG4gICAgICBjaGlsZHJlbiA9IHByb3BzLmNoaWxkcmVuLFxuICAgICAgY29udGFpbmVyID0gcHJvcHMuY29udGFpbmVyLFxuICAgICAgX3Byb3BzJGRpc2FibGVQb3J0YWwgPSBwcm9wcy5kaXNhYmxlUG9ydGFsLFxuICAgICAgZGlzYWJsZVBvcnRhbCA9IF9wcm9wcyRkaXNhYmxlUG9ydGFsID09PSB2b2lkIDAgPyBmYWxzZSA6IF9wcm9wcyRkaXNhYmxlUG9ydGFsLFxuICAgICAgX3Byb3BzJGtlZXBNb3VudGVkID0gcHJvcHMua2VlcE1vdW50ZWQsXG4gICAgICBrZWVwTW91bnRlZCA9IF9wcm9wcyRrZWVwTW91bnRlZCA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcHJvcHMka2VlcE1vdW50ZWQsXG4gICAgICBtb2RpZmllcnMgPSBwcm9wcy5tb2RpZmllcnMsXG4gICAgICBvcGVuID0gcHJvcHMub3BlbixcbiAgICAgIF9wcm9wcyRwbGFjZW1lbnQgPSBwcm9wcy5wbGFjZW1lbnQsXG4gICAgICBpbml0aWFsUGxhY2VtZW50ID0gX3Byb3BzJHBsYWNlbWVudCA9PT0gdm9pZCAwID8gJ2JvdHRvbScgOiBfcHJvcHMkcGxhY2VtZW50LFxuICAgICAgX3Byb3BzJHBvcHBlck9wdGlvbnMgPSBwcm9wcy5wb3BwZXJPcHRpb25zLFxuICAgICAgcG9wcGVyT3B0aW9ucyA9IF9wcm9wcyRwb3BwZXJPcHRpb25zID09PSB2b2lkIDAgPyBkZWZhdWx0UG9wcGVyT3B0aW9ucyA6IF9wcm9wcyRwb3BwZXJPcHRpb25zLFxuICAgICAgcG9wcGVyUmVmUHJvcCA9IHByb3BzLnBvcHBlclJlZixcbiAgICAgIHN0eWxlID0gcHJvcHMuc3R5bGUsXG4gICAgICBfcHJvcHMkdHJhbnNpdGlvbiA9IHByb3BzLnRyYW5zaXRpb24sXG4gICAgICB0cmFuc2l0aW9uID0gX3Byb3BzJHRyYW5zaXRpb24gPT09IHZvaWQgMCA/IGZhbHNlIDogX3Byb3BzJHRyYW5zaXRpb24sXG4gICAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhwcm9wcywgW1wiYW5jaG9yRWxcIiwgXCJjaGlsZHJlblwiLCBcImNvbnRhaW5lclwiLCBcImRpc2FibGVQb3J0YWxcIiwgXCJrZWVwTW91bnRlZFwiLCBcIm1vZGlmaWVyc1wiLCBcIm9wZW5cIiwgXCJwbGFjZW1lbnRcIiwgXCJwb3BwZXJPcHRpb25zXCIsIFwicG9wcGVyUmVmXCIsIFwic3R5bGVcIiwgXCJ0cmFuc2l0aW9uXCJdKTtcblxuICB2YXIgdG9vbHRpcFJlZiA9IFJlYWN0LnVzZVJlZihudWxsKTtcbiAgdmFyIG93blJlZiA9IHVzZUZvcmtSZWYodG9vbHRpcFJlZiwgcmVmKTtcbiAgdmFyIHBvcHBlclJlZiA9IFJlYWN0LnVzZVJlZihudWxsKTtcbiAgdmFyIGhhbmRsZVBvcHBlclJlZiA9IHVzZUZvcmtSZWYocG9wcGVyUmVmLCBwb3BwZXJSZWZQcm9wKTtcbiAgdmFyIGhhbmRsZVBvcHBlclJlZlJlZiA9IFJlYWN0LnVzZVJlZihoYW5kbGVQb3BwZXJSZWYpO1xuICB1c2VFbmhhbmNlZEVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgaGFuZGxlUG9wcGVyUmVmUmVmLmN1cnJlbnQgPSBoYW5kbGVQb3BwZXJSZWY7XG4gIH0sIFtoYW5kbGVQb3BwZXJSZWZdKTtcbiAgUmVhY3QudXNlSW1wZXJhdGl2ZUhhbmRsZShwb3BwZXJSZWZQcm9wLCBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHBvcHBlclJlZi5jdXJyZW50O1xuICB9LCBbXSk7XG5cbiAgdmFyIF9SZWFjdCR1c2VTdGF0ZSA9IFJlYWN0LnVzZVN0YXRlKHRydWUpLFxuICAgICAgZXhpdGVkID0gX1JlYWN0JHVzZVN0YXRlWzBdLFxuICAgICAgc2V0RXhpdGVkID0gX1JlYWN0JHVzZVN0YXRlWzFdO1xuXG4gIHZhciB0aGVtZSA9IHVzZVRoZW1lKCk7XG4gIHZhciBydGxQbGFjZW1lbnQgPSBmbGlwUGxhY2VtZW50KGluaXRpYWxQbGFjZW1lbnQsIHRoZW1lKTtcbiAgLyoqXG4gICAqIHBsYWNlbWVudCBpbml0aWFsaXplZCBmcm9tIHByb3AgYnV0IGNhbiBjaGFuZ2UgZHVyaW5nIGxpZmV0aW1lIGlmIG1vZGlmaWVycy5mbGlwLlxuICAgKiBtb2RpZmllcnMuZmxpcCBpcyBlc3NlbnRpYWxseSBhIGZsaXAgZm9yIGNvbnRyb2xsZWQvdW5jb250cm9sbGVkIGJlaGF2aW9yXG4gICAqL1xuXG4gIHZhciBfUmVhY3QkdXNlU3RhdGUyID0gUmVhY3QudXNlU3RhdGUocnRsUGxhY2VtZW50KSxcbiAgICAgIHBsYWNlbWVudCA9IF9SZWFjdCR1c2VTdGF0ZTJbMF0sXG4gICAgICBzZXRQbGFjZW1lbnQgPSBfUmVhY3QkdXNlU3RhdGUyWzFdO1xuXG4gIFJlYWN0LnVzZUVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgaWYgKHBvcHBlclJlZi5jdXJyZW50KSB7XG4gICAgICBwb3BwZXJSZWYuY3VycmVudC51cGRhdGUoKTtcbiAgICB9XG4gIH0pO1xuICB2YXIgaGFuZGxlT3BlbiA9IFJlYWN0LnVzZUNhbGxiYWNrKGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoIXRvb2x0aXBSZWYuY3VycmVudCB8fCAhYW5jaG9yRWwgfHwgIW9wZW4pIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAocG9wcGVyUmVmLmN1cnJlbnQpIHtcbiAgICAgIHBvcHBlclJlZi5jdXJyZW50LmRlc3Ryb3koKTtcbiAgICAgIGhhbmRsZVBvcHBlclJlZlJlZi5jdXJyZW50KG51bGwpO1xuICAgIH1cblxuICAgIHZhciBoYW5kbGVQb3BwZXJVcGRhdGUgPSBmdW5jdGlvbiBoYW5kbGVQb3BwZXJVcGRhdGUoZGF0YSkge1xuICAgICAgc2V0UGxhY2VtZW50KGRhdGEucGxhY2VtZW50KTtcbiAgICB9O1xuXG4gICAgdmFyIHJlc29sdmVkQW5jaG9yRWwgPSBnZXRBbmNob3JFbChhbmNob3JFbCk7XG5cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgaWYgKHJlc29sdmVkQW5jaG9yRWwgJiYgcmVzb2x2ZWRBbmNob3JFbC5ub2RlVHlwZSA9PT0gMSkge1xuICAgICAgICB2YXIgYm94ID0gcmVzb2x2ZWRBbmNob3JFbC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcblxuICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICd0ZXN0JyAmJiBib3gudG9wID09PSAwICYmIGJveC5sZWZ0ID09PSAwICYmIGJveC5yaWdodCA9PT0gMCAmJiBib3guYm90dG9tID09PSAwKSB7XG4gICAgICAgICAgY29uc29sZS53YXJuKFsnTWF0ZXJpYWwtVUk6IFRoZSBgYW5jaG9yRWxgIHByb3AgcHJvdmlkZWQgdG8gdGhlIGNvbXBvbmVudCBpcyBpbnZhbGlkLicsICdUaGUgYW5jaG9yIGVsZW1lbnQgc2hvdWxkIGJlIHBhcnQgb2YgdGhlIGRvY3VtZW50IGxheW91dC4nLCBcIk1ha2Ugc3VyZSB0aGUgZWxlbWVudCBpcyBwcmVzZW50IGluIHRoZSBkb2N1bWVudCBvciB0aGF0IGl0J3Mgbm90IGRpc3BsYXkgbm9uZS5cIl0uam9pbignXFxuJykpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFyIHBvcHBlciA9IG5ldyBQb3BwZXJKcyhnZXRBbmNob3JFbChhbmNob3JFbCksIHRvb2x0aXBSZWYuY3VycmVudCwgX2V4dGVuZHMoe1xuICAgICAgcGxhY2VtZW50OiBydGxQbGFjZW1lbnRcbiAgICB9LCBwb3BwZXJPcHRpb25zLCB7XG4gICAgICBtb2RpZmllcnM6IF9leHRlbmRzKHt9LCBkaXNhYmxlUG9ydGFsID8ge30gOiB7XG4gICAgICAgIC8vIEl0J3MgdXNpbmcgc2Nyb2xsUGFyZW50IGJ5IGRlZmF1bHQsIHdlIGNhbiB1c2UgdGhlIHZpZXdwb3J0IHdoZW4gdXNpbmcgYSBwb3J0YWwuXG4gICAgICAgIHByZXZlbnRPdmVyZmxvdzoge1xuICAgICAgICAgIGJvdW5kYXJpZXNFbGVtZW50OiAnd2luZG93J1xuICAgICAgICB9XG4gICAgICB9LCBtb2RpZmllcnMsIHBvcHBlck9wdGlvbnMubW9kaWZpZXJzKSxcbiAgICAgIC8vIFdlIGNvdWxkIGhhdmUgYmVlbiB1c2luZyBhIGN1c3RvbSBtb2RpZmllciBsaWtlIHJlYWN0LXBvcHBlciBpcyBkb2luZy5cbiAgICAgIC8vIEJ1dCBpdCBzZWVtcyB0aGlzIGlzIHRoZSBiZXN0IHB1YmxpYyBBUEkgZm9yIHRoaXMgdXNlIGNhc2UuXG4gICAgICBvbkNyZWF0ZTogY3JlYXRlQ2hhaW5lZEZ1bmN0aW9uKGhhbmRsZVBvcHBlclVwZGF0ZSwgcG9wcGVyT3B0aW9ucy5vbkNyZWF0ZSksXG4gICAgICBvblVwZGF0ZTogY3JlYXRlQ2hhaW5lZEZ1bmN0aW9uKGhhbmRsZVBvcHBlclVwZGF0ZSwgcG9wcGVyT3B0aW9ucy5vblVwZGF0ZSlcbiAgICB9KSk7XG4gICAgaGFuZGxlUG9wcGVyUmVmUmVmLmN1cnJlbnQocG9wcGVyKTtcbiAgfSwgW2FuY2hvckVsLCBkaXNhYmxlUG9ydGFsLCBtb2RpZmllcnMsIG9wZW4sIHJ0bFBsYWNlbWVudCwgcG9wcGVyT3B0aW9uc10pO1xuICB2YXIgaGFuZGxlUmVmID0gUmVhY3QudXNlQ2FsbGJhY2soZnVuY3Rpb24gKG5vZGUpIHtcbiAgICBzZXRSZWYob3duUmVmLCBub2RlKTtcbiAgICBoYW5kbGVPcGVuKCk7XG4gIH0sIFtvd25SZWYsIGhhbmRsZU9wZW5dKTtcblxuICB2YXIgaGFuZGxlRW50ZXIgPSBmdW5jdGlvbiBoYW5kbGVFbnRlcigpIHtcbiAgICBzZXRFeGl0ZWQoZmFsc2UpO1xuICB9O1xuXG4gIHZhciBoYW5kbGVDbG9zZSA9IGZ1bmN0aW9uIGhhbmRsZUNsb3NlKCkge1xuICAgIGlmICghcG9wcGVyUmVmLmN1cnJlbnQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBwb3BwZXJSZWYuY3VycmVudC5kZXN0cm95KCk7XG4gICAgaGFuZGxlUG9wcGVyUmVmUmVmLmN1cnJlbnQobnVsbCk7XG4gIH07XG5cbiAgdmFyIGhhbmRsZUV4aXRlZCA9IGZ1bmN0aW9uIGhhbmRsZUV4aXRlZCgpIHtcbiAgICBzZXRFeGl0ZWQodHJ1ZSk7XG4gICAgaGFuZGxlQ2xvc2UoKTtcbiAgfTtcblxuICBSZWFjdC51c2VFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICBoYW5kbGVDbG9zZSgpO1xuICAgIH07XG4gIH0sIFtdKTtcbiAgUmVhY3QudXNlRWZmZWN0KGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoIW9wZW4gJiYgIXRyYW5zaXRpb24pIHtcbiAgICAgIC8vIE90aGVyd2lzZSBoYW5kbGVFeGl0ZWQgd2lsbCBjYWxsIHRoaXMuXG4gICAgICBoYW5kbGVDbG9zZSgpO1xuICAgIH1cbiAgfSwgW29wZW4sIHRyYW5zaXRpb25dKTtcblxuICBpZiAoIWtlZXBNb3VudGVkICYmICFvcGVuICYmICghdHJhbnNpdGlvbiB8fCBleGl0ZWQpKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICB2YXIgY2hpbGRQcm9wcyA9IHtcbiAgICBwbGFjZW1lbnQ6IHBsYWNlbWVudFxuICB9O1xuXG4gIGlmICh0cmFuc2l0aW9uKSB7XG4gICAgY2hpbGRQcm9wcy5UcmFuc2l0aW9uUHJvcHMgPSB7XG4gICAgICBpbjogb3BlbixcbiAgICAgIG9uRW50ZXI6IGhhbmRsZUVudGVyLFxuICAgICAgb25FeGl0ZWQ6IGhhbmRsZUV4aXRlZFxuICAgIH07XG4gIH1cblxuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoUG9ydGFsLCB7XG4gICAgZGlzYWJsZVBvcnRhbDogZGlzYWJsZVBvcnRhbCxcbiAgICBjb250YWluZXI6IGNvbnRhaW5lclxuICB9LCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCBfZXh0ZW5kcyh7XG4gICAgcmVmOiBoYW5kbGVSZWYsXG4gICAgcm9sZTogXCJ0b29sdGlwXCJcbiAgfSwgb3RoZXIsIHtcbiAgICBzdHlsZTogX2V4dGVuZHMoe1xuICAgICAgLy8gUHJldmVudHMgc2Nyb2xsIGlzc3VlLCB3YWl0aW5nIGZvciBQb3BwZXIuanMgdG8gYWRkIHRoaXMgc3R5bGUgb25jZSBpbml0aWF0ZWQuXG4gICAgICBwb3NpdGlvbjogJ2ZpeGVkJyxcbiAgICAgIC8vIEZpeCBQb3BwZXIuanMgZGlzcGxheSBpc3N1ZVxuICAgICAgdG9wOiAwLFxuICAgICAgbGVmdDogMCxcbiAgICAgIGRpc3BsYXk6ICFvcGVuICYmIGtlZXBNb3VudGVkICYmICF0cmFuc2l0aW9uID8gJ25vbmUnIDogbnVsbFxuICAgIH0sIHN0eWxlKVxuICB9KSwgdHlwZW9mIGNoaWxkcmVuID09PSAnZnVuY3Rpb24nID8gY2hpbGRyZW4oY2hpbGRQcm9wcykgOiBjaGlsZHJlbikpO1xufSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBQb3BwZXIucHJvcFR5cGVzID0ge1xuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBXYXJuaW5nIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIC8vIHwgVGhlc2UgUHJvcFR5cGVzIGFyZSBnZW5lcmF0ZWQgZnJvbSB0aGUgVHlwZVNjcmlwdCB0eXBlIGRlZmluaXRpb25zIHxcbiAgLy8gfCAgICAgVG8gdXBkYXRlIHRoZW0gZWRpdCB0aGUgZC50cyBmaWxlIGFuZCBydW4gXCJ5YXJuIHByb3B0eXBlc1wiICAgICB8XG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuICAvKipcbiAgICogQSBIVE1MIGVsZW1lbnQsIFtyZWZlcmVuY2VPYmplY3RdKGh0dHBzOi8vcG9wcGVyLmpzLm9yZy9kb2NzL3YxLyNyZWZlcmVuY2VPYmplY3QpLFxuICAgKiBvciBhIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyBlaXRoZXIuXG4gICAqIEl0J3MgdXNlZCB0byBzZXQgdGhlIHBvc2l0aW9uIG9mIHRoZSBwb3BwZXIuXG4gICAqIFRoZSByZXR1cm4gdmFsdWUgd2lsbCBwYXNzZWQgYXMgdGhlIHJlZmVyZW5jZSBvYmplY3Qgb2YgdGhlIFBvcHBlciBpbnN0YW5jZS5cbiAgICovXG4gIGFuY2hvckVsOiBjaGFpblByb3BUeXBlcyhQcm9wVHlwZXMub25lT2ZUeXBlKFtIVE1MRWxlbWVudFR5cGUsIFByb3BUeXBlcy5vYmplY3QsIFByb3BUeXBlcy5mdW5jXSksIGZ1bmN0aW9uIChwcm9wcykge1xuICAgIGlmIChwcm9wcy5vcGVuKSB7XG4gICAgICB2YXIgcmVzb2x2ZWRBbmNob3JFbCA9IGdldEFuY2hvckVsKHByb3BzLmFuY2hvckVsKTtcblxuICAgICAgaWYgKHJlc29sdmVkQW5jaG9yRWwgJiYgcmVzb2x2ZWRBbmNob3JFbC5ub2RlVHlwZSA9PT0gMSkge1xuICAgICAgICB2YXIgYm94ID0gcmVzb2x2ZWRBbmNob3JFbC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcblxuICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICd0ZXN0JyAmJiBib3gudG9wID09PSAwICYmIGJveC5sZWZ0ID09PSAwICYmIGJveC5yaWdodCA9PT0gMCAmJiBib3guYm90dG9tID09PSAwKSB7XG4gICAgICAgICAgcmV0dXJuIG5ldyBFcnJvcihbJ01hdGVyaWFsLVVJOiBUaGUgYGFuY2hvckVsYCBwcm9wIHByb3ZpZGVkIHRvIHRoZSBjb21wb25lbnQgaXMgaW52YWxpZC4nLCAnVGhlIGFuY2hvciBlbGVtZW50IHNob3VsZCBiZSBwYXJ0IG9mIHRoZSBkb2N1bWVudCBsYXlvdXQuJywgXCJNYWtlIHN1cmUgdGhlIGVsZW1lbnQgaXMgcHJlc2VudCBpbiB0aGUgZG9jdW1lbnQgb3IgdGhhdCBpdCdzIG5vdCBkaXNwbGF5IG5vbmUuXCJdLmpvaW4oJ1xcbicpKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmICghcmVzb2x2ZWRBbmNob3JFbCB8fCB0eXBlb2YgcmVzb2x2ZWRBbmNob3JFbC5jbGllbnRXaWR0aCAhPT0gJ251bWJlcicgfHwgdHlwZW9mIHJlc29sdmVkQW5jaG9yRWwuY2xpZW50SGVpZ2h0ICE9PSAnbnVtYmVyJyB8fCB0eXBlb2YgcmVzb2x2ZWRBbmNob3JFbC5nZXRCb3VuZGluZ0NsaWVudFJlY3QgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBFcnJvcihbJ01hdGVyaWFsLVVJOiBUaGUgYGFuY2hvckVsYCBwcm9wIHByb3ZpZGVkIHRvIHRoZSBjb21wb25lbnQgaXMgaW52YWxpZC4nLCAnSXQgc2hvdWxkIGJlIGFuIEhUTUwgZWxlbWVudCBpbnN0YW5jZSBvciBhIHJlZmVyZW5jZU9iamVjdCAnLCAnKGh0dHBzOi8vcG9wcGVyLmpzLm9yZy9kb2NzL3YxLyNyZWZlcmVuY2VPYmplY3QpLiddLmpvaW4oJ1xcbicpKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gbnVsbDtcbiAgfSksXG5cbiAgLyoqXG4gICAqIFBvcHBlciByZW5kZXIgZnVuY3Rpb24gb3Igbm9kZS5cbiAgICovXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXNcbiAgLyogQHR5cGVzY3JpcHQtdG8tcHJvcHR5cGVzLWlnbm9yZSAqL1xuICAub25lT2ZUeXBlKFtQcm9wVHlwZXMubm9kZSwgUHJvcFR5cGVzLmZ1bmNdKS5pc1JlcXVpcmVkLFxuXG4gIC8qKlxuICAgKiBBIEhUTUwgZWxlbWVudCwgY29tcG9uZW50IGluc3RhbmNlLCBvciBmdW5jdGlvbiB0aGF0IHJldHVybnMgZWl0aGVyLlxuICAgKiBUaGUgYGNvbnRhaW5lcmAgd2lsbCBoYXZlIHRoZSBwb3J0YWwgY2hpbGRyZW4gYXBwZW5kZWQgdG8gaXQuXG4gICAqXG4gICAqIEJ5IGRlZmF1bHQsIGl0IHVzZXMgdGhlIGJvZHkgb2YgdGhlIHRvcC1sZXZlbCBkb2N1bWVudCBvYmplY3QsXG4gICAqIHNvIGl0J3Mgc2ltcGx5IGBkb2N1bWVudC5ib2R5YCBtb3N0IG9mIHRoZSB0aW1lLlxuICAgKi9cbiAgY29udGFpbmVyOiBQcm9wVHlwZXNcbiAgLyogQHR5cGVzY3JpcHQtdG8tcHJvcHR5cGVzLWlnbm9yZSAqL1xuICAub25lT2ZUeXBlKFtIVE1MRWxlbWVudFR5cGUsIFByb3BUeXBlcy5pbnN0YW5jZU9mKFJlYWN0LkNvbXBvbmVudCksIFByb3BUeXBlcy5mdW5jXSksXG5cbiAgLyoqXG4gICAqIERpc2FibGUgdGhlIHBvcnRhbCBiZWhhdmlvci5cbiAgICogVGhlIGNoaWxkcmVuIHN0YXkgd2l0aGluIGl0J3MgcGFyZW50IERPTSBoaWVyYXJjaHkuXG4gICAqL1xuICBkaXNhYmxlUG9ydGFsOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogQWx3YXlzIGtlZXAgdGhlIGNoaWxkcmVuIGluIHRoZSBET00uXG4gICAqIFRoaXMgcHJvcCBjYW4gYmUgdXNlZnVsIGluIFNFTyBzaXR1YXRpb24gb3JcbiAgICogd2hlbiB5b3Ugd2FudCB0byBtYXhpbWl6ZSB0aGUgcmVzcG9uc2l2ZW5lc3Mgb2YgdGhlIFBvcHBlci5cbiAgICovXG4gIGtlZXBNb3VudGVkOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogUG9wcGVyLmpzIGlzIGJhc2VkIG9uIGEgXCJwbHVnaW4tbGlrZVwiIGFyY2hpdGVjdHVyZSxcbiAgICogbW9zdCBvZiBpdHMgZmVhdHVyZXMgYXJlIGZ1bGx5IGVuY2Fwc3VsYXRlZCBcIm1vZGlmaWVyc1wiLlxuICAgKlxuICAgKiBBIG1vZGlmaWVyIGlzIGEgZnVuY3Rpb24gdGhhdCBpcyBjYWxsZWQgZWFjaCB0aW1lIFBvcHBlci5qcyBuZWVkcyB0b1xuICAgKiBjb21wdXRlIHRoZSBwb3NpdGlvbiBvZiB0aGUgcG9wcGVyLlxuICAgKiBGb3IgdGhpcyByZWFzb24sIG1vZGlmaWVycyBzaG91bGQgYmUgdmVyeSBwZXJmb3JtYW50IHRvIGF2b2lkIGJvdHRsZW5lY2tzLlxuICAgKiBUbyBsZWFybiBob3cgdG8gY3JlYXRlIGEgbW9kaWZpZXIsIFtyZWFkIHRoZSBtb2RpZmllcnMgZG9jdW1lbnRhdGlvbl0oaHR0cHM6Ly9wb3BwZXIuanMub3JnL2RvY3MvdjEvI21vZGlmaWVycykuXG4gICAqL1xuICBtb2RpZmllcnM6IFByb3BUeXBlcy5vYmplY3QsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIHBvcHBlciBpcyB2aXNpYmxlLlxuICAgKi9cbiAgb3BlbjogUHJvcFR5cGVzLmJvb2wuaXNSZXF1aXJlZCxcblxuICAvKipcbiAgICogUG9wcGVyIHBsYWNlbWVudC5cbiAgICovXG4gIHBsYWNlbWVudDogUHJvcFR5cGVzLm9uZU9mKFsnYm90dG9tLWVuZCcsICdib3R0b20tc3RhcnQnLCAnYm90dG9tJywgJ2xlZnQtZW5kJywgJ2xlZnQtc3RhcnQnLCAnbGVmdCcsICdyaWdodC1lbmQnLCAncmlnaHQtc3RhcnQnLCAncmlnaHQnLCAndG9wLWVuZCcsICd0b3Atc3RhcnQnLCAndG9wJ10pLFxuXG4gIC8qKlxuICAgKiBPcHRpb25zIHByb3ZpZGVkIHRvIHRoZSBbYHBvcHBlci5qc2BdKGh0dHBzOi8vcG9wcGVyLmpzLm9yZy9kb2NzL3YxLykgaW5zdGFuY2UuXG4gICAqL1xuICBwb3BwZXJPcHRpb25zOiBQcm9wVHlwZXMub2JqZWN0LFxuXG4gIC8qKlxuICAgKiBBIHJlZiB0aGF0IHBvaW50cyB0byB0aGUgdXNlZCBwb3BwZXIgaW5zdGFuY2UuXG4gICAqL1xuICBwb3BwZXJSZWY6IHJlZlR5cGUsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIHN0eWxlOiBQcm9wVHlwZXMub2JqZWN0LFxuXG4gIC8qKlxuICAgKiBIZWxwIHN1cHBvcnRpbmcgYSByZWFjdC10cmFuc2l0aW9uLWdyb3VwL1RyYW5zaXRpb24gY29tcG9uZW50LlxuICAgKi9cbiAgdHJhbnNpdGlvbjogUHJvcFR5cGVzLmJvb2xcbn0gOiB2b2lkIDA7XG5leHBvcnQgZGVmYXVsdCBQb3BwZXI7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc1wiO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBjbHN4IGZyb20gJ2Nsc3gnO1xuaW1wb3J0IHdpdGhTdHlsZXMgZnJvbSAnLi4vc3R5bGVzL3dpdGhTdHlsZXMnO1xuaW1wb3J0IGNhcGl0YWxpemUgZnJvbSAnLi4vdXRpbHMvY2FwaXRhbGl6ZSc7XG5leHBvcnQgdmFyIHN0eWxlcyA9IGZ1bmN0aW9uIHN0eWxlcyh0aGVtZSkge1xuICByZXR1cm4ge1xuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQuICovXG4gICAgcm9vdDoge1xuICAgICAgYm94U2l6aW5nOiAnYm9yZGVyLWJveCcsXG4gICAgICBsaW5lSGVpZ2h0OiAnNDhweCcsXG4gICAgICBsaXN0U3R5bGU6ICdub25lJyxcbiAgICAgIGNvbG9yOiB0aGVtZS5wYWxldHRlLnRleHQuc2Vjb25kYXJ5LFxuICAgICAgZm9udEZhbWlseTogdGhlbWUudHlwb2dyYXBoeS5mb250RmFtaWx5LFxuICAgICAgZm9udFdlaWdodDogdGhlbWUudHlwb2dyYXBoeS5mb250V2VpZ2h0TWVkaXVtLFxuICAgICAgZm9udFNpemU6IHRoZW1lLnR5cG9ncmFwaHkucHhUb1JlbSgxNClcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgY29sb3I9XCJwcmltYXJ5XCJgLiAqL1xuICAgIGNvbG9yUHJpbWFyeToge1xuICAgICAgY29sb3I6IHRoZW1lLnBhbGV0dGUucHJpbWFyeS5tYWluXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGNvbG9yPVwiaW5oZXJpdFwiYC4gKi9cbiAgICBjb2xvckluaGVyaXQ6IHtcbiAgICAgIGNvbG9yOiAnaW5oZXJpdCdcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIGlubmVyIGBjb21wb25lbnRgIGVsZW1lbnQgaWYgYGRpc2FibGVHdXR0ZXJzPXtmYWxzZX1gLiAqL1xuICAgIGd1dHRlcnM6IHtcbiAgICAgIHBhZGRpbmdMZWZ0OiAxNixcbiAgICAgIHBhZGRpbmdSaWdodDogMTZcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgaW5zZXQ9e3RydWV9YC4gKi9cbiAgICBpbnNldDoge1xuICAgICAgcGFkZGluZ0xlZnQ6IDcyXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGRpc2FibGVTdGlja3k9e2ZhbHNlfWAuICovXG4gICAgc3RpY2t5OiB7XG4gICAgICBwb3NpdGlvbjogJ3N0aWNreScsXG4gICAgICB0b3A6IDAsXG4gICAgICB6SW5kZXg6IDEsXG4gICAgICBiYWNrZ3JvdW5kQ29sb3I6ICdpbmhlcml0J1xuICAgIH1cbiAgfTtcbn07XG52YXIgTGlzdFN1YmhlYWRlciA9IC8qI19fUFVSRV9fKi9SZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIExpc3RTdWJoZWFkZXIocHJvcHMsIHJlZikge1xuICB2YXIgY2xhc3NlcyA9IHByb3BzLmNsYXNzZXMsXG4gICAgICBjbGFzc05hbWUgPSBwcm9wcy5jbGFzc05hbWUsXG4gICAgICBfcHJvcHMkY29sb3IgPSBwcm9wcy5jb2xvcixcbiAgICAgIGNvbG9yID0gX3Byb3BzJGNvbG9yID09PSB2b2lkIDAgPyAnZGVmYXVsdCcgOiBfcHJvcHMkY29sb3IsXG4gICAgICBfcHJvcHMkY29tcG9uZW50ID0gcHJvcHMuY29tcG9uZW50LFxuICAgICAgQ29tcG9uZW50ID0gX3Byb3BzJGNvbXBvbmVudCA9PT0gdm9pZCAwID8gJ2xpJyA6IF9wcm9wcyRjb21wb25lbnQsXG4gICAgICBfcHJvcHMkZGlzYWJsZUd1dHRlcnMgPSBwcm9wcy5kaXNhYmxlR3V0dGVycyxcbiAgICAgIGRpc2FibGVHdXR0ZXJzID0gX3Byb3BzJGRpc2FibGVHdXR0ZXJzID09PSB2b2lkIDAgPyBmYWxzZSA6IF9wcm9wcyRkaXNhYmxlR3V0dGVycyxcbiAgICAgIF9wcm9wcyRkaXNhYmxlU3RpY2t5ID0gcHJvcHMuZGlzYWJsZVN0aWNreSxcbiAgICAgIGRpc2FibGVTdGlja3kgPSBfcHJvcHMkZGlzYWJsZVN0aWNreSA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcHJvcHMkZGlzYWJsZVN0aWNreSxcbiAgICAgIF9wcm9wcyRpbnNldCA9IHByb3BzLmluc2V0LFxuICAgICAgaW5zZXQgPSBfcHJvcHMkaW5zZXQgPT09IHZvaWQgMCA/IGZhbHNlIDogX3Byb3BzJGluc2V0LFxuICAgICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMocHJvcHMsIFtcImNsYXNzZXNcIiwgXCJjbGFzc05hbWVcIiwgXCJjb2xvclwiLCBcImNvbXBvbmVudFwiLCBcImRpc2FibGVHdXR0ZXJzXCIsIFwiZGlzYWJsZVN0aWNreVwiLCBcImluc2V0XCJdKTtcblxuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoQ29tcG9uZW50LCBfZXh0ZW5kcyh7XG4gICAgY2xhc3NOYW1lOiBjbHN4KGNsYXNzZXMucm9vdCwgY2xhc3NOYW1lLCBjb2xvciAhPT0gJ2RlZmF1bHQnICYmIGNsYXNzZXNbXCJjb2xvclwiLmNvbmNhdChjYXBpdGFsaXplKGNvbG9yKSldLCBpbnNldCAmJiBjbGFzc2VzLmluc2V0LCAhZGlzYWJsZVN0aWNreSAmJiBjbGFzc2VzLnN0aWNreSwgIWRpc2FibGVHdXR0ZXJzICYmIGNsYXNzZXMuZ3V0dGVycyksXG4gICAgcmVmOiByZWZcbiAgfSwgb3RoZXIpKTtcbn0pO1xucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gTGlzdFN1YmhlYWRlci5wcm9wVHlwZXMgPSB7XG4gIC8qKlxuICAgKiBUaGUgY29udGVudCBvZiB0aGUgY29tcG9uZW50LlxuICAgKi9cbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuXG4gIC8qKlxuICAgKiBPdmVycmlkZSBvciBleHRlbmQgdGhlIHN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAqIFNlZSBbQ1NTIEFQSV0oI2NzcykgYmVsb3cgZm9yIG1vcmUgZGV0YWlscy5cbiAgICovXG4gIGNsYXNzZXM6IFByb3BUeXBlcy5vYmplY3QuaXNSZXF1aXJlZCxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBUaGUgY29sb3Igb2YgdGhlIGNvbXBvbmVudC4gSXQgc3VwcG9ydHMgdGhvc2UgdGhlbWUgY29sb3JzIHRoYXQgbWFrZSBzZW5zZSBmb3IgdGhpcyBjb21wb25lbnQuXG4gICAqL1xuICBjb2xvcjogUHJvcFR5cGVzLm9uZU9mKFsnZGVmYXVsdCcsICdwcmltYXJ5JywgJ2luaGVyaXQnXSksXG5cbiAgLyoqXG4gICAqIFRoZSBjb21wb25lbnQgdXNlZCBmb3IgdGhlIHJvb3Qgbm9kZS5cbiAgICogRWl0aGVyIGEgc3RyaW5nIHRvIHVzZSBhIEhUTUwgZWxlbWVudCBvciBhIGNvbXBvbmVudC5cbiAgICovXG4gIGNvbXBvbmVudDogUHJvcFR5cGVzXG4gIC8qIEB0eXBlc2NyaXB0LXRvLXByb3B0eXBlcy1pZ25vcmUgKi9cbiAgLmVsZW1lbnRUeXBlLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBMaXN0IFN1YmhlYWRlciB3aWxsIG5vdCBoYXZlIGd1dHRlcnMuXG4gICAqL1xuICBkaXNhYmxlR3V0dGVyczogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIExpc3QgU3ViaGVhZGVyIHdpbGwgbm90IHN0aWNrIHRvIHRoZSB0b3AgZHVyaW5nIHNjcm9sbC5cbiAgICovXG4gIGRpc2FibGVTdGlja3k6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBMaXN0IFN1YmhlYWRlciB3aWxsIGJlIGluZGVudGVkLlxuICAgKi9cbiAgaW5zZXQ6IFByb3BUeXBlcy5ib29sXG59IDogdm9pZCAwO1xuZXhwb3J0IGRlZmF1bHQgd2l0aFN0eWxlcyhzdHlsZXMsIHtcbiAgbmFtZTogJ011aUxpc3RTdWJoZWFkZXInXG59KShMaXN0U3ViaGVhZGVyKTsiLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBjcmVhdGVTdmdJY29uIH0gZnJvbSAnQG1hdGVyaWFsLXVpL2NvcmUvdXRpbHMnO1xuLyoqXG4gKiBAaWdub3JlIC0gaW50ZXJuYWwgY29tcG9uZW50LlxuICovXG5cbmV4cG9ydCBkZWZhdWx0IGNyZWF0ZVN2Z0ljb24oIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwicGF0aFwiLCB7XG4gIGQ6IFwiTTE5IDYuNDFMMTcuNTkgNSAxMiAxMC41OSA2LjQxIDUgNSA2LjQxIDEwLjU5IDEyIDUgMTcuNTkgNi40MSAxOSAxMiAxMy40MSAxNy41OSAxOSAxOSAxNy41OSAxMy40MSAxMnpcIlxufSksICdDbG9zZScpOyIsImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IGNyZWF0ZVN2Z0ljb24gfSBmcm9tICdAbWF0ZXJpYWwtdWkvY29yZS91dGlscyc7XG4vKipcbiAqIEBpZ25vcmUgLSBpbnRlcm5hbCBjb21wb25lbnQuXG4gKi9cblxuZXhwb3J0IGRlZmF1bHQgY3JlYXRlU3ZnSWNvbiggLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJwYXRoXCIsIHtcbiAgZDogXCJNNyAxMGw1IDUgNS01elwiXG59KSwgJ0Fycm93RHJvcERvd24nKTsiLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG4vKipcbiAqIFByaXZhdGUgbW9kdWxlIHJlc2VydmVkIGZvciBAbWF0ZXJpYWwtdWkveCBwYWNrYWdlcy5cbiAqL1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB1c2VJZChpZE92ZXJyaWRlKSB7XG4gIHZhciBfUmVhY3QkdXNlU3RhdGUgPSBSZWFjdC51c2VTdGF0ZShpZE92ZXJyaWRlKSxcbiAgICAgIGRlZmF1bHRJZCA9IF9SZWFjdCR1c2VTdGF0ZVswXSxcbiAgICAgIHNldERlZmF1bHRJZCA9IF9SZWFjdCR1c2VTdGF0ZVsxXTtcblxuICB2YXIgaWQgPSBpZE92ZXJyaWRlIHx8IGRlZmF1bHRJZDtcbiAgUmVhY3QudXNlRWZmZWN0KGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoZGVmYXVsdElkID09IG51bGwpIHtcbiAgICAgIC8vIEZhbGxiYWNrIHRvIHRoaXMgZGVmYXVsdCBpZCB3aGVuIHBvc3NpYmxlLlxuICAgICAgLy8gVXNlIHRoZSByYW5kb20gdmFsdWUgZm9yIGNsaWVudC1zaWRlIHJlbmRlcmluZyBvbmx5LlxuICAgICAgLy8gV2UgY2FuJ3QgdXNlIGl0IHNlcnZlci1zaWRlLlxuICAgICAgc2V0RGVmYXVsdElkKFwibXVpLVwiLmNvbmNhdChNYXRoLnJvdW5kKE1hdGgucmFuZG9tKCkgKiAxZTUpKSk7XG4gICAgfVxuICB9LCBbZGVmYXVsdElkXSk7XG4gIHJldHVybiBpZDtcbn0iLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfc2xpY2VkVG9BcnJheSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vc2xpY2VkVG9BcnJheVwiO1xuaW1wb3J0IF90eXBlb2YgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL3R5cGVvZlwiO1xuXG4vKiBlc2xpbnQtZGlzYWJsZSBuby1jb25zdGFudC1jb25kaXRpb24gKi9cbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IHNldFJlZiwgdXNlRXZlbnRDYWxsYmFjaywgdXNlQ29udHJvbGxlZCwgdW5zdGFibGVfdXNlSWQgYXMgdXNlSWQgfSBmcm9tICdAbWF0ZXJpYWwtdWkvY29yZS91dGlscyc7IC8vIGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzk5MDkwNC9yZW1vdmUtYWNjZW50cy1kaWFjcml0aWNzLWluLWEtc3RyaW5nLWluLWphdmFzY3JpcHRcbi8vIEdpdmUgdXAgb24gSUUgMTEgc3VwcG9ydCBmb3IgdGhpcyBmZWF0dXJlXG5cbmZ1bmN0aW9uIHN0cmlwRGlhY3JpdGljcyhzdHJpbmcpIHtcbiAgcmV0dXJuIHR5cGVvZiBzdHJpbmcubm9ybWFsaXplICE9PSAndW5kZWZpbmVkJyA/IHN0cmluZy5ub3JtYWxpemUoJ05GRCcpLnJlcGxhY2UoL1tcXHUwMzAwLVxcdTAzNmZdL2csICcnKSA6IHN0cmluZztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUZpbHRlck9wdGlvbnMoKSB7XG4gIHZhciBjb25maWcgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHt9O1xuICB2YXIgX2NvbmZpZyRpZ25vcmVBY2NlbnRzID0gY29uZmlnLmlnbm9yZUFjY2VudHMsXG4gICAgICBpZ25vcmVBY2NlbnRzID0gX2NvbmZpZyRpZ25vcmVBY2NlbnRzID09PSB2b2lkIDAgPyB0cnVlIDogX2NvbmZpZyRpZ25vcmVBY2NlbnRzLFxuICAgICAgX2NvbmZpZyRpZ25vcmVDYXNlID0gY29uZmlnLmlnbm9yZUNhc2UsXG4gICAgICBpZ25vcmVDYXNlID0gX2NvbmZpZyRpZ25vcmVDYXNlID09PSB2b2lkIDAgPyB0cnVlIDogX2NvbmZpZyRpZ25vcmVDYXNlLFxuICAgICAgbGltaXQgPSBjb25maWcubGltaXQsXG4gICAgICBfY29uZmlnJG1hdGNoRnJvbSA9IGNvbmZpZy5tYXRjaEZyb20sXG4gICAgICBtYXRjaEZyb20gPSBfY29uZmlnJG1hdGNoRnJvbSA9PT0gdm9pZCAwID8gJ2FueScgOiBfY29uZmlnJG1hdGNoRnJvbSxcbiAgICAgIHN0cmluZ2lmeSA9IGNvbmZpZy5zdHJpbmdpZnksXG4gICAgICBfY29uZmlnJHRyaW0gPSBjb25maWcudHJpbSxcbiAgICAgIHRyaW0gPSBfY29uZmlnJHRyaW0gPT09IHZvaWQgMCA/IGZhbHNlIDogX2NvbmZpZyR0cmltO1xuICByZXR1cm4gZnVuY3Rpb24gKG9wdGlvbnMsIF9yZWYpIHtcbiAgICB2YXIgaW5wdXRWYWx1ZSA9IF9yZWYuaW5wdXRWYWx1ZSxcbiAgICAgICAgZ2V0T3B0aW9uTGFiZWwgPSBfcmVmLmdldE9wdGlvbkxhYmVsO1xuICAgIHZhciBpbnB1dCA9IHRyaW0gPyBpbnB1dFZhbHVlLnRyaW0oKSA6IGlucHV0VmFsdWU7XG5cbiAgICBpZiAoaWdub3JlQ2FzZSkge1xuICAgICAgaW5wdXQgPSBpbnB1dC50b0xvd2VyQ2FzZSgpO1xuICAgIH1cblxuICAgIGlmIChpZ25vcmVBY2NlbnRzKSB7XG4gICAgICBpbnB1dCA9IHN0cmlwRGlhY3JpdGljcyhpbnB1dCk7XG4gICAgfVxuXG4gICAgdmFyIGZpbHRlcmVkT3B0aW9ucyA9IG9wdGlvbnMuZmlsdGVyKGZ1bmN0aW9uIChvcHRpb24pIHtcbiAgICAgIHZhciBjYW5kaWRhdGUgPSAoc3RyaW5naWZ5IHx8IGdldE9wdGlvbkxhYmVsKShvcHRpb24pO1xuXG4gICAgICBpZiAoaWdub3JlQ2FzZSkge1xuICAgICAgICBjYW5kaWRhdGUgPSBjYW5kaWRhdGUudG9Mb3dlckNhc2UoKTtcbiAgICAgIH1cblxuICAgICAgaWYgKGlnbm9yZUFjY2VudHMpIHtcbiAgICAgICAgY2FuZGlkYXRlID0gc3RyaXBEaWFjcml0aWNzKGNhbmRpZGF0ZSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBtYXRjaEZyb20gPT09ICdzdGFydCcgPyBjYW5kaWRhdGUuaW5kZXhPZihpbnB1dCkgPT09IDAgOiBjYW5kaWRhdGUuaW5kZXhPZihpbnB1dCkgPiAtMTtcbiAgICB9KTtcbiAgICByZXR1cm4gdHlwZW9mIGxpbWl0ID09PSAnbnVtYmVyJyA/IGZpbHRlcmVkT3B0aW9ucy5zbGljZSgwLCBsaW1pdCkgOiBmaWx0ZXJlZE9wdGlvbnM7XG4gIH07XG59IC8vIFRvIHJlcGxhY2Ugd2l0aCAuZmluZEluZGV4KCkgb25jZSB3ZSBzdG9wIElFIDExIHN1cHBvcnQuXG5cbmZ1bmN0aW9uIGZpbmRJbmRleChhcnJheSwgY29tcCkge1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGFycmF5Lmxlbmd0aDsgaSArPSAxKSB7XG4gICAgaWYgKGNvbXAoYXJyYXlbaV0pKSB7XG4gICAgICByZXR1cm4gaTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gLTE7XG59XG5cbnZhciBkZWZhdWx0RmlsdGVyT3B0aW9ucyA9IGNyZWF0ZUZpbHRlck9wdGlvbnMoKTsgLy8gTnVtYmVyIG9mIG9wdGlvbnMgdG8ganVtcCBpbiBsaXN0IGJveCB3aGVuIHBhZ2V1cCBhbmQgcGFnZWRvd24ga2V5cyBhcmUgdXNlZC5cblxudmFyIHBhZ2VTaXplID0gNTtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHVzZUF1dG9jb21wbGV0ZShwcm9wcykge1xuICB2YXIgX3Byb3BzJGF1dG9Db21wbGV0ZSA9IHByb3BzLmF1dG9Db21wbGV0ZSxcbiAgICAgIGF1dG9Db21wbGV0ZSA9IF9wcm9wcyRhdXRvQ29tcGxldGUgPT09IHZvaWQgMCA/IGZhbHNlIDogX3Byb3BzJGF1dG9Db21wbGV0ZSxcbiAgICAgIF9wcm9wcyRhdXRvSGlnaGxpZ2h0ID0gcHJvcHMuYXV0b0hpZ2hsaWdodCxcbiAgICAgIGF1dG9IaWdobGlnaHQgPSBfcHJvcHMkYXV0b0hpZ2hsaWdodCA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcHJvcHMkYXV0b0hpZ2hsaWdodCxcbiAgICAgIF9wcm9wcyRhdXRvU2VsZWN0ID0gcHJvcHMuYXV0b1NlbGVjdCxcbiAgICAgIGF1dG9TZWxlY3QgPSBfcHJvcHMkYXV0b1NlbGVjdCA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcHJvcHMkYXV0b1NlbGVjdCxcbiAgICAgIF9wcm9wcyRibHVyT25TZWxlY3QgPSBwcm9wcy5ibHVyT25TZWxlY3QsXG4gICAgICBibHVyT25TZWxlY3QgPSBfcHJvcHMkYmx1ck9uU2VsZWN0ID09PSB2b2lkIDAgPyBmYWxzZSA6IF9wcm9wcyRibHVyT25TZWxlY3QsXG4gICAgICBfcHJvcHMkY2xlYXJPbkJsdXIgPSBwcm9wcy5jbGVhck9uQmx1cixcbiAgICAgIGNsZWFyT25CbHVyID0gX3Byb3BzJGNsZWFyT25CbHVyID09PSB2b2lkIDAgPyAhcHJvcHMuZnJlZVNvbG8gOiBfcHJvcHMkY2xlYXJPbkJsdXIsXG4gICAgICBfcHJvcHMkY2xlYXJPbkVzY2FwZSA9IHByb3BzLmNsZWFyT25Fc2NhcGUsXG4gICAgICBjbGVhck9uRXNjYXBlID0gX3Byb3BzJGNsZWFyT25Fc2NhcGUgPT09IHZvaWQgMCA/IGZhbHNlIDogX3Byb3BzJGNsZWFyT25Fc2NhcGUsXG4gICAgICBfcHJvcHMkY29tcG9uZW50TmFtZSA9IHByb3BzLmNvbXBvbmVudE5hbWUsXG4gICAgICBjb21wb25lbnROYW1lID0gX3Byb3BzJGNvbXBvbmVudE5hbWUgPT09IHZvaWQgMCA/ICd1c2VBdXRvY29tcGxldGUnIDogX3Byb3BzJGNvbXBvbmVudE5hbWUsXG4gICAgICBfcHJvcHMkZGVidWcgPSBwcm9wcy5kZWJ1ZyxcbiAgICAgIGRlYnVnID0gX3Byb3BzJGRlYnVnID09PSB2b2lkIDAgPyBmYWxzZSA6IF9wcm9wcyRkZWJ1ZyxcbiAgICAgIF9wcm9wcyRkZWZhdWx0VmFsdWUgPSBwcm9wcy5kZWZhdWx0VmFsdWUsXG4gICAgICBkZWZhdWx0VmFsdWUgPSBfcHJvcHMkZGVmYXVsdFZhbHVlID09PSB2b2lkIDAgPyBwcm9wcy5tdWx0aXBsZSA/IFtdIDogbnVsbCA6IF9wcm9wcyRkZWZhdWx0VmFsdWUsXG4gICAgICBfcHJvcHMkZGlzYWJsZUNsZWFyYWIgPSBwcm9wcy5kaXNhYmxlQ2xlYXJhYmxlLFxuICAgICAgZGlzYWJsZUNsZWFyYWJsZSA9IF9wcm9wcyRkaXNhYmxlQ2xlYXJhYiA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcHJvcHMkZGlzYWJsZUNsZWFyYWIsXG4gICAgICBfcHJvcHMkZGlzYWJsZUNsb3NlT24gPSBwcm9wcy5kaXNhYmxlQ2xvc2VPblNlbGVjdCxcbiAgICAgIGRpc2FibGVDbG9zZU9uU2VsZWN0ID0gX3Byb3BzJGRpc2FibGVDbG9zZU9uID09PSB2b2lkIDAgPyBmYWxzZSA6IF9wcm9wcyRkaXNhYmxlQ2xvc2VPbixcbiAgICAgIF9wcm9wcyRkaXNhYmxlZEl0ZW1zRiA9IHByb3BzLmRpc2FibGVkSXRlbXNGb2N1c2FibGUsXG4gICAgICBkaXNhYmxlZEl0ZW1zRm9jdXNhYmxlID0gX3Byb3BzJGRpc2FibGVkSXRlbXNGID09PSB2b2lkIDAgPyBmYWxzZSA6IF9wcm9wcyRkaXNhYmxlZEl0ZW1zRixcbiAgICAgIF9wcm9wcyRkaXNhYmxlTGlzdFdyYSA9IHByb3BzLmRpc2FibGVMaXN0V3JhcCxcbiAgICAgIGRpc2FibGVMaXN0V3JhcCA9IF9wcm9wcyRkaXNhYmxlTGlzdFdyYSA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcHJvcHMkZGlzYWJsZUxpc3RXcmEsXG4gICAgICBfcHJvcHMkZmlsdGVyT3B0aW9ucyA9IHByb3BzLmZpbHRlck9wdGlvbnMsXG4gICAgICBmaWx0ZXJPcHRpb25zID0gX3Byb3BzJGZpbHRlck9wdGlvbnMgPT09IHZvaWQgMCA/IGRlZmF1bHRGaWx0ZXJPcHRpb25zIDogX3Byb3BzJGZpbHRlck9wdGlvbnMsXG4gICAgICBfcHJvcHMkZmlsdGVyU2VsZWN0ZWQgPSBwcm9wcy5maWx0ZXJTZWxlY3RlZE9wdGlvbnMsXG4gICAgICBmaWx0ZXJTZWxlY3RlZE9wdGlvbnMgPSBfcHJvcHMkZmlsdGVyU2VsZWN0ZWQgPT09IHZvaWQgMCA/IGZhbHNlIDogX3Byb3BzJGZpbHRlclNlbGVjdGVkLFxuICAgICAgX3Byb3BzJGZyZWVTb2xvID0gcHJvcHMuZnJlZVNvbG8sXG4gICAgICBmcmVlU29sbyA9IF9wcm9wcyRmcmVlU29sbyA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcHJvcHMkZnJlZVNvbG8sXG4gICAgICBnZXRPcHRpb25EaXNhYmxlZCA9IHByb3BzLmdldE9wdGlvbkRpc2FibGVkLFxuICAgICAgX3Byb3BzJGdldE9wdGlvbkxhYmVsID0gcHJvcHMuZ2V0T3B0aW9uTGFiZWwsXG4gICAgICBnZXRPcHRpb25MYWJlbFByb3AgPSBfcHJvcHMkZ2V0T3B0aW9uTGFiZWwgPT09IHZvaWQgMCA/IGZ1bmN0aW9uIChvcHRpb24pIHtcbiAgICByZXR1cm4gb3B0aW9uO1xuICB9IDogX3Byb3BzJGdldE9wdGlvbkxhYmVsLFxuICAgICAgX3Byb3BzJGdldE9wdGlvblNlbGVjID0gcHJvcHMuZ2V0T3B0aW9uU2VsZWN0ZWQsXG4gICAgICBnZXRPcHRpb25TZWxlY3RlZCA9IF9wcm9wcyRnZXRPcHRpb25TZWxlYyA9PT0gdm9pZCAwID8gZnVuY3Rpb24gKG9wdGlvbiwgdmFsdWUpIHtcbiAgICByZXR1cm4gb3B0aW9uID09PSB2YWx1ZTtcbiAgfSA6IF9wcm9wcyRnZXRPcHRpb25TZWxlYyxcbiAgICAgIGdyb3VwQnkgPSBwcm9wcy5ncm91cEJ5LFxuICAgICAgX3Byb3BzJGhhbmRsZUhvbWVFbmRLID0gcHJvcHMuaGFuZGxlSG9tZUVuZEtleXMsXG4gICAgICBoYW5kbGVIb21lRW5kS2V5cyA9IF9wcm9wcyRoYW5kbGVIb21lRW5kSyA9PT0gdm9pZCAwID8gIXByb3BzLmZyZWVTb2xvIDogX3Byb3BzJGhhbmRsZUhvbWVFbmRLLFxuICAgICAgaWRQcm9wID0gcHJvcHMuaWQsXG4gICAgICBfcHJvcHMkaW5jbHVkZUlucHV0SW4gPSBwcm9wcy5pbmNsdWRlSW5wdXRJbkxpc3QsXG4gICAgICBpbmNsdWRlSW5wdXRJbkxpc3QgPSBfcHJvcHMkaW5jbHVkZUlucHV0SW4gPT09IHZvaWQgMCA/IGZhbHNlIDogX3Byb3BzJGluY2x1ZGVJbnB1dEluLFxuICAgICAgaW5wdXRWYWx1ZVByb3AgPSBwcm9wcy5pbnB1dFZhbHVlLFxuICAgICAgX3Byb3BzJG11bHRpcGxlID0gcHJvcHMubXVsdGlwbGUsXG4gICAgICBtdWx0aXBsZSA9IF9wcm9wcyRtdWx0aXBsZSA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcHJvcHMkbXVsdGlwbGUsXG4gICAgICBvbkNoYW5nZSA9IHByb3BzLm9uQ2hhbmdlLFxuICAgICAgb25DbG9zZSA9IHByb3BzLm9uQ2xvc2UsXG4gICAgICBvbkhpZ2hsaWdodENoYW5nZSA9IHByb3BzLm9uSGlnaGxpZ2h0Q2hhbmdlLFxuICAgICAgb25JbnB1dENoYW5nZSA9IHByb3BzLm9uSW5wdXRDaGFuZ2UsXG4gICAgICBvbk9wZW4gPSBwcm9wcy5vbk9wZW4sXG4gICAgICBvcGVuUHJvcCA9IHByb3BzLm9wZW4sXG4gICAgICBfcHJvcHMkb3Blbk9uRm9jdXMgPSBwcm9wcy5vcGVuT25Gb2N1cyxcbiAgICAgIG9wZW5PbkZvY3VzID0gX3Byb3BzJG9wZW5PbkZvY3VzID09PSB2b2lkIDAgPyBmYWxzZSA6IF9wcm9wcyRvcGVuT25Gb2N1cyxcbiAgICAgIG9wdGlvbnMgPSBwcm9wcy5vcHRpb25zLFxuICAgICAgX3Byb3BzJHNlbGVjdE9uRm9jdXMgPSBwcm9wcy5zZWxlY3RPbkZvY3VzLFxuICAgICAgc2VsZWN0T25Gb2N1cyA9IF9wcm9wcyRzZWxlY3RPbkZvY3VzID09PSB2b2lkIDAgPyAhcHJvcHMuZnJlZVNvbG8gOiBfcHJvcHMkc2VsZWN0T25Gb2N1cyxcbiAgICAgIHZhbHVlUHJvcCA9IHByb3BzLnZhbHVlO1xuICB2YXIgaWQgPSB1c2VJZChpZFByb3ApO1xuICB2YXIgZ2V0T3B0aW9uTGFiZWwgPSBnZXRPcHRpb25MYWJlbFByb3A7XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBnZXRPcHRpb25MYWJlbCA9IGZ1bmN0aW9uIGdldE9wdGlvbkxhYmVsKG9wdGlvbikge1xuICAgICAgdmFyIG9wdGlvbkxhYmVsID0gZ2V0T3B0aW9uTGFiZWxQcm9wKG9wdGlvbik7XG5cbiAgICAgIGlmICh0eXBlb2Ygb3B0aW9uTGFiZWwgIT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHZhciBlcnJvbmVvdXNSZXR1cm4gPSBvcHRpb25MYWJlbCA9PT0gdW5kZWZpbmVkID8gJ3VuZGVmaW5lZCcgOiBcIlwiLmNvbmNhdChfdHlwZW9mKG9wdGlvbkxhYmVsKSwgXCIgKFwiKS5jb25jYXQob3B0aW9uTGFiZWwsIFwiKVwiKTtcbiAgICAgICAgY29uc29sZS5lcnJvcihcIk1hdGVyaWFsLVVJOiBUaGUgYGdldE9wdGlvbkxhYmVsYCBtZXRob2Qgb2YgXCIuY29uY2F0KGNvbXBvbmVudE5hbWUsIFwiIHJldHVybmVkIFwiKS5jb25jYXQoZXJyb25lb3VzUmV0dXJuLCBcIiBpbnN0ZWFkIG9mIGEgc3RyaW5nIGZvciBcIikuY29uY2F0KEpTT04uc3RyaW5naWZ5KG9wdGlvbiksIFwiLlwiKSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBvcHRpb25MYWJlbDtcbiAgICB9O1xuICB9XG5cbiAgdmFyIGlnbm9yZUZvY3VzID0gUmVhY3QudXNlUmVmKGZhbHNlKTtcbiAgdmFyIGZpcnN0Rm9jdXMgPSBSZWFjdC51c2VSZWYodHJ1ZSk7XG4gIHZhciBpbnB1dFJlZiA9IFJlYWN0LnVzZVJlZihudWxsKTtcbiAgdmFyIGxpc3Rib3hSZWYgPSBSZWFjdC51c2VSZWYobnVsbCk7XG5cbiAgdmFyIF9SZWFjdCR1c2VTdGF0ZSA9IFJlYWN0LnVzZVN0YXRlKG51bGwpLFxuICAgICAgYW5jaG9yRWwgPSBfUmVhY3QkdXNlU3RhdGVbMF0sXG4gICAgICBzZXRBbmNob3JFbCA9IF9SZWFjdCR1c2VTdGF0ZVsxXTtcblxuICB2YXIgX1JlYWN0JHVzZVN0YXRlMiA9IFJlYWN0LnVzZVN0YXRlKC0xKSxcbiAgICAgIGZvY3VzZWRUYWcgPSBfUmVhY3QkdXNlU3RhdGUyWzBdLFxuICAgICAgc2V0Rm9jdXNlZFRhZyA9IF9SZWFjdCR1c2VTdGF0ZTJbMV07XG5cbiAgdmFyIGRlZmF1bHRIaWdobGlnaHRlZCA9IGF1dG9IaWdobGlnaHQgPyAwIDogLTE7XG4gIHZhciBoaWdobGlnaHRlZEluZGV4UmVmID0gUmVhY3QudXNlUmVmKGRlZmF1bHRIaWdobGlnaHRlZCk7XG5cbiAgdmFyIF91c2VDb250cm9sbGVkID0gdXNlQ29udHJvbGxlZCh7XG4gICAgY29udHJvbGxlZDogdmFsdWVQcm9wLFxuICAgIGRlZmF1bHQ6IGRlZmF1bHRWYWx1ZSxcbiAgICBuYW1lOiBjb21wb25lbnROYW1lXG4gIH0pLFxuICAgICAgX3VzZUNvbnRyb2xsZWQyID0gX3NsaWNlZFRvQXJyYXkoX3VzZUNvbnRyb2xsZWQsIDIpLFxuICAgICAgdmFsdWUgPSBfdXNlQ29udHJvbGxlZDJbMF0sXG4gICAgICBzZXRWYWx1ZSA9IF91c2VDb250cm9sbGVkMlsxXTtcblxuICB2YXIgX3VzZUNvbnRyb2xsZWQzID0gdXNlQ29udHJvbGxlZCh7XG4gICAgY29udHJvbGxlZDogaW5wdXRWYWx1ZVByb3AsXG4gICAgZGVmYXVsdDogJycsXG4gICAgbmFtZTogY29tcG9uZW50TmFtZSxcbiAgICBzdGF0ZTogJ2lucHV0VmFsdWUnXG4gIH0pLFxuICAgICAgX3VzZUNvbnRyb2xsZWQ0ID0gX3NsaWNlZFRvQXJyYXkoX3VzZUNvbnRyb2xsZWQzLCAyKSxcbiAgICAgIGlucHV0VmFsdWUgPSBfdXNlQ29udHJvbGxlZDRbMF0sXG4gICAgICBzZXRJbnB1dFZhbHVlID0gX3VzZUNvbnRyb2xsZWQ0WzFdO1xuXG4gIHZhciBfUmVhY3QkdXNlU3RhdGUzID0gUmVhY3QudXNlU3RhdGUoZmFsc2UpLFxuICAgICAgZm9jdXNlZCA9IF9SZWFjdCR1c2VTdGF0ZTNbMF0sXG4gICAgICBzZXRGb2N1c2VkID0gX1JlYWN0JHVzZVN0YXRlM1sxXTtcblxuICB2YXIgcmVzZXRJbnB1dFZhbHVlID0gdXNlRXZlbnRDYWxsYmFjayhmdW5jdGlvbiAoZXZlbnQsIG5ld1ZhbHVlKSB7XG4gICAgdmFyIG5ld0lucHV0VmFsdWU7XG5cbiAgICBpZiAobXVsdGlwbGUpIHtcbiAgICAgIG5ld0lucHV0VmFsdWUgPSAnJztcbiAgICB9IGVsc2UgaWYgKG5ld1ZhbHVlID09IG51bGwpIHtcbiAgICAgIG5ld0lucHV0VmFsdWUgPSAnJztcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIG9wdGlvbkxhYmVsID0gZ2V0T3B0aW9uTGFiZWwobmV3VmFsdWUpO1xuICAgICAgbmV3SW5wdXRWYWx1ZSA9IHR5cGVvZiBvcHRpb25MYWJlbCA9PT0gJ3N0cmluZycgPyBvcHRpb25MYWJlbCA6ICcnO1xuICAgIH1cblxuICAgIGlmIChpbnB1dFZhbHVlID09PSBuZXdJbnB1dFZhbHVlKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgc2V0SW5wdXRWYWx1ZShuZXdJbnB1dFZhbHVlKTtcblxuICAgIGlmIChvbklucHV0Q2hhbmdlKSB7XG4gICAgICBvbklucHV0Q2hhbmdlKGV2ZW50LCBuZXdJbnB1dFZhbHVlLCAncmVzZXQnKTtcbiAgICB9XG4gIH0pO1xuICBSZWFjdC51c2VFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgIHJlc2V0SW5wdXRWYWx1ZShudWxsLCB2YWx1ZSk7XG4gIH0sIFt2YWx1ZSwgcmVzZXRJbnB1dFZhbHVlXSk7XG5cbiAgdmFyIF91c2VDb250cm9sbGVkNSA9IHVzZUNvbnRyb2xsZWQoe1xuICAgIGNvbnRyb2xsZWQ6IG9wZW5Qcm9wLFxuICAgIGRlZmF1bHQ6IGZhbHNlLFxuICAgIG5hbWU6IGNvbXBvbmVudE5hbWUsXG4gICAgc3RhdGU6ICdvcGVuJ1xuICB9KSxcbiAgICAgIF91c2VDb250cm9sbGVkNiA9IF9zbGljZWRUb0FycmF5KF91c2VDb250cm9sbGVkNSwgMiksXG4gICAgICBvcGVuID0gX3VzZUNvbnRyb2xsZWQ2WzBdLFxuICAgICAgc2V0T3BlblN0YXRlID0gX3VzZUNvbnRyb2xsZWQ2WzFdO1xuXG4gIHZhciBpbnB1dFZhbHVlSXNTZWxlY3RlZFZhbHVlID0gIW11bHRpcGxlICYmIHZhbHVlICE9IG51bGwgJiYgaW5wdXRWYWx1ZSA9PT0gZ2V0T3B0aW9uTGFiZWwodmFsdWUpO1xuICB2YXIgcG9wdXBPcGVuID0gb3BlbjtcbiAgdmFyIGZpbHRlcmVkT3B0aW9ucyA9IHBvcHVwT3BlbiA/IGZpbHRlck9wdGlvbnMob3B0aW9ucy5maWx0ZXIoZnVuY3Rpb24gKG9wdGlvbikge1xuICAgIGlmIChmaWx0ZXJTZWxlY3RlZE9wdGlvbnMgJiYgKG11bHRpcGxlID8gdmFsdWUgOiBbdmFsdWVdKS5zb21lKGZ1bmN0aW9uICh2YWx1ZTIpIHtcbiAgICAgIHJldHVybiB2YWx1ZTIgIT09IG51bGwgJiYgZ2V0T3B0aW9uU2VsZWN0ZWQob3B0aW9uLCB2YWx1ZTIpO1xuICAgIH0pKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRydWU7XG4gIH0pLCAvLyB3ZSB1c2UgdGhlIGVtcHR5IHN0cmluZyB0byBtYW5pcHVsYXRlIGBmaWx0ZXJPcHRpb25zYCB0byBub3QgZmlsdGVyIGFueSBvcHRpb25zXG4gIC8vIGkuZS4gdGhlIGZpbHRlciBwcmVkaWNhdGUgYWx3YXlzIHJldHVybnMgdHJ1ZVxuICB7XG4gICAgaW5wdXRWYWx1ZTogaW5wdXRWYWx1ZUlzU2VsZWN0ZWRWYWx1ZSA/ICcnIDogaW5wdXRWYWx1ZSxcbiAgICBnZXRPcHRpb25MYWJlbDogZ2V0T3B0aW9uTGFiZWxcbiAgfSkgOiBbXTtcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGlmICh2YWx1ZSAhPT0gbnVsbCAmJiAhZnJlZVNvbG8gJiYgb3B0aW9ucy5sZW5ndGggPiAwKSB7XG4gICAgICB2YXIgbWlzc2luZ1ZhbHVlID0gKG11bHRpcGxlID8gdmFsdWUgOiBbdmFsdWVdKS5maWx0ZXIoZnVuY3Rpb24gKHZhbHVlMikge1xuICAgICAgICByZXR1cm4gIW9wdGlvbnMuc29tZShmdW5jdGlvbiAob3B0aW9uKSB7XG4gICAgICAgICAgcmV0dXJuIGdldE9wdGlvblNlbGVjdGVkKG9wdGlvbiwgdmFsdWUyKTtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcblxuICAgICAgaWYgKG1pc3NpbmdWYWx1ZS5sZW5ndGggPiAwKSB7XG4gICAgICAgIGNvbnNvbGUud2FybihbXCJNYXRlcmlhbC1VSTogVGhlIHZhbHVlIHByb3ZpZGVkIHRvIFwiLmNvbmNhdChjb21wb25lbnROYW1lLCBcIiBpcyBpbnZhbGlkLlwiKSwgXCJOb25lIG9mIHRoZSBvcHRpb25zIG1hdGNoIHdpdGggYFwiLmNvbmNhdChtaXNzaW5nVmFsdWUubGVuZ3RoID4gMSA/IEpTT04uc3RyaW5naWZ5KG1pc3NpbmdWYWx1ZSkgOiBKU09OLnN0cmluZ2lmeShtaXNzaW5nVmFsdWVbMF0pLCBcImAuXCIpLCAnWW91IGNhbiB1c2UgdGhlIGBnZXRPcHRpb25TZWxlY3RlZGAgcHJvcCB0byBjdXN0b21pemUgdGhlIGVxdWFsaXR5IHRlc3QuJ10uam9pbignXFxuJykpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHZhciBmb2N1c1RhZyA9IHVzZUV2ZW50Q2FsbGJhY2soZnVuY3Rpb24gKHRhZ1RvRm9jdXMpIHtcbiAgICBpZiAodGFnVG9Gb2N1cyA9PT0gLTEpIHtcbiAgICAgIGlucHV0UmVmLmN1cnJlbnQuZm9jdXMoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgYW5jaG9yRWwucXVlcnlTZWxlY3RvcihcIltkYXRhLXRhZy1pbmRleD1cXFwiXCIuY29uY2F0KHRhZ1RvRm9jdXMsIFwiXFxcIl1cIikpLmZvY3VzKCk7XG4gICAgfVxuICB9KTsgLy8gRW5zdXJlIHRoZSBmb2N1c2VkVGFnIGlzIG5ldmVyIGluY29uc2lzdGVudFxuXG4gIFJlYWN0LnVzZUVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgaWYgKG11bHRpcGxlICYmIGZvY3VzZWRUYWcgPiB2YWx1ZS5sZW5ndGggLSAxKSB7XG4gICAgICBzZXRGb2N1c2VkVGFnKC0xKTtcbiAgICAgIGZvY3VzVGFnKC0xKTtcbiAgICB9XG4gIH0sIFt2YWx1ZSwgbXVsdGlwbGUsIGZvY3VzZWRUYWcsIGZvY3VzVGFnXSk7XG5cbiAgZnVuY3Rpb24gdmFsaWRPcHRpb25JbmRleChpbmRleCwgZGlyZWN0aW9uKSB7XG4gICAgaWYgKCFsaXN0Ym94UmVmLmN1cnJlbnQgfHwgaW5kZXggPT09IC0xKSB7XG4gICAgICByZXR1cm4gLTE7XG4gICAgfVxuXG4gICAgdmFyIG5leHRGb2N1cyA9IGluZGV4O1xuXG4gICAgd2hpbGUgKHRydWUpIHtcbiAgICAgIC8vIE91dCBvZiByYW5nZVxuICAgICAgaWYgKGRpcmVjdGlvbiA9PT0gJ25leHQnICYmIG5leHRGb2N1cyA9PT0gZmlsdGVyZWRPcHRpb25zLmxlbmd0aCB8fCBkaXJlY3Rpb24gPT09ICdwcmV2aW91cycgJiYgbmV4dEZvY3VzID09PSAtMSkge1xuICAgICAgICByZXR1cm4gLTE7XG4gICAgICB9XG5cbiAgICAgIHZhciBvcHRpb24gPSBsaXN0Ym94UmVmLmN1cnJlbnQucXVlcnlTZWxlY3RvcihcIltkYXRhLW9wdGlvbi1pbmRleD1cXFwiXCIuY29uY2F0KG5leHRGb2N1cywgXCJcXFwiXVwiKSk7IC8vIFNhbWUgbG9naWMgYXMgTWVudUxpc3QuanNcblxuICAgICAgdmFyIG5leHRGb2N1c0Rpc2FibGVkID0gZGlzYWJsZWRJdGVtc0ZvY3VzYWJsZSA/IGZhbHNlIDogb3B0aW9uICYmIChvcHRpb24uZGlzYWJsZWQgfHwgb3B0aW9uLmdldEF0dHJpYnV0ZSgnYXJpYS1kaXNhYmxlZCcpID09PSAndHJ1ZScpO1xuXG4gICAgICBpZiAob3B0aW9uICYmICFvcHRpb24uaGFzQXR0cmlidXRlKCd0YWJpbmRleCcpIHx8IG5leHRGb2N1c0Rpc2FibGVkKSB7XG4gICAgICAgIC8vIE1vdmUgdG8gdGhlIG5leHQgZWxlbWVudC5cbiAgICAgICAgbmV4dEZvY3VzICs9IGRpcmVjdGlvbiA9PT0gJ25leHQnID8gMSA6IC0xO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIG5leHRGb2N1cztcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICB2YXIgc2V0SGlnaGxpZ2h0ZWRJbmRleCA9IHVzZUV2ZW50Q2FsbGJhY2soZnVuY3Rpb24gKF9yZWYyKSB7XG4gICAgdmFyIGV2ZW50ID0gX3JlZjIuZXZlbnQsXG4gICAgICAgIGluZGV4ID0gX3JlZjIuaW5kZXgsXG4gICAgICAgIF9yZWYyJHJlYXNvbiA9IF9yZWYyLnJlYXNvbixcbiAgICAgICAgcmVhc29uID0gX3JlZjIkcmVhc29uID09PSB2b2lkIDAgPyAnYXV0bycgOiBfcmVmMiRyZWFzb247XG4gICAgaGlnaGxpZ2h0ZWRJbmRleFJlZi5jdXJyZW50ID0gaW5kZXg7IC8vIGRvZXMgdGhlIGluZGV4IGV4aXN0P1xuXG4gICAgaWYgKGluZGV4ID09PSAtMSkge1xuICAgICAgaW5wdXRSZWYuY3VycmVudC5yZW1vdmVBdHRyaWJ1dGUoJ2FyaWEtYWN0aXZlZGVzY2VuZGFudCcpO1xuICAgIH0gZWxzZSB7XG4gICAgICBpbnB1dFJlZi5jdXJyZW50LnNldEF0dHJpYnV0ZSgnYXJpYS1hY3RpdmVkZXNjZW5kYW50JywgXCJcIi5jb25jYXQoaWQsIFwiLW9wdGlvbi1cIikuY29uY2F0KGluZGV4KSk7XG4gICAgfVxuXG4gICAgaWYgKG9uSGlnaGxpZ2h0Q2hhbmdlKSB7XG4gICAgICBvbkhpZ2hsaWdodENoYW5nZShldmVudCwgaW5kZXggPT09IC0xID8gbnVsbCA6IGZpbHRlcmVkT3B0aW9uc1tpbmRleF0sIHJlYXNvbik7XG4gICAgfVxuXG4gICAgaWYgKCFsaXN0Ym94UmVmLmN1cnJlbnQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgcHJldiA9IGxpc3Rib3hSZWYuY3VycmVudC5xdWVyeVNlbGVjdG9yKCdbZGF0YS1mb2N1c10nKTtcblxuICAgIGlmIChwcmV2KSB7XG4gICAgICBwcmV2LnJlbW92ZUF0dHJpYnV0ZSgnZGF0YS1mb2N1cycpO1xuICAgIH1cblxuICAgIHZhciBsaXN0Ym94Tm9kZSA9IGxpc3Rib3hSZWYuY3VycmVudC5wYXJlbnRFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoJ1tyb2xlPVwibGlzdGJveFwiXScpOyAvLyBcIk5vIHJlc3VsdHNcIlxuXG4gICAgaWYgKCFsaXN0Ym94Tm9kZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmIChpbmRleCA9PT0gLTEpIHtcbiAgICAgIGxpc3Rib3hOb2RlLnNjcm9sbFRvcCA9IDA7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIG9wdGlvbiA9IGxpc3Rib3hSZWYuY3VycmVudC5xdWVyeVNlbGVjdG9yKFwiW2RhdGEtb3B0aW9uLWluZGV4PVxcXCJcIi5jb25jYXQoaW5kZXgsIFwiXFxcIl1cIikpO1xuXG4gICAgaWYgKCFvcHRpb24pIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBvcHRpb24uc2V0QXR0cmlidXRlKCdkYXRhLWZvY3VzJywgJ3RydWUnKTsgLy8gU2Nyb2xsIGFjdGl2ZSBkZXNjZW5kYW50IGludG8gdmlldy5cbiAgICAvLyBMb2dpYyBjb3BpZWQgZnJvbSBodHRwczovL3d3dy53My5vcmcvVFIvd2FpLWFyaWEtcHJhY3RpY2VzL2V4YW1wbGVzL2xpc3Rib3gvanMvbGlzdGJveC5qc1xuICAgIC8vXG4gICAgLy8gQ29uc2lkZXIgdGhpcyBBUEkgaW5zdGVhZCBvbmNlIGl0IGhhcyBhIGJldHRlciBicm93c2VyIHN1cHBvcnQ6XG4gICAgLy8gLnNjcm9sbEludG9WaWV3KHsgc2Nyb2xsTW9kZTogJ2lmLW5lZWRlZCcsIGJsb2NrOiAnbmVhcmVzdCcgfSk7XG5cbiAgICBpZiAobGlzdGJveE5vZGUuc2Nyb2xsSGVpZ2h0ID4gbGlzdGJveE5vZGUuY2xpZW50SGVpZ2h0ICYmIHJlYXNvbiAhPT0gJ21vdXNlJykge1xuICAgICAgdmFyIGVsZW1lbnQgPSBvcHRpb247XG4gICAgICB2YXIgc2Nyb2xsQm90dG9tID0gbGlzdGJveE5vZGUuY2xpZW50SGVpZ2h0ICsgbGlzdGJveE5vZGUuc2Nyb2xsVG9wO1xuICAgICAgdmFyIGVsZW1lbnRCb3R0b20gPSBlbGVtZW50Lm9mZnNldFRvcCArIGVsZW1lbnQub2Zmc2V0SGVpZ2h0O1xuXG4gICAgICBpZiAoZWxlbWVudEJvdHRvbSA+IHNjcm9sbEJvdHRvbSkge1xuICAgICAgICBsaXN0Ym94Tm9kZS5zY3JvbGxUb3AgPSBlbGVtZW50Qm90dG9tIC0gbGlzdGJveE5vZGUuY2xpZW50SGVpZ2h0O1xuICAgICAgfSBlbHNlIGlmIChlbGVtZW50Lm9mZnNldFRvcCAtIGVsZW1lbnQub2Zmc2V0SGVpZ2h0ICogKGdyb3VwQnkgPyAxLjMgOiAwKSA8IGxpc3Rib3hOb2RlLnNjcm9sbFRvcCkge1xuICAgICAgICBsaXN0Ym94Tm9kZS5zY3JvbGxUb3AgPSBlbGVtZW50Lm9mZnNldFRvcCAtIGVsZW1lbnQub2Zmc2V0SGVpZ2h0ICogKGdyb3VwQnkgPyAxLjMgOiAwKTtcbiAgICAgIH1cbiAgICB9XG4gIH0pO1xuICB2YXIgY2hhbmdlSGlnaGxpZ2h0ZWRJbmRleCA9IHVzZUV2ZW50Q2FsbGJhY2soZnVuY3Rpb24gKF9yZWYzKSB7XG4gICAgdmFyIGV2ZW50ID0gX3JlZjMuZXZlbnQsXG4gICAgICAgIGRpZmYgPSBfcmVmMy5kaWZmLFxuICAgICAgICBfcmVmMyRkaXJlY3Rpb24gPSBfcmVmMy5kaXJlY3Rpb24sXG4gICAgICAgIGRpcmVjdGlvbiA9IF9yZWYzJGRpcmVjdGlvbiA9PT0gdm9pZCAwID8gJ25leHQnIDogX3JlZjMkZGlyZWN0aW9uLFxuICAgICAgICBfcmVmMyRyZWFzb24gPSBfcmVmMy5yZWFzb24sXG4gICAgICAgIHJlYXNvbiA9IF9yZWYzJHJlYXNvbiA9PT0gdm9pZCAwID8gJ2F1dG8nIDogX3JlZjMkcmVhc29uO1xuXG4gICAgaWYgKCFwb3B1cE9wZW4pIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgZ2V0TmV4dEluZGV4ID0gZnVuY3Rpb24gZ2V0TmV4dEluZGV4KCkge1xuICAgICAgdmFyIG1heEluZGV4ID0gZmlsdGVyZWRPcHRpb25zLmxlbmd0aCAtIDE7XG5cbiAgICAgIGlmIChkaWZmID09PSAncmVzZXQnKSB7XG4gICAgICAgIHJldHVybiBkZWZhdWx0SGlnaGxpZ2h0ZWQ7XG4gICAgICB9XG5cbiAgICAgIGlmIChkaWZmID09PSAnc3RhcnQnKSB7XG4gICAgICAgIHJldHVybiAwO1xuICAgICAgfVxuXG4gICAgICBpZiAoZGlmZiA9PT0gJ2VuZCcpIHtcbiAgICAgICAgcmV0dXJuIG1heEluZGV4O1xuICAgICAgfVxuXG4gICAgICB2YXIgbmV3SW5kZXggPSBoaWdobGlnaHRlZEluZGV4UmVmLmN1cnJlbnQgKyBkaWZmO1xuXG4gICAgICBpZiAobmV3SW5kZXggPCAwKSB7XG4gICAgICAgIGlmIChuZXdJbmRleCA9PT0gLTEgJiYgaW5jbHVkZUlucHV0SW5MaXN0KSB7XG4gICAgICAgICAgcmV0dXJuIC0xO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGRpc2FibGVMaXN0V3JhcCAmJiBoaWdobGlnaHRlZEluZGV4UmVmLmN1cnJlbnQgIT09IC0xIHx8IE1hdGguYWJzKGRpZmYpID4gMSkge1xuICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG1heEluZGV4O1xuICAgICAgfVxuXG4gICAgICBpZiAobmV3SW5kZXggPiBtYXhJbmRleCkge1xuICAgICAgICBpZiAobmV3SW5kZXggPT09IG1heEluZGV4ICsgMSAmJiBpbmNsdWRlSW5wdXRJbkxpc3QpIHtcbiAgICAgICAgICByZXR1cm4gLTE7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZGlzYWJsZUxpc3RXcmFwIHx8IE1hdGguYWJzKGRpZmYpID4gMSkge1xuICAgICAgICAgIHJldHVybiBtYXhJbmRleDtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiAwO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gbmV3SW5kZXg7XG4gICAgfTtcblxuICAgIHZhciBuZXh0SW5kZXggPSB2YWxpZE9wdGlvbkluZGV4KGdldE5leHRJbmRleCgpLCBkaXJlY3Rpb24pO1xuICAgIHNldEhpZ2hsaWdodGVkSW5kZXgoe1xuICAgICAgaW5kZXg6IG5leHRJbmRleCxcbiAgICAgIHJlYXNvbjogcmVhc29uLFxuICAgICAgZXZlbnQ6IGV2ZW50XG4gICAgfSk7IC8vIFN5bmMgdGhlIGNvbnRlbnQgb2YgdGhlIGlucHV0IHdpdGggdGhlIGhpZ2hsaWdodGVkIG9wdGlvbi5cblxuICAgIGlmIChhdXRvQ29tcGxldGUgJiYgZGlmZiAhPT0gJ3Jlc2V0Jykge1xuICAgICAgaWYgKG5leHRJbmRleCA9PT0gLTEpIHtcbiAgICAgICAgaW5wdXRSZWYuY3VycmVudC52YWx1ZSA9IGlucHV0VmFsdWU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgb3B0aW9uID0gZ2V0T3B0aW9uTGFiZWwoZmlsdGVyZWRPcHRpb25zW25leHRJbmRleF0pO1xuICAgICAgICBpbnB1dFJlZi5jdXJyZW50LnZhbHVlID0gb3B0aW9uOyAvLyBUaGUgcG9ydGlvbiBvZiB0aGUgc2VsZWN0ZWQgc3VnZ2VzdGlvbiB0aGF0IGhhcyBub3QgYmVlbiB0eXBlZCBieSB0aGUgdXNlcixcbiAgICAgICAgLy8gYSBjb21wbGV0aW9uIHN0cmluZywgYXBwZWFycyBpbmxpbmUgYWZ0ZXIgdGhlIGlucHV0IGN1cnNvciBpbiB0aGUgdGV4dGJveC5cblxuICAgICAgICB2YXIgaW5kZXggPSBvcHRpb24udG9Mb3dlckNhc2UoKS5pbmRleE9mKGlucHV0VmFsdWUudG9Mb3dlckNhc2UoKSk7XG5cbiAgICAgICAgaWYgKGluZGV4ID09PSAwICYmIGlucHV0VmFsdWUubGVuZ3RoID4gMCkge1xuICAgICAgICAgIGlucHV0UmVmLmN1cnJlbnQuc2V0U2VsZWN0aW9uUmFuZ2UoaW5wdXRWYWx1ZS5sZW5ndGgsIG9wdGlvbi5sZW5ndGgpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9KTtcbiAgdmFyIHN5bmNIaWdobGlnaHRlZEluZGV4ID0gUmVhY3QudXNlQ2FsbGJhY2soZnVuY3Rpb24gKCkge1xuICAgIGlmICghcG9wdXBPcGVuKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIHZhbHVlSXRlbSA9IG11bHRpcGxlID8gdmFsdWVbMF0gOiB2YWx1ZTsgLy8gVGhlIHBvcHVwIGlzIGVtcHR5LCByZXNldFxuXG4gICAgaWYgKGZpbHRlcmVkT3B0aW9ucy5sZW5ndGggPT09IDAgfHwgdmFsdWVJdGVtID09IG51bGwpIHtcbiAgICAgIGNoYW5nZUhpZ2hsaWdodGVkSW5kZXgoe1xuICAgICAgICBkaWZmOiAncmVzZXQnXG4gICAgICB9KTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoIWxpc3Rib3hSZWYuY3VycmVudCkge1xuICAgICAgcmV0dXJuO1xuICAgIH0gLy8gU3luY2hyb25pemUgdGhlIHZhbHVlIHdpdGggdGhlIGhpZ2hsaWdodGVkIGluZGV4XG5cblxuICAgIGlmICghZmlsdGVyU2VsZWN0ZWRPcHRpb25zICYmIHZhbHVlSXRlbSAhPSBudWxsKSB7XG4gICAgICB2YXIgY3VycmVudE9wdGlvbiA9IGZpbHRlcmVkT3B0aW9uc1toaWdobGlnaHRlZEluZGV4UmVmLmN1cnJlbnRdOyAvLyBLZWVwIHRoZSBjdXJyZW50IGhpZ2hsaWdodGVkIGluZGV4IGlmIHBvc3NpYmxlXG5cbiAgICAgIGlmIChtdWx0aXBsZSAmJiBjdXJyZW50T3B0aW9uICYmIGZpbmRJbmRleCh2YWx1ZSwgZnVuY3Rpb24gKHZhbCkge1xuICAgICAgICByZXR1cm4gZ2V0T3B0aW9uU2VsZWN0ZWQoY3VycmVudE9wdGlvbiwgdmFsKTtcbiAgICAgIH0pICE9PSAtMSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHZhciBpdGVtSW5kZXggPSBmaW5kSW5kZXgoZmlsdGVyZWRPcHRpb25zLCBmdW5jdGlvbiAob3B0aW9uSXRlbSkge1xuICAgICAgICByZXR1cm4gZ2V0T3B0aW9uU2VsZWN0ZWQob3B0aW9uSXRlbSwgdmFsdWVJdGVtKTtcbiAgICAgIH0pO1xuXG4gICAgICBpZiAoaXRlbUluZGV4ID09PSAtMSkge1xuICAgICAgICBjaGFuZ2VIaWdobGlnaHRlZEluZGV4KHtcbiAgICAgICAgICBkaWZmOiAncmVzZXQnXG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc2V0SGlnaGxpZ2h0ZWRJbmRleCh7XG4gICAgICAgICAgaW5kZXg6IGl0ZW1JbmRleFxuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuO1xuICAgIH0gLy8gUHJldmVudCB0aGUgaGlnaGxpZ2h0ZWQgaW5kZXggdG8gbGVhayBvdXRzaWRlIHRoZSBib3VuZGFyaWVzLlxuXG5cbiAgICBpZiAoaGlnaGxpZ2h0ZWRJbmRleFJlZi5jdXJyZW50ID49IGZpbHRlcmVkT3B0aW9ucy5sZW5ndGggLSAxKSB7XG4gICAgICBzZXRIaWdobGlnaHRlZEluZGV4KHtcbiAgICAgICAgaW5kZXg6IGZpbHRlcmVkT3B0aW9ucy5sZW5ndGggLSAxXG4gICAgICB9KTtcbiAgICAgIHJldHVybjtcbiAgICB9IC8vIFJlc3RvcmUgdGhlIGZvY3VzIHRvIHRoZSBwcmV2aW91cyBpbmRleC5cblxuXG4gICAgc2V0SGlnaGxpZ2h0ZWRJbmRleCh7XG4gICAgICBpbmRleDogaGlnaGxpZ2h0ZWRJbmRleFJlZi5jdXJyZW50XG4gICAgfSk7IC8vIElnbm9yZSBmaWx0ZXJlZE9wdGlvbnMgKGFuZCBvcHRpb25zLCBnZXRPcHRpb25TZWxlY3RlZCwgZ2V0T3B0aW9uTGFiZWwpIG5vdCB0byBicmVhayB0aGUgc2Nyb2xsIHBvc2l0aW9uXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlYWN0LWhvb2tzL2V4aGF1c3RpdmUtZGVwc1xuICB9LCBbLy8gT25seSBzeW5jIHRoZSBoaWdobGlnaHRlZCBpbmRleCB3aGVuIHRoZSBvcHRpb24gc3dpdGNoIGJldHdlZW4gZW1wdHkgYW5kIG5vdFxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3QtaG9va3MvZXhoYXVzdGl2ZS1kZXBzXG4gIGZpbHRlcmVkT3B0aW9ucy5sZW5ndGggPT09IDAsIC8vIERvbid0IHN5bmMgdGhlIGhpZ2hsaWdodGVkIGluZGV4IHdpdGggdGhlIHZhbHVlIHdoZW4gbXVsdGlwbGVcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlYWN0LWhvb2tzL2V4aGF1c3RpdmUtZGVwc1xuICBtdWx0aXBsZSA/IGZhbHNlIDogdmFsdWUsIGZpbHRlclNlbGVjdGVkT3B0aW9ucywgY2hhbmdlSGlnaGxpZ2h0ZWRJbmRleCwgc2V0SGlnaGxpZ2h0ZWRJbmRleCwgcG9wdXBPcGVuLCBpbnB1dFZhbHVlLCBtdWx0aXBsZV0pO1xuICB2YXIgaGFuZGxlTGlzdGJveFJlZiA9IHVzZUV2ZW50Q2FsbGJhY2soZnVuY3Rpb24gKG5vZGUpIHtcbiAgICBzZXRSZWYobGlzdGJveFJlZiwgbm9kZSk7XG5cbiAgICBpZiAoIW5vZGUpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBzeW5jSGlnaGxpZ2h0ZWRJbmRleCgpO1xuICB9KTtcbiAgUmVhY3QudXNlRWZmZWN0KGZ1bmN0aW9uICgpIHtcbiAgICBzeW5jSGlnaGxpZ2h0ZWRJbmRleCgpO1xuICB9LCBbc3luY0hpZ2hsaWdodGVkSW5kZXhdKTtcblxuICB2YXIgaGFuZGxlT3BlbiA9IGZ1bmN0aW9uIGhhbmRsZU9wZW4oZXZlbnQpIHtcbiAgICBpZiAob3Blbikge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHNldE9wZW5TdGF0ZSh0cnVlKTtcblxuICAgIGlmIChvbk9wZW4pIHtcbiAgICAgIG9uT3BlbihldmVudCk7XG4gICAgfVxuICB9O1xuXG4gIHZhciBoYW5kbGVDbG9zZSA9IGZ1bmN0aW9uIGhhbmRsZUNsb3NlKGV2ZW50LCByZWFzb24pIHtcbiAgICBpZiAoIW9wZW4pIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBzZXRPcGVuU3RhdGUoZmFsc2UpO1xuXG4gICAgaWYgKG9uQ2xvc2UpIHtcbiAgICAgIG9uQ2xvc2UoZXZlbnQsIHJlYXNvbik7XG4gICAgfVxuICB9O1xuXG4gIHZhciBoYW5kbGVWYWx1ZSA9IGZ1bmN0aW9uIGhhbmRsZVZhbHVlKGV2ZW50LCBuZXdWYWx1ZSwgcmVhc29uLCBkZXRhaWxzKSB7XG4gICAgaWYgKHZhbHVlID09PSBuZXdWYWx1ZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmIChvbkNoYW5nZSkge1xuICAgICAgb25DaGFuZ2UoZXZlbnQsIG5ld1ZhbHVlLCByZWFzb24sIGRldGFpbHMpO1xuICAgIH1cblxuICAgIHNldFZhbHVlKG5ld1ZhbHVlKTtcbiAgfTtcblxuICB2YXIgaXNUb3VjaCA9IFJlYWN0LnVzZVJlZihmYWxzZSk7XG5cbiAgdmFyIHNlbGVjdE5ld1ZhbHVlID0gZnVuY3Rpb24gc2VsZWN0TmV3VmFsdWUoZXZlbnQsIG9wdGlvbikge1xuICAgIHZhciByZWFzb25Qcm9wID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiAnc2VsZWN0LW9wdGlvbic7XG4gICAgdmFyIG9yaWdpbiA9IGFyZ3VtZW50cy5sZW5ndGggPiAzICYmIGFyZ3VtZW50c1szXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzNdIDogJ29wdGlvbnMnO1xuICAgIHZhciByZWFzb24gPSByZWFzb25Qcm9wO1xuICAgIHZhciBuZXdWYWx1ZSA9IG9wdGlvbjtcblxuICAgIGlmIChtdWx0aXBsZSkge1xuICAgICAgbmV3VmFsdWUgPSBBcnJheS5pc0FycmF5KHZhbHVlKSA/IHZhbHVlLnNsaWNlKCkgOiBbXTtcblxuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgdmFyIG1hdGNoZXMgPSBuZXdWYWx1ZS5maWx0ZXIoZnVuY3Rpb24gKHZhbCkge1xuICAgICAgICAgIHJldHVybiBnZXRPcHRpb25TZWxlY3RlZChvcHRpb24sIHZhbCk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGlmIChtYXRjaGVzLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgICBjb25zb2xlLmVycm9yKFtcIk1hdGVyaWFsLVVJOiBUaGUgYGdldE9wdGlvblNlbGVjdGVkYCBtZXRob2Qgb2YgXCIuY29uY2F0KGNvbXBvbmVudE5hbWUsIFwiIGRvIG5vdCBoYW5kbGUgdGhlIGFyZ3VtZW50cyBjb3JyZWN0bHkuXCIpLCBcIlRoZSBjb21wb25lbnQgZXhwZWN0cyBhIHNpbmdsZSB2YWx1ZSB0byBtYXRjaCBhIGdpdmVuIG9wdGlvbiBidXQgZm91bmQgXCIuY29uY2F0KG1hdGNoZXMubGVuZ3RoLCBcIiBtYXRjaGVzLlwiKV0uam9pbignXFxuJykpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHZhciBpdGVtSW5kZXggPSBmaW5kSW5kZXgobmV3VmFsdWUsIGZ1bmN0aW9uICh2YWx1ZUl0ZW0pIHtcbiAgICAgICAgcmV0dXJuIGdldE9wdGlvblNlbGVjdGVkKG9wdGlvbiwgdmFsdWVJdGVtKTtcbiAgICAgIH0pO1xuXG4gICAgICBpZiAoaXRlbUluZGV4ID09PSAtMSkge1xuICAgICAgICBuZXdWYWx1ZS5wdXNoKG9wdGlvbik7XG4gICAgICB9IGVsc2UgaWYgKG9yaWdpbiAhPT0gJ2ZyZWVTb2xvJykge1xuICAgICAgICBuZXdWYWx1ZS5zcGxpY2UoaXRlbUluZGV4LCAxKTtcbiAgICAgICAgcmVhc29uID0gJ3JlbW92ZS1vcHRpb24nO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJlc2V0SW5wdXRWYWx1ZShldmVudCwgbmV3VmFsdWUpO1xuICAgIGhhbmRsZVZhbHVlKGV2ZW50LCBuZXdWYWx1ZSwgcmVhc29uLCB7XG4gICAgICBvcHRpb246IG9wdGlvblxuICAgIH0pO1xuXG4gICAgaWYgKCFkaXNhYmxlQ2xvc2VPblNlbGVjdCkge1xuICAgICAgaGFuZGxlQ2xvc2UoZXZlbnQsIHJlYXNvbik7XG4gICAgfVxuXG4gICAgaWYgKGJsdXJPblNlbGVjdCA9PT0gdHJ1ZSB8fCBibHVyT25TZWxlY3QgPT09ICd0b3VjaCcgJiYgaXNUb3VjaC5jdXJyZW50IHx8IGJsdXJPblNlbGVjdCA9PT0gJ21vdXNlJyAmJiAhaXNUb3VjaC5jdXJyZW50KSB7XG4gICAgICBpbnB1dFJlZi5jdXJyZW50LmJsdXIoKTtcbiAgICB9XG4gIH07XG5cbiAgZnVuY3Rpb24gdmFsaWRUYWdJbmRleChpbmRleCwgZGlyZWN0aW9uKSB7XG4gICAgaWYgKGluZGV4ID09PSAtMSkge1xuICAgICAgcmV0dXJuIC0xO1xuICAgIH1cblxuICAgIHZhciBuZXh0Rm9jdXMgPSBpbmRleDtcblxuICAgIHdoaWxlICh0cnVlKSB7XG4gICAgICAvLyBPdXQgb2YgcmFuZ2VcbiAgICAgIGlmIChkaXJlY3Rpb24gPT09ICduZXh0JyAmJiBuZXh0Rm9jdXMgPT09IHZhbHVlLmxlbmd0aCB8fCBkaXJlY3Rpb24gPT09ICdwcmV2aW91cycgJiYgbmV4dEZvY3VzID09PSAtMSkge1xuICAgICAgICByZXR1cm4gLTE7XG4gICAgICB9XG5cbiAgICAgIHZhciBvcHRpb24gPSBhbmNob3JFbC5xdWVyeVNlbGVjdG9yKFwiW2RhdGEtdGFnLWluZGV4PVxcXCJcIi5jb25jYXQobmV4dEZvY3VzLCBcIlxcXCJdXCIpKTsgLy8gU2FtZSBsb2dpYyBhcyBNZW51TGlzdC5qc1xuXG4gICAgICBpZiAob3B0aW9uICYmICghb3B0aW9uLmhhc0F0dHJpYnV0ZSgndGFiaW5kZXgnKSB8fCBvcHRpb24uZGlzYWJsZWQgfHwgb3B0aW9uLmdldEF0dHJpYnV0ZSgnYXJpYS1kaXNhYmxlZCcpID09PSAndHJ1ZScpKSB7XG4gICAgICAgIG5leHRGb2N1cyArPSBkaXJlY3Rpb24gPT09ICduZXh0JyA/IDEgOiAtMTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBuZXh0Rm9jdXM7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgdmFyIGhhbmRsZUZvY3VzVGFnID0gZnVuY3Rpb24gaGFuZGxlRm9jdXNUYWcoZXZlbnQsIGRpcmVjdGlvbikge1xuICAgIGlmICghbXVsdGlwbGUpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBoYW5kbGVDbG9zZShldmVudCwgJ3RvZ2dsZUlucHV0Jyk7XG4gICAgdmFyIG5leHRUYWcgPSBmb2N1c2VkVGFnO1xuXG4gICAgaWYgKGZvY3VzZWRUYWcgPT09IC0xKSB7XG4gICAgICBpZiAoaW5wdXRWYWx1ZSA9PT0gJycgJiYgZGlyZWN0aW9uID09PSAncHJldmlvdXMnKSB7XG4gICAgICAgIG5leHRUYWcgPSB2YWx1ZS5sZW5ndGggLSAxO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBuZXh0VGFnICs9IGRpcmVjdGlvbiA9PT0gJ25leHQnID8gMSA6IC0xO1xuXG4gICAgICBpZiAobmV4dFRhZyA8IDApIHtcbiAgICAgICAgbmV4dFRhZyA9IDA7XG4gICAgICB9XG5cbiAgICAgIGlmIChuZXh0VGFnID09PSB2YWx1ZS5sZW5ndGgpIHtcbiAgICAgICAgbmV4dFRhZyA9IC0xO1xuICAgICAgfVxuICAgIH1cblxuICAgIG5leHRUYWcgPSB2YWxpZFRhZ0luZGV4KG5leHRUYWcsIGRpcmVjdGlvbik7XG4gICAgc2V0Rm9jdXNlZFRhZyhuZXh0VGFnKTtcbiAgICBmb2N1c1RhZyhuZXh0VGFnKTtcbiAgfTtcblxuICB2YXIgaGFuZGxlQ2xlYXIgPSBmdW5jdGlvbiBoYW5kbGVDbGVhcihldmVudCkge1xuICAgIGlnbm9yZUZvY3VzLmN1cnJlbnQgPSB0cnVlO1xuICAgIHNldElucHV0VmFsdWUoJycpO1xuXG4gICAgaWYgKG9uSW5wdXRDaGFuZ2UpIHtcbiAgICAgIG9uSW5wdXRDaGFuZ2UoZXZlbnQsICcnLCAnY2xlYXInKTtcbiAgICB9XG5cbiAgICBoYW5kbGVWYWx1ZShldmVudCwgbXVsdGlwbGUgPyBbXSA6IG51bGwsICdjbGVhcicpO1xuICB9O1xuXG4gIHZhciBoYW5kbGVLZXlEb3duID0gZnVuY3Rpb24gaGFuZGxlS2V5RG93bihvdGhlcikge1xuICAgIHJldHVybiBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgIGlmIChmb2N1c2VkVGFnICE9PSAtMSAmJiBbJ0Fycm93TGVmdCcsICdBcnJvd1JpZ2h0J10uaW5kZXhPZihldmVudC5rZXkpID09PSAtMSkge1xuICAgICAgICBzZXRGb2N1c2VkVGFnKC0xKTtcbiAgICAgICAgZm9jdXNUYWcoLTEpO1xuICAgICAgfVxuXG4gICAgICBzd2l0Y2ggKGV2ZW50LmtleSkge1xuICAgICAgICBjYXNlICdIb21lJzpcbiAgICAgICAgICBpZiAocG9wdXBPcGVuICYmIGhhbmRsZUhvbWVFbmRLZXlzKSB7XG4gICAgICAgICAgICAvLyBQcmV2ZW50IHNjcm9sbCBvZiB0aGUgcGFnZVxuICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgIGNoYW5nZUhpZ2hsaWdodGVkSW5kZXgoe1xuICAgICAgICAgICAgICBkaWZmOiAnc3RhcnQnLFxuICAgICAgICAgICAgICBkaXJlY3Rpb246ICduZXh0JyxcbiAgICAgICAgICAgICAgcmVhc29uOiAna2V5Ym9hcmQnLFxuICAgICAgICAgICAgICBldmVudDogZXZlbnRcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgJ0VuZCc6XG4gICAgICAgICAgaWYgKHBvcHVwT3BlbiAmJiBoYW5kbGVIb21lRW5kS2V5cykge1xuICAgICAgICAgICAgLy8gUHJldmVudCBzY3JvbGwgb2YgdGhlIHBhZ2VcbiAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICBjaGFuZ2VIaWdobGlnaHRlZEluZGV4KHtcbiAgICAgICAgICAgICAgZGlmZjogJ2VuZCcsXG4gICAgICAgICAgICAgIGRpcmVjdGlvbjogJ3ByZXZpb3VzJyxcbiAgICAgICAgICAgICAgcmVhc29uOiAna2V5Ym9hcmQnLFxuICAgICAgICAgICAgICBldmVudDogZXZlbnRcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgJ1BhZ2VVcCc6XG4gICAgICAgICAgLy8gUHJldmVudCBzY3JvbGwgb2YgdGhlIHBhZ2VcbiAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgIGNoYW5nZUhpZ2hsaWdodGVkSW5kZXgoe1xuICAgICAgICAgICAgZGlmZjogLXBhZ2VTaXplLFxuICAgICAgICAgICAgZGlyZWN0aW9uOiAncHJldmlvdXMnLFxuICAgICAgICAgICAgcmVhc29uOiAna2V5Ym9hcmQnLFxuICAgICAgICAgICAgZXZlbnQ6IGV2ZW50XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgaGFuZGxlT3BlbihldmVudCk7XG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSAnUGFnZURvd24nOlxuICAgICAgICAgIC8vIFByZXZlbnQgc2Nyb2xsIG9mIHRoZSBwYWdlXG4gICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICBjaGFuZ2VIaWdobGlnaHRlZEluZGV4KHtcbiAgICAgICAgICAgIGRpZmY6IHBhZ2VTaXplLFxuICAgICAgICAgICAgZGlyZWN0aW9uOiAnbmV4dCcsXG4gICAgICAgICAgICByZWFzb246ICdrZXlib2FyZCcsXG4gICAgICAgICAgICBldmVudDogZXZlbnRcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBoYW5kbGVPcGVuKGV2ZW50KTtcbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlICdBcnJvd0Rvd24nOlxuICAgICAgICAgIC8vIFByZXZlbnQgY3Vyc29yIG1vdmVcbiAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgIGNoYW5nZUhpZ2hsaWdodGVkSW5kZXgoe1xuICAgICAgICAgICAgZGlmZjogMSxcbiAgICAgICAgICAgIGRpcmVjdGlvbjogJ25leHQnLFxuICAgICAgICAgICAgcmVhc29uOiAna2V5Ym9hcmQnLFxuICAgICAgICAgICAgZXZlbnQ6IGV2ZW50XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgaGFuZGxlT3BlbihldmVudCk7XG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSAnQXJyb3dVcCc6XG4gICAgICAgICAgLy8gUHJldmVudCBjdXJzb3IgbW92ZVxuICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgY2hhbmdlSGlnaGxpZ2h0ZWRJbmRleCh7XG4gICAgICAgICAgICBkaWZmOiAtMSxcbiAgICAgICAgICAgIGRpcmVjdGlvbjogJ3ByZXZpb3VzJyxcbiAgICAgICAgICAgIHJlYXNvbjogJ2tleWJvYXJkJyxcbiAgICAgICAgICAgIGV2ZW50OiBldmVudFxuICAgICAgICAgIH0pO1xuICAgICAgICAgIGhhbmRsZU9wZW4oZXZlbnQpO1xuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgJ0Fycm93TGVmdCc6XG4gICAgICAgICAgaGFuZGxlRm9jdXNUYWcoZXZlbnQsICdwcmV2aW91cycpO1xuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgJ0Fycm93UmlnaHQnOlxuICAgICAgICAgIGhhbmRsZUZvY3VzVGFnKGV2ZW50LCAnbmV4dCcpO1xuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgJ0VudGVyJzpcbiAgICAgICAgICAvLyBXYWl0IHVudGlsIElNRSBpcyBzZXR0bGVkLlxuICAgICAgICAgIGlmIChldmVudC53aGljaCA9PT0gMjI5KSB7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoaGlnaGxpZ2h0ZWRJbmRleFJlZi5jdXJyZW50ICE9PSAtMSAmJiBwb3B1cE9wZW4pIHtcbiAgICAgICAgICAgIHZhciBvcHRpb24gPSBmaWx0ZXJlZE9wdGlvbnNbaGlnaGxpZ2h0ZWRJbmRleFJlZi5jdXJyZW50XTtcbiAgICAgICAgICAgIHZhciBkaXNhYmxlZCA9IGdldE9wdGlvbkRpc2FibGVkID8gZ2V0T3B0aW9uRGlzYWJsZWQob3B0aW9uKSA6IGZhbHNlOyAvLyBXZSBkb24ndCB3YW50IHRvIHZhbGlkYXRlIHRoZSBmb3JtLlxuXG4gICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXG4gICAgICAgICAgICBpZiAoZGlzYWJsZWQpIHtcbiAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBzZWxlY3ROZXdWYWx1ZShldmVudCwgb3B0aW9uLCAnc2VsZWN0LW9wdGlvbicpOyAvLyBNb3ZlIHRoZSBzZWxlY3Rpb24gdG8gdGhlIGVuZC5cblxuICAgICAgICAgICAgaWYgKGF1dG9Db21wbGV0ZSkge1xuICAgICAgICAgICAgICBpbnB1dFJlZi5jdXJyZW50LnNldFNlbGVjdGlvblJhbmdlKGlucHV0UmVmLmN1cnJlbnQudmFsdWUubGVuZ3RoLCBpbnB1dFJlZi5jdXJyZW50LnZhbHVlLmxlbmd0aCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIGlmIChmcmVlU29sbyAmJiBpbnB1dFZhbHVlICE9PSAnJyAmJiBpbnB1dFZhbHVlSXNTZWxlY3RlZFZhbHVlID09PSBmYWxzZSkge1xuICAgICAgICAgICAgaWYgKG11bHRpcGxlKSB7XG4gICAgICAgICAgICAgIC8vIEFsbG93IHBlb3BsZSB0byBhZGQgbmV3IHZhbHVlcyBiZWZvcmUgdGhleSBzdWJtaXQgdGhlIGZvcm0uXG4gICAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHNlbGVjdE5ld1ZhbHVlKGV2ZW50LCBpbnB1dFZhbHVlLCAnY3JlYXRlLW9wdGlvbicsICdmcmVlU29sbycpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgJ0VzY2FwZSc6XG4gICAgICAgICAgaWYgKHBvcHVwT3Blbikge1xuICAgICAgICAgICAgLy8gQXZvaWQgT3BlcmEgdG8gZXhpdCBmdWxsc2NyZWVuIG1vZGUuXG4gICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpOyAvLyBBdm9pZCB0aGUgTW9kYWwgdG8gaGFuZGxlIHRoZSBldmVudC5cblxuICAgICAgICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgICAgICBoYW5kbGVDbG9zZShldmVudCwgJ2VzY2FwZScpO1xuICAgICAgICAgIH0gZWxzZSBpZiAoY2xlYXJPbkVzY2FwZSAmJiAoaW5wdXRWYWx1ZSAhPT0gJycgfHwgbXVsdGlwbGUgJiYgdmFsdWUubGVuZ3RoID4gMCkpIHtcbiAgICAgICAgICAgIC8vIEF2b2lkIE9wZXJhIHRvIGV4aXQgZnVsbHNjcmVlbiBtb2RlLlxuICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTsgLy8gQXZvaWQgdGhlIE1vZGFsIHRvIGhhbmRsZSB0aGUgZXZlbnQuXG5cbiAgICAgICAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICAgICAgaGFuZGxlQ2xlYXIoZXZlbnQpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgJ0JhY2tzcGFjZSc6XG4gICAgICAgICAgaWYgKG11bHRpcGxlICYmIGlucHV0VmFsdWUgPT09ICcnICYmIHZhbHVlLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIHZhciBpbmRleCA9IGZvY3VzZWRUYWcgPT09IC0xID8gdmFsdWUubGVuZ3RoIC0gMSA6IGZvY3VzZWRUYWc7XG4gICAgICAgICAgICB2YXIgbmV3VmFsdWUgPSB2YWx1ZS5zbGljZSgpO1xuICAgICAgICAgICAgbmV3VmFsdWUuc3BsaWNlKGluZGV4LCAxKTtcbiAgICAgICAgICAgIGhhbmRsZVZhbHVlKGV2ZW50LCBuZXdWYWx1ZSwgJ3JlbW92ZS1vcHRpb24nLCB7XG4gICAgICAgICAgICAgIG9wdGlvbjogdmFsdWVbaW5kZXhdXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBkZWZhdWx0OlxuICAgICAgfVxuXG4gICAgICBpZiAob3RoZXIub25LZXlEb3duKSB7XG4gICAgICAgIG90aGVyLm9uS2V5RG93bihldmVudCk7XG4gICAgICB9XG4gICAgfTtcbiAgfTtcblxuICB2YXIgaGFuZGxlRm9jdXMgPSBmdW5jdGlvbiBoYW5kbGVGb2N1cyhldmVudCkge1xuICAgIHNldEZvY3VzZWQodHJ1ZSk7XG5cbiAgICBpZiAob3Blbk9uRm9jdXMgJiYgIWlnbm9yZUZvY3VzLmN1cnJlbnQpIHtcbiAgICAgIGhhbmRsZU9wZW4oZXZlbnQpO1xuICAgIH1cbiAgfTtcblxuICB2YXIgaGFuZGxlQmx1ciA9IGZ1bmN0aW9uIGhhbmRsZUJsdXIoZXZlbnQpIHtcbiAgICAvLyBJZ25vcmUgdGhlIGV2ZW50IHdoZW4gdXNpbmcgdGhlIHNjcm9sbGJhciB3aXRoIElFIDExXG4gICAgaWYgKGxpc3Rib3hSZWYuY3VycmVudCAhPT0gbnVsbCAmJiBkb2N1bWVudC5hY3RpdmVFbGVtZW50ID09PSBsaXN0Ym94UmVmLmN1cnJlbnQucGFyZW50RWxlbWVudCkge1xuICAgICAgaW5wdXRSZWYuY3VycmVudC5mb2N1cygpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHNldEZvY3VzZWQoZmFsc2UpO1xuICAgIGZpcnN0Rm9jdXMuY3VycmVudCA9IHRydWU7XG4gICAgaWdub3JlRm9jdXMuY3VycmVudCA9IGZhbHNlO1xuXG4gICAgaWYgKGRlYnVnICYmIGlucHV0VmFsdWUgIT09ICcnKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKGF1dG9TZWxlY3QgJiYgaGlnaGxpZ2h0ZWRJbmRleFJlZi5jdXJyZW50ICE9PSAtMSAmJiBwb3B1cE9wZW4pIHtcbiAgICAgIHNlbGVjdE5ld1ZhbHVlKGV2ZW50LCBmaWx0ZXJlZE9wdGlvbnNbaGlnaGxpZ2h0ZWRJbmRleFJlZi5jdXJyZW50XSwgJ2JsdXInKTtcbiAgICB9IGVsc2UgaWYgKGF1dG9TZWxlY3QgJiYgZnJlZVNvbG8gJiYgaW5wdXRWYWx1ZSAhPT0gJycpIHtcbiAgICAgIHNlbGVjdE5ld1ZhbHVlKGV2ZW50LCBpbnB1dFZhbHVlLCAnYmx1cicsICdmcmVlU29sbycpO1xuICAgIH0gZWxzZSBpZiAoY2xlYXJPbkJsdXIpIHtcbiAgICAgIHJlc2V0SW5wdXRWYWx1ZShldmVudCwgdmFsdWUpO1xuICAgIH1cblxuICAgIGhhbmRsZUNsb3NlKGV2ZW50LCAnYmx1cicpO1xuICB9O1xuXG4gIHZhciBoYW5kbGVJbnB1dENoYW5nZSA9IGZ1bmN0aW9uIGhhbmRsZUlucHV0Q2hhbmdlKGV2ZW50KSB7XG4gICAgdmFyIG5ld1ZhbHVlID0gZXZlbnQudGFyZ2V0LnZhbHVlO1xuXG4gICAgaWYgKGlucHV0VmFsdWUgIT09IG5ld1ZhbHVlKSB7XG4gICAgICBzZXRJbnB1dFZhbHVlKG5ld1ZhbHVlKTtcblxuICAgICAgaWYgKG9uSW5wdXRDaGFuZ2UpIHtcbiAgICAgICAgb25JbnB1dENoYW5nZShldmVudCwgbmV3VmFsdWUsICdpbnB1dCcpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChuZXdWYWx1ZSA9PT0gJycpIHtcbiAgICAgIGlmICghZGlzYWJsZUNsZWFyYWJsZSAmJiAhbXVsdGlwbGUpIHtcbiAgICAgICAgaGFuZGxlVmFsdWUoZXZlbnQsIG51bGwsICdjbGVhcicpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBoYW5kbGVPcGVuKGV2ZW50KTtcbiAgICB9XG4gIH07XG5cbiAgdmFyIGhhbmRsZU9wdGlvbk1vdXNlT3ZlciA9IGZ1bmN0aW9uIGhhbmRsZU9wdGlvbk1vdXNlT3ZlcihldmVudCkge1xuICAgIHNldEhpZ2hsaWdodGVkSW5kZXgoe1xuICAgICAgZXZlbnQ6IGV2ZW50LFxuICAgICAgaW5kZXg6IE51bWJlcihldmVudC5jdXJyZW50VGFyZ2V0LmdldEF0dHJpYnV0ZSgnZGF0YS1vcHRpb24taW5kZXgnKSksXG4gICAgICByZWFzb246ICdtb3VzZSdcbiAgICB9KTtcbiAgfTtcblxuICB2YXIgaGFuZGxlT3B0aW9uVG91Y2hTdGFydCA9IGZ1bmN0aW9uIGhhbmRsZU9wdGlvblRvdWNoU3RhcnQoKSB7XG4gICAgaXNUb3VjaC5jdXJyZW50ID0gdHJ1ZTtcbiAgfTtcblxuICB2YXIgaGFuZGxlT3B0aW9uQ2xpY2sgPSBmdW5jdGlvbiBoYW5kbGVPcHRpb25DbGljayhldmVudCkge1xuICAgIHZhciBpbmRleCA9IE51bWJlcihldmVudC5jdXJyZW50VGFyZ2V0LmdldEF0dHJpYnV0ZSgnZGF0YS1vcHRpb24taW5kZXgnKSk7XG4gICAgc2VsZWN0TmV3VmFsdWUoZXZlbnQsIGZpbHRlcmVkT3B0aW9uc1tpbmRleF0sICdzZWxlY3Qtb3B0aW9uJyk7XG4gICAgaXNUb3VjaC5jdXJyZW50ID0gZmFsc2U7XG4gIH07XG5cbiAgdmFyIGhhbmRsZVRhZ0RlbGV0ZSA9IGZ1bmN0aW9uIGhhbmRsZVRhZ0RlbGV0ZShpbmRleCkge1xuICAgIHJldHVybiBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgIHZhciBuZXdWYWx1ZSA9IHZhbHVlLnNsaWNlKCk7XG4gICAgICBuZXdWYWx1ZS5zcGxpY2UoaW5kZXgsIDEpO1xuICAgICAgaGFuZGxlVmFsdWUoZXZlbnQsIG5ld1ZhbHVlLCAncmVtb3ZlLW9wdGlvbicsIHtcbiAgICAgICAgb3B0aW9uOiB2YWx1ZVtpbmRleF1cbiAgICAgIH0pO1xuICAgIH07XG4gIH07XG5cbiAgdmFyIGhhbmRsZVBvcHVwSW5kaWNhdG9yID0gZnVuY3Rpb24gaGFuZGxlUG9wdXBJbmRpY2F0b3IoZXZlbnQpIHtcbiAgICBpZiAob3Blbikge1xuICAgICAgaGFuZGxlQ2xvc2UoZXZlbnQsICd0b2dnbGVJbnB1dCcpO1xuICAgIH0gZWxzZSB7XG4gICAgICBoYW5kbGVPcGVuKGV2ZW50KTtcbiAgICB9XG4gIH07IC8vIFByZXZlbnQgaW5wdXQgYmx1ciB3aGVuIGludGVyYWN0aW5nIHdpdGggdGhlIGNvbWJvYm94XG5cblxuICB2YXIgaGFuZGxlTW91c2VEb3duID0gZnVuY3Rpb24gaGFuZGxlTW91c2VEb3duKGV2ZW50KSB7XG4gICAgaWYgKGV2ZW50LnRhcmdldC5nZXRBdHRyaWJ1dGUoJ2lkJykgIT09IGlkKSB7XG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIH1cbiAgfTsgLy8gRm9jdXMgdGhlIGlucHV0IHdoZW4gaW50ZXJhY3Rpbmcgd2l0aCB0aGUgY29tYm9ib3hcblxuXG4gIHZhciBoYW5kbGVDbGljayA9IGZ1bmN0aW9uIGhhbmRsZUNsaWNrKCkge1xuICAgIGlucHV0UmVmLmN1cnJlbnQuZm9jdXMoKTtcblxuICAgIGlmIChzZWxlY3RPbkZvY3VzICYmIGZpcnN0Rm9jdXMuY3VycmVudCAmJiBpbnB1dFJlZi5jdXJyZW50LnNlbGVjdGlvbkVuZCAtIGlucHV0UmVmLmN1cnJlbnQuc2VsZWN0aW9uU3RhcnQgPT09IDApIHtcbiAgICAgIGlucHV0UmVmLmN1cnJlbnQuc2VsZWN0KCk7XG4gICAgfVxuXG4gICAgZmlyc3RGb2N1cy5jdXJyZW50ID0gZmFsc2U7XG4gIH07XG5cbiAgdmFyIGhhbmRsZUlucHV0TW91c2VEb3duID0gZnVuY3Rpb24gaGFuZGxlSW5wdXRNb3VzZURvd24oZXZlbnQpIHtcbiAgICBpZiAoaW5wdXRWYWx1ZSA9PT0gJycgfHwgIW9wZW4pIHtcbiAgICAgIGhhbmRsZVBvcHVwSW5kaWNhdG9yKGV2ZW50KTtcbiAgICB9XG4gIH07XG5cbiAgdmFyIGRpcnR5ID0gZnJlZVNvbG8gJiYgaW5wdXRWYWx1ZS5sZW5ndGggPiAwO1xuICBkaXJ0eSA9IGRpcnR5IHx8IChtdWx0aXBsZSA/IHZhbHVlLmxlbmd0aCA+IDAgOiB2YWx1ZSAhPT0gbnVsbCk7XG4gIHZhciBncm91cGVkT3B0aW9ucyA9IGZpbHRlcmVkT3B0aW9ucztcblxuICBpZiAoZ3JvdXBCeSkge1xuICAgIC8vIHVzZWQgdG8ga2VlcCB0cmFjayBvZiBrZXkgYW5kIGluZGV4ZXMgaW4gdGhlIHJlc3VsdCBhcnJheVxuICAgIHZhciBpbmRleEJ5ID0gbmV3IE1hcCgpO1xuICAgIHZhciB3YXJuID0gZmFsc2U7XG4gICAgZ3JvdXBlZE9wdGlvbnMgPSBmaWx0ZXJlZE9wdGlvbnMucmVkdWNlKGZ1bmN0aW9uIChhY2MsIG9wdGlvbiwgaW5kZXgpIHtcbiAgICAgIHZhciBncm91cCA9IGdyb3VwQnkob3B0aW9uKTtcblxuICAgICAgaWYgKGFjYy5sZW5ndGggPiAwICYmIGFjY1thY2MubGVuZ3RoIC0gMV0uZ3JvdXAgPT09IGdyb3VwKSB7XG4gICAgICAgIGFjY1thY2MubGVuZ3RoIC0gMV0ub3B0aW9ucy5wdXNoKG9wdGlvbik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICAgIGlmIChpbmRleEJ5LmdldChncm91cCkgJiYgIXdhcm4pIHtcbiAgICAgICAgICAgIGNvbnNvbGUud2FybihcIk1hdGVyaWFsLVVJOiBUaGUgb3B0aW9ucyBwcm92aWRlZCBjb21iaW5lZCB3aXRoIHRoZSBgZ3JvdXBCeWAgbWV0aG9kIG9mIFwiLmNvbmNhdChjb21wb25lbnROYW1lLCBcIiByZXR1cm5zIGR1cGxpY2F0ZWQgaGVhZGVycy5cIiksICdZb3UgY2FuIHNvbHZlIHRoZSBpc3N1ZSBieSBzb3J0aW5nIHRoZSBvcHRpb25zIHdpdGggdGhlIG91dHB1dCBvZiBgZ3JvdXBCeWAuJyk7XG4gICAgICAgICAgICB3YXJuID0gdHJ1ZTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpbmRleEJ5LnNldChncm91cCwgdHJ1ZSk7XG4gICAgICAgIH1cblxuICAgICAgICBhY2MucHVzaCh7XG4gICAgICAgICAga2V5OiBpbmRleCxcbiAgICAgICAgICBpbmRleDogaW5kZXgsXG4gICAgICAgICAgZ3JvdXA6IGdyb3VwLFxuICAgICAgICAgIG9wdGlvbnM6IFtvcHRpb25dXG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gYWNjO1xuICAgIH0sIFtdKTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgZ2V0Um9vdFByb3BzOiBmdW5jdGlvbiBnZXRSb290UHJvcHMoKSB7XG4gICAgICB2YXIgb3RoZXIgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHt9O1xuICAgICAgcmV0dXJuIF9leHRlbmRzKHtcbiAgICAgICAgJ2FyaWEtb3ducyc6IHBvcHVwT3BlbiA/IFwiXCIuY29uY2F0KGlkLCBcIi1wb3B1cFwiKSA6IG51bGwsXG4gICAgICAgIHJvbGU6ICdjb21ib2JveCcsXG4gICAgICAgICdhcmlhLWV4cGFuZGVkJzogcG9wdXBPcGVuXG4gICAgICB9LCBvdGhlciwge1xuICAgICAgICBvbktleURvd246IGhhbmRsZUtleURvd24ob3RoZXIpLFxuICAgICAgICBvbk1vdXNlRG93bjogaGFuZGxlTW91c2VEb3duLFxuICAgICAgICBvbkNsaWNrOiBoYW5kbGVDbGlja1xuICAgICAgfSk7XG4gICAgfSxcbiAgICBnZXRJbnB1dExhYmVsUHJvcHM6IGZ1bmN0aW9uIGdldElucHV0TGFiZWxQcm9wcygpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGlkOiBcIlwiLmNvbmNhdChpZCwgXCItbGFiZWxcIiksXG4gICAgICAgIGh0bWxGb3I6IGlkXG4gICAgICB9O1xuICAgIH0sXG4gICAgZ2V0SW5wdXRQcm9wczogZnVuY3Rpb24gZ2V0SW5wdXRQcm9wcygpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGlkOiBpZCxcbiAgICAgICAgdmFsdWU6IGlucHV0VmFsdWUsXG4gICAgICAgIG9uQmx1cjogaGFuZGxlQmx1cixcbiAgICAgICAgb25Gb2N1czogaGFuZGxlRm9jdXMsXG4gICAgICAgIG9uQ2hhbmdlOiBoYW5kbGVJbnB1dENoYW5nZSxcbiAgICAgICAgb25Nb3VzZURvd246IGhhbmRsZUlucHV0TW91c2VEb3duLFxuICAgICAgICAvLyBpZiBvcGVuIHRoZW4gdGhpcyBpcyBoYW5kbGVkIGltcGVyYXRpdmVsZXkgc28gZG9uJ3QgbGV0IHJlYWN0IG92ZXJyaWRlXG4gICAgICAgIC8vIG9ubHkgaGF2ZSBhbiBvcGluaW9uIGFib3V0IHRoaXMgd2hlbiBjbG9zZWRcbiAgICAgICAgJ2FyaWEtYWN0aXZlZGVzY2VuZGFudCc6IHBvcHVwT3BlbiA/ICcnIDogbnVsbCxcbiAgICAgICAgJ2FyaWEtYXV0b2NvbXBsZXRlJzogYXV0b0NvbXBsZXRlID8gJ2JvdGgnIDogJ2xpc3QnLFxuICAgICAgICAnYXJpYS1jb250cm9scyc6IHBvcHVwT3BlbiA/IFwiXCIuY29uY2F0KGlkLCBcIi1wb3B1cFwiKSA6IG51bGwsXG4gICAgICAgIC8vIERpc2FibGUgYnJvd3NlcidzIHN1Z2dlc3Rpb24gdGhhdCBtaWdodCBvdmVybGFwIHdpdGggdGhlIHBvcHVwLlxuICAgICAgICAvLyBIYW5kbGUgYXV0b2NvbXBsZXRlIGJ1dCBub3QgYXV0b2ZpbGwuXG4gICAgICAgIGF1dG9Db21wbGV0ZTogJ29mZicsXG4gICAgICAgIHJlZjogaW5wdXRSZWYsXG4gICAgICAgIGF1dG9DYXBpdGFsaXplOiAnbm9uZScsXG4gICAgICAgIHNwZWxsQ2hlY2s6ICdmYWxzZSdcbiAgICAgIH07XG4gICAgfSxcbiAgICBnZXRDbGVhclByb3BzOiBmdW5jdGlvbiBnZXRDbGVhclByb3BzKCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgdGFiSW5kZXg6IC0xLFxuICAgICAgICBvbkNsaWNrOiBoYW5kbGVDbGVhclxuICAgICAgfTtcbiAgICB9LFxuICAgIGdldFBvcHVwSW5kaWNhdG9yUHJvcHM6IGZ1bmN0aW9uIGdldFBvcHVwSW5kaWNhdG9yUHJvcHMoKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICB0YWJJbmRleDogLTEsXG4gICAgICAgIG9uQ2xpY2s6IGhhbmRsZVBvcHVwSW5kaWNhdG9yXG4gICAgICB9O1xuICAgIH0sXG4gICAgZ2V0VGFnUHJvcHM6IGZ1bmN0aW9uIGdldFRhZ1Byb3BzKF9yZWY0KSB7XG4gICAgICB2YXIgaW5kZXggPSBfcmVmNC5pbmRleDtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGtleTogaW5kZXgsXG4gICAgICAgICdkYXRhLXRhZy1pbmRleCc6IGluZGV4LFxuICAgICAgICB0YWJJbmRleDogLTEsXG4gICAgICAgIG9uRGVsZXRlOiBoYW5kbGVUYWdEZWxldGUoaW5kZXgpXG4gICAgICB9O1xuICAgIH0sXG4gICAgZ2V0TGlzdGJveFByb3BzOiBmdW5jdGlvbiBnZXRMaXN0Ym94UHJvcHMoKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICByb2xlOiAnbGlzdGJveCcsXG4gICAgICAgIGlkOiBcIlwiLmNvbmNhdChpZCwgXCItcG9wdXBcIiksXG4gICAgICAgICdhcmlhLWxhYmVsbGVkYnknOiBcIlwiLmNvbmNhdChpZCwgXCItbGFiZWxcIiksXG4gICAgICAgIHJlZjogaGFuZGxlTGlzdGJveFJlZixcbiAgICAgICAgb25Nb3VzZURvd246IGZ1bmN0aW9uIG9uTW91c2VEb3duKGV2ZW50KSB7XG4gICAgICAgICAgLy8gUHJldmVudCBibHVyXG4gICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9LFxuICAgIGdldE9wdGlvblByb3BzOiBmdW5jdGlvbiBnZXRPcHRpb25Qcm9wcyhfcmVmNSkge1xuICAgICAgdmFyIGluZGV4ID0gX3JlZjUuaW5kZXgsXG4gICAgICAgICAgb3B0aW9uID0gX3JlZjUub3B0aW9uO1xuICAgICAgdmFyIHNlbGVjdGVkID0gKG11bHRpcGxlID8gdmFsdWUgOiBbdmFsdWVdKS5zb21lKGZ1bmN0aW9uICh2YWx1ZTIpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlMiAhPSBudWxsICYmIGdldE9wdGlvblNlbGVjdGVkKG9wdGlvbiwgdmFsdWUyKTtcbiAgICAgIH0pO1xuICAgICAgdmFyIGRpc2FibGVkID0gZ2V0T3B0aW9uRGlzYWJsZWQgPyBnZXRPcHRpb25EaXNhYmxlZChvcHRpb24pIDogZmFsc2U7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBrZXk6IGluZGV4LFxuICAgICAgICB0YWJJbmRleDogLTEsXG4gICAgICAgIHJvbGU6ICdvcHRpb24nLFxuICAgICAgICBpZDogXCJcIi5jb25jYXQoaWQsIFwiLW9wdGlvbi1cIikuY29uY2F0KGluZGV4KSxcbiAgICAgICAgb25Nb3VzZU92ZXI6IGhhbmRsZU9wdGlvbk1vdXNlT3ZlcixcbiAgICAgICAgb25DbGljazogaGFuZGxlT3B0aW9uQ2xpY2ssXG4gICAgICAgIG9uVG91Y2hTdGFydDogaGFuZGxlT3B0aW9uVG91Y2hTdGFydCxcbiAgICAgICAgJ2RhdGEtb3B0aW9uLWluZGV4JzogaW5kZXgsXG4gICAgICAgICdhcmlhLWRpc2FibGVkJzogZGlzYWJsZWQsXG4gICAgICAgICdhcmlhLXNlbGVjdGVkJzogc2VsZWN0ZWRcbiAgICAgIH07XG4gICAgfSxcbiAgICBpZDogaWQsXG4gICAgaW5wdXRWYWx1ZTogaW5wdXRWYWx1ZSxcbiAgICB2YWx1ZTogdmFsdWUsXG4gICAgZGlydHk6IGRpcnR5LFxuICAgIHBvcHVwT3BlbjogcG9wdXBPcGVuLFxuICAgIGZvY3VzZWQ6IGZvY3VzZWQgfHwgZm9jdXNlZFRhZyAhPT0gLTEsXG4gICAgYW5jaG9yRWw6IGFuY2hvckVsLFxuICAgIHNldEFuY2hvckVsOiBzZXRBbmNob3JFbCxcbiAgICBmb2N1c2VkVGFnOiBmb2N1c2VkVGFnLFxuICAgIGdyb3VwZWRPcHRpb25zOiBncm91cGVkT3B0aW9uc1xuICB9O1xufSIsImltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzXCI7XG5pbXBvcnQgX2RlZmluZVByb3BlcnR5IGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9kZWZpbmVQcm9wZXJ0eVwiO1xuaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGNsc3ggZnJvbSAnY2xzeCc7XG5pbXBvcnQgeyB3aXRoU3R5bGVzIH0gZnJvbSAnQG1hdGVyaWFsLXVpL2NvcmUvc3R5bGVzJztcbmltcG9ydCBQb3BwZXIgZnJvbSAnQG1hdGVyaWFsLXVpL2NvcmUvUG9wcGVyJztcbmltcG9ydCBMaXN0U3ViaGVhZGVyIGZyb20gJ0BtYXRlcmlhbC11aS9jb3JlL0xpc3RTdWJoZWFkZXInO1xuaW1wb3J0IFBhcGVyIGZyb20gJ0BtYXRlcmlhbC11aS9jb3JlL1BhcGVyJztcbmltcG9ydCBJY29uQnV0dG9uIGZyb20gJ0BtYXRlcmlhbC11aS9jb3JlL0ljb25CdXR0b24nO1xuaW1wb3J0IENoaXAgZnJvbSAnQG1hdGVyaWFsLXVpL2NvcmUvQ2hpcCc7XG5pbXBvcnQgQ2xvc2VJY29uIGZyb20gJy4uL2ludGVybmFsL3N2Zy1pY29ucy9DbG9zZSc7XG5pbXBvcnQgQXJyb3dEcm9wRG93bkljb24gZnJvbSAnLi4vaW50ZXJuYWwvc3ZnLWljb25zL0Fycm93RHJvcERvd24nO1xuaW1wb3J0IHVzZUF1dG9jb21wbGV0ZSwgeyBjcmVhdGVGaWx0ZXJPcHRpb25zIH0gZnJvbSAnLi4vdXNlQXV0b2NvbXBsZXRlJztcbmV4cG9ydCB7IGNyZWF0ZUZpbHRlck9wdGlvbnMgfTtcbmV4cG9ydCB2YXIgc3R5bGVzID0gZnVuY3Rpb24gc3R5bGVzKHRoZW1lKSB7XG4gIHZhciBfb3B0aW9uO1xuXG4gIHJldHVybiB7XG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudC4gKi9cbiAgICByb290OiB7XG4gICAgICAnJiRmb2N1c2VkICRjbGVhckluZGljYXRvckRpcnR5Jzoge1xuICAgICAgICB2aXNpYmlsaXR5OiAndmlzaWJsZSdcbiAgICAgIH0sXG5cbiAgICAgIC8qIEF2b2lkIGRvdWJsZSB0YXAgaXNzdWUgb24gaU9TICovXG4gICAgICAnQG1lZGlhIChwb2ludGVyOiBmaW5lKSc6IHtcbiAgICAgICAgJyY6aG92ZXIgJGNsZWFySW5kaWNhdG9yRGlydHknOiB7XG4gICAgICAgICAgdmlzaWJpbGl0eTogJ3Zpc2libGUnXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgZnVsbFdpZHRoPXt0cnVlfWAuICovXG4gICAgZnVsbFdpZHRoOiB7XG4gICAgICB3aWR0aDogJzEwMCUnXG4gICAgfSxcblxuICAgIC8qIFBzZXVkby1jbGFzcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgZm9jdXNlZC4gKi9cbiAgICBmb2N1c2VkOiB7fSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSB0YWcgZWxlbWVudHMsIGUuZy4gdGhlIGNoaXBzLiAqL1xuICAgIHRhZzoge1xuICAgICAgbWFyZ2luOiAzLFxuICAgICAgbWF4V2lkdGg6ICdjYWxjKDEwMCUgLSA2cHgpJ1xuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgdGFnIGVsZW1lbnRzLCBlLmcuIHRoZSBjaGlwcyBpZiBgc2l6ZT1cInNtYWxsXCJgLiAqL1xuICAgIHRhZ1NpemVTbWFsbDoge1xuICAgICAgbWFyZ2luOiAyLFxuICAgICAgbWF4V2lkdGg6ICdjYWxjKDEwMCUgLSA0cHgpJ1xuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB3aGVuIHRoZSBwb3B1cCBpY29uIGlzIHJlbmRlcmVkLiAqL1xuICAgIGhhc1BvcHVwSWNvbjoge30sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB3aGVuIHRoZSBjbGVhciBpY29uIGlzIHJlbmRlcmVkLiAqL1xuICAgIGhhc0NsZWFySWNvbjoge30sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgSW5wdXQgZWxlbWVudC4gKi9cbiAgICBpbnB1dFJvb3Q6IHtcbiAgICAgIGZsZXhXcmFwOiAnd3JhcCcsXG4gICAgICAnJGhhc1BvcHVwSWNvbiAmLCAkaGFzQ2xlYXJJY29uICYnOiB7XG4gICAgICAgIHBhZGRpbmdSaWdodDogMjYgKyA0XG4gICAgICB9LFxuICAgICAgJyRoYXNQb3B1cEljb24kaGFzQ2xlYXJJY29uICYnOiB7XG4gICAgICAgIHBhZGRpbmdSaWdodDogNTIgKyA0XG4gICAgICB9LFxuICAgICAgJyYgJGlucHV0Jzoge1xuICAgICAgICB3aWR0aDogMCxcbiAgICAgICAgbWluV2lkdGg6IDMwXG4gICAgICB9LFxuICAgICAgJyZbY2xhc3MqPVwiTXVpSW5wdXQtcm9vdFwiXSc6IHtcbiAgICAgICAgcGFkZGluZ0JvdHRvbTogMSxcbiAgICAgICAgJyYgJGlucHV0Jzoge1xuICAgICAgICAgIHBhZGRpbmc6IDRcbiAgICAgICAgfSxcbiAgICAgICAgJyYgJGlucHV0OmZpcnN0LWNoaWxkJzoge1xuICAgICAgICAgIHBhZGRpbmc6ICc2cHggMCdcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgICcmW2NsYXNzKj1cIk11aUlucHV0LXJvb3RcIl1bY2xhc3MqPVwiTXVpSW5wdXQtbWFyZ2luRGVuc2VcIl0nOiB7XG4gICAgICAgICcmICRpbnB1dCc6IHtcbiAgICAgICAgICBwYWRkaW5nOiAnNHB4IDRweCA1cHgnXG4gICAgICAgIH0sXG4gICAgICAgICcmICRpbnB1dDpmaXJzdC1jaGlsZCc6IHtcbiAgICAgICAgICBwYWRkaW5nOiAnM3B4IDAgNnB4J1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgJyZbY2xhc3MqPVwiTXVpT3V0bGluZWRJbnB1dC1yb290XCJdJzoge1xuICAgICAgICBwYWRkaW5nOiA5LFxuICAgICAgICAnJGhhc1BvcHVwSWNvbiAmLCAkaGFzQ2xlYXJJY29uICYnOiB7XG4gICAgICAgICAgcGFkZGluZ1JpZ2h0OiAyNiArIDQgKyA5XG4gICAgICAgIH0sXG4gICAgICAgICckaGFzUG9wdXBJY29uJGhhc0NsZWFySWNvbiAmJzoge1xuICAgICAgICAgIHBhZGRpbmdSaWdodDogNTIgKyA0ICsgOVxuICAgICAgICB9LFxuICAgICAgICAnJiAkaW5wdXQnOiB7XG4gICAgICAgICAgcGFkZGluZzogJzkuNXB4IDRweCdcbiAgICAgICAgfSxcbiAgICAgICAgJyYgJGlucHV0OmZpcnN0LWNoaWxkJzoge1xuICAgICAgICAgIHBhZGRpbmdMZWZ0OiA2XG4gICAgICAgIH0sXG4gICAgICAgICcmICRlbmRBZG9ybm1lbnQnOiB7XG4gICAgICAgICAgcmlnaHQ6IDlcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgICcmW2NsYXNzKj1cIk11aU91dGxpbmVkSW5wdXQtcm9vdFwiXVtjbGFzcyo9XCJNdWlPdXRsaW5lZElucHV0LW1hcmdpbkRlbnNlXCJdJzoge1xuICAgICAgICBwYWRkaW5nOiA2LFxuICAgICAgICAnJiAkaW5wdXQnOiB7XG4gICAgICAgICAgcGFkZGluZzogJzQuNXB4IDRweCdcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgICcmW2NsYXNzKj1cIk11aUZpbGxlZElucHV0LXJvb3RcIl0nOiB7XG4gICAgICAgIHBhZGRpbmdUb3A6IDE5LFxuICAgICAgICBwYWRkaW5nTGVmdDogOCxcbiAgICAgICAgJyRoYXNQb3B1cEljb24gJiwgJGhhc0NsZWFySWNvbiAmJzoge1xuICAgICAgICAgIHBhZGRpbmdSaWdodDogMjYgKyA0ICsgOVxuICAgICAgICB9LFxuICAgICAgICAnJGhhc1BvcHVwSWNvbiRoYXNDbGVhckljb24gJic6IHtcbiAgICAgICAgICBwYWRkaW5nUmlnaHQ6IDUyICsgNCArIDlcbiAgICAgICAgfSxcbiAgICAgICAgJyYgJGlucHV0Jzoge1xuICAgICAgICAgIHBhZGRpbmc6ICc5cHggNHB4J1xuICAgICAgICB9LFxuICAgICAgICAnJiAkZW5kQWRvcm5tZW50Jzoge1xuICAgICAgICAgIHJpZ2h0OiA5XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICAnJltjbGFzcyo9XCJNdWlGaWxsZWRJbnB1dC1yb290XCJdW2NsYXNzKj1cIk11aUZpbGxlZElucHV0LW1hcmdpbkRlbnNlXCJdJzoge1xuICAgICAgICBwYWRkaW5nQm90dG9tOiAxLFxuICAgICAgICAnJiAkaW5wdXQnOiB7XG4gICAgICAgICAgcGFkZGluZzogJzQuNXB4IDRweCdcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgaW5wdXQgZWxlbWVudC4gKi9cbiAgICBpbnB1dDoge1xuICAgICAgZmxleEdyb3c6IDEsXG4gICAgICB0ZXh0T3ZlcmZsb3c6ICdlbGxpcHNpcycsXG4gICAgICBvcGFjaXR5OiAwXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSBpbnB1dCBlbGVtZW50IGlmIHRhZyBmb2N1c2VkLiAqL1xuICAgIGlucHV0Rm9jdXNlZDoge1xuICAgICAgb3BhY2l0eTogMVxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgZW5kQWRvcm5tZW50IGVsZW1lbnQuICovXG4gICAgZW5kQWRvcm5tZW50OiB7XG4gICAgICAvLyBXZSB1c2UgYSBwb3NpdGlvbiBhYnNvbHV0ZSB0byBzdXBwb3J0IHdyYXBwaW5nIHRhZ3MuXG4gICAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICAgIHJpZ2h0OiAwLFxuICAgICAgdG9wOiAnY2FsYyg1MCUgLSAxNHB4KScgLy8gQ2VudGVyIHZlcnRpY2FsbHlcblxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgY2xlYXIgaW5kaWNhdG9yLiAqL1xuICAgIGNsZWFySW5kaWNhdG9yOiB7XG4gICAgICBtYXJnaW5SaWdodDogLTIsXG4gICAgICBwYWRkaW5nOiA0LFxuICAgICAgdmlzaWJpbGl0eTogJ2hpZGRlbidcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNsZWFyIGluZGljYXRvciBpZiB0aGUgaW5wdXQgaXMgZGlydHkuICovXG4gICAgY2xlYXJJbmRpY2F0b3JEaXJ0eToge30sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcG9wdXAgaW5kaWNhdG9yLiAqL1xuICAgIHBvcHVwSW5kaWNhdG9yOiB7XG4gICAgICBwYWRkaW5nOiAyLFxuICAgICAgbWFyZ2luUmlnaHQ6IC0yXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSBwb3B1cCBpbmRpY2F0b3IgaWYgdGhlIHBvcHVwIGlzIG9wZW4uICovXG4gICAgcG9wdXBJbmRpY2F0b3JPcGVuOiB7XG4gICAgICB0cmFuc2Zvcm06ICdyb3RhdGUoMTgwZGVnKSdcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHBvcHBlciBlbGVtZW50LiAqL1xuICAgIHBvcHBlcjoge1xuICAgICAgekluZGV4OiB0aGVtZS56SW5kZXgubW9kYWxcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHBvcHBlciBlbGVtZW50IGlmIGBkaXNhYmxlUG9ydGFsPXt0cnVlfWAuICovXG4gICAgcG9wcGVyRGlzYWJsZVBvcnRhbDoge1xuICAgICAgcG9zaXRpb246ICdhYnNvbHV0ZSdcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIGBQYXBlcmAgY29tcG9uZW50LiAqL1xuICAgIHBhcGVyOiBfZXh0ZW5kcyh7fSwgdGhlbWUudHlwb2dyYXBoeS5ib2R5MSwge1xuICAgICAgb3ZlcmZsb3c6ICdoaWRkZW4nLFxuICAgICAgbWFyZ2luOiAnNHB4IDAnXG4gICAgfSksXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgYGxpc3Rib3hgIGNvbXBvbmVudC4gKi9cbiAgICBsaXN0Ym94OiB7XG4gICAgICBsaXN0U3R5bGU6ICdub25lJyxcbiAgICAgIG1hcmdpbjogMCxcbiAgICAgIHBhZGRpbmc6ICc4cHggMCcsXG4gICAgICBtYXhIZWlnaHQ6ICc0MHZoJyxcbiAgICAgIG92ZXJmbG93OiAnYXV0bydcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIGxvYWRpbmcgd3JhcHBlci4gKi9cbiAgICBsb2FkaW5nOiB7XG4gICAgICBjb2xvcjogdGhlbWUucGFsZXR0ZS50ZXh0LnNlY29uZGFyeSxcbiAgICAgIHBhZGRpbmc6ICcxNHB4IDE2cHgnXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSBubyBvcHRpb24gd3JhcHBlci4gKi9cbiAgICBub09wdGlvbnM6IHtcbiAgICAgIGNvbG9yOiB0aGVtZS5wYWxldHRlLnRleHQuc2Vjb25kYXJ5LFxuICAgICAgcGFkZGluZzogJzE0cHggMTZweCdcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIG9wdGlvbiBlbGVtZW50cy4gKi9cbiAgICBvcHRpb246IChfb3B0aW9uID0ge1xuICAgICAgbWluSGVpZ2h0OiA0OCxcbiAgICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICAgIGp1c3RpZnlDb250ZW50OiAnZmxleC1zdGFydCcsXG4gICAgICBhbGlnbkl0ZW1zOiAnY2VudGVyJyxcbiAgICAgIGN1cnNvcjogJ3BvaW50ZXInLFxuICAgICAgcGFkZGluZ1RvcDogNixcbiAgICAgIGJveFNpemluZzogJ2JvcmRlci1ib3gnLFxuICAgICAgb3V0bGluZTogJzAnLFxuICAgICAgV2Via2l0VGFwSGlnaGxpZ2h0Q29sb3I6ICd0cmFuc3BhcmVudCcsXG4gICAgICBwYWRkaW5nQm90dG9tOiA2LFxuICAgICAgcGFkZGluZ0xlZnQ6IDE2LFxuICAgICAgcGFkZGluZ1JpZ2h0OiAxNlxuICAgIH0sIF9kZWZpbmVQcm9wZXJ0eShfb3B0aW9uLCB0aGVtZS5icmVha3BvaW50cy51cCgnc20nKSwge1xuICAgICAgbWluSGVpZ2h0OiAnYXV0bydcbiAgICB9KSwgX2RlZmluZVByb3BlcnR5KF9vcHRpb24sICcmW2FyaWEtc2VsZWN0ZWQ9XCJ0cnVlXCJdJywge1xuICAgICAgYmFja2dyb3VuZENvbG9yOiB0aGVtZS5wYWxldHRlLmFjdGlvbi5zZWxlY3RlZFxuICAgIH0pLCBfZGVmaW5lUHJvcGVydHkoX29wdGlvbiwgJyZbZGF0YS1mb2N1cz1cInRydWVcIl0nLCB7XG4gICAgICBiYWNrZ3JvdW5kQ29sb3I6IHRoZW1lLnBhbGV0dGUuYWN0aW9uLmhvdmVyXG4gICAgfSksIF9kZWZpbmVQcm9wZXJ0eShfb3B0aW9uLCAnJjphY3RpdmUnLCB7XG4gICAgICBiYWNrZ3JvdW5kQ29sb3I6IHRoZW1lLnBhbGV0dGUuYWN0aW9uLnNlbGVjdGVkXG4gICAgfSksIF9kZWZpbmVQcm9wZXJ0eShfb3B0aW9uLCAnJlthcmlhLWRpc2FibGVkPVwidHJ1ZVwiXScsIHtcbiAgICAgIG9wYWNpdHk6IHRoZW1lLnBhbGV0dGUuYWN0aW9uLmRpc2FibGVkT3BhY2l0eSxcbiAgICAgIHBvaW50ZXJFdmVudHM6ICdub25lJ1xuICAgIH0pLCBfb3B0aW9uKSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSBncm91cCdzIGxhYmVsIGVsZW1lbnRzLiAqL1xuICAgIGdyb3VwTGFiZWw6IHtcbiAgICAgIGJhY2tncm91bmRDb2xvcjogdGhlbWUucGFsZXR0ZS5iYWNrZ3JvdW5kLnBhcGVyLFxuICAgICAgdG9wOiAtOFxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgZ3JvdXAncyB1bCBlbGVtZW50cy4gKi9cbiAgICBncm91cFVsOiB7XG4gICAgICBwYWRkaW5nOiAwLFxuICAgICAgJyYgJG9wdGlvbic6IHtcbiAgICAgICAgcGFkZGluZ0xlZnQ6IDI0XG4gICAgICB9XG4gICAgfVxuICB9O1xufTtcblxuZnVuY3Rpb24gRGlzYWJsZVBvcnRhbChwcm9wcykge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3QvcHJvcC10eXBlc1xuICB2YXIgYW5jaG9yRWwgPSBwcm9wcy5hbmNob3JFbCxcbiAgICAgIG9wZW4gPSBwcm9wcy5vcGVuLFxuICAgICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMocHJvcHMsIFtcImFuY2hvckVsXCIsIFwib3BlblwiXSk7XG5cbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIG90aGVyKTtcbn1cblxudmFyIF9yZWYgPSAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChDbG9zZUljb24sIHtcbiAgZm9udFNpemU6IFwic21hbGxcIlxufSk7XG5cbnZhciBfcmVmMiA9IC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KEFycm93RHJvcERvd25JY29uLCBudWxsKTtcblxudmFyIEF1dG9jb21wbGV0ZSA9IC8qI19fUFVSRV9fKi9SZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIEF1dG9jb21wbGV0ZShwcm9wcywgcmVmKSB7XG4gIC8qIGVzbGludC1kaXNhYmxlIG5vLXVudXNlZC12YXJzICovXG4gIHZhciBfcHJvcHMkYXV0b0NvbXBsZXRlID0gcHJvcHMuYXV0b0NvbXBsZXRlLFxuICAgICAgYXV0b0NvbXBsZXRlID0gX3Byb3BzJGF1dG9Db21wbGV0ZSA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcHJvcHMkYXV0b0NvbXBsZXRlLFxuICAgICAgX3Byb3BzJGF1dG9IaWdobGlnaHQgPSBwcm9wcy5hdXRvSGlnaGxpZ2h0LFxuICAgICAgYXV0b0hpZ2hsaWdodCA9IF9wcm9wcyRhdXRvSGlnaGxpZ2h0ID09PSB2b2lkIDAgPyBmYWxzZSA6IF9wcm9wcyRhdXRvSGlnaGxpZ2h0LFxuICAgICAgX3Byb3BzJGF1dG9TZWxlY3QgPSBwcm9wcy5hdXRvU2VsZWN0LFxuICAgICAgYXV0b1NlbGVjdCA9IF9wcm9wcyRhdXRvU2VsZWN0ID09PSB2b2lkIDAgPyBmYWxzZSA6IF9wcm9wcyRhdXRvU2VsZWN0LFxuICAgICAgX3Byb3BzJGJsdXJPblNlbGVjdCA9IHByb3BzLmJsdXJPblNlbGVjdCxcbiAgICAgIGJsdXJPblNlbGVjdCA9IF9wcm9wcyRibHVyT25TZWxlY3QgPT09IHZvaWQgMCA/IGZhbHNlIDogX3Byb3BzJGJsdXJPblNlbGVjdCxcbiAgICAgIENoaXBQcm9wcyA9IHByb3BzLkNoaXBQcm9wcyxcbiAgICAgIGNsYXNzZXMgPSBwcm9wcy5jbGFzc2VzLFxuICAgICAgY2xhc3NOYW1lID0gcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgX3Byb3BzJGNsZWFyT25CbHVyID0gcHJvcHMuY2xlYXJPbkJsdXIsXG4gICAgICBjbGVhck9uQmx1ciA9IF9wcm9wcyRjbGVhck9uQmx1ciA9PT0gdm9pZCAwID8gIXByb3BzLmZyZWVTb2xvIDogX3Byb3BzJGNsZWFyT25CbHVyLFxuICAgICAgX3Byb3BzJGNsZWFyT25Fc2NhcGUgPSBwcm9wcy5jbGVhck9uRXNjYXBlLFxuICAgICAgY2xlYXJPbkVzY2FwZSA9IF9wcm9wcyRjbGVhck9uRXNjYXBlID09PSB2b2lkIDAgPyBmYWxzZSA6IF9wcm9wcyRjbGVhck9uRXNjYXBlLFxuICAgICAgX3Byb3BzJGNsZWFyVGV4dCA9IHByb3BzLmNsZWFyVGV4dCxcbiAgICAgIGNsZWFyVGV4dCA9IF9wcm9wcyRjbGVhclRleHQgPT09IHZvaWQgMCA/ICdDbGVhcicgOiBfcHJvcHMkY2xlYXJUZXh0LFxuICAgICAgX3Byb3BzJGNsb3NlSWNvbiA9IHByb3BzLmNsb3NlSWNvbixcbiAgICAgIGNsb3NlSWNvbiA9IF9wcm9wcyRjbG9zZUljb24gPT09IHZvaWQgMCA/IF9yZWYgOiBfcHJvcHMkY2xvc2VJY29uLFxuICAgICAgX3Byb3BzJGNsb3NlVGV4dCA9IHByb3BzLmNsb3NlVGV4dCxcbiAgICAgIGNsb3NlVGV4dCA9IF9wcm9wcyRjbG9zZVRleHQgPT09IHZvaWQgMCA/ICdDbG9zZScgOiBfcHJvcHMkY2xvc2VUZXh0LFxuICAgICAgX3Byb3BzJGRlYnVnID0gcHJvcHMuZGVidWcsXG4gICAgICBkZWJ1ZyA9IF9wcm9wcyRkZWJ1ZyA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcHJvcHMkZGVidWcsXG4gICAgICBfcHJvcHMkZGVmYXVsdFZhbHVlID0gcHJvcHMuZGVmYXVsdFZhbHVlLFxuICAgICAgZGVmYXVsdFZhbHVlID0gX3Byb3BzJGRlZmF1bHRWYWx1ZSA9PT0gdm9pZCAwID8gcHJvcHMubXVsdGlwbGUgPyBbXSA6IG51bGwgOiBfcHJvcHMkZGVmYXVsdFZhbHVlLFxuICAgICAgX3Byb3BzJGRpc2FibGVDbGVhcmFiID0gcHJvcHMuZGlzYWJsZUNsZWFyYWJsZSxcbiAgICAgIGRpc2FibGVDbGVhcmFibGUgPSBfcHJvcHMkZGlzYWJsZUNsZWFyYWIgPT09IHZvaWQgMCA/IGZhbHNlIDogX3Byb3BzJGRpc2FibGVDbGVhcmFiLFxuICAgICAgX3Byb3BzJGRpc2FibGVDbG9zZU9uID0gcHJvcHMuZGlzYWJsZUNsb3NlT25TZWxlY3QsXG4gICAgICBkaXNhYmxlQ2xvc2VPblNlbGVjdCA9IF9wcm9wcyRkaXNhYmxlQ2xvc2VPbiA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcHJvcHMkZGlzYWJsZUNsb3NlT24sXG4gICAgICBfcHJvcHMkZGlzYWJsZWQgPSBwcm9wcy5kaXNhYmxlZCxcbiAgICAgIGRpc2FibGVkID0gX3Byb3BzJGRpc2FibGVkID09PSB2b2lkIDAgPyBmYWxzZSA6IF9wcm9wcyRkaXNhYmxlZCxcbiAgICAgIF9wcm9wcyRkaXNhYmxlZEl0ZW1zRiA9IHByb3BzLmRpc2FibGVkSXRlbXNGb2N1c2FibGUsXG4gICAgICBkaXNhYmxlZEl0ZW1zRm9jdXNhYmxlID0gX3Byb3BzJGRpc2FibGVkSXRlbXNGID09PSB2b2lkIDAgPyBmYWxzZSA6IF9wcm9wcyRkaXNhYmxlZEl0ZW1zRixcbiAgICAgIF9wcm9wcyRkaXNhYmxlTGlzdFdyYSA9IHByb3BzLmRpc2FibGVMaXN0V3JhcCxcbiAgICAgIGRpc2FibGVMaXN0V3JhcCA9IF9wcm9wcyRkaXNhYmxlTGlzdFdyYSA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcHJvcHMkZGlzYWJsZUxpc3RXcmEsXG4gICAgICBfcHJvcHMkZGlzYWJsZVBvcnRhbCA9IHByb3BzLmRpc2FibGVQb3J0YWwsXG4gICAgICBkaXNhYmxlUG9ydGFsID0gX3Byb3BzJGRpc2FibGVQb3J0YWwgPT09IHZvaWQgMCA/IGZhbHNlIDogX3Byb3BzJGRpc2FibGVQb3J0YWwsXG4gICAgICBmaWx0ZXJPcHRpb25zID0gcHJvcHMuZmlsdGVyT3B0aW9ucyxcbiAgICAgIF9wcm9wcyRmaWx0ZXJTZWxlY3RlZCA9IHByb3BzLmZpbHRlclNlbGVjdGVkT3B0aW9ucyxcbiAgICAgIGZpbHRlclNlbGVjdGVkT3B0aW9ucyA9IF9wcm9wcyRmaWx0ZXJTZWxlY3RlZCA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcHJvcHMkZmlsdGVyU2VsZWN0ZWQsXG4gICAgICBfcHJvcHMkZm9yY2VQb3B1cEljb24gPSBwcm9wcy5mb3JjZVBvcHVwSWNvbixcbiAgICAgIGZvcmNlUG9wdXBJY29uID0gX3Byb3BzJGZvcmNlUG9wdXBJY29uID09PSB2b2lkIDAgPyAnYXV0bycgOiBfcHJvcHMkZm9yY2VQb3B1cEljb24sXG4gICAgICBfcHJvcHMkZnJlZVNvbG8gPSBwcm9wcy5mcmVlU29sbyxcbiAgICAgIGZyZWVTb2xvID0gX3Byb3BzJGZyZWVTb2xvID09PSB2b2lkIDAgPyBmYWxzZSA6IF9wcm9wcyRmcmVlU29sbyxcbiAgICAgIF9wcm9wcyRmdWxsV2lkdGggPSBwcm9wcy5mdWxsV2lkdGgsXG4gICAgICBmdWxsV2lkdGggPSBfcHJvcHMkZnVsbFdpZHRoID09PSB2b2lkIDAgPyBmYWxzZSA6IF9wcm9wcyRmdWxsV2lkdGgsXG4gICAgICBfcHJvcHMkZ2V0TGltaXRUYWdzVGUgPSBwcm9wcy5nZXRMaW1pdFRhZ3NUZXh0LFxuICAgICAgZ2V0TGltaXRUYWdzVGV4dCA9IF9wcm9wcyRnZXRMaW1pdFRhZ3NUZSA9PT0gdm9pZCAwID8gZnVuY3Rpb24gKG1vcmUpIHtcbiAgICByZXR1cm4gXCIrXCIuY29uY2F0KG1vcmUpO1xuICB9IDogX3Byb3BzJGdldExpbWl0VGFnc1RlLFxuICAgICAgZ2V0T3B0aW9uRGlzYWJsZWQgPSBwcm9wcy5nZXRPcHRpb25EaXNhYmxlZCxcbiAgICAgIF9wcm9wcyRnZXRPcHRpb25MYWJlbCA9IHByb3BzLmdldE9wdGlvbkxhYmVsLFxuICAgICAgZ2V0T3B0aW9uTGFiZWwgPSBfcHJvcHMkZ2V0T3B0aW9uTGFiZWwgPT09IHZvaWQgMCA/IGZ1bmN0aW9uICh4KSB7XG4gICAgcmV0dXJuIHg7XG4gIH0gOiBfcHJvcHMkZ2V0T3B0aW9uTGFiZWwsXG4gICAgICBnZXRPcHRpb25TZWxlY3RlZCA9IHByb3BzLmdldE9wdGlvblNlbGVjdGVkLFxuICAgICAgZ3JvdXBCeSA9IHByb3BzLmdyb3VwQnksXG4gICAgICBfcHJvcHMkaGFuZGxlSG9tZUVuZEsgPSBwcm9wcy5oYW5kbGVIb21lRW5kS2V5cyxcbiAgICAgIGhhbmRsZUhvbWVFbmRLZXlzID0gX3Byb3BzJGhhbmRsZUhvbWVFbmRLID09PSB2b2lkIDAgPyAhcHJvcHMuZnJlZVNvbG8gOiBfcHJvcHMkaGFuZGxlSG9tZUVuZEssXG4gICAgICBpZFByb3AgPSBwcm9wcy5pZCxcbiAgICAgIF9wcm9wcyRpbmNsdWRlSW5wdXRJbiA9IHByb3BzLmluY2x1ZGVJbnB1dEluTGlzdCxcbiAgICAgIGluY2x1ZGVJbnB1dEluTGlzdCA9IF9wcm9wcyRpbmNsdWRlSW5wdXRJbiA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcHJvcHMkaW5jbHVkZUlucHV0SW4sXG4gICAgICBpbnB1dFZhbHVlUHJvcCA9IHByb3BzLmlucHV0VmFsdWUsXG4gICAgICBfcHJvcHMkbGltaXRUYWdzID0gcHJvcHMubGltaXRUYWdzLFxuICAgICAgbGltaXRUYWdzID0gX3Byb3BzJGxpbWl0VGFncyA9PT0gdm9pZCAwID8gLTEgOiBfcHJvcHMkbGltaXRUYWdzLFxuICAgICAgX3Byb3BzJExpc3Rib3hDb21wb25lID0gcHJvcHMuTGlzdGJveENvbXBvbmVudCxcbiAgICAgIExpc3Rib3hDb21wb25lbnQgPSBfcHJvcHMkTGlzdGJveENvbXBvbmUgPT09IHZvaWQgMCA/ICd1bCcgOiBfcHJvcHMkTGlzdGJveENvbXBvbmUsXG4gICAgICBMaXN0Ym94UHJvcHMgPSBwcm9wcy5MaXN0Ym94UHJvcHMsXG4gICAgICBfcHJvcHMkbG9hZGluZyA9IHByb3BzLmxvYWRpbmcsXG4gICAgICBsb2FkaW5nID0gX3Byb3BzJGxvYWRpbmcgPT09IHZvaWQgMCA/IGZhbHNlIDogX3Byb3BzJGxvYWRpbmcsXG4gICAgICBfcHJvcHMkbG9hZGluZ1RleHQgPSBwcm9wcy5sb2FkaW5nVGV4dCxcbiAgICAgIGxvYWRpbmdUZXh0ID0gX3Byb3BzJGxvYWRpbmdUZXh0ID09PSB2b2lkIDAgPyAnTG9hZGluZ+KApicgOiBfcHJvcHMkbG9hZGluZ1RleHQsXG4gICAgICBfcHJvcHMkbXVsdGlwbGUgPSBwcm9wcy5tdWx0aXBsZSxcbiAgICAgIG11bHRpcGxlID0gX3Byb3BzJG11bHRpcGxlID09PSB2b2lkIDAgPyBmYWxzZSA6IF9wcm9wcyRtdWx0aXBsZSxcbiAgICAgIF9wcm9wcyRub09wdGlvbnNUZXh0ID0gcHJvcHMubm9PcHRpb25zVGV4dCxcbiAgICAgIG5vT3B0aW9uc1RleHQgPSBfcHJvcHMkbm9PcHRpb25zVGV4dCA9PT0gdm9pZCAwID8gJ05vIG9wdGlvbnMnIDogX3Byb3BzJG5vT3B0aW9uc1RleHQsXG4gICAgICBvbkNoYW5nZSA9IHByb3BzLm9uQ2hhbmdlLFxuICAgICAgb25DbG9zZSA9IHByb3BzLm9uQ2xvc2UsXG4gICAgICBvbkhpZ2hsaWdodENoYW5nZSA9IHByb3BzLm9uSGlnaGxpZ2h0Q2hhbmdlLFxuICAgICAgb25JbnB1dENoYW5nZSA9IHByb3BzLm9uSW5wdXRDaGFuZ2UsXG4gICAgICBvbk9wZW4gPSBwcm9wcy5vbk9wZW4sXG4gICAgICBvcGVuID0gcHJvcHMub3BlbixcbiAgICAgIF9wcm9wcyRvcGVuT25Gb2N1cyA9IHByb3BzLm9wZW5PbkZvY3VzLFxuICAgICAgb3Blbk9uRm9jdXMgPSBfcHJvcHMkb3Blbk9uRm9jdXMgPT09IHZvaWQgMCA/IGZhbHNlIDogX3Byb3BzJG9wZW5PbkZvY3VzLFxuICAgICAgX3Byb3BzJG9wZW5UZXh0ID0gcHJvcHMub3BlblRleHQsXG4gICAgICBvcGVuVGV4dCA9IF9wcm9wcyRvcGVuVGV4dCA9PT0gdm9pZCAwID8gJ09wZW4nIDogX3Byb3BzJG9wZW5UZXh0LFxuICAgICAgb3B0aW9ucyA9IHByb3BzLm9wdGlvbnMsXG4gICAgICBfcHJvcHMkUGFwZXJDb21wb25lbnQgPSBwcm9wcy5QYXBlckNvbXBvbmVudCxcbiAgICAgIFBhcGVyQ29tcG9uZW50ID0gX3Byb3BzJFBhcGVyQ29tcG9uZW50ID09PSB2b2lkIDAgPyBQYXBlciA6IF9wcm9wcyRQYXBlckNvbXBvbmVudCxcbiAgICAgIF9wcm9wcyRQb3BwZXJDb21wb25lbiA9IHByb3BzLlBvcHBlckNvbXBvbmVudCxcbiAgICAgIFBvcHBlckNvbXBvbmVudFByb3AgPSBfcHJvcHMkUG9wcGVyQ29tcG9uZW4gPT09IHZvaWQgMCA/IFBvcHBlciA6IF9wcm9wcyRQb3BwZXJDb21wb25lbixcbiAgICAgIF9wcm9wcyRwb3B1cEljb24gPSBwcm9wcy5wb3B1cEljb24sXG4gICAgICBwb3B1cEljb24gPSBfcHJvcHMkcG9wdXBJY29uID09PSB2b2lkIDAgPyBfcmVmMiA6IF9wcm9wcyRwb3B1cEljb24sXG4gICAgICByZW5kZXJHcm91cFByb3AgPSBwcm9wcy5yZW5kZXJHcm91cCxcbiAgICAgIHJlbmRlcklucHV0ID0gcHJvcHMucmVuZGVySW5wdXQsXG4gICAgICByZW5kZXJPcHRpb25Qcm9wID0gcHJvcHMucmVuZGVyT3B0aW9uLFxuICAgICAgcmVuZGVyVGFncyA9IHByb3BzLnJlbmRlclRhZ3MsXG4gICAgICBfcHJvcHMkc2VsZWN0T25Gb2N1cyA9IHByb3BzLnNlbGVjdE9uRm9jdXMsXG4gICAgICBzZWxlY3RPbkZvY3VzID0gX3Byb3BzJHNlbGVjdE9uRm9jdXMgPT09IHZvaWQgMCA/ICFwcm9wcy5mcmVlU29sbyA6IF9wcm9wcyRzZWxlY3RPbkZvY3VzLFxuICAgICAgX3Byb3BzJHNpemUgPSBwcm9wcy5zaXplLFxuICAgICAgc2l6ZSA9IF9wcm9wcyRzaXplID09PSB2b2lkIDAgPyAnbWVkaXVtJyA6IF9wcm9wcyRzaXplLFxuICAgICAgdmFsdWVQcm9wID0gcHJvcHMudmFsdWUsXG4gICAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhwcm9wcywgW1wiYXV0b0NvbXBsZXRlXCIsIFwiYXV0b0hpZ2hsaWdodFwiLCBcImF1dG9TZWxlY3RcIiwgXCJibHVyT25TZWxlY3RcIiwgXCJDaGlwUHJvcHNcIiwgXCJjbGFzc2VzXCIsIFwiY2xhc3NOYW1lXCIsIFwiY2xlYXJPbkJsdXJcIiwgXCJjbGVhck9uRXNjYXBlXCIsIFwiY2xlYXJUZXh0XCIsIFwiY2xvc2VJY29uXCIsIFwiY2xvc2VUZXh0XCIsIFwiZGVidWdcIiwgXCJkZWZhdWx0VmFsdWVcIiwgXCJkaXNhYmxlQ2xlYXJhYmxlXCIsIFwiZGlzYWJsZUNsb3NlT25TZWxlY3RcIiwgXCJkaXNhYmxlZFwiLCBcImRpc2FibGVkSXRlbXNGb2N1c2FibGVcIiwgXCJkaXNhYmxlTGlzdFdyYXBcIiwgXCJkaXNhYmxlUG9ydGFsXCIsIFwiZmlsdGVyT3B0aW9uc1wiLCBcImZpbHRlclNlbGVjdGVkT3B0aW9uc1wiLCBcImZvcmNlUG9wdXBJY29uXCIsIFwiZnJlZVNvbG9cIiwgXCJmdWxsV2lkdGhcIiwgXCJnZXRMaW1pdFRhZ3NUZXh0XCIsIFwiZ2V0T3B0aW9uRGlzYWJsZWRcIiwgXCJnZXRPcHRpb25MYWJlbFwiLCBcImdldE9wdGlvblNlbGVjdGVkXCIsIFwiZ3JvdXBCeVwiLCBcImhhbmRsZUhvbWVFbmRLZXlzXCIsIFwiaWRcIiwgXCJpbmNsdWRlSW5wdXRJbkxpc3RcIiwgXCJpbnB1dFZhbHVlXCIsIFwibGltaXRUYWdzXCIsIFwiTGlzdGJveENvbXBvbmVudFwiLCBcIkxpc3Rib3hQcm9wc1wiLCBcImxvYWRpbmdcIiwgXCJsb2FkaW5nVGV4dFwiLCBcIm11bHRpcGxlXCIsIFwibm9PcHRpb25zVGV4dFwiLCBcIm9uQ2hhbmdlXCIsIFwib25DbG9zZVwiLCBcIm9uSGlnaGxpZ2h0Q2hhbmdlXCIsIFwib25JbnB1dENoYW5nZVwiLCBcIm9uT3BlblwiLCBcIm9wZW5cIiwgXCJvcGVuT25Gb2N1c1wiLCBcIm9wZW5UZXh0XCIsIFwib3B0aW9uc1wiLCBcIlBhcGVyQ29tcG9uZW50XCIsIFwiUG9wcGVyQ29tcG9uZW50XCIsIFwicG9wdXBJY29uXCIsIFwicmVuZGVyR3JvdXBcIiwgXCJyZW5kZXJJbnB1dFwiLCBcInJlbmRlck9wdGlvblwiLCBcInJlbmRlclRhZ3NcIiwgXCJzZWxlY3RPbkZvY3VzXCIsIFwic2l6ZVwiLCBcInZhbHVlXCJdKTtcbiAgLyogZXNsaW50LWVuYWJsZSBuby11bnVzZWQtdmFycyAqL1xuXG5cbiAgdmFyIFBvcHBlckNvbXBvbmVudCA9IGRpc2FibGVQb3J0YWwgPyBEaXNhYmxlUG9ydGFsIDogUG9wcGVyQ29tcG9uZW50UHJvcDtcblxuICB2YXIgX3VzZUF1dG9jb21wbGV0ZSA9IHVzZUF1dG9jb21wbGV0ZShfZXh0ZW5kcyh7fSwgcHJvcHMsIHtcbiAgICBjb21wb25lbnROYW1lOiAnQXV0b2NvbXBsZXRlJ1xuICB9KSksXG4gICAgICBnZXRSb290UHJvcHMgPSBfdXNlQXV0b2NvbXBsZXRlLmdldFJvb3RQcm9wcyxcbiAgICAgIGdldElucHV0UHJvcHMgPSBfdXNlQXV0b2NvbXBsZXRlLmdldElucHV0UHJvcHMsXG4gICAgICBnZXRJbnB1dExhYmVsUHJvcHMgPSBfdXNlQXV0b2NvbXBsZXRlLmdldElucHV0TGFiZWxQcm9wcyxcbiAgICAgIGdldFBvcHVwSW5kaWNhdG9yUHJvcHMgPSBfdXNlQXV0b2NvbXBsZXRlLmdldFBvcHVwSW5kaWNhdG9yUHJvcHMsXG4gICAgICBnZXRDbGVhclByb3BzID0gX3VzZUF1dG9jb21wbGV0ZS5nZXRDbGVhclByb3BzLFxuICAgICAgZ2V0VGFnUHJvcHMgPSBfdXNlQXV0b2NvbXBsZXRlLmdldFRhZ1Byb3BzLFxuICAgICAgZ2V0TGlzdGJveFByb3BzID0gX3VzZUF1dG9jb21wbGV0ZS5nZXRMaXN0Ym94UHJvcHMsXG4gICAgICBnZXRPcHRpb25Qcm9wcyA9IF91c2VBdXRvY29tcGxldGUuZ2V0T3B0aW9uUHJvcHMsXG4gICAgICB2YWx1ZSA9IF91c2VBdXRvY29tcGxldGUudmFsdWUsXG4gICAgICBkaXJ0eSA9IF91c2VBdXRvY29tcGxldGUuZGlydHksXG4gICAgICBpZCA9IF91c2VBdXRvY29tcGxldGUuaWQsXG4gICAgICBwb3B1cE9wZW4gPSBfdXNlQXV0b2NvbXBsZXRlLnBvcHVwT3BlbixcbiAgICAgIGZvY3VzZWQgPSBfdXNlQXV0b2NvbXBsZXRlLmZvY3VzZWQsXG4gICAgICBmb2N1c2VkVGFnID0gX3VzZUF1dG9jb21wbGV0ZS5mb2N1c2VkVGFnLFxuICAgICAgYW5jaG9yRWwgPSBfdXNlQXV0b2NvbXBsZXRlLmFuY2hvckVsLFxuICAgICAgc2V0QW5jaG9yRWwgPSBfdXNlQXV0b2NvbXBsZXRlLnNldEFuY2hvckVsLFxuICAgICAgaW5wdXRWYWx1ZSA9IF91c2VBdXRvY29tcGxldGUuaW5wdXRWYWx1ZSxcbiAgICAgIGdyb3VwZWRPcHRpb25zID0gX3VzZUF1dG9jb21wbGV0ZS5ncm91cGVkT3B0aW9ucztcblxuICB2YXIgc3RhcnRBZG9ybm1lbnQ7XG5cbiAgaWYgKG11bHRpcGxlICYmIHZhbHVlLmxlbmd0aCA+IDApIHtcbiAgICB2YXIgZ2V0Q3VzdG9taXplZFRhZ1Byb3BzID0gZnVuY3Rpb24gZ2V0Q3VzdG9taXplZFRhZ1Byb3BzKHBhcmFtcykge1xuICAgICAgcmV0dXJuIF9leHRlbmRzKHtcbiAgICAgICAgY2xhc3NOYW1lOiBjbHN4KGNsYXNzZXMudGFnLCBzaXplID09PSAnc21hbGwnICYmIGNsYXNzZXMudGFnU2l6ZVNtYWxsKSxcbiAgICAgICAgZGlzYWJsZWQ6IGRpc2FibGVkXG4gICAgICB9LCBnZXRUYWdQcm9wcyhwYXJhbXMpKTtcbiAgICB9O1xuXG4gICAgaWYgKHJlbmRlclRhZ3MpIHtcbiAgICAgIHN0YXJ0QWRvcm5tZW50ID0gcmVuZGVyVGFncyh2YWx1ZSwgZ2V0Q3VzdG9taXplZFRhZ1Byb3BzKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc3RhcnRBZG9ybm1lbnQgPSB2YWx1ZS5tYXAoZnVuY3Rpb24gKG9wdGlvbiwgaW5kZXgpIHtcbiAgICAgICAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KENoaXAsIF9leHRlbmRzKHtcbiAgICAgICAgICBsYWJlbDogZ2V0T3B0aW9uTGFiZWwob3B0aW9uKSxcbiAgICAgICAgICBzaXplOiBzaXplXG4gICAgICAgIH0sIGdldEN1c3RvbWl6ZWRUYWdQcm9wcyh7XG4gICAgICAgICAgaW5kZXg6IGluZGV4XG4gICAgICAgIH0pLCBDaGlwUHJvcHMpKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIGlmIChsaW1pdFRhZ3MgPiAtMSAmJiBBcnJheS5pc0FycmF5KHN0YXJ0QWRvcm5tZW50KSkge1xuICAgIHZhciBtb3JlID0gc3RhcnRBZG9ybm1lbnQubGVuZ3RoIC0gbGltaXRUYWdzO1xuXG4gICAgaWYgKCFmb2N1c2VkICYmIG1vcmUgPiAwKSB7XG4gICAgICBzdGFydEFkb3JubWVudCA9IHN0YXJ0QWRvcm5tZW50LnNwbGljZSgwLCBsaW1pdFRhZ3MpO1xuICAgICAgc3RhcnRBZG9ybm1lbnQucHVzaCggLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIsIHtcbiAgICAgICAgY2xhc3NOYW1lOiBjbGFzc2VzLnRhZyxcbiAgICAgICAga2V5OiBzdGFydEFkb3JubWVudC5sZW5ndGhcbiAgICAgIH0sIGdldExpbWl0VGFnc1RleHQobW9yZSkpKTtcbiAgICB9XG4gIH1cblxuICB2YXIgZGVmYXVsdFJlbmRlckdyb3VwID0gZnVuY3Rpb24gZGVmYXVsdFJlbmRlckdyb3VwKHBhcmFtcykge1xuICAgIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcImxpXCIsIHtcbiAgICAgIGtleTogcGFyYW1zLmtleVxuICAgIH0sIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KExpc3RTdWJoZWFkZXIsIHtcbiAgICAgIGNsYXNzTmFtZTogY2xhc3Nlcy5ncm91cExhYmVsLFxuICAgICAgY29tcG9uZW50OiBcImRpdlwiXG4gICAgfSwgcGFyYW1zLmdyb3VwKSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJ1bFwiLCB7XG4gICAgICBjbGFzc05hbWU6IGNsYXNzZXMuZ3JvdXBVbFxuICAgIH0sIHBhcmFtcy5jaGlsZHJlbikpO1xuICB9O1xuXG4gIHZhciByZW5kZXJHcm91cCA9IHJlbmRlckdyb3VwUHJvcCB8fCBkZWZhdWx0UmVuZGVyR3JvdXA7XG4gIHZhciByZW5kZXJPcHRpb24gPSByZW5kZXJPcHRpb25Qcm9wIHx8IGdldE9wdGlvbkxhYmVsO1xuXG4gIHZhciByZW5kZXJMaXN0T3B0aW9uID0gZnVuY3Rpb24gcmVuZGVyTGlzdE9wdGlvbihvcHRpb24sIGluZGV4KSB7XG4gICAgdmFyIG9wdGlvblByb3BzID0gZ2V0T3B0aW9uUHJvcHMoe1xuICAgICAgb3B0aW9uOiBvcHRpb24sXG4gICAgICBpbmRleDogaW5kZXhcbiAgICB9KTtcbiAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJsaVwiLCBfZXh0ZW5kcyh7fSwgb3B0aW9uUHJvcHMsIHtcbiAgICAgIGNsYXNzTmFtZTogY2xhc3Nlcy5vcHRpb25cbiAgICB9KSwgcmVuZGVyT3B0aW9uKG9wdGlvbiwge1xuICAgICAgc2VsZWN0ZWQ6IG9wdGlvblByb3BzWydhcmlhLXNlbGVjdGVkJ10sXG4gICAgICBpbnB1dFZhbHVlOiBpbnB1dFZhbHVlXG4gICAgfSkpO1xuICB9O1xuXG4gIHZhciBoYXNDbGVhckljb24gPSAhZGlzYWJsZUNsZWFyYWJsZSAmJiAhZGlzYWJsZWQ7XG4gIHZhciBoYXNQb3B1cEljb24gPSAoIWZyZWVTb2xvIHx8IGZvcmNlUG9wdXBJY29uID09PSB0cnVlKSAmJiBmb3JjZVBvcHVwSWNvbiAhPT0gZmFsc2U7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChSZWFjdC5GcmFnbWVudCwgbnVsbCwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgX2V4dGVuZHMoe1xuICAgIHJlZjogcmVmLFxuICAgIGNsYXNzTmFtZTogY2xzeChjbGFzc2VzLnJvb3QsIGNsYXNzTmFtZSwgZm9jdXNlZCAmJiBjbGFzc2VzLmZvY3VzZWQsIGZ1bGxXaWR0aCAmJiBjbGFzc2VzLmZ1bGxXaWR0aCwgaGFzQ2xlYXJJY29uICYmIGNsYXNzZXMuaGFzQ2xlYXJJY29uLCBoYXNQb3B1cEljb24gJiYgY2xhc3Nlcy5oYXNQb3B1cEljb24pXG4gIH0sIGdldFJvb3RQcm9wcyhvdGhlcikpLCByZW5kZXJJbnB1dCh7XG4gICAgaWQ6IGlkLFxuICAgIGRpc2FibGVkOiBkaXNhYmxlZCxcbiAgICBmdWxsV2lkdGg6IHRydWUsXG4gICAgc2l6ZTogc2l6ZSA9PT0gJ3NtYWxsJyA/ICdzbWFsbCcgOiB1bmRlZmluZWQsXG4gICAgSW5wdXRMYWJlbFByb3BzOiBnZXRJbnB1dExhYmVsUHJvcHMoKSxcbiAgICBJbnB1dFByb3BzOiB7XG4gICAgICByZWY6IHNldEFuY2hvckVsLFxuICAgICAgY2xhc3NOYW1lOiBjbGFzc2VzLmlucHV0Um9vdCxcbiAgICAgIHN0YXJ0QWRvcm5tZW50OiBzdGFydEFkb3JubWVudCxcbiAgICAgIGVuZEFkb3JubWVudDogLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwge1xuICAgICAgICBjbGFzc05hbWU6IGNsYXNzZXMuZW5kQWRvcm5tZW50XG4gICAgICB9LCBoYXNDbGVhckljb24gPyAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChJY29uQnV0dG9uLCBfZXh0ZW5kcyh7fSwgZ2V0Q2xlYXJQcm9wcygpLCB7XG4gICAgICAgIFwiYXJpYS1sYWJlbFwiOiBjbGVhclRleHQsXG4gICAgICAgIHRpdGxlOiBjbGVhclRleHQsXG4gICAgICAgIGNsYXNzTmFtZTogY2xzeChjbGFzc2VzLmNsZWFySW5kaWNhdG9yLCBkaXJ0eSAmJiBjbGFzc2VzLmNsZWFySW5kaWNhdG9yRGlydHkpXG4gICAgICB9KSwgY2xvc2VJY29uKSA6IG51bGwsIGhhc1BvcHVwSWNvbiA/IC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KEljb25CdXR0b24sIF9leHRlbmRzKHt9LCBnZXRQb3B1cEluZGljYXRvclByb3BzKCksIHtcbiAgICAgICAgZGlzYWJsZWQ6IGRpc2FibGVkLFxuICAgICAgICBcImFyaWEtbGFiZWxcIjogcG9wdXBPcGVuID8gY2xvc2VUZXh0IDogb3BlblRleHQsXG4gICAgICAgIHRpdGxlOiBwb3B1cE9wZW4gPyBjbG9zZVRleHQgOiBvcGVuVGV4dCxcbiAgICAgICAgY2xhc3NOYW1lOiBjbHN4KGNsYXNzZXMucG9wdXBJbmRpY2F0b3IsIHBvcHVwT3BlbiAmJiBjbGFzc2VzLnBvcHVwSW5kaWNhdG9yT3BlbilcbiAgICAgIH0pLCBwb3B1cEljb24pIDogbnVsbClcbiAgICB9LFxuICAgIGlucHV0UHJvcHM6IF9leHRlbmRzKHtcbiAgICAgIGNsYXNzTmFtZTogY2xzeChjbGFzc2VzLmlucHV0LCBmb2N1c2VkVGFnID09PSAtMSAmJiBjbGFzc2VzLmlucHV0Rm9jdXNlZCksXG4gICAgICBkaXNhYmxlZDogZGlzYWJsZWRcbiAgICB9LCBnZXRJbnB1dFByb3BzKCkpXG4gIH0pKSwgcG9wdXBPcGVuICYmIGFuY2hvckVsID8gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoUG9wcGVyQ29tcG9uZW50LCB7XG4gICAgY2xhc3NOYW1lOiBjbHN4KGNsYXNzZXMucG9wcGVyLCBkaXNhYmxlUG9ydGFsICYmIGNsYXNzZXMucG9wcGVyRGlzYWJsZVBvcnRhbCksXG4gICAgc3R5bGU6IHtcbiAgICAgIHdpZHRoOiBhbmNob3JFbCA/IGFuY2hvckVsLmNsaWVudFdpZHRoIDogbnVsbFxuICAgIH0sXG4gICAgcm9sZTogXCJwcmVzZW50YXRpb25cIixcbiAgICBhbmNob3JFbDogYW5jaG9yRWwsXG4gICAgb3BlbjogdHJ1ZVxuICB9LCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChQYXBlckNvbXBvbmVudCwge1xuICAgIGNsYXNzTmFtZTogY2xhc3Nlcy5wYXBlclxuICB9LCBsb2FkaW5nICYmIGdyb3VwZWRPcHRpb25zLmxlbmd0aCA9PT0gMCA/IC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHtcbiAgICBjbGFzc05hbWU6IGNsYXNzZXMubG9hZGluZ1xuICB9LCBsb2FkaW5nVGV4dCkgOiBudWxsLCBncm91cGVkT3B0aW9ucy5sZW5ndGggPT09IDAgJiYgIWZyZWVTb2xvICYmICFsb2FkaW5nID8gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwge1xuICAgIGNsYXNzTmFtZTogY2xhc3Nlcy5ub09wdGlvbnNcbiAgfSwgbm9PcHRpb25zVGV4dCkgOiBudWxsLCBncm91cGVkT3B0aW9ucy5sZW5ndGggPiAwID8gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoTGlzdGJveENvbXBvbmVudCwgX2V4dGVuZHMoe1xuICAgIGNsYXNzTmFtZTogY2xhc3Nlcy5saXN0Ym94XG4gIH0sIGdldExpc3Rib3hQcm9wcygpLCBMaXN0Ym94UHJvcHMpLCBncm91cGVkT3B0aW9ucy5tYXAoZnVuY3Rpb24gKG9wdGlvbiwgaW5kZXgpIHtcbiAgICBpZiAoZ3JvdXBCeSkge1xuICAgICAgcmV0dXJuIHJlbmRlckdyb3VwKHtcbiAgICAgICAga2V5OiBvcHRpb24ua2V5LFxuICAgICAgICBncm91cDogb3B0aW9uLmdyb3VwLFxuICAgICAgICBjaGlsZHJlbjogb3B0aW9uLm9wdGlvbnMubWFwKGZ1bmN0aW9uIChvcHRpb24yLCBpbmRleDIpIHtcbiAgICAgICAgICByZXR1cm4gcmVuZGVyTGlzdE9wdGlvbihvcHRpb24yLCBvcHRpb24uaW5kZXggKyBpbmRleDIpO1xuICAgICAgICB9KVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlbmRlckxpc3RPcHRpb24ob3B0aW9uLCBpbmRleCk7XG4gIH0pKSA6IG51bGwpKSA6IG51bGwpO1xufSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBBdXRvY29tcGxldGUucHJvcFR5cGVzID0ge1xuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBXYXJuaW5nIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIC8vIHwgVGhlc2UgUHJvcFR5cGVzIGFyZSBnZW5lcmF0ZWQgZnJvbSB0aGUgVHlwZVNjcmlwdCB0eXBlIGRlZmluaXRpb25zIHxcbiAgLy8gfCAgICAgVG8gdXBkYXRlIHRoZW0gZWRpdCB0aGUgZC50cyBmaWxlIGFuZCBydW4gXCJ5YXJuIHByb3B0eXBlc1wiICAgICB8XG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgcG9ydGlvbiBvZiB0aGUgc2VsZWN0ZWQgc3VnZ2VzdGlvbiB0aGF0IGhhcyBub3QgYmVlbiB0eXBlZCBieSB0aGUgdXNlcixcbiAgICoga25vd24gYXMgdGhlIGNvbXBsZXRpb24gc3RyaW5nLCBhcHBlYXJzIGlubGluZSBhZnRlciB0aGUgaW5wdXQgY3Vyc29yIGluIHRoZSB0ZXh0Ym94LlxuICAgKiBUaGUgaW5saW5lIGNvbXBsZXRpb24gc3RyaW5nIGlzIHZpc3VhbGx5IGhpZ2hsaWdodGVkIGFuZCBoYXMgYSBzZWxlY3RlZCBzdGF0ZS5cbiAgICovXG4gIGF1dG9Db21wbGV0ZTogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGZpcnN0IG9wdGlvbiBpcyBhdXRvbWF0aWNhbGx5IGhpZ2hsaWdodGVkLlxuICAgKi9cbiAgYXV0b0hpZ2hsaWdodDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIHNlbGVjdGVkIG9wdGlvbiBiZWNvbWVzIHRoZSB2YWx1ZSBvZiB0aGUgaW5wdXRcbiAgICogd2hlbiB0aGUgQXV0b2NvbXBsZXRlIGxvc2VzIGZvY3VzIHVubGVzcyB0aGUgdXNlciBjaG9vc2VzXG4gICAqIGEgZGlmZmVyZW50IG9wdGlvbiBvciBjaGFuZ2VzIHRoZSBjaGFyYWN0ZXIgc3RyaW5nIGluIHRoZSBpbnB1dC5cbiAgICovXG4gIGF1dG9TZWxlY3Q6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBDb250cm9sIGlmIHRoZSBpbnB1dCBzaG91bGQgYmUgYmx1cnJlZCB3aGVuIGFuIG9wdGlvbiBpcyBzZWxlY3RlZDpcbiAgICpcbiAgICogLSBgZmFsc2VgIHRoZSBpbnB1dCBpcyBub3QgYmx1cnJlZC5cbiAgICogLSBgdHJ1ZWAgdGhlIGlucHV0IGlzIGFsd2F5cyBibHVycmVkLlxuICAgKiAtIGB0b3VjaGAgdGhlIGlucHV0IGlzIGJsdXJyZWQgYWZ0ZXIgYSB0b3VjaCBldmVudC5cbiAgICogLSBgbW91c2VgIHRoZSBpbnB1dCBpcyBibHVycmVkIGFmdGVyIGEgbW91c2UgZXZlbnQuXG4gICAqL1xuICBibHVyT25TZWxlY3Q6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5vbmVPZihbJ21vdXNlJywgJ3RvdWNoJ10pLCBQcm9wVHlwZXMuYm9vbF0pLFxuXG4gIC8qKlxuICAgKiBQcm9wcyBhcHBsaWVkIHRvIHRoZSBbYENoaXBgXSgvYXBpL2NoaXAvKSBlbGVtZW50LlxuICAgKi9cbiAgQ2hpcFByb3BzOiBQcm9wVHlwZXMub2JqZWN0LFxuXG4gIC8qKlxuICAgKiBPdmVycmlkZSBvciBleHRlbmQgdGhlIHN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAqIFNlZSBbQ1NTIEFQSV0oI2NzcykgYmVsb3cgZm9yIG1vcmUgZGV0YWlscy5cbiAgICovXG4gIGNsYXNzZXM6IFByb3BUeXBlcy5vYmplY3QsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgaW5wdXQncyB0ZXh0IHdpbGwgYmUgY2xlYXJlZCBvbiBibHVyIGlmIG5vIHZhbHVlIGlzIHNlbGVjdGVkLlxuICAgKlxuICAgKiBTZXQgdG8gYHRydWVgIGlmIHlvdSB3YW50IHRvIGhlbHAgdGhlIHVzZXIgZW50ZXIgYSBuZXcgdmFsdWUuXG4gICAqIFNldCB0byBgZmFsc2VgIGlmIHlvdSB3YW50IHRvIGhlbHAgdGhlIHVzZXIgcmVzdW1lIGhpcyBzZWFyY2guXG4gICAqL1xuICBjbGVhck9uQmx1cjogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgY2xlYXIgYWxsIHZhbHVlcyB3aGVuIHRoZSB1c2VyIHByZXNzZXMgZXNjYXBlIGFuZCB0aGUgcG9wdXAgaXMgY2xvc2VkLlxuICAgKi9cbiAgY2xlYXJPbkVzY2FwZTogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIE92ZXJyaWRlIHRoZSBkZWZhdWx0IHRleHQgZm9yIHRoZSAqY2xlYXIqIGljb24gYnV0dG9uLlxuICAgKlxuICAgKiBGb3IgbG9jYWxpemF0aW9uIHB1cnBvc2VzLCB5b3UgY2FuIHVzZSB0aGUgcHJvdmlkZWQgW3RyYW5zbGF0aW9uc10oL2d1aWRlcy9sb2NhbGl6YXRpb24vKS5cbiAgICovXG4gIGNsZWFyVGV4dDogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogVGhlIGljb24gdG8gZGlzcGxheSBpbiBwbGFjZSBvZiB0aGUgZGVmYXVsdCBjbG9zZSBpY29uLlxuICAgKi9cbiAgY2xvc2VJY29uOiBQcm9wVHlwZXMubm9kZSxcblxuICAvKipcbiAgICogT3ZlcnJpZGUgdGhlIGRlZmF1bHQgdGV4dCBmb3IgdGhlICpjbG9zZSBwb3B1cCogaWNvbiBidXR0b24uXG4gICAqXG4gICAqIEZvciBsb2NhbGl6YXRpb24gcHVycG9zZXMsIHlvdSBjYW4gdXNlIHRoZSBwcm92aWRlZCBbdHJhbnNsYXRpb25zXSgvZ3VpZGVzL2xvY2FsaXphdGlvbi8pLlxuICAgKi9cbiAgY2xvc2VUZXh0OiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBwb3B1cCB3aWxsIGlnbm9yZSB0aGUgYmx1ciBldmVudCBpZiB0aGUgaW5wdXQgaXMgZmlsbGVkLlxuICAgKiBZb3UgY2FuIGluc3BlY3QgdGhlIHBvcHVwIG1hcmt1cCB3aXRoIHlvdXIgYnJvd3NlciB0b29scy5cbiAgICogQ29uc2lkZXIgdGhpcyBvcHRpb24gd2hlbiB5b3UgbmVlZCB0byBjdXN0b21pemUgdGhlIGNvbXBvbmVudC5cbiAgICovXG4gIGRlYnVnOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogVGhlIGRlZmF1bHQgaW5wdXQgdmFsdWUuIFVzZSB3aGVuIHRoZSBjb21wb25lbnQgaXMgbm90IGNvbnRyb2xsZWQuXG4gICAqL1xuICBkZWZhdWx0VmFsdWU6IFByb3BUeXBlcy5hbnksXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGlucHV0IGNhbid0IGJlIGNsZWFyZWQuXG4gICAqL1xuICBkaXNhYmxlQ2xlYXJhYmxlOiBQcm9wVHlwZXNcbiAgLyogQHR5cGVzY3JpcHQtdG8tcHJvcHR5cGVzLWlnbm9yZSAqL1xuICAuYm9vbCxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgcG9wdXAgd29uJ3QgY2xvc2Ugd2hlbiBhIHZhbHVlIGlzIHNlbGVjdGVkLlxuICAgKi9cbiAgZGlzYWJsZUNsb3NlT25TZWxlY3Q6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBpbnB1dCB3aWxsIGJlIGRpc2FibGVkLlxuICAgKi9cbiAgZGlzYWJsZWQ6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHdpbGwgYWxsb3cgZm9jdXMgb24gZGlzYWJsZWQgaXRlbXMuXG4gICAqL1xuICBkaXNhYmxlZEl0ZW1zRm9jdXNhYmxlOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgbGlzdCBib3ggaW4gdGhlIHBvcHVwIHdpbGwgbm90IHdyYXAgZm9jdXMuXG4gICAqL1xuICBkaXNhYmxlTGlzdFdyYXA6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBEaXNhYmxlIHRoZSBwb3J0YWwgYmVoYXZpb3IuXG4gICAqIFRoZSBjaGlsZHJlbiBzdGF5IHdpdGhpbiBpdCdzIHBhcmVudCBET00gaGllcmFyY2h5LlxuICAgKi9cbiAgZGlzYWJsZVBvcnRhbDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIEEgZmlsdGVyIGZ1bmN0aW9uIHRoYXQgZGV0ZXJtaW5lcyB0aGUgb3B0aW9ucyB0aGF0IGFyZSBlbGlnaWJsZS5cbiAgICpcbiAgICogQHBhcmFtIHtUW119IG9wdGlvbnMgVGhlIG9wdGlvbnMgdG8gcmVuZGVyLlxuICAgKiBAcGFyYW0ge29iamVjdH0gc3RhdGUgVGhlIHN0YXRlIG9mIHRoZSBjb21wb25lbnQuXG4gICAqIEByZXR1cm5zIHtUW119XG4gICAqL1xuICBmaWx0ZXJPcHRpb25zOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCBoaWRlIHRoZSBzZWxlY3RlZCBvcHRpb25zIGZyb20gdGhlIGxpc3QgYm94LlxuICAgKi9cbiAgZmlsdGVyU2VsZWN0ZWRPcHRpb25zOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogRm9yY2UgdGhlIHZpc2liaWxpdHkgZGlzcGxheSBvZiB0aGUgcG9wdXAgaWNvbi5cbiAgICovXG4gIGZvcmNlUG9wdXBJY29uOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMub25lT2YoWydhdXRvJ10pLCBQcm9wVHlwZXMuYm9vbF0pLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBBdXRvY29tcGxldGUgaXMgZnJlZSBzb2xvLCBtZWFuaW5nIHRoYXQgdGhlIHVzZXIgaW5wdXQgaXMgbm90IGJvdW5kIHRvIHByb3ZpZGVkIG9wdGlvbnMuXG4gICAqL1xuICBmcmVlU29sbzogUHJvcFR5cGVzXG4gIC8qIEB0eXBlc2NyaXB0LXRvLXByb3B0eXBlcy1pZ25vcmUgKi9cbiAgLmJvb2wsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGlucHV0IHdpbGwgdGFrZSB1cCB0aGUgZnVsbCB3aWR0aCBvZiBpdHMgY29udGFpbmVyLlxuICAgKi9cbiAgZnVsbFdpZHRoOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogVGhlIGxhYmVsIHRvIGRpc3BsYXkgd2hlbiB0aGUgdGFncyBhcmUgdHJ1bmNhdGVkIChgbGltaXRUYWdzYCkuXG4gICAqXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBtb3JlIFRoZSBudW1iZXIgb2YgdHJ1bmNhdGVkIHRhZ3MuXG4gICAqIEByZXR1cm5zIHtSZWFjdE5vZGV9XG4gICAqL1xuICBnZXRMaW1pdFRhZ3NUZXh0OiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogVXNlZCB0byBkZXRlcm1pbmUgdGhlIGRpc2FibGVkIHN0YXRlIGZvciBhIGdpdmVuIG9wdGlvbi5cbiAgICpcbiAgICogQHBhcmFtIHtUfSBvcHRpb24gVGhlIG9wdGlvbiB0byB0ZXN0LlxuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAgICovXG4gIGdldE9wdGlvbkRpc2FibGVkOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogVXNlZCB0byBkZXRlcm1pbmUgdGhlIHN0cmluZyB2YWx1ZSBmb3IgYSBnaXZlbiBvcHRpb24uXG4gICAqIEl0J3MgdXNlZCB0byBmaWxsIHRoZSBpbnB1dCAoYW5kIHRoZSBsaXN0IGJveCBvcHRpb25zIGlmIGByZW5kZXJPcHRpb25gIGlzIG5vdCBwcm92aWRlZCkuXG4gICAqXG4gICAqIEBwYXJhbSB7VH0gb3B0aW9uXG4gICAqIEByZXR1cm5zIHtzdHJpbmd9XG4gICAqL1xuICBnZXRPcHRpb25MYWJlbDogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIFVzZWQgdG8gZGV0ZXJtaW5lIGlmIGFuIG9wdGlvbiBpcyBzZWxlY3RlZCwgY29uc2lkZXJpbmcgdGhlIGN1cnJlbnQgdmFsdWUuXG4gICAqIFVzZXMgc3RyaWN0IGVxdWFsaXR5IGJ5IGRlZmF1bHQuXG4gICAqXG4gICAqIEBwYXJhbSB7VH0gb3B0aW9uIFRoZSBvcHRpb24gdG8gdGVzdC5cbiAgICogQHBhcmFtIHtUfSB2YWx1ZSBUaGUgdmFsdWUgdG8gdGVzdCBhZ2FpbnN0LlxuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAgICovXG4gIGdldE9wdGlvblNlbGVjdGVkOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogSWYgcHJvdmlkZWQsIHRoZSBvcHRpb25zIHdpbGwgYmUgZ3JvdXBlZCB1bmRlciB0aGUgcmV0dXJuZWQgc3RyaW5nLlxuICAgKiBUaGUgZ3JvdXBCeSB2YWx1ZSBpcyBhbHNvIHVzZWQgYXMgdGhlIHRleHQgZm9yIGdyb3VwIGhlYWRpbmdzIHdoZW4gYHJlbmRlckdyb3VwYCBpcyBub3QgcHJvdmlkZWQuXG4gICAqXG4gICAqIEBwYXJhbSB7VH0gb3B0aW9ucyBUaGUgb3B0aW9ucyB0byBncm91cC5cbiAgICogQHJldHVybnMge3N0cmluZ31cbiAgICovXG4gIGdyb3VwQnk6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBjb21wb25lbnQgaGFuZGxlcyB0aGUgXCJIb21lXCIgYW5kIFwiRW5kXCIga2V5cyB3aGVuIHRoZSBwb3B1cCBpcyBvcGVuLlxuICAgKiBJdCBzaG91bGQgbW92ZSBmb2N1cyB0byB0aGUgZmlyc3Qgb3B0aW9uIGFuZCBsYXN0IG9wdGlvbiwgcmVzcGVjdGl2ZWx5LlxuICAgKi9cbiAgaGFuZGxlSG9tZUVuZEtleXM6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBUaGlzIHByb3AgaXMgdXNlZCB0byBoZWxwIGltcGxlbWVudCB0aGUgYWNjZXNzaWJpbGl0eSBsb2dpYy5cbiAgICogSWYgeW91IGRvbid0IHByb3ZpZGUgdGhpcyBwcm9wLiBJdCBmYWxscyBiYWNrIHRvIGEgcmFuZG9tbHkgZ2VuZXJhdGVkIGlkLlxuICAgKi9cbiAgaWQ6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGhpZ2hsaWdodCBjYW4gbW92ZSB0byB0aGUgaW5wdXQuXG4gICAqL1xuICBpbmNsdWRlSW5wdXRJbkxpc3Q6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBUaGUgaW5wdXQgdmFsdWUuXG4gICAqL1xuICBpbnB1dFZhbHVlOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBUaGUgbWF4aW11bSBudW1iZXIgb2YgdGFncyB0aGF0IHdpbGwgYmUgdmlzaWJsZSB3aGVuIG5vdCBmb2N1c2VkLlxuICAgKiBTZXQgYC0xYCB0byBkaXNhYmxlIHRoZSBsaW1pdC5cbiAgICovXG4gIGxpbWl0VGFnczogUHJvcFR5cGVzLm51bWJlcixcblxuICAvKipcbiAgICogVGhlIGNvbXBvbmVudCB1c2VkIHRvIHJlbmRlciB0aGUgbGlzdGJveC5cbiAgICovXG4gIExpc3Rib3hDb21wb25lbnQ6IFByb3BUeXBlcy5lbGVtZW50VHlwZSxcblxuICAvKipcbiAgICogUHJvcHMgYXBwbGllZCB0byB0aGUgTGlzdGJveCBlbGVtZW50LlxuICAgKi9cbiAgTGlzdGJveFByb3BzOiBQcm9wVHlwZXMub2JqZWN0LFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBjb21wb25lbnQgaXMgaW4gYSBsb2FkaW5nIHN0YXRlLlxuICAgKi9cbiAgbG9hZGluZzogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIFRleHQgdG8gZGlzcGxheSB3aGVuIGluIGEgbG9hZGluZyBzdGF0ZS5cbiAgICpcbiAgICogRm9yIGxvY2FsaXphdGlvbiBwdXJwb3NlcywgeW91IGNhbiB1c2UgdGhlIHByb3ZpZGVkIFt0cmFuc2xhdGlvbnNdKC9ndWlkZXMvbG9jYWxpemF0aW9uLykuXG4gICAqL1xuICBsb2FkaW5nVGV4dDogUHJvcFR5cGVzLm5vZGUsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgYHZhbHVlYCBtdXN0IGJlIGFuIGFycmF5IGFuZCB0aGUgbWVudSB3aWxsIHN1cHBvcnQgbXVsdGlwbGUgc2VsZWN0aW9ucy5cbiAgICovXG4gIG11bHRpcGxlOiBQcm9wVHlwZXNcbiAgLyogQHR5cGVzY3JpcHQtdG8tcHJvcHR5cGVzLWlnbm9yZSAqL1xuICAuYm9vbCxcblxuICAvKipcbiAgICogVGV4dCB0byBkaXNwbGF5IHdoZW4gdGhlcmUgYXJlIG5vIG9wdGlvbnMuXG4gICAqXG4gICAqIEZvciBsb2NhbGl6YXRpb24gcHVycG9zZXMsIHlvdSBjYW4gdXNlIHRoZSBwcm92aWRlZCBbdHJhbnNsYXRpb25zXSgvZ3VpZGVzL2xvY2FsaXphdGlvbi8pLlxuICAgKi9cbiAgbm9PcHRpb25zVGV4dDogUHJvcFR5cGVzLm5vZGUsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIHdoZW4gdGhlIHZhbHVlIGNoYW5nZXMuXG4gICAqXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBldmVudCBUaGUgZXZlbnQgc291cmNlIG9mIHRoZSBjYWxsYmFjay5cbiAgICogQHBhcmFtIHtUfFRbXX0gdmFsdWUgVGhlIG5ldyB2YWx1ZSBvZiB0aGUgY29tcG9uZW50LlxuICAgKiBAcGFyYW0ge3N0cmluZ30gcmVhc29uIE9uZSBvZiBcImNyZWF0ZS1vcHRpb25cIiwgXCJzZWxlY3Qtb3B0aW9uXCIsIFwicmVtb3ZlLW9wdGlvblwiLCBcImJsdXJcIiBvciBcImNsZWFyXCIuXG4gICAqL1xuICBvbkNoYW5nZTogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIHdoZW4gdGhlIHBvcHVwIHJlcXVlc3RzIHRvIGJlIGNsb3NlZC5cbiAgICogVXNlIGluIGNvbnRyb2xsZWQgbW9kZSAoc2VlIG9wZW4pLlxuICAgKlxuICAgKiBAcGFyYW0ge29iamVjdH0gZXZlbnQgVGhlIGV2ZW50IHNvdXJjZSBvZiB0aGUgY2FsbGJhY2suXG4gICAqIEBwYXJhbSB7c3RyaW5nfSByZWFzb24gQ2FuIGJlOiBgXCJ0b2dnbGVJbnB1dFwiYCwgYFwiZXNjYXBlXCJgLCBgXCJzZWxlY3Qtb3B0aW9uXCJgLCBgXCJibHVyXCJgLlxuICAgKi9cbiAgb25DbG9zZTogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIHdoZW4gdGhlIGhpZ2hsaWdodCBvcHRpb24gY2hhbmdlcy5cbiAgICpcbiAgICogQHBhcmFtIHtvYmplY3R9IGV2ZW50IFRoZSBldmVudCBzb3VyY2Ugb2YgdGhlIGNhbGxiYWNrLlxuICAgKiBAcGFyYW0ge1R9IG9wdGlvbiBUaGUgaGlnaGxpZ2h0ZWQgb3B0aW9uLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gcmVhc29uIENhbiBiZTogYFwia2V5Ym9hcmRcImAsIGBcImF1dG9cImAsIGBcIm1vdXNlXCJgLlxuICAgKi9cbiAgb25IaWdobGlnaHRDaGFuZ2U6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCB3aGVuIHRoZSBpbnB1dCB2YWx1ZSBjaGFuZ2VzLlxuICAgKlxuICAgKiBAcGFyYW0ge29iamVjdH0gZXZlbnQgVGhlIGV2ZW50IHNvdXJjZSBvZiB0aGUgY2FsbGJhY2suXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB2YWx1ZSBUaGUgbmV3IHZhbHVlIG9mIHRoZSB0ZXh0IGlucHV0LlxuICAgKiBAcGFyYW0ge3N0cmluZ30gcmVhc29uIENhbiBiZTogYFwiaW5wdXRcImAgKHVzZXIgaW5wdXQpLCBgXCJyZXNldFwiYCAocHJvZ3JhbW1hdGljIGNoYW5nZSksIGBcImNsZWFyXCJgLlxuICAgKi9cbiAgb25JbnB1dENoYW5nZTogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIHdoZW4gdGhlIHBvcHVwIHJlcXVlc3RzIHRvIGJlIG9wZW5lZC5cbiAgICogVXNlIGluIGNvbnRyb2xsZWQgbW9kZSAoc2VlIG9wZW4pLlxuICAgKlxuICAgKiBAcGFyYW0ge29iamVjdH0gZXZlbnQgVGhlIGV2ZW50IHNvdXJjZSBvZiB0aGUgY2FsbGJhY2suXG4gICAqL1xuICBvbk9wZW46IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBDb250cm9sIHRoZSBwb3B1cGAgb3BlbiBzdGF0ZS5cbiAgICovXG4gIG9wZW46IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBwb3B1cCB3aWxsIG9wZW4gb24gaW5wdXQgZm9jdXMuXG4gICAqL1xuICBvcGVuT25Gb2N1czogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIE92ZXJyaWRlIHRoZSBkZWZhdWx0IHRleHQgZm9yIHRoZSAqb3BlbiBwb3B1cCogaWNvbiBidXR0b24uXG4gICAqXG4gICAqIEZvciBsb2NhbGl6YXRpb24gcHVycG9zZXMsIHlvdSBjYW4gdXNlIHRoZSBwcm92aWRlZCBbdHJhbnNsYXRpb25zXSgvZ3VpZGVzL2xvY2FsaXphdGlvbi8pLlxuICAgKi9cbiAgb3BlblRleHQ6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIEFycmF5IG9mIG9wdGlvbnMuXG4gICAqL1xuICBvcHRpb25zOiBQcm9wVHlwZXMuYXJyYXkuaXNSZXF1aXJlZCxcblxuICAvKipcbiAgICogVGhlIGNvbXBvbmVudCB1c2VkIHRvIHJlbmRlciB0aGUgYm9keSBvZiB0aGUgcG9wdXAuXG4gICAqL1xuICBQYXBlckNvbXBvbmVudDogUHJvcFR5cGVzLmVsZW1lbnRUeXBlLFxuXG4gIC8qKlxuICAgKiBUaGUgY29tcG9uZW50IHVzZWQgdG8gcG9zaXRpb24gdGhlIHBvcHVwLlxuICAgKi9cbiAgUG9wcGVyQ29tcG9uZW50OiBQcm9wVHlwZXMuZWxlbWVudFR5cGUsXG5cbiAgLyoqXG4gICAqIFRoZSBpY29uIHRvIGRpc3BsYXkgaW4gcGxhY2Ugb2YgdGhlIGRlZmF1bHQgcG9wdXAgaWNvbi5cbiAgICovXG4gIHBvcHVwSWNvbjogUHJvcFR5cGVzLm5vZGUsXG5cbiAgLyoqXG4gICAqIFJlbmRlciB0aGUgZ3JvdXAuXG4gICAqXG4gICAqIEBwYXJhbSB7YW55fSBvcHRpb24gVGhlIGdyb3VwIHRvIHJlbmRlci5cbiAgICogQHJldHVybnMge1JlYWN0Tm9kZX1cbiAgICovXG4gIHJlbmRlckdyb3VwOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogUmVuZGVyIHRoZSBpbnB1dC5cbiAgICpcbiAgICogQHBhcmFtIHtvYmplY3R9IHBhcmFtc1xuICAgKiBAcmV0dXJucyB7UmVhY3ROb2RlfVxuICAgKi9cbiAgcmVuZGVySW5wdXQ6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG5cbiAgLyoqXG4gICAqIFJlbmRlciB0aGUgb3B0aW9uLCB1c2UgYGdldE9wdGlvbkxhYmVsYCBieSBkZWZhdWx0LlxuICAgKlxuICAgKiBAcGFyYW0ge1R9IG9wdGlvbiBUaGUgb3B0aW9uIHRvIHJlbmRlci5cbiAgICogQHBhcmFtIHtvYmplY3R9IHN0YXRlIFRoZSBzdGF0ZSBvZiB0aGUgY29tcG9uZW50LlxuICAgKiBAcmV0dXJucyB7UmVhY3ROb2RlfVxuICAgKi9cbiAgcmVuZGVyT3B0aW9uOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogUmVuZGVyIHRoZSBzZWxlY3RlZCB2YWx1ZS5cbiAgICpcbiAgICogQHBhcmFtIHtUW119IHZhbHVlIFRoZSBgdmFsdWVgIHByb3ZpZGVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAqIEBwYXJhbSB7ZnVuY3Rpb259IGdldFRhZ1Byb3BzIEEgdGFnIHByb3BzIGdldHRlci5cbiAgICogQHJldHVybnMge1JlYWN0Tm9kZX1cbiAgICovXG4gIHJlbmRlclRhZ3M6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBpbnB1dCdzIHRleHQgd2lsbCBiZSBzZWxlY3RlZCBvbiBmb2N1cy5cbiAgICogSXQgaGVscHMgdGhlIHVzZXIgY2xlYXIgdGhlIHNlbGVjdGVkIHZhbHVlLlxuICAgKi9cbiAgc2VsZWN0T25Gb2N1czogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIFRoZSBzaXplIG9mIHRoZSBhdXRvY29tcGxldGUuXG4gICAqL1xuICBzaXplOiBQcm9wVHlwZXMub25lT2YoWydtZWRpdW0nLCAnc21hbGwnXSksXG5cbiAgLyoqXG4gICAqIFRoZSB2YWx1ZSBvZiB0aGUgYXV0b2NvbXBsZXRlLlxuICAgKlxuICAgKiBUaGUgdmFsdWUgbXVzdCBoYXZlIHJlZmVyZW5jZSBlcXVhbGl0eSB3aXRoIHRoZSBvcHRpb24gaW4gb3JkZXIgdG8gYmUgc2VsZWN0ZWQuXG4gICAqIFlvdSBjYW4gY3VzdG9taXplIHRoZSBlcXVhbGl0eSBiZWhhdmlvciB3aXRoIHRoZSBgZ2V0T3B0aW9uU2VsZWN0ZWRgIHByb3AuXG4gICAqL1xuICB2YWx1ZTogUHJvcFR5cGVzLmFueVxufSA6IHZvaWQgMDtcbmV4cG9ydCBkZWZhdWx0IHdpdGhTdHlsZXMoc3R5bGVzLCB7XG4gIG5hbWU6ICdNdWlBdXRvY29tcGxldGUnXG59KShBdXRvY29tcGxldGUpOyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNcIjtcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgY2xzeCBmcm9tICdjbHN4JztcbmltcG9ydCB7IGNoYWluUHJvcFR5cGVzIH0gZnJvbSAnQG1hdGVyaWFsLXVpL3V0aWxzJztcbmltcG9ydCB3aXRoU3R5bGVzIGZyb20gJy4uL3N0eWxlcy93aXRoU3R5bGVzJztcbmltcG9ydCBjYXBpdGFsaXplIGZyb20gJy4uL3V0aWxzL2NhcGl0YWxpemUnO1xudmFyIFNJWkUgPSA0NDtcblxuZnVuY3Rpb24gZ2V0UmVsYXRpdmVWYWx1ZSh2YWx1ZSwgbWluLCBtYXgpIHtcbiAgcmV0dXJuIChNYXRoLm1pbihNYXRoLm1heChtaW4sIHZhbHVlKSwgbWF4KSAtIG1pbikgLyAobWF4IC0gbWluKTtcbn1cblxuZnVuY3Rpb24gZWFzZU91dCh0KSB7XG4gIHQgPSBnZXRSZWxhdGl2ZVZhbHVlKHQsIDAsIDEpOyAvLyBodHRwczovL2dpc3QuZ2l0aHViLmNvbS9ncmUvMTY1MDI5NFxuXG4gIHQgPSAodCAtPSAxKSAqIHQgKiB0ICsgMTtcbiAgcmV0dXJuIHQ7XG59XG5cbmZ1bmN0aW9uIGVhc2VJbih0KSB7XG4gIHJldHVybiB0ICogdDtcbn1cblxuZXhwb3J0IHZhciBzdHlsZXMgPSBmdW5jdGlvbiBzdHlsZXModGhlbWUpIHtcbiAgcmV0dXJuIHtcbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50LiAqL1xuICAgIHJvb3Q6IHtcbiAgICAgIGRpc3BsYXk6ICdpbmxpbmUtYmxvY2snXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYHZhcmlhbnQ9XCJzdGF0aWNcImAuICovXG4gICAgc3RhdGljOiB7XG4gICAgICB0cmFuc2l0aW9uOiB0aGVtZS50cmFuc2l0aW9ucy5jcmVhdGUoJ3RyYW5zZm9ybScpXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYHZhcmlhbnQ9XCJpbmRldGVybWluYXRlXCJgLiAqL1xuICAgIGluZGV0ZXJtaW5hdGU6IHtcbiAgICAgIGFuaW1hdGlvbjogJyRjaXJjdWxhci1yb3RhdGUgMS40cyBsaW5lYXIgaW5maW5pdGUnXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGNvbG9yPVwicHJpbWFyeVwiYC4gKi9cbiAgICBjb2xvclByaW1hcnk6IHtcbiAgICAgIGNvbG9yOiB0aGVtZS5wYWxldHRlLnByaW1hcnkubWFpblxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBjb2xvcj1cInNlY29uZGFyeVwiYC4gKi9cbiAgICBjb2xvclNlY29uZGFyeToge1xuICAgICAgY29sb3I6IHRoZW1lLnBhbGV0dGUuc2Vjb25kYXJ5Lm1haW5cbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIGBzdmdgIGVsZW1lbnQuICovXG4gICAgc3ZnOiB7XG4gICAgICBkaXNwbGF5OiAnYmxvY2snIC8vIEtlZXBzIHRoZSBwcm9ncmVzcyBjZW50ZXJlZFxuXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSBgY2lyY2xlYCBzdmcgcGF0aC4gKi9cbiAgICBjaXJjbGU6IHtcbiAgICAgIHN0cm9rZTogJ2N1cnJlbnRDb2xvcicgLy8gVXNlIGJ1dHQgdG8gZm9sbG93IHRoZSBzcGVjaWZpY2F0aW9uLCBieSBjaGFuY2UsIGl0J3MgYWxyZWFkeSB0aGUgZGVmYXVsdCBDU1MgdmFsdWUuXG4gICAgICAvLyBzdHJva2VMaW5lY2FwOiAnYnV0dCcsXG5cbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIGBjaXJjbGVgIHN2ZyBwYXRoIGlmIGB2YXJpYW50PVwic3RhdGljXCJgLiAqL1xuICAgIGNpcmNsZVN0YXRpYzoge1xuICAgICAgdHJhbnNpdGlvbjogdGhlbWUudHJhbnNpdGlvbnMuY3JlYXRlKCdzdHJva2UtZGFzaG9mZnNldCcpXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSBgY2lyY2xlYCBzdmcgcGF0aCBpZiBgdmFyaWFudD1cImluZGV0ZXJtaW5hdGVcImAuICovXG4gICAgY2lyY2xlSW5kZXRlcm1pbmF0ZToge1xuICAgICAgYW5pbWF0aW9uOiAnJGNpcmN1bGFyLWRhc2ggMS40cyBlYXNlLWluLW91dCBpbmZpbml0ZScsXG4gICAgICAvLyBTb21lIGRlZmF1bHQgdmFsdWUgdGhhdCBsb29rcyBmaW5lIHdhaXRpbmcgZm9yIHRoZSBhbmltYXRpb24gdG8ga2lja3MgaW4uXG4gICAgICBzdHJva2VEYXNoYXJyYXk6ICc4MHB4LCAyMDBweCcsXG4gICAgICBzdHJva2VEYXNob2Zmc2V0OiAnMHB4JyAvLyBBZGQgdGhlIHVuaXQgdG8gZml4IGEgRWRnZSAxNiBhbmQgYmVsb3cgYnVnLlxuXG4gICAgfSxcbiAgICAnQGtleWZyYW1lcyBjaXJjdWxhci1yb3RhdGUnOiB7XG4gICAgICAnMCUnOiB7XG4gICAgICAgIC8vIEZpeCBJRSAxMSB3b2JibHlcbiAgICAgICAgdHJhbnNmb3JtT3JpZ2luOiAnNTAlIDUwJSdcbiAgICAgIH0sXG4gICAgICAnMTAwJSc6IHtcbiAgICAgICAgdHJhbnNmb3JtOiAncm90YXRlKDM2MGRlZyknXG4gICAgICB9XG4gICAgfSxcbiAgICAnQGtleWZyYW1lcyBjaXJjdWxhci1kYXNoJzoge1xuICAgICAgJzAlJzoge1xuICAgICAgICBzdHJva2VEYXNoYXJyYXk6ICcxcHgsIDIwMHB4JyxcbiAgICAgICAgc3Ryb2tlRGFzaG9mZnNldDogJzBweCdcbiAgICAgIH0sXG4gICAgICAnNTAlJzoge1xuICAgICAgICBzdHJva2VEYXNoYXJyYXk6ICcxMDBweCwgMjAwcHgnLFxuICAgICAgICBzdHJva2VEYXNob2Zmc2V0OiAnLTE1cHgnXG4gICAgICB9LFxuICAgICAgJzEwMCUnOiB7XG4gICAgICAgIHN0cm9rZURhc2hhcnJheTogJzEwMHB4LCAyMDBweCcsXG4gICAgICAgIHN0cm9rZURhc2hvZmZzZXQ6ICctMTI1cHgnXG4gICAgICB9XG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSBgY2lyY2xlYCBzdmcgcGF0aCBpZiBgZGlzYWJsZVNocmluaz17dHJ1ZX1gLiAqL1xuICAgIGNpcmNsZURpc2FibGVTaHJpbms6IHtcbiAgICAgIGFuaW1hdGlvbjogJ25vbmUnXG4gICAgfVxuICB9O1xufTtcbi8qKlxuICogIyMgQVJJQVxuICpcbiAqIElmIHRoZSBwcm9ncmVzcyBiYXIgaXMgZGVzY3JpYmluZyB0aGUgbG9hZGluZyBwcm9ncmVzcyBvZiBhIHBhcnRpY3VsYXIgcmVnaW9uIG9mIGEgcGFnZSxcbiAqIHlvdSBzaG91bGQgdXNlIGBhcmlhLWRlc2NyaWJlZGJ5YCB0byBwb2ludCB0byB0aGUgcHJvZ3Jlc3MgYmFyLCBhbmQgc2V0IHRoZSBgYXJpYS1idXN5YFxuICogYXR0cmlidXRlIHRvIGB0cnVlYCBvbiB0aGF0IHJlZ2lvbiB1bnRpbCBpdCBoYXMgZmluaXNoZWQgbG9hZGluZy5cbiAqL1xuXG52YXIgQ2lyY3VsYXJQcm9ncmVzcyA9IC8qI19fUFVSRV9fKi9SZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIENpcmN1bGFyUHJvZ3Jlc3MocHJvcHMsIHJlZikge1xuICB2YXIgY2xhc3NlcyA9IHByb3BzLmNsYXNzZXMsXG4gICAgICBjbGFzc05hbWUgPSBwcm9wcy5jbGFzc05hbWUsXG4gICAgICBfcHJvcHMkY29sb3IgPSBwcm9wcy5jb2xvcixcbiAgICAgIGNvbG9yID0gX3Byb3BzJGNvbG9yID09PSB2b2lkIDAgPyAncHJpbWFyeScgOiBfcHJvcHMkY29sb3IsXG4gICAgICBfcHJvcHMkZGlzYWJsZVNocmluayA9IHByb3BzLmRpc2FibGVTaHJpbmssXG4gICAgICBkaXNhYmxlU2hyaW5rID0gX3Byb3BzJGRpc2FibGVTaHJpbmsgPT09IHZvaWQgMCA/IGZhbHNlIDogX3Byb3BzJGRpc2FibGVTaHJpbmssXG4gICAgICBfcHJvcHMkc2l6ZSA9IHByb3BzLnNpemUsXG4gICAgICBzaXplID0gX3Byb3BzJHNpemUgPT09IHZvaWQgMCA/IDQwIDogX3Byb3BzJHNpemUsXG4gICAgICBzdHlsZSA9IHByb3BzLnN0eWxlLFxuICAgICAgX3Byb3BzJHRoaWNrbmVzcyA9IHByb3BzLnRoaWNrbmVzcyxcbiAgICAgIHRoaWNrbmVzcyA9IF9wcm9wcyR0aGlja25lc3MgPT09IHZvaWQgMCA/IDMuNiA6IF9wcm9wcyR0aGlja25lc3MsXG4gICAgICBfcHJvcHMkdmFsdWUgPSBwcm9wcy52YWx1ZSxcbiAgICAgIHZhbHVlID0gX3Byb3BzJHZhbHVlID09PSB2b2lkIDAgPyAwIDogX3Byb3BzJHZhbHVlLFxuICAgICAgX3Byb3BzJHZhcmlhbnQgPSBwcm9wcy52YXJpYW50LFxuICAgICAgdmFyaWFudCA9IF9wcm9wcyR2YXJpYW50ID09PSB2b2lkIDAgPyAnaW5kZXRlcm1pbmF0ZScgOiBfcHJvcHMkdmFyaWFudCxcbiAgICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKHByb3BzLCBbXCJjbGFzc2VzXCIsIFwiY2xhc3NOYW1lXCIsIFwiY29sb3JcIiwgXCJkaXNhYmxlU2hyaW5rXCIsIFwic2l6ZVwiLCBcInN0eWxlXCIsIFwidGhpY2tuZXNzXCIsIFwidmFsdWVcIiwgXCJ2YXJpYW50XCJdKTtcblxuICB2YXIgY2lyY2xlU3R5bGUgPSB7fTtcbiAgdmFyIHJvb3RTdHlsZSA9IHt9O1xuICB2YXIgcm9vdFByb3BzID0ge307XG5cbiAgaWYgKHZhcmlhbnQgPT09ICdkZXRlcm1pbmF0ZScgfHwgdmFyaWFudCA9PT0gJ3N0YXRpYycpIHtcbiAgICB2YXIgY2lyY3VtZmVyZW5jZSA9IDIgKiBNYXRoLlBJICogKChTSVpFIC0gdGhpY2tuZXNzKSAvIDIpO1xuICAgIGNpcmNsZVN0eWxlLnN0cm9rZURhc2hhcnJheSA9IGNpcmN1bWZlcmVuY2UudG9GaXhlZCgzKTtcbiAgICByb290UHJvcHNbJ2FyaWEtdmFsdWVub3cnXSA9IE1hdGgucm91bmQodmFsdWUpO1xuXG4gICAgaWYgKHZhcmlhbnQgPT09ICdzdGF0aWMnKSB7XG4gICAgICBjaXJjbGVTdHlsZS5zdHJva2VEYXNob2Zmc2V0ID0gXCJcIi5jb25jYXQoKCgxMDAgLSB2YWx1ZSkgLyAxMDAgKiBjaXJjdW1mZXJlbmNlKS50b0ZpeGVkKDMpLCBcInB4XCIpO1xuICAgICAgcm9vdFN0eWxlLnRyYW5zZm9ybSA9ICdyb3RhdGUoLTkwZGVnKSc7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNpcmNsZVN0eWxlLnN0cm9rZURhc2hvZmZzZXQgPSBcIlwiLmNvbmNhdCgoZWFzZUluKCgxMDAgLSB2YWx1ZSkgLyAxMDApICogY2lyY3VtZmVyZW5jZSkudG9GaXhlZCgzKSwgXCJweFwiKTtcbiAgICAgIHJvb3RTdHlsZS50cmFuc2Zvcm0gPSBcInJvdGF0ZShcIi5jb25jYXQoKGVhc2VPdXQodmFsdWUgLyA3MCkgKiAyNzApLnRvRml4ZWQoMyksIFwiZGVnKVwiKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgX2V4dGVuZHMoe1xuICAgIGNsYXNzTmFtZTogY2xzeChjbGFzc2VzLnJvb3QsIGNsYXNzTmFtZSwgY29sb3IgIT09ICdpbmhlcml0JyAmJiBjbGFzc2VzW1wiY29sb3JcIi5jb25jYXQoY2FwaXRhbGl6ZShjb2xvcikpXSwge1xuICAgICAgJ2luZGV0ZXJtaW5hdGUnOiBjbGFzc2VzLmluZGV0ZXJtaW5hdGUsXG4gICAgICAnc3RhdGljJzogY2xhc3Nlcy5zdGF0aWNcbiAgICB9W3ZhcmlhbnRdKSxcbiAgICBzdHlsZTogX2V4dGVuZHMoe1xuICAgICAgd2lkdGg6IHNpemUsXG4gICAgICBoZWlnaHQ6IHNpemVcbiAgICB9LCByb290U3R5bGUsIHN0eWxlKSxcbiAgICByZWY6IHJlZixcbiAgICByb2xlOiBcInByb2dyZXNzYmFyXCJcbiAgfSwgcm9vdFByb3BzLCBvdGhlciksIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwic3ZnXCIsIHtcbiAgICBjbGFzc05hbWU6IGNsYXNzZXMuc3ZnLFxuICAgIHZpZXdCb3g6IFwiXCIuY29uY2F0KFNJWkUgLyAyLCBcIiBcIikuY29uY2F0KFNJWkUgLyAyLCBcIiBcIikuY29uY2F0KFNJWkUsIFwiIFwiKS5jb25jYXQoU0laRSlcbiAgfSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJjaXJjbGVcIiwge1xuICAgIGNsYXNzTmFtZTogY2xzeChjbGFzc2VzLmNpcmNsZSwgZGlzYWJsZVNocmluayAmJiBjbGFzc2VzLmNpcmNsZURpc2FibGVTaHJpbmssIHtcbiAgICAgICdpbmRldGVybWluYXRlJzogY2xhc3Nlcy5jaXJjbGVJbmRldGVybWluYXRlLFxuICAgICAgJ3N0YXRpYyc6IGNsYXNzZXMuY2lyY2xlU3RhdGljXG4gICAgfVt2YXJpYW50XSksXG4gICAgc3R5bGU6IGNpcmNsZVN0eWxlLFxuICAgIGN4OiBTSVpFLFxuICAgIGN5OiBTSVpFLFxuICAgIHI6IChTSVpFIC0gdGhpY2tuZXNzKSAvIDIsXG4gICAgZmlsbDogXCJub25lXCIsXG4gICAgc3Ryb2tlV2lkdGg6IHRoaWNrbmVzc1xuICB9KSkpO1xufSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBDaXJjdWxhclByb2dyZXNzLnByb3BUeXBlcyA9IHtcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gV2FybmluZyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAvLyB8IFRoZXNlIFByb3BUeXBlcyBhcmUgZ2VuZXJhdGVkIGZyb20gdGhlIFR5cGVTY3JpcHQgdHlwZSBkZWZpbml0aW9ucyB8XG4gIC8vIHwgICAgIFRvIHVwZGF0ZSB0aGVtIGVkaXQgdGhlIGQudHMgZmlsZSBhbmQgcnVuIFwieWFybiBwcm9wdHlwZXNcIiAgICAgfFxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbiAgLyoqXG4gICAqIE92ZXJyaWRlIG9yIGV4dGVuZCB0aGUgc3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICogU2VlIFtDU1MgQVBJXSgjY3NzKSBiZWxvdyBmb3IgbW9yZSBkZXRhaWxzLlxuICAgKi9cbiAgY2xhc3NlczogUHJvcFR5cGVzLm9iamVjdCxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBUaGUgY29sb3Igb2YgdGhlIGNvbXBvbmVudC4gSXQgc3VwcG9ydHMgdGhvc2UgdGhlbWUgY29sb3JzIHRoYXQgbWFrZSBzZW5zZSBmb3IgdGhpcyBjb21wb25lbnQuXG4gICAqL1xuICBjb2xvcjogUHJvcFR5cGVzLm9uZU9mKFsnaW5oZXJpdCcsICdwcmltYXJ5JywgJ3NlY29uZGFyeSddKSxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgc2hyaW5rIGFuaW1hdGlvbiBpcyBkaXNhYmxlZC5cbiAgICogVGhpcyBvbmx5IHdvcmtzIGlmIHZhcmlhbnQgaXMgYGluZGV0ZXJtaW5hdGVgLlxuICAgKi9cbiAgZGlzYWJsZVNocmluazogY2hhaW5Qcm9wVHlwZXMoUHJvcFR5cGVzLmJvb2wsIGZ1bmN0aW9uIChwcm9wcykge1xuICAgIGlmIChwcm9wcy5kaXNhYmxlU2hyaW5rICYmIHByb3BzLnZhcmlhbnQgJiYgcHJvcHMudmFyaWFudCAhPT0gJ2luZGV0ZXJtaW5hdGUnKSB7XG4gICAgICByZXR1cm4gbmV3IEVycm9yKCdNYXRlcmlhbC1VSTogWW91IGhhdmUgcHJvdmlkZWQgdGhlIGBkaXNhYmxlU2hyaW5rYCBwcm9wICcgKyAnd2l0aCBhIHZhcmlhbnQgb3RoZXIgdGhhbiBgaW5kZXRlcm1pbmF0ZWAuIFRoaXMgd2lsbCBoYXZlIG5vIGVmZmVjdC4nKTtcbiAgICB9XG5cbiAgICByZXR1cm4gbnVsbDtcbiAgfSksXG5cbiAgLyoqXG4gICAqIFRoZSBzaXplIG9mIHRoZSBjaXJjbGUuXG4gICAqIElmIHVzaW5nIGEgbnVtYmVyLCB0aGUgcGl4ZWwgdW5pdCBpcyBhc3N1bWVkLlxuICAgKiBJZiB1c2luZyBhIHN0cmluZywgeW91IG5lZWQgdG8gcHJvdmlkZSB0aGUgQ1NTIHVuaXQsIGUuZyAnM3JlbScuXG4gICAqL1xuICBzaXplOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMubnVtYmVyLCBQcm9wVHlwZXMuc3RyaW5nXSksXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIHN0eWxlOiBQcm9wVHlwZXMub2JqZWN0LFxuXG4gIC8qKlxuICAgKiBUaGUgdGhpY2tuZXNzIG9mIHRoZSBjaXJjbGUuXG4gICAqL1xuICB0aGlja25lc3M6IFByb3BUeXBlcy5udW1iZXIsXG5cbiAgLyoqXG4gICAqIFRoZSB2YWx1ZSBvZiB0aGUgcHJvZ3Jlc3MgaW5kaWNhdG9yIGZvciB0aGUgZGV0ZXJtaW5hdGUgYW5kIHN0YXRpYyB2YXJpYW50cy5cbiAgICogVmFsdWUgYmV0d2VlbiAwIGFuZCAxMDAuXG4gICAqL1xuICB2YWx1ZTogUHJvcFR5cGVzLm51bWJlcixcblxuICAvKipcbiAgICogVGhlIHZhcmlhbnQgdG8gdXNlLlxuICAgKiBVc2UgaW5kZXRlcm1pbmF0ZSB3aGVuIHRoZXJlIGlzIG5vIHByb2dyZXNzIHZhbHVlLlxuICAgKi9cbiAgdmFyaWFudDogUHJvcFR5cGVzLm9uZU9mKFsnZGV0ZXJtaW5hdGUnLCAnaW5kZXRlcm1pbmF0ZScsICdzdGF0aWMnXSlcbn0gOiB2b2lkIDA7XG5leHBvcnQgZGVmYXVsdCB3aXRoU3R5bGVzKHN0eWxlcywge1xuICBuYW1lOiAnTXVpQ2lyY3VsYXJQcm9ncmVzcycsXG4gIGZsaXA6IGZhbHNlXG59KShDaXJjdWxhclByb2dyZXNzKTsiLCJpbXBvcnQgeyBBdmF0YXJHZW5lcmF0b3IgfSBmcm9tICdyYW5kb20tYXZhdGFyLWdlbmVyYXRvcidcclxuY29uc3QgZ2VuZXJhdG9yID0gbmV3IEF2YXRhckdlbmVyYXRvcigpXHJcblxyXG5leHBvcnQgY29uc3QgcHJvZmlsZSA9IHtcclxuICAgIGZpcnN0TmFtZTogJ9CY0LLQsNC9JyxcclxuICAgIGxhc3ROYW1lOiAn0JjQstCw0L3QvtCyJyxcclxuICAgIGF2YXRhcjogZ2VuZXJhdG9yLmdlbmVyYXRlUmFuZG9tQXZhdGFyKCksXHJcbiAgICBlbWFpbDogJ2l2YW5vdi5pQHByb3Rvbm1haWwuY29tJyxcclxuICAgIGFnZTogJzMxJyxcclxuICAgIGF2YWlsaWJsZUxlc3NvbnM6IFtdLFxyXG4gICAgbXlMZXNzb25zOiBbJ3RpcUQwUiddLFxyXG59XHJcbiIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCdcclxuaW1wb3J0IHsgR3JpZCB9IGZyb20gJ0BtYXRlcmlhbC11aS9jb3JlJ1xyXG5pbXBvcnQgeyBtYWtlU3R5bGVzLCBmYWRlIH0gZnJvbSAnQG1hdGVyaWFsLXVpL2NvcmUvc3R5bGVzJ1xyXG5pbXBvcnQge1xyXG4gICAgVHlwb2dyYXBoeSxcclxuICAgIENoZWNrYm94LFxyXG4gICAgRGl2aWRlcixcclxuICAgIEZhYixcclxuICAgIElucHV0QWRvcm5tZW50LFxyXG4gICAgRm9ybUNvbnRyb2xMYWJlbCxcclxuICAgIFRleHRGaWVsZCxcclxuICAgIElucHV0LFxyXG4gICAgQ29udGFpbmVyLFxyXG59IGZyb20gJ0BtYXRlcmlhbC11aS9jb3JlJ1xyXG5pbXBvcnQgTGVzc29uSXRlbUJpZyBmcm9tICdjb21wb25lbnRzL0xlc3Nvbkl0ZW0vTGVzc29uSXRlbUJpZydcclxuaW1wb3J0IEFkZEljb24gZnJvbSAnQG1hdGVyaWFsLXVpL2ljb25zL0FkZCdcclxuaW1wb3J0IHsgZ3JlZW4gfSBmcm9tICdAbWF0ZXJpYWwtdWkvY29yZS9jb2xvcnMnXHJcbmltcG9ydCBBdXRvY29tcGxldGUgZnJvbSAnQG1hdGVyaWFsLXVpL2xhYi9BdXRvY29tcGxldGUnXHJcbmltcG9ydCBDaXJjdWxhclByb2dyZXNzIGZyb20gJ0BtYXRlcmlhbC11aS9jb3JlL0NpcmN1bGFyUHJvZ3Jlc3MnXHJcbmltcG9ydCB7IGNyZWF0ZUZpbHRlck9wdGlvbnMgfSBmcm9tICdAbWF0ZXJpYWwtdWkvbGFiL0F1dG9jb21wbGV0ZSdcclxuaW1wb3J0IHsgcHJvZmlsZSB9IGZyb20gJy4uLy4uL2hlbHBlcnMvcHJvZmlsZURhdGEnXHJcblxyXG5jb25zdCB1c2VTdHlsZXMgPSBtYWtlU3R5bGVzKCh0aGVtZSkgPT4gKHtcclxuICAgIHJvb3Q6IHtcclxuICAgICAgICBmbGV4R3JvdzogMSxcclxuICAgICAgICBwYWRkaW5nQm90dG9tOiAnMnJlbScsXHJcbiAgICAgICAgaGVpZ2h0OiAnMTAwJScsXHJcbiAgICB9LFxyXG4gICAgcGFwZXI6IHtcclxuICAgICAgICBoZWlnaHQ6IDE0MCxcclxuICAgICAgICB3aWR0aDogMTAwLFxyXG4gICAgfSxcclxuICAgIGNvbnRyb2w6IHtcclxuICAgICAgICBwYWRkaW5nOiB0aGVtZS5zcGFjaW5nKDIpLFxyXG4gICAgfSxcclxuXHJcbiAgICBmaWx0ZXI6IHtcclxuICAgICAgICBkaXNwbGF5OiAnZmxleCcsXHJcbiAgICAgICAganVzdGlmeUNvbnRlbnQ6ICdzcGFjZS1iZXR3ZWVuJyxcclxuICAgICAgICBhbGlnbkl0ZW1zOiAnY2VudGVyJyxcclxuICAgIH0sXHJcblxyXG4gICAgc3BhY2luZzoge1xyXG4gICAgICAgIG1hcmdpbjogdGhlbWUuc3BhY2luZygwLCAwLCAyLCAwKSxcclxuICAgIH0sXHJcbiAgICBmYWI6IHtcclxuICAgICAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcclxuICAgICAgICBib3R0b206IHRoZW1lLnNwYWNpbmcoMiksXHJcbiAgICAgICAgcmlnaHQ6IHRoZW1lLnNwYWNpbmcoMiksXHJcbiAgICAgICAgY29sb3I6IHRoZW1lLnBhbGV0dGUuY29tbW9uLndoaXRlLFxyXG4gICAgICAgIGJhY2tncm91bmRDb2xvcjogZ3JlZW5bNTAwXSxcclxuICAgICAgICAnJjpob3Zlcic6IHtcclxuICAgICAgICAgICAgYmFja2dyb3VuZENvbG9yOiBncmVlbls2MDBdLFxyXG4gICAgICAgIH0sXHJcbiAgICB9LFxyXG59KSlcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIExlc3Nvbkxpc3QocHJvcHMpIHtcclxuICAgIGNvbnN0IGNsYXNzZXMgPSB1c2VTdHlsZXMoKVxyXG4gICAgY29uc3QgeyBsZXNzb25zTGlzdCB9ID0gcHJvcHNcclxuICAgIGxldCBsZXNzb25zSXRlbXMgPSBbXVxyXG4gICAgY29uc3QgY2F0ZWdvcnlMaXN0ID0gWyfQn9C10YDQstCw0Y8nLCAn0JLRgtC+0YDQsNGPJywgJ9Ci0YDQtdGC0YzRjycsICfQp9C10YLQstC10YDRgtCw0Y8nLCAn0J/RgNC+0YfQtdC1J11cclxuICAgIGNvbnN0IFtvcGVuLCBzZXRPcGVuXSA9IFJlYWN0LnVzZVN0YXRlKGZhbHNlKVxyXG4gICAgY29uc3QgW3ZhbHVlLCBzZXRWYWx1ZV0gPSBSZWFjdC51c2VTdGF0ZShudWxsKVxyXG4gICAgY29uc3QgW3NlYXJjaFZhbHVlLCBzZXRTZWFyY2hWYWx1ZV0gPSBSZWFjdC51c2VTdGF0ZShudWxsKVxyXG4gICAgY29uc3QgW2lucHV0VmFsdWUsIHNldElucHV0VmFsdWVdID0gUmVhY3QudXNlU3RhdGUoJycpXHJcbiAgICBjb25zdCBbc2VhcmNoSW5wdXRWYWx1ZSwgc2V0U2VhcmNoSW5wdXRWYWx1ZV0gPSBSZWFjdC51c2VTdGF0ZSgnJylcclxuICAgIGNvbnN0IFtjaGVja2VkLCBzZXRDaGVja2VkXSA9IFJlYWN0LnVzZVN0YXRlKGZhbHNlKVxyXG4gICAgY29uc3QgbG9hZGluZyA9IG9wZW4gJiYgbGVzc29uc0l0ZW1zLmxlbmd0aCA9PT0gMFxyXG5cclxuICAgIGNvbnN0IGZpbHRlck9wdGlvbnMgPSBjcmVhdGVGaWx0ZXJPcHRpb25zKHtcclxuICAgICAgICBtYXRjaEZyb206ICdhbnknLFxyXG4gICAgICAgIGlnbm9yZUNhc2U6IHRydWUsXHJcbiAgICAgICAgbGltaXQ6IDIsXHJcbiAgICAgICAgc3RyaW5naWZ5OiAob3B0aW9uKSA9PiBvcHRpb24udGl0bGUsXHJcbiAgICB9KVxyXG5cclxuICAgIGNvbnN0IGhhbmRsZUNCQ2hhbmdlID0gKGV2ZW50KSA9PiB7XHJcbiAgICAgICAgc2V0Q2hlY2tlZChldmVudC50YXJnZXQuY2hlY2tlZClcclxuICAgIH1cclxuXHJcbiAgICBmb3IgKGxldCBba2V5LCB2YWx1ZV0gb2YgT2JqZWN0LmVudHJpZXMobGVzc29uc0xpc3QpKSB7XHJcbiAgICAgICAgbGVzc29uc0l0ZW1zLnB1c2godmFsdWUpXHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIChcclxuICAgICAgICA8PlxyXG4gICAgICAgICAgICA8VHlwb2dyYXBoeSBjbGFzc05hbWU9e2NsYXNzZXMuc3BhY2luZ30gY29tcG9uZW50PVwiaDJcIiB2YXJpYW50PVwiaDRcIj5cclxuICAgICAgICAgICAgICAgINCh0L/QuNGB0L7QuiDQo9GA0L7QutC+0LJcclxuICAgICAgICAgICAgPC9UeXBvZ3JhcGh5PlxyXG4gICAgICAgICAgICA8RGl2aWRlciBjbGFzc05hbWU9e2NsYXNzZXMuc3BhY2luZ30gLz5cclxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9e2NsYXNzZXMuZmlsdGVyfT5cclxuICAgICAgICAgICAgICAgIDxBdXRvY29tcGxldGVcclxuICAgICAgICAgICAgICAgICAgICB2YWx1ZT17dmFsdWV9XHJcbiAgICAgICAgICAgICAgICAgICAgb25DaGFuZ2U9eyhldmVudCwgbmV3VmFsdWUpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2V0VmFsdWUobmV3VmFsdWUpXHJcbiAgICAgICAgICAgICAgICAgICAgfX1cclxuICAgICAgICAgICAgICAgICAgICBpbnB1dFZhbHVlPXtpbnB1dFZhbHVlfVxyXG4gICAgICAgICAgICAgICAgICAgIG9uSW5wdXRDaGFuZ2U9eyhldmVudCwgbmV3SW5wdXRWYWx1ZSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzZXRJbnB1dFZhbHVlKG5ld0lucHV0VmFsdWUpXHJcbiAgICAgICAgICAgICAgICAgICAgfX1cclxuICAgICAgICAgICAgICAgICAgICBpZD1cImNhdGVyb3J5LXNlYXJjaFwiXHJcbiAgICAgICAgICAgICAgICAgICAgc2l6ZT1cInNtYWxsXCJcclxuICAgICAgICAgICAgICAgICAgICBvcHRpb25zPXtjYXRlZ29yeUxpc3R9XHJcbiAgICAgICAgICAgICAgICAgICAgc3R5bGU9e3sgd2lkdGg6IDMwMCwgbWFyZ2luQm90dG9tOiAnMXJlbScgfX1cclxuICAgICAgICAgICAgICAgICAgICByZW5kZXJJbnB1dD17KHBhcmFtcykgPT4gKFxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8VGV4dEZpZWxkXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7Li4ucGFyYW1zfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGFiZWw9XCLQmtCw0YLQtdCz0L7RgNC40LhcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyaWFudD1cIm91dGxpbmVkXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgLz5cclxuICAgICAgICAgICAgICAgICAgICApfVxyXG4gICAgICAgICAgICAgICAgLz5cclxuICAgICAgICAgICAgICAgIDxGb3JtQ29udHJvbExhYmVsXHJcbiAgICAgICAgICAgICAgICAgICAgdmFsdWU9XCJlbmRcIlxyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRyb2w9e1xyXG4gICAgICAgICAgICAgICAgICAgICAgICA8Q2hlY2tib3hcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoZWNrZWQ9e2NoZWNrZWR9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2xvcj1cInByaW1hcnlcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb25DaGFuZ2U9e2hhbmRsZUNCQ2hhbmdlfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5wdXRQcm9wcz17eyAnYXJpYS1sYWJlbCc6ICdwcmltYXJ5IGNoZWNrYm94JyB9fVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvPlxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBsYWJlbD1cItCc0L7QuCDRg9GA0L7QutC4XCJcclxuICAgICAgICAgICAgICAgICAgICBsYWJlbFBsYWNlbWVudD1cImVuZFwiXHJcbiAgICAgICAgICAgICAgICAvPlxyXG5cclxuICAgICAgICAgICAgICAgIDxBdXRvY29tcGxldGVcclxuICAgICAgICAgICAgICAgICAgICBmcmVlU29sb1xyXG4gICAgICAgICAgICAgICAgICAgIGxvYWRpbmdcclxuICAgICAgICAgICAgICAgICAgICBpZD1cInNlYXJjaFwiXHJcbiAgICAgICAgICAgICAgICAgICAgdmFsdWU9e3NlYXJjaFZhbHVlfVxyXG4gICAgICAgICAgICAgICAgICAgIG9uT3Blbj17KCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzZXRPcGVuKHRydWUpXHJcbiAgICAgICAgICAgICAgICAgICAgfX1cclxuICAgICAgICAgICAgICAgICAgICBvbkJsdXI9eygpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2V0T3BlbihmYWxzZSlcclxuICAgICAgICAgICAgICAgICAgICB9fVxyXG4gICAgICAgICAgICAgICAgICAgIG9uQ2hhbmdlPXsoZXZlbnQsIG5ld1ZhbHVlKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNldFNlYXJjaFZhbHVlKG5ld1ZhbHVlKVxyXG4gICAgICAgICAgICAgICAgICAgIH19XHJcbiAgICAgICAgICAgICAgICAgICAgaW5wdXRWYWx1ZT17c2VhcmNoSW5wdXRWYWx1ZX1cclxuICAgICAgICAgICAgICAgICAgICBvbklucHV0Q2hhbmdlPXsoZXZlbnQsIG5ld0lucHV0VmFsdWUpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2V0U2VhcmNoSW5wdXRWYWx1ZShuZXdJbnB1dFZhbHVlKVxyXG4gICAgICAgICAgICAgICAgICAgIH19XHJcbiAgICAgICAgICAgICAgICAgICAgb3B0aW9ucz17bGVzc29uc0l0ZW1zfVxyXG4gICAgICAgICAgICAgICAgICAgIGdldE9wdGlvbkxhYmVsPXsob3B0aW9uKSA9PiBvcHRpb24udGl0bGV9XHJcbiAgICAgICAgICAgICAgICAgICAgc3R5bGU9e3sgd2lkdGg6IDMwMCwgbWFyZ2luQm90dG9tOiAnMXJlbScgfX1cclxuICAgICAgICAgICAgICAgICAgICBzaXplPVwic21hbGxcIlxyXG4gICAgICAgICAgICAgICAgICAgIGZpbHRlck9wdGlvbnM9e2ZpbHRlck9wdGlvbnN9XHJcbiAgICAgICAgICAgICAgICAgICAgcmVuZGVySW5wdXQ9eyhwYXJhbXMpID0+IChcclxuICAgICAgICAgICAgICAgICAgICAgICAgPFRleHRGaWVsZFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgey4uLnBhcmFtc31cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhYmVsPVwi0J/QvtC40YHQulwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXJpYW50PVwib3V0bGluZWRcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgSW5wdXRQcm9wcz17e1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC4uLnBhcmFtcy5JbnB1dFByb3BzLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVuZEFkb3JubWVudDogKFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge2xvYWRpbmcgPyAoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPENpcmN1bGFyUHJvZ3Jlc3NcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sb3I9XCJpbmhlcml0XCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2l6ZT17MjB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICkgOiBudWxsfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge3BhcmFtcy5JbnB1dFByb3BzLmVuZEFkb3JubWVudH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC8+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH19XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8+XHJcbiAgICAgICAgICAgICAgICAgICAgKX1cclxuICAgICAgICAgICAgICAgIC8+XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICA8RGl2aWRlciBjbGFzc05hbWU9e2NsYXNzZXMuc3BhY2luZ30gLz5cclxuXHJcbiAgICAgICAgICAgIDxHcmlkIGNvbnRhaW5lciBjbGFzc05hbWU9e2NsYXNzZXMucm9vdH0gc3BhY2luZz17Mn0+XHJcbiAgICAgICAgICAgICAgICB7bGVzc29uc0l0ZW1zLm1hcCgoaXRlbSwgaWR4KSA9PlxyXG4gICAgICAgICAgICAgICAgICAgIHNlYXJjaFZhbHVlID09PSBudWxsIHx8IGl0ZW0gPT09IHNlYXJjaFZhbHVlID8gKFxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8R3JpZCBpdGVtIHhzPXsxMn0ga2V5PXtpZHh9PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPExlc3Nvbkl0ZW1CaWdcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBrZXk9e2lkeH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7Li4uaXRlbX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWRpcmVjdD17cHJvcHMucmVkaXJlY3R9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGVzc29uSWQ9e2l0ZW0uaWR9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaGFuZGxlQ2FydEFkZD17cHJvcHMuaGFuZGxlQ2FydEFkZH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBoYW5kbGVEZWxldGVJdGVtPXtwcm9wcy5oYW5kbGVEZWxldGVJdGVtfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhhbmRsZVNlbGVjdExlc3Nvbj17cHJvcHMuaGFuZGxlU2VsZWN0TGVzc29ufVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC9HcmlkPlxyXG4gICAgICAgICAgICAgICAgICAgICkgOiBudWxsLFxyXG4gICAgICAgICAgICAgICAgKX1cclxuICAgICAgICAgICAgPC9HcmlkPlxyXG5cclxuICAgICAgICAgICAgPEZhYiBjbGFzc05hbWU9e2NsYXNzZXMuZmFifT5cclxuICAgICAgICAgICAgICAgIDxBZGRJY29uIC8+XHJcbiAgICAgICAgICAgIDwvRmFiPlxyXG4gICAgICAgIDwvPlxyXG4gICAgKVxyXG59XHJcbiIsImltcG9ydCBfdG9Db25zdW1hYmxlQXJyYXkgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL3RvQ29uc3VtYWJsZUFycmF5XCI7XG5pbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgbWVyZ2UgZnJvbSAnLi9tZXJnZSc7XG5cbmZ1bmN0aW9uIG9taXQoaW5wdXQsIGZpZWxkcykge1xuICB2YXIgb3V0cHV0ID0ge307XG4gIE9iamVjdC5rZXlzKGlucHV0KS5mb3JFYWNoKGZ1bmN0aW9uIChwcm9wKSB7XG4gICAgaWYgKGZpZWxkcy5pbmRleE9mKHByb3ApID09PSAtMSkge1xuICAgICAgb3V0cHV0W3Byb3BdID0gaW5wdXRbcHJvcF07XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIG91dHB1dDtcbn1cblxuZnVuY3Rpb24gY3NzKHN0eWxlRnVuY3Rpb24pIHtcbiAgdmFyIG5ld1N0eWxlRnVuY3Rpb24gPSBmdW5jdGlvbiBuZXdTdHlsZUZ1bmN0aW9uKHByb3BzKSB7XG4gICAgdmFyIG91dHB1dCA9IHN0eWxlRnVuY3Rpb24ocHJvcHMpO1xuXG4gICAgaWYgKHByb3BzLmNzcykge1xuICAgICAgcmV0dXJuIF9leHRlbmRzKF9leHRlbmRzKHt9LCBtZXJnZShvdXRwdXQsIHN0eWxlRnVuY3Rpb24oX2V4dGVuZHMoe1xuICAgICAgICB0aGVtZTogcHJvcHMudGhlbWVcbiAgICAgIH0sIHByb3BzLmNzcykpKSksIG9taXQocHJvcHMuY3NzLCBbc3R5bGVGdW5jdGlvbi5maWx0ZXJQcm9wc10pKTtcbiAgICB9XG5cbiAgICByZXR1cm4gb3V0cHV0O1xuICB9O1xuXG4gIG5ld1N0eWxlRnVuY3Rpb24ucHJvcFR5cGVzID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IF9leHRlbmRzKF9leHRlbmRzKHt9LCBzdHlsZUZ1bmN0aW9uLnByb3BUeXBlcyksIHt9LCB7XG4gICAgY3NzOiBQcm9wVHlwZXMub2JqZWN0XG4gIH0pIDoge307XG4gIG5ld1N0eWxlRnVuY3Rpb24uZmlsdGVyUHJvcHMgPSBbJ2NzcyddLmNvbmNhdChfdG9Db25zdW1hYmxlQXJyYXkoc3R5bGVGdW5jdGlvbi5maWx0ZXJQcm9wcykpO1xuICByZXR1cm4gbmV3U3R5bGVGdW5jdGlvbjtcbn1cblxuZXhwb3J0IGRlZmF1bHQgY3NzOyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IG1lcmdlIGZyb20gJy4vbWVyZ2UnO1xuXG5mdW5jdGlvbiBjb21wb3NlKCkge1xuICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgc3R5bGVzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgIHN0eWxlc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgfVxuXG4gIHZhciBmbiA9IGZ1bmN0aW9uIGZuKHByb3BzKSB7XG4gICAgcmV0dXJuIHN0eWxlcy5yZWR1Y2UoZnVuY3Rpb24gKGFjYywgc3R5bGUpIHtcbiAgICAgIHZhciBvdXRwdXQgPSBzdHlsZShwcm9wcyk7XG5cbiAgICAgIGlmIChvdXRwdXQpIHtcbiAgICAgICAgcmV0dXJuIG1lcmdlKGFjYywgb3V0cHV0KTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGFjYztcbiAgICB9LCB7fSk7XG4gIH07IC8vIEFsdGVybmF0aXZlIGFwcHJvYWNoIHRoYXQgZG9lc24ndCB5aWVsZCBhbnkgcGVyZm9ybWFuY2UgZ2Fpbi5cbiAgLy8gY29uc3QgaGFuZGxlcnMgPSBzdHlsZXMucmVkdWNlKChhY2MsIHN0eWxlKSA9PiB7XG4gIC8vICAgc3R5bGUuZmlsdGVyUHJvcHMuZm9yRWFjaChwcm9wID0+IHtcbiAgLy8gICAgIGFjY1twcm9wXSA9IHN0eWxlO1xuICAvLyAgIH0pO1xuICAvLyAgIHJldHVybiBhY2M7XG4gIC8vIH0sIHt9KTtcbiAgLy8gY29uc3QgZm4gPSBwcm9wcyA9PiB7XG4gIC8vICAgcmV0dXJuIE9iamVjdC5rZXlzKHByb3BzKS5yZWR1Y2UoKGFjYywgcHJvcCkgPT4ge1xuICAvLyAgICAgaWYgKGhhbmRsZXJzW3Byb3BdKSB7XG4gIC8vICAgICAgIHJldHVybiBtZXJnZShhY2MsIGhhbmRsZXJzW3Byb3BdKHByb3BzKSk7XG4gIC8vICAgICB9XG4gIC8vICAgICByZXR1cm4gYWNjO1xuICAvLyAgIH0sIHt9KTtcbiAgLy8gfTtcblxuXG4gIGZuLnByb3BUeXBlcyA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBzdHlsZXMucmVkdWNlKGZ1bmN0aW9uIChhY2MsIHN0eWxlKSB7XG4gICAgcmV0dXJuIF9leHRlbmRzKGFjYywgc3R5bGUucHJvcFR5cGVzKTtcbiAgfSwge30pIDoge307XG4gIGZuLmZpbHRlclByb3BzID0gc3R5bGVzLnJlZHVjZShmdW5jdGlvbiAoYWNjLCBzdHlsZSkge1xuICAgIHJldHVybiBhY2MuY29uY2F0KHN0eWxlLmZpbHRlclByb3BzKTtcbiAgfSwgW10pO1xuICByZXR1cm4gZm47XG59XG5cbmV4cG9ydCBkZWZhdWx0IGNvbXBvc2U7IiwiaW1wb3J0IF9kZWZpbmVQcm9wZXJ0eSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZGVmaW5lUHJvcGVydHlcIjtcbmltcG9ydCByZXNwb25zaXZlUHJvcFR5cGUgZnJvbSAnLi9yZXNwb25zaXZlUHJvcFR5cGUnO1xuaW1wb3J0IHsgaGFuZGxlQnJlYWtwb2ludHMgfSBmcm9tICcuL2JyZWFrcG9pbnRzJztcblxuZnVuY3Rpb24gZ2V0UGF0aChvYmosIHBhdGgpIHtcbiAgaWYgKCFwYXRoIHx8IHR5cGVvZiBwYXRoICE9PSAnc3RyaW5nJykge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgcmV0dXJuIHBhdGguc3BsaXQoJy4nKS5yZWR1Y2UoZnVuY3Rpb24gKGFjYywgaXRlbSkge1xuICAgIHJldHVybiBhY2MgJiYgYWNjW2l0ZW1dID8gYWNjW2l0ZW1dIDogbnVsbDtcbiAgfSwgb2JqKTtcbn1cblxuZnVuY3Rpb24gc3R5bGUob3B0aW9ucykge1xuICB2YXIgcHJvcCA9IG9wdGlvbnMucHJvcCxcbiAgICAgIF9vcHRpb25zJGNzc1Byb3BlcnR5ID0gb3B0aW9ucy5jc3NQcm9wZXJ0eSxcbiAgICAgIGNzc1Byb3BlcnR5ID0gX29wdGlvbnMkY3NzUHJvcGVydHkgPT09IHZvaWQgMCA/IG9wdGlvbnMucHJvcCA6IF9vcHRpb25zJGNzc1Byb3BlcnR5LFxuICAgICAgdGhlbWVLZXkgPSBvcHRpb25zLnRoZW1lS2V5LFxuICAgICAgdHJhbnNmb3JtID0gb3B0aW9ucy50cmFuc2Zvcm07XG5cbiAgdmFyIGZuID0gZnVuY3Rpb24gZm4ocHJvcHMpIHtcbiAgICBpZiAocHJvcHNbcHJvcF0gPT0gbnVsbCkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgdmFyIHByb3BWYWx1ZSA9IHByb3BzW3Byb3BdO1xuICAgIHZhciB0aGVtZSA9IHByb3BzLnRoZW1lO1xuICAgIHZhciB0aGVtZU1hcHBpbmcgPSBnZXRQYXRoKHRoZW1lLCB0aGVtZUtleSkgfHwge307XG5cbiAgICB2YXIgc3R5bGVGcm9tUHJvcFZhbHVlID0gZnVuY3Rpb24gc3R5bGVGcm9tUHJvcFZhbHVlKHByb3BWYWx1ZUZpbmFsKSB7XG4gICAgICB2YXIgdmFsdWU7XG5cbiAgICAgIGlmICh0eXBlb2YgdGhlbWVNYXBwaW5nID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHZhbHVlID0gdGhlbWVNYXBwaW5nKHByb3BWYWx1ZUZpbmFsKTtcbiAgICAgIH0gZWxzZSBpZiAoQXJyYXkuaXNBcnJheSh0aGVtZU1hcHBpbmcpKSB7XG4gICAgICAgIHZhbHVlID0gdGhlbWVNYXBwaW5nW3Byb3BWYWx1ZUZpbmFsXSB8fCBwcm9wVmFsdWVGaW5hbDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhbHVlID0gZ2V0UGF0aCh0aGVtZU1hcHBpbmcsIHByb3BWYWx1ZUZpbmFsKSB8fCBwcm9wVmFsdWVGaW5hbDtcblxuICAgICAgICBpZiAodHJhbnNmb3JtKSB7XG4gICAgICAgICAgdmFsdWUgPSB0cmFuc2Zvcm0odmFsdWUpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChjc3NQcm9wZXJ0eSA9PT0gZmFsc2UpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gX2RlZmluZVByb3BlcnR5KHt9LCBjc3NQcm9wZXJ0eSwgdmFsdWUpO1xuICAgIH07XG5cbiAgICByZXR1cm4gaGFuZGxlQnJlYWtwb2ludHMocHJvcHMsIHByb3BWYWx1ZSwgc3R5bGVGcm9tUHJvcFZhbHVlKTtcbiAgfTtcblxuICBmbi5wcm9wVHlwZXMgPSBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gX2RlZmluZVByb3BlcnR5KHt9LCBwcm9wLCByZXNwb25zaXZlUHJvcFR5cGUpIDoge307XG4gIGZuLmZpbHRlclByb3BzID0gW3Byb3BdO1xuICByZXR1cm4gZm47XG59XG5cbmV4cG9ydCBkZWZhdWx0IHN0eWxlOyIsImltcG9ydCBzdHlsZSBmcm9tICcuL3N0eWxlJztcbmltcG9ydCBjb21wb3NlIGZyb20gJy4vY29tcG9zZSc7XG5cbmZ1bmN0aW9uIGdldEJvcmRlcih2YWx1ZSkge1xuICBpZiAodHlwZW9mIHZhbHVlICE9PSAnbnVtYmVyJykge1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxuXG4gIHJldHVybiBcIlwiLmNvbmNhdCh2YWx1ZSwgXCJweCBzb2xpZFwiKTtcbn1cblxuZXhwb3J0IHZhciBib3JkZXIgPSBzdHlsZSh7XG4gIHByb3A6ICdib3JkZXInLFxuICB0aGVtZUtleTogJ2JvcmRlcnMnLFxuICB0cmFuc2Zvcm06IGdldEJvcmRlclxufSk7XG5leHBvcnQgdmFyIGJvcmRlclRvcCA9IHN0eWxlKHtcbiAgcHJvcDogJ2JvcmRlclRvcCcsXG4gIHRoZW1lS2V5OiAnYm9yZGVycycsXG4gIHRyYW5zZm9ybTogZ2V0Qm9yZGVyXG59KTtcbmV4cG9ydCB2YXIgYm9yZGVyUmlnaHQgPSBzdHlsZSh7XG4gIHByb3A6ICdib3JkZXJSaWdodCcsXG4gIHRoZW1lS2V5OiAnYm9yZGVycycsXG4gIHRyYW5zZm9ybTogZ2V0Qm9yZGVyXG59KTtcbmV4cG9ydCB2YXIgYm9yZGVyQm90dG9tID0gc3R5bGUoe1xuICBwcm9wOiAnYm9yZGVyQm90dG9tJyxcbiAgdGhlbWVLZXk6ICdib3JkZXJzJyxcbiAgdHJhbnNmb3JtOiBnZXRCb3JkZXJcbn0pO1xuZXhwb3J0IHZhciBib3JkZXJMZWZ0ID0gc3R5bGUoe1xuICBwcm9wOiAnYm9yZGVyTGVmdCcsXG4gIHRoZW1lS2V5OiAnYm9yZGVycycsXG4gIHRyYW5zZm9ybTogZ2V0Qm9yZGVyXG59KTtcbmV4cG9ydCB2YXIgYm9yZGVyQ29sb3IgPSBzdHlsZSh7XG4gIHByb3A6ICdib3JkZXJDb2xvcicsXG4gIHRoZW1lS2V5OiAncGFsZXR0ZSdcbn0pO1xuZXhwb3J0IHZhciBib3JkZXJSYWRpdXMgPSBzdHlsZSh7XG4gIHByb3A6ICdib3JkZXJSYWRpdXMnLFxuICB0aGVtZUtleTogJ3NoYXBlJ1xufSk7XG52YXIgYm9yZGVycyA9IGNvbXBvc2UoYm9yZGVyLCBib3JkZXJUb3AsIGJvcmRlclJpZ2h0LCBib3JkZXJCb3R0b20sIGJvcmRlckxlZnQsIGJvcmRlckNvbG9yLCBib3JkZXJSYWRpdXMpO1xuZXhwb3J0IGRlZmF1bHQgYm9yZGVyczsiLCJpbXBvcnQgc3R5bGUgZnJvbSAnLi9zdHlsZSc7XG5pbXBvcnQgY29tcG9zZSBmcm9tICcuL2NvbXBvc2UnO1xuZXhwb3J0IHZhciBkaXNwbGF5UHJpbnQgPSBzdHlsZSh7XG4gIHByb3A6ICdkaXNwbGF5UHJpbnQnLFxuICBjc3NQcm9wZXJ0eTogZmFsc2UsXG4gIHRyYW5zZm9ybTogZnVuY3Rpb24gdHJhbnNmb3JtKHZhbHVlKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICdAbWVkaWEgcHJpbnQnOiB7XG4gICAgICAgIGRpc3BsYXk6IHZhbHVlXG4gICAgICB9XG4gICAgfTtcbiAgfVxufSk7XG5leHBvcnQgdmFyIGRpc3BsYXlSYXcgPSBzdHlsZSh7XG4gIHByb3A6ICdkaXNwbGF5J1xufSk7XG5leHBvcnQgdmFyIG92ZXJmbG93ID0gc3R5bGUoe1xuICBwcm9wOiAnb3ZlcmZsb3cnXG59KTtcbmV4cG9ydCB2YXIgdGV4dE92ZXJmbG93ID0gc3R5bGUoe1xuICBwcm9wOiAndGV4dE92ZXJmbG93J1xufSk7XG5leHBvcnQgdmFyIHZpc2liaWxpdHkgPSBzdHlsZSh7XG4gIHByb3A6ICd2aXNpYmlsaXR5J1xufSk7XG5leHBvcnQgdmFyIHdoaXRlU3BhY2UgPSBzdHlsZSh7XG4gIHByb3A6ICd3aGl0ZVNwYWNlJ1xufSk7XG5leHBvcnQgZGVmYXVsdCBjb21wb3NlKGRpc3BsYXlQcmludCwgZGlzcGxheVJhdywgb3ZlcmZsb3csIHRleHRPdmVyZmxvdywgdmlzaWJpbGl0eSwgd2hpdGVTcGFjZSk7IiwiaW1wb3J0IHN0eWxlIGZyb20gJy4vc3R5bGUnO1xuaW1wb3J0IGNvbXBvc2UgZnJvbSAnLi9jb21wb3NlJztcbmV4cG9ydCB2YXIgZmxleEJhc2lzID0gc3R5bGUoe1xuICBwcm9wOiAnZmxleEJhc2lzJ1xufSk7XG5leHBvcnQgdmFyIGZsZXhEaXJlY3Rpb24gPSBzdHlsZSh7XG4gIHByb3A6ICdmbGV4RGlyZWN0aW9uJ1xufSk7XG5leHBvcnQgdmFyIGZsZXhXcmFwID0gc3R5bGUoe1xuICBwcm9wOiAnZmxleFdyYXAnXG59KTtcbmV4cG9ydCB2YXIganVzdGlmeUNvbnRlbnQgPSBzdHlsZSh7XG4gIHByb3A6ICdqdXN0aWZ5Q29udGVudCdcbn0pO1xuZXhwb3J0IHZhciBhbGlnbkl0ZW1zID0gc3R5bGUoe1xuICBwcm9wOiAnYWxpZ25JdGVtcydcbn0pO1xuZXhwb3J0IHZhciBhbGlnbkNvbnRlbnQgPSBzdHlsZSh7XG4gIHByb3A6ICdhbGlnbkNvbnRlbnQnXG59KTtcbmV4cG9ydCB2YXIgb3JkZXIgPSBzdHlsZSh7XG4gIHByb3A6ICdvcmRlcidcbn0pO1xuZXhwb3J0IHZhciBmbGV4ID0gc3R5bGUoe1xuICBwcm9wOiAnZmxleCdcbn0pO1xuZXhwb3J0IHZhciBmbGV4R3JvdyA9IHN0eWxlKHtcbiAgcHJvcDogJ2ZsZXhHcm93J1xufSk7XG5leHBvcnQgdmFyIGZsZXhTaHJpbmsgPSBzdHlsZSh7XG4gIHByb3A6ICdmbGV4U2hyaW5rJ1xufSk7XG5leHBvcnQgdmFyIGFsaWduU2VsZiA9IHN0eWxlKHtcbiAgcHJvcDogJ2FsaWduU2VsZidcbn0pO1xuZXhwb3J0IHZhciBqdXN0aWZ5SXRlbXMgPSBzdHlsZSh7XG4gIHByb3A6ICdqdXN0aWZ5SXRlbXMnXG59KTtcbmV4cG9ydCB2YXIganVzdGlmeVNlbGYgPSBzdHlsZSh7XG4gIHByb3A6ICdqdXN0aWZ5U2VsZidcbn0pO1xudmFyIGZsZXhib3ggPSBjb21wb3NlKGZsZXhCYXNpcywgZmxleERpcmVjdGlvbiwgZmxleFdyYXAsIGp1c3RpZnlDb250ZW50LCBhbGlnbkl0ZW1zLCBhbGlnbkNvbnRlbnQsIG9yZGVyLCBmbGV4LCBmbGV4R3JvdywgZmxleFNocmluaywgYWxpZ25TZWxmLCBqdXN0aWZ5SXRlbXMsIGp1c3RpZnlTZWxmKTtcbmV4cG9ydCBkZWZhdWx0IGZsZXhib3g7IiwiaW1wb3J0IHN0eWxlIGZyb20gJy4vc3R5bGUnO1xuaW1wb3J0IGNvbXBvc2UgZnJvbSAnLi9jb21wb3NlJztcbmV4cG9ydCB2YXIgZ3JpZEdhcCA9IHN0eWxlKHtcbiAgcHJvcDogJ2dyaWRHYXAnXG59KTtcbmV4cG9ydCB2YXIgZ3JpZENvbHVtbkdhcCA9IHN0eWxlKHtcbiAgcHJvcDogJ2dyaWRDb2x1bW5HYXAnXG59KTtcbmV4cG9ydCB2YXIgZ3JpZFJvd0dhcCA9IHN0eWxlKHtcbiAgcHJvcDogJ2dyaWRSb3dHYXAnXG59KTtcbmV4cG9ydCB2YXIgZ3JpZENvbHVtbiA9IHN0eWxlKHtcbiAgcHJvcDogJ2dyaWRDb2x1bW4nXG59KTtcbmV4cG9ydCB2YXIgZ3JpZFJvdyA9IHN0eWxlKHtcbiAgcHJvcDogJ2dyaWRSb3cnXG59KTtcbmV4cG9ydCB2YXIgZ3JpZEF1dG9GbG93ID0gc3R5bGUoe1xuICBwcm9wOiAnZ3JpZEF1dG9GbG93J1xufSk7XG5leHBvcnQgdmFyIGdyaWRBdXRvQ29sdW1ucyA9IHN0eWxlKHtcbiAgcHJvcDogJ2dyaWRBdXRvQ29sdW1ucydcbn0pO1xuZXhwb3J0IHZhciBncmlkQXV0b1Jvd3MgPSBzdHlsZSh7XG4gIHByb3A6ICdncmlkQXV0b1Jvd3MnXG59KTtcbmV4cG9ydCB2YXIgZ3JpZFRlbXBsYXRlQ29sdW1ucyA9IHN0eWxlKHtcbiAgcHJvcDogJ2dyaWRUZW1wbGF0ZUNvbHVtbnMnXG59KTtcbmV4cG9ydCB2YXIgZ3JpZFRlbXBsYXRlUm93cyA9IHN0eWxlKHtcbiAgcHJvcDogJ2dyaWRUZW1wbGF0ZVJvd3MnXG59KTtcbmV4cG9ydCB2YXIgZ3JpZFRlbXBsYXRlQXJlYXMgPSBzdHlsZSh7XG4gIHByb3A6ICdncmlkVGVtcGxhdGVBcmVhcydcbn0pO1xuZXhwb3J0IHZhciBncmlkQXJlYSA9IHN0eWxlKHtcbiAgcHJvcDogJ2dyaWRBcmVhJ1xufSk7XG52YXIgZ3JpZCA9IGNvbXBvc2UoZ3JpZEdhcCwgZ3JpZENvbHVtbkdhcCwgZ3JpZFJvd0dhcCwgZ3JpZENvbHVtbiwgZ3JpZFJvdywgZ3JpZEF1dG9GbG93LCBncmlkQXV0b0NvbHVtbnMsIGdyaWRBdXRvUm93cywgZ3JpZFRlbXBsYXRlQ29sdW1ucywgZ3JpZFRlbXBsYXRlUm93cywgZ3JpZFRlbXBsYXRlQXJlYXMsIGdyaWRBcmVhKTtcbmV4cG9ydCBkZWZhdWx0IGdyaWQ7IiwiaW1wb3J0IHN0eWxlIGZyb20gJy4vc3R5bGUnO1xuaW1wb3J0IGNvbXBvc2UgZnJvbSAnLi9jb21wb3NlJztcbmV4cG9ydCB2YXIgcG9zaXRpb24gPSBzdHlsZSh7XG4gIHByb3A6ICdwb3NpdGlvbidcbn0pO1xuZXhwb3J0IHZhciB6SW5kZXggPSBzdHlsZSh7XG4gIHByb3A6ICd6SW5kZXgnLFxuICB0aGVtZUtleTogJ3pJbmRleCdcbn0pO1xuZXhwb3J0IHZhciB0b3AgPSBzdHlsZSh7XG4gIHByb3A6ICd0b3AnXG59KTtcbmV4cG9ydCB2YXIgcmlnaHQgPSBzdHlsZSh7XG4gIHByb3A6ICdyaWdodCdcbn0pO1xuZXhwb3J0IHZhciBib3R0b20gPSBzdHlsZSh7XG4gIHByb3A6ICdib3R0b20nXG59KTtcbmV4cG9ydCB2YXIgbGVmdCA9IHN0eWxlKHtcbiAgcHJvcDogJ2xlZnQnXG59KTtcbmV4cG9ydCBkZWZhdWx0IGNvbXBvc2UocG9zaXRpb24sIHpJbmRleCwgdG9wLCByaWdodCwgYm90dG9tLCBsZWZ0KTsiLCJpbXBvcnQgc3R5bGUgZnJvbSAnLi9zdHlsZSc7XG5pbXBvcnQgY29tcG9zZSBmcm9tICcuL2NvbXBvc2UnO1xuZXhwb3J0IHZhciBjb2xvciA9IHN0eWxlKHtcbiAgcHJvcDogJ2NvbG9yJyxcbiAgdGhlbWVLZXk6ICdwYWxldHRlJ1xufSk7XG5leHBvcnQgdmFyIGJnY29sb3IgPSBzdHlsZSh7XG4gIHByb3A6ICdiZ2NvbG9yJyxcbiAgY3NzUHJvcGVydHk6ICdiYWNrZ3JvdW5kQ29sb3InLFxuICB0aGVtZUtleTogJ3BhbGV0dGUnXG59KTtcbnZhciBwYWxldHRlID0gY29tcG9zZShjb2xvciwgYmdjb2xvcik7XG5leHBvcnQgZGVmYXVsdCBwYWxldHRlOyIsImltcG9ydCBzdHlsZSBmcm9tICcuL3N0eWxlJztcbnZhciBib3hTaGFkb3cgPSBzdHlsZSh7XG4gIHByb3A6ICdib3hTaGFkb3cnLFxuICB0aGVtZUtleTogJ3NoYWRvd3MnXG59KTtcbmV4cG9ydCBkZWZhdWx0IGJveFNoYWRvdzsiLCJpbXBvcnQgc3R5bGUgZnJvbSAnLi9zdHlsZSc7XG5pbXBvcnQgY29tcG9zZSBmcm9tICcuL2NvbXBvc2UnO1xuXG5mdW5jdGlvbiB0cmFuc2Zvcm0odmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlIDw9IDEgPyBcIlwiLmNvbmNhdCh2YWx1ZSAqIDEwMCwgXCIlXCIpIDogdmFsdWU7XG59XG5cbmV4cG9ydCB2YXIgd2lkdGggPSBzdHlsZSh7XG4gIHByb3A6ICd3aWR0aCcsXG4gIHRyYW5zZm9ybTogdHJhbnNmb3JtXG59KTtcbmV4cG9ydCB2YXIgbWF4V2lkdGggPSBzdHlsZSh7XG4gIHByb3A6ICdtYXhXaWR0aCcsXG4gIHRyYW5zZm9ybTogdHJhbnNmb3JtXG59KTtcbmV4cG9ydCB2YXIgbWluV2lkdGggPSBzdHlsZSh7XG4gIHByb3A6ICdtaW5XaWR0aCcsXG4gIHRyYW5zZm9ybTogdHJhbnNmb3JtXG59KTtcbmV4cG9ydCB2YXIgaGVpZ2h0ID0gc3R5bGUoe1xuICBwcm9wOiAnaGVpZ2h0JyxcbiAgdHJhbnNmb3JtOiB0cmFuc2Zvcm1cbn0pO1xuZXhwb3J0IHZhciBtYXhIZWlnaHQgPSBzdHlsZSh7XG4gIHByb3A6ICdtYXhIZWlnaHQnLFxuICB0cmFuc2Zvcm06IHRyYW5zZm9ybVxufSk7XG5leHBvcnQgdmFyIG1pbkhlaWdodCA9IHN0eWxlKHtcbiAgcHJvcDogJ21pbkhlaWdodCcsXG4gIHRyYW5zZm9ybTogdHJhbnNmb3JtXG59KTtcbmV4cG9ydCB2YXIgc2l6ZVdpZHRoID0gc3R5bGUoe1xuICBwcm9wOiAnc2l6ZScsXG4gIGNzc1Byb3BlcnR5OiAnd2lkdGgnLFxuICB0cmFuc2Zvcm06IHRyYW5zZm9ybVxufSk7XG5leHBvcnQgdmFyIHNpemVIZWlnaHQgPSBzdHlsZSh7XG4gIHByb3A6ICdzaXplJyxcbiAgY3NzUHJvcGVydHk6ICdoZWlnaHQnLFxuICB0cmFuc2Zvcm06IHRyYW5zZm9ybVxufSk7XG5leHBvcnQgdmFyIGJveFNpemluZyA9IHN0eWxlKHtcbiAgcHJvcDogJ2JveFNpemluZydcbn0pO1xudmFyIHNpemluZyA9IGNvbXBvc2Uod2lkdGgsIG1heFdpZHRoLCBtaW5XaWR0aCwgaGVpZ2h0LCBtYXhIZWlnaHQsIG1pbkhlaWdodCwgYm94U2l6aW5nKTtcbmV4cG9ydCBkZWZhdWx0IHNpemluZzsiLCJpbXBvcnQgc3R5bGUgZnJvbSAnLi9zdHlsZSc7XG5pbXBvcnQgY29tcG9zZSBmcm9tICcuL2NvbXBvc2UnO1xuZXhwb3J0IHZhciBmb250RmFtaWx5ID0gc3R5bGUoe1xuICBwcm9wOiAnZm9udEZhbWlseScsXG4gIHRoZW1lS2V5OiAndHlwb2dyYXBoeSdcbn0pO1xuZXhwb3J0IHZhciBmb250U2l6ZSA9IHN0eWxlKHtcbiAgcHJvcDogJ2ZvbnRTaXplJyxcbiAgdGhlbWVLZXk6ICd0eXBvZ3JhcGh5J1xufSk7XG5leHBvcnQgdmFyIGZvbnRTdHlsZSA9IHN0eWxlKHtcbiAgcHJvcDogJ2ZvbnRTdHlsZScsXG4gIHRoZW1lS2V5OiAndHlwb2dyYXBoeSdcbn0pO1xuZXhwb3J0IHZhciBmb250V2VpZ2h0ID0gc3R5bGUoe1xuICBwcm9wOiAnZm9udFdlaWdodCcsXG4gIHRoZW1lS2V5OiAndHlwb2dyYXBoeSdcbn0pO1xuZXhwb3J0IHZhciBsZXR0ZXJTcGFjaW5nID0gc3R5bGUoe1xuICBwcm9wOiAnbGV0dGVyU3BhY2luZydcbn0pO1xuZXhwb3J0IHZhciBsaW5lSGVpZ2h0ID0gc3R5bGUoe1xuICBwcm9wOiAnbGluZUhlaWdodCdcbn0pO1xuZXhwb3J0IHZhciB0ZXh0QWxpZ24gPSBzdHlsZSh7XG4gIHByb3A6ICd0ZXh0QWxpZ24nXG59KTtcbnZhciB0eXBvZ3JhcGh5ID0gY29tcG9zZShmb250RmFtaWx5LCBmb250U2l6ZSwgZm9udFN0eWxlLCBmb250V2VpZ2h0LCBsZXR0ZXJTcGFjaW5nLCBsaW5lSGVpZ2h0LCB0ZXh0QWxpZ24pO1xuZXhwb3J0IGRlZmF1bHQgdHlwb2dyYXBoeTsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzXCI7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IGNsc3ggZnJvbSAnY2xzeCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHsgY2hhaW5Qcm9wVHlwZXMsIGdldERpc3BsYXlOYW1lIH0gZnJvbSAnQG1hdGVyaWFsLXVpL3V0aWxzJztcbmltcG9ydCBob2lzdE5vblJlYWN0U3RhdGljcyBmcm9tICdob2lzdC1ub24tcmVhY3Qtc3RhdGljcyc7XG5pbXBvcnQgbWFrZVN0eWxlcyBmcm9tICcuLi9tYWtlU3R5bGVzJztcblxuZnVuY3Rpb24gb21pdChpbnB1dCwgZmllbGRzKSB7XG4gIHZhciBvdXRwdXQgPSB7fTtcbiAgT2JqZWN0LmtleXMoaW5wdXQpLmZvckVhY2goZnVuY3Rpb24gKHByb3ApIHtcbiAgICBpZiAoZmllbGRzLmluZGV4T2YocHJvcCkgPT09IC0xKSB7XG4gICAgICBvdXRwdXRbcHJvcF0gPSBpbnB1dFtwcm9wXTtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gb3V0cHV0O1xufSAvLyBzdHlsZWQtY29tcG9uZW50cydzIEFQSSByZW1vdmVzIHRoZSBtYXBwaW5nIGJldHdlZW4gY29tcG9uZW50cyBhbmQgc3R5bGVzLlxuLy8gVXNpbmcgY29tcG9uZW50cyBhcyBhIGxvdy1sZXZlbCBzdHlsaW5nIGNvbnN0cnVjdCBjYW4gYmUgc2ltcGxlci5cblxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBzdHlsZWQoQ29tcG9uZW50KSB7XG4gIHZhciBjb21wb25lbnRDcmVhdG9yID0gZnVuY3Rpb24gY29tcG9uZW50Q3JlYXRvcihzdHlsZSkge1xuICAgIHZhciBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB7fTtcblxuICAgIHZhciBuYW1lID0gb3B0aW9ucy5uYW1lLFxuICAgICAgICBzdHlsZXNPcHRpb25zID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKG9wdGlvbnMsIFtcIm5hbWVcIl0pO1xuXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgQ29tcG9uZW50ID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihbJ1lvdSBhcmUgY2FsbGluZyBzdHlsZWQoQ29tcG9uZW50KShzdHlsZSkgd2l0aCBhbiB1bmRlZmluZWQgY29tcG9uZW50LicsICdZb3UgbWF5IGhhdmUgZm9yZ290dGVuIHRvIGltcG9ydCBpdC4nXS5qb2luKCdcXG4nKSk7XG4gICAgfVxuXG4gICAgdmFyIGNsYXNzTmFtZVByZWZpeCA9IG5hbWU7XG5cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgaWYgKCFuYW1lKSB7XG4gICAgICAgIC8vIFByb3ZpZGUgYSBiZXR0ZXIgRFggb3V0c2lkZSBwcm9kdWN0aW9uLlxuICAgICAgICB2YXIgZGlzcGxheU5hbWUgPSBnZXREaXNwbGF5TmFtZShDb21wb25lbnQpO1xuXG4gICAgICAgIGlmIChkaXNwbGF5TmFtZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgY2xhc3NOYW1lUHJlZml4ID0gZGlzcGxheU5hbWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgc3R5bGVzT3JDcmVhdG9yID0gdHlwZW9mIHN0eWxlID09PSAnZnVuY3Rpb24nID8gZnVuY3Rpb24gKHRoZW1lKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICByb290OiBmdW5jdGlvbiByb290KHByb3BzKSB7XG4gICAgICAgICAgcmV0dXJuIHN0eWxlKF9leHRlbmRzKHtcbiAgICAgICAgICAgIHRoZW1lOiB0aGVtZVxuICAgICAgICAgIH0sIHByb3BzKSk7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfSA6IHtcbiAgICAgIHJvb3Q6IHN0eWxlXG4gICAgfTtcbiAgICB2YXIgdXNlU3R5bGVzID0gbWFrZVN0eWxlcyhzdHlsZXNPckNyZWF0b3IsIF9leHRlbmRzKHtcbiAgICAgIENvbXBvbmVudDogQ29tcG9uZW50LFxuICAgICAgbmFtZTogbmFtZSB8fCBDb21wb25lbnQuZGlzcGxheU5hbWUsXG4gICAgICBjbGFzc05hbWVQcmVmaXg6IGNsYXNzTmFtZVByZWZpeFxuICAgIH0sIHN0eWxlc09wdGlvbnMpKTtcbiAgICB2YXIgZmlsdGVyUHJvcHM7XG4gICAgdmFyIHByb3BUeXBlcyA9IHt9O1xuXG4gICAgaWYgKHN0eWxlLmZpbHRlclByb3BzKSB7XG4gICAgICBmaWx0ZXJQcm9wcyA9IHN0eWxlLmZpbHRlclByb3BzO1xuICAgICAgZGVsZXRlIHN0eWxlLmZpbHRlclByb3BzO1xuICAgIH1cbiAgICAvKiBlc2xpbnQtZGlzYWJsZSByZWFjdC9mb3JiaWQtZm9yZWlnbi1wcm9wLXR5cGVzICovXG5cblxuICAgIGlmIChzdHlsZS5wcm9wVHlwZXMpIHtcbiAgICAgIHByb3BUeXBlcyA9IHN0eWxlLnByb3BUeXBlcztcbiAgICAgIGRlbGV0ZSBzdHlsZS5wcm9wVHlwZXM7XG4gICAgfVxuICAgIC8qIGVzbGludC1lbmFibGUgcmVhY3QvZm9yYmlkLWZvcmVpZ24tcHJvcC10eXBlcyAqL1xuXG5cbiAgICB2YXIgU3R5bGVkQ29tcG9uZW50ID0gUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBTdHlsZWRDb21wb25lbnQocHJvcHMsIHJlZikge1xuICAgICAgdmFyIGNoaWxkcmVuID0gcHJvcHMuY2hpbGRyZW4sXG4gICAgICAgICAgY2xhc3NOYW1lUHJvcCA9IHByb3BzLmNsYXNzTmFtZSxcbiAgICAgICAgICBjbG9uZSA9IHByb3BzLmNsb25lLFxuICAgICAgICAgIENvbXBvbmVudFByb3AgPSBwcm9wcy5jb21wb25lbnQsXG4gICAgICAgICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMocHJvcHMsIFtcImNoaWxkcmVuXCIsIFwiY2xhc3NOYW1lXCIsIFwiY2xvbmVcIiwgXCJjb21wb25lbnRcIl0pO1xuXG4gICAgICB2YXIgY2xhc3NlcyA9IHVzZVN0eWxlcyhwcm9wcyk7XG4gICAgICB2YXIgY2xhc3NOYW1lID0gY2xzeChjbGFzc2VzLnJvb3QsIGNsYXNzTmFtZVByb3ApO1xuICAgICAgdmFyIHNwcmVhZCA9IG90aGVyO1xuXG4gICAgICBpZiAoZmlsdGVyUHJvcHMpIHtcbiAgICAgICAgc3ByZWFkID0gb21pdChzcHJlYWQsIGZpbHRlclByb3BzKTtcbiAgICAgIH1cblxuICAgICAgaWYgKGNsb25lKSB7XG4gICAgICAgIHJldHVybiBSZWFjdC5jbG9uZUVsZW1lbnQoY2hpbGRyZW4sIF9leHRlbmRzKHtcbiAgICAgICAgICBjbGFzc05hbWU6IGNsc3goY2hpbGRyZW4ucHJvcHMuY2xhc3NOYW1lLCBjbGFzc05hbWUpXG4gICAgICAgIH0sIHNwcmVhZCkpO1xuICAgICAgfVxuXG4gICAgICBpZiAodHlwZW9mIGNoaWxkcmVuID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHJldHVybiBjaGlsZHJlbihfZXh0ZW5kcyh7XG4gICAgICAgICAgY2xhc3NOYW1lOiBjbGFzc05hbWVcbiAgICAgICAgfSwgc3ByZWFkKSk7XG4gICAgICB9XG5cbiAgICAgIHZhciBGaW5hbENvbXBvbmVudCA9IENvbXBvbmVudFByb3AgfHwgQ29tcG9uZW50O1xuICAgICAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KEZpbmFsQ29tcG9uZW50LCBfZXh0ZW5kcyh7XG4gICAgICAgIHJlZjogcmVmLFxuICAgICAgICBjbGFzc05hbWU6IGNsYXNzTmFtZVxuICAgICAgfSwgc3ByZWFkKSwgY2hpbGRyZW4pO1xuICAgIH0pO1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFN0eWxlZENvbXBvbmVudC5wcm9wVHlwZXMgPSBfZXh0ZW5kcyh7XG4gICAgICAvKipcbiAgICAgICAqIEEgcmVuZGVyIGZ1bmN0aW9uIG9yIG5vZGUuXG4gICAgICAgKi9cbiAgICAgIGNoaWxkcmVuOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMubm9kZSwgUHJvcFR5cGVzLmZ1bmNdKSxcblxuICAgICAgLyoqXG4gICAgICAgKiBAaWdub3JlXG4gICAgICAgKi9cbiAgICAgIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcblxuICAgICAgLyoqXG4gICAgICAgKiBJZiBgdHJ1ZWAsIHRoZSBjb21wb25lbnQgd2lsbCByZWN5Y2xlIGl0J3MgY2hpbGRyZW4gSFRNTCBlbGVtZW50LlxuICAgICAgICogSXQncyB1c2luZyBgUmVhY3QuY2xvbmVFbGVtZW50YCBpbnRlcm5hbGx5LlxuICAgICAgICpcbiAgICAgICAqIFRoaXMgcHJvcCB3aWxsIGJlIGRlcHJlY2F0ZWQgYW5kIHJlbW92ZWQgaW4gdjVcbiAgICAgICAqL1xuICAgICAgY2xvbmU6IGNoYWluUHJvcFR5cGVzKFByb3BUeXBlcy5ib29sLCBmdW5jdGlvbiAocHJvcHMpIHtcbiAgICAgICAgaWYgKHByb3BzLmNsb25lICYmIHByb3BzLmNvbXBvbmVudCkge1xuICAgICAgICAgIHJldHVybiBuZXcgRXJyb3IoJ1lvdSBjYW4gbm90IHVzZSB0aGUgY2xvbmUgYW5kIGNvbXBvbmVudCBwcm9wIGF0IHRoZSBzYW1lIHRpbWUuJyk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH0pLFxuXG4gICAgICAvKipcbiAgICAgICAqIFRoZSBjb21wb25lbnQgdXNlZCBmb3IgdGhlIHJvb3Qgbm9kZS5cbiAgICAgICAqIEVpdGhlciBhIHN0cmluZyB0byB1c2UgYSBIVE1MIGVsZW1lbnQgb3IgYSBjb21wb25lbnQuXG4gICAgICAgKi9cbiAgICAgIGNvbXBvbmVudDogUHJvcFR5cGVzLmVsZW1lbnRUeXBlXG4gICAgfSwgcHJvcFR5cGVzKSA6IHZvaWQgMDtcblxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBTdHlsZWRDb21wb25lbnQuZGlzcGxheU5hbWUgPSBcIlN0eWxlZChcIi5jb25jYXQoY2xhc3NOYW1lUHJlZml4LCBcIilcIik7XG4gICAgfVxuXG4gICAgaG9pc3ROb25SZWFjdFN0YXRpY3MoU3R5bGVkQ29tcG9uZW50LCBDb21wb25lbnQpO1xuICAgIHJldHVybiBTdHlsZWRDb21wb25lbnQ7XG4gIH07XG5cbiAgcmV0dXJuIGNvbXBvbmVudENyZWF0b3I7XG59IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgeyBzdHlsZWQgYXMgc3R5bGVkV2l0aG91dERlZmF1bHQgfSBmcm9tICdAbWF0ZXJpYWwtdWkvc3R5bGVzJztcbmltcG9ydCBkZWZhdWx0VGhlbWUgZnJvbSAnLi9kZWZhdWx0VGhlbWUnO1xuXG52YXIgc3R5bGVkID0gZnVuY3Rpb24gc3R5bGVkKENvbXBvbmVudCkge1xuICB2YXIgY29tcG9uZW50Q3JlYXRvciA9IHN0eWxlZFdpdGhvdXREZWZhdWx0KENvbXBvbmVudCk7XG4gIHJldHVybiBmdW5jdGlvbiAoc3R5bGUsIG9wdGlvbnMpIHtcbiAgICByZXR1cm4gY29tcG9uZW50Q3JlYXRvcihzdHlsZSwgX2V4dGVuZHMoe1xuICAgICAgZGVmYXVsdFRoZW1lOiBkZWZhdWx0VGhlbWVcbiAgICB9LCBvcHRpb25zKSk7XG4gIH07XG59O1xuXG5leHBvcnQgZGVmYXVsdCBzdHlsZWQ7IiwiaW1wb3J0IHsgYm9yZGVycywgY29tcG9zZSwgZGlzcGxheSwgZmxleGJveCwgZ3JpZCwgcGFsZXR0ZSwgcG9zaXRpb25zLCBzaGFkb3dzLCBzaXppbmcsIHNwYWNpbmcsIHR5cG9ncmFwaHksIGNzcyB9IGZyb20gJ0BtYXRlcmlhbC11aS9zeXN0ZW0nO1xuaW1wb3J0IHN0eWxlZCBmcm9tICcuLi9zdHlsZXMvc3R5bGVkJztcbmV4cG9ydCB2YXIgc3R5bGVGdW5jdGlvbiA9IGNzcyhjb21wb3NlKGJvcmRlcnMsIGRpc3BsYXksIGZsZXhib3gsIGdyaWQsIHBvc2l0aW9ucywgcGFsZXR0ZSwgc2hhZG93cywgc2l6aW5nLCBzcGFjaW5nLCB0eXBvZ3JhcGh5KSk7XG4vKipcbiAqIEBpZ25vcmUgLSBkbyBub3QgZG9jdW1lbnQuXG4gKi9cblxudmFyIEJveCA9IHN0eWxlZCgnZGl2Jykoc3R5bGVGdW5jdGlvbiwge1xuICBuYW1lOiAnTXVpQm94J1xufSk7XG5leHBvcnQgZGVmYXVsdCBCb3g7IiwiaW1wb3J0IFJlYWN0LCB7IEZyYWdtZW50IH0gZnJvbSAncmVhY3QnXHJcbmltcG9ydCB7IFR5cG9ncmFwaHksIEJveCwgR3JpZCwgQ2lyY3VsYXJQcm9ncmVzcyB9IGZyb20gJ0BtYXRlcmlhbC11aS9jb3JlJ1xyXG5pbXBvcnQgeyBtYWtlU3R5bGVzIH0gZnJvbSAnQG1hdGVyaWFsLXVpL2NvcmUvc3R5bGVzJ1xyXG5cclxuY29uc3QgdXNlU3R5bGVzID0gbWFrZVN0eWxlcygodGhlbWUpID0+ICh7XHJcbiAgICByb290OiB7XHJcbiAgICAgICAgd2lkdGg6ICcxMDAlJyxcclxuICAgICAgICBoZWlnaHQ6ICc4NXZoJyxcclxuICAgICAgICBhbGlnbkl0ZW1zOiAnY2VudGVyJyxcclxuICAgIH0sXHJcbiAgICBsaW5rOiB7XHJcbiAgICAgICAgdGV4dERlY29yYXRpb246ICdub25lJyxcclxuICAgICAgICBjb2xvcjogJyMwMDAnLFxyXG4gICAgfSxcclxufSkpXHJcblxyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBNYWluUGFnZShwb3Jwcykge1xyXG4gICAgY29uc3QgY2xhc3NlcyA9IHVzZVN0eWxlcygpXHJcbiAgICBjb25zdCBbcHJvZ3Jlc3MsIHNldFByb2dyZXNzXSA9IFJlYWN0LnVzZVN0YXRlKDApXHJcbiAgICBjb25zdCBbbG9hZGluZywgc2V0TG9hZGluZ10gPSBSZWFjdC51c2VTdGF0ZSh0cnVlKVxyXG5cclxuICAgIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XHJcbiAgICAgICAgY29uc3QgdGltZXIgPSBzZXRJbnRlcnZhbCgoKSA9PiB7XHJcbiAgICAgICAgICAgIHNldFByb2dyZXNzKChwcmV2UHJvZ3Jlc3MpID0+XHJcbiAgICAgICAgICAgICAgICBwcmV2UHJvZ3Jlc3MgPj0gMTAwID8gc2V0TG9hZGluZyhmYWxzZSkgOiBwcmV2UHJvZ3Jlc3MgKyAxLFxyXG4gICAgICAgICAgICApXHJcbiAgICAgICAgfSwgMzApXHJcblxyXG4gICAgICAgIHJldHVybiAoKSA9PiB7XHJcbiAgICAgICAgICAgIGNsZWFySW50ZXJ2YWwodGltZXIpXHJcbiAgICAgICAgfVxyXG4gICAgfSwgW10pXHJcblxyXG4gICAgY29uc3QgcmVuZGVyTG9hZGluZyA9IGxvYWRpbmcgPyAoXHJcbiAgICAgICAgPEJveCBwb3NpdGlvbj1cInJlbGF0aXZlXCIgZGlzcGxheT1cImlubGluZS1mbGV4XCI+XHJcbiAgICAgICAgICAgIDxDaXJjdWxhclByb2dyZXNzIHNpemU9ezE1MH0gdmFyaWFudD1cInN0YXRpY1wiIHZhbHVlPXtwcm9ncmVzc30gLz5cclxuICAgICAgICAgICAgPEJveFxyXG4gICAgICAgICAgICAgICAgdG9wPXswfVxyXG4gICAgICAgICAgICAgICAgbGVmdD17MH1cclxuICAgICAgICAgICAgICAgIGJvdHRvbT17MH1cclxuICAgICAgICAgICAgICAgIHJpZ2h0PXswfVxyXG4gICAgICAgICAgICAgICAgcG9zaXRpb249XCJhYnNvbHV0ZVwiXHJcbiAgICAgICAgICAgICAgICBkaXNwbGF5PVwiZmxleFwiXHJcbiAgICAgICAgICAgICAgICBhbGlnbkl0ZW1zPVwiY2VudGVyXCJcclxuICAgICAgICAgICAgICAgIGp1c3RpZnlDb250ZW50PVwiY2VudGVyXCJcclxuICAgICAgICAgICAgPlxyXG4gICAgICAgICAgICAgICAgPFR5cG9ncmFwaHkgdmFyaWFudD1cImgyXCIgY29tcG9uZW50PVwiZGl2XCIgY29sb3I9XCJ0ZXh0U2Vjb25kYXJ5XCI+XHJcbiAgICAgICAgICAgICAgICAgICAge2Ake01hdGgucm91bmQocHJvZ3Jlc3MpfSVgfVxyXG4gICAgICAgICAgICAgICAgPC9UeXBvZ3JhcGh5PlxyXG4gICAgICAgICAgICA8L0JveD5cclxuICAgICAgICA8L0JveD5cclxuICAgICkgOiAoXHJcbiAgICAgICAgPFR5cG9ncmFwaHkgY29tcG9uZW50PVwiaDJcIiB2YXJpYW50PVwiaDVcIiBhbGlnbj1cImNlbnRlclwiPlxyXG4gICAgICAgICAgICDQlNC+0LHRgNC+INC/0L7QttCw0LvQvtCy0LDRgtGMXHJcbiAgICAgICAgPC9UeXBvZ3JhcGh5PlxyXG4gICAgKVxyXG5cclxuICAgIHJldHVybiAoXHJcbiAgICAgICAgPEdyaWRcclxuICAgICAgICAgICAgY2xhc3NOYW1lPXtjbGFzc2VzLnJvb3R9XHJcbiAgICAgICAgICAgIGNvbnRhaW5lclxyXG4gICAgICAgICAgICBzeD17MTJ9XHJcbiAgICAgICAgICAgIGp1c3RpZnk9XCJjZW50ZXJcIlxyXG4gICAgICAgICAgICBhbGlnbkNvbnRlbnQ9XCJjZW50ZXJcIlxyXG4gICAgICAgICAgICBkaXJlY3Rpb249XCJjb2x1bW5cIlxyXG4gICAgICAgID5cclxuICAgICAgICAgICAge3JlbmRlckxvYWRpbmd9XHJcbiAgICAgICAgPC9HcmlkPlxyXG4gICAgKVxyXG59XHJcbiIsIi8vIFRoaXMgZmlsZSByZXBsYWNlcyBgaW5kZXguanNgIGluIGJ1bmRsZXJzIGxpa2Ugd2VicGFjayBvciBSb2xsdXAsXG4vLyBhY2NvcmRpbmcgdG8gYGJyb3dzZXJgIGNvbmZpZyBpbiBgcGFja2FnZS5qc29uYC5cblxuaW1wb3J0IHsgdXJsQWxwaGFiZXQgfSBmcm9tICcuL3VybC1hbHBoYWJldC9pbmRleC5qcydcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgLy8gQWxsIGJ1bmRsZXJzIHdpbGwgcmVtb3ZlIHRoaXMgYmxvY2sgaW4gdGhlIHByb2R1Y3Rpb24gYnVuZGxlLlxuICBpZiAoXG4gICAgdHlwZW9mIG5hdmlnYXRvciAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgICBuYXZpZ2F0b3IucHJvZHVjdCA9PT0gJ1JlYWN0TmF0aXZlJyAmJlxuICAgIHR5cGVvZiBjcnlwdG8gPT09ICd1bmRlZmluZWQnXG4gICkge1xuICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICdSZWFjdCBOYXRpdmUgZG9lcyBub3QgaGF2ZSBhIGJ1aWx0LWluIHNlY3VyZSByYW5kb20gZ2VuZXJhdG9yLiAnICtcbiAgICAgICAgJ0lmIHlvdSBkb27igJl0IG5lZWQgdW5wcmVkaWN0YWJsZSBJRHMgdXNlIGBuYW5vaWQvbm9uLXNlY3VyZWAuICcgK1xuICAgICAgICAnRm9yIHNlY3VyZSBJRHMsIGltcG9ydCBgcmVhY3QtbmF0aXZlLWdldC1yYW5kb20tdmFsdWVzYCAnICtcbiAgICAgICAgJ2JlZm9yZSBOYW5vIElELiBJZiB5b3UgdXNlIEV4cG8sIGluc3RhbGwgYGV4cG8tcmFuZG9tYCAnICtcbiAgICAgICAgJ2FuZCB1c2UgYG5hbm9pZC9hc3luY2AuJ1xuICAgIClcbiAgfVxuICBpZiAodHlwZW9mIG1zQ3J5cHRvICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgY3J5cHRvID09PSAndW5kZWZpbmVkJykge1xuICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICdJbXBvcnQgZmlsZSB3aXRoIGBpZiAoIXdpbmRvdy5jcnlwdG8pIHdpbmRvdy5jcnlwdG8gPSB3aW5kb3cubXNDcnlwdG9gJyArXG4gICAgICAgICcgYmVmb3JlIGltcG9ydGluZyBOYW5vIElEIHRvIGZpeCBJRSAxMSBzdXBwb3J0J1xuICAgIClcbiAgfVxuICBpZiAodHlwZW9mIGNyeXB0byA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAnWW91ciBicm93c2VyIGRvZXMgbm90IGhhdmUgc2VjdXJlIHJhbmRvbSBnZW5lcmF0b3IuICcgK1xuICAgICAgICAnSWYgeW91IGRvbuKAmXQgbmVlZCB1bnByZWRpY3RhYmxlIElEcywgeW91IGNhbiB1c2UgbmFub2lkL25vbi1zZWN1cmUuJ1xuICAgIClcbiAgfVxufVxuXG5sZXQgcmFuZG9tID0gYnl0ZXMgPT4gY3J5cHRvLmdldFJhbmRvbVZhbHVlcyhuZXcgVWludDhBcnJheShieXRlcykpXG5cbmxldCBjdXN0b21SYW5kb20gPSAoYWxwaGFiZXQsIHNpemUsIGdldFJhbmRvbSkgPT4ge1xuICAvLyBGaXJzdCwgYSBiaXRtYXNrIGlzIG5lY2Vzc2FyeSB0byBnZW5lcmF0ZSB0aGUgSUQuIFRoZSBiaXRtYXNrIG1ha2VzIGJ5dGVzXG4gIC8vIHZhbHVlcyBjbG9zZXIgdG8gdGhlIGFscGhhYmV0IHNpemUuIFRoZSBiaXRtYXNrIGNhbGN1bGF0ZXMgdGhlIGNsb3Nlc3RcbiAgLy8gYDJeMzEgLSAxYCBudW1iZXIsIHdoaWNoIGV4Y2VlZHMgdGhlIGFscGhhYmV0IHNpemUuXG4gIC8vIEZvciBleGFtcGxlLCB0aGUgYml0bWFzayBmb3IgdGhlIGFscGhhYmV0IHNpemUgMzAgaXMgMzEgKDAwMDExMTExKS5cbiAgLy8gYE1hdGguY2x6MzJgIGlzIG5vdCB1c2VkLCBiZWNhdXNlIGl0IGlzIG5vdCBhdmFpbGFibGUgaW4gYnJvd3NlcnMuXG4gIGxldCBtYXNrID0gKDIgPDwgKE1hdGgubG9nKGFscGhhYmV0Lmxlbmd0aCAtIDEpIC8gTWF0aC5MTjIpKSAtIDFcbiAgLy8gVGhvdWdoLCB0aGUgYml0bWFzayBzb2x1dGlvbiBpcyBub3QgcGVyZmVjdCBzaW5jZSB0aGUgYnl0ZXMgZXhjZWVkaW5nXG4gIC8vIHRoZSBhbHBoYWJldCBzaXplIGFyZSByZWZ1c2VkLiBUaGVyZWZvcmUsIHRvIHJlbGlhYmx5IGdlbmVyYXRlIHRoZSBJRCxcbiAgLy8gdGhlIHJhbmRvbSBieXRlcyByZWR1bmRhbmN5IGhhcyB0byBiZSBzYXRpc2ZpZWQuXG5cbiAgLy8gTm90ZTogZXZlcnkgaGFyZHdhcmUgcmFuZG9tIGdlbmVyYXRvciBjYWxsIGlzIHBlcmZvcm1hbmNlIGV4cGVuc2l2ZSxcbiAgLy8gYmVjYXVzZSB0aGUgc3lzdGVtIGNhbGwgZm9yIGVudHJvcHkgY29sbGVjdGlvbiB0YWtlcyBhIGxvdCBvZiB0aW1lLlxuICAvLyBTbywgdG8gYXZvaWQgYWRkaXRpb25hbCBzeXN0ZW0gY2FsbHMsIGV4dHJhIGJ5dGVzIGFyZSByZXF1ZXN0ZWQgaW4gYWR2YW5jZS5cblxuICAvLyBOZXh0LCBhIHN0ZXAgZGV0ZXJtaW5lcyBob3cgbWFueSByYW5kb20gYnl0ZXMgdG8gZ2VuZXJhdGUuXG4gIC8vIFRoZSBudW1iZXIgb2YgcmFuZG9tIGJ5dGVzIGdldHMgZGVjaWRlZCB1cG9uIHRoZSBJRCBzaXplLCBtYXNrLFxuICAvLyBhbHBoYWJldCBzaXplLCBhbmQgbWFnaWMgbnVtYmVyIDEuNiAodXNpbmcgMS42IHBlYWtzIGF0IHBlcmZvcm1hbmNlXG4gIC8vIGFjY29yZGluZyB0byBiZW5jaG1hcmtzKS5cblxuICAvLyBgLX5mID0+IE1hdGguY2VpbChmKWAgaWYgZiBpcyBhIGZsb2F0XG4gIC8vIGAtfmkgPT4gaSArIDFgIGlmIGkgaXMgYW4gaW50ZWdlclxuICBsZXQgc3RlcCA9IC1+KCgxLjYgKiBtYXNrICogc2l6ZSkgLyBhbHBoYWJldC5sZW5ndGgpXG5cbiAgcmV0dXJuICgpID0+IHtcbiAgICBsZXQgaWQgPSAnJ1xuICAgIHdoaWxlICh0cnVlKSB7XG4gICAgICBsZXQgYnl0ZXMgPSBnZXRSYW5kb20oc3RlcClcbiAgICAgIC8vIEEgY29tcGFjdCBhbHRlcm5hdGl2ZSBmb3IgYGZvciAodmFyIGkgPSAwOyBpIDwgc3RlcDsgaSsrKWAuXG4gICAgICBsZXQgaiA9IHN0ZXBcbiAgICAgIHdoaWxlIChqLS0pIHtcbiAgICAgICAgLy8gQWRkaW5nIGB8fCAnJ2AgcmVmdXNlcyBhIHJhbmRvbSBieXRlIHRoYXQgZXhjZWVkcyB0aGUgYWxwaGFiZXQgc2l6ZS5cbiAgICAgICAgaWQgKz0gYWxwaGFiZXRbYnl0ZXNbal0gJiBtYXNrXSB8fCAnJ1xuICAgICAgICAvLyBgaWQubGVuZ3RoICsgMSA9PT0gc2l6ZWAgaXMgYSBtb3JlIGNvbXBhY3Qgb3B0aW9uLlxuICAgICAgICBpZiAoaWQubGVuZ3RoID09PSArc2l6ZSkgcmV0dXJuIGlkXG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbmxldCBjdXN0b21BbHBoYWJldCA9IChhbHBoYWJldCwgc2l6ZSkgPT4gY3VzdG9tUmFuZG9tKGFscGhhYmV0LCBzaXplLCByYW5kb20pXG5cbmxldCBuYW5vaWQgPSAoc2l6ZSA9IDIxKSA9PiB7XG4gIGxldCBpZCA9ICcnXG4gIGxldCBieXRlcyA9IGNyeXB0by5nZXRSYW5kb21WYWx1ZXMobmV3IFVpbnQ4QXJyYXkoc2l6ZSkpXG5cbiAgLy8gQSBjb21wYWN0IGFsdGVybmF0aXZlIGZvciBgZm9yICh2YXIgaSA9IDA7IGkgPCBzdGVwOyBpKyspYC5cbiAgd2hpbGUgKHNpemUtLSkge1xuICAgIC8vIEl0IGlzIGluY29ycmVjdCB0byB1c2UgYnl0ZXMgZXhjZWVkaW5nIHRoZSBhbHBoYWJldCBzaXplLlxuICAgIC8vIFRoZSBmb2xsb3dpbmcgbWFzayByZWR1Y2VzIHRoZSByYW5kb20gYnl0ZSBpbiB0aGUgMC0yNTUgdmFsdWVcbiAgICAvLyByYW5nZSB0byB0aGUgMC02MyB2YWx1ZSByYW5nZS4gVGhlcmVmb3JlLCBhZGRpbmcgaGFja3MsIHN1Y2hcbiAgICAvLyBhcyBlbXB0eSBzdHJpbmcgZmFsbGJhY2sgb3IgbWFnaWMgbnVtYmVycywgaXMgdW5uZWNjZXNzYXJ5IGJlY2F1c2VcbiAgICAvLyB0aGUgYml0bWFzayB0cmltcyBieXRlcyBkb3duIHRvIHRoZSBhbHBoYWJldCBzaXplLlxuICAgIGxldCBieXRlID0gYnl0ZXNbc2l6ZV0gJiA2M1xuICAgIGlmIChieXRlIDwgMzYpIHtcbiAgICAgIC8vIGAwLTlhLXpgXG4gICAgICBpZCArPSBieXRlLnRvU3RyaW5nKDM2KVxuICAgIH0gZWxzZSBpZiAoYnl0ZSA8IDYyKSB7XG4gICAgICAvLyBgQS1aYFxuICAgICAgaWQgKz0gKGJ5dGUgLSAyNikudG9TdHJpbmcoMzYpLnRvVXBwZXJDYXNlKClcbiAgICB9IGVsc2UgaWYgKGJ5dGUgPCA2Mykge1xuICAgICAgaWQgKz0gJ18nXG4gICAgfSBlbHNlIHtcbiAgICAgIGlkICs9ICctJ1xuICAgIH1cbiAgfVxuICByZXR1cm4gaWRcbn1cblxuZXhwb3J0IHsgbmFub2lkLCBjdXN0b21BbHBoYWJldCwgY3VzdG9tUmFuZG9tLCB1cmxBbHBoYWJldCwgcmFuZG9tIH1cbiIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNcIjtcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgY2xzeCBmcm9tICdjbHN4JztcbmltcG9ydCBUeXBvZ3JhcGh5IGZyb20gJy4uL1R5cG9ncmFwaHknO1xuaW1wb3J0IHdpdGhTdHlsZXMgZnJvbSAnLi4vc3R5bGVzL3dpdGhTdHlsZXMnO1xuaW1wb3J0IEZvcm1Db250cm9sQ29udGV4dCwgeyB1c2VGb3JtQ29udHJvbCB9IGZyb20gJy4uL0Zvcm1Db250cm9sL0Zvcm1Db250cm9sQ29udGV4dCc7XG5leHBvcnQgdmFyIHN0eWxlcyA9IHtcbiAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudC4gKi9cbiAgcm9vdDoge1xuICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICBoZWlnaHQ6ICcwLjAxZW0nLFxuICAgIC8vIEZpeCBJRSAxMSBmbGV4Ym94IGFsaWdubWVudC4gVG8gcmVtb3ZlIGF0IHNvbWUgcG9pbnQuXG4gICAgbWF4SGVpZ2h0OiAnMmVtJyxcbiAgICBhbGlnbkl0ZW1zOiAnY2VudGVyJyxcbiAgICB3aGl0ZVNwYWNlOiAnbm93cmFwJ1xuICB9LFxuXG4gIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYHZhcmlhbnQ9XCJmaWxsZWRcImAuICovXG4gIGZpbGxlZDoge1xuICAgICcmJHBvc2l0aW9uU3RhcnQ6bm90KCRoaWRkZW5MYWJlbCknOiB7XG4gICAgICBtYXJnaW5Ub3A6IDE2XG4gICAgfVxuICB9LFxuXG4gIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYHBvc2l0aW9uPVwic3RhcnRcImAuICovXG4gIHBvc2l0aW9uU3RhcnQ6IHtcbiAgICBtYXJnaW5SaWdodDogOFxuICB9LFxuXG4gIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYHBvc2l0aW9uPVwiZW5kXCJgLiAqL1xuICBwb3NpdGlvbkVuZDoge1xuICAgIG1hcmdpbkxlZnQ6IDhcbiAgfSxcblxuICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBkaXNhYmxlUG9pbnRlckV2ZW50cz10cnVlYC4gKi9cbiAgZGlzYWJsZVBvaW50ZXJFdmVudHM6IHtcbiAgICBwb2ludGVyRXZlbnRzOiAnbm9uZSdcbiAgfSxcblxuICAvKiBTdHlsZXMgYXBwbGllZCBpZiB0aGUgYWRvcm5tZW50IGlzIHVzZWQgaW5zaWRlIDxGb3JtQ29udHJvbCBoaWRkZW5MYWJlbCAvPi4gKi9cbiAgaGlkZGVuTGFiZWw6IHt9LFxuXG4gIC8qIFN0eWxlcyBhcHBsaWVkIGlmIHRoZSBhZG9ybm1lbnQgaXMgdXNlZCBpbnNpZGUgPEZvcm1Db250cm9sIG1hcmdpbj1cImRlbnNlXCIgLz4uICovXG4gIG1hcmdpbkRlbnNlOiB7fVxufTtcbnZhciBJbnB1dEFkb3JubWVudCA9IC8qI19fUFVSRV9fKi9SZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIElucHV0QWRvcm5tZW50KHByb3BzLCByZWYpIHtcbiAgdmFyIGNoaWxkcmVuID0gcHJvcHMuY2hpbGRyZW4sXG4gICAgICBjbGFzc2VzID0gcHJvcHMuY2xhc3NlcyxcbiAgICAgIGNsYXNzTmFtZSA9IHByb3BzLmNsYXNzTmFtZSxcbiAgICAgIF9wcm9wcyRjb21wb25lbnQgPSBwcm9wcy5jb21wb25lbnQsXG4gICAgICBDb21wb25lbnQgPSBfcHJvcHMkY29tcG9uZW50ID09PSB2b2lkIDAgPyAnZGl2JyA6IF9wcm9wcyRjb21wb25lbnQsXG4gICAgICBfcHJvcHMkZGlzYWJsZVBvaW50ZXIgPSBwcm9wcy5kaXNhYmxlUG9pbnRlckV2ZW50cyxcbiAgICAgIGRpc2FibGVQb2ludGVyRXZlbnRzID0gX3Byb3BzJGRpc2FibGVQb2ludGVyID09PSB2b2lkIDAgPyBmYWxzZSA6IF9wcm9wcyRkaXNhYmxlUG9pbnRlcixcbiAgICAgIF9wcm9wcyRkaXNhYmxlVHlwb2dyYSA9IHByb3BzLmRpc2FibGVUeXBvZ3JhcGh5LFxuICAgICAgZGlzYWJsZVR5cG9ncmFwaHkgPSBfcHJvcHMkZGlzYWJsZVR5cG9ncmEgPT09IHZvaWQgMCA/IGZhbHNlIDogX3Byb3BzJGRpc2FibGVUeXBvZ3JhLFxuICAgICAgcG9zaXRpb24gPSBwcm9wcy5wb3NpdGlvbixcbiAgICAgIHZhcmlhbnRQcm9wID0gcHJvcHMudmFyaWFudCxcbiAgICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKHByb3BzLCBbXCJjaGlsZHJlblwiLCBcImNsYXNzZXNcIiwgXCJjbGFzc05hbWVcIiwgXCJjb21wb25lbnRcIiwgXCJkaXNhYmxlUG9pbnRlckV2ZW50c1wiLCBcImRpc2FibGVUeXBvZ3JhcGh5XCIsIFwicG9zaXRpb25cIiwgXCJ2YXJpYW50XCJdKTtcblxuICB2YXIgbXVpRm9ybUNvbnRyb2wgPSB1c2VGb3JtQ29udHJvbCgpIHx8IHt9O1xuICB2YXIgdmFyaWFudCA9IHZhcmlhbnRQcm9wO1xuXG4gIGlmICh2YXJpYW50UHJvcCAmJiBtdWlGb3JtQ29udHJvbC52YXJpYW50KSB7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIGlmICh2YXJpYW50UHJvcCA9PT0gbXVpRm9ybUNvbnRyb2wudmFyaWFudCkge1xuICAgICAgICBjb25zb2xlLmVycm9yKCdNYXRlcmlhbC1VSTogVGhlIGBJbnB1dEFkb3JubWVudGAgdmFyaWFudCBpbmZlcnMgdGhlIHZhcmlhbnQgcHJvcCAnICsgJ3lvdSBkbyBub3QgaGF2ZSB0byBwcm92aWRlIG9uZS4nKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBpZiAobXVpRm9ybUNvbnRyb2wgJiYgIXZhcmlhbnQpIHtcbiAgICB2YXJpYW50ID0gbXVpRm9ybUNvbnRyb2wudmFyaWFudDtcbiAgfVxuXG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChGb3JtQ29udHJvbENvbnRleHQuUHJvdmlkZXIsIHtcbiAgICB2YWx1ZTogbnVsbFxuICB9LCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChDb21wb25lbnQsIF9leHRlbmRzKHtcbiAgICBjbGFzc05hbWU6IGNsc3goY2xhc3Nlcy5yb290LCBjbGFzc05hbWUsIGRpc2FibGVQb2ludGVyRXZlbnRzICYmIGNsYXNzZXMuZGlzYWJsZVBvaW50ZXJFdmVudHMsIG11aUZvcm1Db250cm9sLmhpZGRlbkxhYmVsICYmIGNsYXNzZXMuaGlkZGVuTGFiZWwsIHZhcmlhbnQgPT09ICdmaWxsZWQnICYmIGNsYXNzZXMuZmlsbGVkLCB7XG4gICAgICAnc3RhcnQnOiBjbGFzc2VzLnBvc2l0aW9uU3RhcnQsXG4gICAgICAnZW5kJzogY2xhc3Nlcy5wb3NpdGlvbkVuZFxuICAgIH1bcG9zaXRpb25dLCBtdWlGb3JtQ29udHJvbC5tYXJnaW4gPT09ICdkZW5zZScgJiYgY2xhc3Nlcy5tYXJnaW5EZW5zZSksXG4gICAgcmVmOiByZWZcbiAgfSwgb3RoZXIpLCB0eXBlb2YgY2hpbGRyZW4gPT09ICdzdHJpbmcnICYmICFkaXNhYmxlVHlwb2dyYXBoeSA/IC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFR5cG9ncmFwaHksIHtcbiAgICBjb2xvcjogXCJ0ZXh0U2Vjb25kYXJ5XCJcbiAgfSwgY2hpbGRyZW4pIDogY2hpbGRyZW4pKTtcbn0pO1xucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gSW5wdXRBZG9ybm1lbnQucHJvcFR5cGVzID0ge1xuICAvKipcbiAgICogVGhlIGNvbnRlbnQgb2YgdGhlIGNvbXBvbmVudCwgbm9ybWFsbHkgYW4gYEljb25CdXR0b25gIG9yIHN0cmluZy5cbiAgICovXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZS5pc1JlcXVpcmVkLFxuXG4gIC8qKlxuICAgKiBPdmVycmlkZSBvciBleHRlbmQgdGhlIHN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAqIFNlZSBbQ1NTIEFQSV0oI2NzcykgYmVsb3cgZm9yIG1vcmUgZGV0YWlscy5cbiAgICovXG4gIGNsYXNzZXM6IFByb3BUeXBlcy5vYmplY3QuaXNSZXF1aXJlZCxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBUaGUgY29tcG9uZW50IHVzZWQgZm9yIHRoZSByb290IG5vZGUuXG4gICAqIEVpdGhlciBhIHN0cmluZyB0byB1c2UgYSBIVE1MIGVsZW1lbnQgb3IgYSBjb21wb25lbnQuXG4gICAqL1xuICBjb21wb25lbnQ6IFByb3BUeXBlc1xuICAvKiBAdHlwZXNjcmlwdC10by1wcm9wdHlwZXMtaWdub3JlICovXG4gIC5lbGVtZW50VHlwZSxcblxuICAvKipcbiAgICogRGlzYWJsZSBwb2ludGVyIGV2ZW50cyBvbiB0aGUgcm9vdC5cbiAgICogVGhpcyBhbGxvd3MgZm9yIHRoZSBjb250ZW50IG9mIHRoZSBhZG9ybm1lbnQgdG8gZm9jdXMgdGhlIGlucHV0IG9uIGNsaWNrLlxuICAgKi9cbiAgZGlzYWJsZVBvaW50ZXJFdmVudHM6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBJZiBjaGlsZHJlbiBpcyBhIHN0cmluZyB0aGVuIGRpc2FibGUgd3JhcHBpbmcgaW4gYSBUeXBvZ3JhcGh5IGNvbXBvbmVudC5cbiAgICovXG4gIGRpc2FibGVUeXBvZ3JhcGh5OiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgbXVpRm9ybUNvbnRyb2w6IFByb3BUeXBlcy5vYmplY3QsXG5cbiAgLyoqXG4gICAqIFRoZSBwb3NpdGlvbiB0aGlzIGFkb3JubWVudCBzaG91bGQgYXBwZWFyIHJlbGF0aXZlIHRvIHRoZSBgSW5wdXRgLlxuICAgKi9cbiAgcG9zaXRpb246IFByb3BUeXBlcy5vbmVPZihbJ3N0YXJ0JywgJ2VuZCddKSxcblxuICAvKipcbiAgICogVGhlIHZhcmlhbnQgdG8gdXNlLlxuICAgKiBOb3RlOiBJZiB5b3UgYXJlIHVzaW5nIHRoZSBgVGV4dEZpZWxkYCBjb21wb25lbnQgb3IgdGhlIGBGb3JtQ29udHJvbGAgY29tcG9uZW50XG4gICAqIHlvdSBkbyBub3QgaGF2ZSB0byBzZXQgdGhpcyBtYW51YWxseS5cbiAgICovXG4gIHZhcmlhbnQ6IFByb3BUeXBlcy5vbmVPZihbJ3N0YW5kYXJkJywgJ291dGxpbmVkJywgJ2ZpbGxlZCddKVxufSA6IHZvaWQgMDtcbmV4cG9ydCBkZWZhdWx0IHdpdGhTdHlsZXMoc3R5bGVzLCB7XG4gIG5hbWU6ICdNdWlJbnB1dEFkb3JubWVudCdcbn0pKElucHV0QWRvcm5tZW50KTsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzXCI7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGNsc3ggZnJvbSAnY2xzeCc7XG5pbXBvcnQgeyBjaGFpblByb3BUeXBlcyB9IGZyb20gJ0BtYXRlcmlhbC11aS91dGlscyc7XG5pbXBvcnQgd2l0aFN0eWxlcyBmcm9tICcuLi9zdHlsZXMvd2l0aFN0eWxlcyc7XG5pbXBvcnQgQnV0dG9uQmFzZSBmcm9tICcuLi9CdXR0b25CYXNlJztcbmltcG9ydCBpc011aUVsZW1lbnQgZnJvbSAnLi4vdXRpbHMvaXNNdWlFbGVtZW50JztcbmltcG9ydCB1c2VGb3JrUmVmIGZyb20gJy4uL3V0aWxzL3VzZUZvcmtSZWYnO1xuaW1wb3J0IExpc3RDb250ZXh0IGZyb20gJy4uL0xpc3QvTGlzdENvbnRleHQnO1xuaW1wb3J0ICogYXMgUmVhY3RET00gZnJvbSAncmVhY3QtZG9tJztcbmV4cG9ydCB2YXIgc3R5bGVzID0gZnVuY3Rpb24gc3R5bGVzKHRoZW1lKSB7XG4gIHJldHVybiB7XG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIChub3JtYWxseSByb290KSBgY29tcG9uZW50YCBlbGVtZW50LiBNYXkgYmUgd3JhcHBlZCBieSBhIGBjb250YWluZXJgLiAqL1xuICAgIHJvb3Q6IHtcbiAgICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICAgIGp1c3RpZnlDb250ZW50OiAnZmxleC1zdGFydCcsXG4gICAgICBhbGlnbkl0ZW1zOiAnY2VudGVyJyxcbiAgICAgIHBvc2l0aW9uOiAncmVsYXRpdmUnLFxuICAgICAgdGV4dERlY29yYXRpb246ICdub25lJyxcbiAgICAgIHdpZHRoOiAnMTAwJScsXG4gICAgICBib3hTaXppbmc6ICdib3JkZXItYm94JyxcbiAgICAgIHRleHRBbGlnbjogJ2xlZnQnLFxuICAgICAgcGFkZGluZ1RvcDogOCxcbiAgICAgIHBhZGRpbmdCb3R0b206IDgsXG4gICAgICAnJiRmb2N1c1Zpc2libGUnOiB7XG4gICAgICAgIGJhY2tncm91bmRDb2xvcjogdGhlbWUucGFsZXR0ZS5hY3Rpb24uc2VsZWN0ZWRcbiAgICAgIH0sXG4gICAgICAnJiRzZWxlY3RlZCwgJiRzZWxlY3RlZDpob3Zlcic6IHtcbiAgICAgICAgYmFja2dyb3VuZENvbG9yOiB0aGVtZS5wYWxldHRlLmFjdGlvbi5zZWxlY3RlZFxuICAgICAgfSxcbiAgICAgICcmJGRpc2FibGVkJzoge1xuICAgICAgICBvcGFjaXR5OiAwLjVcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIGBjb250YWluZXJgIGVsZW1lbnQgaWYgYGNoaWxkcmVuYCBpbmNsdWRlcyBgTGlzdEl0ZW1TZWNvbmRhcnlBY3Rpb25gLiAqL1xuICAgIGNvbnRhaW5lcjoge1xuICAgICAgcG9zaXRpb246ICdyZWxhdGl2ZSdcbiAgICB9LFxuXG4gICAgLyogUHNldWRvLWNsYXNzIGFwcGxpZWQgdG8gdGhlIGBjb21wb25lbnRgJ3MgYGZvY3VzVmlzaWJsZUNsYXNzTmFtZWAgcHJvcCBpZiBgYnV0dG9uPXt0cnVlfWAuICovXG4gICAgZm9jdXNWaXNpYmxlOiB7fSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSBgY29tcG9uZW50YCBlbGVtZW50IGlmIGRlbnNlLiAqL1xuICAgIGRlbnNlOiB7XG4gICAgICBwYWRkaW5nVG9wOiA0LFxuICAgICAgcGFkZGluZ0JvdHRvbTogNFxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgYGNvbXBvbmVudGAgZWxlbWVudCBpZiBgYWxpZ25JdGVtcz1cImZsZXgtc3RhcnRcImAuICovXG4gICAgYWxpZ25JdGVtc0ZsZXhTdGFydDoge1xuICAgICAgYWxpZ25JdGVtczogJ2ZsZXgtc3RhcnQnXG4gICAgfSxcblxuICAgIC8qIFBzZXVkby1jbGFzcyBhcHBsaWVkIHRvIHRoZSBpbm5lciBgY29tcG9uZW50YCBlbGVtZW50IGlmIGBkaXNhYmxlZD17dHJ1ZX1gLiAqL1xuICAgIGRpc2FibGVkOiB7fSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSBpbm5lciBgY29tcG9uZW50YCBlbGVtZW50IGlmIGBkaXZpZGVyPXt0cnVlfWAuICovXG4gICAgZGl2aWRlcjoge1xuICAgICAgYm9yZGVyQm90dG9tOiBcIjFweCBzb2xpZCBcIi5jb25jYXQodGhlbWUucGFsZXR0ZS5kaXZpZGVyKSxcbiAgICAgIGJhY2tncm91bmRDbGlwOiAncGFkZGluZy1ib3gnXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSBpbm5lciBgY29tcG9uZW50YCBlbGVtZW50IGlmIGBkaXNhYmxlR3V0dGVycz17ZmFsc2V9YC4gKi9cbiAgICBndXR0ZXJzOiB7XG4gICAgICBwYWRkaW5nTGVmdDogMTYsXG4gICAgICBwYWRkaW5nUmlnaHQ6IDE2XG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSBpbm5lciBgY29tcG9uZW50YCBlbGVtZW50IGlmIGBidXR0b249e3RydWV9YC4gKi9cbiAgICBidXR0b246IHtcbiAgICAgIHRyYW5zaXRpb246IHRoZW1lLnRyYW5zaXRpb25zLmNyZWF0ZSgnYmFja2dyb3VuZC1jb2xvcicsIHtcbiAgICAgICAgZHVyYXRpb246IHRoZW1lLnRyYW5zaXRpb25zLmR1cmF0aW9uLnNob3J0ZXN0XG4gICAgICB9KSxcbiAgICAgICcmOmhvdmVyJzoge1xuICAgICAgICB0ZXh0RGVjb3JhdGlvbjogJ25vbmUnLFxuICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IHRoZW1lLnBhbGV0dGUuYWN0aW9uLmhvdmVyLFxuICAgICAgICAvLyBSZXNldCBvbiB0b3VjaCBkZXZpY2VzLCBpdCBkb2Vzbid0IGFkZCBzcGVjaWZpY2l0eVxuICAgICAgICAnQG1lZGlhIChob3Zlcjogbm9uZSknOiB7XG4gICAgICAgICAgYmFja2dyb3VuZENvbG9yOiAndHJhbnNwYXJlbnQnXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIGBjb21wb25lbnRgIGVsZW1lbnQgaWYgYGNoaWxkcmVuYCBpbmNsdWRlcyBgTGlzdEl0ZW1TZWNvbmRhcnlBY3Rpb25gLiAqL1xuICAgIHNlY29uZGFyeUFjdGlvbjoge1xuICAgICAgLy8gQWRkIHNvbWUgc3BhY2UgdG8gYXZvaWQgY29sbGlzaW9uIGFzIGBMaXN0SXRlbVNlY29uZGFyeUFjdGlvbmBcbiAgICAgIC8vIGlzIGFic29sdXRlbHkgcG9zaXRpb25lZC5cbiAgICAgIHBhZGRpbmdSaWdodDogNDhcbiAgICB9LFxuXG4gICAgLyogUHNldWRvLWNsYXNzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgc2VsZWN0ZWQ9e3RydWV9YC4gKi9cbiAgICBzZWxlY3RlZDoge31cbiAgfTtcbn07XG52YXIgdXNlRW5oYW5jZWRFZmZlY3QgPSB0eXBlb2Ygd2luZG93ID09PSAndW5kZWZpbmVkJyA/IFJlYWN0LnVzZUVmZmVjdCA6IFJlYWN0LnVzZUxheW91dEVmZmVjdDtcbi8qKlxuICogVXNlcyBhbiBhZGRpdGlvbmFsIGNvbnRhaW5lciBjb21wb25lbnQgaWYgYExpc3RJdGVtU2Vjb25kYXJ5QWN0aW9uYCBpcyB0aGUgbGFzdCBjaGlsZC5cbiAqL1xuXG52YXIgTGlzdEl0ZW0gPSAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBMaXN0SXRlbShwcm9wcywgcmVmKSB7XG4gIHZhciBfcHJvcHMkYWxpZ25JdGVtcyA9IHByb3BzLmFsaWduSXRlbXMsXG4gICAgICBhbGlnbkl0ZW1zID0gX3Byb3BzJGFsaWduSXRlbXMgPT09IHZvaWQgMCA/ICdjZW50ZXInIDogX3Byb3BzJGFsaWduSXRlbXMsXG4gICAgICBfcHJvcHMkYXV0b0ZvY3VzID0gcHJvcHMuYXV0b0ZvY3VzLFxuICAgICAgYXV0b0ZvY3VzID0gX3Byb3BzJGF1dG9Gb2N1cyA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcHJvcHMkYXV0b0ZvY3VzLFxuICAgICAgX3Byb3BzJGJ1dHRvbiA9IHByb3BzLmJ1dHRvbixcbiAgICAgIGJ1dHRvbiA9IF9wcm9wcyRidXR0b24gPT09IHZvaWQgMCA/IGZhbHNlIDogX3Byb3BzJGJ1dHRvbixcbiAgICAgIGNoaWxkcmVuUHJvcCA9IHByb3BzLmNoaWxkcmVuLFxuICAgICAgY2xhc3NlcyA9IHByb3BzLmNsYXNzZXMsXG4gICAgICBjbGFzc05hbWUgPSBwcm9wcy5jbGFzc05hbWUsXG4gICAgICBjb21wb25lbnRQcm9wID0gcHJvcHMuY29tcG9uZW50LFxuICAgICAgX3Byb3BzJENvbnRhaW5lckNvbXBvID0gcHJvcHMuQ29udGFpbmVyQ29tcG9uZW50LFxuICAgICAgQ29udGFpbmVyQ29tcG9uZW50ID0gX3Byb3BzJENvbnRhaW5lckNvbXBvID09PSB2b2lkIDAgPyAnbGknIDogX3Byb3BzJENvbnRhaW5lckNvbXBvLFxuICAgICAgX3Byb3BzJENvbnRhaW5lclByb3BzID0gcHJvcHMuQ29udGFpbmVyUHJvcHM7XG4gIF9wcm9wcyRDb250YWluZXJQcm9wcyA9IF9wcm9wcyRDb250YWluZXJQcm9wcyA9PT0gdm9pZCAwID8ge30gOiBfcHJvcHMkQ29udGFpbmVyUHJvcHM7XG5cbiAgdmFyIENvbnRhaW5lckNsYXNzTmFtZSA9IF9wcm9wcyRDb250YWluZXJQcm9wcy5jbGFzc05hbWUsXG4gICAgICBDb250YWluZXJQcm9wcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhfcHJvcHMkQ29udGFpbmVyUHJvcHMsIFtcImNsYXNzTmFtZVwiXSksXG4gICAgICBfcHJvcHMkZGVuc2UgPSBwcm9wcy5kZW5zZSxcbiAgICAgIGRlbnNlID0gX3Byb3BzJGRlbnNlID09PSB2b2lkIDAgPyBmYWxzZSA6IF9wcm9wcyRkZW5zZSxcbiAgICAgIF9wcm9wcyRkaXNhYmxlZCA9IHByb3BzLmRpc2FibGVkLFxuICAgICAgZGlzYWJsZWQgPSBfcHJvcHMkZGlzYWJsZWQgPT09IHZvaWQgMCA/IGZhbHNlIDogX3Byb3BzJGRpc2FibGVkLFxuICAgICAgX3Byb3BzJGRpc2FibGVHdXR0ZXJzID0gcHJvcHMuZGlzYWJsZUd1dHRlcnMsXG4gICAgICBkaXNhYmxlR3V0dGVycyA9IF9wcm9wcyRkaXNhYmxlR3V0dGVycyA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcHJvcHMkZGlzYWJsZUd1dHRlcnMsXG4gICAgICBfcHJvcHMkZGl2aWRlciA9IHByb3BzLmRpdmlkZXIsXG4gICAgICBkaXZpZGVyID0gX3Byb3BzJGRpdmlkZXIgPT09IHZvaWQgMCA/IGZhbHNlIDogX3Byb3BzJGRpdmlkZXIsXG4gICAgICBmb2N1c1Zpc2libGVDbGFzc05hbWUgPSBwcm9wcy5mb2N1c1Zpc2libGVDbGFzc05hbWUsXG4gICAgICBfcHJvcHMkc2VsZWN0ZWQgPSBwcm9wcy5zZWxlY3RlZCxcbiAgICAgIHNlbGVjdGVkID0gX3Byb3BzJHNlbGVjdGVkID09PSB2b2lkIDAgPyBmYWxzZSA6IF9wcm9wcyRzZWxlY3RlZCxcbiAgICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKHByb3BzLCBbXCJhbGlnbkl0ZW1zXCIsIFwiYXV0b0ZvY3VzXCIsIFwiYnV0dG9uXCIsIFwiY2hpbGRyZW5cIiwgXCJjbGFzc2VzXCIsIFwiY2xhc3NOYW1lXCIsIFwiY29tcG9uZW50XCIsIFwiQ29udGFpbmVyQ29tcG9uZW50XCIsIFwiQ29udGFpbmVyUHJvcHNcIiwgXCJkZW5zZVwiLCBcImRpc2FibGVkXCIsIFwiZGlzYWJsZUd1dHRlcnNcIiwgXCJkaXZpZGVyXCIsIFwiZm9jdXNWaXNpYmxlQ2xhc3NOYW1lXCIsIFwic2VsZWN0ZWRcIl0pO1xuXG4gIHZhciBjb250ZXh0ID0gUmVhY3QudXNlQ29udGV4dChMaXN0Q29udGV4dCk7XG4gIHZhciBjaGlsZENvbnRleHQgPSB7XG4gICAgZGVuc2U6IGRlbnNlIHx8IGNvbnRleHQuZGVuc2UgfHwgZmFsc2UsXG4gICAgYWxpZ25JdGVtczogYWxpZ25JdGVtc1xuICB9O1xuICB2YXIgbGlzdEl0ZW1SZWYgPSBSZWFjdC51c2VSZWYobnVsbCk7XG4gIHVzZUVuaGFuY2VkRWZmZWN0KGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoYXV0b0ZvY3VzKSB7XG4gICAgICBpZiAobGlzdEl0ZW1SZWYuY3VycmVudCkge1xuICAgICAgICBsaXN0SXRlbVJlZi5jdXJyZW50LmZvY3VzKCk7XG4gICAgICB9IGVsc2UgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcignTWF0ZXJpYWwtVUk6IFVuYWJsZSB0byBzZXQgZm9jdXMgdG8gYSBMaXN0SXRlbSB3aG9zZSBjb21wb25lbnQgaGFzIG5vdCBiZWVuIHJlbmRlcmVkLicpO1xuICAgICAgfVxuICAgIH1cbiAgfSwgW2F1dG9Gb2N1c10pO1xuICB2YXIgY2hpbGRyZW4gPSBSZWFjdC5DaGlsZHJlbi50b0FycmF5KGNoaWxkcmVuUHJvcCk7XG4gIHZhciBoYXNTZWNvbmRhcnlBY3Rpb24gPSBjaGlsZHJlbi5sZW5ndGggJiYgaXNNdWlFbGVtZW50KGNoaWxkcmVuW2NoaWxkcmVuLmxlbmd0aCAtIDFdLCBbJ0xpc3RJdGVtU2Vjb25kYXJ5QWN0aW9uJ10pO1xuICB2YXIgaGFuZGxlT3duUmVmID0gUmVhY3QudXNlQ2FsbGJhY2soZnVuY3Rpb24gKGluc3RhbmNlKSB7XG4gICAgLy8gI1N0cmljdE1vZGUgcmVhZHlcbiAgICBsaXN0SXRlbVJlZi5jdXJyZW50ID0gUmVhY3RET00uZmluZERPTU5vZGUoaW5zdGFuY2UpO1xuICB9LCBbXSk7XG4gIHZhciBoYW5kbGVSZWYgPSB1c2VGb3JrUmVmKGhhbmRsZU93blJlZiwgcmVmKTtcblxuICB2YXIgY29tcG9uZW50UHJvcHMgPSBfZXh0ZW5kcyh7XG4gICAgY2xhc3NOYW1lOiBjbHN4KGNsYXNzZXMucm9vdCwgY2xhc3NOYW1lLCBjaGlsZENvbnRleHQuZGVuc2UgJiYgY2xhc3Nlcy5kZW5zZSwgIWRpc2FibGVHdXR0ZXJzICYmIGNsYXNzZXMuZ3V0dGVycywgZGl2aWRlciAmJiBjbGFzc2VzLmRpdmlkZXIsIGRpc2FibGVkICYmIGNsYXNzZXMuZGlzYWJsZWQsIGJ1dHRvbiAmJiBjbGFzc2VzLmJ1dHRvbiwgYWxpZ25JdGVtcyAhPT0gXCJjZW50ZXJcIiAmJiBjbGFzc2VzLmFsaWduSXRlbXNGbGV4U3RhcnQsIGhhc1NlY29uZGFyeUFjdGlvbiAmJiBjbGFzc2VzLnNlY29uZGFyeUFjdGlvbiwgc2VsZWN0ZWQgJiYgY2xhc3Nlcy5zZWxlY3RlZCksXG4gICAgZGlzYWJsZWQ6IGRpc2FibGVkXG4gIH0sIG90aGVyKTtcblxuICB2YXIgQ29tcG9uZW50ID0gY29tcG9uZW50UHJvcCB8fCAnbGknO1xuXG4gIGlmIChidXR0b24pIHtcbiAgICBjb21wb25lbnRQcm9wcy5jb21wb25lbnQgPSBjb21wb25lbnRQcm9wIHx8ICdkaXYnO1xuICAgIGNvbXBvbmVudFByb3BzLmZvY3VzVmlzaWJsZUNsYXNzTmFtZSA9IGNsc3goY2xhc3Nlcy5mb2N1c1Zpc2libGUsIGZvY3VzVmlzaWJsZUNsYXNzTmFtZSk7XG4gICAgQ29tcG9uZW50ID0gQnV0dG9uQmFzZTtcbiAgfVxuXG4gIGlmIChoYXNTZWNvbmRhcnlBY3Rpb24pIHtcbiAgICAvLyBVc2UgZGl2IGJ5IGRlZmF1bHQuXG4gICAgQ29tcG9uZW50ID0gIWNvbXBvbmVudFByb3BzLmNvbXBvbmVudCAmJiAhY29tcG9uZW50UHJvcCA/ICdkaXYnIDogQ29tcG9uZW50OyAvLyBBdm9pZCBuZXN0aW5nIG9mIGxpID4gbGkuXG5cbiAgICBpZiAoQ29udGFpbmVyQ29tcG9uZW50ID09PSAnbGknKSB7XG4gICAgICBpZiAoQ29tcG9uZW50ID09PSAnbGknKSB7XG4gICAgICAgIENvbXBvbmVudCA9ICdkaXYnO1xuICAgICAgfSBlbHNlIGlmIChjb21wb25lbnRQcm9wcy5jb21wb25lbnQgPT09ICdsaScpIHtcbiAgICAgICAgY29tcG9uZW50UHJvcHMuY29tcG9uZW50ID0gJ2Rpdic7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KExpc3RDb250ZXh0LlByb3ZpZGVyLCB7XG4gICAgICB2YWx1ZTogY2hpbGRDb250ZXh0XG4gICAgfSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoQ29udGFpbmVyQ29tcG9uZW50LCBfZXh0ZW5kcyh7XG4gICAgICBjbGFzc05hbWU6IGNsc3goY2xhc3Nlcy5jb250YWluZXIsIENvbnRhaW5lckNsYXNzTmFtZSksXG4gICAgICByZWY6IGhhbmRsZVJlZlxuICAgIH0sIENvbnRhaW5lclByb3BzKSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoQ29tcG9uZW50LCBjb21wb25lbnRQcm9wcywgY2hpbGRyZW4pLCBjaGlsZHJlbi5wb3AoKSkpO1xuICB9XG5cbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KExpc3RDb250ZXh0LlByb3ZpZGVyLCB7XG4gICAgdmFsdWU6IGNoaWxkQ29udGV4dFxuICB9LCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChDb21wb25lbnQsIF9leHRlbmRzKHtcbiAgICByZWY6IGhhbmRsZVJlZlxuICB9LCBjb21wb25lbnRQcm9wcyksIGNoaWxkcmVuKSk7XG59KTtcbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IExpc3RJdGVtLnByb3BUeXBlcyA9IHtcbiAgLyoqXG4gICAqIERlZmluZXMgdGhlIGBhbGlnbi1pdGVtc2Agc3R5bGUgcHJvcGVydHkuXG4gICAqL1xuICBhbGlnbkl0ZW1zOiBQcm9wVHlwZXMub25lT2YoWydmbGV4LXN0YXJ0JywgJ2NlbnRlciddKSxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgbGlzdCBpdGVtIHdpbGwgYmUgZm9jdXNlZCBkdXJpbmcgdGhlIGZpcnN0IG1vdW50LlxuICAgKiBGb2N1cyB3aWxsIGFsc28gYmUgdHJpZ2dlcmVkIGlmIHRoZSB2YWx1ZSBjaGFuZ2VzIGZyb20gZmFsc2UgdG8gdHJ1ZS5cbiAgICovXG4gIGF1dG9Gb2N1czogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGxpc3QgaXRlbSB3aWxsIGJlIGEgYnV0dG9uICh1c2luZyBgQnV0dG9uQmFzZWApLiBQcm9wcyBpbnRlbmRlZFxuICAgKiBmb3IgYEJ1dHRvbkJhc2VgIGNhbiB0aGVuIGJlIGFwcGxpZWQgdG8gYExpc3RJdGVtYC5cbiAgICovXG4gIGJ1dHRvbjogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIFRoZSBjb250ZW50IG9mIHRoZSBjb21wb25lbnQuIElmIGEgYExpc3RJdGVtU2Vjb25kYXJ5QWN0aW9uYCBpcyB1c2VkIGl0IG11c3RcbiAgICogYmUgdGhlIGxhc3QgY2hpbGQuXG4gICAqL1xuICBjaGlsZHJlbjogY2hhaW5Qcm9wVHlwZXMoUHJvcFR5cGVzLm5vZGUsIGZ1bmN0aW9uIChwcm9wcykge1xuICAgIHZhciBjaGlsZHJlbiA9IFJlYWN0LkNoaWxkcmVuLnRvQXJyYXkocHJvcHMuY2hpbGRyZW4pOyAvLyBSZWFjdC5DaGlsZHJlbi50b0FycmF5KHByb3BzLmNoaWxkcmVuKS5maW5kTGFzdEluZGV4KGlzTGlzdEl0ZW1TZWNvbmRhcnlBY3Rpb24pXG5cbiAgICB2YXIgc2Vjb25kYXJ5QWN0aW9uSW5kZXggPSAtMTtcblxuICAgIGZvciAodmFyIGkgPSBjaGlsZHJlbi5sZW5ndGggLSAxOyBpID49IDA7IGkgLT0gMSkge1xuICAgICAgdmFyIGNoaWxkID0gY2hpbGRyZW5baV07XG5cbiAgICAgIGlmIChpc011aUVsZW1lbnQoY2hpbGQsIFsnTGlzdEl0ZW1TZWNvbmRhcnlBY3Rpb24nXSkpIHtcbiAgICAgICAgc2Vjb25kYXJ5QWN0aW9uSW5kZXggPSBpO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9IC8vICBpcyBMaXN0SXRlbVNlY29uZGFyeUFjdGlvbiB0aGUgbGFzdCBjaGlsZCBvZiBMaXN0SXRlbVxuXG5cbiAgICBpZiAoc2Vjb25kYXJ5QWN0aW9uSW5kZXggIT09IC0xICYmIHNlY29uZGFyeUFjdGlvbkluZGV4ICE9PSBjaGlsZHJlbi5sZW5ndGggLSAxKSB7XG4gICAgICByZXR1cm4gbmV3IEVycm9yKCdNYXRlcmlhbC1VSTogWW91IHVzZWQgYW4gZWxlbWVudCBhZnRlciBMaXN0SXRlbVNlY29uZGFyeUFjdGlvbi4gJyArICdGb3IgTGlzdEl0ZW0gdG8gZGV0ZWN0IHRoYXQgaXQgaGFzIGEgc2Vjb25kYXJ5IGFjdGlvbiAnICsgJ3lvdSBtdXN0IHBhc3MgaXQgYXMgdGhlIGxhc3QgY2hpbGQgdG8gTGlzdEl0ZW0uJyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIG51bGw7XG4gIH0pLFxuXG4gIC8qKlxuICAgKiBPdmVycmlkZSBvciBleHRlbmQgdGhlIHN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAqIFNlZSBbQ1NTIEFQSV0oI2NzcykgYmVsb3cgZm9yIG1vcmUgZGV0YWlscy5cbiAgICovXG4gIGNsYXNzZXM6IFByb3BUeXBlcy5vYmplY3QuaXNSZXF1aXJlZCxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBUaGUgY29tcG9uZW50IHVzZWQgZm9yIHRoZSByb290IG5vZGUuXG4gICAqIEVpdGhlciBhIHN0cmluZyB0byB1c2UgYSBIVE1MIGVsZW1lbnQgb3IgYSBjb21wb25lbnQuXG4gICAqIEJ5IGRlZmF1bHQsIGl0J3MgYSBgbGlgIHdoZW4gYGJ1dHRvbmAgaXMgYGZhbHNlYCBhbmQgYSBgZGl2YCB3aGVuIGBidXR0b25gIGlzIGB0cnVlYC5cbiAgICovXG4gIGNvbXBvbmVudDogUHJvcFR5cGVzXG4gIC8qIEB0eXBlc2NyaXB0LXRvLXByb3B0eXBlcy1pZ25vcmUgKi9cbiAgLmVsZW1lbnRUeXBlLFxuXG4gIC8qKlxuICAgKiBUaGUgY29udGFpbmVyIGNvbXBvbmVudCB1c2VkIHdoZW4gYSBgTGlzdEl0ZW1TZWNvbmRhcnlBY3Rpb25gIGlzIHRoZSBsYXN0IGNoaWxkLlxuICAgKi9cbiAgQ29udGFpbmVyQ29tcG9uZW50OiBQcm9wVHlwZXMuZWxlbWVudFR5cGUsXG5cbiAgLyoqXG4gICAqIFByb3BzIGFwcGxpZWQgdG8gdGhlIGNvbnRhaW5lciBjb21wb25lbnQgaWYgdXNlZC5cbiAgICovXG4gIENvbnRhaW5lclByb3BzOiBQcm9wVHlwZXMub2JqZWN0LFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIGNvbXBhY3QgdmVydGljYWwgcGFkZGluZyBkZXNpZ25lZCBmb3Iga2V5Ym9hcmQgYW5kIG1vdXNlIGlucHV0IHdpbGwgYmUgdXNlZC5cbiAgICovXG4gIGRlbnNlOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgbGlzdCBpdGVtIHdpbGwgYmUgZGlzYWJsZWQuXG4gICAqL1xuICBkaXNhYmxlZDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGxlZnQgYW5kIHJpZ2h0IHBhZGRpbmcgaXMgcmVtb3ZlZC5cbiAgICovXG4gIGRpc2FibGVHdXR0ZXJzOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCBhIDFweCBsaWdodCBib3JkZXIgaXMgYWRkZWQgdG8gdGhlIGJvdHRvbSBvZiB0aGUgbGlzdCBpdGVtLlxuICAgKi9cbiAgZGl2aWRlcjogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGZvY3VzVmlzaWJsZUNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogVXNlIHRvIGFwcGx5IHNlbGVjdGVkIHN0eWxpbmcuXG4gICAqL1xuICBzZWxlY3RlZDogUHJvcFR5cGVzLmJvb2xcbn0gOiB2b2lkIDA7XG5leHBvcnQgZGVmYXVsdCB3aXRoU3R5bGVzKHN0eWxlcywge1xuICBuYW1lOiAnTXVpTGlzdEl0ZW0nXG59KShMaXN0SXRlbSk7IiwiaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNcIjtcbmltcG9ydCBfZGVmaW5lUHJvcGVydHkgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2RlZmluZVByb3BlcnR5XCI7XG5pbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgY2xzeCBmcm9tICdjbHN4JztcbmltcG9ydCB3aXRoU3R5bGVzIGZyb20gJy4uL3N0eWxlcy93aXRoU3R5bGVzJztcbmltcG9ydCBMaXN0SXRlbSBmcm9tICcuLi9MaXN0SXRlbSc7XG5leHBvcnQgdmFyIHN0eWxlcyA9IGZ1bmN0aW9uIHN0eWxlcyh0aGVtZSkge1xuICByZXR1cm4ge1xuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQuICovXG4gICAgcm9vdDogX2V4dGVuZHMoe30sIHRoZW1lLnR5cG9ncmFwaHkuYm9keTEsIF9kZWZpbmVQcm9wZXJ0eSh7XG4gICAgICBtaW5IZWlnaHQ6IDQ4LFxuICAgICAgcGFkZGluZ1RvcDogNixcbiAgICAgIHBhZGRpbmdCb3R0b206IDYsXG4gICAgICBib3hTaXppbmc6ICdib3JkZXItYm94JyxcbiAgICAgIHdpZHRoOiAnYXV0bycsXG4gICAgICBvdmVyZmxvdzogJ2hpZGRlbicsXG4gICAgICB3aGl0ZVNwYWNlOiAnbm93cmFwJ1xuICAgIH0sIHRoZW1lLmJyZWFrcG9pbnRzLnVwKCdzbScpLCB7XG4gICAgICBtaW5IZWlnaHQ6ICdhdXRvJ1xuICAgIH0pKSxcbiAgICAvLyBUT0RPIHY1OiByZW1vdmVcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGRpc2FibGVHdXR0ZXJzPXtmYWxzZX1gLiAqL1xuICAgIGd1dHRlcnM6IHt9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgc2VsZWN0ZWQ9e3RydWV9YC4gKi9cbiAgICBzZWxlY3RlZDoge30sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGRlbnNlLiAqL1xuICAgIGRlbnNlOiBfZXh0ZW5kcyh7fSwgdGhlbWUudHlwb2dyYXBoeS5ib2R5Miwge1xuICAgICAgbWluSGVpZ2h0OiAnYXV0bydcbiAgICB9KVxuICB9O1xufTtcbnZhciBNZW51SXRlbSA9IC8qI19fUFVSRV9fKi9SZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIE1lbnVJdGVtKHByb3BzLCByZWYpIHtcbiAgdmFyIGNsYXNzZXMgPSBwcm9wcy5jbGFzc2VzLFxuICAgICAgY2xhc3NOYW1lID0gcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgX3Byb3BzJGNvbXBvbmVudCA9IHByb3BzLmNvbXBvbmVudCxcbiAgICAgIGNvbXBvbmVudCA9IF9wcm9wcyRjb21wb25lbnQgPT09IHZvaWQgMCA/ICdsaScgOiBfcHJvcHMkY29tcG9uZW50LFxuICAgICAgX3Byb3BzJGRpc2FibGVHdXR0ZXJzID0gcHJvcHMuZGlzYWJsZUd1dHRlcnMsXG4gICAgICBkaXNhYmxlR3V0dGVycyA9IF9wcm9wcyRkaXNhYmxlR3V0dGVycyA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcHJvcHMkZGlzYWJsZUd1dHRlcnMsXG4gICAgICBMaXN0SXRlbUNsYXNzZXMgPSBwcm9wcy5MaXN0SXRlbUNsYXNzZXMsXG4gICAgICBfcHJvcHMkcm9sZSA9IHByb3BzLnJvbGUsXG4gICAgICByb2xlID0gX3Byb3BzJHJvbGUgPT09IHZvaWQgMCA/ICdtZW51aXRlbScgOiBfcHJvcHMkcm9sZSxcbiAgICAgIHNlbGVjdGVkID0gcHJvcHMuc2VsZWN0ZWQsXG4gICAgICB0YWJJbmRleFByb3AgPSBwcm9wcy50YWJJbmRleCxcbiAgICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKHByb3BzLCBbXCJjbGFzc2VzXCIsIFwiY2xhc3NOYW1lXCIsIFwiY29tcG9uZW50XCIsIFwiZGlzYWJsZUd1dHRlcnNcIiwgXCJMaXN0SXRlbUNsYXNzZXNcIiwgXCJyb2xlXCIsIFwic2VsZWN0ZWRcIiwgXCJ0YWJJbmRleFwiXSk7XG5cbiAgdmFyIHRhYkluZGV4O1xuXG4gIGlmICghcHJvcHMuZGlzYWJsZWQpIHtcbiAgICB0YWJJbmRleCA9IHRhYkluZGV4UHJvcCAhPT0gdW5kZWZpbmVkID8gdGFiSW5kZXhQcm9wIDogLTE7XG4gIH1cblxuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoTGlzdEl0ZW0sIF9leHRlbmRzKHtcbiAgICBidXR0b246IHRydWUsXG4gICAgcm9sZTogcm9sZSxcbiAgICB0YWJJbmRleDogdGFiSW5kZXgsXG4gICAgY29tcG9uZW50OiBjb21wb25lbnQsXG4gICAgc2VsZWN0ZWQ6IHNlbGVjdGVkLFxuICAgIGRpc2FibGVHdXR0ZXJzOiBkaXNhYmxlR3V0dGVycyxcbiAgICBjbGFzc2VzOiBfZXh0ZW5kcyh7XG4gICAgICBkZW5zZTogY2xhc3Nlcy5kZW5zZVxuICAgIH0sIExpc3RJdGVtQ2xhc3NlcyksXG4gICAgY2xhc3NOYW1lOiBjbHN4KGNsYXNzZXMucm9vdCwgY2xhc3NOYW1lLCBzZWxlY3RlZCAmJiBjbGFzc2VzLnNlbGVjdGVkLCAhZGlzYWJsZUd1dHRlcnMgJiYgY2xhc3Nlcy5ndXR0ZXJzKSxcbiAgICByZWY6IHJlZlxuICB9LCBvdGhlcikpO1xufSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBNZW51SXRlbS5wcm9wVHlwZXMgPSB7XG4gIC8qKlxuICAgKiBNZW51IGl0ZW0gY29udGVudHMuXG4gICAqL1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG5cbiAgLyoqXG4gICAqIE92ZXJyaWRlIG9yIGV4dGVuZCB0aGUgc3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICogU2VlIFtDU1MgQVBJXSgjY3NzKSBiZWxvdyBmb3IgbW9yZSBkZXRhaWxzLlxuICAgKi9cbiAgY2xhc3NlczogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIFRoZSBjb21wb25lbnQgdXNlZCBmb3IgdGhlIHJvb3Qgbm9kZS5cbiAgICogRWl0aGVyIGEgc3RyaW5nIHRvIHVzZSBhIEhUTUwgZWxlbWVudCBvciBhIGNvbXBvbmVudC5cbiAgICovXG4gIGNvbXBvbmVudDogUHJvcFR5cGVzXG4gIC8qIEB0eXBlc2NyaXB0LXRvLXByb3B0eXBlcy1pZ25vcmUgKi9cbiAgLmVsZW1lbnRUeXBlLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIGNvbXBhY3QgdmVydGljYWwgcGFkZGluZyBkZXNpZ25lZCBmb3Iga2V5Ym9hcmQgYW5kIG1vdXNlIGlucHV0IHdpbGwgYmUgdXNlZC5cbiAgICovXG4gIGRlbnNlOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgZGlzYWJsZWQ6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBsZWZ0IGFuZCByaWdodCBwYWRkaW5nIGlzIHJlbW92ZWQuXG4gICAqL1xuICBkaXNhYmxlR3V0dGVyczogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIGBjbGFzc2VzYCBwcm9wIGFwcGxpZWQgdG8gdGhlIFtgTGlzdEl0ZW1gXSgvYXBpL2xpc3QtaXRlbS8pIGVsZW1lbnQuXG4gICAqL1xuICBMaXN0SXRlbUNsYXNzZXM6IFByb3BUeXBlcy5vYmplY3QsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIHJvbGU6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIHNlbGVjdGVkOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgdGFiSW5kZXg6IFByb3BUeXBlcy5udW1iZXJcbn0gOiB2b2lkIDA7XG5leHBvcnQgZGVmYXVsdCB3aXRoU3R5bGVzKHN0eWxlcywge1xuICBuYW1lOiAnTXVpTWVudUl0ZW0nXG59KShNZW51SXRlbSk7IiwiaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNcIjtcbmltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBjbHN4IGZyb20gJ2Nsc3gnO1xuaW1wb3J0IHdpdGhTdHlsZXMgZnJvbSAnLi4vc3R5bGVzL3dpdGhTdHlsZXMnO1xuaW1wb3J0IHsgZmFkZSB9IGZyb20gJy4uL3N0eWxlcy9jb2xvck1hbmlwdWxhdG9yJztcbmltcG9ydCBCdXR0b25CYXNlIGZyb20gJy4uL0J1dHRvbkJhc2UnO1xuaW1wb3J0IGNhcGl0YWxpemUgZnJvbSAnLi4vdXRpbHMvY2FwaXRhbGl6ZSc7XG5leHBvcnQgdmFyIHN0eWxlcyA9IGZ1bmN0aW9uIHN0eWxlcyh0aGVtZSkge1xuICByZXR1cm4ge1xuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQuICovXG4gICAgcm9vdDogX2V4dGVuZHMoe30sIHRoZW1lLnR5cG9ncmFwaHkuYnV0dG9uLCB7XG4gICAgICBib3hTaXppbmc6ICdib3JkZXItYm94JyxcbiAgICAgIG1pbldpZHRoOiA2NCxcbiAgICAgIHBhZGRpbmc6ICc2cHggMTZweCcsXG4gICAgICBib3JkZXJSYWRpdXM6IHRoZW1lLnNoYXBlLmJvcmRlclJhZGl1cyxcbiAgICAgIGNvbG9yOiB0aGVtZS5wYWxldHRlLnRleHQucHJpbWFyeSxcbiAgICAgIHRyYW5zaXRpb246IHRoZW1lLnRyYW5zaXRpb25zLmNyZWF0ZShbJ2JhY2tncm91bmQtY29sb3InLCAnYm94LXNoYWRvdycsICdib3JkZXInXSwge1xuICAgICAgICBkdXJhdGlvbjogdGhlbWUudHJhbnNpdGlvbnMuZHVyYXRpb24uc2hvcnRcbiAgICAgIH0pLFxuICAgICAgJyY6aG92ZXInOiB7XG4gICAgICAgIHRleHREZWNvcmF0aW9uOiAnbm9uZScsXG4gICAgICAgIGJhY2tncm91bmRDb2xvcjogZmFkZSh0aGVtZS5wYWxldHRlLnRleHQucHJpbWFyeSwgdGhlbWUucGFsZXR0ZS5hY3Rpb24uaG92ZXJPcGFjaXR5KSxcbiAgICAgICAgLy8gUmVzZXQgb24gdG91Y2ggZGV2aWNlcywgaXQgZG9lc24ndCBhZGQgc3BlY2lmaWNpdHlcbiAgICAgICAgJ0BtZWRpYSAoaG92ZXI6IG5vbmUpJzoge1xuICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogJ3RyYW5zcGFyZW50J1xuICAgICAgICB9LFxuICAgICAgICAnJiRkaXNhYmxlZCc6IHtcbiAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6ICd0cmFuc3BhcmVudCdcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgICcmJGRpc2FibGVkJzoge1xuICAgICAgICBjb2xvcjogdGhlbWUucGFsZXR0ZS5hY3Rpb24uZGlzYWJsZWRcbiAgICAgIH1cbiAgICB9KSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSBzcGFuIGVsZW1lbnQgdGhhdCB3cmFwcyB0aGUgY2hpbGRyZW4uICovXG4gICAgbGFiZWw6IHtcbiAgICAgIHdpZHRoOiAnMTAwJScsXG4gICAgICAvLyBFbnN1cmUgdGhlIGNvcnJlY3Qgd2lkdGggZm9yIGlPUyBTYWZhcmlcbiAgICAgIGRpc3BsYXk6ICdpbmhlcml0JyxcbiAgICAgIGFsaWduSXRlbXM6ICdpbmhlcml0JyxcbiAgICAgIGp1c3RpZnlDb250ZW50OiAnaW5oZXJpdCdcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgdmFyaWFudD1cInRleHRcImAuICovXG4gICAgdGV4dDoge1xuICAgICAgcGFkZGluZzogJzZweCA4cHgnXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYHZhcmlhbnQ9XCJ0ZXh0XCJgIGFuZCBgY29sb3I9XCJwcmltYXJ5XCJgLiAqL1xuICAgIHRleHRQcmltYXJ5OiB7XG4gICAgICBjb2xvcjogdGhlbWUucGFsZXR0ZS5wcmltYXJ5Lm1haW4sXG4gICAgICAnJjpob3Zlcic6IHtcbiAgICAgICAgYmFja2dyb3VuZENvbG9yOiBmYWRlKHRoZW1lLnBhbGV0dGUucHJpbWFyeS5tYWluLCB0aGVtZS5wYWxldHRlLmFjdGlvbi5ob3Zlck9wYWNpdHkpLFxuICAgICAgICAvLyBSZXNldCBvbiB0b3VjaCBkZXZpY2VzLCBpdCBkb2Vzbid0IGFkZCBzcGVjaWZpY2l0eVxuICAgICAgICAnQG1lZGlhIChob3Zlcjogbm9uZSknOiB7XG4gICAgICAgICAgYmFja2dyb3VuZENvbG9yOiAndHJhbnNwYXJlbnQnXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgdmFyaWFudD1cInRleHRcImAgYW5kIGBjb2xvcj1cInNlY29uZGFyeVwiYC4gKi9cbiAgICB0ZXh0U2Vjb25kYXJ5OiB7XG4gICAgICBjb2xvcjogdGhlbWUucGFsZXR0ZS5zZWNvbmRhcnkubWFpbixcbiAgICAgICcmOmhvdmVyJzoge1xuICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IGZhZGUodGhlbWUucGFsZXR0ZS5zZWNvbmRhcnkubWFpbiwgdGhlbWUucGFsZXR0ZS5hY3Rpb24uaG92ZXJPcGFjaXR5KSxcbiAgICAgICAgLy8gUmVzZXQgb24gdG91Y2ggZGV2aWNlcywgaXQgZG9lc24ndCBhZGQgc3BlY2lmaWNpdHlcbiAgICAgICAgJ0BtZWRpYSAoaG92ZXI6IG5vbmUpJzoge1xuICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogJ3RyYW5zcGFyZW50J1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYHZhcmlhbnQ9XCJvdXRsaW5lZFwiYC4gKi9cbiAgICBvdXRsaW5lZDoge1xuICAgICAgcGFkZGluZzogJzVweCAxNXB4JyxcbiAgICAgIGJvcmRlcjogXCIxcHggc29saWQgXCIuY29uY2F0KHRoZW1lLnBhbGV0dGUudHlwZSA9PT0gJ2xpZ2h0JyA/ICdyZ2JhKDAsIDAsIDAsIDAuMjMpJyA6ICdyZ2JhKDI1NSwgMjU1LCAyNTUsIDAuMjMpJyksXG4gICAgICAnJiRkaXNhYmxlZCc6IHtcbiAgICAgICAgYm9yZGVyOiBcIjFweCBzb2xpZCBcIi5jb25jYXQodGhlbWUucGFsZXR0ZS5hY3Rpb24uZGlzYWJsZWRCYWNrZ3JvdW5kKVxuICAgICAgfVxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGB2YXJpYW50PVwib3V0bGluZWRcImAgYW5kIGBjb2xvcj1cInByaW1hcnlcImAuICovXG4gICAgb3V0bGluZWRQcmltYXJ5OiB7XG4gICAgICBjb2xvcjogdGhlbWUucGFsZXR0ZS5wcmltYXJ5Lm1haW4sXG4gICAgICBib3JkZXI6IFwiMXB4IHNvbGlkIFwiLmNvbmNhdChmYWRlKHRoZW1lLnBhbGV0dGUucHJpbWFyeS5tYWluLCAwLjUpKSxcbiAgICAgICcmOmhvdmVyJzoge1xuICAgICAgICBib3JkZXI6IFwiMXB4IHNvbGlkIFwiLmNvbmNhdCh0aGVtZS5wYWxldHRlLnByaW1hcnkubWFpbiksXG4gICAgICAgIGJhY2tncm91bmRDb2xvcjogZmFkZSh0aGVtZS5wYWxldHRlLnByaW1hcnkubWFpbiwgdGhlbWUucGFsZXR0ZS5hY3Rpb24uaG92ZXJPcGFjaXR5KSxcbiAgICAgICAgLy8gUmVzZXQgb24gdG91Y2ggZGV2aWNlcywgaXQgZG9lc24ndCBhZGQgc3BlY2lmaWNpdHlcbiAgICAgICAgJ0BtZWRpYSAoaG92ZXI6IG5vbmUpJzoge1xuICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogJ3RyYW5zcGFyZW50J1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYHZhcmlhbnQ9XCJvdXRsaW5lZFwiYCBhbmQgYGNvbG9yPVwic2Vjb25kYXJ5XCJgLiAqL1xuICAgIG91dGxpbmVkU2Vjb25kYXJ5OiB7XG4gICAgICBjb2xvcjogdGhlbWUucGFsZXR0ZS5zZWNvbmRhcnkubWFpbixcbiAgICAgIGJvcmRlcjogXCIxcHggc29saWQgXCIuY29uY2F0KGZhZGUodGhlbWUucGFsZXR0ZS5zZWNvbmRhcnkubWFpbiwgMC41KSksXG4gICAgICAnJjpob3Zlcic6IHtcbiAgICAgICAgYm9yZGVyOiBcIjFweCBzb2xpZCBcIi5jb25jYXQodGhlbWUucGFsZXR0ZS5zZWNvbmRhcnkubWFpbiksXG4gICAgICAgIGJhY2tncm91bmRDb2xvcjogZmFkZSh0aGVtZS5wYWxldHRlLnNlY29uZGFyeS5tYWluLCB0aGVtZS5wYWxldHRlLmFjdGlvbi5ob3Zlck9wYWNpdHkpLFxuICAgICAgICAvLyBSZXNldCBvbiB0b3VjaCBkZXZpY2VzLCBpdCBkb2Vzbid0IGFkZCBzcGVjaWZpY2l0eVxuICAgICAgICAnQG1lZGlhIChob3Zlcjogbm9uZSknOiB7XG4gICAgICAgICAgYmFja2dyb3VuZENvbG9yOiAndHJhbnNwYXJlbnQnXG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICAnJiRkaXNhYmxlZCc6IHtcbiAgICAgICAgYm9yZGVyOiBcIjFweCBzb2xpZCBcIi5jb25jYXQodGhlbWUucGFsZXR0ZS5hY3Rpb24uZGlzYWJsZWQpXG4gICAgICB9XG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYHZhcmlhbnQ9XCJjb250YWluZWRcImAuICovXG4gICAgY29udGFpbmVkOiB7XG4gICAgICBjb2xvcjogdGhlbWUucGFsZXR0ZS5nZXRDb250cmFzdFRleHQodGhlbWUucGFsZXR0ZS5ncmV5WzMwMF0pLFxuICAgICAgYmFja2dyb3VuZENvbG9yOiB0aGVtZS5wYWxldHRlLmdyZXlbMzAwXSxcbiAgICAgIGJveFNoYWRvdzogdGhlbWUuc2hhZG93c1syXSxcbiAgICAgICcmOmhvdmVyJzoge1xuICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IHRoZW1lLnBhbGV0dGUuZ3JleS5BMTAwLFxuICAgICAgICBib3hTaGFkb3c6IHRoZW1lLnNoYWRvd3NbNF0sXG4gICAgICAgIC8vIFJlc2V0IG9uIHRvdWNoIGRldmljZXMsIGl0IGRvZXNuJ3QgYWRkIHNwZWNpZmljaXR5XG4gICAgICAgICdAbWVkaWEgKGhvdmVyOiBub25lKSc6IHtcbiAgICAgICAgICBib3hTaGFkb3c6IHRoZW1lLnNoYWRvd3NbMl0sXG4gICAgICAgICAgYmFja2dyb3VuZENvbG9yOiB0aGVtZS5wYWxldHRlLmdyZXlbMzAwXVxuICAgICAgICB9LFxuICAgICAgICAnJiRkaXNhYmxlZCc6IHtcbiAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IHRoZW1lLnBhbGV0dGUuYWN0aW9uLmRpc2FibGVkQmFja2dyb3VuZFxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgJyYkZm9jdXNWaXNpYmxlJzoge1xuICAgICAgICBib3hTaGFkb3c6IHRoZW1lLnNoYWRvd3NbNl1cbiAgICAgIH0sXG4gICAgICAnJjphY3RpdmUnOiB7XG4gICAgICAgIGJveFNoYWRvdzogdGhlbWUuc2hhZG93c1s4XVxuICAgICAgfSxcbiAgICAgICcmJGRpc2FibGVkJzoge1xuICAgICAgICBjb2xvcjogdGhlbWUucGFsZXR0ZS5hY3Rpb24uZGlzYWJsZWQsXG4gICAgICAgIGJveFNoYWRvdzogdGhlbWUuc2hhZG93c1swXSxcbiAgICAgICAgYmFja2dyb3VuZENvbG9yOiB0aGVtZS5wYWxldHRlLmFjdGlvbi5kaXNhYmxlZEJhY2tncm91bmRcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgdmFyaWFudD1cImNvbnRhaW5lZFwiYCBhbmQgYGNvbG9yPVwicHJpbWFyeVwiYC4gKi9cbiAgICBjb250YWluZWRQcmltYXJ5OiB7XG4gICAgICBjb2xvcjogdGhlbWUucGFsZXR0ZS5wcmltYXJ5LmNvbnRyYXN0VGV4dCxcbiAgICAgIGJhY2tncm91bmRDb2xvcjogdGhlbWUucGFsZXR0ZS5wcmltYXJ5Lm1haW4sXG4gICAgICAnJjpob3Zlcic6IHtcbiAgICAgICAgYmFja2dyb3VuZENvbG9yOiB0aGVtZS5wYWxldHRlLnByaW1hcnkuZGFyayxcbiAgICAgICAgLy8gUmVzZXQgb24gdG91Y2ggZGV2aWNlcywgaXQgZG9lc24ndCBhZGQgc3BlY2lmaWNpdHlcbiAgICAgICAgJ0BtZWRpYSAoaG92ZXI6IG5vbmUpJzoge1xuICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogdGhlbWUucGFsZXR0ZS5wcmltYXJ5Lm1haW5cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGB2YXJpYW50PVwiY29udGFpbmVkXCJgIGFuZCBgY29sb3I9XCJzZWNvbmRhcnlcImAuICovXG4gICAgY29udGFpbmVkU2Vjb25kYXJ5OiB7XG4gICAgICBjb2xvcjogdGhlbWUucGFsZXR0ZS5zZWNvbmRhcnkuY29udHJhc3RUZXh0LFxuICAgICAgYmFja2dyb3VuZENvbG9yOiB0aGVtZS5wYWxldHRlLnNlY29uZGFyeS5tYWluLFxuICAgICAgJyY6aG92ZXInOiB7XG4gICAgICAgIGJhY2tncm91bmRDb2xvcjogdGhlbWUucGFsZXR0ZS5zZWNvbmRhcnkuZGFyayxcbiAgICAgICAgLy8gUmVzZXQgb24gdG91Y2ggZGV2aWNlcywgaXQgZG9lc24ndCBhZGQgc3BlY2lmaWNpdHlcbiAgICAgICAgJ0BtZWRpYSAoaG92ZXI6IG5vbmUpJzoge1xuICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogdGhlbWUucGFsZXR0ZS5zZWNvbmRhcnkubWFpblxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGRpc2FibGVFbGV2YXRpb249e3RydWV9YC4gKi9cbiAgICBkaXNhYmxlRWxldmF0aW9uOiB7XG4gICAgICBib3hTaGFkb3c6ICdub25lJyxcbiAgICAgICcmOmhvdmVyJzoge1xuICAgICAgICBib3hTaGFkb3c6ICdub25lJ1xuICAgICAgfSxcbiAgICAgICcmJGZvY3VzVmlzaWJsZSc6IHtcbiAgICAgICAgYm94U2hhZG93OiAnbm9uZSdcbiAgICAgIH0sXG4gICAgICAnJjphY3RpdmUnOiB7XG4gICAgICAgIGJveFNoYWRvdzogJ25vbmUnXG4gICAgICB9LFxuICAgICAgJyYkZGlzYWJsZWQnOiB7XG4gICAgICAgIGJveFNoYWRvdzogJ25vbmUnXG4gICAgICB9XG4gICAgfSxcblxuICAgIC8qIFBzZXVkby1jbGFzcyBhcHBsaWVkIHRvIHRoZSBCdXR0b25CYXNlIHJvb3QgZWxlbWVudCBpZiB0aGUgYnV0dG9uIGlzIGtleWJvYXJkIGZvY3VzZWQuICovXG4gICAgZm9jdXNWaXNpYmxlOiB7fSxcblxuICAgIC8qIFBzZXVkby1jbGFzcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGRpc2FibGVkPXt0cnVlfWAuICovXG4gICAgZGlzYWJsZWQ6IHt9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgY29sb3I9XCJpbmhlcml0XCJgLiAqL1xuICAgIGNvbG9ySW5oZXJpdDoge1xuICAgICAgY29sb3I6ICdpbmhlcml0JyxcbiAgICAgIGJvcmRlckNvbG9yOiAnY3VycmVudENvbG9yJ1xuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBzaXplPVwic21hbGxcImAgYW5kIGB2YXJpYW50PVwidGV4dFwiYC4gKi9cbiAgICB0ZXh0U2l6ZVNtYWxsOiB7XG4gICAgICBwYWRkaW5nOiAnNHB4IDVweCcsXG4gICAgICBmb250U2l6ZTogdGhlbWUudHlwb2dyYXBoeS5weFRvUmVtKDEzKVxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBzaXplPVwibGFyZ2VcImAgYW5kIGB2YXJpYW50PVwidGV4dFwiYC4gKi9cbiAgICB0ZXh0U2l6ZUxhcmdlOiB7XG4gICAgICBwYWRkaW5nOiAnOHB4IDExcHgnLFxuICAgICAgZm9udFNpemU6IHRoZW1lLnR5cG9ncmFwaHkucHhUb1JlbSgxNSlcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgc2l6ZT1cInNtYWxsXCJgIGFuZCBgdmFyaWFudD1cIm91dGxpbmVkXCJgLiAqL1xuICAgIG91dGxpbmVkU2l6ZVNtYWxsOiB7XG4gICAgICBwYWRkaW5nOiAnM3B4IDlweCcsXG4gICAgICBmb250U2l6ZTogdGhlbWUudHlwb2dyYXBoeS5weFRvUmVtKDEzKVxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBzaXplPVwibGFyZ2VcImAgYW5kIGB2YXJpYW50PVwib3V0bGluZWRcImAuICovXG4gICAgb3V0bGluZWRTaXplTGFyZ2U6IHtcbiAgICAgIHBhZGRpbmc6ICc3cHggMjFweCcsXG4gICAgICBmb250U2l6ZTogdGhlbWUudHlwb2dyYXBoeS5weFRvUmVtKDE1KVxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBzaXplPVwic21hbGxcImAgYW5kIGB2YXJpYW50PVwiY29udGFpbmVkXCJgLiAqL1xuICAgIGNvbnRhaW5lZFNpemVTbWFsbDoge1xuICAgICAgcGFkZGluZzogJzRweCAxMHB4JyxcbiAgICAgIGZvbnRTaXplOiB0aGVtZS50eXBvZ3JhcGh5LnB4VG9SZW0oMTMpXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYHNpemU9XCJsYXJnZVwiYCBhbmQgYHZhcmlhbnQ9XCJjb250YWluZWRcImAuICovXG4gICAgY29udGFpbmVkU2l6ZUxhcmdlOiB7XG4gICAgICBwYWRkaW5nOiAnOHB4IDIycHgnLFxuICAgICAgZm9udFNpemU6IHRoZW1lLnR5cG9ncmFwaHkucHhUb1JlbSgxNSlcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgc2l6ZT1cInNtYWxsXCJgLiAqL1xuICAgIHNpemVTbWFsbDoge30sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBzaXplPVwibGFyZ2VcImAuICovXG4gICAgc2l6ZUxhcmdlOiB7fSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGZ1bGxXaWR0aD17dHJ1ZX1gLiAqL1xuICAgIGZ1bGxXaWR0aDoge1xuICAgICAgd2lkdGg6ICcxMDAlJ1xuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgc3RhcnRJY29uIGVsZW1lbnQgaWYgc3VwcGxpZWQuICovXG4gICAgc3RhcnRJY29uOiB7XG4gICAgICBkaXNwbGF5OiAnaW5oZXJpdCcsXG4gICAgICBtYXJnaW5SaWdodDogOCxcbiAgICAgIG1hcmdpbkxlZnQ6IC00LFxuICAgICAgJyYkaWNvblNpemVTbWFsbCc6IHtcbiAgICAgICAgbWFyZ2luTGVmdDogLTJcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIGVuZEljb24gZWxlbWVudCBpZiBzdXBwbGllZC4gKi9cbiAgICBlbmRJY29uOiB7XG4gICAgICBkaXNwbGF5OiAnaW5oZXJpdCcsXG4gICAgICBtYXJnaW5SaWdodDogLTQsXG4gICAgICBtYXJnaW5MZWZ0OiA4LFxuICAgICAgJyYkaWNvblNpemVTbWFsbCc6IHtcbiAgICAgICAgbWFyZ2luUmlnaHQ6IC0yXG4gICAgICB9XG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSBpY29uIGVsZW1lbnQgaWYgc3VwcGxpZWQgYW5kIGBzaXplPVwic21hbGxcImAuICovXG4gICAgaWNvblNpemVTbWFsbDoge1xuICAgICAgJyYgPiAqOmZpcnN0LWNoaWxkJzoge1xuICAgICAgICBmb250U2l6ZTogMThcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIGljb24gZWxlbWVudCBpZiBzdXBwbGllZCBhbmQgYHNpemU9XCJtZWRpdW1cImAuICovXG4gICAgaWNvblNpemVNZWRpdW06IHtcbiAgICAgICcmID4gKjpmaXJzdC1jaGlsZCc6IHtcbiAgICAgICAgZm9udFNpemU6IDIwXG4gICAgICB9XG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSBpY29uIGVsZW1lbnQgaWYgc3VwcGxpZWQgYW5kIGBzaXplPVwibGFyZ2VcImAuICovXG4gICAgaWNvblNpemVMYXJnZToge1xuICAgICAgJyYgPiAqOmZpcnN0LWNoaWxkJzoge1xuICAgICAgICBmb250U2l6ZTogMjJcbiAgICAgIH1cbiAgICB9XG4gIH07XG59O1xudmFyIEJ1dHRvbiA9IC8qI19fUFVSRV9fKi9SZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIEJ1dHRvbihwcm9wcywgcmVmKSB7XG4gIHZhciBjaGlsZHJlbiA9IHByb3BzLmNoaWxkcmVuLFxuICAgICAgY2xhc3NlcyA9IHByb3BzLmNsYXNzZXMsXG4gICAgICBjbGFzc05hbWUgPSBwcm9wcy5jbGFzc05hbWUsXG4gICAgICBfcHJvcHMkY29sb3IgPSBwcm9wcy5jb2xvcixcbiAgICAgIGNvbG9yID0gX3Byb3BzJGNvbG9yID09PSB2b2lkIDAgPyAnZGVmYXVsdCcgOiBfcHJvcHMkY29sb3IsXG4gICAgICBfcHJvcHMkY29tcG9uZW50ID0gcHJvcHMuY29tcG9uZW50LFxuICAgICAgY29tcG9uZW50ID0gX3Byb3BzJGNvbXBvbmVudCA9PT0gdm9pZCAwID8gJ2J1dHRvbicgOiBfcHJvcHMkY29tcG9uZW50LFxuICAgICAgX3Byb3BzJGRpc2FibGVkID0gcHJvcHMuZGlzYWJsZWQsXG4gICAgICBkaXNhYmxlZCA9IF9wcm9wcyRkaXNhYmxlZCA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcHJvcHMkZGlzYWJsZWQsXG4gICAgICBfcHJvcHMkZGlzYWJsZUVsZXZhdGkgPSBwcm9wcy5kaXNhYmxlRWxldmF0aW9uLFxuICAgICAgZGlzYWJsZUVsZXZhdGlvbiA9IF9wcm9wcyRkaXNhYmxlRWxldmF0aSA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcHJvcHMkZGlzYWJsZUVsZXZhdGksXG4gICAgICBfcHJvcHMkZGlzYWJsZUZvY3VzUmkgPSBwcm9wcy5kaXNhYmxlRm9jdXNSaXBwbGUsXG4gICAgICBkaXNhYmxlRm9jdXNSaXBwbGUgPSBfcHJvcHMkZGlzYWJsZUZvY3VzUmkgPT09IHZvaWQgMCA/IGZhbHNlIDogX3Byb3BzJGRpc2FibGVGb2N1c1JpLFxuICAgICAgZW5kSWNvblByb3AgPSBwcm9wcy5lbmRJY29uLFxuICAgICAgZm9jdXNWaXNpYmxlQ2xhc3NOYW1lID0gcHJvcHMuZm9jdXNWaXNpYmxlQ2xhc3NOYW1lLFxuICAgICAgX3Byb3BzJGZ1bGxXaWR0aCA9IHByb3BzLmZ1bGxXaWR0aCxcbiAgICAgIGZ1bGxXaWR0aCA9IF9wcm9wcyRmdWxsV2lkdGggPT09IHZvaWQgMCA/IGZhbHNlIDogX3Byb3BzJGZ1bGxXaWR0aCxcbiAgICAgIF9wcm9wcyRzaXplID0gcHJvcHMuc2l6ZSxcbiAgICAgIHNpemUgPSBfcHJvcHMkc2l6ZSA9PT0gdm9pZCAwID8gJ21lZGl1bScgOiBfcHJvcHMkc2l6ZSxcbiAgICAgIHN0YXJ0SWNvblByb3AgPSBwcm9wcy5zdGFydEljb24sXG4gICAgICBfcHJvcHMkdHlwZSA9IHByb3BzLnR5cGUsXG4gICAgICB0eXBlID0gX3Byb3BzJHR5cGUgPT09IHZvaWQgMCA/ICdidXR0b24nIDogX3Byb3BzJHR5cGUsXG4gICAgICBfcHJvcHMkdmFyaWFudCA9IHByb3BzLnZhcmlhbnQsXG4gICAgICB2YXJpYW50ID0gX3Byb3BzJHZhcmlhbnQgPT09IHZvaWQgMCA/ICd0ZXh0JyA6IF9wcm9wcyR2YXJpYW50LFxuICAgICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMocHJvcHMsIFtcImNoaWxkcmVuXCIsIFwiY2xhc3Nlc1wiLCBcImNsYXNzTmFtZVwiLCBcImNvbG9yXCIsIFwiY29tcG9uZW50XCIsIFwiZGlzYWJsZWRcIiwgXCJkaXNhYmxlRWxldmF0aW9uXCIsIFwiZGlzYWJsZUZvY3VzUmlwcGxlXCIsIFwiZW5kSWNvblwiLCBcImZvY3VzVmlzaWJsZUNsYXNzTmFtZVwiLCBcImZ1bGxXaWR0aFwiLCBcInNpemVcIiwgXCJzdGFydEljb25cIiwgXCJ0eXBlXCIsIFwidmFyaWFudFwiXSk7XG5cbiAgdmFyIHN0YXJ0SWNvbiA9IHN0YXJ0SWNvblByb3AgJiYgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIsIHtcbiAgICBjbGFzc05hbWU6IGNsc3goY2xhc3Nlcy5zdGFydEljb24sIGNsYXNzZXNbXCJpY29uU2l6ZVwiLmNvbmNhdChjYXBpdGFsaXplKHNpemUpKV0pXG4gIH0sIHN0YXJ0SWNvblByb3ApO1xuICB2YXIgZW5kSWNvbiA9IGVuZEljb25Qcm9wICYmIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwic3BhblwiLCB7XG4gICAgY2xhc3NOYW1lOiBjbHN4KGNsYXNzZXMuZW5kSWNvbiwgY2xhc3Nlc1tcImljb25TaXplXCIuY29uY2F0KGNhcGl0YWxpemUoc2l6ZSkpXSlcbiAgfSwgZW5kSWNvblByb3ApO1xuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoQnV0dG9uQmFzZSwgX2V4dGVuZHMoe1xuICAgIGNsYXNzTmFtZTogY2xzeChjbGFzc2VzLnJvb3QsIGNsYXNzZXNbdmFyaWFudF0sIGNsYXNzTmFtZSwgY29sb3IgPT09ICdpbmhlcml0JyA/IGNsYXNzZXMuY29sb3JJbmhlcml0IDogY29sb3IgIT09ICdkZWZhdWx0JyAmJiBjbGFzc2VzW1wiXCIuY29uY2F0KHZhcmlhbnQpLmNvbmNhdChjYXBpdGFsaXplKGNvbG9yKSldLCBzaXplICE9PSAnbWVkaXVtJyAmJiBbY2xhc3Nlc1tcIlwiLmNvbmNhdCh2YXJpYW50LCBcIlNpemVcIikuY29uY2F0KGNhcGl0YWxpemUoc2l6ZSkpXSwgY2xhc3Nlc1tcInNpemVcIi5jb25jYXQoY2FwaXRhbGl6ZShzaXplKSldXSwgZGlzYWJsZUVsZXZhdGlvbiAmJiBjbGFzc2VzLmRpc2FibGVFbGV2YXRpb24sIGRpc2FibGVkICYmIGNsYXNzZXMuZGlzYWJsZWQsIGZ1bGxXaWR0aCAmJiBjbGFzc2VzLmZ1bGxXaWR0aCksXG4gICAgY29tcG9uZW50OiBjb21wb25lbnQsXG4gICAgZGlzYWJsZWQ6IGRpc2FibGVkLFxuICAgIGZvY3VzUmlwcGxlOiAhZGlzYWJsZUZvY3VzUmlwcGxlLFxuICAgIGZvY3VzVmlzaWJsZUNsYXNzTmFtZTogY2xzeChjbGFzc2VzLmZvY3VzVmlzaWJsZSwgZm9jdXNWaXNpYmxlQ2xhc3NOYW1lKSxcbiAgICByZWY6IHJlZixcbiAgICB0eXBlOiB0eXBlXG4gIH0sIG90aGVyKSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIsIHtcbiAgICBjbGFzc05hbWU6IGNsYXNzZXMubGFiZWxcbiAgfSwgc3RhcnRJY29uLCBjaGlsZHJlbiwgZW5kSWNvbikpO1xufSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBCdXR0b24ucHJvcFR5cGVzID0ge1xuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBXYXJuaW5nIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIC8vIHwgVGhlc2UgUHJvcFR5cGVzIGFyZSBnZW5lcmF0ZWQgZnJvbSB0aGUgVHlwZVNjcmlwdCB0eXBlIGRlZmluaXRpb25zIHxcbiAgLy8gfCAgICAgVG8gdXBkYXRlIHRoZW0gZWRpdCB0aGUgZC50cyBmaWxlIGFuZCBydW4gXCJ5YXJuIHByb3B0eXBlc1wiICAgICB8XG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuICAvKipcbiAgICogVGhlIGNvbnRlbnQgb2YgdGhlIGJ1dHRvbi5cbiAgICovXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcblxuICAvKipcbiAgICogT3ZlcnJpZGUgb3IgZXh0ZW5kIHRoZSBzdHlsZXMgYXBwbGllZCB0byB0aGUgY29tcG9uZW50LlxuICAgKiBTZWUgW0NTUyBBUEldKCNjc3MpIGJlbG93IGZvciBtb3JlIGRldGFpbHMuXG4gICAqL1xuICBjbGFzc2VzOiBQcm9wVHlwZXMub2JqZWN0LFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIFRoZSBjb2xvciBvZiB0aGUgY29tcG9uZW50LiBJdCBzdXBwb3J0cyB0aG9zZSB0aGVtZSBjb2xvcnMgdGhhdCBtYWtlIHNlbnNlIGZvciB0aGlzIGNvbXBvbmVudC5cbiAgICovXG4gIGNvbG9yOiBQcm9wVHlwZXMub25lT2YoWydkZWZhdWx0JywgJ2luaGVyaXQnLCAncHJpbWFyeScsICdzZWNvbmRhcnknXSksXG5cbiAgLyoqXG4gICAqIFRoZSBjb21wb25lbnQgdXNlZCBmb3IgdGhlIHJvb3Qgbm9kZS5cbiAgICogRWl0aGVyIGEgc3RyaW5nIHRvIHVzZSBhIEhUTUwgZWxlbWVudCBvciBhIGNvbXBvbmVudC5cbiAgICovXG4gIGNvbXBvbmVudDogUHJvcFR5cGVzXG4gIC8qIEB0eXBlc2NyaXB0LXRvLXByb3B0eXBlcy1pZ25vcmUgKi9cbiAgLmVsZW1lbnRUeXBlLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBidXR0b24gd2lsbCBiZSBkaXNhYmxlZC5cbiAgICovXG4gIGRpc2FibGVkOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCBubyBlbGV2YXRpb24gaXMgdXNlZC5cbiAgICovXG4gIGRpc2FibGVFbGV2YXRpb246IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSAga2V5Ym9hcmQgZm9jdXMgcmlwcGxlIHdpbGwgYmUgZGlzYWJsZWQuXG4gICAqL1xuICBkaXNhYmxlRm9jdXNSaXBwbGU6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSByaXBwbGUgZWZmZWN0IHdpbGwgYmUgZGlzYWJsZWQuXG4gICAqXG4gICAqIOKaoO+4jyBXaXRob3V0IGEgcmlwcGxlIHRoZXJlIGlzIG5vIHN0eWxpbmcgZm9yIDpmb2N1cy12aXNpYmxlIGJ5IGRlZmF1bHQuIEJlIHN1cmVcbiAgICogdG8gaGlnaGxpZ2h0IHRoZSBlbGVtZW50IGJ5IGFwcGx5aW5nIHNlcGFyYXRlIHN0eWxlcyB3aXRoIHRoZSBgZm9jdXNWaXNpYmxlQ2xhc3NOYW1lYC5cbiAgICovXG4gIGRpc2FibGVSaXBwbGU6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBFbGVtZW50IHBsYWNlZCBhZnRlciB0aGUgY2hpbGRyZW4uXG4gICAqL1xuICBlbmRJY29uOiBQcm9wVHlwZXMubm9kZSxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgZm9jdXNWaXNpYmxlQ2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBidXR0b24gd2lsbCB0YWtlIHVwIHRoZSBmdWxsIHdpZHRoIG9mIGl0cyBjb250YWluZXIuXG4gICAqL1xuICBmdWxsV2lkdGg6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBUaGUgVVJMIHRvIGxpbmsgdG8gd2hlbiB0aGUgYnV0dG9uIGlzIGNsaWNrZWQuXG4gICAqIElmIGRlZmluZWQsIGFuIGBhYCBlbGVtZW50IHdpbGwgYmUgdXNlZCBhcyB0aGUgcm9vdCBub2RlLlxuICAgKi9cbiAgaHJlZjogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogVGhlIHNpemUgb2YgdGhlIGJ1dHRvbi5cbiAgICogYHNtYWxsYCBpcyBlcXVpdmFsZW50IHRvIHRoZSBkZW5zZSBidXR0b24gc3R5bGluZy5cbiAgICovXG4gIHNpemU6IFByb3BUeXBlcy5vbmVPZihbJ2xhcmdlJywgJ21lZGl1bScsICdzbWFsbCddKSxcblxuICAvKipcbiAgICogRWxlbWVudCBwbGFjZWQgYmVmb3JlIHRoZSBjaGlsZHJlbi5cbiAgICovXG4gIHN0YXJ0SWNvbjogUHJvcFR5cGVzLm5vZGUsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIHR5cGU6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5vbmVPZihbJ2J1dHRvbicsICdyZXNldCcsICdzdWJtaXQnXSksIFByb3BUeXBlcy5zdHJpbmddKSxcblxuICAvKipcbiAgICogVGhlIHZhcmlhbnQgdG8gdXNlLlxuICAgKi9cbiAgdmFyaWFudDogUHJvcFR5cGVzLm9uZU9mKFsnY29udGFpbmVkJywgJ291dGxpbmVkJywgJ3RleHQnXSlcbn0gOiB2b2lkIDA7XG5leHBvcnQgZGVmYXVsdCB3aXRoU3R5bGVzKHN0eWxlcywge1xuICBuYW1lOiAnTXVpQnV0dG9uJ1xufSkoQnV0dG9uKTsiLCJpbXBvcnQgUmVhY3QsIHsgRnJhZ21lbnQgfSBmcm9tICdyZWFjdCdcclxuaW1wb3J0IHsgbWFrZVN0eWxlcyB9IGZyb20gJ0BtYXRlcmlhbC11aS9jb3JlL3N0eWxlcydcclxuaW1wb3J0IHsgbmFub2lkIH0gZnJvbSAnbmFub2lkJ1xyXG5pbXBvcnQge1xyXG4gICAgSWNvbkJ1dHRvbixcclxuICAgIFR5cG9ncmFwaHksXHJcbiAgICBEaXZpZGVyLFxyXG4gICAgTWVudUl0ZW0sXHJcbiAgICBUZXh0RmllbGQsXHJcbiAgICBCdXR0b24sXHJcbiAgICBQYXBlcixcclxuICAgIElucHV0QWRvcm5tZW50LFxyXG4gICAgR3JpZCxcclxuICAgIENhcmRNZWRpYSxcclxufSBmcm9tICdAbWF0ZXJpYWwtdWkvY29yZSdcclxuaW1wb3J0IEFjY291bnRDaXJjbGUgZnJvbSAnQG1hdGVyaWFsLXVpL2ljb25zL0FjY291bnRDaXJjbGUnXHJcbmltcG9ydCBQaG90b0NhbWVyYSBmcm9tICdAbWF0ZXJpYWwtdWkvaWNvbnMvUGhvdG9DYW1lcmEnXHJcblxyXG5jb25zdCBCVUxLX0lNQUdFID0gYGh0dHBzOi8vaWNvbi1saWJyYXJ5LmNvbS9pbWFnZXMvbm8taW1hZ2UtaWNvbi9uby1pbWFnZS1pY29uLTUuanBnYFxyXG5cclxuY29uc3QgdXNlU3R5bGVzID0gbWFrZVN0eWxlcygodGhlbWUpID0+ICh7XHJcbiAgICByb290OiB7XHJcbiAgICAgICAgcGFkZGluZzogdGhlbWUuc3BhY2luZyg0LCA0LCA0LCA0KSxcclxuICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IHRoZW1lLnBhbGV0dGUuYmFja2dyb3VuZC5wYXBlcixcclxuICAgIH0sXHJcbiAgICBpbWFnZVVwbG9hZDoge1xyXG4gICAgICAgIHdpZHRoOiAnMTAwJScsXHJcbiAgICAgICAgZGlzcGxheTogJ2ZsZXgnLFxyXG4gICAgICAgIGFsaWduSXRlbXM6ICdjZW50ZXInLFxyXG4gICAgICAgIGJveFNpemluZzogJ2JvcmRlci1ib3gnLFxyXG4gICAgICAgIGZsZXhXcmFwOiAnd3JhcCcsXHJcbiAgICAgICAganVzdGlmeUNvbnRlbnQ6ICdjZW50ZXInLFxyXG4gICAgICAgICcmID4gKic6IHtcclxuICAgICAgICAgICAgbWFyZ2luOiB0aGVtZS5zcGFjaW5nKDEpLFxyXG4gICAgICAgIH0sXHJcbiAgICB9LFxyXG4gICAgdGV4dEZpbGVkOiB7XHJcbiAgICAgICAgbWFyZ2luOiB0aGVtZS5zcGFjaW5nKDAsIDAsIDEsIDApLFxyXG4gICAgfSxcclxuICAgIGJ1dHRvbkdyb3VwOiB7XHJcbiAgICAgICAgd2lkdGg6ICcxMDAlJyxcclxuICAgICAgICBkaXNwbGF5OiAnZmxleCcsXHJcbiAgICAgICAganVzdGlmeUNvbnRlbnQ6ICdzcGFjZS1iZXR3ZWVuJyxcclxuICAgICAgICBwYWRkaW5nOiB0aGVtZS5zcGFjaW5nKDAsIDIpLFxyXG4gICAgfSxcclxuICAgIGlucHV0OiB7XHJcbiAgICAgICAgZGlzcGxheTogJ25vbmUnLFxyXG4gICAgfSxcclxuICAgIG1lZGlhOiB7XHJcbiAgICAgICAgaGVpZ2h0OiAxNDAsXHJcbiAgICAgICAgd2lkdGg6IDE0MCxcclxuICAgIH0sXHJcbiAgICBidXR0b246IHtcclxuICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IHRoZW1lLnBhbGV0dGUuc3VjY2Vzcy5tYWluLFxyXG4gICAgfSxcclxuICAgIGZvcm06IHtcclxuICAgICAgICB3aWR0aDogJzEwMCUnLFxyXG4gICAgfSxcclxuICAgIHNwYWNpbmc6IHtcclxuICAgICAgICBtYXJnaW46IHRoZW1lLnNwYWNpbmcoMCwgMCwgMiwgMCksXHJcbiAgICB9LFxyXG59KSlcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIENyZWF0ZUxlc3Nvbihwcm9wcykge1xyXG4gICAgY29uc3QgY2xhc3NlcyA9IHVzZVN0eWxlcygpXHJcbiAgICBjb25zdCBbZGF0YSwgc2V0RGF0YV0gPSBSZWFjdC51c2VTdGF0ZSh7XHJcbiAgICAgICAgaWQ6IG51bGwsXHJcbiAgICAgICAgdGl0bGU6ICcnLFxyXG4gICAgICAgIGNvbnRlbnQ6ICcnLFxyXG4gICAgICAgIGNhdGVnb3JpZXM6IFsn0J/QtdGA0LLQsNGPJywgJ9CS0YLQvtGA0LDRjycsICfQotGA0LXRgtGM0Y8nLCAn0KfQtdGC0LLQtdGA0YLQsNGPJ10sXHJcbiAgICAgICAgcHJpY2U6ICcnLFxyXG4gICAgICAgIGNvdmVyOiAnJyxcclxuICAgICAgICBjYXRlZ29yeTogJycsXHJcbiAgICB9KVxyXG4gICAgY29uc3QgeyBpZCwgdGl0bGUsIGNvbnRlbnQsIGNhdGVnb3JpZXMsIHByaWNlLCBjb3ZlciwgY2F0ZWdvcnkgfSA9IGRhdGFcclxuXHJcbiAgICBpZiAoaWQgPT09IG51bGwpIHtcclxuICAgICAgICBzZXREYXRhKHsgLi4uZGF0YSwgaWQ6IG5hbm9pZCg2KSB9KVxyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IGhhbmRsZUNoYW5nZUNhdGVyb2d5ID0gKGV2ZW50KSA9PiB7XHJcbiAgICAgICAgc2V0RGF0YSh7IC4uLmRhdGEsIGNhdGVnb3J5OiBldmVudC50YXJnZXQudmFsdWUgfSlcclxuICAgIH1cclxuXHJcbiAgICBjb25zdCBoYW5kbGVDaGFuZ2VQcmljZSA9IChldmVudCkgPT4ge1xyXG4gICAgICAgIHNldERhdGEoeyAuLi5kYXRhLCBwcmljZTogZXZlbnQudGFyZ2V0LnZhbHVlIH0pXHJcbiAgICB9XHJcblxyXG4gICAgY29uc3QgaGFuZGxlQ2hhbmdlVGl0bGUgPSAoZXZlbnQpID0+IHtcclxuICAgICAgICBzZXREYXRhKHsgLi4uZGF0YSwgdGl0bGU6IGV2ZW50LnRhcmdldC52YWx1ZSB9KVxyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IGhhbmRsZUNoYW5nZUNvbnRlbnQgPSAoZXZlbnQpID0+IHtcclxuICAgICAgICBzZXREYXRhKHsgLi4uZGF0YSwgY29udGVudDogZXZlbnQudGFyZ2V0LnZhbHVlIH0pXHJcbiAgICB9XHJcblxyXG4gICAgY29uc3QgaGFuZGxlQ29uZmlybSA9ICgpID0+IHtcclxuICAgICAgICBjb25zdCBuZXdDb3ZlciA9IGNvdmVyID09PSAnJyA/IEJVTEtfSU1BR0UgOiBjb3ZlclxyXG5cclxuICAgICAgICBpZiAodGl0bGUgIT09ICcnICYmIGNvbnRlbnQgIT09ICcnICYmIHByaWNlICE9PSAnJyAmJiBjYXRlZ29yeSAhPT0gJycpIHtcclxuICAgICAgICAgICAgcHJvcHMuaGFuZGxlQ3JlYXRlTGVzc29uKHtcclxuICAgICAgICAgICAgICAgIGlkLFxyXG4gICAgICAgICAgICAgICAgdGl0bGUsXHJcbiAgICAgICAgICAgICAgICBjb3ZlcjogbmV3Q292ZXIsXHJcbiAgICAgICAgICAgICAgICBjb250ZW50LFxyXG4gICAgICAgICAgICAgICAgcHJpY2UsXHJcbiAgICAgICAgICAgICAgICBjYXRlZ29yeSxcclxuICAgICAgICAgICAgICAgIGxlc3NvbklkOiBpZCxcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgcHJvcHMucmVkaXJlY3QoYGxlc3Nvbi8ke2lkfWApXHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgYWxlcnQoJ9GH0YLQvi3RgtC+INC90LUg0LfQsNC/0L7Qu9C90LXQvdC+JylcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIChcclxuICAgICAgICA8PlxyXG4gICAgICAgICAgICA8VHlwb2dyYXBoeSBjbGFzc05hbWU9e2NsYXNzZXMuc3BhY2luZ30gY29tcG9uZW50PVwiaDJcIiB2YXJpYW50PVwiaDVcIj5cclxuICAgICAgICAgICAgICAgINCd0L7QstGL0Lkg0YPRgNC+0LpcclxuICAgICAgICAgICAgPC9UeXBvZ3JhcGh5PlxyXG4gICAgICAgICAgICA8RGl2aWRlciBjbGFzc05hbWU9e2NsYXNzZXMuc3BhY2luZ30gLz5cclxuICAgICAgICAgICAgPFBhcGVyIGVsZXZhdGlvbj17MTB9IGNsYXNzTmFtZT17Y2xhc3Nlcy5yb290fT5cclxuICAgICAgICAgICAgICAgIDxHcmlkIGNvbnRhaW5lciBzcGFjaW5nPXsyfSBqdXN0aWZ5PVwic3BhY2UtYmV0d2VlblwiPlxyXG4gICAgICAgICAgICAgICAgICAgIDxHcmlkIGNvbnRhaW5lciBpdGVtIHhzPXsxMn0gc209ezh9PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8Zm9ybVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPXtjbGFzc2VzLmZvcm19XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBub1ZhbGlkYXRlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhdXRvQ29tcGxldGU9XCJvZmZcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8R3JpZCBjb250YWluZXIgc3BhY2luZz17NH0+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPEdyaWQgaXRlbSB4cz17MTJ9PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8VGV4dEZpZWxkXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9e2NsYXNzZXMudGV4dEZpbGVkfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGFiZWw9XCLQndCw0LfQstCw0L3QuNC1XCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkPVwidGl0bGVcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZnVsbFdpZHRoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaXplPVwic21hbGxcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyaWFudD1cIm91dGxpbmVkXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlPXt0aXRsZX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2hhbmdlPXtoYW5kbGVDaGFuZ2VUaXRsZX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhlbHBlclRleHQ9XCLQktCy0LXQtNC40YLQtSDQvdCw0LfQstCw0L3QuNC1INGD0YDQvtC60LBcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVxdWlyZWRcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L0dyaWQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPEdyaWQgaXRlbSB4cz17MTJ9IHNtPXs2fSBsZz17NH0gbWQ9ezR9PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8VGV4dEZpZWxkXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9e2NsYXNzZXMudGV4dEZpbGVkfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGFiZWw9XCLQptC10L3QsFwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZD1cInByaWNlXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNpemU9XCJzbWFsbFwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZT17cHJpY2V9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXJpYW50PVwib3V0bGluZWRcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb25DaGFuZ2U9e2hhbmRsZUNoYW5nZVByaWNlfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaGVscGVyVGV4dD1cItCS0LLQtdC00LjRgtC1INGG0LXQvdGDINGD0YDQvtC60LBcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgSW5wdXRQcm9wcz17e1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXJ0QWRvcm5tZW50OiAoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxJbnB1dEFkb3JubWVudCBwb3NpdGlvbj1cInN0YXJ0XCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8QWNjb3VudENpcmNsZSAvPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L0lucHV0QWRvcm5tZW50PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9fVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVxdWlyZWRcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L0dyaWQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPEdyaWQgaXRlbSB4cz17MTJ9IHNtPXs2fT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPFRleHRGaWVsZFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPXtjbGFzc2VzLnRleHRGaWxlZH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhYmVsPVwi0JrQsNGC0LXQs9C+0YDQuNGPXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZ1bGxXaWR0aFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWQ9XCJjYXRlZ29yeVwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaXplPVwic21hbGxcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZWN0XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXJpYW50PVwib3V0bGluZWRcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU9e2NhdGVnb3J5fVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb25DaGFuZ2U9e2hhbmRsZUNoYW5nZUNhdGVyb2d5fVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaGVscGVyVGV4dD1cItCS0YvQsdC10YDQuNGC0LUg0LrQsNGC0LXQs9C+0YDQuNGOINGD0YDQvtC60LBcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVxdWlyZWRcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge2NhdGVnb3JpZXMubWFwKChpdGVtLCBpZHgpID0+IChcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8TWVudUl0ZW0ga2V5PXtpZHh9IHZhbHVlPXtpdGVtfT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge2l0ZW19XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9NZW51SXRlbT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICkpfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L1RleHRGaWVsZD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L0dyaWQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPEdyaWQgY29udGFpbmVyIGl0ZW0gc3g9ezEyfT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPFRleHRGaWVsZFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPXtjbGFzc2VzLnRleHRGaWxlZH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhYmVsPVwi0J7Qv9C40YHQsNC90LjQtVwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZD1cImNvbnRlbnRcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2l6ZT1cInNtYWxsXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZ1bGxXaWR0aFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU9e2NvbnRlbnR9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcj1cItCS0LLQtdC00LjRgtC1INGC0LXQutGB0YJcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbXVsdGlsaW5lXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXJpYW50PVwib3V0bGluZWRcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb25DaGFuZ2U9e2hhbmRsZUNoYW5nZUNvbnRlbnR9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByb3dzPXszfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaGVscGVyVGV4dD1cItCS0LLQtdC00LjRgtC1INGB0L7QtNC10YDQttCw0L3QuNC1INGD0YDQvtC60LBcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVxdWlyZWRcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L0dyaWQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9e2NsYXNzZXMuYnV0dG9uR3JvdXB9PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8QnV0dG9uIHZhcmlhbnQ9XCJjb250YWluZWRcIiBjb2xvcj1cInByaW1hcnlcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgINCe0YLQvNC10L3QsFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L0J1dHRvbj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPEJ1dHRvblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyaWFudD1cImNvbnRhaW5lZFwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2xvcj1cInByaW1hcnlcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb25DbGljaz17aGFuZGxlQ29uZmlybX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT17Y2xhc3Nlcy5idXR0b259XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgINCh0L7RhdGA0LDQvdC40YLRjFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L0J1dHRvbj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvR3JpZD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC9mb3JtPlxyXG4gICAgICAgICAgICAgICAgICAgIDwvR3JpZD5cclxuICAgICAgICAgICAgICAgICAgICA8R3JpZCBjb250YWluZXIgaXRlbSBzbT17MX0ganVzdGlmeT1cImNlbnRlclwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8RGl2aWRlciBvcmllbnRhdGlvbj1cInZlcnRpY2FsXCIgZmxleEl0ZW0gLz5cclxuICAgICAgICAgICAgICAgICAgICA8L0dyaWQ+XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIDxHcmlkXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRhaW5lclxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpdGVtXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHhzPXsxMn1cclxuICAgICAgICAgICAgICAgICAgICAgICAgc209ezN9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGp1c3RpZnk9XCJjZW50ZXJcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBhbGlnbkl0ZW1zPVwiZmxleC1zdGFydFwiXHJcbiAgICAgICAgICAgICAgICAgICAgPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8VHlwb2dyYXBoeVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29tcG9uZW50PVwiaDRcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPXtjbGFzc2VzLnNwYWNpbmd9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXJpYW50PVwiYm9keTFcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYWxpZ249XCJjZW50ZXJcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICDQl9Cw0LPRgNGD0LfQutCwINC40LfQvtCx0YDQsNC20LXQvdC40Y9cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC9UeXBvZ3JhcGh5PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8UGFwZXIgZWxldmF0aW9uPXsxMH0gY2xhc3NOYW1lPXtjbGFzc2VzLnNwYWNpbmd9PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPENhcmRNZWRpYVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT17Y2xhc3Nlcy5tZWRpYX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbWFnZT17Y292ZXIgPT09ICcnID8gQlVMS19JTUFHRSA6IGNvdmVyfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlPVwiQ29udGVtcGxhdGl2ZSBSZXB0aWxlXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvUGFwZXI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPXtjbGFzc2VzLmltYWdlVXBsb2FkfT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFjY2VwdD1cImltYWdlLypcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT17Y2xhc3Nlcy5pbnB1dH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZD1cImNvbnRhaW5lZC1idXR0b24tZmlsZVwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbXVsdGlwbGVcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlPVwiZmlsZVwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsIGh0bWxGb3I9XCJjb250YWluZWQtYnV0dG9uLWZpbGVcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8QnV0dG9uXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhcmlhbnQ9XCJjb250YWluZWRcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2xvcj1cInByaW1hcnlcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb21wb25lbnQ9XCJzcGFuXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgINCX0LDQs9GA0YPQt9C40YLRjFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvQnV0dG9uPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9sYWJlbD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFjY2VwdD1cImltYWdlLypcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT17Y2xhc3Nlcy5pbnB1dH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZD1cImljb24tYnV0dG9uLWZpbGVcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU9XCJmaWxlXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWwgaHRtbEZvcj1cImljb24tYnV0dG9uLWZpbGVcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8SWNvbkJ1dHRvblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2xvcj1cInByaW1hcnlcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcmlhLWxhYmVsPVwidXBsb2FkIHBpY3R1cmVcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb21wb25lbnQ9XCJzcGFuXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxQaG90b0NhbWVyYSAvPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvSWNvbkJ1dHRvbj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGFiZWw+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgIDwvR3JpZD5cclxuICAgICAgICAgICAgICAgIDwvR3JpZD5cclxuICAgICAgICAgICAgPC9QYXBlcj5cclxuICAgICAgICA8Lz5cclxuICAgIClcclxufVxyXG4iLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IGdldFRoZW1lUHJvcHMsIHVzZVRoZW1lIH0gZnJvbSAnQG1hdGVyaWFsLXVpL3N0eWxlcyc7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB1c2VNZWRpYVF1ZXJ5KHF1ZXJ5SW5wdXQpIHtcbiAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHt9O1xuICB2YXIgdGhlbWUgPSB1c2VUaGVtZSgpO1xuICB2YXIgcHJvcHMgPSBnZXRUaGVtZVByb3BzKHtcbiAgICB0aGVtZTogdGhlbWUsXG4gICAgbmFtZTogJ011aVVzZU1lZGlhUXVlcnknLFxuICAgIHByb3BzOiB7fVxuICB9KTtcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGlmICh0eXBlb2YgcXVlcnlJbnB1dCA9PT0gJ2Z1bmN0aW9uJyAmJiB0aGVtZSA9PT0gbnVsbCkge1xuICAgICAgY29uc29sZS5lcnJvcihbJ01hdGVyaWFsLVVJOiBUaGUgYHF1ZXJ5YCBhcmd1bWVudCBwcm92aWRlZCBpcyBpbnZhbGlkLicsICdZb3UgYXJlIHByb3ZpZGluZyBhIGZ1bmN0aW9uIHdpdGhvdXQgYSB0aGVtZSBpbiB0aGUgY29udGV4dC4nLCAnT25lIG9mIHRoZSBwYXJlbnQgZWxlbWVudHMgbmVlZHMgdG8gdXNlIGEgVGhlbWVQcm92aWRlci4nXS5qb2luKCdcXG4nKSk7XG4gICAgfVxuICB9XG5cbiAgdmFyIHF1ZXJ5ID0gdHlwZW9mIHF1ZXJ5SW5wdXQgPT09ICdmdW5jdGlvbicgPyBxdWVyeUlucHV0KHRoZW1lKSA6IHF1ZXJ5SW5wdXQ7XG4gIHF1ZXJ5ID0gcXVlcnkucmVwbGFjZSgvXkBtZWRpYSggPykvbSwgJycpOyAvLyBXYWl0IGZvciBqc2RvbSB0byBzdXBwb3J0IHRoZSBtYXRjaCBtZWRpYSBmZWF0dXJlLlxuICAvLyBBbGwgdGhlIGJyb3dzZXJzIE1hdGVyaWFsLVVJIHN1cHBvcnQgaGF2ZSB0aGlzIGJ1aWx0LWluLlxuICAvLyBUaGlzIGRlZmVuc2l2ZSBjaGVjayBpcyBoZXJlIGZvciBzaW1wbGljaXR5LlxuICAvLyBNb3N0IG9mIHRoZSB0aW1lLCB0aGUgbWF0Y2ggbWVkaWEgbG9naWMgaXNuJ3QgY2VudHJhbCB0byBwZW9wbGUgdGVzdHMuXG5cbiAgdmFyIHN1cHBvcnRNYXRjaE1lZGlhID0gdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIHdpbmRvdy5tYXRjaE1lZGlhICE9PSAndW5kZWZpbmVkJztcblxuICB2YXIgX3Byb3BzJG9wdGlvbnMgPSBfZXh0ZW5kcyh7fSwgcHJvcHMsIG9wdGlvbnMpLFxuICAgICAgX3Byb3BzJG9wdGlvbnMkZGVmYXVsID0gX3Byb3BzJG9wdGlvbnMuZGVmYXVsdE1hdGNoZXMsXG4gICAgICBkZWZhdWx0TWF0Y2hlcyA9IF9wcm9wcyRvcHRpb25zJGRlZmF1bCA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcHJvcHMkb3B0aW9ucyRkZWZhdWwsXG4gICAgICBfcHJvcHMkb3B0aW9ucyRtYXRjaE0gPSBfcHJvcHMkb3B0aW9ucy5tYXRjaE1lZGlhLFxuICAgICAgbWF0Y2hNZWRpYSA9IF9wcm9wcyRvcHRpb25zJG1hdGNoTSA9PT0gdm9pZCAwID8gc3VwcG9ydE1hdGNoTWVkaWEgPyB3aW5kb3cubWF0Y2hNZWRpYSA6IG51bGwgOiBfcHJvcHMkb3B0aW9ucyRtYXRjaE0sXG4gICAgICBfcHJvcHMkb3B0aW9ucyRub1NzciA9IF9wcm9wcyRvcHRpb25zLm5vU3NyLFxuICAgICAgbm9Tc3IgPSBfcHJvcHMkb3B0aW9ucyRub1NzciA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcHJvcHMkb3B0aW9ucyRub1NzcixcbiAgICAgIF9wcm9wcyRvcHRpb25zJHNzck1hdCA9IF9wcm9wcyRvcHRpb25zLnNzck1hdGNoTWVkaWEsXG4gICAgICBzc3JNYXRjaE1lZGlhID0gX3Byb3BzJG9wdGlvbnMkc3NyTWF0ID09PSB2b2lkIDAgPyBudWxsIDogX3Byb3BzJG9wdGlvbnMkc3NyTWF0O1xuXG4gIHZhciBfUmVhY3QkdXNlU3RhdGUgPSBSZWFjdC51c2VTdGF0ZShmdW5jdGlvbiAoKSB7XG4gICAgaWYgKG5vU3NyICYmIHN1cHBvcnRNYXRjaE1lZGlhKSB7XG4gICAgICByZXR1cm4gbWF0Y2hNZWRpYShxdWVyeSkubWF0Y2hlcztcbiAgICB9XG5cbiAgICBpZiAoc3NyTWF0Y2hNZWRpYSkge1xuICAgICAgcmV0dXJuIHNzck1hdGNoTWVkaWEocXVlcnkpLm1hdGNoZXM7XG4gICAgfSAvLyBPbmNlIHRoZSBjb21wb25lbnQgaXMgbW91bnRlZCwgd2UgcmVseSBvbiB0aGVcbiAgICAvLyBldmVudCBsaXN0ZW5lcnMgdG8gcmV0dXJuIHRoZSBjb3JyZWN0IG1hdGNoZXMgdmFsdWUuXG5cblxuICAgIHJldHVybiBkZWZhdWx0TWF0Y2hlcztcbiAgfSksXG4gICAgICBtYXRjaCA9IF9SZWFjdCR1c2VTdGF0ZVswXSxcbiAgICAgIHNldE1hdGNoID0gX1JlYWN0JHVzZVN0YXRlWzFdO1xuXG4gIFJlYWN0LnVzZUVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGFjdGl2ZSA9IHRydWU7XG5cbiAgICBpZiAoIXN1cHBvcnRNYXRjaE1lZGlhKSB7XG4gICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIHZhciBxdWVyeUxpc3QgPSBtYXRjaE1lZGlhKHF1ZXJ5KTtcblxuICAgIHZhciB1cGRhdGVNYXRjaCA9IGZ1bmN0aW9uIHVwZGF0ZU1hdGNoKCkge1xuICAgICAgLy8gV29ya2Fyb3VuZCBTYWZhcmkgd3JvbmcgaW1wbGVtZW50YXRpb24gb2YgbWF0Y2hNZWRpYVxuICAgICAgLy8gVE9ETyBjYW4gd2UgcmVtb3ZlIGl0P1xuICAgICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL211aS1vcmcvbWF0ZXJpYWwtdWkvcHVsbC8xNzMxNSNpc3N1ZWNvbW1lbnQtNTI4Mjg2Njc3XG4gICAgICBpZiAoYWN0aXZlKSB7XG4gICAgICAgIHNldE1hdGNoKHF1ZXJ5TGlzdC5tYXRjaGVzKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgdXBkYXRlTWF0Y2goKTtcbiAgICBxdWVyeUxpc3QuYWRkTGlzdGVuZXIodXBkYXRlTWF0Y2gpO1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICBhY3RpdmUgPSBmYWxzZTtcbiAgICAgIHF1ZXJ5TGlzdC5yZW1vdmVMaXN0ZW5lcih1cGRhdGVNYXRjaCk7XG4gICAgfTtcbiAgfSwgW3F1ZXJ5LCBtYXRjaE1lZGlhLCBzdXBwb3J0TWF0Y2hNZWRpYV0pO1xuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlYWN0LWhvb2tzL3J1bGVzLW9mLWhvb2tzXG4gICAgUmVhY3QudXNlRGVidWdWYWx1ZSh7XG4gICAgICBxdWVyeTogcXVlcnksXG4gICAgICBtYXRjaDogbWF0Y2hcbiAgICB9KTtcbiAgfVxuXG4gIHJldHVybiBtYXRjaDtcbn0iLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzXCI7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHsgZ2V0RGlzcGxheU5hbWUgfSBmcm9tICdAbWF0ZXJpYWwtdWkvdXRpbHMnO1xuaW1wb3J0IHsgZ2V0VGhlbWVQcm9wcyB9IGZyb20gJ0BtYXRlcmlhbC11aS9zdHlsZXMnO1xuaW1wb3J0IGhvaXN0Tm9uUmVhY3RTdGF0aWNzIGZyb20gJ2hvaXN0LW5vbi1yZWFjdC1zdGF0aWNzJztcbmltcG9ydCB1c2VUaGVtZSBmcm9tICcuLi9zdHlsZXMvdXNlVGhlbWUnO1xuaW1wb3J0IHsga2V5cyBhcyBicmVha3BvaW50S2V5cyB9IGZyb20gJy4uL3N0eWxlcy9jcmVhdGVCcmVha3BvaW50cyc7XG5pbXBvcnQgdXNlTWVkaWFRdWVyeSBmcm9tICcuLi91c2VNZWRpYVF1ZXJ5JzsgLy8gQnkgZGVmYXVsdCwgcmV0dXJucyB0cnVlIGlmIHNjcmVlbiB3aWR0aCBpcyB0aGUgc2FtZSBvciBncmVhdGVyIHRoYW4gdGhlIGdpdmVuIGJyZWFrcG9pbnQuXG5cbmV4cG9ydCB2YXIgaXNXaWR0aFVwID0gZnVuY3Rpb24gaXNXaWR0aFVwKGJyZWFrcG9pbnQsIHdpZHRoKSB7XG4gIHZhciBpbmNsdXNpdmUgPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6IHRydWU7XG5cbiAgaWYgKGluY2x1c2l2ZSkge1xuICAgIHJldHVybiBicmVha3BvaW50S2V5cy5pbmRleE9mKGJyZWFrcG9pbnQpIDw9IGJyZWFrcG9pbnRLZXlzLmluZGV4T2Yod2lkdGgpO1xuICB9XG5cbiAgcmV0dXJuIGJyZWFrcG9pbnRLZXlzLmluZGV4T2YoYnJlYWtwb2ludCkgPCBicmVha3BvaW50S2V5cy5pbmRleE9mKHdpZHRoKTtcbn07IC8vIEJ5IGRlZmF1bHQsIHJldHVybnMgdHJ1ZSBpZiBzY3JlZW4gd2lkdGggaXMgdGhlIHNhbWUgb3IgbGVzcyB0aGFuIHRoZSBnaXZlbiBicmVha3BvaW50LlxuXG5leHBvcnQgdmFyIGlzV2lkdGhEb3duID0gZnVuY3Rpb24gaXNXaWR0aERvd24oYnJlYWtwb2ludCwgd2lkdGgpIHtcbiAgdmFyIGluY2x1c2l2ZSA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDogdHJ1ZTtcblxuICBpZiAoaW5jbHVzaXZlKSB7XG4gICAgcmV0dXJuIGJyZWFrcG9pbnRLZXlzLmluZGV4T2Yod2lkdGgpIDw9IGJyZWFrcG9pbnRLZXlzLmluZGV4T2YoYnJlYWtwb2ludCk7XG4gIH1cblxuICByZXR1cm4gYnJlYWtwb2ludEtleXMuaW5kZXhPZih3aWR0aCkgPCBicmVha3BvaW50S2V5cy5pbmRleE9mKGJyZWFrcG9pbnQpO1xufTtcbnZhciB1c2VFbmhhbmNlZEVmZmVjdCA9IHR5cGVvZiB3aW5kb3cgPT09ICd1bmRlZmluZWQnID8gUmVhY3QudXNlRWZmZWN0IDogUmVhY3QudXNlTGF5b3V0RWZmZWN0O1xuXG52YXIgd2l0aFdpZHRoID0gZnVuY3Rpb24gd2l0aFdpZHRoKCkge1xuICB2YXIgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDoge307XG4gIHJldHVybiBmdW5jdGlvbiAoQ29tcG9uZW50KSB7XG4gICAgdmFyIF9vcHRpb25zJHdpdGhUaGVtZSA9IG9wdGlvbnMud2l0aFRoZW1lLFxuICAgICAgICB3aXRoVGhlbWVPcHRpb24gPSBfb3B0aW9ucyR3aXRoVGhlbWUgPT09IHZvaWQgMCA/IGZhbHNlIDogX29wdGlvbnMkd2l0aFRoZW1lLFxuICAgICAgICBfb3B0aW9ucyRub1NTUiA9IG9wdGlvbnMubm9TU1IsXG4gICAgICAgIG5vU1NSID0gX29wdGlvbnMkbm9TU1IgPT09IHZvaWQgMCA/IGZhbHNlIDogX29wdGlvbnMkbm9TU1IsXG4gICAgICAgIGluaXRpYWxXaWR0aE9wdGlvbiA9IG9wdGlvbnMuaW5pdGlhbFdpZHRoO1xuXG4gICAgZnVuY3Rpb24gV2l0aFdpZHRoKHByb3BzKSB7XG4gICAgICB2YXIgY29udGV4dFRoZW1lID0gdXNlVGhlbWUoKTtcbiAgICAgIHZhciB0aGVtZSA9IHByb3BzLnRoZW1lIHx8IGNvbnRleHRUaGVtZTtcblxuICAgICAgdmFyIF9nZXRUaGVtZVByb3BzID0gZ2V0VGhlbWVQcm9wcyh7XG4gICAgICAgIHRoZW1lOiB0aGVtZSxcbiAgICAgICAgbmFtZTogJ011aVdpdGhXaWR0aCcsXG4gICAgICAgIHByb3BzOiBfZXh0ZW5kcyh7fSwgcHJvcHMpXG4gICAgICB9KSxcbiAgICAgICAgICBpbml0aWFsV2lkdGggPSBfZ2V0VGhlbWVQcm9wcy5pbml0aWFsV2lkdGgsXG4gICAgICAgICAgd2lkdGggPSBfZ2V0VGhlbWVQcm9wcy53aWR0aCxcbiAgICAgICAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhfZ2V0VGhlbWVQcm9wcywgW1wiaW5pdGlhbFdpZHRoXCIsIFwid2lkdGhcIl0pO1xuXG4gICAgICB2YXIgX1JlYWN0JHVzZVN0YXRlID0gUmVhY3QudXNlU3RhdGUoZmFsc2UpLFxuICAgICAgICAgIG1vdW50ZWRTdGF0ZSA9IF9SZWFjdCR1c2VTdGF0ZVswXSxcbiAgICAgICAgICBzZXRNb3VudGVkU3RhdGUgPSBfUmVhY3QkdXNlU3RhdGVbMV07XG5cbiAgICAgIHVzZUVuaGFuY2VkRWZmZWN0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgc2V0TW91bnRlZFN0YXRlKHRydWUpO1xuICAgICAgfSwgW10pO1xuICAgICAgLyoqXG4gICAgICAgKiBpbm5lcldpZHRoIHx4cyAgICAgIHNtICAgICAgbWQgICAgICBsZyAgICAgIHhsXG4gICAgICAgKiAgICAgICAgICAgIHwtLS0tLS0tfC0tLS0tLS18LS0tLS0tLXwtLS0tLS0tfC0tLS0tLT5cbiAgICAgICAqIHdpZHRoICAgICAgfCAgeHMgICB8ICBzbSAgIHwgIG1kICAgfCAgbGcgICB8ICB4bFxuICAgICAgICovXG5cbiAgICAgIHZhciBrZXlzID0gdGhlbWUuYnJlYWtwb2ludHMua2V5cy5zbGljZSgpLnJldmVyc2UoKTtcbiAgICAgIHZhciB3aWR0aENvbXB1dGVkID0ga2V5cy5yZWR1Y2UoZnVuY3Rpb24gKG91dHB1dCwga2V5KSB7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWFjdC1ob29rcy9ydWxlcy1vZi1ob29rc1xuICAgICAgICB2YXIgbWF0Y2hlcyA9IHVzZU1lZGlhUXVlcnkodGhlbWUuYnJlYWtwb2ludHMudXAoa2V5KSk7XG4gICAgICAgIHJldHVybiAhb3V0cHV0ICYmIG1hdGNoZXMgPyBrZXkgOiBvdXRwdXQ7XG4gICAgICB9LCBudWxsKTtcblxuICAgICAgdmFyIG1vcmUgPSBfZXh0ZW5kcyh7XG4gICAgICAgIHdpZHRoOiB3aWR0aCB8fCAobW91bnRlZFN0YXRlIHx8IG5vU1NSID8gd2lkdGhDb21wdXRlZCA6IHVuZGVmaW5lZCkgfHwgaW5pdGlhbFdpZHRoIHx8IGluaXRpYWxXaWR0aE9wdGlvblxuICAgICAgfSwgd2l0aFRoZW1lT3B0aW9uID8ge1xuICAgICAgICB0aGVtZTogdGhlbWVcbiAgICAgIH0gOiB7fSwgb3RoZXIpOyAvLyBXaGVuIHJlbmRlcmluZyB0aGUgY29tcG9uZW50IG9uIHRoZSBzZXJ2ZXIsXG4gICAgICAvLyB3ZSBoYXZlIG5vIGlkZWEgYWJvdXQgdGhlIGNsaWVudCBicm93c2VyIHNjcmVlbiB3aWR0aC5cbiAgICAgIC8vIEluIG9yZGVyIHRvIHByZXZlbnQgYmxpbmtzIGFuZCBoZWxwIHRoZSByZWNvbmNpbGlhdGlvbiBvZiB0aGUgUmVhY3QgdHJlZVxuICAgICAgLy8gd2UgYXJlIG5vdCByZW5kZXJpbmcgdGhlIGNoaWxkIGNvbXBvbmVudC5cbiAgICAgIC8vXG4gICAgICAvLyBBbiBhbHRlcm5hdGl2ZSBpcyB0byB1c2UgdGhlIGBpbml0aWFsV2lkdGhgIHByb3BlcnR5LlxuXG5cbiAgICAgIGlmIChtb3JlLndpZHRoID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChDb21wb25lbnQsIG1vcmUpO1xuICAgIH1cblxuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFdpdGhXaWR0aC5wcm9wVHlwZXMgPSB7XG4gICAgICAvKipcbiAgICAgICAqIEFzIGB3aW5kb3cuaW5uZXJXaWR0aGAgaXMgdW5hdmFpbGFibGUgb24gdGhlIHNlcnZlcixcbiAgICAgICAqIHdlIGRlZmF1bHQgdG8gcmVuZGVyaW5nIGFuIGVtcHR5IGNvbXBvbmVudCBkdXJpbmcgdGhlIGZpcnN0IG1vdW50LlxuICAgICAgICogWW91IG1pZ2h0IHdhbnQgdG8gdXNlIGFuIGhldXJpc3RpYyB0byBhcHByb3hpbWF0ZVxuICAgICAgICogdGhlIHNjcmVlbiB3aWR0aCBvZiB0aGUgY2xpZW50IGJyb3dzZXIgc2NyZWVuIHdpZHRoLlxuICAgICAgICpcbiAgICAgICAqIEZvciBpbnN0YW5jZSwgeW91IGNvdWxkIGJlIHVzaW5nIHRoZSB1c2VyLWFnZW50IG9yIHRoZSBjbGllbnQtaGludHMuXG4gICAgICAgKiBodHRwczovL2Nhbml1c2UuY29tLyNzZWFyY2g9Y2xpZW50JTIwaGludFxuICAgICAgICovXG4gICAgICBpbml0aWFsV2lkdGg6IFByb3BUeXBlcy5vbmVPZihbJ3hzJywgJ3NtJywgJ21kJywgJ2xnJywgJ3hsJ10pLFxuXG4gICAgICAvKipcbiAgICAgICAqIEBpZ25vcmVcbiAgICAgICAqL1xuICAgICAgdGhlbWU6IFByb3BUeXBlcy5vYmplY3QsXG5cbiAgICAgIC8qKlxuICAgICAgICogQnlwYXNzIHRoZSB3aWR0aCBjYWxjdWxhdGlvbiBsb2dpYy5cbiAgICAgICAqL1xuICAgICAgd2lkdGg6IFByb3BUeXBlcy5vbmVPZihbJ3hzJywgJ3NtJywgJ21kJywgJ2xnJywgJ3hsJ10pXG4gICAgfSA6IHZvaWQgMDtcblxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBXaXRoV2lkdGguZGlzcGxheU5hbWUgPSBcIldpdGhXaWR0aChcIi5jb25jYXQoZ2V0RGlzcGxheU5hbWUoQ29tcG9uZW50KSwgXCIpXCIpO1xuICAgIH1cblxuICAgIGhvaXN0Tm9uUmVhY3RTdGF0aWNzKFdpdGhXaWR0aCwgQ29tcG9uZW50KTtcbiAgICByZXR1cm4gV2l0aFdpZHRoO1xuICB9O1xufTtcblxuZXhwb3J0IGRlZmF1bHQgd2l0aFdpZHRoOyIsImltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgeyBleGFjdFByb3AgfSBmcm9tICdAbWF0ZXJpYWwtdWkvdXRpbHMnO1xuaW1wb3J0IHdpdGhXaWR0aCwgeyBpc1dpZHRoRG93biwgaXNXaWR0aFVwIH0gZnJvbSAnLi4vd2l0aFdpZHRoJztcbmltcG9ydCB1c2VUaGVtZSBmcm9tICcuLi9zdHlsZXMvdXNlVGhlbWUnO1xuLyoqXG4gKiBAaWdub3JlIC0gaW50ZXJuYWwgY29tcG9uZW50LlxuICovXG5cbmZ1bmN0aW9uIEhpZGRlbkpzKHByb3BzKSB7XG4gIHZhciBjaGlsZHJlbiA9IHByb3BzLmNoaWxkcmVuLFxuICAgICAgb25seSA9IHByb3BzLm9ubHksXG4gICAgICB3aWR0aCA9IHByb3BzLndpZHRoO1xuICB2YXIgdGhlbWUgPSB1c2VUaGVtZSgpO1xuICB2YXIgdmlzaWJsZSA9IHRydWU7IC8vIGBvbmx5YCBjaGVjayBpcyBmYXN0ZXIgdG8gZ2V0IG91dCBzb29uZXIgaWYgdXNlZC5cblxuICBpZiAob25seSkge1xuICAgIGlmIChBcnJheS5pc0FycmF5KG9ubHkpKSB7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG9ubHkubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgdmFyIGJyZWFrcG9pbnQgPSBvbmx5W2ldO1xuXG4gICAgICAgIGlmICh3aWR0aCA9PT0gYnJlYWtwb2ludCkge1xuICAgICAgICAgIHZpc2libGUgPSBmYWxzZTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSBpZiAob25seSAmJiB3aWR0aCA9PT0gb25seSkge1xuICAgICAgdmlzaWJsZSA9IGZhbHNlO1xuICAgIH1cbiAgfSAvLyBBbGxvdyBgb25seWAgdG8gYmUgY29tYmluZWQgd2l0aCBvdGhlciBwcm9wcy4gSWYgYWxyZWFkeSBoaWRkZW4sIG5vIG5lZWQgdG8gY2hlY2sgb3RoZXJzLlxuXG5cbiAgaWYgKHZpc2libGUpIHtcbiAgICAvLyBkZXRlcm1pbmUgdmlzaWJpbGl0eSBiYXNlZCBvbiB0aGUgc21hbGxlc3Qgc2l6ZSB1cFxuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCB0aGVtZS5icmVha3BvaW50cy5rZXlzLmxlbmd0aDsgX2kgKz0gMSkge1xuICAgICAgdmFyIF9icmVha3BvaW50ID0gdGhlbWUuYnJlYWtwb2ludHMua2V5c1tfaV07XG4gICAgICB2YXIgYnJlYWtwb2ludFVwID0gcHJvcHNbXCJcIi5jb25jYXQoX2JyZWFrcG9pbnQsIFwiVXBcIildO1xuICAgICAgdmFyIGJyZWFrcG9pbnREb3duID0gcHJvcHNbXCJcIi5jb25jYXQoX2JyZWFrcG9pbnQsIFwiRG93blwiKV07XG5cbiAgICAgIGlmIChicmVha3BvaW50VXAgJiYgaXNXaWR0aFVwKF9icmVha3BvaW50LCB3aWR0aCkgfHwgYnJlYWtwb2ludERvd24gJiYgaXNXaWR0aERvd24oX2JyZWFrcG9pbnQsIHdpZHRoKSkge1xuICAgICAgICB2aXNpYmxlID0gZmFsc2U7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGlmICghdmlzaWJsZSkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgcmV0dXJuIGNoaWxkcmVuO1xufVxuXG5IaWRkZW5Kcy5wcm9wVHlwZXMgPSB7XG4gIC8qKlxuICAgKiBUaGUgY29udGVudCBvZiB0aGUgY29tcG9uZW50LlxuICAgKi9cbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIFNwZWNpZnkgd2hpY2ggaW1wbGVtZW50YXRpb24gdG8gdXNlLiAgJ2pzJyBpcyB0aGUgZGVmYXVsdCwgJ2Nzcycgd29ya3MgYmV0dGVyIGZvclxuICAgKiBzZXJ2ZXItc2lkZSByZW5kZXJpbmcuXG4gICAqL1xuICBpbXBsZW1lbnRhdGlvbjogUHJvcFR5cGVzLm9uZU9mKFsnanMnLCAnY3NzJ10pLFxuXG4gIC8qKlxuICAgKiBZb3UgY2FuIHVzZSB0aGlzIHByb3Agd2hlbiBjaG9vc2luZyB0aGUgYGpzYCBpbXBsZW1lbnRhdGlvbiB3aXRoIHNlcnZlci1zaWRlIHJlbmRlcmluZy5cbiAgICpcbiAgICogQXMgYHdpbmRvdy5pbm5lcldpZHRoYCBpcyB1bmF2YWlsYWJsZSBvbiB0aGUgc2VydmVyLFxuICAgKiB3ZSBkZWZhdWx0IHRvIHJlbmRlcmluZyBhbiBlbXB0eSBjb21wb25lbnQgZHVyaW5nIHRoZSBmaXJzdCBtb3VudC5cbiAgICogWW91IG1pZ2h0IHdhbnQgdG8gdXNlIGFuIGhldXJpc3RpYyB0byBhcHByb3hpbWF0ZVxuICAgKiB0aGUgc2NyZWVuIHdpZHRoIG9mIHRoZSBjbGllbnQgYnJvd3NlciBzY3JlZW4gd2lkdGguXG4gICAqXG4gICAqIEZvciBpbnN0YW5jZSwgeW91IGNvdWxkIGJlIHVzaW5nIHRoZSB1c2VyLWFnZW50IG9yIHRoZSBjbGllbnQtaGludHMuXG4gICAqIGh0dHBzOi8vY2FuaXVzZS5jb20vI3NlYXJjaD1jbGllbnQlMjBoaW50XG4gICAqL1xuICBpbml0aWFsV2lkdGg6IFByb3BUeXBlcy5vbmVPZihbJ3hzJywgJ3NtJywgJ21kJywgJ2xnJywgJ3hsJ10pLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHNjcmVlbnMgdGhpcyBzaXplIGFuZCBkb3duIHdpbGwgYmUgaGlkZGVuLlxuICAgKi9cbiAgbGdEb3duOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCBzY3JlZW5zIHRoaXMgc2l6ZSBhbmQgdXAgd2lsbCBiZSBoaWRkZW4uXG4gICAqL1xuICBsZ1VwOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCBzY3JlZW5zIHRoaXMgc2l6ZSBhbmQgZG93biB3aWxsIGJlIGhpZGRlbi5cbiAgICovXG4gIG1kRG93bjogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgc2NyZWVucyB0aGlzIHNpemUgYW5kIHVwIHdpbGwgYmUgaGlkZGVuLlxuICAgKi9cbiAgbWRVcDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIEhpZGUgdGhlIGdpdmVuIGJyZWFrcG9pbnQocykuXG4gICAqL1xuICBvbmx5OiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMub25lT2YoWyd4cycsICdzbScsICdtZCcsICdsZycsICd4bCddKSwgUHJvcFR5cGVzLmFycmF5T2YoUHJvcFR5cGVzLm9uZU9mKFsneHMnLCAnc20nLCAnbWQnLCAnbGcnLCAneGwnXSkpXSksXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgc2NyZWVucyB0aGlzIHNpemUgYW5kIGRvd24gd2lsbCBiZSBoaWRkZW4uXG4gICAqL1xuICBzbURvd246IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHNjcmVlbnMgdGhpcyBzaXplIGFuZCB1cCB3aWxsIGJlIGhpZGRlbi5cbiAgICovXG4gIHNtVXA6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqIHdpZHRoIHByb3AgcHJvdmlkZWQgYnkgd2l0aFdpZHRoIGRlY29yYXRvci5cbiAgICovXG4gIHdpZHRoOiBQcm9wVHlwZXMuc3RyaW5nLmlzUmVxdWlyZWQsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgc2NyZWVucyB0aGlzIHNpemUgYW5kIGRvd24gd2lsbCBiZSBoaWRkZW4uXG4gICAqL1xuICB4bERvd246IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHNjcmVlbnMgdGhpcyBzaXplIGFuZCB1cCB3aWxsIGJlIGhpZGRlbi5cbiAgICovXG4gIHhsVXA6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHNjcmVlbnMgdGhpcyBzaXplIGFuZCBkb3duIHdpbGwgYmUgaGlkZGVuLlxuICAgKi9cbiAgeHNEb3duOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCBzY3JlZW5zIHRoaXMgc2l6ZSBhbmQgdXAgd2lsbCBiZSBoaWRkZW4uXG4gICAqL1xuICB4c1VwOiBQcm9wVHlwZXMuYm9vbFxufTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgSGlkZGVuSnMucHJvcFR5cGVzID0gZXhhY3RQcm9wKEhpZGRlbkpzLnByb3BUeXBlcyk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IHdpdGhXaWR0aCgpKEhpZGRlbkpzKTsiLCJpbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc1wiO1xuaW1wb3J0IF9kZWZpbmVQcm9wZXJ0eSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZGVmaW5lUHJvcGVydHlcIjtcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgY2FwaXRhbGl6ZSBmcm9tICcuLi91dGlscy9jYXBpdGFsaXplJztcbmltcG9ydCB3aXRoU3R5bGVzIGZyb20gJy4uL3N0eWxlcy93aXRoU3R5bGVzJztcbmltcG9ydCB1c2VUaGVtZSBmcm9tICcuLi9zdHlsZXMvdXNlVGhlbWUnO1xuXG52YXIgc3R5bGVzID0gZnVuY3Rpb24gc3R5bGVzKHRoZW1lKSB7XG4gIHZhciBoaWRkZW4gPSB7XG4gICAgZGlzcGxheTogJ25vbmUnXG4gIH07XG4gIHJldHVybiB0aGVtZS5icmVha3BvaW50cy5rZXlzLnJlZHVjZShmdW5jdGlvbiAoYWNjLCBrZXkpIHtcbiAgICBhY2NbXCJvbmx5XCIuY29uY2F0KGNhcGl0YWxpemUoa2V5KSldID0gX2RlZmluZVByb3BlcnR5KHt9LCB0aGVtZS5icmVha3BvaW50cy5vbmx5KGtleSksIGhpZGRlbik7XG4gICAgYWNjW1wiXCIuY29uY2F0KGtleSwgXCJVcFwiKV0gPSBfZGVmaW5lUHJvcGVydHkoe30sIHRoZW1lLmJyZWFrcG9pbnRzLnVwKGtleSksIGhpZGRlbik7XG4gICAgYWNjW1wiXCIuY29uY2F0KGtleSwgXCJEb3duXCIpXSA9IF9kZWZpbmVQcm9wZXJ0eSh7fSwgdGhlbWUuYnJlYWtwb2ludHMuZG93bihrZXkpLCBoaWRkZW4pO1xuICAgIHJldHVybiBhY2M7XG4gIH0sIHt9KTtcbn07XG4vKipcbiAqIEBpZ25vcmUgLSBpbnRlcm5hbCBjb21wb25lbnQuXG4gKi9cblxuXG5mdW5jdGlvbiBIaWRkZW5Dc3MocHJvcHMpIHtcbiAgdmFyIGNoaWxkcmVuID0gcHJvcHMuY2hpbGRyZW4sXG4gICAgICBjbGFzc2VzID0gcHJvcHMuY2xhc3NlcyxcbiAgICAgIGNsYXNzTmFtZSA9IHByb3BzLmNsYXNzTmFtZSxcbiAgICAgIG9ubHkgPSBwcm9wcy5vbmx5LFxuICAgICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMocHJvcHMsIFtcImNoaWxkcmVuXCIsIFwiY2xhc3Nlc1wiLCBcImNsYXNzTmFtZVwiLCBcIm9ubHlcIl0pO1xuXG4gIHZhciB0aGVtZSA9IHVzZVRoZW1lKCk7XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICB2YXIgdW5rbm93blByb3BzID0gT2JqZWN0LmtleXMob3RoZXIpLmZpbHRlcihmdW5jdGlvbiAocHJvcE5hbWUpIHtcbiAgICAgIHZhciBpc1VuZGVjbGFyZWRCcmVha3BvaW50ID0gIXRoZW1lLmJyZWFrcG9pbnRzLmtleXMuc29tZShmdW5jdGlvbiAoYnJlYWtwb2ludCkge1xuICAgICAgICByZXR1cm4gXCJcIi5jb25jYXQoYnJlYWtwb2ludCwgXCJVcFwiKSA9PT0gcHJvcE5hbWUgfHwgXCJcIi5jb25jYXQoYnJlYWtwb2ludCwgXCJEb3duXCIpID09PSBwcm9wTmFtZTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIGlzVW5kZWNsYXJlZEJyZWFrcG9pbnQ7XG4gICAgfSk7XG5cbiAgICBpZiAodW5rbm93blByb3BzLmxlbmd0aCA+IDApIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoXCJNYXRlcmlhbC1VSTogVW5zdXBwb3J0ZWQgcHJvcHMgcmVjZWl2ZWQgYnkgYDxIaWRkZW4gaW1wbGVtZW50YXRpb249XFxcImNzc1xcXCIgLz5gOiBcIi5jb25jYXQodW5rbm93blByb3BzLmpvaW4oJywgJyksIFwiLiBEaWQgeW91IGZvcmdldCB0byB3cmFwIHRoaXMgY29tcG9uZW50IGluIGEgVGhlbWVQcm92aWRlciBkZWNsYXJpbmcgdGhlc2UgYnJlYWtwb2ludHM/XCIpKTtcbiAgICB9XG4gIH1cblxuICB2YXIgY2xzeCA9IFtdO1xuXG4gIGlmIChjbGFzc05hbWUpIHtcbiAgICBjbHN4LnB1c2goY2xhc3NOYW1lKTtcbiAgfVxuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgdGhlbWUuYnJlYWtwb2ludHMua2V5cy5sZW5ndGg7IGkgKz0gMSkge1xuICAgIHZhciBicmVha3BvaW50ID0gdGhlbWUuYnJlYWtwb2ludHMua2V5c1tpXTtcbiAgICB2YXIgYnJlYWtwb2ludFVwID0gcHJvcHNbXCJcIi5jb25jYXQoYnJlYWtwb2ludCwgXCJVcFwiKV07XG4gICAgdmFyIGJyZWFrcG9pbnREb3duID0gcHJvcHNbXCJcIi5jb25jYXQoYnJlYWtwb2ludCwgXCJEb3duXCIpXTtcblxuICAgIGlmIChicmVha3BvaW50VXApIHtcbiAgICAgIGNsc3gucHVzaChjbGFzc2VzW1wiXCIuY29uY2F0KGJyZWFrcG9pbnQsIFwiVXBcIildKTtcbiAgICB9XG5cbiAgICBpZiAoYnJlYWtwb2ludERvd24pIHtcbiAgICAgIGNsc3gucHVzaChjbGFzc2VzW1wiXCIuY29uY2F0KGJyZWFrcG9pbnQsIFwiRG93blwiKV0pO1xuICAgIH1cbiAgfVxuXG4gIGlmIChvbmx5KSB7XG4gICAgdmFyIG9ubHlCcmVha3BvaW50cyA9IEFycmF5LmlzQXJyYXkob25seSkgPyBvbmx5IDogW29ubHldO1xuICAgIG9ubHlCcmVha3BvaW50cy5mb3JFYWNoKGZ1bmN0aW9uIChicmVha3BvaW50KSB7XG4gICAgICBjbHN4LnB1c2goY2xhc3Nlc1tcIm9ubHlcIi5jb25jYXQoY2FwaXRhbGl6ZShicmVha3BvaW50KSldKTtcbiAgICB9KTtcbiAgfVxuXG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7XG4gICAgY2xhc3NOYW1lOiBjbHN4LmpvaW4oJyAnKVxuICB9LCBjaGlsZHJlbik7XG59XG5cbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IEhpZGRlbkNzcy5wcm9wVHlwZXMgPSB7XG4gIC8qKlxuICAgKiBUaGUgY29udGVudCBvZiB0aGUgY29tcG9uZW50LlxuICAgKi9cbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuXG4gIC8qKlxuICAgKiBPdmVycmlkZSBvciBleHRlbmQgdGhlIHN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAqIFNlZSBbQ1NTIEFQSV0oI2NzcykgYmVsb3cgZm9yIG1vcmUgZGV0YWlscy5cbiAgICovXG4gIGNsYXNzZXM6IFByb3BUeXBlcy5vYmplY3QuaXNSZXF1aXJlZCxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBTcGVjaWZ5IHdoaWNoIGltcGxlbWVudGF0aW9uIHRvIHVzZS4gICdqcycgaXMgdGhlIGRlZmF1bHQsICdjc3MnIHdvcmtzIGJldHRlciBmb3JcbiAgICogc2VydmVyLXNpZGUgcmVuZGVyaW5nLlxuICAgKi9cbiAgaW1wbGVtZW50YXRpb246IFByb3BUeXBlcy5vbmVPZihbJ2pzJywgJ2NzcyddKSxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCBzY3JlZW5zIHRoaXMgc2l6ZSBhbmQgZG93biB3aWxsIGJlIGhpZGRlbi5cbiAgICovXG4gIGxnRG93bjogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgc2NyZWVucyB0aGlzIHNpemUgYW5kIHVwIHdpbGwgYmUgaGlkZGVuLlxuICAgKi9cbiAgbGdVcDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgc2NyZWVucyB0aGlzIHNpemUgYW5kIGRvd24gd2lsbCBiZSBoaWRkZW4uXG4gICAqL1xuICBtZERvd246IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHNjcmVlbnMgdGhpcyBzaXplIGFuZCB1cCB3aWxsIGJlIGhpZGRlbi5cbiAgICovXG4gIG1kVXA6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBIaWRlIHRoZSBnaXZlbiBicmVha3BvaW50KHMpLlxuICAgKi9cbiAgb25seTogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLm9uZU9mKFsneHMnLCAnc20nLCAnbWQnLCAnbGcnLCAneGwnXSksIFByb3BUeXBlcy5hcnJheU9mKFByb3BUeXBlcy5vbmVPZihbJ3hzJywgJ3NtJywgJ21kJywgJ2xnJywgJ3hsJ10pKV0pLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHNjcmVlbnMgdGhpcyBzaXplIGFuZCBkb3duIHdpbGwgYmUgaGlkZGVuLlxuICAgKi9cbiAgc21Eb3duOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCBzY3JlZW5zIHRoaXMgc2l6ZSBhbmQgdXAgd2lsbCBiZSBoaWRkZW4uXG4gICAqL1xuICBzbVVwOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCBzY3JlZW5zIHRoaXMgc2l6ZSBhbmQgZG93biB3aWxsIGJlIGhpZGRlbi5cbiAgICovXG4gIHhsRG93bjogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgc2NyZWVucyB0aGlzIHNpemUgYW5kIHVwIHdpbGwgYmUgaGlkZGVuLlxuICAgKi9cbiAgeGxVcDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgc2NyZWVucyB0aGlzIHNpemUgYW5kIGRvd24gd2lsbCBiZSBoaWRkZW4uXG4gICAqL1xuICB4c0Rvd246IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHNjcmVlbnMgdGhpcyBzaXplIGFuZCB1cCB3aWxsIGJlIGhpZGRlbi5cbiAgICovXG4gIHhzVXA6IFByb3BUeXBlcy5ib29sXG59IDogdm9pZCAwO1xuZXhwb3J0IGRlZmF1bHQgd2l0aFN0eWxlcyhzdHlsZXMsIHtcbiAgbmFtZTogJ1ByaXZhdGVIaWRkZW5Dc3MnXG59KShIaWRkZW5Dc3MpOyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNcIjtcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgSGlkZGVuSnMgZnJvbSAnLi9IaWRkZW5Kcyc7XG5pbXBvcnQgSGlkZGVuQ3NzIGZyb20gJy4vSGlkZGVuQ3NzJztcbi8qKlxuICogUmVzcG9uc2l2ZWx5IGhpZGVzIGNoaWxkcmVuIGJhc2VkIG9uIHRoZSBzZWxlY3RlZCBpbXBsZW1lbnRhdGlvbi5cbiAqL1xuXG5mdW5jdGlvbiBIaWRkZW4ocHJvcHMpIHtcbiAgdmFyIF9wcm9wcyRpbXBsZW1lbnRhdGlvbiA9IHByb3BzLmltcGxlbWVudGF0aW9uLFxuICAgICAgaW1wbGVtZW50YXRpb24gPSBfcHJvcHMkaW1wbGVtZW50YXRpb24gPT09IHZvaWQgMCA/ICdqcycgOiBfcHJvcHMkaW1wbGVtZW50YXRpb24sXG4gICAgICBfcHJvcHMkbGdEb3duID0gcHJvcHMubGdEb3duLFxuICAgICAgbGdEb3duID0gX3Byb3BzJGxnRG93biA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcHJvcHMkbGdEb3duLFxuICAgICAgX3Byb3BzJGxnVXAgPSBwcm9wcy5sZ1VwLFxuICAgICAgbGdVcCA9IF9wcm9wcyRsZ1VwID09PSB2b2lkIDAgPyBmYWxzZSA6IF9wcm9wcyRsZ1VwLFxuICAgICAgX3Byb3BzJG1kRG93biA9IHByb3BzLm1kRG93bixcbiAgICAgIG1kRG93biA9IF9wcm9wcyRtZERvd24gPT09IHZvaWQgMCA/IGZhbHNlIDogX3Byb3BzJG1kRG93bixcbiAgICAgIF9wcm9wcyRtZFVwID0gcHJvcHMubWRVcCxcbiAgICAgIG1kVXAgPSBfcHJvcHMkbWRVcCA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcHJvcHMkbWRVcCxcbiAgICAgIF9wcm9wcyRzbURvd24gPSBwcm9wcy5zbURvd24sXG4gICAgICBzbURvd24gPSBfcHJvcHMkc21Eb3duID09PSB2b2lkIDAgPyBmYWxzZSA6IF9wcm9wcyRzbURvd24sXG4gICAgICBfcHJvcHMkc21VcCA9IHByb3BzLnNtVXAsXG4gICAgICBzbVVwID0gX3Byb3BzJHNtVXAgPT09IHZvaWQgMCA/IGZhbHNlIDogX3Byb3BzJHNtVXAsXG4gICAgICBfcHJvcHMkeGxEb3duID0gcHJvcHMueGxEb3duLFxuICAgICAgeGxEb3duID0gX3Byb3BzJHhsRG93biA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcHJvcHMkeGxEb3duLFxuICAgICAgX3Byb3BzJHhsVXAgPSBwcm9wcy54bFVwLFxuICAgICAgeGxVcCA9IF9wcm9wcyR4bFVwID09PSB2b2lkIDAgPyBmYWxzZSA6IF9wcm9wcyR4bFVwLFxuICAgICAgX3Byb3BzJHhzRG93biA9IHByb3BzLnhzRG93bixcbiAgICAgIHhzRG93biA9IF9wcm9wcyR4c0Rvd24gPT09IHZvaWQgMCA/IGZhbHNlIDogX3Byb3BzJHhzRG93bixcbiAgICAgIF9wcm9wcyR4c1VwID0gcHJvcHMueHNVcCxcbiAgICAgIHhzVXAgPSBfcHJvcHMkeHNVcCA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcHJvcHMkeHNVcCxcbiAgICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKHByb3BzLCBbXCJpbXBsZW1lbnRhdGlvblwiLCBcImxnRG93blwiLCBcImxnVXBcIiwgXCJtZERvd25cIiwgXCJtZFVwXCIsIFwic21Eb3duXCIsIFwic21VcFwiLCBcInhsRG93blwiLCBcInhsVXBcIiwgXCJ4c0Rvd25cIiwgXCJ4c1VwXCJdKTtcblxuICBpZiAoaW1wbGVtZW50YXRpb24gPT09ICdqcycpIHtcbiAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoSGlkZGVuSnMsIF9leHRlbmRzKHtcbiAgICAgIGxnRG93bjogbGdEb3duLFxuICAgICAgbGdVcDogbGdVcCxcbiAgICAgIG1kRG93bjogbWREb3duLFxuICAgICAgbWRVcDogbWRVcCxcbiAgICAgIHNtRG93bjogc21Eb3duLFxuICAgICAgc21VcDogc21VcCxcbiAgICAgIHhsRG93bjogeGxEb3duLFxuICAgICAgeGxVcDogeGxVcCxcbiAgICAgIHhzRG93bjogeHNEb3duLFxuICAgICAgeHNVcDogeHNVcFxuICAgIH0sIG90aGVyKSk7XG4gIH1cblxuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoSGlkZGVuQ3NzLCBfZXh0ZW5kcyh7XG4gICAgbGdEb3duOiBsZ0Rvd24sXG4gICAgbGdVcDogbGdVcCxcbiAgICBtZERvd246IG1kRG93bixcbiAgICBtZFVwOiBtZFVwLFxuICAgIHNtRG93bjogc21Eb3duLFxuICAgIHNtVXA6IHNtVXAsXG4gICAgeGxEb3duOiB4bERvd24sXG4gICAgeGxVcDogeGxVcCxcbiAgICB4c0Rvd246IHhzRG93bixcbiAgICB4c1VwOiB4c1VwXG4gIH0sIG90aGVyKSk7XG59XG5cbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IEhpZGRlbi5wcm9wVHlwZXMgPSB7XG4gIC8qKlxuICAgKiBUaGUgY29udGVudCBvZiB0aGUgY29tcG9uZW50LlxuICAgKi9cbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIFNwZWNpZnkgd2hpY2ggaW1wbGVtZW50YXRpb24gdG8gdXNlLiAgJ2pzJyBpcyB0aGUgZGVmYXVsdCwgJ2Nzcycgd29ya3MgYmV0dGVyIGZvclxuICAgKiBzZXJ2ZXItc2lkZSByZW5kZXJpbmcuXG4gICAqL1xuICBpbXBsZW1lbnRhdGlvbjogUHJvcFR5cGVzLm9uZU9mKFsnanMnLCAnY3NzJ10pLFxuXG4gIC8qKlxuICAgKiBZb3UgY2FuIHVzZSB0aGlzIHByb3Agd2hlbiBjaG9vc2luZyB0aGUgYGpzYCBpbXBsZW1lbnRhdGlvbiB3aXRoIHNlcnZlci1zaWRlIHJlbmRlcmluZy5cbiAgICpcbiAgICogQXMgYHdpbmRvdy5pbm5lcldpZHRoYCBpcyB1bmF2YWlsYWJsZSBvbiB0aGUgc2VydmVyLFxuICAgKiB3ZSBkZWZhdWx0IHRvIHJlbmRlcmluZyBhbiBlbXB0eSBjb21wb25lbnQgZHVyaW5nIHRoZSBmaXJzdCBtb3VudC5cbiAgICogWW91IG1pZ2h0IHdhbnQgdG8gdXNlIGFuIGhldXJpc3RpYyB0byBhcHByb3hpbWF0ZVxuICAgKiB0aGUgc2NyZWVuIHdpZHRoIG9mIHRoZSBjbGllbnQgYnJvd3NlciBzY3JlZW4gd2lkdGguXG4gICAqXG4gICAqIEZvciBpbnN0YW5jZSwgeW91IGNvdWxkIGJlIHVzaW5nIHRoZSB1c2VyLWFnZW50IG9yIHRoZSBjbGllbnQtaGludHMuXG4gICAqIGh0dHBzOi8vY2FuaXVzZS5jb20vI3NlYXJjaD1jbGllbnQlMjBoaW50XG4gICAqL1xuICBpbml0aWFsV2lkdGg6IFByb3BUeXBlcy5vbmVPZihbJ3hzJywgJ3NtJywgJ21kJywgJ2xnJywgJ3hsJ10pLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHNjcmVlbnMgdGhpcyBzaXplIGFuZCBkb3duIHdpbGwgYmUgaGlkZGVuLlxuICAgKi9cbiAgbGdEb3duOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCBzY3JlZW5zIHRoaXMgc2l6ZSBhbmQgdXAgd2lsbCBiZSBoaWRkZW4uXG4gICAqL1xuICBsZ1VwOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCBzY3JlZW5zIHRoaXMgc2l6ZSBhbmQgZG93biB3aWxsIGJlIGhpZGRlbi5cbiAgICovXG4gIG1kRG93bjogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgc2NyZWVucyB0aGlzIHNpemUgYW5kIHVwIHdpbGwgYmUgaGlkZGVuLlxuICAgKi9cbiAgbWRVcDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIEhpZGUgdGhlIGdpdmVuIGJyZWFrcG9pbnQocykuXG4gICAqL1xuICBvbmx5OiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMub25lT2YoWyd4cycsICdzbScsICdtZCcsICdsZycsICd4bCddKSwgUHJvcFR5cGVzLmFycmF5T2YoUHJvcFR5cGVzLm9uZU9mKFsneHMnLCAnc20nLCAnbWQnLCAnbGcnLCAneGwnXSkpXSksXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgc2NyZWVucyB0aGlzIHNpemUgYW5kIGRvd24gd2lsbCBiZSBoaWRkZW4uXG4gICAqL1xuICBzbURvd246IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHNjcmVlbnMgdGhpcyBzaXplIGFuZCB1cCB3aWxsIGJlIGhpZGRlbi5cbiAgICovXG4gIHNtVXA6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHNjcmVlbnMgdGhpcyBzaXplIGFuZCBkb3duIHdpbGwgYmUgaGlkZGVuLlxuICAgKi9cbiAgeGxEb3duOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCBzY3JlZW5zIHRoaXMgc2l6ZSBhbmQgdXAgd2lsbCBiZSBoaWRkZW4uXG4gICAqL1xuICB4bFVwOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCBzY3JlZW5zIHRoaXMgc2l6ZSBhbmQgZG93biB3aWxsIGJlIGhpZGRlbi5cbiAgICovXG4gIHhzRG93bjogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgc2NyZWVucyB0aGlzIHNpemUgYW5kIHVwIHdpbGwgYmUgaGlkZGVuLlxuICAgKi9cbiAgeHNVcDogUHJvcFR5cGVzLmJvb2xcbn0gOiB2b2lkIDA7XG5leHBvcnQgZGVmYXVsdCBIaWRkZW47IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX3NsaWNlZFRvQXJyYXkgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL3NsaWNlZFRvQXJyYXlcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzXCI7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHsgVHJhbnNpdGlvbiB9IGZyb20gJ3JlYWN0LXRyYW5zaXRpb24tZ3JvdXAnO1xuaW1wb3J0IHsgZHVyYXRpb24gfSBmcm9tICcuLi9zdHlsZXMvdHJhbnNpdGlvbnMnO1xuaW1wb3J0IHVzZVRoZW1lIGZyb20gJy4uL3N0eWxlcy91c2VUaGVtZSc7XG5pbXBvcnQgeyByZWZsb3csIGdldFRyYW5zaXRpb25Qcm9wcyB9IGZyb20gJy4uL3RyYW5zaXRpb25zL3V0aWxzJztcbmltcG9ydCB1c2VGb3JrUmVmIGZyb20gJy4uL3V0aWxzL3VzZUZvcmtSZWYnO1xudmFyIHN0eWxlcyA9IHtcbiAgZW50ZXJpbmc6IHtcbiAgICBvcGFjaXR5OiAxXG4gIH0sXG4gIGVudGVyZWQ6IHtcbiAgICBvcGFjaXR5OiAxXG4gIH1cbn07XG52YXIgZGVmYXVsdFRpbWVvdXQgPSB7XG4gIGVudGVyOiBkdXJhdGlvbi5lbnRlcmluZ1NjcmVlbixcbiAgZXhpdDogZHVyYXRpb24ubGVhdmluZ1NjcmVlblxufTtcbi8qKlxuICogVGhlIEZhZGUgdHJhbnNpdGlvbiBpcyB1c2VkIGJ5IHRoZSBbTW9kYWxdKC9jb21wb25lbnRzL21vZGFsLykgY29tcG9uZW50LlxuICogSXQgdXNlcyBbcmVhY3QtdHJhbnNpdGlvbi1ncm91cF0oaHR0cHM6Ly9naXRodWIuY29tL3JlYWN0anMvcmVhY3QtdHJhbnNpdGlvbi1ncm91cCkgaW50ZXJuYWxseS5cbiAqL1xuXG52YXIgRmFkZSA9IC8qI19fUFVSRV9fKi9SZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIEZhZGUocHJvcHMsIHJlZikge1xuICB2YXIgY2hpbGRyZW4gPSBwcm9wcy5jaGlsZHJlbixcbiAgICAgIF9wcm9wcyRkaXNhYmxlU3RyaWN0TSA9IHByb3BzLmRpc2FibGVTdHJpY3RNb2RlQ29tcGF0LFxuICAgICAgZGlzYWJsZVN0cmljdE1vZGVDb21wYXQgPSBfcHJvcHMkZGlzYWJsZVN0cmljdE0gPT09IHZvaWQgMCA/IGZhbHNlIDogX3Byb3BzJGRpc2FibGVTdHJpY3RNLFxuICAgICAgaW5Qcm9wID0gcHJvcHMuaW4sXG4gICAgICBvbkVudGVyID0gcHJvcHMub25FbnRlcixcbiAgICAgIG9uRW50ZXJlZCA9IHByb3BzLm9uRW50ZXJlZCxcbiAgICAgIG9uRW50ZXJpbmcgPSBwcm9wcy5vbkVudGVyaW5nLFxuICAgICAgb25FeGl0ID0gcHJvcHMub25FeGl0LFxuICAgICAgb25FeGl0ZWQgPSBwcm9wcy5vbkV4aXRlZCxcbiAgICAgIG9uRXhpdGluZyA9IHByb3BzLm9uRXhpdGluZyxcbiAgICAgIHN0eWxlID0gcHJvcHMuc3R5bGUsXG4gICAgICBfcHJvcHMkVHJhbnNpdGlvbkNvbXAgPSBwcm9wcy5UcmFuc2l0aW9uQ29tcG9uZW50LFxuICAgICAgVHJhbnNpdGlvbkNvbXBvbmVudCA9IF9wcm9wcyRUcmFuc2l0aW9uQ29tcCA9PT0gdm9pZCAwID8gVHJhbnNpdGlvbiA6IF9wcm9wcyRUcmFuc2l0aW9uQ29tcCxcbiAgICAgIF9wcm9wcyR0aW1lb3V0ID0gcHJvcHMudGltZW91dCxcbiAgICAgIHRpbWVvdXQgPSBfcHJvcHMkdGltZW91dCA9PT0gdm9pZCAwID8gZGVmYXVsdFRpbWVvdXQgOiBfcHJvcHMkdGltZW91dCxcbiAgICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKHByb3BzLCBbXCJjaGlsZHJlblwiLCBcImRpc2FibGVTdHJpY3RNb2RlQ29tcGF0XCIsIFwiaW5cIiwgXCJvbkVudGVyXCIsIFwib25FbnRlcmVkXCIsIFwib25FbnRlcmluZ1wiLCBcIm9uRXhpdFwiLCBcIm9uRXhpdGVkXCIsIFwib25FeGl0aW5nXCIsIFwic3R5bGVcIiwgXCJUcmFuc2l0aW9uQ29tcG9uZW50XCIsIFwidGltZW91dFwiXSk7XG5cbiAgdmFyIHRoZW1lID0gdXNlVGhlbWUoKTtcbiAgdmFyIGVuYWJsZVN0cmljdE1vZGVDb21wYXQgPSB0aGVtZS51bnN0YWJsZV9zdHJpY3RNb2RlICYmICFkaXNhYmxlU3RyaWN0TW9kZUNvbXBhdDtcbiAgdmFyIG5vZGVSZWYgPSBSZWFjdC51c2VSZWYobnVsbCk7XG4gIHZhciBmb3JlaWduUmVmID0gdXNlRm9ya1JlZihjaGlsZHJlbi5yZWYsIHJlZik7XG4gIHZhciBoYW5kbGVSZWYgPSB1c2VGb3JrUmVmKGVuYWJsZVN0cmljdE1vZGVDb21wYXQgPyBub2RlUmVmIDogdW5kZWZpbmVkLCBmb3JlaWduUmVmKTtcblxuICB2YXIgbm9ybWFsaXplZFRyYW5zaXRpb25DYWxsYmFjayA9IGZ1bmN0aW9uIG5vcm1hbGl6ZWRUcmFuc2l0aW9uQ2FsbGJhY2soY2FsbGJhY2spIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKG5vZGVPckFwcGVhcmluZywgbWF5YmVBcHBlYXJpbmcpIHtcbiAgICAgIGlmIChjYWxsYmFjaykge1xuICAgICAgICB2YXIgX3JlZiA9IGVuYWJsZVN0cmljdE1vZGVDb21wYXQgPyBbbm9kZVJlZi5jdXJyZW50LCBub2RlT3JBcHBlYXJpbmddIDogW25vZGVPckFwcGVhcmluZywgbWF5YmVBcHBlYXJpbmddLFxuICAgICAgICAgICAgX3JlZjIgPSBfc2xpY2VkVG9BcnJheShfcmVmLCAyKSxcbiAgICAgICAgICAgIG5vZGUgPSBfcmVmMlswXSxcbiAgICAgICAgICAgIGlzQXBwZWFyaW5nID0gX3JlZjJbMV07IC8vIG9uRW50ZXJYeHggYW5kIG9uRXhpdFh4eCBjYWxsYmFja3MgaGF2ZSBhIGRpZmZlcmVudCBhcmd1bWVudHMubGVuZ3RoIHZhbHVlLlxuXG5cbiAgICAgICAgaWYgKGlzQXBwZWFyaW5nID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBjYWxsYmFjayhub2RlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjYWxsYmFjayhub2RlLCBpc0FwcGVhcmluZyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuICB9O1xuXG4gIHZhciBoYW5kbGVFbnRlcmluZyA9IG5vcm1hbGl6ZWRUcmFuc2l0aW9uQ2FsbGJhY2sob25FbnRlcmluZyk7XG4gIHZhciBoYW5kbGVFbnRlciA9IG5vcm1hbGl6ZWRUcmFuc2l0aW9uQ2FsbGJhY2soZnVuY3Rpb24gKG5vZGUsIGlzQXBwZWFyaW5nKSB7XG4gICAgcmVmbG93KG5vZGUpOyAvLyBTbyB0aGUgYW5pbWF0aW9uIGFsd2F5cyBzdGFydCBmcm9tIHRoZSBzdGFydC5cblxuICAgIHZhciB0cmFuc2l0aW9uUHJvcHMgPSBnZXRUcmFuc2l0aW9uUHJvcHMoe1xuICAgICAgc3R5bGU6IHN0eWxlLFxuICAgICAgdGltZW91dDogdGltZW91dFxuICAgIH0sIHtcbiAgICAgIG1vZGU6ICdlbnRlcidcbiAgICB9KTtcbiAgICBub2RlLnN0eWxlLndlYmtpdFRyYW5zaXRpb24gPSB0aGVtZS50cmFuc2l0aW9ucy5jcmVhdGUoJ29wYWNpdHknLCB0cmFuc2l0aW9uUHJvcHMpO1xuICAgIG5vZGUuc3R5bGUudHJhbnNpdGlvbiA9IHRoZW1lLnRyYW5zaXRpb25zLmNyZWF0ZSgnb3BhY2l0eScsIHRyYW5zaXRpb25Qcm9wcyk7XG5cbiAgICBpZiAob25FbnRlcikge1xuICAgICAgb25FbnRlcihub2RlLCBpc0FwcGVhcmluZyk7XG4gICAgfVxuICB9KTtcbiAgdmFyIGhhbmRsZUVudGVyZWQgPSBub3JtYWxpemVkVHJhbnNpdGlvbkNhbGxiYWNrKG9uRW50ZXJlZCk7XG4gIHZhciBoYW5kbGVFeGl0aW5nID0gbm9ybWFsaXplZFRyYW5zaXRpb25DYWxsYmFjayhvbkV4aXRpbmcpO1xuICB2YXIgaGFuZGxlRXhpdCA9IG5vcm1hbGl6ZWRUcmFuc2l0aW9uQ2FsbGJhY2soZnVuY3Rpb24gKG5vZGUpIHtcbiAgICB2YXIgdHJhbnNpdGlvblByb3BzID0gZ2V0VHJhbnNpdGlvblByb3BzKHtcbiAgICAgIHN0eWxlOiBzdHlsZSxcbiAgICAgIHRpbWVvdXQ6IHRpbWVvdXRcbiAgICB9LCB7XG4gICAgICBtb2RlOiAnZXhpdCdcbiAgICB9KTtcbiAgICBub2RlLnN0eWxlLndlYmtpdFRyYW5zaXRpb24gPSB0aGVtZS50cmFuc2l0aW9ucy5jcmVhdGUoJ29wYWNpdHknLCB0cmFuc2l0aW9uUHJvcHMpO1xuICAgIG5vZGUuc3R5bGUudHJhbnNpdGlvbiA9IHRoZW1lLnRyYW5zaXRpb25zLmNyZWF0ZSgnb3BhY2l0eScsIHRyYW5zaXRpb25Qcm9wcyk7XG5cbiAgICBpZiAob25FeGl0KSB7XG4gICAgICBvbkV4aXQobm9kZSk7XG4gICAgfVxuICB9KTtcbiAgdmFyIGhhbmRsZUV4aXRlZCA9IG5vcm1hbGl6ZWRUcmFuc2l0aW9uQ2FsbGJhY2sob25FeGl0ZWQpO1xuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoVHJhbnNpdGlvbkNvbXBvbmVudCwgX2V4dGVuZHMoe1xuICAgIGFwcGVhcjogdHJ1ZSxcbiAgICBpbjogaW5Qcm9wLFxuICAgIG5vZGVSZWY6IGVuYWJsZVN0cmljdE1vZGVDb21wYXQgPyBub2RlUmVmIDogdW5kZWZpbmVkLFxuICAgIG9uRW50ZXI6IGhhbmRsZUVudGVyLFxuICAgIG9uRW50ZXJlZDogaGFuZGxlRW50ZXJlZCxcbiAgICBvbkVudGVyaW5nOiBoYW5kbGVFbnRlcmluZyxcbiAgICBvbkV4aXQ6IGhhbmRsZUV4aXQsXG4gICAgb25FeGl0ZWQ6IGhhbmRsZUV4aXRlZCxcbiAgICBvbkV4aXRpbmc6IGhhbmRsZUV4aXRpbmcsXG4gICAgdGltZW91dDogdGltZW91dFxuICB9LCBvdGhlciksIGZ1bmN0aW9uIChzdGF0ZSwgY2hpbGRQcm9wcykge1xuICAgIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY2xvbmVFbGVtZW50KGNoaWxkcmVuLCBfZXh0ZW5kcyh7XG4gICAgICBzdHlsZTogX2V4dGVuZHMoe1xuICAgICAgICBvcGFjaXR5OiAwLFxuICAgICAgICB2aXNpYmlsaXR5OiBzdGF0ZSA9PT0gJ2V4aXRlZCcgJiYgIWluUHJvcCA/ICdoaWRkZW4nIDogdW5kZWZpbmVkXG4gICAgICB9LCBzdHlsZXNbc3RhdGVdLCBzdHlsZSwgY2hpbGRyZW4ucHJvcHMuc3R5bGUpLFxuICAgICAgcmVmOiBoYW5kbGVSZWZcbiAgICB9LCBjaGlsZFByb3BzKSk7XG4gIH0pO1xufSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBGYWRlLnByb3BUeXBlcyA9IHtcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gV2FybmluZyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAvLyB8IFRoZXNlIFByb3BUeXBlcyBhcmUgZ2VuZXJhdGVkIGZyb20gdGhlIFR5cGVTY3JpcHQgdHlwZSBkZWZpbml0aW9ucyB8XG4gIC8vIHwgICAgIFRvIHVwZGF0ZSB0aGVtIGVkaXQgdGhlIGQudHMgZmlsZSBhbmQgcnVuIFwieWFybiBwcm9wdHlwZXNcIiAgICAgfFxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbiAgLyoqXG4gICAqIEEgc2luZ2xlIGNoaWxkIGNvbnRlbnQgZWxlbWVudC5cbiAgICovXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMuZWxlbWVudCxcblxuICAvKipcbiAgICogRW5hYmxlIHRoaXMgcHJvcCBpZiB5b3UgZW5jb3VudGVyICdGdW5jdGlvbiBjb21wb25lbnRzIGNhbm5vdCBiZSBnaXZlbiByZWZzJyxcbiAgICogdXNlIGB1bnN0YWJsZV9jcmVhdGVTdHJpY3RNb2RlVGhlbWVgLFxuICAgKiBhbmQgY2FuJ3QgZm9yd2FyZCB0aGUgcmVmIGluIHRoZSBjaGlsZCBjb21wb25lbnQuXG4gICAqL1xuICBkaXNhYmxlU3RyaWN0TW9kZUNvbXBhdDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGNvbXBvbmVudCB3aWxsIHRyYW5zaXRpb24gaW4uXG4gICAqL1xuICBpbjogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIG9uRW50ZXI6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBvbkVudGVyZWQ6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBvbkVudGVyaW5nOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgb25FeGl0OiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgb25FeGl0ZWQ6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBvbkV4aXRpbmc6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBzdHlsZTogUHJvcFR5cGVzLm9iamVjdCxcblxuICAvKipcbiAgICogVGhlIGR1cmF0aW9uIGZvciB0aGUgdHJhbnNpdGlvbiwgaW4gbWlsbGlzZWNvbmRzLlxuICAgKiBZb3UgbWF5IHNwZWNpZnkgYSBzaW5nbGUgdGltZW91dCBmb3IgYWxsIHRyYW5zaXRpb25zLCBvciBpbmRpdmlkdWFsbHkgd2l0aCBhbiBvYmplY3QuXG4gICAqL1xuICB0aW1lb3V0OiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMubnVtYmVyLCBQcm9wVHlwZXMuc2hhcGUoe1xuICAgIGFwcGVhcjogUHJvcFR5cGVzLm51bWJlcixcbiAgICBlbnRlcjogUHJvcFR5cGVzLm51bWJlcixcbiAgICBleGl0OiBQcm9wVHlwZXMubnVtYmVyXG4gIH0pXSlcbn0gOiB2b2lkIDA7XG5leHBvcnQgZGVmYXVsdCBGYWRlOyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNcIjtcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgY2xzeCBmcm9tICdjbHN4JztcbmltcG9ydCB3aXRoU3R5bGVzIGZyb20gJy4uL3N0eWxlcy93aXRoU3R5bGVzJztcbmltcG9ydCBGYWRlIGZyb20gJy4uL0ZhZGUnO1xuZXhwb3J0IHZhciBzdHlsZXMgPSB7XG4gIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQuICovXG4gIHJvb3Q6IHtcbiAgICAvLyBJbXByb3ZlIHNjcm9sbGFibGUgZGlhbG9nIHN1cHBvcnQuXG4gICAgekluZGV4OiAtMSxcbiAgICBwb3NpdGlvbjogJ2ZpeGVkJyxcbiAgICBkaXNwbGF5OiAnZmxleCcsXG4gICAgYWxpZ25JdGVtczogJ2NlbnRlcicsXG4gICAganVzdGlmeUNvbnRlbnQ6ICdjZW50ZXInLFxuICAgIHJpZ2h0OiAwLFxuICAgIGJvdHRvbTogMCxcbiAgICB0b3A6IDAsXG4gICAgbGVmdDogMCxcbiAgICBiYWNrZ3JvdW5kQ29sb3I6ICdyZ2JhKDAsIDAsIDAsIDAuNSknLFxuICAgIFdlYmtpdFRhcEhpZ2hsaWdodENvbG9yOiAndHJhbnNwYXJlbnQnXG4gIH0sXG5cbiAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgaW52aXNpYmxlPXt0cnVlfWAuICovXG4gIGludmlzaWJsZToge1xuICAgIGJhY2tncm91bmRDb2xvcjogJ3RyYW5zcGFyZW50J1xuICB9XG59O1xudmFyIEJhY2tkcm9wID0gLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gQmFja2Ryb3AocHJvcHMsIHJlZikge1xuICB2YXIgY2hpbGRyZW4gPSBwcm9wcy5jaGlsZHJlbixcbiAgICAgIGNsYXNzZXMgPSBwcm9wcy5jbGFzc2VzLFxuICAgICAgY2xhc3NOYW1lID0gcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgX3Byb3BzJGludmlzaWJsZSA9IHByb3BzLmludmlzaWJsZSxcbiAgICAgIGludmlzaWJsZSA9IF9wcm9wcyRpbnZpc2libGUgPT09IHZvaWQgMCA/IGZhbHNlIDogX3Byb3BzJGludmlzaWJsZSxcbiAgICAgIG9wZW4gPSBwcm9wcy5vcGVuLFxuICAgICAgdHJhbnNpdGlvbkR1cmF0aW9uID0gcHJvcHMudHJhbnNpdGlvbkR1cmF0aW9uLFxuICAgICAgX3Byb3BzJFRyYW5zaXRpb25Db21wID0gcHJvcHMuVHJhbnNpdGlvbkNvbXBvbmVudCxcbiAgICAgIFRyYW5zaXRpb25Db21wb25lbnQgPSBfcHJvcHMkVHJhbnNpdGlvbkNvbXAgPT09IHZvaWQgMCA/IEZhZGUgOiBfcHJvcHMkVHJhbnNpdGlvbkNvbXAsXG4gICAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhwcm9wcywgW1wiY2hpbGRyZW5cIiwgXCJjbGFzc2VzXCIsIFwiY2xhc3NOYW1lXCIsIFwiaW52aXNpYmxlXCIsIFwib3BlblwiLCBcInRyYW5zaXRpb25EdXJhdGlvblwiLCBcIlRyYW5zaXRpb25Db21wb25lbnRcIl0pO1xuXG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChUcmFuc2l0aW9uQ29tcG9uZW50LCBfZXh0ZW5kcyh7XG4gICAgaW46IG9wZW4sXG4gICAgdGltZW91dDogdHJhbnNpdGlvbkR1cmF0aW9uXG4gIH0sIG90aGVyKSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwge1xuICAgIGNsYXNzTmFtZTogY2xzeChjbGFzc2VzLnJvb3QsIGNsYXNzTmFtZSwgaW52aXNpYmxlICYmIGNsYXNzZXMuaW52aXNpYmxlKSxcbiAgICBcImFyaWEtaGlkZGVuXCI6IHRydWUsXG4gICAgcmVmOiByZWZcbiAgfSwgY2hpbGRyZW4pKTtcbn0pO1xucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gQmFja2Ryb3AucHJvcFR5cGVzID0ge1xuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBXYXJuaW5nIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIC8vIHwgVGhlc2UgUHJvcFR5cGVzIGFyZSBnZW5lcmF0ZWQgZnJvbSB0aGUgVHlwZVNjcmlwdCB0eXBlIGRlZmluaXRpb25zIHxcbiAgLy8gfCAgICAgVG8gdXBkYXRlIHRoZW0gZWRpdCB0aGUgZC50cyBmaWxlIGFuZCBydW4gXCJ5YXJuIHByb3B0eXBlc1wiICAgICB8XG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuICAvKipcbiAgICogVGhlIGNvbnRlbnQgb2YgdGhlIGNvbXBvbmVudC5cbiAgICovXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcblxuICAvKipcbiAgICogT3ZlcnJpZGUgb3IgZXh0ZW5kIHRoZSBzdHlsZXMgYXBwbGllZCB0byB0aGUgY29tcG9uZW50LlxuICAgKiBTZWUgW0NTUyBBUEldKCNjc3MpIGJlbG93IGZvciBtb3JlIGRldGFpbHMuXG4gICAqL1xuICBjbGFzc2VzOiBQcm9wVHlwZXMub2JqZWN0LFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGJhY2tkcm9wIGlzIGludmlzaWJsZS5cbiAgICogSXQgY2FuIGJlIHVzZWQgd2hlbiByZW5kZXJpbmcgYSBwb3BvdmVyIG9yIGEgY3VzdG9tIHNlbGVjdCBjb21wb25lbnQuXG4gICAqL1xuICBpbnZpc2libGU6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBiYWNrZHJvcCBpcyBvcGVuLlxuICAgKi9cbiAgb3BlbjogUHJvcFR5cGVzLmJvb2wuaXNSZXF1aXJlZCxcblxuICAvKipcbiAgICogVGhlIGR1cmF0aW9uIGZvciB0aGUgdHJhbnNpdGlvbiwgaW4gbWlsbGlzZWNvbmRzLlxuICAgKiBZb3UgbWF5IHNwZWNpZnkgYSBzaW5nbGUgdGltZW91dCBmb3IgYWxsIHRyYW5zaXRpb25zLCBvciBpbmRpdmlkdWFsbHkgd2l0aCBhbiBvYmplY3QuXG4gICAqL1xuICB0cmFuc2l0aW9uRHVyYXRpb246IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5udW1iZXIsIFByb3BUeXBlcy5zaGFwZSh7XG4gICAgYXBwZWFyOiBQcm9wVHlwZXMubnVtYmVyLFxuICAgIGVudGVyOiBQcm9wVHlwZXMubnVtYmVyLFxuICAgIGV4aXQ6IFByb3BUeXBlcy5udW1iZXJcbiAgfSldKVxufSA6IHZvaWQgMDtcbmV4cG9ydCBkZWZhdWx0IHdpdGhTdHlsZXMoc3R5bGVzLCB7XG4gIG5hbWU6ICdNdWlCYWNrZHJvcCdcbn0pKEJhY2tkcm9wKTsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzXCI7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0ICogYXMgUmVhY3RET00gZnJvbSAncmVhY3QtZG9tJztcbmltcG9ydCBkZWJvdW5jZSBmcm9tICcuLi91dGlscy9kZWJvdW5jZSc7XG5pbXBvcnQgeyBUcmFuc2l0aW9uIH0gZnJvbSAncmVhY3QtdHJhbnNpdGlvbi1ncm91cCc7XG5pbXBvcnQgeyBlbGVtZW50QWNjZXB0aW5nUmVmIH0gZnJvbSAnQG1hdGVyaWFsLXVpL3V0aWxzJztcbmltcG9ydCB1c2VGb3JrUmVmIGZyb20gJy4uL3V0aWxzL3VzZUZvcmtSZWYnO1xuaW1wb3J0IHVzZVRoZW1lIGZyb20gJy4uL3N0eWxlcy91c2VUaGVtZSc7XG5pbXBvcnQgeyBkdXJhdGlvbiB9IGZyb20gJy4uL3N0eWxlcy90cmFuc2l0aW9ucyc7XG5pbXBvcnQgeyByZWZsb3csIGdldFRyYW5zaXRpb25Qcm9wcyB9IGZyb20gJy4uL3RyYW5zaXRpb25zL3V0aWxzJzsgLy8gVHJhbnNsYXRlIHRoZSBub2RlIHNvIGhlIGNhbid0IGJlIHNlZW4gb24gdGhlIHNjcmVlbi5cbi8vIExhdGVyLCB3ZSBnb25uYSB0cmFuc2xhdGUgYmFjayB0aGUgbm9kZSB0byBoaXMgb3JpZ2luYWwgbG9jYXRpb25cbi8vIHdpdGggYG5vbmVgLmBcblxuZnVuY3Rpb24gZ2V0VHJhbnNsYXRlVmFsdWUoZGlyZWN0aW9uLCBub2RlKSB7XG4gIHZhciByZWN0ID0gbm9kZS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgdmFyIHRyYW5zZm9ybTtcblxuICBpZiAobm9kZS5mYWtlVHJhbnNmb3JtKSB7XG4gICAgdHJhbnNmb3JtID0gbm9kZS5mYWtlVHJhbnNmb3JtO1xuICB9IGVsc2Uge1xuICAgIHZhciBjb21wdXRlZFN0eWxlID0gd2luZG93LmdldENvbXB1dGVkU3R5bGUobm9kZSk7XG4gICAgdHJhbnNmb3JtID0gY29tcHV0ZWRTdHlsZS5nZXRQcm9wZXJ0eVZhbHVlKCctd2Via2l0LXRyYW5zZm9ybScpIHx8IGNvbXB1dGVkU3R5bGUuZ2V0UHJvcGVydHlWYWx1ZSgndHJhbnNmb3JtJyk7XG4gIH1cblxuICB2YXIgb2Zmc2V0WCA9IDA7XG4gIHZhciBvZmZzZXRZID0gMDtcblxuICBpZiAodHJhbnNmb3JtICYmIHRyYW5zZm9ybSAhPT0gJ25vbmUnICYmIHR5cGVvZiB0cmFuc2Zvcm0gPT09ICdzdHJpbmcnKSB7XG4gICAgdmFyIHRyYW5zZm9ybVZhbHVlcyA9IHRyYW5zZm9ybS5zcGxpdCgnKCcpWzFdLnNwbGl0KCcpJylbMF0uc3BsaXQoJywnKTtcbiAgICBvZmZzZXRYID0gcGFyc2VJbnQodHJhbnNmb3JtVmFsdWVzWzRdLCAxMCk7XG4gICAgb2Zmc2V0WSA9IHBhcnNlSW50KHRyYW5zZm9ybVZhbHVlc1s1XSwgMTApO1xuICB9XG5cbiAgaWYgKGRpcmVjdGlvbiA9PT0gJ2xlZnQnKSB7XG4gICAgcmV0dXJuIFwidHJhbnNsYXRlWChcIi5jb25jYXQod2luZG93LmlubmVyV2lkdGgsIFwicHgpIHRyYW5zbGF0ZVgoXCIpLmNvbmNhdChvZmZzZXRYIC0gcmVjdC5sZWZ0LCBcInB4KVwiKTtcbiAgfVxuXG4gIGlmIChkaXJlY3Rpb24gPT09ICdyaWdodCcpIHtcbiAgICByZXR1cm4gXCJ0cmFuc2xhdGVYKC1cIi5jb25jYXQocmVjdC5sZWZ0ICsgcmVjdC53aWR0aCAtIG9mZnNldFgsIFwicHgpXCIpO1xuICB9XG5cbiAgaWYgKGRpcmVjdGlvbiA9PT0gJ3VwJykge1xuICAgIHJldHVybiBcInRyYW5zbGF0ZVkoXCIuY29uY2F0KHdpbmRvdy5pbm5lckhlaWdodCwgXCJweCkgdHJhbnNsYXRlWShcIikuY29uY2F0KG9mZnNldFkgLSByZWN0LnRvcCwgXCJweClcIik7XG4gIH0gLy8gZGlyZWN0aW9uID09PSAnZG93bidcblxuXG4gIHJldHVybiBcInRyYW5zbGF0ZVkoLVwiLmNvbmNhdChyZWN0LnRvcCArIHJlY3QuaGVpZ2h0IC0gb2Zmc2V0WSwgXCJweClcIik7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzZXRUcmFuc2xhdGVWYWx1ZShkaXJlY3Rpb24sIG5vZGUpIHtcbiAgdmFyIHRyYW5zZm9ybSA9IGdldFRyYW5zbGF0ZVZhbHVlKGRpcmVjdGlvbiwgbm9kZSk7XG5cbiAgaWYgKHRyYW5zZm9ybSkge1xuICAgIG5vZGUuc3R5bGUud2Via2l0VHJhbnNmb3JtID0gdHJhbnNmb3JtO1xuICAgIG5vZGUuc3R5bGUudHJhbnNmb3JtID0gdHJhbnNmb3JtO1xuICB9XG59XG52YXIgZGVmYXVsdFRpbWVvdXQgPSB7XG4gIGVudGVyOiBkdXJhdGlvbi5lbnRlcmluZ1NjcmVlbixcbiAgZXhpdDogZHVyYXRpb24ubGVhdmluZ1NjcmVlblxufTtcbi8qKlxuICogVGhlIFNsaWRlIHRyYW5zaXRpb24gaXMgdXNlZCBieSB0aGUgW0RyYXdlcl0oL2NvbXBvbmVudHMvZHJhd2Vycy8pIGNvbXBvbmVudC5cbiAqIEl0IHVzZXMgW3JlYWN0LXRyYW5zaXRpb24tZ3JvdXBdKGh0dHBzOi8vZ2l0aHViLmNvbS9yZWFjdGpzL3JlYWN0LXRyYW5zaXRpb24tZ3JvdXApIGludGVybmFsbHkuXG4gKi9cblxudmFyIFNsaWRlID0gLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gU2xpZGUocHJvcHMsIHJlZikge1xuICB2YXIgY2hpbGRyZW4gPSBwcm9wcy5jaGlsZHJlbixcbiAgICAgIF9wcm9wcyRkaXJlY3Rpb24gPSBwcm9wcy5kaXJlY3Rpb24sXG4gICAgICBkaXJlY3Rpb24gPSBfcHJvcHMkZGlyZWN0aW9uID09PSB2b2lkIDAgPyAnZG93bicgOiBfcHJvcHMkZGlyZWN0aW9uLFxuICAgICAgaW5Qcm9wID0gcHJvcHMuaW4sXG4gICAgICBvbkVudGVyID0gcHJvcHMub25FbnRlcixcbiAgICAgIG9uRW50ZXJlZCA9IHByb3BzLm9uRW50ZXJlZCxcbiAgICAgIG9uRW50ZXJpbmcgPSBwcm9wcy5vbkVudGVyaW5nLFxuICAgICAgb25FeGl0ID0gcHJvcHMub25FeGl0LFxuICAgICAgb25FeGl0ZWQgPSBwcm9wcy5vbkV4aXRlZCxcbiAgICAgIG9uRXhpdGluZyA9IHByb3BzLm9uRXhpdGluZyxcbiAgICAgIHN0eWxlID0gcHJvcHMuc3R5bGUsXG4gICAgICBfcHJvcHMkdGltZW91dCA9IHByb3BzLnRpbWVvdXQsXG4gICAgICB0aW1lb3V0ID0gX3Byb3BzJHRpbWVvdXQgPT09IHZvaWQgMCA/IGRlZmF1bHRUaW1lb3V0IDogX3Byb3BzJHRpbWVvdXQsXG4gICAgICBfcHJvcHMkVHJhbnNpdGlvbkNvbXAgPSBwcm9wcy5UcmFuc2l0aW9uQ29tcG9uZW50LFxuICAgICAgVHJhbnNpdGlvbkNvbXBvbmVudCA9IF9wcm9wcyRUcmFuc2l0aW9uQ29tcCA9PT0gdm9pZCAwID8gVHJhbnNpdGlvbiA6IF9wcm9wcyRUcmFuc2l0aW9uQ29tcCxcbiAgICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKHByb3BzLCBbXCJjaGlsZHJlblwiLCBcImRpcmVjdGlvblwiLCBcImluXCIsIFwib25FbnRlclwiLCBcIm9uRW50ZXJlZFwiLCBcIm9uRW50ZXJpbmdcIiwgXCJvbkV4aXRcIiwgXCJvbkV4aXRlZFwiLCBcIm9uRXhpdGluZ1wiLCBcInN0eWxlXCIsIFwidGltZW91dFwiLCBcIlRyYW5zaXRpb25Db21wb25lbnRcIl0pO1xuXG4gIHZhciB0aGVtZSA9IHVzZVRoZW1lKCk7XG4gIHZhciBjaGlsZHJlblJlZiA9IFJlYWN0LnVzZVJlZihudWxsKTtcbiAgLyoqXG4gICAqIHVzZWQgaW4gY2xvbmVFbGVtZW50KGNoaWxkcmVuLCB7IHJlZjogaGFuZGxlUmVmIH0pXG4gICAqL1xuXG4gIHZhciBoYW5kbGVPd25SZWYgPSBSZWFjdC51c2VDYWxsYmFjayhmdW5jdGlvbiAoaW5zdGFuY2UpIHtcbiAgICAvLyAjU3RyaWN0TW9kZSByZWFkeVxuICAgIGNoaWxkcmVuUmVmLmN1cnJlbnQgPSBSZWFjdERPTS5maW5kRE9NTm9kZShpbnN0YW5jZSk7XG4gIH0sIFtdKTtcbiAgdmFyIGhhbmRsZVJlZkludGVybWVkaWFyeSA9IHVzZUZvcmtSZWYoY2hpbGRyZW4ucmVmLCBoYW5kbGVPd25SZWYpO1xuICB2YXIgaGFuZGxlUmVmID0gdXNlRm9ya1JlZihoYW5kbGVSZWZJbnRlcm1lZGlhcnksIHJlZik7XG5cbiAgdmFyIG5vcm1hbGl6ZWRUcmFuc2l0aW9uQ2FsbGJhY2sgPSBmdW5jdGlvbiBub3JtYWxpemVkVHJhbnNpdGlvbkNhbGxiYWNrKGNhbGxiYWNrKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChpc0FwcGVhcmluZykge1xuICAgICAgaWYgKGNhbGxiYWNrKSB7XG4gICAgICAgIC8vIG9uRW50ZXJYeHggYW5kIG9uRXhpdFh4eCBjYWxsYmFja3MgaGF2ZSBhIGRpZmZlcmVudCBhcmd1bWVudHMubGVuZ3RoIHZhbHVlLlxuICAgICAgICBpZiAoaXNBcHBlYXJpbmcgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIGNhbGxiYWNrKGNoaWxkcmVuUmVmLmN1cnJlbnQpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNhbGxiYWNrKGNoaWxkcmVuUmVmLmN1cnJlbnQsIGlzQXBwZWFyaW5nKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG4gIH07XG5cbiAgdmFyIGhhbmRsZUVudGVyID0gbm9ybWFsaXplZFRyYW5zaXRpb25DYWxsYmFjayhmdW5jdGlvbiAobm9kZSwgaXNBcHBlYXJpbmcpIHtcbiAgICBzZXRUcmFuc2xhdGVWYWx1ZShkaXJlY3Rpb24sIG5vZGUpO1xuICAgIHJlZmxvdyhub2RlKTtcblxuICAgIGlmIChvbkVudGVyKSB7XG4gICAgICBvbkVudGVyKG5vZGUsIGlzQXBwZWFyaW5nKTtcbiAgICB9XG4gIH0pO1xuICB2YXIgaGFuZGxlRW50ZXJpbmcgPSBub3JtYWxpemVkVHJhbnNpdGlvbkNhbGxiYWNrKGZ1bmN0aW9uIChub2RlLCBpc0FwcGVhcmluZykge1xuICAgIHZhciB0cmFuc2l0aW9uUHJvcHMgPSBnZXRUcmFuc2l0aW9uUHJvcHMoe1xuICAgICAgdGltZW91dDogdGltZW91dCxcbiAgICAgIHN0eWxlOiBzdHlsZVxuICAgIH0sIHtcbiAgICAgIG1vZGU6ICdlbnRlcidcbiAgICB9KTtcbiAgICBub2RlLnN0eWxlLndlYmtpdFRyYW5zaXRpb24gPSB0aGVtZS50cmFuc2l0aW9ucy5jcmVhdGUoJy13ZWJraXQtdHJhbnNmb3JtJywgX2V4dGVuZHMoe30sIHRyYW5zaXRpb25Qcm9wcywge1xuICAgICAgZWFzaW5nOiB0aGVtZS50cmFuc2l0aW9ucy5lYXNpbmcuZWFzZU91dFxuICAgIH0pKTtcbiAgICBub2RlLnN0eWxlLnRyYW5zaXRpb24gPSB0aGVtZS50cmFuc2l0aW9ucy5jcmVhdGUoJ3RyYW5zZm9ybScsIF9leHRlbmRzKHt9LCB0cmFuc2l0aW9uUHJvcHMsIHtcbiAgICAgIGVhc2luZzogdGhlbWUudHJhbnNpdGlvbnMuZWFzaW5nLmVhc2VPdXRcbiAgICB9KSk7XG4gICAgbm9kZS5zdHlsZS53ZWJraXRUcmFuc2Zvcm0gPSAnbm9uZSc7XG4gICAgbm9kZS5zdHlsZS50cmFuc2Zvcm0gPSAnbm9uZSc7XG5cbiAgICBpZiAob25FbnRlcmluZykge1xuICAgICAgb25FbnRlcmluZyhub2RlLCBpc0FwcGVhcmluZyk7XG4gICAgfVxuICB9KTtcbiAgdmFyIGhhbmRsZUVudGVyZWQgPSBub3JtYWxpemVkVHJhbnNpdGlvbkNhbGxiYWNrKG9uRW50ZXJlZCk7XG4gIHZhciBoYW5kbGVFeGl0aW5nID0gbm9ybWFsaXplZFRyYW5zaXRpb25DYWxsYmFjayhvbkV4aXRpbmcpO1xuICB2YXIgaGFuZGxlRXhpdCA9IG5vcm1hbGl6ZWRUcmFuc2l0aW9uQ2FsbGJhY2soZnVuY3Rpb24gKG5vZGUpIHtcbiAgICB2YXIgdHJhbnNpdGlvblByb3BzID0gZ2V0VHJhbnNpdGlvblByb3BzKHtcbiAgICAgIHRpbWVvdXQ6IHRpbWVvdXQsXG4gICAgICBzdHlsZTogc3R5bGVcbiAgICB9LCB7XG4gICAgICBtb2RlOiAnZXhpdCdcbiAgICB9KTtcbiAgICBub2RlLnN0eWxlLndlYmtpdFRyYW5zaXRpb24gPSB0aGVtZS50cmFuc2l0aW9ucy5jcmVhdGUoJy13ZWJraXQtdHJhbnNmb3JtJywgX2V4dGVuZHMoe30sIHRyYW5zaXRpb25Qcm9wcywge1xuICAgICAgZWFzaW5nOiB0aGVtZS50cmFuc2l0aW9ucy5lYXNpbmcuc2hhcnBcbiAgICB9KSk7XG4gICAgbm9kZS5zdHlsZS50cmFuc2l0aW9uID0gdGhlbWUudHJhbnNpdGlvbnMuY3JlYXRlKCd0cmFuc2Zvcm0nLCBfZXh0ZW5kcyh7fSwgdHJhbnNpdGlvblByb3BzLCB7XG4gICAgICBlYXNpbmc6IHRoZW1lLnRyYW5zaXRpb25zLmVhc2luZy5zaGFycFxuICAgIH0pKTtcbiAgICBzZXRUcmFuc2xhdGVWYWx1ZShkaXJlY3Rpb24sIG5vZGUpO1xuXG4gICAgaWYgKG9uRXhpdCkge1xuICAgICAgb25FeGl0KG5vZGUpO1xuICAgIH1cbiAgfSk7XG4gIHZhciBoYW5kbGVFeGl0ZWQgPSBub3JtYWxpemVkVHJhbnNpdGlvbkNhbGxiYWNrKGZ1bmN0aW9uIChub2RlKSB7XG4gICAgLy8gTm8gbmVlZCBmb3IgdHJhbnNpdGlvbnMgd2hlbiB0aGUgY29tcG9uZW50IGlzIGhpZGRlblxuICAgIG5vZGUuc3R5bGUud2Via2l0VHJhbnNpdGlvbiA9ICcnO1xuICAgIG5vZGUuc3R5bGUudHJhbnNpdGlvbiA9ICcnO1xuXG4gICAgaWYgKG9uRXhpdGVkKSB7XG4gICAgICBvbkV4aXRlZChub2RlKTtcbiAgICB9XG4gIH0pO1xuICB2YXIgdXBkYXRlUG9zaXRpb24gPSBSZWFjdC51c2VDYWxsYmFjayhmdW5jdGlvbiAoKSB7XG4gICAgaWYgKGNoaWxkcmVuUmVmLmN1cnJlbnQpIHtcbiAgICAgIHNldFRyYW5zbGF0ZVZhbHVlKGRpcmVjdGlvbiwgY2hpbGRyZW5SZWYuY3VycmVudCk7XG4gICAgfVxuICB9LCBbZGlyZWN0aW9uXSk7XG4gIFJlYWN0LnVzZUVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgLy8gU2tpcCBjb25maWd1cmF0aW9uIHdoZXJlIHRoZSBwb3NpdGlvbiBpcyBzY3JlZW4gc2l6ZSBpbnZhcmlhbnQuXG4gICAgaWYgKGluUHJvcCB8fCBkaXJlY3Rpb24gPT09ICdkb3duJyB8fCBkaXJlY3Rpb24gPT09ICdyaWdodCcpIHtcbiAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgdmFyIGhhbmRsZVJlc2l6ZSA9IGRlYm91bmNlKGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmIChjaGlsZHJlblJlZi5jdXJyZW50KSB7XG4gICAgICAgIHNldFRyYW5zbGF0ZVZhbHVlKGRpcmVjdGlvbiwgY2hpbGRyZW5SZWYuY3VycmVudCk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIGhhbmRsZVJlc2l6ZSk7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIGhhbmRsZVJlc2l6ZS5jbGVhcigpO1xuICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIGhhbmRsZVJlc2l6ZSk7XG4gICAgfTtcbiAgfSwgW2RpcmVjdGlvbiwgaW5Qcm9wXSk7XG4gIFJlYWN0LnVzZUVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgaWYgKCFpblByb3ApIHtcbiAgICAgIC8vIFdlIG5lZWQgdG8gdXBkYXRlIHRoZSBwb3NpdGlvbiBvZiB0aGUgZHJhd2VyIHdoZW4gdGhlIGRpcmVjdGlvbiBjaGFuZ2UgYW5kXG4gICAgICAvLyB3aGVuIGl0J3MgaGlkZGVuLlxuICAgICAgdXBkYXRlUG9zaXRpb24oKTtcbiAgICB9XG4gIH0sIFtpblByb3AsIHVwZGF0ZVBvc2l0aW9uXSk7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChUcmFuc2l0aW9uQ29tcG9uZW50LCBfZXh0ZW5kcyh7XG4gICAgbm9kZVJlZjogY2hpbGRyZW5SZWYsXG4gICAgb25FbnRlcjogaGFuZGxlRW50ZXIsXG4gICAgb25FbnRlcmVkOiBoYW5kbGVFbnRlcmVkLFxuICAgIG9uRW50ZXJpbmc6IGhhbmRsZUVudGVyaW5nLFxuICAgIG9uRXhpdDogaGFuZGxlRXhpdCxcbiAgICBvbkV4aXRlZDogaGFuZGxlRXhpdGVkLFxuICAgIG9uRXhpdGluZzogaGFuZGxlRXhpdGluZyxcbiAgICBhcHBlYXI6IHRydWUsXG4gICAgaW46IGluUHJvcCxcbiAgICB0aW1lb3V0OiB0aW1lb3V0XG4gIH0sIG90aGVyKSwgZnVuY3Rpb24gKHN0YXRlLCBjaGlsZFByb3BzKSB7XG4gICAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jbG9uZUVsZW1lbnQoY2hpbGRyZW4sIF9leHRlbmRzKHtcbiAgICAgIHJlZjogaGFuZGxlUmVmLFxuICAgICAgc3R5bGU6IF9leHRlbmRzKHtcbiAgICAgICAgdmlzaWJpbGl0eTogc3RhdGUgPT09ICdleGl0ZWQnICYmICFpblByb3AgPyAnaGlkZGVuJyA6IHVuZGVmaW5lZFxuICAgICAgfSwgc3R5bGUsIGNoaWxkcmVuLnByb3BzLnN0eWxlKVxuICAgIH0sIGNoaWxkUHJvcHMpKTtcbiAgfSk7XG59KTtcbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFNsaWRlLnByb3BUeXBlcyA9IHtcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gV2FybmluZyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAvLyB8IFRoZXNlIFByb3BUeXBlcyBhcmUgZ2VuZXJhdGVkIGZyb20gdGhlIFR5cGVTY3JpcHQgdHlwZSBkZWZpbml0aW9ucyB8XG4gIC8vIHwgICAgIFRvIHVwZGF0ZSB0aGVtIGVkaXQgdGhlIGQudHMgZmlsZSBhbmQgcnVuIFwieWFybiBwcm9wdHlwZXNcIiAgICAgfFxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbiAgLyoqXG4gICAqIEEgc2luZ2xlIGNoaWxkIGNvbnRlbnQgZWxlbWVudC5cbiAgICovXG4gIGNoaWxkcmVuOiBlbGVtZW50QWNjZXB0aW5nUmVmLFxuXG4gIC8qKlxuICAgKiBEaXJlY3Rpb24gdGhlIGNoaWxkIG5vZGUgd2lsbCBlbnRlciBmcm9tLlxuICAgKi9cbiAgZGlyZWN0aW9uOiBQcm9wVHlwZXMub25lT2YoWydkb3duJywgJ2xlZnQnLCAncmlnaHQnLCAndXAnXSksXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgc2hvdyB0aGUgY29tcG9uZW50OyB0cmlnZ2VycyB0aGUgZW50ZXIgb3IgZXhpdCBhbmltYXRpb24uXG4gICAqL1xuICBpbjogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIG9uRW50ZXI6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBvbkVudGVyZWQ6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBvbkVudGVyaW5nOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgb25FeGl0OiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgb25FeGl0ZWQ6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBvbkV4aXRpbmc6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBzdHlsZTogUHJvcFR5cGVzLm9iamVjdCxcblxuICAvKipcbiAgICogVGhlIGR1cmF0aW9uIGZvciB0aGUgdHJhbnNpdGlvbiwgaW4gbWlsbGlzZWNvbmRzLlxuICAgKiBZb3UgbWF5IHNwZWNpZnkgYSBzaW5nbGUgdGltZW91dCBmb3IgYWxsIHRyYW5zaXRpb25zLCBvciBpbmRpdmlkdWFsbHkgd2l0aCBhbiBvYmplY3QuXG4gICAqL1xuICB0aW1lb3V0OiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMubnVtYmVyLCBQcm9wVHlwZXMuc2hhcGUoe1xuICAgIGFwcGVhcjogUHJvcFR5cGVzLm51bWJlcixcbiAgICBlbnRlcjogUHJvcFR5cGVzLm51bWJlcixcbiAgICBleGl0OiBQcm9wVHlwZXMubnVtYmVyXG4gIH0pXSlcbn0gOiB2b2lkIDA7XG5leHBvcnQgZGVmYXVsdCBTbGlkZTsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzXCI7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGNsc3ggZnJvbSAnY2xzeCc7XG5pbXBvcnQgTW9kYWwgZnJvbSAnLi4vTW9kYWwnO1xuaW1wb3J0IEJhY2tkcm9wIGZyb20gJy4uL0JhY2tkcm9wJztcbmltcG9ydCB3aXRoU3R5bGVzIGZyb20gJy4uL3N0eWxlcy93aXRoU3R5bGVzJztcbmltcG9ydCBTbGlkZSBmcm9tICcuLi9TbGlkZSc7XG5pbXBvcnQgUGFwZXIgZnJvbSAnLi4vUGFwZXInO1xuaW1wb3J0IGNhcGl0YWxpemUgZnJvbSAnLi4vdXRpbHMvY2FwaXRhbGl6ZSc7XG5pbXBvcnQgeyBkdXJhdGlvbiB9IGZyb20gJy4uL3N0eWxlcy90cmFuc2l0aW9ucyc7XG5pbXBvcnQgdXNlVGhlbWUgZnJvbSAnLi4vc3R5bGVzL3VzZVRoZW1lJztcbmV4cG9ydCB2YXIgc3R5bGVzID0gZnVuY3Rpb24gc3R5bGVzKHRoZW1lKSB7XG4gIHJldHVybiB7XG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudC4gKi9cbiAgICByb290OiB7fSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYHZhcmlhbnQ9XCJwZXJtYW5lbnQgb3IgcGVyc2lzdGVudFwiYC4gKi9cbiAgICBkb2NrZWQ6IHtcbiAgICAgIGZsZXg6ICcwIDAgYXV0bydcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIGBQYXBlcmAgY29tcG9uZW50LiAqL1xuICAgIHBhcGVyOiB7XG4gICAgICBvdmVyZmxvd1k6ICdhdXRvJyxcbiAgICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICAgIGZsZXhEaXJlY3Rpb246ICdjb2x1bW4nLFxuICAgICAgaGVpZ2h0OiAnMTAwJScsXG4gICAgICBmbGV4OiAnMSAwIGF1dG8nLFxuICAgICAgekluZGV4OiB0aGVtZS56SW5kZXguZHJhd2VyLFxuICAgICAgV2Via2l0T3ZlcmZsb3dTY3JvbGxpbmc6ICd0b3VjaCcsXG4gICAgICAvLyBBZGQgaU9TIG1vbWVudHVtIHNjcm9sbGluZy5cbiAgICAgIC8vIHRlbXBvcmFyeSBzdHlsZVxuICAgICAgcG9zaXRpb246ICdmaXhlZCcsXG4gICAgICB0b3A6IDAsXG4gICAgICAvLyBXZSBkaXNhYmxlIHRoZSBmb2N1cyByaW5nIGZvciBtb3VzZSwgdG91Y2ggYW5kIGtleWJvYXJkIHVzZXJzLlxuICAgICAgLy8gQXQgc29tZSBwb2ludCwgaXQgd291bGQgYmUgYmV0dGVyIHRvIGtlZXAgaXQgZm9yIGtleWJvYXJkIHVzZXJzLlxuICAgICAgLy8gOmZvY3VzLXJpbmcgQ1NTIHBzZXVkby1jbGFzcyB3aWxsIGhlbHAuXG4gICAgICBvdXRsaW5lOiAwXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSBgUGFwZXJgIGNvbXBvbmVudCBpZiBgYW5jaG9yPVwibGVmdFwiYC4gKi9cbiAgICBwYXBlckFuY2hvckxlZnQ6IHtcbiAgICAgIGxlZnQ6IDAsXG4gICAgICByaWdodDogJ2F1dG8nXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSBgUGFwZXJgIGNvbXBvbmVudCBpZiBgYW5jaG9yPVwicmlnaHRcImAuICovXG4gICAgcGFwZXJBbmNob3JSaWdodDoge1xuICAgICAgbGVmdDogJ2F1dG8nLFxuICAgICAgcmlnaHQ6IDBcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIGBQYXBlcmAgY29tcG9uZW50IGlmIGBhbmNob3I9XCJ0b3BcImAuICovXG4gICAgcGFwZXJBbmNob3JUb3A6IHtcbiAgICAgIHRvcDogMCxcbiAgICAgIGxlZnQ6IDAsXG4gICAgICBib3R0b206ICdhdXRvJyxcbiAgICAgIHJpZ2h0OiAwLFxuICAgICAgaGVpZ2h0OiAnYXV0bycsXG4gICAgICBtYXhIZWlnaHQ6ICcxMDAlJ1xuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgYFBhcGVyYCBjb21wb25lbnQgaWYgYGFuY2hvcj1cImJvdHRvbVwiYC4gKi9cbiAgICBwYXBlckFuY2hvckJvdHRvbToge1xuICAgICAgdG9wOiAnYXV0bycsXG4gICAgICBsZWZ0OiAwLFxuICAgICAgYm90dG9tOiAwLFxuICAgICAgcmlnaHQ6IDAsXG4gICAgICBoZWlnaHQ6ICdhdXRvJyxcbiAgICAgIG1heEhlaWdodDogJzEwMCUnXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSBgUGFwZXJgIGNvbXBvbmVudCBpZiBgYW5jaG9yPVwibGVmdFwiYCBhbmQgYHZhcmlhbnRgIGlzIG5vdCBcInRlbXBvcmFyeVwiLiAqL1xuICAgIHBhcGVyQW5jaG9yRG9ja2VkTGVmdDoge1xuICAgICAgYm9yZGVyUmlnaHQ6IFwiMXB4IHNvbGlkIFwiLmNvbmNhdCh0aGVtZS5wYWxldHRlLmRpdmlkZXIpXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSBgUGFwZXJgIGNvbXBvbmVudCBpZiBgYW5jaG9yPVwidG9wXCJgIGFuZCBgdmFyaWFudGAgaXMgbm90IFwidGVtcG9yYXJ5XCIuICovXG4gICAgcGFwZXJBbmNob3JEb2NrZWRUb3A6IHtcbiAgICAgIGJvcmRlckJvdHRvbTogXCIxcHggc29saWQgXCIuY29uY2F0KHRoZW1lLnBhbGV0dGUuZGl2aWRlcilcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIGBQYXBlcmAgY29tcG9uZW50IGlmIGBhbmNob3I9XCJyaWdodFwiYCBhbmQgYHZhcmlhbnRgIGlzIG5vdCBcInRlbXBvcmFyeVwiLiAqL1xuICAgIHBhcGVyQW5jaG9yRG9ja2VkUmlnaHQ6IHtcbiAgICAgIGJvcmRlckxlZnQ6IFwiMXB4IHNvbGlkIFwiLmNvbmNhdCh0aGVtZS5wYWxldHRlLmRpdmlkZXIpXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSBgUGFwZXJgIGNvbXBvbmVudCBpZiBgYW5jaG9yPVwiYm90dG9tXCJgIGFuZCBgdmFyaWFudGAgaXMgbm90IFwidGVtcG9yYXJ5XCIuICovXG4gICAgcGFwZXJBbmNob3JEb2NrZWRCb3R0b206IHtcbiAgICAgIGJvcmRlclRvcDogXCIxcHggc29saWQgXCIuY29uY2F0KHRoZW1lLnBhbGV0dGUuZGl2aWRlcilcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIGBNb2RhbGAgY29tcG9uZW50LiAqL1xuICAgIG1vZGFsOiB7fVxuICB9O1xufTtcbnZhciBvcHBvc2l0ZURpcmVjdGlvbiA9IHtcbiAgbGVmdDogJ3JpZ2h0JyxcbiAgcmlnaHQ6ICdsZWZ0JyxcbiAgdG9wOiAnZG93bicsXG4gIGJvdHRvbTogJ3VwJ1xufTtcbmV4cG9ydCBmdW5jdGlvbiBpc0hvcml6b250YWwoYW5jaG9yKSB7XG4gIHJldHVybiBbJ2xlZnQnLCAncmlnaHQnXS5pbmRleE9mKGFuY2hvcikgIT09IC0xO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGdldEFuY2hvcih0aGVtZSwgYW5jaG9yKSB7XG4gIHJldHVybiB0aGVtZS5kaXJlY3Rpb24gPT09ICdydGwnICYmIGlzSG9yaXpvbnRhbChhbmNob3IpID8gb3Bwb3NpdGVEaXJlY3Rpb25bYW5jaG9yXSA6IGFuY2hvcjtcbn1cbnZhciBkZWZhdWx0VHJhbnNpdGlvbkR1cmF0aW9uID0ge1xuICBlbnRlcjogZHVyYXRpb24uZW50ZXJpbmdTY3JlZW4sXG4gIGV4aXQ6IGR1cmF0aW9uLmxlYXZpbmdTY3JlZW5cbn07XG4vKipcbiAqIFRoZSBwcm9wcyBvZiB0aGUgW01vZGFsXSgvYXBpL21vZGFsLykgY29tcG9uZW50IGFyZSBhdmFpbGFibGVcbiAqIHdoZW4gYHZhcmlhbnQ9XCJ0ZW1wb3JhcnlcImAgaXMgc2V0LlxuICovXG5cbnZhciBEcmF3ZXIgPSAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBEcmF3ZXIocHJvcHMsIHJlZikge1xuICB2YXIgX3Byb3BzJGFuY2hvciA9IHByb3BzLmFuY2hvcixcbiAgICAgIGFuY2hvclByb3AgPSBfcHJvcHMkYW5jaG9yID09PSB2b2lkIDAgPyAnbGVmdCcgOiBfcHJvcHMkYW5jaG9yLFxuICAgICAgQmFja2Ryb3BQcm9wcyA9IHByb3BzLkJhY2tkcm9wUHJvcHMsXG4gICAgICBjaGlsZHJlbiA9IHByb3BzLmNoaWxkcmVuLFxuICAgICAgY2xhc3NlcyA9IHByb3BzLmNsYXNzZXMsXG4gICAgICBjbGFzc05hbWUgPSBwcm9wcy5jbGFzc05hbWUsXG4gICAgICBfcHJvcHMkZWxldmF0aW9uID0gcHJvcHMuZWxldmF0aW9uLFxuICAgICAgZWxldmF0aW9uID0gX3Byb3BzJGVsZXZhdGlvbiA9PT0gdm9pZCAwID8gMTYgOiBfcHJvcHMkZWxldmF0aW9uLFxuICAgICAgX3Byb3BzJE1vZGFsUHJvcHMgPSBwcm9wcy5Nb2RhbFByb3BzO1xuICBfcHJvcHMkTW9kYWxQcm9wcyA9IF9wcm9wcyRNb2RhbFByb3BzID09PSB2b2lkIDAgPyB7fSA6IF9wcm9wcyRNb2RhbFByb3BzO1xuXG4gIHZhciBCYWNrZHJvcFByb3BzUHJvcCA9IF9wcm9wcyRNb2RhbFByb3BzLkJhY2tkcm9wUHJvcHMsXG4gICAgICBNb2RhbFByb3BzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKF9wcm9wcyRNb2RhbFByb3BzLCBbXCJCYWNrZHJvcFByb3BzXCJdKSxcbiAgICAgIG9uQ2xvc2UgPSBwcm9wcy5vbkNsb3NlLFxuICAgICAgX3Byb3BzJG9wZW4gPSBwcm9wcy5vcGVuLFxuICAgICAgb3BlbiA9IF9wcm9wcyRvcGVuID09PSB2b2lkIDAgPyBmYWxzZSA6IF9wcm9wcyRvcGVuLFxuICAgICAgX3Byb3BzJFBhcGVyUHJvcHMgPSBwcm9wcy5QYXBlclByb3BzLFxuICAgICAgUGFwZXJQcm9wcyA9IF9wcm9wcyRQYXBlclByb3BzID09PSB2b2lkIDAgPyB7fSA6IF9wcm9wcyRQYXBlclByb3BzLFxuICAgICAgU2xpZGVQcm9wcyA9IHByb3BzLlNsaWRlUHJvcHMsXG4gICAgICBfcHJvcHMkVHJhbnNpdGlvbkNvbXAgPSBwcm9wcy5UcmFuc2l0aW9uQ29tcG9uZW50LFxuICAgICAgVHJhbnNpdGlvbkNvbXBvbmVudCA9IF9wcm9wcyRUcmFuc2l0aW9uQ29tcCA9PT0gdm9pZCAwID8gU2xpZGUgOiBfcHJvcHMkVHJhbnNpdGlvbkNvbXAsXG4gICAgICBfcHJvcHMkdHJhbnNpdGlvbkR1cmEgPSBwcm9wcy50cmFuc2l0aW9uRHVyYXRpb24sXG4gICAgICB0cmFuc2l0aW9uRHVyYXRpb24gPSBfcHJvcHMkdHJhbnNpdGlvbkR1cmEgPT09IHZvaWQgMCA/IGRlZmF1bHRUcmFuc2l0aW9uRHVyYXRpb24gOiBfcHJvcHMkdHJhbnNpdGlvbkR1cmEsXG4gICAgICBfcHJvcHMkdmFyaWFudCA9IHByb3BzLnZhcmlhbnQsXG4gICAgICB2YXJpYW50ID0gX3Byb3BzJHZhcmlhbnQgPT09IHZvaWQgMCA/ICd0ZW1wb3JhcnknIDogX3Byb3BzJHZhcmlhbnQsXG4gICAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhwcm9wcywgW1wiYW5jaG9yXCIsIFwiQmFja2Ryb3BQcm9wc1wiLCBcImNoaWxkcmVuXCIsIFwiY2xhc3Nlc1wiLCBcImNsYXNzTmFtZVwiLCBcImVsZXZhdGlvblwiLCBcIk1vZGFsUHJvcHNcIiwgXCJvbkNsb3NlXCIsIFwib3BlblwiLCBcIlBhcGVyUHJvcHNcIiwgXCJTbGlkZVByb3BzXCIsIFwiVHJhbnNpdGlvbkNvbXBvbmVudFwiLCBcInRyYW5zaXRpb25EdXJhdGlvblwiLCBcInZhcmlhbnRcIl0pO1xuXG4gIHZhciB0aGVtZSA9IHVzZVRoZW1lKCk7IC8vIExldCdzIGFzc3VtZSB0aGF0IHRoZSBEcmF3ZXIgd2lsbCBhbHdheXMgYmUgcmVuZGVyZWQgb24gdXNlciBzcGFjZS5cbiAgLy8gV2UgdXNlIHRoaXMgc3RhdGUgaXMgb3JkZXIgdG8gc2tpcCB0aGUgYXBwZWFyIHRyYW5zaXRpb24gZHVyaW5nIHRoZVxuICAvLyBpbml0aWFsIG1vdW50IG9mIHRoZSBjb21wb25lbnQuXG5cbiAgdmFyIG1vdW50ZWQgPSBSZWFjdC51c2VSZWYoZmFsc2UpO1xuICBSZWFjdC51c2VFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgIG1vdW50ZWQuY3VycmVudCA9IHRydWU7XG4gIH0sIFtdKTtcbiAgdmFyIGFuY2hvciA9IGdldEFuY2hvcih0aGVtZSwgYW5jaG9yUHJvcCk7XG4gIHZhciBkcmF3ZXIgPSAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChQYXBlciwgX2V4dGVuZHMoe1xuICAgIGVsZXZhdGlvbjogdmFyaWFudCA9PT0gJ3RlbXBvcmFyeScgPyBlbGV2YXRpb24gOiAwLFxuICAgIHNxdWFyZTogdHJ1ZVxuICB9LCBQYXBlclByb3BzLCB7XG4gICAgY2xhc3NOYW1lOiBjbHN4KGNsYXNzZXMucGFwZXIsIGNsYXNzZXNbXCJwYXBlckFuY2hvclwiLmNvbmNhdChjYXBpdGFsaXplKGFuY2hvcikpXSwgUGFwZXJQcm9wcy5jbGFzc05hbWUsIHZhcmlhbnQgIT09ICd0ZW1wb3JhcnknICYmIGNsYXNzZXNbXCJwYXBlckFuY2hvckRvY2tlZFwiLmNvbmNhdChjYXBpdGFsaXplKGFuY2hvcikpXSlcbiAgfSksIGNoaWxkcmVuKTtcblxuICBpZiAodmFyaWFudCA9PT0gJ3Blcm1hbmVudCcpIHtcbiAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgX2V4dGVuZHMoe1xuICAgICAgY2xhc3NOYW1lOiBjbHN4KGNsYXNzZXMucm9vdCwgY2xhc3Nlcy5kb2NrZWQsIGNsYXNzTmFtZSksXG4gICAgICByZWY6IHJlZlxuICAgIH0sIG90aGVyKSwgZHJhd2VyKTtcbiAgfVxuXG4gIHZhciBzbGlkaW5nRHJhd2VyID0gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoVHJhbnNpdGlvbkNvbXBvbmVudCwgX2V4dGVuZHMoe1xuICAgIGluOiBvcGVuLFxuICAgIGRpcmVjdGlvbjogb3Bwb3NpdGVEaXJlY3Rpb25bYW5jaG9yXSxcbiAgICB0aW1lb3V0OiB0cmFuc2l0aW9uRHVyYXRpb24sXG4gICAgYXBwZWFyOiBtb3VudGVkLmN1cnJlbnRcbiAgfSwgU2xpZGVQcm9wcyksIGRyYXdlcik7XG5cbiAgaWYgKHZhcmlhbnQgPT09ICdwZXJzaXN0ZW50Jykge1xuICAgIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCBfZXh0ZW5kcyh7XG4gICAgICBjbGFzc05hbWU6IGNsc3goY2xhc3Nlcy5yb290LCBjbGFzc2VzLmRvY2tlZCwgY2xhc3NOYW1lKSxcbiAgICAgIHJlZjogcmVmXG4gICAgfSwgb3RoZXIpLCBzbGlkaW5nRHJhd2VyKTtcbiAgfSAvLyB2YXJpYW50ID09PSB0ZW1wb3JhcnlcblxuXG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChNb2RhbCwgX2V4dGVuZHMoe1xuICAgIEJhY2tkcm9wUHJvcHM6IF9leHRlbmRzKHt9LCBCYWNrZHJvcFByb3BzLCBCYWNrZHJvcFByb3BzUHJvcCwge1xuICAgICAgdHJhbnNpdGlvbkR1cmF0aW9uOiB0cmFuc2l0aW9uRHVyYXRpb25cbiAgICB9KSxcbiAgICBCYWNrZHJvcENvbXBvbmVudDogQmFja2Ryb3AsXG4gICAgY2xhc3NOYW1lOiBjbHN4KGNsYXNzZXMucm9vdCwgY2xhc3Nlcy5tb2RhbCwgY2xhc3NOYW1lKSxcbiAgICBvcGVuOiBvcGVuLFxuICAgIG9uQ2xvc2U6IG9uQ2xvc2UsXG4gICAgcmVmOiByZWZcbiAgfSwgb3RoZXIsIE1vZGFsUHJvcHMpLCBzbGlkaW5nRHJhd2VyKTtcbn0pO1xucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gRHJhd2VyLnByb3BUeXBlcyA9IHtcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gV2FybmluZyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAvLyB8IFRoZXNlIFByb3BUeXBlcyBhcmUgZ2VuZXJhdGVkIGZyb20gdGhlIFR5cGVTY3JpcHQgdHlwZSBkZWZpbml0aW9ucyB8XG4gIC8vIHwgICAgIFRvIHVwZGF0ZSB0aGVtIGVkaXQgdGhlIGQudHMgZmlsZSBhbmQgcnVuIFwieWFybiBwcm9wdHlwZXNcIiAgICAgfFxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbiAgLyoqXG4gICAqIFNpZGUgZnJvbSB3aGljaCB0aGUgZHJhd2VyIHdpbGwgYXBwZWFyLlxuICAgKi9cbiAgYW5jaG9yOiBQcm9wVHlwZXMub25lT2YoWydib3R0b20nLCAnbGVmdCcsICdyaWdodCcsICd0b3AnXSksXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIEJhY2tkcm9wUHJvcHM6IFByb3BUeXBlcy5vYmplY3QsXG5cbiAgLyoqXG4gICAqIFRoZSBjb250ZW50cyBvZiB0aGUgZHJhd2VyLlxuICAgKi9cbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuXG4gIC8qKlxuICAgKiBPdmVycmlkZSBvciBleHRlbmQgdGhlIHN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAqIFNlZSBbQ1NTIEFQSV0oI2NzcykgYmVsb3cgZm9yIG1vcmUgZGV0YWlscy5cbiAgICovXG4gIGNsYXNzZXM6IFByb3BUeXBlcy5vYmplY3QsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogVGhlIGVsZXZhdGlvbiBvZiB0aGUgZHJhd2VyLlxuICAgKi9cbiAgZWxldmF0aW9uOiBQcm9wVHlwZXMubnVtYmVyLFxuXG4gIC8qKlxuICAgKiBQcm9wcyBhcHBsaWVkIHRvIHRoZSBbYE1vZGFsYF0oL2FwaS9tb2RhbC8pIGVsZW1lbnQuXG4gICAqL1xuICBNb2RhbFByb3BzOiBQcm9wVHlwZXMub2JqZWN0LFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCB3aGVuIHRoZSBjb21wb25lbnQgcmVxdWVzdHMgdG8gYmUgY2xvc2VkLlxuICAgKlxuICAgKiBAcGFyYW0ge29iamVjdH0gZXZlbnQgVGhlIGV2ZW50IHNvdXJjZSBvZiB0aGUgY2FsbGJhY2suXG4gICAqL1xuICBvbkNsb3NlOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgZHJhd2VyIGlzIG9wZW4uXG4gICAqL1xuICBvcGVuOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogUHJvcHMgYXBwbGllZCB0byB0aGUgW2BQYXBlcmBdKC9hcGkvcGFwZXIvKSBlbGVtZW50LlxuICAgKi9cbiAgUGFwZXJQcm9wczogUHJvcFR5cGVzLm9iamVjdCxcblxuICAvKipcbiAgICogUHJvcHMgYXBwbGllZCB0byB0aGUgW2BTbGlkZWBdKC9hcGkvc2xpZGUvKSBlbGVtZW50LlxuICAgKi9cbiAgU2xpZGVQcm9wczogUHJvcFR5cGVzLm9iamVjdCxcblxuICAvKipcbiAgICogVGhlIGR1cmF0aW9uIGZvciB0aGUgdHJhbnNpdGlvbiwgaW4gbWlsbGlzZWNvbmRzLlxuICAgKiBZb3UgbWF5IHNwZWNpZnkgYSBzaW5nbGUgdGltZW91dCBmb3IgYWxsIHRyYW5zaXRpb25zLCBvciBpbmRpdmlkdWFsbHkgd2l0aCBhbiBvYmplY3QuXG4gICAqL1xuICB0cmFuc2l0aW9uRHVyYXRpb246IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5udW1iZXIsIFByb3BUeXBlcy5zaGFwZSh7XG4gICAgYXBwZWFyOiBQcm9wVHlwZXMubnVtYmVyLFxuICAgIGVudGVyOiBQcm9wVHlwZXMubnVtYmVyLFxuICAgIGV4aXQ6IFByb3BUeXBlcy5udW1iZXJcbiAgfSldKSxcblxuICAvKipcbiAgICogVGhlIHZhcmlhbnQgdG8gdXNlLlxuICAgKi9cbiAgdmFyaWFudDogUHJvcFR5cGVzLm9uZU9mKFsncGVybWFuZW50JywgJ3BlcnNpc3RlbnQnLCAndGVtcG9yYXJ5J10pXG59IDogdm9pZCAwO1xuZXhwb3J0IGRlZmF1bHQgd2l0aFN0eWxlcyhzdHlsZXMsIHtcbiAgbmFtZTogJ011aURyYXdlcicsXG4gIGZsaXA6IGZhbHNlXG59KShEcmF3ZXIpOyIsImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgeyBleGFjdFByb3AgfSBmcm9tICdAbWF0ZXJpYWwtdWkvdXRpbHMnO1xudmFyIHVzZUVuaGFuY2VkRWZmZWN0ID0gdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICd0ZXN0JyA/IFJlYWN0LnVzZUxheW91dEVmZmVjdCA6IFJlYWN0LnVzZUVmZmVjdDtcbi8qKlxuICogTm9Tc3IgcHVycG9zZWx5IHJlbW92ZXMgY29tcG9uZW50cyBmcm9tIHRoZSBzdWJqZWN0IG9mIFNlcnZlciBTaWRlIFJlbmRlcmluZyAoU1NSKS5cbiAqXG4gKiBUaGlzIGNvbXBvbmVudCBjYW4gYmUgdXNlZnVsIGluIGEgdmFyaWV0eSBvZiBzaXR1YXRpb25zOlxuICogLSBFc2NhcGUgaGF0Y2ggZm9yIGJyb2tlbiBkZXBlbmRlbmNpZXMgbm90IHN1cHBvcnRpbmcgU1NSLlxuICogLSBJbXByb3ZlIHRoZSB0aW1lLXRvLWZpcnN0IHBhaW50IG9uIHRoZSBjbGllbnQgYnkgb25seSByZW5kZXJpbmcgYWJvdmUgdGhlIGZvbGQuXG4gKiAtIFJlZHVjZSB0aGUgcmVuZGVyaW5nIHRpbWUgb24gdGhlIHNlcnZlci5cbiAqIC0gVW5kZXIgdG9vIGhlYXZ5IHNlcnZlciBsb2FkLCB5b3UgY2FuIHR1cm4gb24gc2VydmljZSBkZWdyYWRhdGlvbi5cbiAqL1xuXG5mdW5jdGlvbiBOb1Nzcihwcm9wcykge1xuICB2YXIgY2hpbGRyZW4gPSBwcm9wcy5jaGlsZHJlbixcbiAgICAgIF9wcm9wcyRkZWZlciA9IHByb3BzLmRlZmVyLFxuICAgICAgZGVmZXIgPSBfcHJvcHMkZGVmZXIgPT09IHZvaWQgMCA/IGZhbHNlIDogX3Byb3BzJGRlZmVyLFxuICAgICAgX3Byb3BzJGZhbGxiYWNrID0gcHJvcHMuZmFsbGJhY2ssXG4gICAgICBmYWxsYmFjayA9IF9wcm9wcyRmYWxsYmFjayA9PT0gdm9pZCAwID8gbnVsbCA6IF9wcm9wcyRmYWxsYmFjaztcblxuICB2YXIgX1JlYWN0JHVzZVN0YXRlID0gUmVhY3QudXNlU3RhdGUoZmFsc2UpLFxuICAgICAgbW91bnRlZFN0YXRlID0gX1JlYWN0JHVzZVN0YXRlWzBdLFxuICAgICAgc2V0TW91bnRlZFN0YXRlID0gX1JlYWN0JHVzZVN0YXRlWzFdO1xuXG4gIHVzZUVuaGFuY2VkRWZmZWN0KGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoIWRlZmVyKSB7XG4gICAgICBzZXRNb3VudGVkU3RhdGUodHJ1ZSk7XG4gICAgfVxuICB9LCBbZGVmZXJdKTtcbiAgUmVhY3QudXNlRWZmZWN0KGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoZGVmZXIpIHtcbiAgICAgIHNldE1vdW50ZWRTdGF0ZSh0cnVlKTtcbiAgICB9XG4gIH0sIFtkZWZlcl0pOyAvLyBXZSBuZWVkIHRoZSBGcmFnbWVudCBoZXJlIHRvIGZvcmNlIHJlYWN0LWRvY2dlbiB0byByZWNvZ25pc2UgTm9Tc3IgYXMgYSBjb21wb25lbnQuXG5cbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFJlYWN0LkZyYWdtZW50LCBudWxsLCBtb3VudGVkU3RhdGUgPyBjaGlsZHJlbiA6IGZhbGxiYWNrKTtcbn1cblxucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gTm9Tc3IucHJvcFR5cGVzID0ge1xuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBXYXJuaW5nIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIC8vIHwgVGhlc2UgUHJvcFR5cGVzIGFyZSBnZW5lcmF0ZWQgZnJvbSB0aGUgVHlwZVNjcmlwdCB0eXBlIGRlZmluaXRpb25zIHxcbiAgLy8gfCAgICAgVG8gdXBkYXRlIHRoZW0gZWRpdCB0aGUgZC50cyBmaWxlIGFuZCBydW4gXCJ5YXJuIHByb3B0eXBlc1wiICAgICB8XG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuICAvKipcbiAgICogWW91IGNhbiB3cmFwIGEgbm9kZS5cbiAgICovXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgY29tcG9uZW50IHdpbGwgbm90IG9ubHkgcHJldmVudCBzZXJ2ZXItc2lkZSByZW5kZXJpbmcuXG4gICAqIEl0IHdpbGwgYWxzbyBkZWZlciB0aGUgcmVuZGVyaW5nIG9mIHRoZSBjaGlsZHJlbiBpbnRvIGEgZGlmZmVyZW50IHNjcmVlbiBmcmFtZS5cbiAgICovXG4gIGRlZmVyOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogVGhlIGZhbGxiYWNrIGNvbnRlbnQgdG8gZGlzcGxheS5cbiAgICovXG4gIGZhbGxiYWNrOiBQcm9wVHlwZXMubm9kZVxufSA6IHZvaWQgMDtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG4gIE5vU3NyWydwcm9wVHlwZXMnICsgJyddID0gZXhhY3RQcm9wKE5vU3NyLnByb3BUeXBlcyk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IE5vU3NyOyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF9kZWZpbmVQcm9wZXJ0eSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZGVmaW5lUHJvcGVydHlcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzXCI7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGNsc3ggZnJvbSAnY2xzeCc7XG5pbXBvcnQgd2l0aFN0eWxlcyBmcm9tICcuLi9zdHlsZXMvd2l0aFN0eWxlcyc7XG5pbXBvcnQgY2FwaXRhbGl6ZSBmcm9tICcuLi91dGlscy9jYXBpdGFsaXplJztcbmltcG9ydCB7IGlzSG9yaXpvbnRhbCB9IGZyb20gJy4uL0RyYXdlci9EcmF3ZXInO1xuZXhwb3J0IHZhciBzdHlsZXMgPSBmdW5jdGlvbiBzdHlsZXModGhlbWUpIHtcbiAgcmV0dXJuIHtcbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50LiAqL1xuICAgIHJvb3Q6IHtcbiAgICAgIHBvc2l0aW9uOiAnZml4ZWQnLFxuICAgICAgdG9wOiAwLFxuICAgICAgbGVmdDogMCxcbiAgICAgIGJvdHRvbTogMCxcbiAgICAgIHpJbmRleDogdGhlbWUuekluZGV4LmRyYXdlciAtIDFcbiAgICB9LFxuICAgIGFuY2hvckxlZnQ6IHtcbiAgICAgIHJpZ2h0OiAnYXV0bydcbiAgICB9LFxuICAgIGFuY2hvclJpZ2h0OiB7XG4gICAgICBsZWZ0OiAnYXV0bycsXG4gICAgICByaWdodDogMFxuICAgIH0sXG4gICAgYW5jaG9yVG9wOiB7XG4gICAgICBib3R0b206ICdhdXRvJyxcbiAgICAgIHJpZ2h0OiAwXG4gICAgfSxcbiAgICBhbmNob3JCb3R0b206IHtcbiAgICAgIHRvcDogJ2F1dG8nLFxuICAgICAgYm90dG9tOiAwLFxuICAgICAgcmlnaHQ6IDBcbiAgICB9XG4gIH07XG59O1xuLyoqXG4gKiBAaWdub3JlIC0gaW50ZXJuYWwgY29tcG9uZW50LlxuICovXG5cbnZhciBTd2lwZUFyZWEgPSAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBTd2lwZUFyZWEocHJvcHMsIHJlZikge1xuICB2YXIgYW5jaG9yID0gcHJvcHMuYW5jaG9yLFxuICAgICAgY2xhc3NlcyA9IHByb3BzLmNsYXNzZXMsXG4gICAgICBjbGFzc05hbWUgPSBwcm9wcy5jbGFzc05hbWUsXG4gICAgICB3aWR0aCA9IHByb3BzLndpZHRoLFxuICAgICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMocHJvcHMsIFtcImFuY2hvclwiLCBcImNsYXNzZXNcIiwgXCJjbGFzc05hbWVcIiwgXCJ3aWR0aFwiXSk7XG5cbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIF9leHRlbmRzKHtcbiAgICBjbGFzc05hbWU6IGNsc3goY2xhc3Nlcy5yb290LCBjbGFzc2VzW1wiYW5jaG9yXCIuY29uY2F0KGNhcGl0YWxpemUoYW5jaG9yKSldLCBjbGFzc05hbWUpLFxuICAgIHJlZjogcmVmLFxuICAgIHN0eWxlOiBfZGVmaW5lUHJvcGVydHkoe30sIGlzSG9yaXpvbnRhbChhbmNob3IpID8gJ3dpZHRoJyA6ICdoZWlnaHQnLCB3aWR0aClcbiAgfSwgb3RoZXIpKTtcbn0pO1xucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gU3dpcGVBcmVhLnByb3BUeXBlcyA9IHtcbiAgLyoqXG4gICAqIFNpZGUgb24gd2hpY2ggdG8gYXR0YWNoIHRoZSBkaXNjb3ZlcnkgYXJlYS5cbiAgICovXG4gIGFuY2hvcjogUHJvcFR5cGVzLm9uZU9mKFsnbGVmdCcsICd0b3AnLCAncmlnaHQnLCAnYm90dG9tJ10pLmlzUmVxdWlyZWQsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGNsYXNzZXM6IFByb3BUeXBlcy5vYmplY3QuaXNSZXF1aXJlZCxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBUaGUgd2lkdGggb2YgdGhlIGxlZnQgbW9zdCAob3IgcmlnaHQgbW9zdCkgYXJlYSBpbiBwaXhlbHMgd2hlcmUgdGhlXG4gICAqIGRyYXdlciBjYW4gYmUgc3dpcGVkIG9wZW4gZnJvbS5cbiAgICovXG4gIHdpZHRoOiBQcm9wVHlwZXMubnVtYmVyLmlzUmVxdWlyZWRcbn0gOiB2b2lkIDA7XG5leHBvcnQgZGVmYXVsdCB3aXRoU3R5bGVzKHN0eWxlcywge1xuICBuYW1lOiAnUHJpdmF0ZVN3aXBlQXJlYSdcbn0pKFN3aXBlQXJlYSk7IiwiaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNcIjtcbmltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCAqIGFzIFJlYWN0RE9NIGZyb20gJ3JlYWN0LWRvbSc7XG5pbXBvcnQgeyBlbGVtZW50VHlwZUFjY2VwdGluZ1JlZiB9IGZyb20gJ0BtYXRlcmlhbC11aS91dGlscyc7XG5pbXBvcnQgeyBnZXRUaGVtZVByb3BzIH0gZnJvbSAnQG1hdGVyaWFsLXVpL3N0eWxlcyc7XG5pbXBvcnQgRHJhd2VyLCB7IGdldEFuY2hvciwgaXNIb3Jpem9udGFsIH0gZnJvbSAnLi4vRHJhd2VyL0RyYXdlcic7XG5pbXBvcnQgb3duZXJEb2N1bWVudCBmcm9tICcuLi91dGlscy9vd25lckRvY3VtZW50JztcbmltcG9ydCB1c2VFdmVudENhbGxiYWNrIGZyb20gJy4uL3V0aWxzL3VzZUV2ZW50Q2FsbGJhY2snO1xuaW1wb3J0IHsgZHVyYXRpb24gfSBmcm9tICcuLi9zdHlsZXMvdHJhbnNpdGlvbnMnO1xuaW1wb3J0IHVzZVRoZW1lIGZyb20gJy4uL3N0eWxlcy91c2VUaGVtZSc7XG5pbXBvcnQgeyBnZXRUcmFuc2l0aW9uUHJvcHMgfSBmcm9tICcuLi90cmFuc2l0aW9ucy91dGlscyc7XG5pbXBvcnQgTm9Tc3IgZnJvbSAnLi4vTm9Tc3InO1xuaW1wb3J0IFN3aXBlQXJlYSBmcm9tICcuL1N3aXBlQXJlYSc7IC8vIFRoaXMgdmFsdWUgaXMgY2xvc2VkIHRvIHdoYXQgYnJvd3NlcnMgYXJlIHVzaW5nIGludGVybmFsbHkgdG9cbi8vIHRyaWdnZXIgYSBuYXRpdmUgc2Nyb2xsLlxuXG52YXIgVU5DRVJUQUlOVFlfVEhSRVNIT0xEID0gMzsgLy8gcHhcbi8vIFdlIGNhbiBvbmx5IGhhdmUgb25lIG5vZGUgYXQgdGhlIHRpbWUgY2xhaW1pbmcgb3duZXJzaGlwIGZvciBoYW5kbGluZyB0aGUgc3dpcGUuXG4vLyBPdGhlcndpc2UsIHRoZSBVWCB3b3VsZCBiZSBjb25mdXNpbmcuXG4vLyBUaGF0J3Mgd2h5IHdlIHVzZSBhIHNpbmdsZXRvbiBoZXJlLlxuXG52YXIgbm9kZVRoYXRDbGFpbWVkVGhlU3dpcGUgPSBudWxsOyAvLyBFeHBvcnRlZCBmb3IgdGVzdCBwdXJwb3Nlcy5cblxuZXhwb3J0IGZ1bmN0aW9uIHJlc2V0KCkge1xuICBub2RlVGhhdENsYWltZWRUaGVTd2lwZSA9IG51bGw7XG59XG5cbmZ1bmN0aW9uIGNhbGN1bGF0ZUN1cnJlbnRYKGFuY2hvciwgdG91Y2hlcykge1xuICByZXR1cm4gYW5jaG9yID09PSAncmlnaHQnID8gZG9jdW1lbnQuYm9keS5vZmZzZXRXaWR0aCAtIHRvdWNoZXNbMF0ucGFnZVggOiB0b3VjaGVzWzBdLnBhZ2VYO1xufVxuXG5mdW5jdGlvbiBjYWxjdWxhdGVDdXJyZW50WShhbmNob3IsIHRvdWNoZXMpIHtcbiAgcmV0dXJuIGFuY2hvciA9PT0gJ2JvdHRvbScgPyB3aW5kb3cuaW5uZXJIZWlnaHQgLSB0b3VjaGVzWzBdLmNsaWVudFkgOiB0b3VjaGVzWzBdLmNsaWVudFk7XG59XG5cbmZ1bmN0aW9uIGdldE1heFRyYW5zbGF0ZShob3Jpem9udGFsU3dpcGUsIHBhcGVySW5zdGFuY2UpIHtcbiAgcmV0dXJuIGhvcml6b250YWxTd2lwZSA/IHBhcGVySW5zdGFuY2UuY2xpZW50V2lkdGggOiBwYXBlckluc3RhbmNlLmNsaWVudEhlaWdodDtcbn1cblxuZnVuY3Rpb24gZ2V0VHJhbnNsYXRlKGN1cnJlbnRUcmFuc2xhdGUsIHN0YXJ0TG9jYXRpb24sIG9wZW4sIG1heFRyYW5zbGF0ZSkge1xuICByZXR1cm4gTWF0aC5taW4oTWF0aC5tYXgob3BlbiA/IHN0YXJ0TG9jYXRpb24gLSBjdXJyZW50VHJhbnNsYXRlIDogbWF4VHJhbnNsYXRlICsgc3RhcnRMb2NhdGlvbiAtIGN1cnJlbnRUcmFuc2xhdGUsIDApLCBtYXhUcmFuc2xhdGUpO1xufVxuXG5mdW5jdGlvbiBnZXREb21UcmVlU2hhcGVzKGVsZW1lbnQsIHJvb3ROb2RlKSB7XG4gIC8vIEFkYXB0ZWQgZnJvbSBodHRwczovL2dpdGh1Yi5jb20vb2xpdmllcnRhc3NpbmFyaS9yZWFjdC1zd2lwZWFibGUtdmlld3MvYmxvYi83NjY2ZGUxZGJhMjUzYjg5NjkxMWFkZjI3OTBjZTUxNDY3NjcwODU2L3BhY2thZ2VzL3JlYWN0LXN3aXBlYWJsZS12aWV3cy9zcmMvU3dpcGVhYmxlVmlld3MuanMjTDEyOVxuICB2YXIgZG9tVHJlZVNoYXBlcyA9IFtdO1xuXG4gIHdoaWxlIChlbGVtZW50ICYmIGVsZW1lbnQgIT09IHJvb3ROb2RlKSB7XG4gICAgdmFyIHN0eWxlID0gd2luZG93LmdldENvbXB1dGVkU3R5bGUoZWxlbWVudCk7XG5cbiAgICBpZiAoIC8vIElnbm9yZSB0aGUgc2Nyb2xsIGNoaWxkcmVuIGlmIHRoZSBlbGVtZW50IGlzIGFic29sdXRlIHBvc2l0aW9uZWQuXG4gICAgc3R5bGUuZ2V0UHJvcGVydHlWYWx1ZSgncG9zaXRpb24nKSA9PT0gJ2Fic29sdXRlJyB8fCAvLyBJZ25vcmUgdGhlIHNjcm9sbCBjaGlsZHJlbiBpZiB0aGUgZWxlbWVudCBoYXMgYW4gb3ZlcmZsb3dYIGhpZGRlblxuICAgIHN0eWxlLmdldFByb3BlcnR5VmFsdWUoJ292ZXJmbG93LXgnKSA9PT0gJ2hpZGRlbicpIHtcbiAgICAgIGRvbVRyZWVTaGFwZXMgPSBbXTtcbiAgICB9IGVsc2UgaWYgKGVsZW1lbnQuY2xpZW50V2lkdGggPiAwICYmIGVsZW1lbnQuc2Nyb2xsV2lkdGggPiBlbGVtZW50LmNsaWVudFdpZHRoIHx8IGVsZW1lbnQuY2xpZW50SGVpZ2h0ID4gMCAmJiBlbGVtZW50LnNjcm9sbEhlaWdodCA+IGVsZW1lbnQuY2xpZW50SGVpZ2h0KSB7XG4gICAgICAvLyBJZ25vcmUgdGhlIG5vZGVzIHRoYXQgaGF2ZSBubyB3aWR0aC5cbiAgICAgIC8vIEtlZXAgZWxlbWVudHMgd2l0aCBhIHNjcm9sbFxuICAgICAgZG9tVHJlZVNoYXBlcy5wdXNoKGVsZW1lbnQpO1xuICAgIH1cblxuICAgIGVsZW1lbnQgPSBlbGVtZW50LnBhcmVudEVsZW1lbnQ7XG4gIH1cblxuICByZXR1cm4gZG9tVHJlZVNoYXBlcztcbn1cblxuZnVuY3Rpb24gZmluZE5hdGl2ZUhhbmRsZXIoX3JlZikge1xuICB2YXIgZG9tVHJlZVNoYXBlcyA9IF9yZWYuZG9tVHJlZVNoYXBlcyxcbiAgICAgIHN0YXJ0ID0gX3JlZi5zdGFydCxcbiAgICAgIGN1cnJlbnQgPSBfcmVmLmN1cnJlbnQsXG4gICAgICBhbmNob3IgPSBfcmVmLmFuY2hvcjtcbiAgLy8gQWRhcHRlZCBmcm9tIGh0dHBzOi8vZ2l0aHViLmNvbS9vbGl2aWVydGFzc2luYXJpL3JlYWN0LXN3aXBlYWJsZS12aWV3cy9ibG9iLzc2NjZkZTFkYmEyNTNiODk2OTExYWRmMjc5MGNlNTE0Njc2NzA4NTYvcGFja2FnZXMvcmVhY3Qtc3dpcGVhYmxlLXZpZXdzL3NyYy9Td2lwZWFibGVWaWV3cy5qcyNMMTc1XG4gIHZhciBheGlzUHJvcGVydGllcyA9IHtcbiAgICBzY3JvbGxQb3NpdGlvbjoge1xuICAgICAgeDogJ3Njcm9sbExlZnQnLFxuICAgICAgeTogJ3Njcm9sbFRvcCdcbiAgICB9LFxuICAgIHNjcm9sbExlbmd0aDoge1xuICAgICAgeDogJ3Njcm9sbFdpZHRoJyxcbiAgICAgIHk6ICdzY3JvbGxIZWlnaHQnXG4gICAgfSxcbiAgICBjbGllbnRMZW5ndGg6IHtcbiAgICAgIHg6ICdjbGllbnRXaWR0aCcsXG4gICAgICB5OiAnY2xpZW50SGVpZ2h0J1xuICAgIH1cbiAgfTtcbiAgcmV0dXJuIGRvbVRyZWVTaGFwZXMuc29tZShmdW5jdGlvbiAoc2hhcGUpIHtcbiAgICAvLyBEZXRlcm1pbmUgaWYgd2UgYXJlIGdvaW5nIGJhY2t3YXJkIG9yIGZvcndhcmQuXG4gICAgdmFyIGdvaW5nRm9yd2FyZCA9IGN1cnJlbnQgPj0gc3RhcnQ7XG5cbiAgICBpZiAoYW5jaG9yID09PSAndG9wJyB8fCBhbmNob3IgPT09ICdsZWZ0Jykge1xuICAgICAgZ29pbmdGb3J3YXJkID0gIWdvaW5nRm9yd2FyZDtcbiAgICB9XG5cbiAgICB2YXIgYXhpcyA9IGFuY2hvciA9PT0gJ2xlZnQnIHx8IGFuY2hvciA9PT0gJ3JpZ2h0JyA/ICd4JyA6ICd5JztcbiAgICB2YXIgc2Nyb2xsUG9zaXRpb24gPSBzaGFwZVtheGlzUHJvcGVydGllcy5zY3JvbGxQb3NpdGlvbltheGlzXV07XG4gICAgdmFyIGFyZU5vdEF0U3RhcnQgPSBzY3JvbGxQb3NpdGlvbiA+IDA7XG4gICAgdmFyIGFyZU5vdEF0RW5kID0gc2Nyb2xsUG9zaXRpb24gKyBzaGFwZVtheGlzUHJvcGVydGllcy5jbGllbnRMZW5ndGhbYXhpc11dIDwgc2hhcGVbYXhpc1Byb3BlcnRpZXMuc2Nyb2xsTGVuZ3RoW2F4aXNdXTtcblxuICAgIGlmIChnb2luZ0ZvcndhcmQgJiYgYXJlTm90QXRFbmQgfHwgIWdvaW5nRm9yd2FyZCAmJiBhcmVOb3RBdFN0YXJ0KSB7XG4gICAgICByZXR1cm4gc2hhcGU7XG4gICAgfVxuXG4gICAgcmV0dXJuIG51bGw7XG4gIH0pO1xufVxuXG52YXIgaU9TID0gdHlwZW9mIG5hdmlnYXRvciAhPT0gJ3VuZGVmaW5lZCcgJiYgL2lQYWR8aVBob25lfGlQb2QvLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCk7XG52YXIgdHJhbnNpdGlvbkR1cmF0aW9uRGVmYXVsdCA9IHtcbiAgZW50ZXI6IGR1cmF0aW9uLmVudGVyaW5nU2NyZWVuLFxuICBleGl0OiBkdXJhdGlvbi5sZWF2aW5nU2NyZWVuXG59O1xudmFyIHVzZUVuaGFuY2VkRWZmZWN0ID0gdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgPyBSZWFjdC51c2VMYXlvdXRFZmZlY3QgOiBSZWFjdC51c2VFZmZlY3Q7XG52YXIgU3dpcGVhYmxlRHJhd2VyID0gLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gU3dpcGVhYmxlRHJhd2VyKGluUHJvcHMsIHJlZikge1xuICB2YXIgdGhlbWUgPSB1c2VUaGVtZSgpO1xuICB2YXIgcHJvcHMgPSBnZXRUaGVtZVByb3BzKHtcbiAgICBuYW1lOiAnTXVpU3dpcGVhYmxlRHJhd2VyJyxcbiAgICBwcm9wczogX2V4dGVuZHMoe30sIGluUHJvcHMpLFxuICAgIHRoZW1lOiB0aGVtZVxuICB9KTtcbiAgdmFyIF9wcm9wcyRhbmNob3IgPSBwcm9wcy5hbmNob3IsXG4gICAgICBhbmNob3IgPSBfcHJvcHMkYW5jaG9yID09PSB2b2lkIDAgPyAnbGVmdCcgOiBfcHJvcHMkYW5jaG9yLFxuICAgICAgX3Byb3BzJGRpc2FibGVCYWNrZHJvID0gcHJvcHMuZGlzYWJsZUJhY2tkcm9wVHJhbnNpdGlvbixcbiAgICAgIGRpc2FibGVCYWNrZHJvcFRyYW5zaXRpb24gPSBfcHJvcHMkZGlzYWJsZUJhY2tkcm8gPT09IHZvaWQgMCA/IGZhbHNlIDogX3Byb3BzJGRpc2FibGVCYWNrZHJvLFxuICAgICAgX3Byb3BzJGRpc2FibGVEaXNjb3ZlID0gcHJvcHMuZGlzYWJsZURpc2NvdmVyeSxcbiAgICAgIGRpc2FibGVEaXNjb3ZlcnkgPSBfcHJvcHMkZGlzYWJsZURpc2NvdmUgPT09IHZvaWQgMCA/IGZhbHNlIDogX3Byb3BzJGRpc2FibGVEaXNjb3ZlLFxuICAgICAgX3Byb3BzJGRpc2FibGVTd2lwZVRvID0gcHJvcHMuZGlzYWJsZVN3aXBlVG9PcGVuLFxuICAgICAgZGlzYWJsZVN3aXBlVG9PcGVuID0gX3Byb3BzJGRpc2FibGVTd2lwZVRvID09PSB2b2lkIDAgPyBpT1MgOiBfcHJvcHMkZGlzYWJsZVN3aXBlVG8sXG4gICAgICBoaWRlQmFja2Ryb3AgPSBwcm9wcy5oaWRlQmFja2Ryb3AsXG4gICAgICBfcHJvcHMkaHlzdGVyZXNpcyA9IHByb3BzLmh5c3RlcmVzaXMsXG4gICAgICBoeXN0ZXJlc2lzID0gX3Byb3BzJGh5c3RlcmVzaXMgPT09IHZvaWQgMCA/IDAuNTIgOiBfcHJvcHMkaHlzdGVyZXNpcyxcbiAgICAgIF9wcm9wcyRtaW5GbGluZ1ZlbG9jaSA9IHByb3BzLm1pbkZsaW5nVmVsb2NpdHksXG4gICAgICBtaW5GbGluZ1ZlbG9jaXR5ID0gX3Byb3BzJG1pbkZsaW5nVmVsb2NpID09PSB2b2lkIDAgPyA0NTAgOiBfcHJvcHMkbWluRmxpbmdWZWxvY2ksXG4gICAgICBfcHJvcHMkTW9kYWxQcm9wcyA9IHByb3BzLk1vZGFsUHJvcHM7XG4gIF9wcm9wcyRNb2RhbFByb3BzID0gX3Byb3BzJE1vZGFsUHJvcHMgPT09IHZvaWQgMCA/IHt9IDogX3Byb3BzJE1vZGFsUHJvcHM7XG5cbiAgdmFyIEJhY2tkcm9wUHJvcHMgPSBfcHJvcHMkTW9kYWxQcm9wcy5CYWNrZHJvcFByb3BzLFxuICAgICAgTW9kYWxQcm9wc1Byb3AgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMoX3Byb3BzJE1vZGFsUHJvcHMsIFtcIkJhY2tkcm9wUHJvcHNcIl0pLFxuICAgICAgb25DbG9zZSA9IHByb3BzLm9uQ2xvc2UsXG4gICAgICBvbk9wZW4gPSBwcm9wcy5vbk9wZW4sXG4gICAgICBvcGVuID0gcHJvcHMub3BlbixcbiAgICAgIF9wcm9wcyRQYXBlclByb3BzID0gcHJvcHMuUGFwZXJQcm9wcyxcbiAgICAgIFBhcGVyUHJvcHMgPSBfcHJvcHMkUGFwZXJQcm9wcyA9PT0gdm9pZCAwID8ge30gOiBfcHJvcHMkUGFwZXJQcm9wcyxcbiAgICAgIFN3aXBlQXJlYVByb3BzID0gcHJvcHMuU3dpcGVBcmVhUHJvcHMsXG4gICAgICBfcHJvcHMkc3dpcGVBcmVhV2lkdGggPSBwcm9wcy5zd2lwZUFyZWFXaWR0aCxcbiAgICAgIHN3aXBlQXJlYVdpZHRoID0gX3Byb3BzJHN3aXBlQXJlYVdpZHRoID09PSB2b2lkIDAgPyAyMCA6IF9wcm9wcyRzd2lwZUFyZWFXaWR0aCxcbiAgICAgIF9wcm9wcyR0cmFuc2l0aW9uRHVyYSA9IHByb3BzLnRyYW5zaXRpb25EdXJhdGlvbixcbiAgICAgIHRyYW5zaXRpb25EdXJhdGlvbiA9IF9wcm9wcyR0cmFuc2l0aW9uRHVyYSA9PT0gdm9pZCAwID8gdHJhbnNpdGlvbkR1cmF0aW9uRGVmYXVsdCA6IF9wcm9wcyR0cmFuc2l0aW9uRHVyYSxcbiAgICAgIF9wcm9wcyR2YXJpYW50ID0gcHJvcHMudmFyaWFudCxcbiAgICAgIHZhcmlhbnQgPSBfcHJvcHMkdmFyaWFudCA9PT0gdm9pZCAwID8gJ3RlbXBvcmFyeScgOiBfcHJvcHMkdmFyaWFudCxcbiAgICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKHByb3BzLCBbXCJhbmNob3JcIiwgXCJkaXNhYmxlQmFja2Ryb3BUcmFuc2l0aW9uXCIsIFwiZGlzYWJsZURpc2NvdmVyeVwiLCBcImRpc2FibGVTd2lwZVRvT3BlblwiLCBcImhpZGVCYWNrZHJvcFwiLCBcImh5c3RlcmVzaXNcIiwgXCJtaW5GbGluZ1ZlbG9jaXR5XCIsIFwiTW9kYWxQcm9wc1wiLCBcIm9uQ2xvc2VcIiwgXCJvbk9wZW5cIiwgXCJvcGVuXCIsIFwiUGFwZXJQcm9wc1wiLCBcIlN3aXBlQXJlYVByb3BzXCIsIFwic3dpcGVBcmVhV2lkdGhcIiwgXCJ0cmFuc2l0aW9uRHVyYXRpb25cIiwgXCJ2YXJpYW50XCJdKTtcblxuICB2YXIgX1JlYWN0JHVzZVN0YXRlID0gUmVhY3QudXNlU3RhdGUoZmFsc2UpLFxuICAgICAgbWF5YmVTd2lwaW5nID0gX1JlYWN0JHVzZVN0YXRlWzBdLFxuICAgICAgc2V0TWF5YmVTd2lwaW5nID0gX1JlYWN0JHVzZVN0YXRlWzFdO1xuXG4gIHZhciBzd2lwZUluc3RhbmNlID0gUmVhY3QudXNlUmVmKHtcbiAgICBpc1N3aXBpbmc6IG51bGxcbiAgfSk7XG4gIHZhciBzd2lwZUFyZWFSZWYgPSBSZWFjdC51c2VSZWYoKTtcbiAgdmFyIGJhY2tkcm9wUmVmID0gUmVhY3QudXNlUmVmKCk7XG4gIHZhciBwYXBlclJlZiA9IFJlYWN0LnVzZVJlZigpO1xuICB2YXIgdG91Y2hEZXRlY3RlZCA9IFJlYWN0LnVzZVJlZihmYWxzZSk7IC8vIFJlZiBmb3IgdHJhbnNpdGlvbiBkdXJhdGlvbiBiYXNlZCBvbiAvIHRvIG1hdGNoIHN3aXBlIHNwZWVkXG5cbiAgdmFyIGNhbGN1bGF0ZWREdXJhdGlvblJlZiA9IFJlYWN0LnVzZVJlZigpOyAvLyBVc2UgYSByZWYgc28gdGhlIG9wZW4gdmFsdWUgdXNlZCBpcyBhbHdheXMgdXAgdG8gZGF0ZSBpbnNpZGUgdXNlQ2FsbGJhY2suXG5cbiAgdXNlRW5oYW5jZWRFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgIGNhbGN1bGF0ZWREdXJhdGlvblJlZi5jdXJyZW50ID0gbnVsbDtcbiAgfSwgW29wZW5dKTtcbiAgdmFyIHNldFBvc2l0aW9uID0gUmVhY3QudXNlQ2FsbGJhY2soZnVuY3Rpb24gKHRyYW5zbGF0ZSkge1xuICAgIHZhciBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB7fTtcbiAgICB2YXIgX29wdGlvbnMkbW9kZSA9IG9wdGlvbnMubW9kZSxcbiAgICAgICAgbW9kZSA9IF9vcHRpb25zJG1vZGUgPT09IHZvaWQgMCA/IG51bGwgOiBfb3B0aW9ucyRtb2RlLFxuICAgICAgICBfb3B0aW9ucyRjaGFuZ2VUcmFuc2kgPSBvcHRpb25zLmNoYW5nZVRyYW5zaXRpb24sXG4gICAgICAgIGNoYW5nZVRyYW5zaXRpb24gPSBfb3B0aW9ucyRjaGFuZ2VUcmFuc2kgPT09IHZvaWQgMCA/IHRydWUgOiBfb3B0aW9ucyRjaGFuZ2VUcmFuc2k7XG4gICAgdmFyIGFuY2hvclJ0bCA9IGdldEFuY2hvcih0aGVtZSwgYW5jaG9yKTtcbiAgICB2YXIgcnRsVHJhbnNsYXRlTXVsdGlwbGllciA9IFsncmlnaHQnLCAnYm90dG9tJ10uaW5kZXhPZihhbmNob3JSdGwpICE9PSAtMSA/IDEgOiAtMTtcbiAgICB2YXIgaG9yaXpvbnRhbFN3aXBlID0gaXNIb3Jpem9udGFsKGFuY2hvcik7XG4gICAgdmFyIHRyYW5zZm9ybSA9IGhvcml6b250YWxTd2lwZSA/IFwidHJhbnNsYXRlKFwiLmNvbmNhdChydGxUcmFuc2xhdGVNdWx0aXBsaWVyICogdHJhbnNsYXRlLCBcInB4LCAwKVwiKSA6IFwidHJhbnNsYXRlKDAsIFwiLmNvbmNhdChydGxUcmFuc2xhdGVNdWx0aXBsaWVyICogdHJhbnNsYXRlLCBcInB4KVwiKTtcbiAgICB2YXIgZHJhd2VyU3R5bGUgPSBwYXBlclJlZi5jdXJyZW50LnN0eWxlO1xuICAgIGRyYXdlclN0eWxlLndlYmtpdFRyYW5zZm9ybSA9IHRyYW5zZm9ybTtcbiAgICBkcmF3ZXJTdHlsZS50cmFuc2Zvcm0gPSB0cmFuc2Zvcm07XG4gICAgdmFyIHRyYW5zaXRpb24gPSAnJztcblxuICAgIGlmIChtb2RlKSB7XG4gICAgICB0cmFuc2l0aW9uID0gdGhlbWUudHJhbnNpdGlvbnMuY3JlYXRlKCdhbGwnLCBnZXRUcmFuc2l0aW9uUHJvcHMoe1xuICAgICAgICB0aW1lb3V0OiB0cmFuc2l0aW9uRHVyYXRpb25cbiAgICAgIH0sIHtcbiAgICAgICAgbW9kZTogbW9kZVxuICAgICAgfSkpO1xuICAgIH1cblxuICAgIGlmIChjaGFuZ2VUcmFuc2l0aW9uKSB7XG4gICAgICBkcmF3ZXJTdHlsZS53ZWJraXRUcmFuc2l0aW9uID0gdHJhbnNpdGlvbjtcbiAgICAgIGRyYXdlclN0eWxlLnRyYW5zaXRpb24gPSB0cmFuc2l0aW9uO1xuICAgIH1cblxuICAgIGlmICghZGlzYWJsZUJhY2tkcm9wVHJhbnNpdGlvbiAmJiAhaGlkZUJhY2tkcm9wKSB7XG4gICAgICB2YXIgYmFja2Ryb3BTdHlsZSA9IGJhY2tkcm9wUmVmLmN1cnJlbnQuc3R5bGU7XG4gICAgICBiYWNrZHJvcFN0eWxlLm9wYWNpdHkgPSAxIC0gdHJhbnNsYXRlIC8gZ2V0TWF4VHJhbnNsYXRlKGhvcml6b250YWxTd2lwZSwgcGFwZXJSZWYuY3VycmVudCk7XG5cbiAgICAgIGlmIChjaGFuZ2VUcmFuc2l0aW9uKSB7XG4gICAgICAgIGJhY2tkcm9wU3R5bGUud2Via2l0VHJhbnNpdGlvbiA9IHRyYW5zaXRpb247XG4gICAgICAgIGJhY2tkcm9wU3R5bGUudHJhbnNpdGlvbiA9IHRyYW5zaXRpb247XG4gICAgICB9XG4gICAgfVxuICB9LCBbYW5jaG9yLCBkaXNhYmxlQmFja2Ryb3BUcmFuc2l0aW9uLCBoaWRlQmFja2Ryb3AsIHRoZW1lLCB0cmFuc2l0aW9uRHVyYXRpb25dKTtcbiAgdmFyIGhhbmRsZUJvZHlUb3VjaEVuZCA9IHVzZUV2ZW50Q2FsbGJhY2soZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgaWYgKCF0b3VjaERldGVjdGVkLmN1cnJlbnQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBub2RlVGhhdENsYWltZWRUaGVTd2lwZSA9IG51bGw7XG4gICAgdG91Y2hEZXRlY3RlZC5jdXJyZW50ID0gZmFsc2U7XG4gICAgc2V0TWF5YmVTd2lwaW5nKGZhbHNlKTsgLy8gVGhlIHN3aXBlIHdhc24ndCBzdGFydGVkLlxuXG4gICAgaWYgKCFzd2lwZUluc3RhbmNlLmN1cnJlbnQuaXNTd2lwaW5nKSB7XG4gICAgICBzd2lwZUluc3RhbmNlLmN1cnJlbnQuaXNTd2lwaW5nID0gbnVsbDtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBzd2lwZUluc3RhbmNlLmN1cnJlbnQuaXNTd2lwaW5nID0gbnVsbDtcbiAgICB2YXIgYW5jaG9yUnRsID0gZ2V0QW5jaG9yKHRoZW1lLCBhbmNob3IpO1xuICAgIHZhciBob3Jpem9udGFsID0gaXNIb3Jpem9udGFsKGFuY2hvcik7XG4gICAgdmFyIGN1cnJlbnQ7XG5cbiAgICBpZiAoaG9yaXpvbnRhbCkge1xuICAgICAgY3VycmVudCA9IGNhbGN1bGF0ZUN1cnJlbnRYKGFuY2hvclJ0bCwgZXZlbnQuY2hhbmdlZFRvdWNoZXMpO1xuICAgIH0gZWxzZSB7XG4gICAgICBjdXJyZW50ID0gY2FsY3VsYXRlQ3VycmVudFkoYW5jaG9yUnRsLCBldmVudC5jaGFuZ2VkVG91Y2hlcyk7XG4gICAgfVxuXG4gICAgdmFyIHN0YXJ0TG9jYXRpb24gPSBob3Jpem9udGFsID8gc3dpcGVJbnN0YW5jZS5jdXJyZW50LnN0YXJ0WCA6IHN3aXBlSW5zdGFuY2UuY3VycmVudC5zdGFydFk7XG4gICAgdmFyIG1heFRyYW5zbGF0ZSA9IGdldE1heFRyYW5zbGF0ZShob3Jpem9udGFsLCBwYXBlclJlZi5jdXJyZW50KTtcbiAgICB2YXIgY3VycmVudFRyYW5zbGF0ZSA9IGdldFRyYW5zbGF0ZShjdXJyZW50LCBzdGFydExvY2F0aW9uLCBvcGVuLCBtYXhUcmFuc2xhdGUpO1xuICAgIHZhciB0cmFuc2xhdGVSYXRpbyA9IGN1cnJlbnRUcmFuc2xhdGUgLyBtYXhUcmFuc2xhdGU7XG5cbiAgICBpZiAoTWF0aC5hYnMoc3dpcGVJbnN0YW5jZS5jdXJyZW50LnZlbG9jaXR5KSA+IG1pbkZsaW5nVmVsb2NpdHkpIHtcbiAgICAgIC8vIENhbGN1bGF0ZSB0cmFuc2l0aW9uIGR1cmF0aW9uIHRvIG1hdGNoIHN3aXBlIHNwZWVkXG4gICAgICBjYWxjdWxhdGVkRHVyYXRpb25SZWYuY3VycmVudCA9IE1hdGguYWJzKChtYXhUcmFuc2xhdGUgLSBjdXJyZW50VHJhbnNsYXRlKSAvIHN3aXBlSW5zdGFuY2UuY3VycmVudC52ZWxvY2l0eSkgKiAxMDAwO1xuICAgIH1cblxuICAgIGlmIChvcGVuKSB7XG4gICAgICBpZiAoc3dpcGVJbnN0YW5jZS5jdXJyZW50LnZlbG9jaXR5ID4gbWluRmxpbmdWZWxvY2l0eSB8fCB0cmFuc2xhdGVSYXRpbyA+IGh5c3RlcmVzaXMpIHtcbiAgICAgICAgb25DbG9zZSgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gUmVzZXQgdGhlIHBvc2l0aW9uLCB0aGUgc3dpcGUgd2FzIGFib3J0ZWQuXG4gICAgICAgIHNldFBvc2l0aW9uKDAsIHtcbiAgICAgICAgICBtb2RlOiAnZXhpdCdcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoc3dpcGVJbnN0YW5jZS5jdXJyZW50LnZlbG9jaXR5IDwgLW1pbkZsaW5nVmVsb2NpdHkgfHwgMSAtIHRyYW5zbGF0ZVJhdGlvID4gaHlzdGVyZXNpcykge1xuICAgICAgb25PcGVuKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIFJlc2V0IHRoZSBwb3NpdGlvbiwgdGhlIHN3aXBlIHdhcyBhYm9ydGVkLlxuICAgICAgc2V0UG9zaXRpb24oZ2V0TWF4VHJhbnNsYXRlKGhvcml6b250YWwsIHBhcGVyUmVmLmN1cnJlbnQpLCB7XG4gICAgICAgIG1vZGU6ICdlbnRlcidcbiAgICAgIH0pO1xuICAgIH1cbiAgfSk7XG4gIHZhciBoYW5kbGVCb2R5VG91Y2hNb3ZlID0gdXNlRXZlbnRDYWxsYmFjayhmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAvLyB0aGUgcmVmIG1heSBiZSBudWxsIHdoZW4gYSBwYXJlbnQgY29tcG9uZW50IHVwZGF0ZXMgd2hpbGUgc3dpcGluZ1xuICAgIGlmICghcGFwZXJSZWYuY3VycmVudCB8fCAhdG91Y2hEZXRlY3RlZC5jdXJyZW50KSB7XG4gICAgICByZXR1cm47XG4gICAgfSAvLyBXZSBhcmUgbm90IHN1cHBvc2VkIHRvIGhhbmRsZSB0aGlzIHRvdWNoIG1vdmUgYmVjYXVzZSB0aGUgc3dpcGUgd2FzIHN0YXJ0ZWQgaW4gYSBzY3JvbGxhYmxlIGNvbnRhaW5lciBpbiB0aGUgZHJhd2VyXG5cblxuICAgIGlmIChub2RlVGhhdENsYWltZWRUaGVTd2lwZSAhPSBudWxsICYmIG5vZGVUaGF0Q2xhaW1lZFRoZVN3aXBlICE9PSBzd2lwZUluc3RhbmNlLmN1cnJlbnQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgYW5jaG9yUnRsID0gZ2V0QW5jaG9yKHRoZW1lLCBhbmNob3IpO1xuICAgIHZhciBob3Jpem9udGFsU3dpcGUgPSBpc0hvcml6b250YWwoYW5jaG9yKTtcbiAgICB2YXIgY3VycmVudFggPSBjYWxjdWxhdGVDdXJyZW50WChhbmNob3JSdGwsIGV2ZW50LnRvdWNoZXMpO1xuICAgIHZhciBjdXJyZW50WSA9IGNhbGN1bGF0ZUN1cnJlbnRZKGFuY2hvclJ0bCwgZXZlbnQudG91Y2hlcyk7XG5cbiAgICBpZiAob3BlbiAmJiBwYXBlclJlZi5jdXJyZW50LmNvbnRhaW5zKGV2ZW50LnRhcmdldCkgJiYgbm9kZVRoYXRDbGFpbWVkVGhlU3dpcGUgPT0gbnVsbCkge1xuICAgICAgdmFyIGRvbVRyZWVTaGFwZXMgPSBnZXREb21UcmVlU2hhcGVzKGV2ZW50LnRhcmdldCwgcGFwZXJSZWYuY3VycmVudCk7XG4gICAgICB2YXIgbmF0aXZlSGFuZGxlciA9IGZpbmROYXRpdmVIYW5kbGVyKHtcbiAgICAgICAgZG9tVHJlZVNoYXBlczogZG9tVHJlZVNoYXBlcyxcbiAgICAgICAgc3RhcnQ6IGhvcml6b250YWxTd2lwZSA/IHN3aXBlSW5zdGFuY2UuY3VycmVudC5zdGFydFggOiBzd2lwZUluc3RhbmNlLmN1cnJlbnQuc3RhcnRZLFxuICAgICAgICBjdXJyZW50OiBob3Jpem9udGFsU3dpcGUgPyBjdXJyZW50WCA6IGN1cnJlbnRZLFxuICAgICAgICBhbmNob3I6IGFuY2hvclxuICAgICAgfSk7XG5cbiAgICAgIGlmIChuYXRpdmVIYW5kbGVyKSB7XG4gICAgICAgIG5vZGVUaGF0Q2xhaW1lZFRoZVN3aXBlID0gbmF0aXZlSGFuZGxlcjtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBub2RlVGhhdENsYWltZWRUaGVTd2lwZSA9IHN3aXBlSW5zdGFuY2UuY3VycmVudDtcbiAgICB9IC8vIFdlIGRvbid0IGtub3cgeWV0LlxuXG5cbiAgICBpZiAoc3dpcGVJbnN0YW5jZS5jdXJyZW50LmlzU3dpcGluZyA9PSBudWxsKSB7XG4gICAgICB2YXIgZHggPSBNYXRoLmFicyhjdXJyZW50WCAtIHN3aXBlSW5zdGFuY2UuY3VycmVudC5zdGFydFgpO1xuICAgICAgdmFyIGR5ID0gTWF0aC5hYnMoY3VycmVudFkgLSBzd2lwZUluc3RhbmNlLmN1cnJlbnQuc3RhcnRZKTsgLy8gV2UgYXJlIGxpa2VseSB0byBiZSBzd2lwaW5nLCBsZXQncyBwcmV2ZW50IHRoZSBzY3JvbGwgZXZlbnQgb24gaU9TLlxuXG4gICAgICBpZiAoZHggPiBkeSkge1xuICAgICAgICBpZiAoZXZlbnQuY2FuY2VsYWJsZSkge1xuICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgdmFyIGRlZmluaXRlbHlTd2lwaW5nID0gaG9yaXpvbnRhbFN3aXBlID8gZHggPiBkeSAmJiBkeCA+IFVOQ0VSVEFJTlRZX1RIUkVTSE9MRCA6IGR5ID4gZHggJiYgZHkgPiBVTkNFUlRBSU5UWV9USFJFU0hPTEQ7XG5cbiAgICAgIGlmIChkZWZpbml0ZWx5U3dpcGluZyA9PT0gdHJ1ZSB8fCAoaG9yaXpvbnRhbFN3aXBlID8gZHkgPiBVTkNFUlRBSU5UWV9USFJFU0hPTEQgOiBkeCA+IFVOQ0VSVEFJTlRZX1RIUkVTSE9MRCkpIHtcbiAgICAgICAgc3dpcGVJbnN0YW5jZS5jdXJyZW50LmlzU3dpcGluZyA9IGRlZmluaXRlbHlTd2lwaW5nO1xuXG4gICAgICAgIGlmICghZGVmaW5pdGVseVN3aXBpbmcpIHtcbiAgICAgICAgICBoYW5kbGVCb2R5VG91Y2hFbmQoZXZlbnQpO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfSAvLyBTaGlmdCB0aGUgc3RhcnRpbmcgcG9pbnQuXG5cblxuICAgICAgICBzd2lwZUluc3RhbmNlLmN1cnJlbnQuc3RhcnRYID0gY3VycmVudFg7XG4gICAgICAgIHN3aXBlSW5zdGFuY2UuY3VycmVudC5zdGFydFkgPSBjdXJyZW50WTsgLy8gQ29tcGVuc2F0ZSBmb3IgdGhlIHBhcnQgb2YgdGhlIGRyYXdlciBkaXNwbGF5ZWQgb24gdG91Y2ggc3RhcnQuXG5cbiAgICAgICAgaWYgKCFkaXNhYmxlRGlzY292ZXJ5ICYmICFvcGVuKSB7XG4gICAgICAgICAgaWYgKGhvcml6b250YWxTd2lwZSkge1xuICAgICAgICAgICAgc3dpcGVJbnN0YW5jZS5jdXJyZW50LnN0YXJ0WCAtPSBzd2lwZUFyZWFXaWR0aDtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgc3dpcGVJbnN0YW5jZS5jdXJyZW50LnN0YXJ0WSAtPSBzd2lwZUFyZWFXaWR0aDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoIXN3aXBlSW5zdGFuY2UuY3VycmVudC5pc1N3aXBpbmcpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgbWF4VHJhbnNsYXRlID0gZ2V0TWF4VHJhbnNsYXRlKGhvcml6b250YWxTd2lwZSwgcGFwZXJSZWYuY3VycmVudCk7XG4gICAgdmFyIHN0YXJ0TG9jYXRpb24gPSBob3Jpem9udGFsU3dpcGUgPyBzd2lwZUluc3RhbmNlLmN1cnJlbnQuc3RhcnRYIDogc3dpcGVJbnN0YW5jZS5jdXJyZW50LnN0YXJ0WTtcblxuICAgIGlmIChvcGVuICYmICFzd2lwZUluc3RhbmNlLmN1cnJlbnQucGFwZXJIaXQpIHtcbiAgICAgIHN0YXJ0TG9jYXRpb24gPSBNYXRoLm1pbihzdGFydExvY2F0aW9uLCBtYXhUcmFuc2xhdGUpO1xuICAgIH1cblxuICAgIHZhciB0cmFuc2xhdGUgPSBnZXRUcmFuc2xhdGUoaG9yaXpvbnRhbFN3aXBlID8gY3VycmVudFggOiBjdXJyZW50WSwgc3RhcnRMb2NhdGlvbiwgb3BlbiwgbWF4VHJhbnNsYXRlKTtcblxuICAgIGlmIChvcGVuKSB7XG4gICAgICBpZiAoIXN3aXBlSW5zdGFuY2UuY3VycmVudC5wYXBlckhpdCkge1xuICAgICAgICB2YXIgcGFwZXJIaXQgPSBob3Jpem9udGFsU3dpcGUgPyBjdXJyZW50WCA8IG1heFRyYW5zbGF0ZSA6IGN1cnJlbnRZIDwgbWF4VHJhbnNsYXRlO1xuXG4gICAgICAgIGlmIChwYXBlckhpdCkge1xuICAgICAgICAgIHN3aXBlSW5zdGFuY2UuY3VycmVudC5wYXBlckhpdCA9IHRydWU7XG4gICAgICAgICAgc3dpcGVJbnN0YW5jZS5jdXJyZW50LnN0YXJ0WCA9IGN1cnJlbnRYO1xuICAgICAgICAgIHN3aXBlSW5zdGFuY2UuY3VycmVudC5zdGFydFkgPSBjdXJyZW50WTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAodHJhbnNsYXRlID09PSAwKSB7XG4gICAgICAgIHN3aXBlSW5zdGFuY2UuY3VycmVudC5zdGFydFggPSBjdXJyZW50WDtcbiAgICAgICAgc3dpcGVJbnN0YW5jZS5jdXJyZW50LnN0YXJ0WSA9IGN1cnJlbnRZO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChzd2lwZUluc3RhbmNlLmN1cnJlbnQubGFzdFRyYW5zbGF0ZSA9PT0gbnVsbCkge1xuICAgICAgc3dpcGVJbnN0YW5jZS5jdXJyZW50Lmxhc3RUcmFuc2xhdGUgPSB0cmFuc2xhdGU7XG4gICAgICBzd2lwZUluc3RhbmNlLmN1cnJlbnQubGFzdFRpbWUgPSBwZXJmb3JtYW5jZS5ub3coKSArIDE7XG4gICAgfVxuXG4gICAgdmFyIHZlbG9jaXR5ID0gKHRyYW5zbGF0ZSAtIHN3aXBlSW5zdGFuY2UuY3VycmVudC5sYXN0VHJhbnNsYXRlKSAvIChwZXJmb3JtYW5jZS5ub3coKSAtIHN3aXBlSW5zdGFuY2UuY3VycmVudC5sYXN0VGltZSkgKiAxZTM7IC8vIExvdyBQYXNzIGZpbHRlci5cblxuICAgIHN3aXBlSW5zdGFuY2UuY3VycmVudC52ZWxvY2l0eSA9IHN3aXBlSW5zdGFuY2UuY3VycmVudC52ZWxvY2l0eSAqIDAuNCArIHZlbG9jaXR5ICogMC42O1xuICAgIHN3aXBlSW5zdGFuY2UuY3VycmVudC5sYXN0VHJhbnNsYXRlID0gdHJhbnNsYXRlO1xuICAgIHN3aXBlSW5zdGFuY2UuY3VycmVudC5sYXN0VGltZSA9IHBlcmZvcm1hbmNlLm5vdygpOyAvLyBXZSBhcmUgc3dpcGluZywgbGV0J3MgcHJldmVudCB0aGUgc2Nyb2xsIGV2ZW50IG9uIGlPUy5cblxuICAgIGlmIChldmVudC5jYW5jZWxhYmxlKSB7XG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIH1cblxuICAgIHNldFBvc2l0aW9uKHRyYW5zbGF0ZSk7XG4gIH0pO1xuICB2YXIgaGFuZGxlQm9keVRvdWNoU3RhcnQgPSB1c2VFdmVudENhbGxiYWNrKGZ1bmN0aW9uIChldmVudCkge1xuICAgIC8vIFdlIGFyZSBub3Qgc3VwcG9zZWQgdG8gaGFuZGxlIHRoaXMgdG91Y2ggbW92ZS5cbiAgICAvLyBFeGFtcGxlIG9mIHVzZSBjYXNlOiBpZ25vcmUgdGhlIGV2ZW50IGlmIHRoZXJlIGlzIGEgU2xpZGVyLlxuICAgIGlmIChldmVudC5kZWZhdWx0UHJldmVudGVkKSB7XG4gICAgICByZXR1cm47XG4gICAgfSAvLyBXZSBjYW4gb25seSBoYXZlIG9uZSBub2RlIGF0IHRoZSB0aW1lIGNsYWltaW5nIG93bmVyc2hpcCBmb3IgaGFuZGxpbmcgdGhlIHN3aXBlLlxuXG5cbiAgICBpZiAoZXZlbnQubXVpSGFuZGxlZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH0gLy8gQXQgbGVhc3Qgb25lIGVsZW1lbnQgY2xvZ3MgdGhlIGRyYXdlciBpbnRlcmFjdGlvbiB6b25lLlxuXG5cbiAgICBpZiAob3BlbiAmJiAhYmFja2Ryb3BSZWYuY3VycmVudC5jb250YWlucyhldmVudC50YXJnZXQpICYmICFwYXBlclJlZi5jdXJyZW50LmNvbnRhaW5zKGV2ZW50LnRhcmdldCkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgYW5jaG9yUnRsID0gZ2V0QW5jaG9yKHRoZW1lLCBhbmNob3IpO1xuICAgIHZhciBob3Jpem9udGFsU3dpcGUgPSBpc0hvcml6b250YWwoYW5jaG9yKTtcbiAgICB2YXIgY3VycmVudFggPSBjYWxjdWxhdGVDdXJyZW50WChhbmNob3JSdGwsIGV2ZW50LnRvdWNoZXMpO1xuICAgIHZhciBjdXJyZW50WSA9IGNhbGN1bGF0ZUN1cnJlbnRZKGFuY2hvclJ0bCwgZXZlbnQudG91Y2hlcyk7XG5cbiAgICBpZiAoIW9wZW4pIHtcbiAgICAgIGlmIChkaXNhYmxlU3dpcGVUb09wZW4gfHwgZXZlbnQudGFyZ2V0ICE9PSBzd2lwZUFyZWFSZWYuY3VycmVudCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmIChob3Jpem9udGFsU3dpcGUpIHtcbiAgICAgICAgaWYgKGN1cnJlbnRYID4gc3dpcGVBcmVhV2lkdGgpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoY3VycmVudFkgPiBzd2lwZUFyZWFXaWR0aCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgfVxuXG4gICAgZXZlbnQubXVpSGFuZGxlZCA9IHRydWU7XG4gICAgbm9kZVRoYXRDbGFpbWVkVGhlU3dpcGUgPSBudWxsO1xuICAgIHN3aXBlSW5zdGFuY2UuY3VycmVudC5zdGFydFggPSBjdXJyZW50WDtcbiAgICBzd2lwZUluc3RhbmNlLmN1cnJlbnQuc3RhcnRZID0gY3VycmVudFk7XG4gICAgc2V0TWF5YmVTd2lwaW5nKHRydWUpO1xuXG4gICAgaWYgKCFvcGVuICYmIHBhcGVyUmVmLmN1cnJlbnQpIHtcbiAgICAgIC8vIFRoZSByZWYgbWF5IGJlIG51bGwgd2hlbiBhIHBhcmVudCBjb21wb25lbnQgdXBkYXRlcyB3aGlsZSBzd2lwaW5nLlxuICAgICAgc2V0UG9zaXRpb24oZ2V0TWF4VHJhbnNsYXRlKGhvcml6b250YWxTd2lwZSwgcGFwZXJSZWYuY3VycmVudCkgKyAoZGlzYWJsZURpc2NvdmVyeSA/IDIwIDogLXN3aXBlQXJlYVdpZHRoKSwge1xuICAgICAgICBjaGFuZ2VUcmFuc2l0aW9uOiBmYWxzZVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgc3dpcGVJbnN0YW5jZS5jdXJyZW50LnZlbG9jaXR5ID0gMDtcbiAgICBzd2lwZUluc3RhbmNlLmN1cnJlbnQubGFzdFRpbWUgPSBudWxsO1xuICAgIHN3aXBlSW5zdGFuY2UuY3VycmVudC5sYXN0VHJhbnNsYXRlID0gbnVsbDtcbiAgICBzd2lwZUluc3RhbmNlLmN1cnJlbnQucGFwZXJIaXQgPSBmYWxzZTtcbiAgICB0b3VjaERldGVjdGVkLmN1cnJlbnQgPSB0cnVlO1xuICB9KTtcbiAgUmVhY3QudXNlRWZmZWN0KGZ1bmN0aW9uICgpIHtcbiAgICBpZiAodmFyaWFudCA9PT0gJ3RlbXBvcmFyeScpIHtcbiAgICAgIHZhciBkb2MgPSBvd25lckRvY3VtZW50KHBhcGVyUmVmLmN1cnJlbnQpO1xuICAgICAgZG9jLmFkZEV2ZW50TGlzdGVuZXIoJ3RvdWNoc3RhcnQnLCBoYW5kbGVCb2R5VG91Y2hTdGFydCk7XG4gICAgICBkb2MuYWRkRXZlbnRMaXN0ZW5lcigndG91Y2htb3ZlJywgaGFuZGxlQm9keVRvdWNoTW92ZSwge1xuICAgICAgICBwYXNzaXZlOiBmYWxzZVxuICAgICAgfSk7XG4gICAgICBkb2MuYWRkRXZlbnRMaXN0ZW5lcigndG91Y2hlbmQnLCBoYW5kbGVCb2R5VG91Y2hFbmQpO1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgZG9jLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3RvdWNoc3RhcnQnLCBoYW5kbGVCb2R5VG91Y2hTdGFydCk7XG4gICAgICAgIGRvYy5yZW1vdmVFdmVudExpc3RlbmVyKCd0b3VjaG1vdmUnLCBoYW5kbGVCb2R5VG91Y2hNb3ZlLCB7XG4gICAgICAgICAgcGFzc2l2ZTogZmFsc2VcbiAgICAgICAgfSk7XG4gICAgICAgIGRvYy5yZW1vdmVFdmVudExpc3RlbmVyKCd0b3VjaGVuZCcsIGhhbmRsZUJvZHlUb3VjaEVuZCk7XG4gICAgICB9O1xuICAgIH1cblxuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH0sIFt2YXJpYW50LCBoYW5kbGVCb2R5VG91Y2hTdGFydCwgaGFuZGxlQm9keVRvdWNoTW92ZSwgaGFuZGxlQm9keVRvdWNoRW5kXSk7XG4gIFJlYWN0LnVzZUVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIC8vIFdlIG5lZWQgdG8gcmVsZWFzZSB0aGUgbG9jay5cbiAgICAgIGlmIChub2RlVGhhdENsYWltZWRUaGVTd2lwZSA9PT0gc3dpcGVJbnN0YW5jZS5jdXJyZW50KSB7XG4gICAgICAgIG5vZGVUaGF0Q2xhaW1lZFRoZVN3aXBlID0gbnVsbDtcbiAgICAgIH1cbiAgICB9O1xuICB9LCBbXSk7XG4gIFJlYWN0LnVzZUVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgaWYgKCFvcGVuKSB7XG4gICAgICBzZXRNYXliZVN3aXBpbmcoZmFsc2UpO1xuICAgIH1cbiAgfSwgW29wZW5dKTtcbiAgdmFyIGhhbmRsZUJhY2tkcm9wUmVmID0gUmVhY3QudXNlQ2FsbGJhY2soZnVuY3Rpb24gKGluc3RhbmNlKSB7XG4gICAgLy8gI1N0cmljdE1vZGUgcmVhZHlcbiAgICBiYWNrZHJvcFJlZi5jdXJyZW50ID0gUmVhY3RET00uZmluZERPTU5vZGUoaW5zdGFuY2UpO1xuICB9LCBbXSk7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChSZWFjdC5GcmFnbWVudCwgbnVsbCwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoRHJhd2VyLCBfZXh0ZW5kcyh7XG4gICAgb3BlbjogdmFyaWFudCA9PT0gJ3RlbXBvcmFyeScgJiYgbWF5YmVTd2lwaW5nID8gdHJ1ZSA6IG9wZW4sXG4gICAgdmFyaWFudDogdmFyaWFudCxcbiAgICBNb2RhbFByb3BzOiBfZXh0ZW5kcyh7XG4gICAgICBCYWNrZHJvcFByb3BzOiBfZXh0ZW5kcyh7fSwgQmFja2Ryb3BQcm9wcywge1xuICAgICAgICByZWY6IGhhbmRsZUJhY2tkcm9wUmVmXG4gICAgICB9KVxuICAgIH0sIE1vZGFsUHJvcHNQcm9wKSxcbiAgICBQYXBlclByb3BzOiBfZXh0ZW5kcyh7fSwgUGFwZXJQcm9wcywge1xuICAgICAgc3R5bGU6IF9leHRlbmRzKHtcbiAgICAgICAgcG9pbnRlckV2ZW50czogdmFyaWFudCA9PT0gJ3RlbXBvcmFyeScgJiYgIW9wZW4gPyAnbm9uZScgOiAnJ1xuICAgICAgfSwgUGFwZXJQcm9wcy5zdHlsZSksXG4gICAgICByZWY6IHBhcGVyUmVmXG4gICAgfSksXG4gICAgYW5jaG9yOiBhbmNob3IsXG4gICAgdHJhbnNpdGlvbkR1cmF0aW9uOiBjYWxjdWxhdGVkRHVyYXRpb25SZWYuY3VycmVudCB8fCB0cmFuc2l0aW9uRHVyYXRpb24sXG4gICAgb25DbG9zZTogb25DbG9zZSxcbiAgICByZWY6IHJlZlxuICB9LCBvdGhlcikpLCAhZGlzYWJsZVN3aXBlVG9PcGVuICYmIHZhcmlhbnQgPT09ICd0ZW1wb3JhcnknICYmIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KE5vU3NyLCBudWxsLCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChTd2lwZUFyZWEsIF9leHRlbmRzKHtcbiAgICBhbmNob3I6IGFuY2hvcixcbiAgICByZWY6IHN3aXBlQXJlYVJlZixcbiAgICB3aWR0aDogc3dpcGVBcmVhV2lkdGhcbiAgfSwgU3dpcGVBcmVhUHJvcHMpKSkpO1xufSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBTd2lwZWFibGVEcmF3ZXIucHJvcFR5cGVzID0ge1xuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgYW5jaG9yOiBQcm9wVHlwZXMub25lT2YoWydsZWZ0JywgJ3RvcCcsICdyaWdodCcsICdib3R0b20nXSksXG5cbiAgLyoqXG4gICAqIFRoZSBjb250ZW50IG9mIHRoZSBjb21wb25lbnQuXG4gICAqL1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG5cbiAgLyoqXG4gICAqIERpc2FibGUgdGhlIGJhY2tkcm9wIHRyYW5zaXRpb24uXG4gICAqIFRoaXMgY2FuIGltcHJvdmUgdGhlIEZQUyBvbiBsb3ctZW5kIGRldmljZXMuXG4gICAqL1xuICBkaXNhYmxlQmFja2Ryb3BUcmFuc2l0aW9uOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0b3VjaGluZyB0aGUgc2NyZWVuIG5lYXIgdGhlIGVkZ2Ugb2YgdGhlIGRyYXdlciB3aWxsIG5vdCBzbGlkZSBpbiB0aGUgZHJhd2VyIGEgYml0XG4gICAqIHRvIHByb21vdGUgYWNjaWRlbnRhbCBkaXNjb3Zlcnkgb2YgdGhlIHN3aXBlIGdlc3R1cmUuXG4gICAqL1xuICBkaXNhYmxlRGlzY292ZXJ5OiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCBzd2lwZSB0byBvcGVuIGlzIGRpc2FibGVkLiBUaGlzIGlzIHVzZWZ1bCBpbiBicm93c2VycyB3aGVyZSBzd2lwaW5nIHRyaWdnZXJzXG4gICAqIG5hdmlnYXRpb24gYWN0aW9ucy4gU3dpcGUgdG8gb3BlbiBpcyBkaXNhYmxlZCBvbiBpT1MgYnJvd3NlcnMgYnkgZGVmYXVsdC5cbiAgICovXG4gIGRpc2FibGVTd2lwZVRvT3BlbjogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGhpZGVCYWNrZHJvcDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIEFmZmVjdHMgaG93IGZhciB0aGUgZHJhd2VyIG11c3QgYmUgb3BlbmVkL2Nsb3NlZCB0byBjaGFuZ2UgaGlzIHN0YXRlLlxuICAgKiBTcGVjaWZpZWQgYXMgcGVyY2VudCAoMC0xKSBvZiB0aGUgd2lkdGggb2YgdGhlIGRyYXdlclxuICAgKi9cbiAgaHlzdGVyZXNpczogUHJvcFR5cGVzLm51bWJlcixcblxuICAvKipcbiAgICogRGVmaW5lcywgZnJvbSB3aGljaCAoYXZlcmFnZSkgdmVsb2NpdHkgb24sIHRoZSBzd2lwZSBpc1xuICAgKiBkZWZpbmVkIGFzIGNvbXBsZXRlIGFsdGhvdWdoIGh5c3RlcmVzaXMgaXNuJ3QgcmVhY2hlZC5cbiAgICogR29vZCB0aHJlc2hvbGQgaXMgYmV0d2VlbiAyNTAgLSAxMDAwIHB4L3NcbiAgICovXG4gIG1pbkZsaW5nVmVsb2NpdHk6IFByb3BUeXBlcy5udW1iZXIsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIE1vZGFsUHJvcHM6IFByb3BUeXBlcy5zaGFwZSh7XG4gICAgQmFja2Ryb3BQcm9wczogUHJvcFR5cGVzLnNoYXBlKHtcbiAgICAgIGNvbXBvbmVudDogZWxlbWVudFR5cGVBY2NlcHRpbmdSZWZcbiAgICB9KVxuICB9KSxcblxuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgd2hlbiB0aGUgY29tcG9uZW50IHJlcXVlc3RzIHRvIGJlIGNsb3NlZC5cbiAgICpcbiAgICogQHBhcmFtIHtvYmplY3R9IGV2ZW50IFRoZSBldmVudCBzb3VyY2Ugb2YgdGhlIGNhbGxiYWNrLlxuICAgKi9cbiAgb25DbG9zZTogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcblxuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgd2hlbiB0aGUgY29tcG9uZW50IHJlcXVlc3RzIHRvIGJlIG9wZW5lZC5cbiAgICpcbiAgICogQHBhcmFtIHtvYmplY3R9IGV2ZW50IFRoZSBldmVudCBzb3VyY2Ugb2YgdGhlIGNhbGxiYWNrLlxuICAgKi9cbiAgb25PcGVuOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBkcmF3ZXIgaXMgb3Blbi5cbiAgICovXG4gIG9wZW46IFByb3BUeXBlcy5ib29sLmlzUmVxdWlyZWQsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIFBhcGVyUHJvcHM6IFByb3BUeXBlcy5zaGFwZSh7XG4gICAgY29tcG9uZW50OiBlbGVtZW50VHlwZUFjY2VwdGluZ1JlZixcbiAgICBzdHlsZTogUHJvcFR5cGVzLm9iamVjdFxuICB9KSxcblxuICAvKipcbiAgICogVGhlIGVsZW1lbnQgaXMgdXNlZCB0byBpbnRlcmNlcHQgdGhlIHRvdWNoIGV2ZW50cyBvbiB0aGUgZWRnZS5cbiAgICovXG4gIFN3aXBlQXJlYVByb3BzOiBQcm9wVHlwZXMub2JqZWN0LFxuXG4gIC8qKlxuICAgKiBUaGUgd2lkdGggb2YgdGhlIGxlZnQgbW9zdCAob3IgcmlnaHQgbW9zdCkgYXJlYSBpbiBwaXhlbHMgd2hlcmUgdGhlXG4gICAqIGRyYXdlciBjYW4gYmUgc3dpcGVkIG9wZW4gZnJvbS5cbiAgICovXG4gIHN3aXBlQXJlYVdpZHRoOiBQcm9wVHlwZXMubnVtYmVyLFxuXG4gIC8qKlxuICAgKiBUaGUgZHVyYXRpb24gZm9yIHRoZSB0cmFuc2l0aW9uLCBpbiBtaWxsaXNlY29uZHMuXG4gICAqIFlvdSBtYXkgc3BlY2lmeSBhIHNpbmdsZSB0aW1lb3V0IGZvciBhbGwgdHJhbnNpdGlvbnMsIG9yIGluZGl2aWR1YWxseSB3aXRoIGFuIG9iamVjdC5cbiAgICovXG4gIHRyYW5zaXRpb25EdXJhdGlvbjogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLm51bWJlciwgUHJvcFR5cGVzLnNoYXBlKHtcbiAgICBlbnRlcjogUHJvcFR5cGVzLm51bWJlcixcbiAgICBleGl0OiBQcm9wVHlwZXMubnVtYmVyXG4gIH0pXSksXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIHZhcmlhbnQ6IFByb3BUeXBlcy5vbmVPZihbJ3Blcm1hbmVudCcsICdwZXJzaXN0ZW50JywgJ3RlbXBvcmFyeSddKVxufSA6IHZvaWQgMDtcbmV4cG9ydCBkZWZhdWx0IFN3aXBlYWJsZURyYXdlcjsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzXCI7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGNsc3ggZnJvbSAnY2xzeCc7XG5pbXBvcnQgd2l0aFN0eWxlcyBmcm9tICcuLi9zdHlsZXMvd2l0aFN0eWxlcyc7XG5pbXBvcnQgTGlzdENvbnRleHQgZnJvbSAnLi4vTGlzdC9MaXN0Q29udGV4dCc7XG5leHBvcnQgdmFyIHN0eWxlcyA9IGZ1bmN0aW9uIHN0eWxlcyh0aGVtZSkge1xuICByZXR1cm4ge1xuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQuICovXG4gICAgcm9vdDoge1xuICAgICAgbWluV2lkdGg6IDU2LFxuICAgICAgY29sb3I6IHRoZW1lLnBhbGV0dGUuYWN0aW9uLmFjdGl2ZSxcbiAgICAgIGZsZXhTaHJpbms6IDAsXG4gICAgICBkaXNwbGF5OiAnaW5saW5lLWZsZXgnXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgd2hlbiB0aGUgcGFyZW50IGBMaXN0SXRlbWAgdXNlcyBgYWxpZ25JdGVtcz1cImZsZXgtc3RhcnRcImAuICovXG4gICAgYWxpZ25JdGVtc0ZsZXhTdGFydDoge1xuICAgICAgbWFyZ2luVG9wOiA4XG4gICAgfVxuICB9O1xufTtcbi8qKlxuICogQSBzaW1wbGUgd3JhcHBlciB0byBhcHBseSBgTGlzdGAgc3R5bGVzIHRvIGFuIGBJY29uYCBvciBgU3ZnSWNvbmAuXG4gKi9cblxudmFyIExpc3RJdGVtSWNvbiA9IC8qI19fUFVSRV9fKi9SZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIExpc3RJdGVtSWNvbihwcm9wcywgcmVmKSB7XG4gIHZhciBjbGFzc2VzID0gcHJvcHMuY2xhc3NlcyxcbiAgICAgIGNsYXNzTmFtZSA9IHByb3BzLmNsYXNzTmFtZSxcbiAgICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKHByb3BzLCBbXCJjbGFzc2VzXCIsIFwiY2xhc3NOYW1lXCJdKTtcblxuICB2YXIgY29udGV4dCA9IFJlYWN0LnVzZUNvbnRleHQoTGlzdENvbnRleHQpO1xuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgX2V4dGVuZHMoe1xuICAgIGNsYXNzTmFtZTogY2xzeChjbGFzc2VzLnJvb3QsIGNsYXNzTmFtZSwgY29udGV4dC5hbGlnbkl0ZW1zID09PSAnZmxleC1zdGFydCcgJiYgY2xhc3Nlcy5hbGlnbkl0ZW1zRmxleFN0YXJ0KSxcbiAgICByZWY6IHJlZlxuICB9LCBvdGhlcikpO1xufSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBMaXN0SXRlbUljb24ucHJvcFR5cGVzID0ge1xuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBXYXJuaW5nIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIC8vIHwgVGhlc2UgUHJvcFR5cGVzIGFyZSBnZW5lcmF0ZWQgZnJvbSB0aGUgVHlwZVNjcmlwdCB0eXBlIGRlZmluaXRpb25zIHxcbiAgLy8gfCAgICAgVG8gdXBkYXRlIHRoZW0gZWRpdCB0aGUgZC50cyBmaWxlIGFuZCBydW4gXCJ5YXJuIHByb3B0eXBlc1wiICAgICB8XG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuICAvKipcbiAgICogVGhlIGNvbnRlbnQgb2YgdGhlIGNvbXBvbmVudCwgbm9ybWFsbHkgYEljb25gLCBgU3ZnSWNvbmAsXG4gICAqIG9yIGEgYEBtYXRlcmlhbC11aS9pY29uc2AgU1ZHIGljb24gZWxlbWVudC5cbiAgICovXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcblxuICAvKipcbiAgICogT3ZlcnJpZGUgb3IgZXh0ZW5kIHRoZSBzdHlsZXMgYXBwbGllZCB0byB0aGUgY29tcG9uZW50LlxuICAgKiBTZWUgW0NTUyBBUEldKCNjc3MpIGJlbG93IGZvciBtb3JlIGRldGFpbHMuXG4gICAqL1xuICBjbGFzc2VzOiBQcm9wVHlwZXMub2JqZWN0LFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmdcbn0gOiB2b2lkIDA7XG5leHBvcnQgZGVmYXVsdCB3aXRoU3R5bGVzKHN0eWxlcywge1xuICBuYW1lOiAnTXVpTGlzdEl0ZW1JY29uJ1xufSkoTGlzdEl0ZW1JY29uKTsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzXCI7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGNsc3ggZnJvbSAnY2xzeCc7XG5pbXBvcnQgd2l0aFN0eWxlcyBmcm9tICcuLi9zdHlsZXMvd2l0aFN0eWxlcyc7XG5pbXBvcnQgVHlwb2dyYXBoeSBmcm9tICcuLi9UeXBvZ3JhcGh5JztcbmltcG9ydCBMaXN0Q29udGV4dCBmcm9tICcuLi9MaXN0L0xpc3RDb250ZXh0JztcbmV4cG9ydCB2YXIgc3R5bGVzID0ge1xuICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50LiAqL1xuICByb290OiB7XG4gICAgZmxleDogJzEgMSBhdXRvJyxcbiAgICBtaW5XaWR0aDogMCxcbiAgICBtYXJnaW5Ub3A6IDQsXG4gICAgbWFyZ2luQm90dG9tOiA0XG4gIH0sXG5cbiAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIGBUeXBvZ3JhcGh5YCBjb21wb25lbnRzIGlmIHByaW1hcnkgYW5kIHNlY29uZGFyeSBhcmUgc2V0LiAqL1xuICBtdWx0aWxpbmU6IHtcbiAgICBtYXJnaW5Ub3A6IDYsXG4gICAgbWFyZ2luQm90dG9tOiA2XG4gIH0sXG5cbiAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIGBUeXBvZ3JhcGh5YCBjb21wb25lbnRzIGlmIGRlbnNlLiAqL1xuICBkZW5zZToge30sXG5cbiAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgaW5zZXQ9e3RydWV9YC4gKi9cbiAgaW5zZXQ6IHtcbiAgICBwYWRkaW5nTGVmdDogNTZcbiAgfSxcblxuICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcHJpbWFyeSBgVHlwb2dyYXBoeWAgY29tcG9uZW50LiAqL1xuICBwcmltYXJ5OiB7fSxcblxuICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgc2Vjb25kYXJ5IGBUeXBvZ3JhcGh5YCBjb21wb25lbnQuICovXG4gIHNlY29uZGFyeToge31cbn07XG52YXIgTGlzdEl0ZW1UZXh0ID0gLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gTGlzdEl0ZW1UZXh0KHByb3BzLCByZWYpIHtcbiAgdmFyIGNoaWxkcmVuID0gcHJvcHMuY2hpbGRyZW4sXG4gICAgICBjbGFzc2VzID0gcHJvcHMuY2xhc3NlcyxcbiAgICAgIGNsYXNzTmFtZSA9IHByb3BzLmNsYXNzTmFtZSxcbiAgICAgIF9wcm9wcyRkaXNhYmxlVHlwb2dyYSA9IHByb3BzLmRpc2FibGVUeXBvZ3JhcGh5LFxuICAgICAgZGlzYWJsZVR5cG9ncmFwaHkgPSBfcHJvcHMkZGlzYWJsZVR5cG9ncmEgPT09IHZvaWQgMCA/IGZhbHNlIDogX3Byb3BzJGRpc2FibGVUeXBvZ3JhLFxuICAgICAgX3Byb3BzJGluc2V0ID0gcHJvcHMuaW5zZXQsXG4gICAgICBpbnNldCA9IF9wcm9wcyRpbnNldCA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcHJvcHMkaW5zZXQsXG4gICAgICBwcmltYXJ5UHJvcCA9IHByb3BzLnByaW1hcnksXG4gICAgICBwcmltYXJ5VHlwb2dyYXBoeVByb3BzID0gcHJvcHMucHJpbWFyeVR5cG9ncmFwaHlQcm9wcyxcbiAgICAgIHNlY29uZGFyeVByb3AgPSBwcm9wcy5zZWNvbmRhcnksXG4gICAgICBzZWNvbmRhcnlUeXBvZ3JhcGh5UHJvcHMgPSBwcm9wcy5zZWNvbmRhcnlUeXBvZ3JhcGh5UHJvcHMsXG4gICAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhwcm9wcywgW1wiY2hpbGRyZW5cIiwgXCJjbGFzc2VzXCIsIFwiY2xhc3NOYW1lXCIsIFwiZGlzYWJsZVR5cG9ncmFwaHlcIiwgXCJpbnNldFwiLCBcInByaW1hcnlcIiwgXCJwcmltYXJ5VHlwb2dyYXBoeVByb3BzXCIsIFwic2Vjb25kYXJ5XCIsIFwic2Vjb25kYXJ5VHlwb2dyYXBoeVByb3BzXCJdKTtcblxuICB2YXIgX1JlYWN0JHVzZUNvbnRleHQgPSBSZWFjdC51c2VDb250ZXh0KExpc3RDb250ZXh0KSxcbiAgICAgIGRlbnNlID0gX1JlYWN0JHVzZUNvbnRleHQuZGVuc2U7XG5cbiAgdmFyIHByaW1hcnkgPSBwcmltYXJ5UHJvcCAhPSBudWxsID8gcHJpbWFyeVByb3AgOiBjaGlsZHJlbjtcblxuICBpZiAocHJpbWFyeSAhPSBudWxsICYmIHByaW1hcnkudHlwZSAhPT0gVHlwb2dyYXBoeSAmJiAhZGlzYWJsZVR5cG9ncmFwaHkpIHtcbiAgICBwcmltYXJ5ID0gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoVHlwb2dyYXBoeSwgX2V4dGVuZHMoe1xuICAgICAgdmFyaWFudDogZGVuc2UgPyAnYm9keTInIDogJ2JvZHkxJyxcbiAgICAgIGNsYXNzTmFtZTogY2xhc3Nlcy5wcmltYXJ5LFxuICAgICAgY29tcG9uZW50OiBcInNwYW5cIixcbiAgICAgIGRpc3BsYXk6IFwiYmxvY2tcIlxuICAgIH0sIHByaW1hcnlUeXBvZ3JhcGh5UHJvcHMpLCBwcmltYXJ5KTtcbiAgfVxuXG4gIHZhciBzZWNvbmRhcnkgPSBzZWNvbmRhcnlQcm9wO1xuXG4gIGlmIChzZWNvbmRhcnkgIT0gbnVsbCAmJiBzZWNvbmRhcnkudHlwZSAhPT0gVHlwb2dyYXBoeSAmJiAhZGlzYWJsZVR5cG9ncmFwaHkpIHtcbiAgICBzZWNvbmRhcnkgPSAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChUeXBvZ3JhcGh5LCBfZXh0ZW5kcyh7XG4gICAgICB2YXJpYW50OiBcImJvZHkyXCIsXG4gICAgICBjbGFzc05hbWU6IGNsYXNzZXMuc2Vjb25kYXJ5LFxuICAgICAgY29sb3I6IFwidGV4dFNlY29uZGFyeVwiLFxuICAgICAgZGlzcGxheTogXCJibG9ja1wiXG4gICAgfSwgc2Vjb25kYXJ5VHlwb2dyYXBoeVByb3BzKSwgc2Vjb25kYXJ5KTtcbiAgfVxuXG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCBfZXh0ZW5kcyh7XG4gICAgY2xhc3NOYW1lOiBjbHN4KGNsYXNzZXMucm9vdCwgY2xhc3NOYW1lLCBkZW5zZSAmJiBjbGFzc2VzLmRlbnNlLCBpbnNldCAmJiBjbGFzc2VzLmluc2V0LCBwcmltYXJ5ICYmIHNlY29uZGFyeSAmJiBjbGFzc2VzLm11bHRpbGluZSksXG4gICAgcmVmOiByZWZcbiAgfSwgb3RoZXIpLCBwcmltYXJ5LCBzZWNvbmRhcnkpO1xufSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBMaXN0SXRlbVRleHQucHJvcFR5cGVzID0ge1xuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBXYXJuaW5nIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIC8vIHwgVGhlc2UgUHJvcFR5cGVzIGFyZSBnZW5lcmF0ZWQgZnJvbSB0aGUgVHlwZVNjcmlwdCB0eXBlIGRlZmluaXRpb25zIHxcbiAgLy8gfCAgICAgVG8gdXBkYXRlIHRoZW0gZWRpdCB0aGUgZC50cyBmaWxlIGFuZCBydW4gXCJ5YXJuIHByb3B0eXBlc1wiICAgICB8XG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuICAvKipcbiAgICogQWxpYXMgZm9yIHRoZSBgcHJpbWFyeWAgcHJvcC5cbiAgICovXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcblxuICAvKipcbiAgICogT3ZlcnJpZGUgb3IgZXh0ZW5kIHRoZSBzdHlsZXMgYXBwbGllZCB0byB0aGUgY29tcG9uZW50LlxuICAgKiBTZWUgW0NTUyBBUEldKCNjc3MpIGJlbG93IGZvciBtb3JlIGRldGFpbHMuXG4gICAqL1xuICBjbGFzc2VzOiBQcm9wVHlwZXMub2JqZWN0LFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGNoaWxkcmVuIHdvbid0IGJlIHdyYXBwZWQgYnkgYSBUeXBvZ3JhcGh5IGNvbXBvbmVudC5cbiAgICogVGhpcyBjYW4gYmUgdXNlZnVsIHRvIHJlbmRlciBhbiBhbHRlcm5hdGl2ZSBUeXBvZ3JhcGh5IHZhcmlhbnQgYnkgd3JhcHBpbmdcbiAgICogdGhlIGBjaGlsZHJlbmAgKG9yIGBwcmltYXJ5YCkgdGV4dCwgYW5kIG9wdGlvbmFsIGBzZWNvbmRhcnlgIHRleHRcbiAgICogd2l0aCB0aGUgVHlwb2dyYXBoeSBjb21wb25lbnQuXG4gICAqL1xuICBkaXNhYmxlVHlwb2dyYXBoeTogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGNoaWxkcmVuIHdpbGwgYmUgaW5kZW50ZWQuXG4gICAqIFRoaXMgc2hvdWxkIGJlIHVzZWQgaWYgdGhlcmUgaXMgbm8gbGVmdCBhdmF0YXIgb3IgbGVmdCBpY29uLlxuICAgKi9cbiAgaW5zZXQ6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBUaGUgbWFpbiBjb250ZW50IGVsZW1lbnQuXG4gICAqL1xuICBwcmltYXJ5OiBQcm9wVHlwZXMubm9kZSxcblxuICAvKipcbiAgICogVGhlc2UgcHJvcHMgd2lsbCBiZSBmb3J3YXJkZWQgdG8gdGhlIHByaW1hcnkgdHlwb2dyYXBoeSBjb21wb25lbnRcbiAgICogKGFzIGxvbmcgYXMgZGlzYWJsZVR5cG9ncmFwaHkgaXMgbm90IGB0cnVlYCkuXG4gICAqL1xuICBwcmltYXJ5VHlwb2dyYXBoeVByb3BzOiBQcm9wVHlwZXMub2JqZWN0LFxuXG4gIC8qKlxuICAgKiBUaGUgc2Vjb25kYXJ5IGNvbnRlbnQgZWxlbWVudC5cbiAgICovXG4gIHNlY29uZGFyeTogUHJvcFR5cGVzLm5vZGUsXG5cbiAgLyoqXG4gICAqIFRoZXNlIHByb3BzIHdpbGwgYmUgZm9yd2FyZGVkIHRvIHRoZSBzZWNvbmRhcnkgdHlwb2dyYXBoeSBjb21wb25lbnRcbiAgICogKGFzIGxvbmcgYXMgZGlzYWJsZVR5cG9ncmFwaHkgaXMgbm90IGB0cnVlYCkuXG4gICAqL1xuICBzZWNvbmRhcnlUeXBvZ3JhcGh5UHJvcHM6IFByb3BUeXBlcy5vYmplY3Rcbn0gOiB2b2lkIDA7XG5leHBvcnQgZGVmYXVsdCB3aXRoU3R5bGVzKHN0eWxlcywge1xuICBuYW1lOiAnTXVpTGlzdEl0ZW1UZXh0J1xufSkoTGlzdEl0ZW1UZXh0KTsiLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnXHJcbmltcG9ydCB7IG1ha2VTdHlsZXMgfSBmcm9tICdAbWF0ZXJpYWwtdWkvY29yZS9zdHlsZXMnXHJcbmltcG9ydCB7XHJcbiAgICBMaXN0LFxyXG4gICAgTGlzdEl0ZW0sXHJcbiAgICBMaXN0SXRlbVRleHQsXHJcbiAgICBQYXBlcixcclxuICAgIFR5cG9ncmFwaHksXHJcbiAgICBEaXZpZGVyLFxyXG4gICAgTGlzdEl0ZW1JY29uLFxyXG59IGZyb20gJ0BtYXRlcmlhbC11aS9jb3JlJ1xyXG5pbXBvcnQgQ29sbGVjdGlvbnNCb29rbWFya091dGxpbmVkSWNvbiBmcm9tICdAbWF0ZXJpYWwtdWkvaWNvbnMvQ29sbGVjdGlvbnNCb29rbWFya091dGxpbmVkJ1xyXG5pbXBvcnQgTWVudUJvb2tPdXRsaW5lZEljb24gZnJvbSAnQG1hdGVyaWFsLXVpL2ljb25zL01lbnVCb29rT3V0bGluZWQnXHJcbmltcG9ydCBTaG9wcGluZ0NhcnRJY29uIGZyb20gJ0BtYXRlcmlhbC11aS9pY29ucy9TaG9wcGluZ0NhcnQnXHJcbmltcG9ydCBIb21lSWNvbiBmcm9tICdAbWF0ZXJpYWwtdWkvaWNvbnMvSG9tZSdcclxuaW1wb3J0IFBlcnNvbkljb24gZnJvbSAnQG1hdGVyaWFsLXVpL2ljb25zL1BlcnNvbidcclxuaW1wb3J0IENyZWF0ZUljb24gZnJvbSAnQG1hdGVyaWFsLXVpL2ljb25zL0NyZWF0ZSdcclxuXHJcbmNvbnN0IHVzZVN0eWxlcyA9IG1ha2VTdHlsZXMoKHRoZW1lKSA9PiAoe1xyXG4gICAgcm9vdDoge1xyXG4gICAgICAgIHdpZHRoOiAnMTAwJScsXHJcbiAgICAgICAgLy8gYmFja2dyb3VuZENvbG9yOiB0aGVtZS5wYWxldHRlLmJhY2tncm91bmQucGFwZXIsXHJcbiAgICAgICAgZm9udFNpemU6ICcxMnB4JyxcclxuICAgIH0sXHJcbiAgICBpbmxpbmU6IHtcclxuICAgICAgICBkaXNwbGF5OiAnaW5saW5lJyxcclxuICAgIH0sXHJcbiAgICBsaW5rOiB7XHJcbiAgICAgICAgdGV4dERlY29yYXRpb246ICdub25lJyxcclxuICAgICAgICBjb2xvcjogJyMwMDAnLFxyXG4gICAgfSxcclxuICAgIG5lc3RlZDoge1xyXG4gICAgICAgIHBhZGRpbmdMZWZ0OiB0aGVtZS5zcGFjaW5nKDQpLFxyXG4gICAgfSxcclxufSkpXHJcblxyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBOYXZpZ2F0aW9uKHByb3BzKSB7XHJcbiAgICBjb25zdCBjbGFzc2VzID0gdXNlU3R5bGVzKClcclxuXHJcbiAgICBjb25zdCBuYXZEaWN0TWFpbiA9IFtcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHBhdGg6ICcvJyxcclxuICAgICAgICAgICAgbmFtZTogJ9CT0LvQsNCy0L3QsNGPINGB0YLRgNCw0L3QuNGG0LAnLFxyXG4gICAgICAgICAgICByb2xlOiAnJyxcclxuICAgICAgICAgICAgaWNvbjogPEhvbWVJY29uIGNvbG9yPVwicHJpbWFyeVwiIC8+LFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBwYXRoOiAnL2xlc3NvbnMnLFxyXG4gICAgICAgICAgICBuYW1lOiAn0JzQvtC4INGD0YDQvtC60LgnLFxyXG4gICAgICAgICAgICByb2xlOiAnJyxcclxuICAgICAgICAgICAgaWNvbjogPE1lbnVCb29rT3V0bGluZWRJY29uIGNvbG9yPVwicHJpbWFyeVwiIC8+LFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBwYXRoOiAnL2xlc3NvbnMnLFxyXG4gICAgICAgICAgICBuYW1lOiAn0JrQsNGC0LDQu9C+0LMnLFxyXG4gICAgICAgICAgICByb2xlOiAnJyxcclxuICAgICAgICAgICAgaWNvbjogPENvbGxlY3Rpb25zQm9va21hcmtPdXRsaW5lZEljb24gY29sb3I9XCJwcmltYXJ5XCIgLz4sXHJcbiAgICAgICAgfSxcclxuICAgIF1cclxuXHJcbiAgICBjb25zdCBuYXZEaWN0U2Vjb25kID0gW1xyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgcGF0aDogJy9jYWJpbmV0JyxcclxuICAgICAgICAgICAgbmFtZTogJ9Cb0LjRh9C90YvQuSDQutCw0LHQuNC90LXRgicsXHJcbiAgICAgICAgICAgIHJvbGU6ICcnLFxyXG4gICAgICAgICAgICBpY29uOiA8UGVyc29uSWNvbiBjb2xvcj1cInByaW1hcnlcIiAvPixcclxuICAgICAgICB9LFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgcGF0aDogJy9jcmVhdGVMZXNzb24nLFxyXG4gICAgICAgICAgICBuYW1lOiAn0KHQvtC30LTQsNC90LjQtSDRg9GA0L7QutCwJyxcclxuICAgICAgICAgICAgcm9sZTogJycsXHJcbiAgICAgICAgICAgIGljb246IDxDcmVhdGVJY29uIGNvbG9yPVwicHJpbWFyeVwiIC8+LFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBwYXRoOiAnL2NhcnQnLFxyXG4gICAgICAgICAgICBuYW1lOiAn0JrQvtGA0LfQuNC90LAnLFxyXG4gICAgICAgICAgICByb2xlOiAnJyxcclxuICAgICAgICAgICAgaWNvbjogPFNob3BwaW5nQ2FydEljb24gY29sb3I9XCJwcmltYXJ5XCIgLz4sXHJcbiAgICAgICAgfSxcclxuICAgIF1cclxuXHJcbiAgICBjb25zdCByZW5kZXJOYXZNYWluTGlzdCA9ICh2YWx1ZSkgPT5cclxuICAgICAgICB2YWx1ZS5tYXAoKGl0ZW0sIGlkeCkgPT4gKFxyXG4gICAgICAgICAgICA8TGlzdEl0ZW1cclxuICAgICAgICAgICAgICAgIGtleT17aWR4fVxyXG4gICAgICAgICAgICAgICAgYnV0dG9uXHJcbiAgICAgICAgICAgICAgICBvbkNsaWNrPXsoKSA9PiBwcm9wcy5yZWRpcmVjdChgJHtpdGVtLnBhdGh9YCl9XHJcbiAgICAgICAgICAgID5cclxuICAgICAgICAgICAgICAgIDxMaXN0SXRlbUljb24+e2l0ZW0uaWNvbn08L0xpc3RJdGVtSWNvbj5cclxuICAgICAgICAgICAgICAgIDxkaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgPGgyPnNkc2FkPC9oMj5cclxuICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgPExpc3RJdGVtVGV4dFxyXG4gICAgICAgICAgICAgICAgICAgIHByaW1hcnk9e1xyXG4gICAgICAgICAgICAgICAgICAgICAgICA8VHlwb2dyYXBoeVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29tcG9uZW50PVwic3BhblwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXJpYW50PVwiYm9keTJcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPXtjbGFzc2VzLmlubGluZX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yPVwidGV4dFByaW1hcnlcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7aXRlbS5uYW1lfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L1R5cG9ncmFwaHk+XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgLz5cclxuICAgICAgICAgICAgPC9MaXN0SXRlbT5cclxuICAgICAgICApKVxyXG5cclxuICAgIHJldHVybiAoXHJcbiAgICAgICAgPExpc3QgY29tcG9uZW50PVwibmF2XCIgY2xhc3NOYW1lPXtjbGFzc2VzLnJvb3R9PlxyXG4gICAgICAgICAgICB7cmVuZGVyTmF2TWFpbkxpc3QobmF2RGljdE1haW4pfVxyXG4gICAgICAgICAgICA8RGl2aWRlciAvPlxyXG4gICAgICAgICAgICB7cmVuZGVyTmF2TWFpbkxpc3QobmF2RGljdFNlY29uZCl9XHJcbiAgICAgICAgPC9MaXN0PlxyXG4gICAgKVxyXG59XHJcbiIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCdcclxuaW1wb3J0IHsgbWFrZVN0eWxlcyB9IGZyb20gJ0BtYXRlcmlhbC11aS9jb3JlL3N0eWxlcydcclxuaW1wb3J0IHtcclxuICAgIERyYXdlcixcclxuICAgIERpdmlkZXIsXHJcbiAgICBTd2lwZWFibGVEcmF3ZXIsXHJcbiAgICBDYXJkTWVkaWEsXHJcbiAgICBIaWRkZW4sXHJcbn0gZnJvbSAnQG1hdGVyaWFsLXVpL2NvcmUnXHJcbmltcG9ydCBOYXZpZ2F0aW9uIGZyb20gJ2NvbXBvbmVudHMvTmF2aWdhdGlvbi9OYXZpZ2F0aW9uJ1xyXG5cclxuY29uc3QgZHJhd2VyV2lkdGggPSAxNTBcclxuY29uc3QgbW9iaWxlRHJhd2VyV2lkdGggPSAyNzVcclxuY29uc3QgaW1hZ2UgPSAnaHR0cHM6Ly9pLmliYi5jby9UdEZZV1RML2xvZ28ucG5nJ1xyXG5cclxuY29uc3QgdXNlU3R5bGVzID0gbWFrZVN0eWxlcygodGhlbWUpID0+ICh7XHJcbiAgICBkcmF3ZXI6IHtcclxuICAgICAgICBmbGV4U2hyaW5rOiAwLFxyXG4gICAgICAgIHdpZHRoOiBtb2JpbGVEcmF3ZXJXaWR0aCxcclxuXHJcbiAgICAgICAgW3RoZW1lLmJyZWFrcG9pbnRzLnVwKCdzbScpXToge1xyXG4gICAgICAgICAgICB3aWR0aDogZHJhd2VyV2lkdGgsXHJcbiAgICAgICAgfSxcclxuICAgIH0sXHJcbiAgICBkcmF3ZXJQYXBlcjoge1xyXG4gICAgICAgIHdpZHRoOiBtb2JpbGVEcmF3ZXJXaWR0aCxcclxuICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6ICcjZjVmNWY1JyxcclxuXHJcbiAgICAgICAgW3RoZW1lLmJyZWFrcG9pbnRzLnVwKCdzbScpXToge1xyXG4gICAgICAgICAgICB3aWR0aDogZHJhd2VyV2lkdGgsXHJcbiAgICAgICAgfSxcclxuICAgIH0sXHJcbiAgICBtZWRpYToge1xyXG4gICAgICAgIGhlaWdodDogMTAwLFxyXG4gICAgfSxcclxufSkpXHJcblxyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBBc2lkZShwcm9wcykge1xyXG4gICAgY29uc3QgY2xhc3NlcyA9IHVzZVN0eWxlcygpXHJcbiAgICByZXR1cm4gKFxyXG4gICAgICAgIDxhc2lkZT5cclxuICAgICAgICAgICAgey8qIGRlc2t0b3AgZHJhd2VyICovfVxyXG4gICAgICAgICAgICA8SGlkZGVuIHhzRG93biBpbXBsZW1lbnRhdGlvbj1cImNzc1wiPlxyXG4gICAgICAgICAgICAgICAgPERyYXdlclxyXG4gICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT17Y2xhc3Nlcy5kcmF3ZXJ9XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyaWFudD1cInBlcm1hbmVudFwiXHJcbiAgICAgICAgICAgICAgICAgICAgY2xhc3Nlcz17eyBwYXBlcjogY2xhc3Nlcy5kcmF3ZXJQYXBlciB9fVxyXG4gICAgICAgICAgICAgICAgICAgIGFuY2hvcj1cImxlZnRcIlxyXG4gICAgICAgICAgICAgICAgPlxyXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPXtjbGFzc2VzLnRvb2xiYXJ9IC8+XHJcbiAgICAgICAgICAgICAgICAgICAgPENhcmRNZWRpYSBpbWFnZT17aW1hZ2V9IGNsYXNzTmFtZT17Y2xhc3Nlcy5tZWRpYX0gLz5cclxuICAgICAgICAgICAgICAgICAgICA8RGl2aWRlciAvPlxyXG4gICAgICAgICAgICAgICAgICAgIDxOYXZpZ2F0aW9uIHJlZGlyZWN0PXtwcm9wcy5yZWRpcmVjdH0gLz5cclxuICAgICAgICAgICAgICAgIDwvRHJhd2VyPlxyXG4gICAgICAgICAgICA8L0hpZGRlbj5cclxuICAgICAgICAgICAgey8qINC80L7QsdC40LvRjNC90YvQuSBkcmF3ZXIgKi99XHJcbiAgICAgICAgICAgIDxIaWRkZW4gc21VcCBpbXBsZW1lbnRhdGlvbj1cImNzc1wiPlxyXG4gICAgICAgICAgICAgICAgPFN3aXBlYWJsZURyYXdlclxyXG4gICAgICAgICAgICAgICAgICAgIG9uQ2xvc2U9e3Byb3BzLmhhbmRsZU1vYmlsZURyYXdlck9wZW59XHJcbiAgICAgICAgICAgICAgICAgICAgb25PcGVuPXtwcm9wcy5oYW5kbGVNb2JpbGVEcmF3ZXJPcGVufVxyXG4gICAgICAgICAgICAgICAgICAgIG9uQ2xpY2s9e3Byb3BzLmhhbmRsZU1vYmlsZURyYXdlck9wZW59XHJcbiAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPXtjbGFzc2VzLmRyYXdlcn1cclxuICAgICAgICAgICAgICAgICAgICBjbGFzc2VzPXt7IHBhcGVyOiBjbGFzc2VzLmRyYXdlclBhcGVyIH19XHJcbiAgICAgICAgICAgICAgICAgICAgYW5jaG9yPVwibGVmdFwiXHJcbiAgICAgICAgICAgICAgICAgICAgb3Blbj17cHJvcHMubW9iaWxlRHJhd2VyfVxyXG4gICAgICAgICAgICAgICAgPlxyXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPXtjbGFzc2VzLnRvb2xiYXJ9IC8+XHJcbiAgICAgICAgICAgICAgICAgICAgPENhcmRNZWRpYSBpbWFnZT17aW1hZ2V9IGNsYXNzTmFtZT17Y2xhc3Nlcy5tZWRpYX0gLz5cclxuICAgICAgICAgICAgICAgICAgICA8RGl2aWRlciAvPlxyXG4gICAgICAgICAgICAgICAgICAgIDxOYXZpZ2F0aW9uIHJlZGlyZWN0PXtwcm9wcy5yZWRpcmVjdH0gLz5cclxuICAgICAgICAgICAgICAgIDwvU3dpcGVhYmxlRHJhd2VyPlxyXG4gICAgICAgICAgICA8L0hpZGRlbj5cclxuICAgICAgICA8L2FzaWRlPlxyXG4gICAgKVxyXG59XHJcbiIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNcIjtcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgY2xzeCBmcm9tICdjbHN4JztcbmltcG9ydCB3aXRoU3R5bGVzIGZyb20gJy4uL3N0eWxlcy93aXRoU3R5bGVzJztcbmV4cG9ydCB2YXIgc3R5bGVzID0ge1xuICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50LiAqL1xuICByb290OiB7XG4gICAgd2lkdGg6ICcxMDAlJyxcbiAgICBvdmVyZmxvd1g6ICdhdXRvJ1xuICB9XG59O1xudmFyIFRhYmxlQ29udGFpbmVyID0gLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gVGFibGVDb250YWluZXIocHJvcHMsIHJlZikge1xuICB2YXIgY2xhc3NlcyA9IHByb3BzLmNsYXNzZXMsXG4gICAgICBjbGFzc05hbWUgPSBwcm9wcy5jbGFzc05hbWUsXG4gICAgICBfcHJvcHMkY29tcG9uZW50ID0gcHJvcHMuY29tcG9uZW50LFxuICAgICAgQ29tcG9uZW50ID0gX3Byb3BzJGNvbXBvbmVudCA9PT0gdm9pZCAwID8gJ2RpdicgOiBfcHJvcHMkY29tcG9uZW50LFxuICAgICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMocHJvcHMsIFtcImNsYXNzZXNcIiwgXCJjbGFzc05hbWVcIiwgXCJjb21wb25lbnRcIl0pO1xuXG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChDb21wb25lbnQsIF9leHRlbmRzKHtcbiAgICByZWY6IHJlZixcbiAgICBjbGFzc05hbWU6IGNsc3goY2xhc3Nlcy5yb290LCBjbGFzc05hbWUpXG4gIH0sIG90aGVyKSk7XG59KTtcbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFRhYmxlQ29udGFpbmVyLnByb3BUeXBlcyA9IHtcbiAgLyoqXG4gICAqIFRoZSB0YWJsZSBpdHNlbGYsIG5vcm1hbGx5IGA8VGFibGUgLz5gXG4gICAqL1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG5cbiAgLyoqXG4gICAqIE92ZXJyaWRlIG9yIGV4dGVuZCB0aGUgc3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICogU2VlIFtDU1MgQVBJXSgjY3NzKSBiZWxvdyBmb3IgbW9yZSBkZXRhaWxzLlxuICAgKi9cbiAgY2xhc3NlczogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIFRoZSBjb21wb25lbnQgdXNlZCBmb3IgdGhlIHJvb3Qgbm9kZS5cbiAgICogRWl0aGVyIGEgc3RyaW5nIHRvIHVzZSBhIEhUTUwgZWxlbWVudCBvciBhIGNvbXBvbmVudC5cbiAgICovXG4gIGNvbXBvbmVudDogUHJvcFR5cGVzXG4gIC8qIEB0eXBlc2NyaXB0LXRvLXByb3B0eXBlcy1pZ25vcmUgKi9cbiAgLmVsZW1lbnRUeXBlXG59IDogdm9pZCAwO1xuZXhwb3J0IGRlZmF1bHQgd2l0aFN0eWxlcyhzdHlsZXMsIHtcbiAgbmFtZTogJ011aVRhYmxlQ29udGFpbmVyJ1xufSkoVGFibGVDb250YWluZXIpOyIsImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0Jztcbi8qKlxuICogQGlnbm9yZSAtIGludGVybmFsIGNvbXBvbmVudC5cbiAqL1xuXG52YXIgVGFibGVDb250ZXh0ID0gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUNvbnRleHQoKTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgVGFibGVDb250ZXh0LmRpc3BsYXlOYW1lID0gJ1RhYmxlQ29udGV4dCc7XG59XG5cbmV4cG9ydCBkZWZhdWx0IFRhYmxlQ29udGV4dDsiLCJpbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc1wiO1xuaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGNsc3ggZnJvbSAnY2xzeCc7XG5pbXBvcnQgd2l0aFN0eWxlcyBmcm9tICcuLi9zdHlsZXMvd2l0aFN0eWxlcyc7XG5pbXBvcnQgVGFibGVDb250ZXh0IGZyb20gJy4vVGFibGVDb250ZXh0JztcbmV4cG9ydCB2YXIgc3R5bGVzID0gZnVuY3Rpb24gc3R5bGVzKHRoZW1lKSB7XG4gIHJldHVybiB7XG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudC4gKi9cbiAgICByb290OiB7XG4gICAgICBkaXNwbGF5OiAndGFibGUnLFxuICAgICAgd2lkdGg6ICcxMDAlJyxcbiAgICAgIGJvcmRlckNvbGxhcHNlOiAnY29sbGFwc2UnLFxuICAgICAgYm9yZGVyU3BhY2luZzogMCxcbiAgICAgICcmIGNhcHRpb24nOiBfZXh0ZW5kcyh7fSwgdGhlbWUudHlwb2dyYXBoeS5ib2R5Miwge1xuICAgICAgICBwYWRkaW5nOiB0aGVtZS5zcGFjaW5nKDIpLFxuICAgICAgICBjb2xvcjogdGhlbWUucGFsZXR0ZS50ZXh0LnNlY29uZGFyeSxcbiAgICAgICAgdGV4dEFsaWduOiAnbGVmdCcsXG4gICAgICAgIGNhcHRpb25TaWRlOiAnYm90dG9tJ1xuICAgICAgfSlcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgc3RpY2t5SGVhZGVyPXt0cnVlfWAuICovXG4gICAgc3RpY2t5SGVhZGVyOiB7XG4gICAgICBib3JkZXJDb2xsYXBzZTogJ3NlcGFyYXRlJ1xuICAgIH1cbiAgfTtcbn07XG52YXIgZGVmYXVsdENvbXBvbmVudCA9ICd0YWJsZSc7XG52YXIgVGFibGUgPSAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBUYWJsZShwcm9wcywgcmVmKSB7XG4gIHZhciBjbGFzc2VzID0gcHJvcHMuY2xhc3NlcyxcbiAgICAgIGNsYXNzTmFtZSA9IHByb3BzLmNsYXNzTmFtZSxcbiAgICAgIF9wcm9wcyRjb21wb25lbnQgPSBwcm9wcy5jb21wb25lbnQsXG4gICAgICBDb21wb25lbnQgPSBfcHJvcHMkY29tcG9uZW50ID09PSB2b2lkIDAgPyBkZWZhdWx0Q29tcG9uZW50IDogX3Byb3BzJGNvbXBvbmVudCxcbiAgICAgIF9wcm9wcyRwYWRkaW5nID0gcHJvcHMucGFkZGluZyxcbiAgICAgIHBhZGRpbmcgPSBfcHJvcHMkcGFkZGluZyA9PT0gdm9pZCAwID8gJ2RlZmF1bHQnIDogX3Byb3BzJHBhZGRpbmcsXG4gICAgICBfcHJvcHMkc2l6ZSA9IHByb3BzLnNpemUsXG4gICAgICBzaXplID0gX3Byb3BzJHNpemUgPT09IHZvaWQgMCA/ICdtZWRpdW0nIDogX3Byb3BzJHNpemUsXG4gICAgICBfcHJvcHMkc3RpY2t5SGVhZGVyID0gcHJvcHMuc3RpY2t5SGVhZGVyLFxuICAgICAgc3RpY2t5SGVhZGVyID0gX3Byb3BzJHN0aWNreUhlYWRlciA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcHJvcHMkc3RpY2t5SGVhZGVyLFxuICAgICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMocHJvcHMsIFtcImNsYXNzZXNcIiwgXCJjbGFzc05hbWVcIiwgXCJjb21wb25lbnRcIiwgXCJwYWRkaW5nXCIsIFwic2l6ZVwiLCBcInN0aWNreUhlYWRlclwiXSk7XG5cbiAgdmFyIHRhYmxlID0gUmVhY3QudXNlTWVtbyhmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHBhZGRpbmc6IHBhZGRpbmcsXG4gICAgICBzaXplOiBzaXplLFxuICAgICAgc3RpY2t5SGVhZGVyOiBzdGlja3lIZWFkZXJcbiAgICB9O1xuICB9LCBbcGFkZGluZywgc2l6ZSwgc3RpY2t5SGVhZGVyXSk7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChUYWJsZUNvbnRleHQuUHJvdmlkZXIsIHtcbiAgICB2YWx1ZTogdGFibGVcbiAgfSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoQ29tcG9uZW50LCBfZXh0ZW5kcyh7XG4gICAgcm9sZTogQ29tcG9uZW50ID09PSBkZWZhdWx0Q29tcG9uZW50ID8gbnVsbCA6ICd0YWJsZScsXG4gICAgcmVmOiByZWYsXG4gICAgY2xhc3NOYW1lOiBjbHN4KGNsYXNzZXMucm9vdCwgY2xhc3NOYW1lLCBzdGlja3lIZWFkZXIgJiYgY2xhc3Nlcy5zdGlja3lIZWFkZXIpXG4gIH0sIG90aGVyKSkpO1xufSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBUYWJsZS5wcm9wVHlwZXMgPSB7XG4gIC8qKlxuICAgKiBUaGUgY29udGVudCBvZiB0aGUgdGFibGUsIG5vcm1hbGx5IGBUYWJsZUhlYWRgIGFuZCBgVGFibGVCb2R5YC5cbiAgICovXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZS5pc1JlcXVpcmVkLFxuXG4gIC8qKlxuICAgKiBPdmVycmlkZSBvciBleHRlbmQgdGhlIHN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAqIFNlZSBbQ1NTIEFQSV0oI2NzcykgYmVsb3cgZm9yIG1vcmUgZGV0YWlscy5cbiAgICovXG4gIGNsYXNzZXM6IFByb3BUeXBlcy5vYmplY3QuaXNSZXF1aXJlZCxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBUaGUgY29tcG9uZW50IHVzZWQgZm9yIHRoZSByb290IG5vZGUuXG4gICAqIEVpdGhlciBhIHN0cmluZyB0byB1c2UgYSBIVE1MIGVsZW1lbnQgb3IgYSBjb21wb25lbnQuXG4gICAqL1xuICBjb21wb25lbnQ6IFByb3BUeXBlc1xuICAvKiBAdHlwZXNjcmlwdC10by1wcm9wdHlwZXMtaWdub3JlICovXG4gIC5lbGVtZW50VHlwZSxcblxuICAvKipcbiAgICogQWxsb3dzIFRhYmxlQ2VsbHMgdG8gaW5oZXJpdCBwYWRkaW5nIG9mIHRoZSBUYWJsZS5cbiAgICovXG4gIHBhZGRpbmc6IFByb3BUeXBlcy5vbmVPZihbJ2RlZmF1bHQnLCAnY2hlY2tib3gnLCAnbm9uZSddKSxcblxuICAvKipcbiAgICogQWxsb3dzIFRhYmxlQ2VsbHMgdG8gaW5oZXJpdCBzaXplIG9mIHRoZSBUYWJsZS5cbiAgICovXG4gIHNpemU6IFByb3BUeXBlcy5vbmVPZihbJ3NtYWxsJywgJ21lZGl1bSddKSxcblxuICAvKipcbiAgICogU2V0IHRoZSBoZWFkZXIgc3RpY2t5LlxuICAgKlxuICAgKiDimqDvuI8gSXQgZG9lc24ndCB3b3JrIHdpdGggSUUgMTEuXG4gICAqL1xuICBzdGlja3lIZWFkZXI6IFByb3BUeXBlcy5ib29sXG59IDogdm9pZCAwO1xuZXhwb3J0IGRlZmF1bHQgd2l0aFN0eWxlcyhzdHlsZXMsIHtcbiAgbmFtZTogJ011aVRhYmxlJ1xufSkoVGFibGUpOyIsImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0Jztcbi8qKlxuICogQGlnbm9yZSAtIGludGVybmFsIGNvbXBvbmVudC5cbiAqL1xuXG52YXIgVGFibGVsdmwyQ29udGV4dCA9IC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVDb250ZXh0KCk7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIFRhYmxlbHZsMkNvbnRleHQuZGlzcGxheU5hbWUgPSAnVGFibGVsdmwyQ29udGV4dCc7XG59XG5cbmV4cG9ydCBkZWZhdWx0IFRhYmxlbHZsMkNvbnRleHQ7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc1wiO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBjbHN4IGZyb20gJ2Nsc3gnO1xuaW1wb3J0IHdpdGhTdHlsZXMgZnJvbSAnLi4vc3R5bGVzL3dpdGhTdHlsZXMnO1xuaW1wb3J0IFRhYmxlbHZsMkNvbnRleHQgZnJvbSAnLi4vVGFibGUvVGFibGVsdmwyQ29udGV4dCc7XG5leHBvcnQgdmFyIHN0eWxlcyA9IHtcbiAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudC4gKi9cbiAgcm9vdDoge1xuICAgIGRpc3BsYXk6ICd0YWJsZS1oZWFkZXItZ3JvdXAnXG4gIH1cbn07XG52YXIgdGFibGVsdmwyID0ge1xuICB2YXJpYW50OiAnaGVhZCdcbn07XG52YXIgZGVmYXVsdENvbXBvbmVudCA9ICd0aGVhZCc7XG52YXIgVGFibGVIZWFkID0gLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gVGFibGVIZWFkKHByb3BzLCByZWYpIHtcbiAgdmFyIGNsYXNzZXMgPSBwcm9wcy5jbGFzc2VzLFxuICAgICAgY2xhc3NOYW1lID0gcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgX3Byb3BzJGNvbXBvbmVudCA9IHByb3BzLmNvbXBvbmVudCxcbiAgICAgIENvbXBvbmVudCA9IF9wcm9wcyRjb21wb25lbnQgPT09IHZvaWQgMCA/IGRlZmF1bHRDb21wb25lbnQgOiBfcHJvcHMkY29tcG9uZW50LFxuICAgICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMocHJvcHMsIFtcImNsYXNzZXNcIiwgXCJjbGFzc05hbWVcIiwgXCJjb21wb25lbnRcIl0pO1xuXG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChUYWJsZWx2bDJDb250ZXh0LlByb3ZpZGVyLCB7XG4gICAgdmFsdWU6IHRhYmxlbHZsMlxuICB9LCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChDb21wb25lbnQsIF9leHRlbmRzKHtcbiAgICBjbGFzc05hbWU6IGNsc3goY2xhc3Nlcy5yb290LCBjbGFzc05hbWUpLFxuICAgIHJlZjogcmVmLFxuICAgIHJvbGU6IENvbXBvbmVudCA9PT0gZGVmYXVsdENvbXBvbmVudCA/IG51bGwgOiAncm93Z3JvdXAnXG4gIH0sIG90aGVyKSkpO1xufSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBUYWJsZUhlYWQucHJvcFR5cGVzID0ge1xuICAvKipcbiAgICogVGhlIGNvbnRlbnQgb2YgdGhlIGNvbXBvbmVudCwgbm9ybWFsbHkgYFRhYmxlUm93YC5cbiAgICovXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcblxuICAvKipcbiAgICogT3ZlcnJpZGUgb3IgZXh0ZW5kIHRoZSBzdHlsZXMgYXBwbGllZCB0byB0aGUgY29tcG9uZW50LlxuICAgKiBTZWUgW0NTUyBBUEldKCNjc3MpIGJlbG93IGZvciBtb3JlIGRldGFpbHMuXG4gICAqL1xuICBjbGFzc2VzOiBQcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWQsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogVGhlIGNvbXBvbmVudCB1c2VkIGZvciB0aGUgcm9vdCBub2RlLlxuICAgKiBFaXRoZXIgYSBzdHJpbmcgdG8gdXNlIGEgSFRNTCBlbGVtZW50IG9yIGEgY29tcG9uZW50LlxuICAgKi9cbiAgY29tcG9uZW50OiBQcm9wVHlwZXNcbiAgLyogQHR5cGVzY3JpcHQtdG8tcHJvcHR5cGVzLWlnbm9yZSAqL1xuICAuZWxlbWVudFR5cGVcbn0gOiB2b2lkIDA7XG5leHBvcnQgZGVmYXVsdCB3aXRoU3R5bGVzKHN0eWxlcywge1xuICBuYW1lOiAnTXVpVGFibGVIZWFkJ1xufSkoVGFibGVIZWFkKTsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzXCI7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGNsc3ggZnJvbSAnY2xzeCc7XG5pbXBvcnQgd2l0aFN0eWxlcyBmcm9tICcuLi9zdHlsZXMvd2l0aFN0eWxlcyc7XG5pbXBvcnQgVGFibGVsdmwyQ29udGV4dCBmcm9tICcuLi9UYWJsZS9UYWJsZWx2bDJDb250ZXh0JztcbmltcG9ydCB7IGZhZGUgfSBmcm9tICcuLi9zdHlsZXMvY29sb3JNYW5pcHVsYXRvcic7XG5leHBvcnQgdmFyIHN0eWxlcyA9IGZ1bmN0aW9uIHN0eWxlcyh0aGVtZSkge1xuICByZXR1cm4ge1xuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQuICovXG4gICAgcm9vdDoge1xuICAgICAgY29sb3I6ICdpbmhlcml0JyxcbiAgICAgIGRpc3BsYXk6ICd0YWJsZS1yb3cnLFxuICAgICAgdmVydGljYWxBbGlnbjogJ21pZGRsZScsXG4gICAgICAvLyBXZSBkaXNhYmxlIHRoZSBmb2N1cyByaW5nIGZvciBtb3VzZSwgdG91Y2ggYW5kIGtleWJvYXJkIHVzZXJzLlxuICAgICAgb3V0bGluZTogMCxcbiAgICAgICcmJGhvdmVyOmhvdmVyJzoge1xuICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IHRoZW1lLnBhbGV0dGUuYWN0aW9uLmhvdmVyXG4gICAgICB9LFxuICAgICAgJyYkc2VsZWN0ZWQsICYkc2VsZWN0ZWQ6aG92ZXInOiB7XG4gICAgICAgIGJhY2tncm91bmRDb2xvcjogZmFkZSh0aGVtZS5wYWxldHRlLnNlY29uZGFyeS5tYWluLCB0aGVtZS5wYWxldHRlLmFjdGlvbi5zZWxlY3RlZE9wYWNpdHkpXG4gICAgICB9XG4gICAgfSxcblxuICAgIC8qIFBzZXVkby1jbGFzcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYHNlbGVjdGVkPXt0cnVlfWAuICovXG4gICAgc2VsZWN0ZWQ6IHt9LFxuXG4gICAgLyogUHNldWRvLWNsYXNzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgaG92ZXI9e3RydWV9YC4gKi9cbiAgICBob3Zlcjoge30sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIHRhYmxlIHZhcmlhbnQ9XCJoZWFkXCIuICovXG4gICAgaGVhZDoge30sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIHRhYmxlIHZhcmlhbnQ9XCJmb290ZXJcIi4gKi9cbiAgICBmb290ZXI6IHt9XG4gIH07XG59O1xudmFyIGRlZmF1bHRDb21wb25lbnQgPSAndHInO1xuLyoqXG4gKiBXaWxsIGF1dG9tYXRpY2FsbHkgc2V0IGR5bmFtaWMgcm93IGhlaWdodFxuICogYmFzZWQgb24gdGhlIG1hdGVyaWFsIHRhYmxlIGVsZW1lbnQgcGFyZW50IChoZWFkLCBib2R5LCBldGMpLlxuICovXG5cbnZhciBUYWJsZVJvdyA9IC8qI19fUFVSRV9fKi9SZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIFRhYmxlUm93KHByb3BzLCByZWYpIHtcbiAgdmFyIGNsYXNzZXMgPSBwcm9wcy5jbGFzc2VzLFxuICAgICAgY2xhc3NOYW1lID0gcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgX3Byb3BzJGNvbXBvbmVudCA9IHByb3BzLmNvbXBvbmVudCxcbiAgICAgIENvbXBvbmVudCA9IF9wcm9wcyRjb21wb25lbnQgPT09IHZvaWQgMCA/IGRlZmF1bHRDb21wb25lbnQgOiBfcHJvcHMkY29tcG9uZW50LFxuICAgICAgX3Byb3BzJGhvdmVyID0gcHJvcHMuaG92ZXIsXG4gICAgICBob3ZlciA9IF9wcm9wcyRob3ZlciA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcHJvcHMkaG92ZXIsXG4gICAgICBfcHJvcHMkc2VsZWN0ZWQgPSBwcm9wcy5zZWxlY3RlZCxcbiAgICAgIHNlbGVjdGVkID0gX3Byb3BzJHNlbGVjdGVkID09PSB2b2lkIDAgPyBmYWxzZSA6IF9wcm9wcyRzZWxlY3RlZCxcbiAgICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKHByb3BzLCBbXCJjbGFzc2VzXCIsIFwiY2xhc3NOYW1lXCIsIFwiY29tcG9uZW50XCIsIFwiaG92ZXJcIiwgXCJzZWxlY3RlZFwiXSk7XG5cbiAgdmFyIHRhYmxlbHZsMiA9IFJlYWN0LnVzZUNvbnRleHQoVGFibGVsdmwyQ29udGV4dCk7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChDb21wb25lbnQsIF9leHRlbmRzKHtcbiAgICByZWY6IHJlZixcbiAgICBjbGFzc05hbWU6IGNsc3goY2xhc3Nlcy5yb290LCBjbGFzc05hbWUsIHRhYmxlbHZsMiAmJiB7XG4gICAgICAnaGVhZCc6IGNsYXNzZXMuaGVhZCxcbiAgICAgICdmb290ZXInOiBjbGFzc2VzLmZvb3RlclxuICAgIH1bdGFibGVsdmwyLnZhcmlhbnRdLCBob3ZlciAmJiBjbGFzc2VzLmhvdmVyLCBzZWxlY3RlZCAmJiBjbGFzc2VzLnNlbGVjdGVkKSxcbiAgICByb2xlOiBDb21wb25lbnQgPT09IGRlZmF1bHRDb21wb25lbnQgPyBudWxsIDogJ3JvdydcbiAgfSwgb3RoZXIpKTtcbn0pO1xucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gVGFibGVSb3cucHJvcFR5cGVzID0ge1xuICAvKipcbiAgICogU2hvdWxkIGJlIHZhbGlkIDx0cj4gY2hpbGRyZW4gc3VjaCBhcyBgVGFibGVDZWxsYC5cbiAgICovXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcblxuICAvKipcbiAgICogT3ZlcnJpZGUgb3IgZXh0ZW5kIHRoZSBzdHlsZXMgYXBwbGllZCB0byB0aGUgY29tcG9uZW50LlxuICAgKiBTZWUgW0NTUyBBUEldKCNjc3MpIGJlbG93IGZvciBtb3JlIGRldGFpbHMuXG4gICAqL1xuICBjbGFzc2VzOiBQcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWQsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogVGhlIGNvbXBvbmVudCB1c2VkIGZvciB0aGUgcm9vdCBub2RlLlxuICAgKiBFaXRoZXIgYSBzdHJpbmcgdG8gdXNlIGEgSFRNTCBlbGVtZW50IG9yIGEgY29tcG9uZW50LlxuICAgKi9cbiAgY29tcG9uZW50OiBQcm9wVHlwZXNcbiAgLyogQHR5cGVzY3JpcHQtdG8tcHJvcHR5cGVzLWlnbm9yZSAqL1xuICAuZWxlbWVudFR5cGUsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIHRhYmxlIHJvdyB3aWxsIHNoYWRlIG9uIGhvdmVyLlxuICAgKi9cbiAgaG92ZXI6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSB0YWJsZSByb3cgd2lsbCBoYXZlIHRoZSBzZWxlY3RlZCBzaGFkaW5nLlxuICAgKi9cbiAgc2VsZWN0ZWQ6IFByb3BUeXBlcy5ib29sXG59IDogdm9pZCAwO1xuZXhwb3J0IGRlZmF1bHQgd2l0aFN0eWxlcyhzdHlsZXMsIHtcbiAgbmFtZTogJ011aVRhYmxlUm93J1xufSkoVGFibGVSb3cpOyIsImltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzXCI7XG5pbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgY2xzeCBmcm9tICdjbHN4JztcbmltcG9ydCB3aXRoU3R5bGVzIGZyb20gJy4uL3N0eWxlcy93aXRoU3R5bGVzJztcbmltcG9ydCBjYXBpdGFsaXplIGZyb20gJy4uL3V0aWxzL2NhcGl0YWxpemUnO1xuaW1wb3J0IHsgZGFya2VuLCBmYWRlLCBsaWdodGVuIH0gZnJvbSAnLi4vc3R5bGVzL2NvbG9yTWFuaXB1bGF0b3InO1xuaW1wb3J0IFRhYmxlQ29udGV4dCBmcm9tICcuLi9UYWJsZS9UYWJsZUNvbnRleHQnO1xuaW1wb3J0IFRhYmxlbHZsMkNvbnRleHQgZnJvbSAnLi4vVGFibGUvVGFibGVsdmwyQ29udGV4dCc7XG5leHBvcnQgdmFyIHN0eWxlcyA9IGZ1bmN0aW9uIHN0eWxlcyh0aGVtZSkge1xuICByZXR1cm4ge1xuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQuICovXG4gICAgcm9vdDogX2V4dGVuZHMoe30sIHRoZW1lLnR5cG9ncmFwaHkuYm9keTIsIHtcbiAgICAgIGRpc3BsYXk6ICd0YWJsZS1jZWxsJyxcbiAgICAgIHZlcnRpY2FsQWxpZ246ICdpbmhlcml0JyxcbiAgICAgIC8vIFdvcmthcm91bmQgZm9yIGEgcmVuZGVyaW5nIGJ1ZyB3aXRoIHNwYW5uZWQgY29sdW1ucyBpbiBDaHJvbWUgNjIuMC5cbiAgICAgIC8vIFJlbW92ZXMgdGhlIGFscGhhIChzZXRzIGl0IHRvIDEpLCBhbmQgbGlnaHRlbnMgb3IgZGFya2VucyB0aGUgdGhlbWUgY29sb3IuXG4gICAgICBib3JkZXJCb3R0b206IFwiMXB4IHNvbGlkXFxuICAgIFwiLmNvbmNhdCh0aGVtZS5wYWxldHRlLnR5cGUgPT09ICdsaWdodCcgPyBsaWdodGVuKGZhZGUodGhlbWUucGFsZXR0ZS5kaXZpZGVyLCAxKSwgMC44OCkgOiBkYXJrZW4oZmFkZSh0aGVtZS5wYWxldHRlLmRpdmlkZXIsIDEpLCAwLjY4KSksXG4gICAgICB0ZXh0QWxpZ246ICdsZWZ0JyxcbiAgICAgIHBhZGRpbmc6IDE2XG4gICAgfSksXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGB2YXJpYW50PVwiaGVhZFwiYCBvciBgY29udGV4dC50YWJsZS5oZWFkYC4gKi9cbiAgICBoZWFkOiB7XG4gICAgICBjb2xvcjogdGhlbWUucGFsZXR0ZS50ZXh0LnByaW1hcnksXG4gICAgICBsaW5lSGVpZ2h0OiB0aGVtZS50eXBvZ3JhcGh5LnB4VG9SZW0oMjQpLFxuICAgICAgZm9udFdlaWdodDogdGhlbWUudHlwb2dyYXBoeS5mb250V2VpZ2h0TWVkaXVtXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYHZhcmlhbnQ9XCJib2R5XCJgIG9yIGBjb250ZXh0LnRhYmxlLmJvZHlgLiAqL1xuICAgIGJvZHk6IHtcbiAgICAgIGNvbG9yOiB0aGVtZS5wYWxldHRlLnRleHQucHJpbWFyeVxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGB2YXJpYW50PVwiZm9vdGVyXCJgIG9yIGBjb250ZXh0LnRhYmxlLmZvb3RlcmAuICovXG4gICAgZm9vdGVyOiB7XG4gICAgICBjb2xvcjogdGhlbWUucGFsZXR0ZS50ZXh0LnNlY29uZGFyeSxcbiAgICAgIGxpbmVIZWlnaHQ6IHRoZW1lLnR5cG9ncmFwaHkucHhUb1JlbSgyMSksXG4gICAgICBmb250U2l6ZTogdGhlbWUudHlwb2dyYXBoeS5weFRvUmVtKDEyKVxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBzaXplPVwic21hbGxcImAuICovXG4gICAgc2l6ZVNtYWxsOiB7XG4gICAgICBwYWRkaW5nOiAnNnB4IDI0cHggNnB4IDE2cHgnLFxuICAgICAgJyY6bGFzdC1jaGlsZCc6IHtcbiAgICAgICAgcGFkZGluZ1JpZ2h0OiAxNlxuICAgICAgfSxcbiAgICAgICcmJHBhZGRpbmdDaGVja2JveCc6IHtcbiAgICAgICAgd2lkdGg6IDI0LFxuICAgICAgICAvLyBwcmV2ZW50IHRoZSBjaGVja2JveCBjb2x1bW4gZnJvbSBncm93aW5nXG4gICAgICAgIHBhZGRpbmc6ICcwIDEycHggMCAxNnB4JyxcbiAgICAgICAgJyY6bGFzdC1jaGlsZCc6IHtcbiAgICAgICAgICBwYWRkaW5nTGVmdDogMTIsXG4gICAgICAgICAgcGFkZGluZ1JpZ2h0OiAxNlxuICAgICAgICB9LFxuICAgICAgICAnJiA+IConOiB7XG4gICAgICAgICAgcGFkZGluZzogMFxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYHBhZGRpbmc9XCJjaGVja2JveFwiYC4gKi9cbiAgICBwYWRkaW5nQ2hlY2tib3g6IHtcbiAgICAgIHdpZHRoOiA0OCxcbiAgICAgIC8vIHByZXZlbnQgdGhlIGNoZWNrYm94IGNvbHVtbiBmcm9tIGdyb3dpbmdcbiAgICAgIHBhZGRpbmc6ICcwIDAgMCA0cHgnLFxuICAgICAgJyY6bGFzdC1jaGlsZCc6IHtcbiAgICAgICAgcGFkZGluZ0xlZnQ6IDAsXG4gICAgICAgIHBhZGRpbmdSaWdodDogNFxuICAgICAgfVxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBwYWRkaW5nPVwibm9uZVwiYC4gKi9cbiAgICBwYWRkaW5nTm9uZToge1xuICAgICAgcGFkZGluZzogMCxcbiAgICAgICcmOmxhc3QtY2hpbGQnOiB7XG4gICAgICAgIHBhZGRpbmc6IDBcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgYWxpZ249XCJsZWZ0XCJgLiAqL1xuICAgIGFsaWduTGVmdDoge1xuICAgICAgdGV4dEFsaWduOiAnbGVmdCdcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgYWxpZ249XCJjZW50ZXJcImAuICovXG4gICAgYWxpZ25DZW50ZXI6IHtcbiAgICAgIHRleHRBbGlnbjogJ2NlbnRlcidcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgYWxpZ249XCJyaWdodFwiYC4gKi9cbiAgICBhbGlnblJpZ2h0OiB7XG4gICAgICB0ZXh0QWxpZ246ICdyaWdodCcsXG4gICAgICBmbGV4RGlyZWN0aW9uOiAncm93LXJldmVyc2UnXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGFsaWduPVwianVzdGlmeVwiYC4gKi9cbiAgICBhbGlnbkp1c3RpZnk6IHtcbiAgICAgIHRleHRBbGlnbjogJ2p1c3RpZnknXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGNvbnRleHQudGFibGUuc3RpY2t5SGVhZGVyPXt0cnVlfWAuICovXG4gICAgc3RpY2t5SGVhZGVyOiB7XG4gICAgICBwb3NpdGlvbjogJ3N0aWNreScsXG4gICAgICB0b3A6IDAsXG4gICAgICBsZWZ0OiAwLFxuICAgICAgekluZGV4OiAyLFxuICAgICAgYmFja2dyb3VuZENvbG9yOiB0aGVtZS5wYWxldHRlLmJhY2tncm91bmQuZGVmYXVsdFxuICAgIH1cbiAgfTtcbn07XG4vKipcbiAqIFRoZSBjb21wb25lbnQgcmVuZGVycyBhIGA8dGg+YCBlbGVtZW50IHdoZW4gdGhlIHBhcmVudCBjb250ZXh0IGlzIGEgaGVhZGVyXG4gKiBvciBvdGhlcndpc2UgYSBgPHRkPmAgZWxlbWVudC5cbiAqL1xuXG52YXIgVGFibGVDZWxsID0gLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gVGFibGVDZWxsKHByb3BzLCByZWYpIHtcbiAgdmFyIF9wcm9wcyRhbGlnbiA9IHByb3BzLmFsaWduLFxuICAgICAgYWxpZ24gPSBfcHJvcHMkYWxpZ24gPT09IHZvaWQgMCA/ICdpbmhlcml0JyA6IF9wcm9wcyRhbGlnbixcbiAgICAgIGNsYXNzZXMgPSBwcm9wcy5jbGFzc2VzLFxuICAgICAgY2xhc3NOYW1lID0gcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgY29tcG9uZW50ID0gcHJvcHMuY29tcG9uZW50LFxuICAgICAgcGFkZGluZ1Byb3AgPSBwcm9wcy5wYWRkaW5nLFxuICAgICAgc2NvcGVQcm9wID0gcHJvcHMuc2NvcGUsXG4gICAgICBzaXplUHJvcCA9IHByb3BzLnNpemUsXG4gICAgICBzb3J0RGlyZWN0aW9uID0gcHJvcHMuc29ydERpcmVjdGlvbixcbiAgICAgIHZhcmlhbnRQcm9wID0gcHJvcHMudmFyaWFudCxcbiAgICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKHByb3BzLCBbXCJhbGlnblwiLCBcImNsYXNzZXNcIiwgXCJjbGFzc05hbWVcIiwgXCJjb21wb25lbnRcIiwgXCJwYWRkaW5nXCIsIFwic2NvcGVcIiwgXCJzaXplXCIsIFwic29ydERpcmVjdGlvblwiLCBcInZhcmlhbnRcIl0pO1xuXG4gIHZhciB0YWJsZSA9IFJlYWN0LnVzZUNvbnRleHQoVGFibGVDb250ZXh0KTtcbiAgdmFyIHRhYmxlbHZsMiA9IFJlYWN0LnVzZUNvbnRleHQoVGFibGVsdmwyQ29udGV4dCk7XG4gIHZhciBpc0hlYWRDZWxsID0gdGFibGVsdmwyICYmIHRhYmxlbHZsMi52YXJpYW50ID09PSAnaGVhZCc7XG4gIHZhciByb2xlO1xuICB2YXIgQ29tcG9uZW50O1xuXG4gIGlmIChjb21wb25lbnQpIHtcbiAgICBDb21wb25lbnQgPSBjb21wb25lbnQ7XG4gICAgcm9sZSA9IGlzSGVhZENlbGwgPyAnY29sdW1uaGVhZGVyJyA6ICdjZWxsJztcbiAgfSBlbHNlIHtcbiAgICBDb21wb25lbnQgPSBpc0hlYWRDZWxsID8gJ3RoJyA6ICd0ZCc7XG4gIH1cblxuICB2YXIgc2NvcGUgPSBzY29wZVByb3A7XG5cbiAgaWYgKCFzY29wZSAmJiBpc0hlYWRDZWxsKSB7XG4gICAgc2NvcGUgPSAnY29sJztcbiAgfVxuXG4gIHZhciBwYWRkaW5nID0gcGFkZGluZ1Byb3AgfHwgKHRhYmxlICYmIHRhYmxlLnBhZGRpbmcgPyB0YWJsZS5wYWRkaW5nIDogJ2RlZmF1bHQnKTtcbiAgdmFyIHNpemUgPSBzaXplUHJvcCB8fCAodGFibGUgJiYgdGFibGUuc2l6ZSA/IHRhYmxlLnNpemUgOiAnbWVkaXVtJyk7XG4gIHZhciB2YXJpYW50ID0gdmFyaWFudFByb3AgfHwgdGFibGVsdmwyICYmIHRhYmxlbHZsMi52YXJpYW50O1xuICB2YXIgYXJpYVNvcnQgPSBudWxsO1xuXG4gIGlmIChzb3J0RGlyZWN0aW9uKSB7XG4gICAgYXJpYVNvcnQgPSBzb3J0RGlyZWN0aW9uID09PSAnYXNjJyA/ICdhc2NlbmRpbmcnIDogJ2Rlc2NlbmRpbmcnO1xuICB9XG5cbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KENvbXBvbmVudCwgX2V4dGVuZHMoe1xuICAgIHJlZjogcmVmLFxuICAgIGNsYXNzTmFtZTogY2xzeChjbGFzc2VzLnJvb3QsIGNsYXNzZXNbdmFyaWFudF0sIGNsYXNzTmFtZSwgYWxpZ24gIT09ICdpbmhlcml0JyAmJiBjbGFzc2VzW1wiYWxpZ25cIi5jb25jYXQoY2FwaXRhbGl6ZShhbGlnbikpXSwgcGFkZGluZyAhPT0gJ2RlZmF1bHQnICYmIGNsYXNzZXNbXCJwYWRkaW5nXCIuY29uY2F0KGNhcGl0YWxpemUocGFkZGluZykpXSwgc2l6ZSAhPT0gJ21lZGl1bScgJiYgY2xhc3Nlc1tcInNpemVcIi5jb25jYXQoY2FwaXRhbGl6ZShzaXplKSldLCB2YXJpYW50ID09PSAnaGVhZCcgJiYgdGFibGUgJiYgdGFibGUuc3RpY2t5SGVhZGVyICYmIGNsYXNzZXMuc3RpY2t5SGVhZGVyKSxcbiAgICBcImFyaWEtc29ydFwiOiBhcmlhU29ydCxcbiAgICByb2xlOiByb2xlLFxuICAgIHNjb3BlOiBzY29wZVxuICB9LCBvdGhlcikpO1xufSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBUYWJsZUNlbGwucHJvcFR5cGVzID0ge1xuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBXYXJuaW5nIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIC8vIHwgVGhlc2UgUHJvcFR5cGVzIGFyZSBnZW5lcmF0ZWQgZnJvbSB0aGUgVHlwZVNjcmlwdCB0eXBlIGRlZmluaXRpb25zIHxcbiAgLy8gfCAgICAgVG8gdXBkYXRlIHRoZW0gZWRpdCB0aGUgZC50cyBmaWxlIGFuZCBydW4gXCJ5YXJuIHByb3B0eXBlc1wiICAgICB8XG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuICAvKipcbiAgICogU2V0IHRoZSB0ZXh0LWFsaWduIG9uIHRoZSB0YWJsZSBjZWxsIGNvbnRlbnQuXG4gICAqXG4gICAqIE1vbmV0YXJ5IG9yIGdlbmVyYWxseSBudW1iZXIgZmllbGRzICoqc2hvdWxkIGJlIHJpZ2h0IGFsaWduZWQqKiBhcyB0aGF0IGFsbG93c1xuICAgKiB5b3UgdG8gYWRkIHRoZW0gdXAgcXVpY2tseSBpbiB5b3VyIGhlYWQgd2l0aG91dCBoYXZpbmcgdG8gd29ycnkgYWJvdXQgZGVjaW1hbHMuXG4gICAqL1xuICBhbGlnbjogUHJvcFR5cGVzLm9uZU9mKFsnY2VudGVyJywgJ2luaGVyaXQnLCAnanVzdGlmeScsICdsZWZ0JywgJ3JpZ2h0J10pLFxuXG4gIC8qKlxuICAgKiBUaGUgdGFibGUgY2VsbCBjb250ZW50cy5cbiAgICovXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcblxuICAvKipcbiAgICogT3ZlcnJpZGUgb3IgZXh0ZW5kIHRoZSBzdHlsZXMgYXBwbGllZCB0byB0aGUgY29tcG9uZW50LlxuICAgKiBTZWUgW0NTUyBBUEldKCNjc3MpIGJlbG93IGZvciBtb3JlIGRldGFpbHMuXG4gICAqL1xuICBjbGFzc2VzOiBQcm9wVHlwZXMub2JqZWN0LFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIFRoZSBjb21wb25lbnQgdXNlZCBmb3IgdGhlIHJvb3Qgbm9kZS5cbiAgICogRWl0aGVyIGEgc3RyaW5nIHRvIHVzZSBhIEhUTUwgZWxlbWVudCBvciBhIGNvbXBvbmVudC5cbiAgICovXG4gIGNvbXBvbmVudDogUHJvcFR5cGVzXG4gIC8qIEB0eXBlc2NyaXB0LXRvLXByb3B0eXBlcy1pZ25vcmUgKi9cbiAgLmVsZW1lbnRUeXBlLFxuXG4gIC8qKlxuICAgKiBTZXRzIHRoZSBwYWRkaW5nIGFwcGxpZWQgdG8gdGhlIGNlbGwuXG4gICAqIEJ5IGRlZmF1bHQsIHRoZSBUYWJsZSBwYXJlbnQgY29tcG9uZW50IHNldCB0aGUgdmFsdWUgKGBkZWZhdWx0YCkuXG4gICAqL1xuICBwYWRkaW5nOiBQcm9wVHlwZXMub25lT2YoWydjaGVja2JveCcsICdkZWZhdWx0JywgJ25vbmUnXSksXG5cbiAgLyoqXG4gICAqIFNldCBzY29wZSBhdHRyaWJ1dGUuXG4gICAqL1xuICBzY29wZTogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogU3BlY2lmeSB0aGUgc2l6ZSBvZiB0aGUgY2VsbC5cbiAgICogQnkgZGVmYXVsdCwgdGhlIFRhYmxlIHBhcmVudCBjb21wb25lbnQgc2V0IHRoZSB2YWx1ZSAoYG1lZGl1bWApLlxuICAgKi9cbiAgc2l6ZTogUHJvcFR5cGVzLm9uZU9mKFsnbWVkaXVtJywgJ3NtYWxsJ10pLFxuXG4gIC8qKlxuICAgKiBTZXQgYXJpYS1zb3J0IGRpcmVjdGlvbi5cbiAgICovXG4gIHNvcnREaXJlY3Rpb246IFByb3BUeXBlcy5vbmVPZihbJ2FzYycsICdkZXNjJywgZmFsc2VdKSxcblxuICAvKipcbiAgICogU3BlY2lmeSB0aGUgY2VsbCB0eXBlLlxuICAgKiBCeSBkZWZhdWx0LCB0aGUgVGFibGVIZWFkLCBUYWJsZUJvZHkgb3IgVGFibGVGb290ZXIgcGFyZW50IGNvbXBvbmVudCBzZXQgdGhlIHZhbHVlLlxuICAgKi9cbiAgdmFyaWFudDogUHJvcFR5cGVzLm9uZU9mKFsnYm9keScsICdmb290ZXInLCAnaGVhZCddKVxufSA6IHZvaWQgMDtcbmV4cG9ydCBkZWZhdWx0IHdpdGhTdHlsZXMoc3R5bGVzLCB7XG4gIG5hbWU6ICdNdWlUYWJsZUNlbGwnXG59KShUYWJsZUNlbGwpOyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNcIjtcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgY2xzeCBmcm9tICdjbHN4JztcbmltcG9ydCB3aXRoU3R5bGVzIGZyb20gJy4uL3N0eWxlcy93aXRoU3R5bGVzJztcbmltcG9ydCBUYWJsZWx2bDJDb250ZXh0IGZyb20gJy4uL1RhYmxlL1RhYmxlbHZsMkNvbnRleHQnO1xuZXhwb3J0IHZhciBzdHlsZXMgPSB7XG4gIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQuICovXG4gIHJvb3Q6IHtcbiAgICBkaXNwbGF5OiAndGFibGUtcm93LWdyb3VwJ1xuICB9XG59O1xudmFyIHRhYmxlbHZsMiA9IHtcbiAgdmFyaWFudDogJ2JvZHknXG59O1xudmFyIGRlZmF1bHRDb21wb25lbnQgPSAndGJvZHknO1xudmFyIFRhYmxlQm9keSA9IC8qI19fUFVSRV9fKi9SZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIFRhYmxlQm9keShwcm9wcywgcmVmKSB7XG4gIHZhciBjbGFzc2VzID0gcHJvcHMuY2xhc3NlcyxcbiAgICAgIGNsYXNzTmFtZSA9IHByb3BzLmNsYXNzTmFtZSxcbiAgICAgIF9wcm9wcyRjb21wb25lbnQgPSBwcm9wcy5jb21wb25lbnQsXG4gICAgICBDb21wb25lbnQgPSBfcHJvcHMkY29tcG9uZW50ID09PSB2b2lkIDAgPyBkZWZhdWx0Q29tcG9uZW50IDogX3Byb3BzJGNvbXBvbmVudCxcbiAgICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKHByb3BzLCBbXCJjbGFzc2VzXCIsIFwiY2xhc3NOYW1lXCIsIFwiY29tcG9uZW50XCJdKTtcblxuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoVGFibGVsdmwyQ29udGV4dC5Qcm92aWRlciwge1xuICAgIHZhbHVlOiB0YWJsZWx2bDJcbiAgfSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoQ29tcG9uZW50LCBfZXh0ZW5kcyh7XG4gICAgY2xhc3NOYW1lOiBjbHN4KGNsYXNzZXMucm9vdCwgY2xhc3NOYW1lKSxcbiAgICByZWY6IHJlZixcbiAgICByb2xlOiBDb21wb25lbnQgPT09IGRlZmF1bHRDb21wb25lbnQgPyBudWxsIDogJ3Jvd2dyb3VwJ1xuICB9LCBvdGhlcikpKTtcbn0pO1xucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gVGFibGVCb2R5LnByb3BUeXBlcyA9IHtcbiAgLyoqXG4gICAqIFRoZSBjb250ZW50IG9mIHRoZSBjb21wb25lbnQsIG5vcm1hbGx5IGBUYWJsZVJvd2AuXG4gICAqL1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG5cbiAgLyoqXG4gICAqIE92ZXJyaWRlIG9yIGV4dGVuZCB0aGUgc3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICogU2VlIFtDU1MgQVBJXSgjY3NzKSBiZWxvdyBmb3IgbW9yZSBkZXRhaWxzLlxuICAgKi9cbiAgY2xhc3NlczogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIFRoZSBjb21wb25lbnQgdXNlZCBmb3IgdGhlIHJvb3Qgbm9kZS5cbiAgICogRWl0aGVyIGEgc3RyaW5nIHRvIHVzZSBhIEhUTUwgZWxlbWVudCBvciBhIGNvbXBvbmVudC5cbiAgICovXG4gIGNvbXBvbmVudDogUHJvcFR5cGVzXG4gIC8qIEB0eXBlc2NyaXB0LXRvLXByb3B0eXBlcy1pZ25vcmUgKi9cbiAgLmVsZW1lbnRUeXBlXG59IDogdm9pZCAwO1xuZXhwb3J0IGRlZmF1bHQgd2l0aFN0eWxlcyhzdHlsZXMsIHtcbiAgbmFtZTogJ011aVRhYmxlQm9keSdcbn0pKFRhYmxlQm9keSk7IiwiaW1wb3J0IFJlYWN0LCB7IEZyYWdtZW50IH0gZnJvbSAncmVhY3QnXHJcbmltcG9ydCB7IG1ha2VTdHlsZXMgfSBmcm9tICdAbWF0ZXJpYWwtdWkvY29yZS9zdHlsZXMnXHJcbmltcG9ydCB7XHJcbiAgICBUeXBvZ3JhcGh5LFxyXG4gICAgVGFibGUsXHJcbiAgICBUYWJsZUJvZHksXHJcbiAgICBUYWJsZUNlbGwsXHJcbiAgICBUYWJsZUNvbnRhaW5lcixcclxuICAgIFRhYmxlSGVhZCxcclxuICAgIFRhYmxlUm93LFxyXG4gICAgUGFwZXIsXHJcbiAgICBCdXR0b24sXHJcbn0gZnJvbSAnQG1hdGVyaWFsLXVpL2NvcmUnXHJcblxyXG5jb25zdCB1c2VTdHlsZXMgPSBtYWtlU3R5bGVzKCh0aGVtZSkgPT4gKHtcclxuICAgIHJvb3Q6IHtcclxuICAgICAgICAnJjpudGgtb2YtdHlwZShvZGQpJzoge1xyXG4gICAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IHRoZW1lLnBhbGV0dGUuYWN0aW9uLmhvdmVyLFxyXG4gICAgICAgIH0sXHJcbiAgICB9LFxyXG4gICAgYnV0dG9uR3JvdXA6IHtcclxuICAgICAgICAnJiBidXR0b24nOiB7XHJcbiAgICAgICAgICAgIG1hcmdpblJpZ2h0OiB0aGVtZS5zcGFjaW5nKDIpLFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgJyYgYnV0dG9uOmxhc3QtY2hpbGQnOiB7XHJcbiAgICAgICAgICAgIG1hcmdpblJpZ2h0OiAwLFxyXG4gICAgICAgIH0sXHJcbiAgICB9LFxyXG59KSlcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIENhcnQocHJvcHMpIHtcclxuICAgIGNvbnN0IGNsYXNzZXMgPSB1c2VTdHlsZXMoKVxyXG4gICAgY29uc3QgeyBjYXJ0IH0gPSBwcm9wc1xyXG4gICAgY29uc3QgY2FydEl0ZW1zID0gW11cclxuXHJcbiAgICBjb25zdCBbc2VsZWN0ZWQsIHNldFNlbGVjdGVkXSA9IFJlYWN0LnVzZVN0YXRlKCcnKVxyXG5cclxuICAgIGZvciAobGV0IFtrZXksIHZhbHVlXSBvZiBPYmplY3QuZW50cmllcyhjYXJ0KSkge1xyXG4gICAgICAgIGNhcnRJdGVtcy5wdXNoKHZhbHVlKVxyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IGhhbmRsZVNlbGVjdFJvdyA9IChldmVudCwgaXRlbUlkKSA9PiB7XHJcbiAgICAgICAgc2VsZWN0ZWQgPT09IGl0ZW1JZCA/IHNldFNlbGVjdGVkKCcnKSA6IHNldFNlbGVjdGVkKGl0ZW1JZClcclxuICAgIH1cclxuICAgIGNvbnN0IGhhbmRsZUNhcnRSZW1vdmVJdGVtID0gKCkgPT4ge1xyXG4gICAgICAgIHByb3BzLmhhbmRsZUNhcnRSZW1vdmVJdGVtKHNlbGVjdGVkKVxyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiAoXHJcbiAgICAgICAgPD5cclxuICAgICAgICAgICAgPFRhYmxlQ29udGFpbmVyIGNvbXBvbmVudD17UGFwZXJ9PlxyXG4gICAgICAgICAgICAgICAgPFRhYmxlXHJcbiAgICAgICAgICAgICAgICAgICAgc3RpY2t5SGVhZGVyXHJcbiAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPXtjbGFzc2VzLnRhYmxlfVxyXG4gICAgICAgICAgICAgICAgICAgIHNpemU9XCJzbWFsbFwiXHJcbiAgICAgICAgICAgICAgICAgICAgYXJpYS1sYWJlbD1cImEgZGVuc2UgdGFibGVcIlxyXG4gICAgICAgICAgICAgICAgPlxyXG4gICAgICAgICAgICAgICAgICAgIDxUYWJsZUhlYWQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxUYWJsZVJvdz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxUYWJsZUNlbGw+IzwvVGFibGVDZWxsPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPFRhYmxlQ2VsbCBhbGlnbj1cInJpZ2h0XCI+0J3QsNC40LzQtdC90L7QstCw0L3QuNC1PC9UYWJsZUNlbGw+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8VGFibGVDZWxsIGFsaWduPVwicmlnaHRcIj7QptC10L3QsDwvVGFibGVDZWxsPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L1RhYmxlUm93PlxyXG4gICAgICAgICAgICAgICAgICAgIDwvVGFibGVIZWFkPlxyXG4gICAgICAgICAgICAgICAgICAgIDxUYWJsZUJvZHk+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHtjYXJ0SXRlbXMubWFwKChpdGVtLCBpZHgpID0+IChcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxUYWJsZVJvd1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGVjdGVkPXtpdGVtLmlkID09PSBzZWxlY3RlZH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbkNsaWNrPXsoZXZlbnQpID0+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhhbmRsZVNlbGVjdFJvdyhldmVudCwgaXRlbS5pZClcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPXtjbGFzc2VzLnJvb3R9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAga2V5PXtpdGVtLmlkfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxUYWJsZUNlbGwgY29tcG9uZW50PVwidGhcIiBzY29wZT1cInJvd1wiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7aWR4ICsgMX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L1RhYmxlQ2VsbD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8VGFibGVDZWxsIGFsaWduPVwicmlnaHRcIj57aXRlbS5uYW1lfTwvVGFibGVDZWxsPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxUYWJsZUNlbGwgYWxpZ249XCJyaWdodFwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7aXRlbS5wcmljZX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L1RhYmxlQ2VsbD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvVGFibGVSb3c+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICkpfVxyXG4gICAgICAgICAgICAgICAgICAgIDwvVGFibGVCb2R5PlxyXG4gICAgICAgICAgICAgICAgPC9UYWJsZT5cclxuICAgICAgICAgICAgPC9UYWJsZUNvbnRhaW5lcj5cclxuICAgICAgICAgICAgPFR5cG9ncmFwaHkgYWxpZ249XCJyaWdodFwiPlxyXG4gICAgICAgICAgICAgICAg0JjRgtC+0LPQvjoge09iamVjdC5rZXlzKGNhcnQpLmxlbmd0aH1cclxuICAgICAgICAgICAgPC9UeXBvZ3JhcGh5PlxyXG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT17Y2xhc3Nlcy5idXR0b25Hcm91cH0+XHJcbiAgICAgICAgICAgICAgICA8QnV0dG9uXHJcbiAgICAgICAgICAgICAgICAgICAgb25DbGljaz17cHJvcHMuaGFubGRlQ2FydERlbGV0ZX1cclxuICAgICAgICAgICAgICAgICAgICBjb2xvcj1cInByaW1hcnlcIlxyXG4gICAgICAgICAgICAgICAgICAgIHZhcmlhbnQ9XCJjb250YWluZWRcIlxyXG4gICAgICAgICAgICAgICAgPlxyXG4gICAgICAgICAgICAgICAgICAgINCe0YLRh9C40YHRgtC40YLRjCDQutC+0YDQt9C40L3Rg1xyXG4gICAgICAgICAgICAgICAgPC9CdXR0b24+XHJcbiAgICAgICAgICAgICAgICA8QnV0dG9uXHJcbiAgICAgICAgICAgICAgICAgICAgb25DbGljaz17aGFuZGxlQ2FydFJlbW92ZUl0ZW19XHJcbiAgICAgICAgICAgICAgICAgICAgZGlzYWJsZWQ9e3NlbGVjdGVkID09PSAnJ31cclxuICAgICAgICAgICAgICAgICAgICBjb2xvcj1cInNlY29uZGFyeVwiXHJcbiAgICAgICAgICAgICAgICAgICAgdmFyaWFudD1cImNvbnRhaW5lZFwiXHJcbiAgICAgICAgICAgICAgICA+XHJcbiAgICAgICAgICAgICAgICAgICAg0KPQtNCw0LvQuNGC0YxcclxuICAgICAgICAgICAgICAgIDwvQnV0dG9uPlxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICA8Lz5cclxuICAgIClcclxufVxyXG4iLCJpbXBvcnQgUmVhY3QsIHsgRnJhZ21lbnQgfSBmcm9tICdyZWFjdCdcclxuaW1wb3J0IHsgbWFrZVN0eWxlcyB9IGZyb20gJ0BtYXRlcmlhbC11aS9jb3JlL3N0eWxlcydcclxuaW1wb3J0IHsgVHlwb2dyYXBoeSwgQ2FyZE1lZGlhLCBCdXR0b24sIEdyaWQsIERpdmlkZXIgfSBmcm9tICdAbWF0ZXJpYWwtdWkvY29yZSdcclxuXHJcbmNvbnN0IHVzZVN0eWxlcyA9IG1ha2VTdHlsZXMoKHRoZW1lKSA9PiAoe1xyXG4gICAgcm9vdDoge30sXHJcbiAgICBtZWRpYToge1xyXG4gICAgICAgIGhlaWdodDogMTAwLFxyXG4gICAgICAgIHdpZHRoOiAxMDAsXHJcbiAgICAgICAgbWFyZ2luOiB0aGVtZS5zcGFjaW5nKDAsIDAsICcxcmVtJywgMCksXHJcbiAgICB9LFxyXG4gICAgY29udGVudDoge1xyXG4gICAgICAgIG1hcmdpbjogdGhlbWUuc3BhY2luZygwLCAwLCAnMXJlbScsIDApLFxyXG4gICAgfSxcclxuXHJcbiAgICB0aXRsZToge1xyXG4gICAgICAgIG1hcmdpbkJvdHRvbTogdGhlbWUuc3BhY2luZygyKSxcclxuICAgICAgICB3aWR0aDogJzEwMCUnLFxyXG4gICAgfSxcclxuICAgIGVsZW1lbnRTcGFjaW5nOiB7fSxcclxuICAgIGJ1dHRvbkdyb3VwOiB7XHJcbiAgICAgICAgZGlzcGxheTogJ2ZsZXgnLFxyXG4gICAgICAgIHdpZHRoOiAnMTAwJScsXHJcbiAgICAgICAgWycmIGJ1dHRvbiddOiB7XHJcbiAgICAgICAgICAgIG1hcmdpbjogdGhlbWUuc3BhY2luZygwLCAnMXJlbScsIDAsIDApLFxyXG4gICAgICAgIH0sXHJcbiAgICB9LFxyXG59KSlcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIENhYmluZXQocHJvcHMpIHtcclxuICAgIGNvbnN0IGNsYXNzZXMgPSB1c2VTdHlsZXMoKVxyXG4gICAgY29uc3QgeyBwcm9maWxlIH0gPSBwcm9wc1xyXG4gICAgY29uc3QgeyBmaXJzdE5hbWUsIGxhc3ROYW1lLCBhdmF0YXIsIGVtYWlsLCBhZ2UgfSA9IHByb2ZpbGVcclxuXHJcbiAgICByZXR1cm4gKFxyXG4gICAgICAgIDw+XHJcbiAgICAgICAgICAgIDxUeXBvZ3JhcGh5IHZhcmlhbnQ9XCJoNFwiIGNvbXBvbmVudD1cImgyXCIgY2xhc3NOYW1lPXtjbGFzc2VzLnRpdGxlfT5cclxuICAgICAgICAgICAgICAgINCb0LjRh9C90YvQuSDQutCw0LHQuNC90LXRgiDQv9C+0LvRjNC30L7QstCw0YLQtdC70Y9cclxuICAgICAgICAgICAgPC9UeXBvZ3JhcGh5PlxyXG4gICAgICAgICAgICA8R3JpZFxyXG4gICAgICAgICAgICAgICAgY29udGFpbmVyXHJcbiAgICAgICAgICAgICAgICBzcGFjaW5nPXsyfVxyXG4gICAgICAgICAgICAgICAgYWxpZ25JdGVtcz1cImZsZXgtc3RhcnRcIlxyXG4gICAgICAgICAgICAgICAgY2xhc3NOYW1lPXtjbGFzc2VzLnJvb3R9XHJcbiAgICAgICAgICAgID5cclxuICAgICAgICAgICAgICAgIDxHcmlkIGl0ZW0geHM9ezEyfSBzbT17OH0+XHJcbiAgICAgICAgICAgICAgICAgICAgPENhcmRNZWRpYVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9e2NsYXNzZXMubWVkaWF9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGltYWdlPXthdmF0YXJ9XHJcbiAgICAgICAgICAgICAgICAgICAgPjwvQ2FyZE1lZGlhPlxyXG4gICAgICAgICAgICAgICAgICAgIDxUeXBvZ3JhcGh5IGNsYXNzTmFtZT17Y2xhc3Nlcy5jb250ZW50fT5cclxuICAgICAgICAgICAgICAgICAgICAgICAg0JjQvNGPOiB7Zmlyc3ROYW1lfSB7bGFzdE5hbWV9XHJcbiAgICAgICAgICAgICAgICAgICAgPC9UeXBvZ3JhcGh5PlxyXG4gICAgICAgICAgICAgICAgICAgIDxUeXBvZ3JhcGh5IGNsYXNzTmFtZT17Y2xhc3Nlcy5jb250ZW50fT5cclxuICAgICAgICAgICAgICAgICAgICAgICAg0JLQvtC30YDQsNGB0YI6IHthZ2V9eycgJ31cclxuICAgICAgICAgICAgICAgICAgICA8L1R5cG9ncmFwaHk+XHJcbiAgICAgICAgICAgICAgICAgICAgPFR5cG9ncmFwaHkgY2xhc3NOYW1lPXtjbGFzc2VzLmNvbnRlbnR9PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICDQn9C+0YfRgtCwOiB7ZW1haWx9eycgJ31cclxuICAgICAgICAgICAgICAgICAgICA8L1R5cG9ncmFwaHk+XHJcbiAgICAgICAgICAgICAgICAgICAgPFR5cG9ncmFwaHkgY2xhc3NOYW1lPXtjbGFzc2VzLmNvbnRlbnR9PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICDQoNC+0LvRjDog0JDQtNC80LjQvdC40YHRgtGA0LDRgtC+0YB7JyAnfVxyXG4gICAgICAgICAgICAgICAgICAgIDwvVHlwb2dyYXBoeT5cclxuICAgICAgICAgICAgICAgICAgICA8QnV0dG9uXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT17Y2xhc3Nlcy5jb250ZW50fVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXJpYW50PVwiY29udGFpbmVkXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29sb3I9XCJwcmltYXJ5XCJcclxuICAgICAgICAgICAgICAgICAgICA+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgINCf0L7QutCw0LfQsNGC0Ywg0LLRgdC1INGD0YDQvtC60LhcclxuICAgICAgICAgICAgICAgICAgICA8L0J1dHRvbj5cclxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT17Y2xhc3Nlcy5idXR0b25Hcm91cH0+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxCdXR0b24gdmFyaWFudD1cImNvbnRhaW5lZFwiIGNvbG9yPVwicHJpbWFyeVwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAg0KHQvtGF0YDQsNC90LjRgtGMXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvQnV0dG9uPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8QnV0dG9uIHZhcmlhbnQ9XCJjb250YWluZWRcIiBjb2xvcj1cInNlY29uZGFyeVwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAg0J7RgtC80LXQvdCwXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvQnV0dG9uPlxyXG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgPC9HcmlkPlxyXG4gICAgICAgICAgICAgICAgPERpdmlkZXIgb3JpZW50YXRpb249XCJ2ZXJ0aWNhbFwiIGZsZXhJdGVtIC8+XHJcbiAgICAgICAgICAgICAgICA8R3JpZFxyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRhaW5lclxyXG4gICAgICAgICAgICAgICAgICAgIGl0ZW1cclxuICAgICAgICAgICAgICAgICAgICB4cz17MTJ9XHJcbiAgICAgICAgICAgICAgICAgICAgc209ezN9XHJcbiAgICAgICAgICAgICAgICAgICAganVzdGlmeT1cImNlbnRlclwiXHJcbiAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPXtjbGFzc2VzLnJvb3R9XHJcbiAgICAgICAgICAgICAgICA+XHJcbiAgICAgICAgICAgICAgICAgICAgPFR5cG9ncmFwaHkgY2xhc3NOYW1lPXtjbGFzc2VzLnRpdGxlfSBhbGlnbj1cImNlbnRlclwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICDQn9Cw0L3QtdC70Ywg0LTQtdC50YHRgtCy0LjQuVxyXG4gICAgICAgICAgICAgICAgICAgIDwvVHlwb2dyYXBoeT5cclxuICAgICAgICAgICAgICAgICAgICA8QnV0dG9uIHZhcmlhbnQ9XCJvdXRsaW5lZFwiIGNvbG9yPVwicHJpbWFyeVwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICDQmtC+0YDQt9C40L3QsFxyXG4gICAgICAgICAgICAgICAgICAgIDwvQnV0dG9uPlxyXG4gICAgICAgICAgICAgICAgICAgIDxCdXR0b24gdmFyaWFudD1cIm91dGxpbmVkXCIgY29sb3I9XCJwcmltYXJ5XCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgINCY0YHRgtC+0YDQuNGPINC30LDQutCw0LfQvtCyXHJcbiAgICAgICAgICAgICAgICAgICAgPC9CdXR0b24+XHJcbiAgICAgICAgICAgICAgICAgICAgPEJ1dHRvbiB2YXJpYW50PVwib3V0bGluZWRcIiBjb2xvcj1cInByaW1hcnlcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAg0JTQstC40LbQtdC90LjQtSDRgdGA0LXQtNGB0YLQslxyXG4gICAgICAgICAgICAgICAgICAgIDwvQnV0dG9uPlxyXG4gICAgICAgICAgICAgICAgPC9HcmlkPlxyXG4gICAgICAgICAgICA8L0dyaWQ+XHJcbiAgICAgICAgPC8+XHJcbiAgICApXHJcbn1cclxuIiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IGNyZWF0ZVN2Z0ljb24gZnJvbSAnLi4vLi4vdXRpbHMvY3JlYXRlU3ZnSWNvbic7XG4vKipcbiAqIEBpZ25vcmUgLSBpbnRlcm5hbCBjb21wb25lbnQuXG4gKi9cblxuZXhwb3J0IGRlZmF1bHQgY3JlYXRlU3ZnSWNvbiggLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJwYXRoXCIsIHtcbiAgZDogXCJNMTIgMTJjMi4yMSAwIDQtMS43OSA0LTRzLTEuNzktNC00LTQtNCAxLjc5LTQgNCAxLjc5IDQgNCA0em0wIDJjLTIuNjcgMC04IDEuMzQtOCA0djJoMTZ2LTJjMC0yLjY2LTUuMzMtNC04LTR6XCJcbn0pLCAnUGVyc29uJyk7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc1wiO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBjbHN4IGZyb20gJ2Nsc3gnO1xuaW1wb3J0IHdpdGhTdHlsZXMgZnJvbSAnLi4vc3R5bGVzL3dpdGhTdHlsZXMnO1xuaW1wb3J0IFBlcnNvbiBmcm9tICcuLi9pbnRlcm5hbC9zdmctaWNvbnMvUGVyc29uJztcbmV4cG9ydCB2YXIgc3R5bGVzID0gZnVuY3Rpb24gc3R5bGVzKHRoZW1lKSB7XG4gIHJldHVybiB7XG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudC4gKi9cbiAgICByb290OiB7XG4gICAgICBwb3NpdGlvbjogJ3JlbGF0aXZlJyxcbiAgICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICAgIGFsaWduSXRlbXM6ICdjZW50ZXInLFxuICAgICAganVzdGlmeUNvbnRlbnQ6ICdjZW50ZXInLFxuICAgICAgZmxleFNocmluazogMCxcbiAgICAgIHdpZHRoOiA0MCxcbiAgICAgIGhlaWdodDogNDAsXG4gICAgICBmb250RmFtaWx5OiB0aGVtZS50eXBvZ3JhcGh5LmZvbnRGYW1pbHksXG4gICAgICBmb250U2l6ZTogdGhlbWUudHlwb2dyYXBoeS5weFRvUmVtKDIwKSxcbiAgICAgIGxpbmVIZWlnaHQ6IDEsXG4gICAgICBib3JkZXJSYWRpdXM6ICc1MCUnLFxuICAgICAgb3ZlcmZsb3c6ICdoaWRkZW4nLFxuICAgICAgdXNlclNlbGVjdDogJ25vbmUnXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgbm90IGBzcmNgIG9yIGBzcmNTZXRgLiAqL1xuICAgIGNvbG9yRGVmYXVsdDoge1xuICAgICAgY29sb3I6IHRoZW1lLnBhbGV0dGUuYmFja2dyb3VuZC5kZWZhdWx0LFxuICAgICAgYmFja2dyb3VuZENvbG9yOiB0aGVtZS5wYWxldHRlLnR5cGUgPT09ICdsaWdodCcgPyB0aGVtZS5wYWxldHRlLmdyZXlbNDAwXSA6IHRoZW1lLnBhbGV0dGUuZ3JleVs2MDBdXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYHZhcmlhbnQ9XCJjaXJjbGVcImAuICovXG4gICAgY2lyY2xlOiB7fSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYHZhcmlhbnQ9XCJyb3VuZGVkXCJgLiAqL1xuICAgIHJvdW5kZWQ6IHtcbiAgICAgIGJvcmRlclJhZGl1czogdGhlbWUuc2hhcGUuYm9yZGVyUmFkaXVzXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYHZhcmlhbnQ9XCJzcXVhcmVcImAuICovXG4gICAgc3F1YXJlOiB7XG4gICAgICBib3JkZXJSYWRpdXM6IDBcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIGltZyBlbGVtZW50IGlmIGVpdGhlciBgc3JjYCBvciBgc3JjU2V0YCBpcyBkZWZpbmVkLiAqL1xuICAgIGltZzoge1xuICAgICAgd2lkdGg6ICcxMDAlJyxcbiAgICAgIGhlaWdodDogJzEwMCUnLFxuICAgICAgdGV4dEFsaWduOiAnY2VudGVyJyxcbiAgICAgIC8vIEhhbmRsZSBub24tc3F1YXJlIGltYWdlLiBUaGUgcHJvcGVydHkgaXNuJ3Qgc3VwcG9ydGVkIGJ5IElFIDExLlxuICAgICAgb2JqZWN0Rml0OiAnY292ZXInLFxuICAgICAgLy8gSGlkZSBhbHQgdGV4dC5cbiAgICAgIGNvbG9yOiAndHJhbnNwYXJlbnQnLFxuICAgICAgLy8gSGlkZSB0aGUgaW1hZ2UgYnJva2VuIGljb24sIG9ubHkgd29ya3Mgb24gQ2hyb21lLlxuICAgICAgdGV4dEluZGVudDogMTAwMDBcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIGZhbGxiYWNrIGljb24gKi9cbiAgICBmYWxsYmFjazoge1xuICAgICAgd2lkdGg6ICc3NSUnLFxuICAgICAgaGVpZ2h0OiAnNzUlJ1xuICAgIH1cbiAgfTtcbn07XG5cbmZ1bmN0aW9uIHVzZUxvYWRlZChfcmVmKSB7XG4gIHZhciBzcmMgPSBfcmVmLnNyYyxcbiAgICAgIHNyY1NldCA9IF9yZWYuc3JjU2V0O1xuXG4gIHZhciBfUmVhY3QkdXNlU3RhdGUgPSBSZWFjdC51c2VTdGF0ZShmYWxzZSksXG4gICAgICBsb2FkZWQgPSBfUmVhY3QkdXNlU3RhdGVbMF0sXG4gICAgICBzZXRMb2FkZWQgPSBfUmVhY3QkdXNlU3RhdGVbMV07XG5cbiAgUmVhY3QudXNlRWZmZWN0KGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoIXNyYyAmJiAhc3JjU2V0KSB7XG4gICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIHNldExvYWRlZChmYWxzZSk7XG4gICAgdmFyIGFjdGl2ZSA9IHRydWU7XG4gICAgdmFyIGltYWdlID0gbmV3IEltYWdlKCk7XG4gICAgaW1hZ2Uuc3JjID0gc3JjO1xuICAgIGltYWdlLnNyY1NldCA9IHNyY1NldDtcblxuICAgIGltYWdlLm9ubG9hZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmICghYWN0aXZlKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgc2V0TG9hZGVkKCdsb2FkZWQnKTtcbiAgICB9O1xuXG4gICAgaW1hZ2Uub25lcnJvciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmICghYWN0aXZlKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgc2V0TG9hZGVkKCdlcnJvcicpO1xuICAgIH07XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgYWN0aXZlID0gZmFsc2U7XG4gICAgfTtcbiAgfSwgW3NyYywgc3JjU2V0XSk7XG4gIHJldHVybiBsb2FkZWQ7XG59XG5cbnZhciBBdmF0YXIgPSAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBBdmF0YXIocHJvcHMsIHJlZikge1xuICB2YXIgYWx0ID0gcHJvcHMuYWx0LFxuICAgICAgY2hpbGRyZW5Qcm9wID0gcHJvcHMuY2hpbGRyZW4sXG4gICAgICBjbGFzc2VzID0gcHJvcHMuY2xhc3NlcyxcbiAgICAgIGNsYXNzTmFtZSA9IHByb3BzLmNsYXNzTmFtZSxcbiAgICAgIF9wcm9wcyRjb21wb25lbnQgPSBwcm9wcy5jb21wb25lbnQsXG4gICAgICBDb21wb25lbnQgPSBfcHJvcHMkY29tcG9uZW50ID09PSB2b2lkIDAgPyAnZGl2JyA6IF9wcm9wcyRjb21wb25lbnQsXG4gICAgICBpbWdQcm9wcyA9IHByb3BzLmltZ1Byb3BzLFxuICAgICAgc2l6ZXMgPSBwcm9wcy5zaXplcyxcbiAgICAgIHNyYyA9IHByb3BzLnNyYyxcbiAgICAgIHNyY1NldCA9IHByb3BzLnNyY1NldCxcbiAgICAgIF9wcm9wcyR2YXJpYW50ID0gcHJvcHMudmFyaWFudCxcbiAgICAgIHZhcmlhbnQgPSBfcHJvcHMkdmFyaWFudCA9PT0gdm9pZCAwID8gJ2NpcmNsZScgOiBfcHJvcHMkdmFyaWFudCxcbiAgICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKHByb3BzLCBbXCJhbHRcIiwgXCJjaGlsZHJlblwiLCBcImNsYXNzZXNcIiwgXCJjbGFzc05hbWVcIiwgXCJjb21wb25lbnRcIiwgXCJpbWdQcm9wc1wiLCBcInNpemVzXCIsIFwic3JjXCIsIFwic3JjU2V0XCIsIFwidmFyaWFudFwiXSk7XG5cbiAgdmFyIGNoaWxkcmVuID0gbnVsbDsgLy8gVXNlIGEgaG9vayBpbnN0ZWFkIG9mIG9uRXJyb3Igb24gdGhlIGltZyBlbGVtZW50IHRvIHN1cHBvcnQgc2VydmVyLXNpZGUgcmVuZGVyaW5nLlxuXG4gIHZhciBsb2FkZWQgPSB1c2VMb2FkZWQoe1xuICAgIHNyYzogc3JjLFxuICAgIHNyY1NldDogc3JjU2V0XG4gIH0pO1xuICB2YXIgaGFzSW1nID0gc3JjIHx8IHNyY1NldDtcbiAgdmFyIGhhc0ltZ05vdEZhaWxpbmcgPSBoYXNJbWcgJiYgbG9hZGVkICE9PSAnZXJyb3InO1xuXG4gIGlmIChoYXNJbWdOb3RGYWlsaW5nKSB7XG4gICAgY2hpbGRyZW4gPSAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcImltZ1wiLCBfZXh0ZW5kcyh7XG4gICAgICBhbHQ6IGFsdCxcbiAgICAgIHNyYzogc3JjLFxuICAgICAgc3JjU2V0OiBzcmNTZXQsXG4gICAgICBzaXplczogc2l6ZXMsXG4gICAgICBjbGFzc05hbWU6IGNsYXNzZXMuaW1nXG4gICAgfSwgaW1nUHJvcHMpKTtcbiAgfSBlbHNlIGlmIChjaGlsZHJlblByb3AgIT0gbnVsbCkge1xuICAgIGNoaWxkcmVuID0gY2hpbGRyZW5Qcm9wO1xuICB9IGVsc2UgaWYgKGhhc0ltZyAmJiBhbHQpIHtcbiAgICBjaGlsZHJlbiA9IGFsdFswXTtcbiAgfSBlbHNlIHtcbiAgICBjaGlsZHJlbiA9IC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFBlcnNvbiwge1xuICAgICAgY2xhc3NOYW1lOiBjbGFzc2VzLmZhbGxiYWNrXG4gICAgfSk7XG4gIH1cblxuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoQ29tcG9uZW50LCBfZXh0ZW5kcyh7XG4gICAgY2xhc3NOYW1lOiBjbHN4KGNsYXNzZXMucm9vdCwgY2xhc3Nlcy5zeXN0ZW0sIGNsYXNzZXNbdmFyaWFudF0sIGNsYXNzTmFtZSwgIWhhc0ltZ05vdEZhaWxpbmcgJiYgY2xhc3Nlcy5jb2xvckRlZmF1bHQpLFxuICAgIHJlZjogcmVmXG4gIH0sIG90aGVyKSwgY2hpbGRyZW4pO1xufSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBBdmF0YXIucHJvcFR5cGVzID0ge1xuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBXYXJuaW5nIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIC8vIHwgVGhlc2UgUHJvcFR5cGVzIGFyZSBnZW5lcmF0ZWQgZnJvbSB0aGUgVHlwZVNjcmlwdCB0eXBlIGRlZmluaXRpb25zIHxcbiAgLy8gfCAgICAgVG8gdXBkYXRlIHRoZW0gZWRpdCB0aGUgZC50cyBmaWxlIGFuZCBydW4gXCJ5YXJuIHByb3B0eXBlc1wiICAgICB8XG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuICAvKipcbiAgICogVXNlZCBpbiBjb21iaW5hdGlvbiB3aXRoIGBzcmNgIG9yIGBzcmNTZXRgIHRvXG4gICAqIHByb3ZpZGUgYW4gYWx0IGF0dHJpYnV0ZSBmb3IgdGhlIHJlbmRlcmVkIGBpbWdgIGVsZW1lbnQuXG4gICAqL1xuICBhbHQ6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIFVzZWQgdG8gcmVuZGVyIGljb24gb3IgdGV4dCBlbGVtZW50cyBpbnNpZGUgdGhlIEF2YXRhciBpZiBgc3JjYCBpcyBub3Qgc2V0LlxuICAgKiBUaGlzIGNhbiBiZSBhbiBlbGVtZW50LCBvciBqdXN0IGEgc3RyaW5nLlxuICAgKi9cbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuXG4gIC8qKlxuICAgKiBPdmVycmlkZSBvciBleHRlbmQgdGhlIHN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAqIFNlZSBbQ1NTIEFQSV0oI2NzcykgYmVsb3cgZm9yIG1vcmUgZGV0YWlscy5cbiAgICovXG4gIGNsYXNzZXM6IFByb3BUeXBlcy5vYmplY3QsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogVGhlIGNvbXBvbmVudCB1c2VkIGZvciB0aGUgcm9vdCBub2RlLlxuICAgKiBFaXRoZXIgYSBzdHJpbmcgdG8gdXNlIGEgSFRNTCBlbGVtZW50IG9yIGEgY29tcG9uZW50LlxuICAgKi9cbiAgY29tcG9uZW50OiBQcm9wVHlwZXNcbiAgLyogQHR5cGVzY3JpcHQtdG8tcHJvcHR5cGVzLWlnbm9yZSAqL1xuICAuZWxlbWVudFR5cGUsXG5cbiAgLyoqXG4gICAqIEF0dHJpYnV0ZXMgYXBwbGllZCB0byB0aGUgYGltZ2AgZWxlbWVudCBpZiB0aGUgY29tcG9uZW50IGlzIHVzZWQgdG8gZGlzcGxheSBhbiBpbWFnZS5cbiAgICogSXQgY2FuIGJlIHVzZWQgdG8gbGlzdGVuIGZvciB0aGUgbG9hZGluZyBlcnJvciBldmVudC5cbiAgICovXG4gIGltZ1Byb3BzOiBQcm9wVHlwZXMub2JqZWN0LFxuXG4gIC8qKlxuICAgKiBUaGUgYHNpemVzYCBhdHRyaWJ1dGUgZm9yIHRoZSBgaW1nYCBlbGVtZW50LlxuICAgKi9cbiAgc2l6ZXM6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIFRoZSBgc3JjYCBhdHRyaWJ1dGUgZm9yIHRoZSBgaW1nYCBlbGVtZW50LlxuICAgKi9cbiAgc3JjOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBUaGUgYHNyY1NldGAgYXR0cmlidXRlIGZvciB0aGUgYGltZ2AgZWxlbWVudC5cbiAgICogVXNlIHRoaXMgYXR0cmlidXRlIGZvciByZXNwb25zaXZlIGltYWdlIGRpc3BsYXkuXG4gICAqL1xuICBzcmNTZXQ6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIFRoZSBzaGFwZSBvZiB0aGUgYXZhdGFyLlxuICAgKi9cbiAgdmFyaWFudDogUHJvcFR5cGVzLm9uZU9mKFsnY2lyY2xlJywgJ3JvdW5kZWQnLCAnc3F1YXJlJ10pXG59IDogdm9pZCAwO1xuZXhwb3J0IGRlZmF1bHQgd2l0aFN0eWxlcyhzdHlsZXMsIHtcbiAgbmFtZTogJ011aUF2YXRhcidcbn0pKEF2YXRhcik7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc1wiO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBjbHN4IGZyb20gJ2Nsc3gnO1xuaW1wb3J0IHdpdGhTdHlsZXMgZnJvbSAnLi4vc3R5bGVzL3dpdGhTdHlsZXMnO1xuZXhwb3J0IHZhciBzdHlsZXMgPSB7XG4gIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQuICovXG4gIHJvb3Q6IHtcbiAgICBkaXNwbGF5OiAnZmxleCcsXG4gICAgYWxpZ25JdGVtczogJ2NlbnRlcicsXG4gICAgcGFkZGluZzogOFxuICB9LFxuXG4gIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGRpc2FibGVTcGFjaW5nPXtmYWxzZX1gLiAqL1xuICBzcGFjaW5nOiB7XG4gICAgJyYgPiA6bm90KDpmaXJzdC1jaGlsZCknOiB7XG4gICAgICBtYXJnaW5MZWZ0OiA4XG4gICAgfVxuICB9XG59O1xudmFyIENhcmRBY3Rpb25zID0gLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gQ2FyZEFjdGlvbnMocHJvcHMsIHJlZikge1xuICB2YXIgX3Byb3BzJGRpc2FibGVTcGFjaW5nID0gcHJvcHMuZGlzYWJsZVNwYWNpbmcsXG4gICAgICBkaXNhYmxlU3BhY2luZyA9IF9wcm9wcyRkaXNhYmxlU3BhY2luZyA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcHJvcHMkZGlzYWJsZVNwYWNpbmcsXG4gICAgICBjbGFzc2VzID0gcHJvcHMuY2xhc3NlcyxcbiAgICAgIGNsYXNzTmFtZSA9IHByb3BzLmNsYXNzTmFtZSxcbiAgICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKHByb3BzLCBbXCJkaXNhYmxlU3BhY2luZ1wiLCBcImNsYXNzZXNcIiwgXCJjbGFzc05hbWVcIl0pO1xuXG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCBfZXh0ZW5kcyh7XG4gICAgY2xhc3NOYW1lOiBjbHN4KGNsYXNzZXMucm9vdCwgY2xhc3NOYW1lLCAhZGlzYWJsZVNwYWNpbmcgJiYgY2xhc3Nlcy5zcGFjaW5nKSxcbiAgICByZWY6IHJlZlxuICB9LCBvdGhlcikpO1xufSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBDYXJkQWN0aW9ucy5wcm9wVHlwZXMgPSB7XG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIFdhcm5pbmcgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgLy8gfCBUaGVzZSBQcm9wVHlwZXMgYXJlIGdlbmVyYXRlZCBmcm9tIHRoZSBUeXBlU2NyaXB0IHR5cGUgZGVmaW5pdGlvbnMgfFxuICAvLyB8ICAgICBUbyB1cGRhdGUgdGhlbSBlZGl0IHRoZSBkLnRzIGZpbGUgYW5kIHJ1biBcInlhcm4gcHJvcHR5cGVzXCIgICAgIHxcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4gIC8qKlxuICAgKiBUaGUgY29udGVudCBvZiB0aGUgY29tcG9uZW50LlxuICAgKi9cbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuXG4gIC8qKlxuICAgKiBPdmVycmlkZSBvciBleHRlbmQgdGhlIHN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAqIFNlZSBbQ1NTIEFQSV0oI2NzcykgYmVsb3cgZm9yIG1vcmUgZGV0YWlscy5cbiAgICovXG4gIGNsYXNzZXM6IFByb3BUeXBlcy5vYmplY3QsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgYWN0aW9ucyBkbyBub3QgaGF2ZSBhZGRpdGlvbmFsIG1hcmdpbi5cbiAgICovXG4gIGRpc2FibGVTcGFjaW5nOiBQcm9wVHlwZXMuYm9vbFxufSA6IHZvaWQgMDtcbmV4cG9ydCBkZWZhdWx0IHdpdGhTdHlsZXMoc3R5bGVzLCB7XG4gIG5hbWU6ICdNdWlDYXJkQWN0aW9ucydcbn0pKENhcmRBY3Rpb25zKTsiLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnXHJcbmltcG9ydCB7IG1ha2VTdHlsZXMsIHVzZVRoZW1lIH0gZnJvbSAnQG1hdGVyaWFsLXVpL2NvcmUvc3R5bGVzJ1xyXG5pbXBvcnQgUmF0aW5nIGZyb20gJ0BtYXRlcmlhbC11aS9sYWIvUmF0aW5nJ1xyXG5pbXBvcnQge1xyXG4gICAgUGFwZXIsXHJcbiAgICBUeXBvZ3JhcGh5LFxyXG4gICAgQ2FyZCxcclxuICAgIENhcmRDb250ZW50LFxyXG4gICAgRGl2aWRlcixcclxuICAgIENhcmRBY3Rpb25zLFxyXG4gICAgQXZhdGFyLFxyXG4gICAgSWNvbkJ1dHRvbixcclxuICAgIFRleHRGaWVsZCxcclxufSBmcm9tICdAbWF0ZXJpYWwtdWkvY29yZSdcclxuaW1wb3J0IERlbGV0ZUljb24gZnJvbSAnQG1hdGVyaWFsLXVpL2ljb25zL0RlbGV0ZSdcclxuaW1wb3J0IENyZWF0ZUljb24gZnJvbSAnQG1hdGVyaWFsLXVpL2ljb25zL0NyZWF0ZSdcclxuaW1wb3J0IFNlbmRJY29uIGZyb20gJ0BtYXRlcmlhbC11aS9pY29ucy9TZW5kJ1xyXG5cclxuY29uc3QgdXNlU3R5bGVzID0gbWFrZVN0eWxlcygodGhlbWUpID0+ICh7XHJcbiAgICByb290OiB7XHJcbiAgICAgICAgbWFyZ2luOiB0aGVtZS5zcGFjaW5nKDEsIDAsIDAsIDApLFxyXG4gICAgfSxcclxuXHJcbiAgICByZXZpZXdzOiB7XHJcbiAgICAgICAgZGlzcGxheTogJ2ZsZXgnLFxyXG4gICAgICAgIHdpZHRoOiAnMTAwJScsXHJcbiAgICAgICAgZmxleERpcmVjdGlvbjogJ2NvbHVtbicsXHJcbiAgICAgICAgYm94U2l6aW5nOiAnYm9yZGVyLWJveCcsXHJcbiAgICAgICAganVzdGlmeUNvbnRlbnQ6ICdjZW50ZXInLFxyXG4gICAgICAgICcmID4gKjpub3QoOmxhc3QtY2hpbGQpJzoge1xyXG4gICAgICAgICAgICBtYXJnaW5Cb3R0b206IHRoZW1lLnNwYWNpbmcoMiksXHJcbiAgICAgICAgfSxcclxuICAgIH0sXHJcbiAgICByZXZpZXdDb250ZW50OiB7XHJcbiAgICAgICAgZGlzcGxheTogJ2ZsZXgnLFxyXG4gICAgICAgIHdpZHRoOiAnMTAwJScsXHJcbiAgICAgICAgYWxpZ25JdGVtczogJ2NlbnRlcicsXHJcbiAgICAgICAgJyYgPiAqOm5vdCg6bGFzdC1jaGlsZCknOiB7XHJcbiAgICAgICAgICAgIG1hcmdpblJpZ2h0OiB0aGVtZS5zcGFjaW5nKDIpLFxyXG4gICAgICAgIH0sXHJcbiAgICB9LFxyXG4gICAgcmV2aWV3c0xpc3Q6IHtcclxuICAgICAgICBkaXNwbGF5OiAnZmxleCcsXHJcbiAgICAgICAgZmxleERpcmVjdGlvbjogJ2NvbHVtbicsXHJcbiAgICAgICAgd2lkdGg6ICcxMDAlJyxcclxuICAgIH0sXHJcbiAgICByZXZpZXdJbnB1dDoge1xyXG4gICAgICAgIGZsZXhHcm93OiAxLFxyXG4gICAgfSxcclxufSkpXHJcblxyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBSZXZpZXcocHJvcHMpIHtcclxuICAgIGNvbnN0IGNsYXNzZXMgPSB1c2VTdHlsZXMoKVxyXG4gICAgY29uc3QgdGhlbWUgPSB1c2VUaGVtZSgpXHJcbiAgICBjb25zdCBbcmV2aWV3LCBzZXRSZXZpZXddID0gUmVhY3QudXNlU3RhdGUoJycpXHJcbiAgICBjb25zdCB7IHByb2ZpbGUsIGxlc3NvbiB9ID0gcHJvcHNcclxuXHJcbiAgICBjb25zdCBoYW5kbGVTZXRSZXZpZXcgPSAoKSA9PiB7fVxyXG4gICAgY29uc3QgaGFuZGxlRGVsZXRlUmV2aWV3ID0gKCkgPT4ge31cclxuXHJcbiAgICByZXR1cm4gKFxyXG4gICAgICAgIDxDYXJkIGNsYXNzTmFtZT17Y2xhc3Nlcy5yb290fSBpbmRleD17Mn0gZGlyPXt0aGVtZS5kaXJlY3Rpb259PlxyXG4gICAgICAgICAgICA8Q2FyZENvbnRlbnQgY2xhc3NOYW1lPXtjbGFzc2VzLnJldmlld3N9PlxyXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9e2NsYXNzZXMucmV2aWV3c0xpc3R9PlxyXG4gICAgICAgICAgICAgICAgICAgIDxUeXBvZ3JhcGh5XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhcmlhbnQ9XCJoNFwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbXBvbmVudD1cImgzXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGU9e3sgbWFyZ2luQm90dG9tOiB0aGVtZS5zcGFjaW5nKDEpIH19XHJcbiAgICAgICAgICAgICAgICAgICAgPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICDQntGC0LfRi9Cy0YtcclxuICAgICAgICAgICAgICAgICAgICA8L1R5cG9ncmFwaHk+XHJcbiAgICAgICAgICAgICAgICAgICAgPERpdmlkZXJcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyaWFudD1cImZ1bGxXaWR0aFwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG9yaWVudGF0aW9uPVwiaG9yaXpvbnRhbFwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlPXt7IG1hcmdpbkJvdHRvbTogdGhlbWUuc3BhY2luZygyKSB9fVxyXG4gICAgICAgICAgICAgICAgICAgIC8+XHJcbiAgICAgICAgICAgICAgICAgICAge2xlc3Nvbi5yZXZpZXdzLm1hcCgoaXRlbSwgaWR4KSA9PiAoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxQYXBlclxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAga2V5PXtpdGVtLmlkfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxldmF0aW9uPXsyfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGU9e3tcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXJnaW5Cb3R0b206IHRoZW1lLnNwYWNpbmcoMiksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFkZGluZzogdGhlbWUuc3BhY2luZygxKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBib3hTaXppbmc6ICdib3JkZXItYm94JyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH19XHJcbiAgICAgICAgICAgICAgICAgICAgICAgID5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPXtjbGFzc2VzLnJldmlld0NvbnRlbnR9PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxBdmF0YXIgc3JjPXtpdGVtLmF2YXRhcn0gLz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8VHlwb2dyYXBoeVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXJpYW50PVwiYm9keTJcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb21wb25lbnQ9XCJzcGFuXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGU9e3sgZmxleEdyb3c6IDEgfX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtpdGVtLmF1dGhvcn06IHtpdGVtLnRleHR9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9UeXBvZ3JhcGh5PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtpdGVtLmF1dGhvciA9PT1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBgJHtwcm9maWxlLmZpcnN0TmFtZX0gJHtwcm9maWxlLmxhc3ROYW1lfWAgPyAoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxDYXJkQWN0aW9ucz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxJY29uQnV0dG9uPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxDcmVhdGVJY29uIC8+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L0ljb25CdXR0b24+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8SWNvbkJ1dHRvblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkPXtpdGVtLmlkfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2xpY2s9eyhldmVudCkgPT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaGFuZGxlRGVsZXRlUmV2aWV3KFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpdGVtLmlkLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxEZWxldGVJY29uIC8+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L0ljb25CdXR0b24+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvQ2FyZEFjdGlvbnM+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKSA6IG51bGx9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC9QYXBlcj5cclxuICAgICAgICAgICAgICAgICAgICApKX1cclxuICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAge2xlc3Nvbi5yZXZpZXdzLmxlbmd0aCA+IDAgPyAoXHJcbiAgICAgICAgICAgICAgICAgICAgPERpdmlkZXIgb3JpZW50YXRpb249XCJob3Jpem9udGFsXCIgdmFyaWFudD1cImZ1bGxXaWR0aFwiIC8+XHJcbiAgICAgICAgICAgICAgICApIDogbnVsbH1cclxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPXtjbGFzc2VzLnJldmlld0NvbnRlbnR9PlxyXG4gICAgICAgICAgICAgICAgICAgIDxBdmF0YXIgc3JjPXtwcm9maWxlLmF2YXRhcn0gLz5cclxuICAgICAgICAgICAgICAgICAgICA8VGV4dEZpZWxkXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyPXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxlc3Nvbi5yZXZpZXdzLmxlbmd0aCA+IDBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA/ICfQntGB0YLQsNCy0YzRgtC1INC+0YLQt9GL0LIgJ1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogJ9Ch0YLQsNC90YzRgtC1INC/0LXRgNCy0YvQvCwg0LrRgtC+INC+0YHRgtCw0LLQuNGCINC+0YLQt9GL0LIg0L7QsSDRjdGC0L7QvCDRg9GA0L7QutC1ISdcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXJpYW50PVwib3V0bGluZWRcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9e2NsYXNzZXMucmV2aWV3SW5wdXR9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNpemU9XCJzbWFsbFwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU9XCJ0ZXh0XCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgb25LZXlQcmVzcz17KGV2ZW50KSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZXZlbnQua2V5ID09PSAnRW50ZXInKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaGFuZGxlU2V0UmV2aWV3KClcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU9e3Jldmlld31cclxuICAgICAgICAgICAgICAgICAgICAgICAgb25DaGFuZ2U9eyhlKSA9PiBzZXRSZXZpZXcoZS50YXJnZXQudmFsdWUpfVxyXG4gICAgICAgICAgICAgICAgICAgIC8+XHJcbiAgICAgICAgICAgICAgICAgICAgPEljb25CdXR0b24gb25DbGljaz17aGFuZGxlU2V0UmV2aWV3fSBjb2xvcj1cInByaW1hcnlcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPFNlbmRJY29uIC8+XHJcbiAgICAgICAgICAgICAgICAgICAgPC9JY29uQnV0dG9uPlxyXG4gICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgIDwvQ2FyZENvbnRlbnQ+XHJcbiAgICAgICAgPC9DYXJkPlxyXG4gICAgKVxyXG59XHJcbiIsImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IGNyZWF0ZVN2Z0ljb24gfSBmcm9tICdAbWF0ZXJpYWwtdWkvY29yZS91dGlscyc7XG4vKipcbiAqIEBpZ25vcmUgLSBpbnRlcm5hbCBjb21wb25lbnQuXG4gKi9cblxuZXhwb3J0IGRlZmF1bHQgY3JlYXRlU3ZnSWNvbiggLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJwYXRoXCIsIHtcbiAgZDogXCJNMTIgMTcuMjdMMTguMTggMjFsLTEuNjQtNy4wM0wyMiA5LjI0bC03LjE5LS42MUwxMiAyIDkuMTkgOC42MyAyIDkuMjRsNS40NiA0LjczTDUuODIgMjF6XCJcbn0pLCAnU3RhcicpOyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF9zbGljZWRUb0FycmF5IGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9zbGljZWRUb0FycmF5XCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc1wiO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBjbHN4IGZyb20gJ2Nsc3gnO1xuaW1wb3J0IHsgY2hhaW5Qcm9wVHlwZXMgfSBmcm9tICdAbWF0ZXJpYWwtdWkvdXRpbHMnO1xuaW1wb3J0IHsgdXNlVGhlbWUsIHdpdGhTdHlsZXMgfSBmcm9tICdAbWF0ZXJpYWwtdWkvY29yZS9zdHlsZXMnO1xuaW1wb3J0IHsgY2FwaXRhbGl6ZSwgdXNlRm9ya1JlZiwgdXNlSXNGb2N1c1Zpc2libGUsIHVzZUNvbnRyb2xsZWQsIHVuc3RhYmxlX3VzZUlkIGFzIHVzZUlkIH0gZnJvbSAnQG1hdGVyaWFsLXVpL2NvcmUvdXRpbHMnO1xuaW1wb3J0IFN0YXIgZnJvbSAnLi4vaW50ZXJuYWwvc3ZnLWljb25zL1N0YXInO1xuXG5mdW5jdGlvbiBjbGFtcCh2YWx1ZSwgbWluLCBtYXgpIHtcbiAgaWYgKHZhbHVlIDwgbWluKSB7XG4gICAgcmV0dXJuIG1pbjtcbiAgfVxuXG4gIGlmICh2YWx1ZSA+IG1heCkge1xuICAgIHJldHVybiBtYXg7XG4gIH1cblxuICByZXR1cm4gdmFsdWU7XG59XG5cbmZ1bmN0aW9uIGdldERlY2ltYWxQcmVjaXNpb24obnVtKSB7XG4gIHZhciBkZWNpbWFsUGFydCA9IG51bS50b1N0cmluZygpLnNwbGl0KCcuJylbMV07XG4gIHJldHVybiBkZWNpbWFsUGFydCA/IGRlY2ltYWxQYXJ0Lmxlbmd0aCA6IDA7XG59XG5cbmZ1bmN0aW9uIHJvdW5kVmFsdWVUb1ByZWNpc2lvbih2YWx1ZSwgcHJlY2lzaW9uKSB7XG4gIGlmICh2YWx1ZSA9PSBudWxsKSB7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9XG5cbiAgdmFyIG5lYXJlc3QgPSBNYXRoLnJvdW5kKHZhbHVlIC8gcHJlY2lzaW9uKSAqIHByZWNpc2lvbjtcbiAgcmV0dXJuIE51bWJlcihuZWFyZXN0LnRvRml4ZWQoZ2V0RGVjaW1hbFByZWNpc2lvbihwcmVjaXNpb24pKSk7XG59XG5cbmV4cG9ydCB2YXIgc3R5bGVzID0gZnVuY3Rpb24gc3R5bGVzKHRoZW1lKSB7XG4gIHJldHVybiB7XG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudC4gKi9cbiAgICByb290OiB7XG4gICAgICBkaXNwbGF5OiAnaW5saW5lLWZsZXgnLFxuICAgICAgcG9zaXRpb246ICdyZWxhdGl2ZScsXG4gICAgICBmb250U2l6ZTogdGhlbWUudHlwb2dyYXBoeS5weFRvUmVtKDI0KSxcbiAgICAgIGNvbG9yOiAnI2ZmYjQwMCcsXG4gICAgICBjdXJzb3I6ICdwb2ludGVyJyxcbiAgICAgIHRleHRBbGlnbjogJ2xlZnQnLFxuICAgICAgV2Via2l0VGFwSGlnaGxpZ2h0Q29sb3I6ICd0cmFuc3BhcmVudCcsXG4gICAgICAnJiRkaXNhYmxlZCc6IHtcbiAgICAgICAgb3BhY2l0eTogMC41LFxuICAgICAgICBwb2ludGVyRXZlbnRzOiAnbm9uZSdcbiAgICAgIH0sXG4gICAgICAnJiRmb2N1c1Zpc2libGUgJGljb25BY3RpdmUnOiB7XG4gICAgICAgIG91dGxpbmU6ICcxcHggc29saWQgIzk5OSdcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgc2l6ZT1cInNtYWxsXCJgLiAqL1xuICAgIHNpemVTbWFsbDoge1xuICAgICAgZm9udFNpemU6IHRoZW1lLnR5cG9ncmFwaHkucHhUb1JlbSgxOClcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgc2l6ZT1cImxhcmdlXCJgLiAqL1xuICAgIHNpemVMYXJnZToge1xuICAgICAgZm9udFNpemU6IHRoZW1lLnR5cG9ncmFwaHkucHhUb1JlbSgzMClcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgcmVhZE9ubHk9e3RydWV9YC4gKi9cbiAgICByZWFkT25seToge1xuICAgICAgcG9pbnRlckV2ZW50czogJ25vbmUnXG4gICAgfSxcblxuICAgIC8qIFBzZXVkby1jbGFzcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGRpc2FibGVkPXt0cnVlfWAuICovXG4gICAgZGlzYWJsZWQ6IHt9LFxuXG4gICAgLyogUHNldWRvLWNsYXNzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBrZXlib2FyZCBmb2N1c2VkLiAqL1xuICAgIGZvY3VzVmlzaWJsZToge30sXG5cbiAgICAvKiBWaXN1YWxseSBoaWRlIGFuIGVsZW1lbnQuICovXG4gICAgdmlzdWFsbHloaWRkZW46IHtcbiAgICAgIGJvcmRlcjogMCxcbiAgICAgIGNsaXA6ICdyZWN0KDAgMCAwIDApJyxcbiAgICAgIGhlaWdodDogMSxcbiAgICAgIG1hcmdpbjogLTEsXG4gICAgICBjb2xvcjogJyMwMDAnLFxuICAgICAgb3ZlcmZsb3c6ICdoaWRkZW4nLFxuICAgICAgcGFkZGluZzogMCxcbiAgICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgICAgdG9wOiAyMCxcbiAgICAgIHdpZHRoOiAxXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSBwcmlzdGluZSBsYWJlbC4gKi9cbiAgICBwcmlzdGluZToge1xuICAgICAgJ2lucHV0OmZvY3VzICsgJic6IHtcbiAgICAgICAgdG9wOiAwLFxuICAgICAgICBib3R0b206IDAsXG4gICAgICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgICAgICBvdXRsaW5lOiAnMXB4IHNvbGlkICM5OTknLFxuICAgICAgICB3aWR0aDogJzEwMCUnXG4gICAgICB9XG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSBsYWJlbCBlbGVtZW50cy4gKi9cbiAgICBsYWJlbDoge1xuICAgICAgY3Vyc29yOiAnaW5oZXJpdCdcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIGljb24gd3JhcHBpbmcgZWxlbWVudHMuICovXG4gICAgaWNvbjoge1xuICAgICAgZGlzcGxheTogJ2ZsZXgnLFxuICAgICAgdHJhbnNpdGlvbjogdGhlbWUudHJhbnNpdGlvbnMuY3JlYXRlKCd0cmFuc2Zvcm0nLCB7XG4gICAgICAgIGR1cmF0aW9uOiB0aGVtZS50cmFuc2l0aW9ucy5kdXJhdGlvbi5zaG9ydGVzdFxuICAgICAgfSksXG4gICAgICAvLyBGaXggbW91c2VMZWF2ZSBpc3N1ZS5cbiAgICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9yZWFjdC9pc3N1ZXMvNDQ5MlxuICAgICAgcG9pbnRlckV2ZW50czogJ25vbmUnXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSBpY29uIHdyYXBwaW5nIGVsZW1lbnRzIHdoZW4gZW1wdHkuICovXG4gICAgaWNvbkVtcHR5OiB7XG4gICAgICBjb2xvcjogdGhlbWUucGFsZXR0ZS5hY3Rpb24uZGlzYWJsZWRcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIGljb24gd3JhcHBpbmcgZWxlbWVudHMgd2hlbiBmaWxsZWQuICovXG4gICAgaWNvbkZpbGxlZDoge30sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgaWNvbiB3cmFwcGluZyBlbGVtZW50cyB3aGVuIGhvdmVyLiAqL1xuICAgIGljb25Ib3Zlcjoge30sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgaWNvbiB3cmFwcGluZyBlbGVtZW50cyB3aGVuIGZvY3VzLiAqL1xuICAgIGljb25Gb2N1czoge30sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgaWNvbiB3cmFwcGluZyBlbGVtZW50cyB3aGVuIGFjdGl2ZS4gKi9cbiAgICBpY29uQWN0aXZlOiB7XG4gICAgICB0cmFuc2Zvcm06ICdzY2FsZSgxLjIpJ1xuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgaWNvbiB3cmFwcGluZyBlbGVtZW50cyB3aGVuIGRlY2ltYWxzIGFyZSBuZWNlc3NhcnkuICovXG4gICAgZGVjaW1hbDoge1xuICAgICAgcG9zaXRpb246ICdyZWxhdGl2ZSdcbiAgICB9XG4gIH07XG59O1xuXG5mdW5jdGlvbiBJY29uQ29udGFpbmVyKHByb3BzKSB7XG4gIHZhciB2YWx1ZSA9IHByb3BzLnZhbHVlLFxuICAgICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMocHJvcHMsIFtcInZhbHVlXCJdKTtcblxuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIsIG90aGVyKTtcbn1cblxucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gSWNvbkNvbnRhaW5lci5wcm9wVHlwZXMgPSB7XG4gIHZhbHVlOiBQcm9wVHlwZXMubnVtYmVyLmlzUmVxdWlyZWRcbn0gOiB2b2lkIDA7XG52YXIgZGVmYXVsdEljb24gPSAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChTdGFyLCB7XG4gIGZvbnRTaXplOiBcImluaGVyaXRcIlxufSk7XG5cbmZ1bmN0aW9uIGRlZmF1bHRMYWJlbFRleHQodmFsdWUpIHtcbiAgcmV0dXJuIFwiXCIuY29uY2F0KHZhbHVlLCBcIiBTdGFyXCIpLmNvbmNhdCh2YWx1ZSAhPT0gMSA/ICdzJyA6ICcnKTtcbn1cblxudmFyIFJhdGluZyA9IC8qI19fUFVSRV9fKi9SZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIFJhdGluZyhwcm9wcywgcmVmKSB7XG4gIHZhciBjbGFzc2VzID0gcHJvcHMuY2xhc3NlcyxcbiAgICAgIGNsYXNzTmFtZSA9IHByb3BzLmNsYXNzTmFtZSxcbiAgICAgIF9wcm9wcyRkZWZhdWx0VmFsdWUgPSBwcm9wcy5kZWZhdWx0VmFsdWUsXG4gICAgICBkZWZhdWx0VmFsdWUgPSBfcHJvcHMkZGVmYXVsdFZhbHVlID09PSB2b2lkIDAgPyBudWxsIDogX3Byb3BzJGRlZmF1bHRWYWx1ZSxcbiAgICAgIF9wcm9wcyRkaXNhYmxlZCA9IHByb3BzLmRpc2FibGVkLFxuICAgICAgZGlzYWJsZWQgPSBfcHJvcHMkZGlzYWJsZWQgPT09IHZvaWQgMCA/IGZhbHNlIDogX3Byb3BzJGRpc2FibGVkLFxuICAgICAgZW1wdHlJY29uID0gcHJvcHMuZW1wdHlJY29uLFxuICAgICAgX3Byb3BzJGVtcHR5TGFiZWxUZXh0ID0gcHJvcHMuZW1wdHlMYWJlbFRleHQsXG4gICAgICBlbXB0eUxhYmVsVGV4dCA9IF9wcm9wcyRlbXB0eUxhYmVsVGV4dCA9PT0gdm9pZCAwID8gJ0VtcHR5JyA6IF9wcm9wcyRlbXB0eUxhYmVsVGV4dCxcbiAgICAgIF9wcm9wcyRnZXRMYWJlbFRleHQgPSBwcm9wcy5nZXRMYWJlbFRleHQsXG4gICAgICBnZXRMYWJlbFRleHQgPSBfcHJvcHMkZ2V0TGFiZWxUZXh0ID09PSB2b2lkIDAgPyBkZWZhdWx0TGFiZWxUZXh0IDogX3Byb3BzJGdldExhYmVsVGV4dCxcbiAgICAgIF9wcm9wcyRpY29uID0gcHJvcHMuaWNvbixcbiAgICAgIGljb24gPSBfcHJvcHMkaWNvbiA9PT0gdm9pZCAwID8gZGVmYXVsdEljb24gOiBfcHJvcHMkaWNvbixcbiAgICAgIF9wcm9wcyRJY29uQ29udGFpbmVyQyA9IHByb3BzLkljb25Db250YWluZXJDb21wb25lbnQsXG4gICAgICBJY29uQ29udGFpbmVyQ29tcG9uZW50ID0gX3Byb3BzJEljb25Db250YWluZXJDID09PSB2b2lkIDAgPyBJY29uQ29udGFpbmVyIDogX3Byb3BzJEljb25Db250YWluZXJDLFxuICAgICAgX3Byb3BzJG1heCA9IHByb3BzLm1heCxcbiAgICAgIG1heCA9IF9wcm9wcyRtYXggPT09IHZvaWQgMCA/IDUgOiBfcHJvcHMkbWF4LFxuICAgICAgbmFtZVByb3AgPSBwcm9wcy5uYW1lLFxuICAgICAgb25DaGFuZ2UgPSBwcm9wcy5vbkNoYW5nZSxcbiAgICAgIG9uQ2hhbmdlQWN0aXZlID0gcHJvcHMub25DaGFuZ2VBY3RpdmUsXG4gICAgICBvbk1vdXNlTGVhdmUgPSBwcm9wcy5vbk1vdXNlTGVhdmUsXG4gICAgICBvbk1vdXNlTW92ZSA9IHByb3BzLm9uTW91c2VNb3ZlLFxuICAgICAgX3Byb3BzJHByZWNpc2lvbiA9IHByb3BzLnByZWNpc2lvbixcbiAgICAgIHByZWNpc2lvbiA9IF9wcm9wcyRwcmVjaXNpb24gPT09IHZvaWQgMCA/IDEgOiBfcHJvcHMkcHJlY2lzaW9uLFxuICAgICAgX3Byb3BzJHJlYWRPbmx5ID0gcHJvcHMucmVhZE9ubHksXG4gICAgICByZWFkT25seSA9IF9wcm9wcyRyZWFkT25seSA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcHJvcHMkcmVhZE9ubHksXG4gICAgICBfcHJvcHMkc2l6ZSA9IHByb3BzLnNpemUsXG4gICAgICBzaXplID0gX3Byb3BzJHNpemUgPT09IHZvaWQgMCA/ICdtZWRpdW0nIDogX3Byb3BzJHNpemUsXG4gICAgICB2YWx1ZVByb3AgPSBwcm9wcy52YWx1ZSxcbiAgICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKHByb3BzLCBbXCJjbGFzc2VzXCIsIFwiY2xhc3NOYW1lXCIsIFwiZGVmYXVsdFZhbHVlXCIsIFwiZGlzYWJsZWRcIiwgXCJlbXB0eUljb25cIiwgXCJlbXB0eUxhYmVsVGV4dFwiLCBcImdldExhYmVsVGV4dFwiLCBcImljb25cIiwgXCJJY29uQ29udGFpbmVyQ29tcG9uZW50XCIsIFwibWF4XCIsIFwibmFtZVwiLCBcIm9uQ2hhbmdlXCIsIFwib25DaGFuZ2VBY3RpdmVcIiwgXCJvbk1vdXNlTGVhdmVcIiwgXCJvbk1vdXNlTW92ZVwiLCBcInByZWNpc2lvblwiLCBcInJlYWRPbmx5XCIsIFwic2l6ZVwiLCBcInZhbHVlXCJdKTtcblxuICB2YXIgbmFtZSA9IHVzZUlkKG5hbWVQcm9wKTtcblxuICB2YXIgX3VzZUNvbnRyb2xsZWQgPSB1c2VDb250cm9sbGVkKHtcbiAgICBjb250cm9sbGVkOiB2YWx1ZVByb3AsXG4gICAgZGVmYXVsdDogZGVmYXVsdFZhbHVlLFxuICAgIG5hbWU6ICdSYXRpbmcnXG4gIH0pLFxuICAgICAgX3VzZUNvbnRyb2xsZWQyID0gX3NsaWNlZFRvQXJyYXkoX3VzZUNvbnRyb2xsZWQsIDIpLFxuICAgICAgdmFsdWVEZXJpdmVkID0gX3VzZUNvbnRyb2xsZWQyWzBdLFxuICAgICAgc2V0VmFsdWVTdGF0ZSA9IF91c2VDb250cm9sbGVkMlsxXTtcblxuICB2YXIgdmFsdWVSb3VuZGVkID0gcm91bmRWYWx1ZVRvUHJlY2lzaW9uKHZhbHVlRGVyaXZlZCwgcHJlY2lzaW9uKTtcbiAgdmFyIHRoZW1lID0gdXNlVGhlbWUoKTtcblxuICB2YXIgX1JlYWN0JHVzZVN0YXRlID0gUmVhY3QudXNlU3RhdGUoe1xuICAgIGhvdmVyOiAtMSxcbiAgICBmb2N1czogLTFcbiAgfSksXG4gICAgICBfUmVhY3QkdXNlU3RhdGUkID0gX1JlYWN0JHVzZVN0YXRlWzBdLFxuICAgICAgaG92ZXIgPSBfUmVhY3QkdXNlU3RhdGUkLmhvdmVyLFxuICAgICAgZm9jdXMgPSBfUmVhY3QkdXNlU3RhdGUkLmZvY3VzLFxuICAgICAgc2V0U3RhdGUgPSBfUmVhY3QkdXNlU3RhdGVbMV07XG5cbiAgdmFyIHZhbHVlID0gdmFsdWVSb3VuZGVkO1xuXG4gIGlmIChob3ZlciAhPT0gLTEpIHtcbiAgICB2YWx1ZSA9IGhvdmVyO1xuICB9XG5cbiAgaWYgKGZvY3VzICE9PSAtMSkge1xuICAgIHZhbHVlID0gZm9jdXM7XG4gIH1cblxuICB2YXIgX3VzZUlzRm9jdXNWaXNpYmxlID0gdXNlSXNGb2N1c1Zpc2libGUoKSxcbiAgICAgIGlzRm9jdXNWaXNpYmxlID0gX3VzZUlzRm9jdXNWaXNpYmxlLmlzRm9jdXNWaXNpYmxlLFxuICAgICAgb25CbHVyVmlzaWJsZSA9IF91c2VJc0ZvY3VzVmlzaWJsZS5vbkJsdXJWaXNpYmxlLFxuICAgICAgZm9jdXNWaXNpYmxlUmVmID0gX3VzZUlzRm9jdXNWaXNpYmxlLnJlZjtcblxuICB2YXIgX1JlYWN0JHVzZVN0YXRlMiA9IFJlYWN0LnVzZVN0YXRlKGZhbHNlKSxcbiAgICAgIGZvY3VzVmlzaWJsZSA9IF9SZWFjdCR1c2VTdGF0ZTJbMF0sXG4gICAgICBzZXRGb2N1c1Zpc2libGUgPSBfUmVhY3QkdXNlU3RhdGUyWzFdO1xuXG4gIHZhciByb290UmVmID0gUmVhY3QudXNlUmVmKCk7XG4gIHZhciBoYW5kbGVGb2N1c1JlZiA9IHVzZUZvcmtSZWYoZm9jdXNWaXNpYmxlUmVmLCByb290UmVmKTtcbiAgdmFyIGhhbmRsZVJlZiA9IHVzZUZvcmtSZWYoaGFuZGxlRm9jdXNSZWYsIHJlZik7XG5cbiAgdmFyIGhhbmRsZU1vdXNlTW92ZSA9IGZ1bmN0aW9uIGhhbmRsZU1vdXNlTW92ZShldmVudCkge1xuICAgIGlmIChvbk1vdXNlTW92ZSkge1xuICAgICAgb25Nb3VzZU1vdmUoZXZlbnQpO1xuICAgIH1cblxuICAgIHZhciByb290Tm9kZSA9IHJvb3RSZWYuY3VycmVudDtcblxuICAgIHZhciBfcm9vdE5vZGUkZ2V0Qm91bmRpbmcgPSByb290Tm9kZS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKSxcbiAgICAgICAgcmlnaHQgPSBfcm9vdE5vZGUkZ2V0Qm91bmRpbmcucmlnaHQsXG4gICAgICAgIGxlZnQgPSBfcm9vdE5vZGUkZ2V0Qm91bmRpbmcubGVmdDtcblxuICAgIHZhciBfcm9vdE5vZGUkZmlyc3RDaGlsZCQgPSByb290Tm9kZS5maXJzdENoaWxkLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLFxuICAgICAgICB3aWR0aCA9IF9yb290Tm9kZSRmaXJzdENoaWxkJC53aWR0aDtcblxuICAgIHZhciBwZXJjZW50O1xuXG4gICAgaWYgKHRoZW1lLmRpcmVjdGlvbiA9PT0gJ3J0bCcpIHtcbiAgICAgIHBlcmNlbnQgPSAocmlnaHQgLSBldmVudC5jbGllbnRYKSAvICh3aWR0aCAqIG1heCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHBlcmNlbnQgPSAoZXZlbnQuY2xpZW50WCAtIGxlZnQpIC8gKHdpZHRoICogbWF4KTtcbiAgICB9XG5cbiAgICB2YXIgbmV3SG92ZXIgPSByb3VuZFZhbHVlVG9QcmVjaXNpb24obWF4ICogcGVyY2VudCArIHByZWNpc2lvbiAvIDIsIHByZWNpc2lvbik7XG4gICAgbmV3SG92ZXIgPSBjbGFtcChuZXdIb3ZlciwgcHJlY2lzaW9uLCBtYXgpO1xuICAgIHNldFN0YXRlKGZ1bmN0aW9uIChwcmV2KSB7XG4gICAgICByZXR1cm4gcHJldi5ob3ZlciA9PT0gbmV3SG92ZXIgJiYgcHJldi5mb2N1cyA9PT0gbmV3SG92ZXIgPyBwcmV2IDoge1xuICAgICAgICBob3ZlcjogbmV3SG92ZXIsXG4gICAgICAgIGZvY3VzOiBuZXdIb3ZlclxuICAgICAgfTtcbiAgICB9KTtcbiAgICBzZXRGb2N1c1Zpc2libGUoZmFsc2UpO1xuXG4gICAgaWYgKG9uQ2hhbmdlQWN0aXZlICYmIGhvdmVyICE9PSBuZXdIb3Zlcikge1xuICAgICAgb25DaGFuZ2VBY3RpdmUoZXZlbnQsIG5ld0hvdmVyKTtcbiAgICB9XG4gIH07XG5cbiAgdmFyIGhhbmRsZU1vdXNlTGVhdmUgPSBmdW5jdGlvbiBoYW5kbGVNb3VzZUxlYXZlKGV2ZW50KSB7XG4gICAgaWYgKG9uTW91c2VMZWF2ZSkge1xuICAgICAgb25Nb3VzZUxlYXZlKGV2ZW50KTtcbiAgICB9XG5cbiAgICB2YXIgbmV3SG92ZXIgPSAtMTtcbiAgICBzZXRTdGF0ZSh7XG4gICAgICBob3ZlcjogbmV3SG92ZXIsXG4gICAgICBmb2N1czogbmV3SG92ZXJcbiAgICB9KTtcblxuICAgIGlmIChvbkNoYW5nZUFjdGl2ZSAmJiBob3ZlciAhPT0gbmV3SG92ZXIpIHtcbiAgICAgIG9uQ2hhbmdlQWN0aXZlKGV2ZW50LCBuZXdIb3Zlcik7XG4gICAgfVxuICB9O1xuXG4gIHZhciBoYW5kbGVDaGFuZ2UgPSBmdW5jdGlvbiBoYW5kbGVDaGFuZ2UoZXZlbnQpIHtcbiAgICB2YXIgbmV3VmFsdWUgPSBwYXJzZUZsb2F0KGV2ZW50LnRhcmdldC52YWx1ZSk7XG4gICAgc2V0VmFsdWVTdGF0ZShuZXdWYWx1ZSk7XG5cbiAgICBpZiAob25DaGFuZ2UpIHtcbiAgICAgIG9uQ2hhbmdlKGV2ZW50LCBuZXdWYWx1ZSk7XG4gICAgfVxuICB9O1xuXG4gIHZhciBoYW5kbGVDbGVhciA9IGZ1bmN0aW9uIGhhbmRsZUNsZWFyKGV2ZW50KSB7XG4gICAgLy8gSWdub3JlIGtleWJvYXJkIGV2ZW50c1xuICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9yZWFjdC9pc3N1ZXMvNzQwN1xuICAgIGlmIChldmVudC5jbGllbnRYID09PSAwICYmIGV2ZW50LmNsaWVudFkgPT09IDApIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBzZXRTdGF0ZSh7XG4gICAgICBob3ZlcjogLTEsXG4gICAgICBmb2N1czogLTFcbiAgICB9KTtcbiAgICBzZXRWYWx1ZVN0YXRlKG51bGwpO1xuXG4gICAgaWYgKG9uQ2hhbmdlICYmIHBhcnNlRmxvYXQoZXZlbnQudGFyZ2V0LnZhbHVlKSA9PT0gdmFsdWVSb3VuZGVkKSB7XG4gICAgICBvbkNoYW5nZShldmVudCwgbnVsbCk7XG4gICAgfVxuICB9O1xuXG4gIHZhciBoYW5kbGVGb2N1cyA9IGZ1bmN0aW9uIGhhbmRsZUZvY3VzKGV2ZW50KSB7XG4gICAgaWYgKGlzRm9jdXNWaXNpYmxlKGV2ZW50KSkge1xuICAgICAgc2V0Rm9jdXNWaXNpYmxlKHRydWUpO1xuICAgIH1cblxuICAgIHZhciBuZXdGb2N1cyA9IHBhcnNlRmxvYXQoZXZlbnQudGFyZ2V0LnZhbHVlKTtcbiAgICBzZXRTdGF0ZShmdW5jdGlvbiAocHJldikge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgaG92ZXI6IHByZXYuaG92ZXIsXG4gICAgICAgIGZvY3VzOiBuZXdGb2N1c1xuICAgICAgfTtcbiAgICB9KTtcblxuICAgIGlmIChvbkNoYW5nZUFjdGl2ZSAmJiBmb2N1cyAhPT0gbmV3Rm9jdXMpIHtcbiAgICAgIG9uQ2hhbmdlQWN0aXZlKGV2ZW50LCBuZXdGb2N1cyk7XG4gICAgfVxuICB9O1xuXG4gIHZhciBoYW5kbGVCbHVyID0gZnVuY3Rpb24gaGFuZGxlQmx1cihldmVudCkge1xuICAgIGlmIChob3ZlciAhPT0gLTEpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoZm9jdXNWaXNpYmxlICE9PSBmYWxzZSkge1xuICAgICAgc2V0Rm9jdXNWaXNpYmxlKGZhbHNlKTtcbiAgICAgIG9uQmx1clZpc2libGUoKTtcbiAgICB9XG5cbiAgICB2YXIgbmV3Rm9jdXMgPSAtMTtcbiAgICBzZXRTdGF0ZShmdW5jdGlvbiAocHJldikge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgaG92ZXI6IHByZXYuaG92ZXIsXG4gICAgICAgIGZvY3VzOiBuZXdGb2N1c1xuICAgICAgfTtcbiAgICB9KTtcblxuICAgIGlmIChvbkNoYW5nZUFjdGl2ZSAmJiBmb2N1cyAhPT0gbmV3Rm9jdXMpIHtcbiAgICAgIG9uQ2hhbmdlQWN0aXZlKGV2ZW50LCBuZXdGb2N1cyk7XG4gICAgfVxuICB9O1xuXG4gIHZhciBpdGVtID0gZnVuY3Rpb24gaXRlbShzdGF0ZSwgbGFiZWxQcm9wcykge1xuICAgIHZhciBpZCA9IFwiXCIuY29uY2F0KG5hbWUsIFwiLVwiKS5jb25jYXQoU3RyaW5nKHN0YXRlLnZhbHVlKS5yZXBsYWNlKCcuJywgJy0nKSk7XG4gICAgdmFyIGNvbnRhaW5lciA9IC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KEljb25Db250YWluZXJDb21wb25lbnQsIHtcbiAgICAgIHZhbHVlOiBzdGF0ZS52YWx1ZSxcbiAgICAgIGNsYXNzTmFtZTogY2xzeChjbGFzc2VzLmljb24sIHN0YXRlLmZpbGxlZCA/IGNsYXNzZXMuaWNvbkZpbGxlZCA6IGNsYXNzZXMuaWNvbkVtcHR5LCBzdGF0ZS5ob3ZlciAmJiBjbGFzc2VzLmljb25Ib3Zlciwgc3RhdGUuZm9jdXMgJiYgY2xhc3Nlcy5pY29uRm9jdXMsIHN0YXRlLmFjdGl2ZSAmJiBjbGFzc2VzLmljb25BY3RpdmUpXG4gICAgfSwgZW1wdHlJY29uICYmICFzdGF0ZS5maWxsZWQgPyBlbXB0eUljb24gOiBpY29uKTtcblxuICAgIGlmIChyZWFkT25seSkge1xuICAgICAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwic3BhblwiLCBfZXh0ZW5kcyh7XG4gICAgICAgIGtleTogc3RhdGUudmFsdWVcbiAgICAgIH0sIGxhYmVsUHJvcHMpLCBjb250YWluZXIpO1xuICAgIH1cblxuICAgIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChSZWFjdC5GcmFnbWVudCwge1xuICAgICAga2V5OiBzdGF0ZS52YWx1ZVxuICAgIH0sIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwibGFiZWxcIiwgX2V4dGVuZHMoe1xuICAgICAgY2xhc3NOYW1lOiBjbGFzc2VzLmxhYmVsLFxuICAgICAgaHRtbEZvcjogaWRcbiAgICB9LCBsYWJlbFByb3BzKSwgY29udGFpbmVyLCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcInNwYW5cIiwge1xuICAgICAgY2xhc3NOYW1lOiBjbGFzc2VzLnZpc3VhbGx5aGlkZGVuXG4gICAgfSwgZ2V0TGFiZWxUZXh0KHN0YXRlLnZhbHVlKSkpLCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcImlucHV0XCIsIHtcbiAgICAgIG9uRm9jdXM6IGhhbmRsZUZvY3VzLFxuICAgICAgb25CbHVyOiBoYW5kbGVCbHVyLFxuICAgICAgb25DaGFuZ2U6IGhhbmRsZUNoYW5nZSxcbiAgICAgIG9uQ2xpY2s6IGhhbmRsZUNsZWFyLFxuICAgICAgZGlzYWJsZWQ6IGRpc2FibGVkLFxuICAgICAgdmFsdWU6IHN0YXRlLnZhbHVlLFxuICAgICAgaWQ6IGlkLFxuICAgICAgdHlwZTogXCJyYWRpb1wiLFxuICAgICAgbmFtZTogbmFtZSxcbiAgICAgIGNoZWNrZWQ6IHN0YXRlLmNoZWNrZWQsXG4gICAgICBjbGFzc05hbWU6IGNsYXNzZXMudmlzdWFsbHloaWRkZW5cbiAgICB9KSk7XG4gIH07XG5cbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwic3BhblwiLCBfZXh0ZW5kcyh7XG4gICAgcmVmOiBoYW5kbGVSZWYsXG4gICAgb25Nb3VzZU1vdmU6IGhhbmRsZU1vdXNlTW92ZSxcbiAgICBvbk1vdXNlTGVhdmU6IGhhbmRsZU1vdXNlTGVhdmUsXG4gICAgY2xhc3NOYW1lOiBjbHN4KGNsYXNzZXMucm9vdCwgY2xhc3NOYW1lLCBzaXplICE9PSAnbWVkaXVtJyAmJiBjbGFzc2VzW1wic2l6ZVwiLmNvbmNhdChjYXBpdGFsaXplKHNpemUpKV0sIGRpc2FibGVkICYmIGNsYXNzZXMuZGlzYWJsZWQsIGZvY3VzVmlzaWJsZSAmJiBjbGFzc2VzLmZvY3VzVmlzaWJsZSwgcmVhZE9ubHkgJiYgY2xhc3Nlcy5yZWFkT25seSksXG4gICAgcm9sZTogcmVhZE9ubHkgPyAnaW1nJyA6IG51bGwsXG4gICAgXCJhcmlhLWxhYmVsXCI6IHJlYWRPbmx5ID8gZ2V0TGFiZWxUZXh0KHZhbHVlKSA6IG51bGxcbiAgfSwgb3RoZXIpLCBBcnJheS5mcm9tKG5ldyBBcnJheShtYXgpKS5tYXAoZnVuY3Rpb24gKF8sIGluZGV4KSB7XG4gICAgdmFyIGl0ZW1WYWx1ZSA9IGluZGV4ICsgMTtcblxuICAgIGlmIChwcmVjaXNpb24gPCAxKSB7XG4gICAgICB2YXIgaXRlbXMgPSBBcnJheS5mcm9tKG5ldyBBcnJheSgxIC8gcHJlY2lzaW9uKSk7XG4gICAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIsIHtcbiAgICAgICAga2V5OiBpdGVtVmFsdWUsXG4gICAgICAgIGNsYXNzTmFtZTogY2xzeChjbGFzc2VzLmRlY2ltYWwsIGl0ZW1WYWx1ZSA9PT0gTWF0aC5jZWlsKHZhbHVlKSAmJiAoaG92ZXIgIT09IC0xIHx8IGZvY3VzICE9PSAtMSkgJiYgY2xhc3Nlcy5pY29uQWN0aXZlKVxuICAgICAgfSwgaXRlbXMubWFwKGZ1bmN0aW9uICgkLCBpbmRleERlY2ltYWwpIHtcbiAgICAgICAgdmFyIGl0ZW1EZWNpbWFsVmFsdWUgPSByb3VuZFZhbHVlVG9QcmVjaXNpb24oaXRlbVZhbHVlIC0gMSArIChpbmRleERlY2ltYWwgKyAxKSAqIHByZWNpc2lvbiwgcHJlY2lzaW9uKTtcbiAgICAgICAgcmV0dXJuIGl0ZW0oe1xuICAgICAgICAgIHZhbHVlOiBpdGVtRGVjaW1hbFZhbHVlLFxuICAgICAgICAgIGZpbGxlZDogaXRlbURlY2ltYWxWYWx1ZSA8PSB2YWx1ZSxcbiAgICAgICAgICBob3ZlcjogaXRlbURlY2ltYWxWYWx1ZSA8PSBob3ZlcixcbiAgICAgICAgICBmb2N1czogaXRlbURlY2ltYWxWYWx1ZSA8PSBmb2N1cyxcbiAgICAgICAgICBjaGVja2VkOiBpdGVtRGVjaW1hbFZhbHVlID09PSB2YWx1ZVJvdW5kZWRcbiAgICAgICAgfSwge1xuICAgICAgICAgIHN0eWxlOiBpdGVtcy5sZW5ndGggLSAxID09PSBpbmRleERlY2ltYWwgPyB7fSA6IHtcbiAgICAgICAgICAgIHdpZHRoOiBpdGVtRGVjaW1hbFZhbHVlID09PSB2YWx1ZSA/IFwiXCIuY29uY2F0KChpbmRleERlY2ltYWwgKyAxKSAqIHByZWNpc2lvbiAqIDEwMCwgXCIlXCIpIDogJzAlJyxcbiAgICAgICAgICAgIG92ZXJmbG93OiAnaGlkZGVuJyxcbiAgICAgICAgICAgIHpJbmRleDogMSxcbiAgICAgICAgICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnXG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH0pKTtcbiAgICB9XG5cbiAgICByZXR1cm4gaXRlbSh7XG4gICAgICB2YWx1ZTogaXRlbVZhbHVlLFxuICAgICAgYWN0aXZlOiBpdGVtVmFsdWUgPT09IHZhbHVlICYmIChob3ZlciAhPT0gLTEgfHwgZm9jdXMgIT09IC0xKSxcbiAgICAgIGZpbGxlZDogaXRlbVZhbHVlIDw9IHZhbHVlLFxuICAgICAgaG92ZXI6IGl0ZW1WYWx1ZSA8PSBob3ZlcixcbiAgICAgIGZvY3VzOiBpdGVtVmFsdWUgPD0gZm9jdXMsXG4gICAgICBjaGVja2VkOiBpdGVtVmFsdWUgPT09IHZhbHVlUm91bmRlZFxuICAgIH0pO1xuICB9KSwgIXJlYWRPbmx5ICYmICFkaXNhYmxlZCAmJiB2YWx1ZVJvdW5kZWQgPT0gbnVsbCAmJiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChSZWFjdC5GcmFnbWVudCwgbnVsbCwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJpbnB1dFwiLCB7XG4gICAgdmFsdWU6IFwiXCIsXG4gICAgaWQ6IFwiXCIuY29uY2F0KG5hbWUsIFwiLWVtcHR5XCIpLFxuICAgIHR5cGU6IFwicmFkaW9cIixcbiAgICBuYW1lOiBuYW1lLFxuICAgIGRlZmF1bHRDaGVja2VkOiB0cnVlLFxuICAgIGNsYXNzTmFtZTogY2xhc3Nlcy52aXN1YWxseWhpZGRlblxuICB9KSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJsYWJlbFwiLCB7XG4gICAgY2xhc3NOYW1lOiBjbGFzc2VzLnByaXN0aW5lLFxuICAgIGh0bWxGb3I6IFwiXCIuY29uY2F0KG5hbWUsIFwiLWVtcHR5XCIpXG4gIH0sIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwic3BhblwiLCB7XG4gICAgY2xhc3NOYW1lOiBjbGFzc2VzLnZpc3VhbGx5aGlkZGVuXG4gIH0sIGVtcHR5TGFiZWxUZXh0KSkpKTtcbn0pO1xucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gUmF0aW5nLnByb3BUeXBlcyA9IHtcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gV2FybmluZyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAvLyB8IFRoZXNlIFByb3BUeXBlcyBhcmUgZ2VuZXJhdGVkIGZyb20gdGhlIFR5cGVTY3JpcHQgdHlwZSBkZWZpbml0aW9ucyB8XG4gIC8vIHwgICAgIFRvIHVwZGF0ZSB0aGVtIGVkaXQgdGhlIGQudHMgZmlsZSBhbmQgcnVuIFwieWFybiBwcm9wdHlwZXNcIiAgICAgfFxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbiAgLyoqXG4gICAqIE92ZXJyaWRlIG9yIGV4dGVuZCB0aGUgc3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICogU2VlIFtDU1MgQVBJXSgjY3NzKSBiZWxvdyBmb3IgbW9yZSBkZXRhaWxzLlxuICAgKi9cbiAgY2xhc3NlczogUHJvcFR5cGVzLm9iamVjdCxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBUaGUgZGVmYXVsdCB2YWx1ZS4gVXNlIHdoZW4gdGhlIGNvbXBvbmVudCBpcyBub3QgY29udHJvbGxlZC5cbiAgICovXG4gIGRlZmF1bHRWYWx1ZTogUHJvcFR5cGVzLm51bWJlcixcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgcmF0aW5nIHdpbGwgYmUgZGlzYWJsZWQuXG4gICAqL1xuICBkaXNhYmxlZDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIFRoZSBpY29uIHRvIGRpc3BsYXkgd2hlbiBlbXB0eS5cbiAgICovXG4gIGVtcHR5SWNvbjogUHJvcFR5cGVzLm5vZGUsXG5cbiAgLyoqXG4gICAqIFRoZSBsYWJlbCByZWFkIHdoZW4gdGhlIHJhdGluZyBpbnB1dCBpcyBlbXB0eS5cbiAgICovXG4gIGVtcHR5TGFiZWxUZXh0OiBQcm9wVHlwZXMubm9kZSxcblxuICAvKipcbiAgICogQWNjZXB0cyBhIGZ1bmN0aW9uIHdoaWNoIHJldHVybnMgYSBzdHJpbmcgdmFsdWUgdGhhdCBwcm92aWRlcyBhIHVzZXItZnJpZW5kbHkgbmFtZSBmb3IgdGhlIGN1cnJlbnQgdmFsdWUgb2YgdGhlIHJhdGluZy5cbiAgICpcbiAgICogRm9yIGxvY2FsaXphdGlvbiBwdXJwb3NlcywgeW91IGNhbiB1c2UgdGhlIHByb3ZpZGVkIFt0cmFuc2xhdGlvbnNdKC9ndWlkZXMvbG9jYWxpemF0aW9uLykuXG4gICAqXG4gICAqIEBwYXJhbSB7bnVtYmVyfSB2YWx1ZSBUaGUgcmF0aW5nIGxhYmVsJ3MgdmFsdWUgdG8gZm9ybWF0LlxuICAgKiBAcmV0dXJucyB7c3RyaW5nfVxuICAgKi9cbiAgZ2V0TGFiZWxUZXh0OiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogVGhlIGljb24gdG8gZGlzcGxheS5cbiAgICovXG4gIGljb246IFByb3BUeXBlcy5ub2RlLFxuXG4gIC8qKlxuICAgKiBUaGUgY29tcG9uZW50IGNvbnRhaW5pbmcgdGhlIGljb24uXG4gICAqL1xuICBJY29uQ29udGFpbmVyQ29tcG9uZW50OiBQcm9wVHlwZXMuZWxlbWVudFR5cGUsXG5cbiAgLyoqXG4gICAqIE1heGltdW0gcmF0aW5nLlxuICAgKi9cbiAgbWF4OiBQcm9wVHlwZXMubnVtYmVyLFxuXG4gIC8qKlxuICAgKiBUaGUgbmFtZSBhdHRyaWJ1dGUgb2YgdGhlIHJhZGlvIGBpbnB1dGAgZWxlbWVudHMuXG4gICAqIElmIGByZWFkT25seWAgaXMgZmFsc2UsIHRoZSBwcm9wIGlzIHJlcXVpcmVkLFxuICAgKiB0aGlzIGlucHV0IG5hbWVgc2hvdWxkIGJlIHVuaXF1ZSB3aXRoaW4gdGhlIHBhcmVudCBmb3JtLlxuICAgKi9cbiAgbmFtZTogY2hhaW5Qcm9wVHlwZXMoUHJvcFR5cGVzLnN0cmluZywgZnVuY3Rpb24gKHByb3BzKSB7XG4gICAgaWYgKCFwcm9wcy5yZWFkT25seSAmJiAhcHJvcHMubmFtZSkge1xuICAgICAgcmV0dXJuIG5ldyBFcnJvcihbJ01hdGVyaWFsLVVJOiBUaGUgcHJvcCBgbmFtZWAgaXMgcmVxdWlyZWQgKHdoZW4gYHJlYWRPbmx5YCBpcyBmYWxzZSkuJywgJ0FkZGl0aW9uYWxseSwgdGhlIGlucHV0IG5hbWUgc2hvdWxkIGJlIHVuaXF1ZSB3aXRoaW4gdGhlIHBhcmVudCBmb3JtLiddLmpvaW4oJ1xcbicpKTtcbiAgICB9XG5cbiAgICByZXR1cm4gbnVsbDtcbiAgfSksXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIHdoZW4gdGhlIHZhbHVlIGNoYW5nZXMuXG4gICAqXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBldmVudCBUaGUgZXZlbnQgc291cmNlIG9mIHRoZSBjYWxsYmFjay5cbiAgICogQHBhcmFtIHtudW1iZXJ9IHZhbHVlIFRoZSBuZXcgdmFsdWUuXG4gICAqL1xuICBvbkNoYW5nZTogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGZ1bmN0aW9uIHRoYXQgaXMgZmlyZWQgd2hlbiB0aGUgaG92ZXIgc3RhdGUgY2hhbmdlcy5cbiAgICpcbiAgICogQHBhcmFtIHtvYmplY3R9IGV2ZW50IFRoZSBldmVudCBzb3VyY2Ugb2YgdGhlIGNhbGxiYWNrLlxuICAgKiBAcGFyYW0ge251bWJlcn0gdmFsdWUgVGhlIG5ldyB2YWx1ZS5cbiAgICovXG4gIG9uQ2hhbmdlQWN0aXZlOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgb25Nb3VzZUxlYXZlOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgb25Nb3VzZU1vdmU6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBUaGUgbWluaW11bSBpbmNyZW1lbnQgdmFsdWUgY2hhbmdlIGFsbG93ZWQuXG4gICAqL1xuICBwcmVjaXNpb246IGNoYWluUHJvcFR5cGVzKFByb3BUeXBlcy5udW1iZXIsIGZ1bmN0aW9uIChwcm9wcykge1xuICAgIGlmIChwcm9wcy5wcmVjaXNpb24gPCAwLjEpIHtcbiAgICAgIHJldHVybiBuZXcgRXJyb3IoWydNYXRlcmlhbC1VSTogVGhlIHByb3AgYHByZWNpc2lvbmAgc2hvdWxkIGJlIGFib3ZlIDAuMS4nLCAnQSB2YWx1ZSBiZWxvdyB0aGlzIGxpbWl0IGhhcyBhbiBpbXBlcmNlcHRpYmxlIGltcGFjdC4nXS5qb2luKCdcXG4nKSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIG51bGw7XG4gIH0pLFxuXG4gIC8qKlxuICAgKiBSZW1vdmVzIGFsbCBob3ZlciBlZmZlY3RzIGFuZCBwb2ludGVyIGV2ZW50cy5cbiAgICovXG4gIHJlYWRPbmx5OiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogVGhlIHNpemUgb2YgdGhlIHJhdGluZy5cbiAgICovXG4gIHNpemU6IFByb3BUeXBlcy5vbmVPZihbJ2xhcmdlJywgJ21lZGl1bScsICdzbWFsbCddKSxcblxuICAvKipcbiAgICogVGhlIHJhdGluZyB2YWx1ZS5cbiAgICovXG4gIHZhbHVlOiBQcm9wVHlwZXMubnVtYmVyXG59IDogdm9pZCAwO1xuZXhwb3J0IGRlZmF1bHQgd2l0aFN0eWxlcyhzdHlsZXMsIHtcbiAgbmFtZTogJ011aVJhdGluZydcbn0pKFJhdGluZyk7IiwiLy8gU291cmNlIGZyb20gaHR0cHM6Ly9naXRodWIuY29tL2FsaXRhaGVyaS9ub3JtYWxpemUtc2Nyb2xsLWxlZnRcbnZhciBjYWNoZWRUeXBlO1xuLyoqXG4gKiBCYXNlZCBvbiB0aGUganF1ZXJ5IHBsdWdpbiBodHRwczovL2dpdGh1Yi5jb20vb3RocmVlL2pxdWVyeS5ydGwtc2Nyb2xsLXR5cGVcbiAqXG4gKiBUeXBlcyBvZiBzY3JvbGxMZWZ0LCBhc3NpbWluZyBzY3JvbGxXaWR0aD0xMDAgYW5kIGRpcmVjdGlvbiBpcyBydGwuXG4gKlxuICogQnJvd3NlciAgICAgICAgfCBUeXBlICAgICAgICAgIHwgPC0gTW9zdCBMZWZ0IHwgTW9zdCBSaWdodCAtPiB8IEluaXRpYWxcbiAqIC0tLS0tLS0tLS0tLS0tIHwgLS0tLS0tLS0tLS0tLSB8IC0tLS0tLS0tLS0tLSB8IC0tLS0tLS0tLS0tLS0gfCAtLS0tLS0tXG4gKiBXZWJLaXQgICAgICAgICB8IGRlZmF1bHQgICAgICAgfCAwICAgICAgICAgICAgfCAxMDAgICAgICAgICAgIHwgMTAwXG4gKiBGaXJlZm94L09wZXJhICB8IG5lZ2F0aXZlICAgICAgfCAtMTAwICAgICAgICAgfCAwICAgICAgICAgICAgIHwgMFxuICogSUUvRWRnZSAgICAgICAgfCByZXZlcnNlICAgICAgIHwgMTAwICAgICAgICAgIHwgMCAgICAgICAgICAgICB8IDBcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gZGV0ZWN0U2Nyb2xsVHlwZSgpIHtcbiAgaWYgKGNhY2hlZFR5cGUpIHtcbiAgICByZXR1cm4gY2FjaGVkVHlwZTtcbiAgfVxuXG4gIHZhciBkdW1teSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICBkdW1teS5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZSgnQUJDRCcpKTtcbiAgZHVtbXkuZGlyID0gJ3J0bCc7XG4gIGR1bW15LnN0eWxlLmZvbnRTaXplID0gJzE0cHgnO1xuICBkdW1teS5zdHlsZS53aWR0aCA9ICc0cHgnO1xuICBkdW1teS5zdHlsZS5oZWlnaHQgPSAnMXB4JztcbiAgZHVtbXkuc3R5bGUucG9zaXRpb24gPSAnYWJzb2x1dGUnO1xuICBkdW1teS5zdHlsZS50b3AgPSAnLTEwMDBweCc7XG4gIGR1bW15LnN0eWxlLm92ZXJmbG93ID0gJ3Njcm9sbCc7XG4gIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoZHVtbXkpO1xuICBjYWNoZWRUeXBlID0gJ3JldmVyc2UnO1xuXG4gIGlmIChkdW1teS5zY3JvbGxMZWZ0ID4gMCkge1xuICAgIGNhY2hlZFR5cGUgPSAnZGVmYXVsdCc7XG4gIH0gZWxzZSB7XG4gICAgZHVtbXkuc2Nyb2xsTGVmdCA9IDE7XG5cbiAgICBpZiAoZHVtbXkuc2Nyb2xsTGVmdCA9PT0gMCkge1xuICAgICAgY2FjaGVkVHlwZSA9ICduZWdhdGl2ZSc7XG4gICAgfVxuICB9XG5cbiAgZG9jdW1lbnQuYm9keS5yZW1vdmVDaGlsZChkdW1teSk7XG4gIHJldHVybiBjYWNoZWRUeXBlO1xufSAvLyBCYXNlZCBvbiBodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL2EvMjQzOTQzNzZcblxuZXhwb3J0IGZ1bmN0aW9uIGdldE5vcm1hbGl6ZWRTY3JvbGxMZWZ0KGVsZW1lbnQsIGRpcmVjdGlvbikge1xuICB2YXIgc2Nyb2xsTGVmdCA9IGVsZW1lbnQuc2Nyb2xsTGVmdDsgLy8gUGVyZm9ybSB0aGUgY2FsY3VsYXRpb25zIG9ubHkgd2hlbiBkaXJlY3Rpb24gaXMgcnRsIHRvIGF2b2lkIG1lc3NpbmcgdXAgdGhlIGx0ciBiYWhhdmlvclxuXG4gIGlmIChkaXJlY3Rpb24gIT09ICdydGwnKSB7XG4gICAgcmV0dXJuIHNjcm9sbExlZnQ7XG4gIH1cblxuICB2YXIgdHlwZSA9IGRldGVjdFNjcm9sbFR5cGUoKTtcblxuICBzd2l0Y2ggKHR5cGUpIHtcbiAgICBjYXNlICduZWdhdGl2ZSc6XG4gICAgICByZXR1cm4gZWxlbWVudC5zY3JvbGxXaWR0aCAtIGVsZW1lbnQuY2xpZW50V2lkdGggKyBzY3JvbGxMZWZ0O1xuXG4gICAgY2FzZSAncmV2ZXJzZSc6XG4gICAgICByZXR1cm4gZWxlbWVudC5zY3JvbGxXaWR0aCAtIGVsZW1lbnQuY2xpZW50V2lkdGggLSBzY3JvbGxMZWZ0O1xuXG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiBzY3JvbGxMZWZ0O1xuICB9XG59IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc1wiO1xuaW1wb3J0IF9kZWZpbmVQcm9wZXJ0eSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZGVmaW5lUHJvcGVydHlcIjtcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgY2xzeCBmcm9tICdjbHN4JztcbmltcG9ydCB3aXRoU3R5bGVzIGZyb20gJy4uL3N0eWxlcy93aXRoU3R5bGVzJztcbmltcG9ydCBjYXBpdGFsaXplIGZyb20gJy4uL3V0aWxzL2NhcGl0YWxpemUnO1xuZXhwb3J0IHZhciBzdHlsZXMgPSBmdW5jdGlvbiBzdHlsZXModGhlbWUpIHtcbiAgcmV0dXJuIHtcbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50LiAqL1xuICAgIHJvb3Q6IF9kZWZpbmVQcm9wZXJ0eSh7XG4gICAgICB3aWR0aDogJzEwMCUnLFxuICAgICAgbWFyZ2luTGVmdDogJ2F1dG8nLFxuICAgICAgYm94U2l6aW5nOiAnYm9yZGVyLWJveCcsXG4gICAgICBtYXJnaW5SaWdodDogJ2F1dG8nLFxuICAgICAgcGFkZGluZ0xlZnQ6IHRoZW1lLnNwYWNpbmcoMiksXG4gICAgICBwYWRkaW5nUmlnaHQ6IHRoZW1lLnNwYWNpbmcoMiksXG4gICAgICBkaXNwbGF5OiAnYmxvY2snXG4gICAgfSwgdGhlbWUuYnJlYWtwb2ludHMudXAoJ3NtJyksIHtcbiAgICAgIHBhZGRpbmdMZWZ0OiB0aGVtZS5zcGFjaW5nKDMpLFxuICAgICAgcGFkZGluZ1JpZ2h0OiB0aGVtZS5zcGFjaW5nKDMpXG4gICAgfSksXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBkaXNhYmxlR3V0dGVycz17dHJ1ZX1gLiAqL1xuICAgIGRpc2FibGVHdXR0ZXJzOiB7XG4gICAgICBwYWRkaW5nTGVmdDogMCxcbiAgICAgIHBhZGRpbmdSaWdodDogMFxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBmaXhlZD17dHJ1ZX1gLiAqL1xuICAgIGZpeGVkOiBPYmplY3Qua2V5cyh0aGVtZS5icmVha3BvaW50cy52YWx1ZXMpLnJlZHVjZShmdW5jdGlvbiAoYWNjLCBicmVha3BvaW50KSB7XG4gICAgICB2YXIgdmFsdWUgPSB0aGVtZS5icmVha3BvaW50cy52YWx1ZXNbYnJlYWtwb2ludF07XG5cbiAgICAgIGlmICh2YWx1ZSAhPT0gMCkge1xuICAgICAgICBhY2NbdGhlbWUuYnJlYWtwb2ludHMudXAoYnJlYWtwb2ludCldID0ge1xuICAgICAgICAgIG1heFdpZHRoOiB2YWx1ZVxuICAgICAgICB9O1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gYWNjO1xuICAgIH0sIHt9KSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYG1heFdpZHRoPVwieHNcImAuICovXG4gICAgbWF4V2lkdGhYczogX2RlZmluZVByb3BlcnR5KHt9LCB0aGVtZS5icmVha3BvaW50cy51cCgneHMnKSwge1xuICAgICAgbWF4V2lkdGg6IE1hdGgubWF4KHRoZW1lLmJyZWFrcG9pbnRzLnZhbHVlcy54cywgNDQ0KVxuICAgIH0pLFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgbWF4V2lkdGg9XCJzbVwiYC4gKi9cbiAgICBtYXhXaWR0aFNtOiBfZGVmaW5lUHJvcGVydHkoe30sIHRoZW1lLmJyZWFrcG9pbnRzLnVwKCdzbScpLCB7XG4gICAgICBtYXhXaWR0aDogdGhlbWUuYnJlYWtwb2ludHMudmFsdWVzLnNtXG4gICAgfSksXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBtYXhXaWR0aD1cIm1kXCJgLiAqL1xuICAgIG1heFdpZHRoTWQ6IF9kZWZpbmVQcm9wZXJ0eSh7fSwgdGhlbWUuYnJlYWtwb2ludHMudXAoJ21kJyksIHtcbiAgICAgIG1heFdpZHRoOiB0aGVtZS5icmVha3BvaW50cy52YWx1ZXMubWRcbiAgICB9KSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYG1heFdpZHRoPVwibGdcImAuICovXG4gICAgbWF4V2lkdGhMZzogX2RlZmluZVByb3BlcnR5KHt9LCB0aGVtZS5icmVha3BvaW50cy51cCgnbGcnKSwge1xuICAgICAgbWF4V2lkdGg6IHRoZW1lLmJyZWFrcG9pbnRzLnZhbHVlcy5sZ1xuICAgIH0pLFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgbWF4V2lkdGg9XCJ4bFwiYC4gKi9cbiAgICBtYXhXaWR0aFhsOiBfZGVmaW5lUHJvcGVydHkoe30sIHRoZW1lLmJyZWFrcG9pbnRzLnVwKCd4bCcpLCB7XG4gICAgICBtYXhXaWR0aDogdGhlbWUuYnJlYWtwb2ludHMudmFsdWVzLnhsXG4gICAgfSlcbiAgfTtcbn07XG52YXIgQ29udGFpbmVyID0gLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gQ29udGFpbmVyKHByb3BzLCByZWYpIHtcbiAgdmFyIGNsYXNzZXMgPSBwcm9wcy5jbGFzc2VzLFxuICAgICAgY2xhc3NOYW1lID0gcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgX3Byb3BzJGNvbXBvbmVudCA9IHByb3BzLmNvbXBvbmVudCxcbiAgICAgIENvbXBvbmVudCA9IF9wcm9wcyRjb21wb25lbnQgPT09IHZvaWQgMCA/ICdkaXYnIDogX3Byb3BzJGNvbXBvbmVudCxcbiAgICAgIF9wcm9wcyRkaXNhYmxlR3V0dGVycyA9IHByb3BzLmRpc2FibGVHdXR0ZXJzLFxuICAgICAgZGlzYWJsZUd1dHRlcnMgPSBfcHJvcHMkZGlzYWJsZUd1dHRlcnMgPT09IHZvaWQgMCA/IGZhbHNlIDogX3Byb3BzJGRpc2FibGVHdXR0ZXJzLFxuICAgICAgX3Byb3BzJGZpeGVkID0gcHJvcHMuZml4ZWQsXG4gICAgICBmaXhlZCA9IF9wcm9wcyRmaXhlZCA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcHJvcHMkZml4ZWQsXG4gICAgICBfcHJvcHMkbWF4V2lkdGggPSBwcm9wcy5tYXhXaWR0aCxcbiAgICAgIG1heFdpZHRoID0gX3Byb3BzJG1heFdpZHRoID09PSB2b2lkIDAgPyAnbGcnIDogX3Byb3BzJG1heFdpZHRoLFxuICAgICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMocHJvcHMsIFtcImNsYXNzZXNcIiwgXCJjbGFzc05hbWVcIiwgXCJjb21wb25lbnRcIiwgXCJkaXNhYmxlR3V0dGVyc1wiLCBcImZpeGVkXCIsIFwibWF4V2lkdGhcIl0pO1xuXG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChDb21wb25lbnQsIF9leHRlbmRzKHtcbiAgICBjbGFzc05hbWU6IGNsc3goY2xhc3Nlcy5yb290LCBjbGFzc05hbWUsIGZpeGVkICYmIGNsYXNzZXMuZml4ZWQsIGRpc2FibGVHdXR0ZXJzICYmIGNsYXNzZXMuZGlzYWJsZUd1dHRlcnMsIG1heFdpZHRoICE9PSBmYWxzZSAmJiBjbGFzc2VzW1wibWF4V2lkdGhcIi5jb25jYXQoY2FwaXRhbGl6ZShTdHJpbmcobWF4V2lkdGgpKSldKSxcbiAgICByZWY6IHJlZlxuICB9LCBvdGhlcikpO1xufSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBDb250YWluZXIucHJvcFR5cGVzID0ge1xuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBXYXJuaW5nIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIC8vIHwgVGhlc2UgUHJvcFR5cGVzIGFyZSBnZW5lcmF0ZWQgZnJvbSB0aGUgVHlwZVNjcmlwdCB0eXBlIGRlZmluaXRpb25zIHxcbiAgLy8gfCAgICAgVG8gdXBkYXRlIHRoZW0gZWRpdCB0aGUgZC50cyBmaWxlIGFuZCBydW4gXCJ5YXJuIHByb3B0eXBlc1wiICAgICB8XG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2hpbGRyZW46IFByb3BUeXBlc1xuICAvKiBAdHlwZXNjcmlwdC10by1wcm9wdHlwZXMtaWdub3JlICovXG4gIC5ub2RlLmlzUmVxdWlyZWQsXG5cbiAgLyoqXG4gICAqIE92ZXJyaWRlIG9yIGV4dGVuZCB0aGUgc3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICogU2VlIFtDU1MgQVBJXSgjY3NzKSBiZWxvdyBmb3IgbW9yZSBkZXRhaWxzLlxuICAgKi9cbiAgY2xhc3NlczogUHJvcFR5cGVzLm9iamVjdCxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBUaGUgY29tcG9uZW50IHVzZWQgZm9yIHRoZSByb290IG5vZGUuXG4gICAqIEVpdGhlciBhIHN0cmluZyB0byB1c2UgYSBIVE1MIGVsZW1lbnQgb3IgYSBjb21wb25lbnQuXG4gICAqL1xuICBjb21wb25lbnQ6IFByb3BUeXBlc1xuICAvKiBAdHlwZXNjcmlwdC10by1wcm9wdHlwZXMtaWdub3JlICovXG4gIC5lbGVtZW50VHlwZSxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgbGVmdCBhbmQgcmlnaHQgcGFkZGluZyBpcyByZW1vdmVkLlxuICAgKi9cbiAgZGlzYWJsZUd1dHRlcnM6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBTZXQgdGhlIG1heC13aWR0aCB0byBtYXRjaCB0aGUgbWluLXdpZHRoIG9mIHRoZSBjdXJyZW50IGJyZWFrcG9pbnQuXG4gICAqIFRoaXMgaXMgdXNlZnVsIGlmIHlvdSdkIHByZWZlciB0byBkZXNpZ24gZm9yIGEgZml4ZWQgc2V0IG9mIHNpemVzXG4gICAqIGluc3RlYWQgb2YgdHJ5aW5nIHRvIGFjY29tbW9kYXRlIGEgZnVsbHkgZmx1aWQgdmlld3BvcnQuXG4gICAqIEl0J3MgZmx1aWQgYnkgZGVmYXVsdC5cbiAgICovXG4gIGZpeGVkOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogRGV0ZXJtaW5lIHRoZSBtYXgtd2lkdGggb2YgdGhlIGNvbnRhaW5lci5cbiAgICogVGhlIGNvbnRhaW5lciB3aWR0aCBncm93cyB3aXRoIHRoZSBzaXplIG9mIHRoZSBzY3JlZW4uXG4gICAqIFNldCB0byBgZmFsc2VgIHRvIGRpc2FibGUgYG1heFdpZHRoYC5cbiAgICovXG4gIG1heFdpZHRoOiBQcm9wVHlwZXMub25lT2YoWydsZycsICdtZCcsICdzbScsICd4bCcsICd4cycsIGZhbHNlXSlcbn0gOiB2b2lkIDA7XG5leHBvcnQgZGVmYXVsdCB3aXRoU3R5bGVzKHN0eWxlcywge1xuICBuYW1lOiAnTXVpQ29udGFpbmVyJ1xufSkoQ29udGFpbmVyKTsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzXCI7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGNsc3ggZnJvbSAnY2xzeCc7XG5pbXBvcnQgd2l0aFN0eWxlcyBmcm9tICcuLi9zdHlsZXMvd2l0aFN0eWxlcyc7XG5pbXBvcnQgY2FwaXRhbGl6ZSBmcm9tICcuLi91dGlscy9jYXBpdGFsaXplJztcbmltcG9ydCBQYXBlciBmcm9tICcuLi9QYXBlcic7XG5leHBvcnQgdmFyIHN0eWxlcyA9IGZ1bmN0aW9uIHN0eWxlcyh0aGVtZSkge1xuICB2YXIgYmFja2dyb3VuZENvbG9yRGVmYXVsdCA9IHRoZW1lLnBhbGV0dGUudHlwZSA9PT0gJ2xpZ2h0JyA/IHRoZW1lLnBhbGV0dGUuZ3JleVsxMDBdIDogdGhlbWUucGFsZXR0ZS5ncmV5WzkwMF07XG4gIHJldHVybiB7XG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudC4gKi9cbiAgICByb290OiB7XG4gICAgICBkaXNwbGF5OiAnZmxleCcsXG4gICAgICBmbGV4RGlyZWN0aW9uOiAnY29sdW1uJyxcbiAgICAgIHdpZHRoOiAnMTAwJScsXG4gICAgICBib3hTaXppbmc6ICdib3JkZXItYm94JyxcbiAgICAgIC8vIFByZXZlbnQgcGFkZGluZyBpc3N1ZSB3aXRoIHRoZSBNb2RhbCBhbmQgZml4ZWQgcG9zaXRpb25lZCBBcHBCYXIuXG4gICAgICB6SW5kZXg6IHRoZW1lLnpJbmRleC5hcHBCYXIsXG4gICAgICBmbGV4U2hyaW5rOiAwXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYHBvc2l0aW9uPVwiZml4ZWRcImAuICovXG4gICAgcG9zaXRpb25GaXhlZDoge1xuICAgICAgcG9zaXRpb246ICdmaXhlZCcsXG4gICAgICB0b3A6IDAsXG4gICAgICBsZWZ0OiAnYXV0bycsXG4gICAgICByaWdodDogMCxcbiAgICAgICdAbWVkaWEgcHJpbnQnOiB7XG4gICAgICAgIC8vIFByZXZlbnQgdGhlIGFwcCBiYXIgdG8gYmUgdmlzaWJsZSBvbiBlYWNoIHByaW50ZWQgcGFnZS5cbiAgICAgICAgcG9zaXRpb246ICdhYnNvbHV0ZSdcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgcG9zaXRpb249XCJhYnNvbHV0ZVwiYC4gKi9cbiAgICBwb3NpdGlvbkFic29sdXRlOiB7XG4gICAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICAgIHRvcDogMCxcbiAgICAgIGxlZnQ6ICdhdXRvJyxcbiAgICAgIHJpZ2h0OiAwXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYHBvc2l0aW9uPVwic3RpY2t5XCJgLiAqL1xuICAgIHBvc2l0aW9uU3RpY2t5OiB7XG4gICAgICAvLyDimqDvuI8gc3RpY2t5IGlzIG5vdCBzdXBwb3J0ZWQgYnkgSUUgMTEuXG4gICAgICBwb3NpdGlvbjogJ3N0aWNreScsXG4gICAgICB0b3A6IDAsXG4gICAgICBsZWZ0OiAnYXV0bycsXG4gICAgICByaWdodDogMFxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBwb3NpdGlvbj1cInN0YXRpY1wiYC4gKi9cbiAgICBwb3NpdGlvblN0YXRpYzoge1xuICAgICAgcG9zaXRpb246ICdzdGF0aWMnXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYHBvc2l0aW9uPVwicmVsYXRpdmVcImAuICovXG4gICAgcG9zaXRpb25SZWxhdGl2ZToge1xuICAgICAgcG9zaXRpb246ICdyZWxhdGl2ZSdcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgY29sb3I9XCJkZWZhdWx0XCJgLiAqL1xuICAgIGNvbG9yRGVmYXVsdDoge1xuICAgICAgYmFja2dyb3VuZENvbG9yOiBiYWNrZ3JvdW5kQ29sb3JEZWZhdWx0LFxuICAgICAgY29sb3I6IHRoZW1lLnBhbGV0dGUuZ2V0Q29udHJhc3RUZXh0KGJhY2tncm91bmRDb2xvckRlZmF1bHQpXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGNvbG9yPVwicHJpbWFyeVwiYC4gKi9cbiAgICBjb2xvclByaW1hcnk6IHtcbiAgICAgIGJhY2tncm91bmRDb2xvcjogdGhlbWUucGFsZXR0ZS5wcmltYXJ5Lm1haW4sXG4gICAgICBjb2xvcjogdGhlbWUucGFsZXR0ZS5wcmltYXJ5LmNvbnRyYXN0VGV4dFxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBjb2xvcj1cInNlY29uZGFyeVwiYC4gKi9cbiAgICBjb2xvclNlY29uZGFyeToge1xuICAgICAgYmFja2dyb3VuZENvbG9yOiB0aGVtZS5wYWxldHRlLnNlY29uZGFyeS5tYWluLFxuICAgICAgY29sb3I6IHRoZW1lLnBhbGV0dGUuc2Vjb25kYXJ5LmNvbnRyYXN0VGV4dFxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBjb2xvcj1cImluaGVyaXRcImAuICovXG4gICAgY29sb3JJbmhlcml0OiB7XG4gICAgICBjb2xvcjogJ2luaGVyaXQnXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGNvbG9yPVwidHJhbnNwYXJlbnRcImAuICovXG4gICAgY29sb3JUcmFuc3BhcmVudDoge1xuICAgICAgYmFja2dyb3VuZENvbG9yOiAndHJhbnNwYXJlbnQnLFxuICAgICAgY29sb3I6ICdpbmhlcml0J1xuICAgIH1cbiAgfTtcbn07XG52YXIgQXBwQmFyID0gLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gQXBwQmFyKHByb3BzLCByZWYpIHtcbiAgdmFyIGNsYXNzZXMgPSBwcm9wcy5jbGFzc2VzLFxuICAgICAgY2xhc3NOYW1lID0gcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgX3Byb3BzJGNvbG9yID0gcHJvcHMuY29sb3IsXG4gICAgICBjb2xvciA9IF9wcm9wcyRjb2xvciA9PT0gdm9pZCAwID8gJ3ByaW1hcnknIDogX3Byb3BzJGNvbG9yLFxuICAgICAgX3Byb3BzJHBvc2l0aW9uID0gcHJvcHMucG9zaXRpb24sXG4gICAgICBwb3NpdGlvbiA9IF9wcm9wcyRwb3NpdGlvbiA9PT0gdm9pZCAwID8gJ2ZpeGVkJyA6IF9wcm9wcyRwb3NpdGlvbixcbiAgICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKHByb3BzLCBbXCJjbGFzc2VzXCIsIFwiY2xhc3NOYW1lXCIsIFwiY29sb3JcIiwgXCJwb3NpdGlvblwiXSk7XG5cbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFBhcGVyLCBfZXh0ZW5kcyh7XG4gICAgc3F1YXJlOiB0cnVlLFxuICAgIGNvbXBvbmVudDogXCJoZWFkZXJcIixcbiAgICBlbGV2YXRpb246IDQsXG4gICAgY2xhc3NOYW1lOiBjbHN4KGNsYXNzZXMucm9vdCwgY2xhc3Nlc1tcInBvc2l0aW9uXCIuY29uY2F0KGNhcGl0YWxpemUocG9zaXRpb24pKV0sIGNsYXNzZXNbXCJjb2xvclwiLmNvbmNhdChjYXBpdGFsaXplKGNvbG9yKSldLCBjbGFzc05hbWUsIHBvc2l0aW9uID09PSAnZml4ZWQnICYmICdtdWktZml4ZWQnKSxcbiAgICByZWY6IHJlZlxuICB9LCBvdGhlcikpO1xufSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBBcHBCYXIucHJvcFR5cGVzID0ge1xuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBXYXJuaW5nIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIC8vIHwgVGhlc2UgUHJvcFR5cGVzIGFyZSBnZW5lcmF0ZWQgZnJvbSB0aGUgVHlwZVNjcmlwdCB0eXBlIGRlZmluaXRpb25zIHxcbiAgLy8gfCAgICAgVG8gdXBkYXRlIHRoZW0gZWRpdCB0aGUgZC50cyBmaWxlIGFuZCBydW4gXCJ5YXJuIHByb3B0eXBlc1wiICAgICB8XG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuICAvKipcbiAgICogVGhlIGNvbnRlbnQgb2YgdGhlIGNvbXBvbmVudC5cbiAgICovXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcblxuICAvKipcbiAgICogT3ZlcnJpZGUgb3IgZXh0ZW5kIHRoZSBzdHlsZXMgYXBwbGllZCB0byB0aGUgY29tcG9uZW50LlxuICAgKiBTZWUgW0NTUyBBUEldKCNjc3MpIGJlbG93IGZvciBtb3JlIGRldGFpbHMuXG4gICAqL1xuICBjbGFzc2VzOiBQcm9wVHlwZXMub2JqZWN0LFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIFRoZSBjb2xvciBvZiB0aGUgY29tcG9uZW50LiBJdCBzdXBwb3J0cyB0aG9zZSB0aGVtZSBjb2xvcnMgdGhhdCBtYWtlIHNlbnNlIGZvciB0aGlzIGNvbXBvbmVudC5cbiAgICovXG4gIGNvbG9yOiBQcm9wVHlwZXMub25lT2YoWydkZWZhdWx0JywgJ2luaGVyaXQnLCAncHJpbWFyeScsICdzZWNvbmRhcnknLCAndHJhbnNwYXJlbnQnXSksXG5cbiAgLyoqXG4gICAqIFRoZSBwb3NpdGlvbmluZyB0eXBlLiBUaGUgYmVoYXZpb3Igb2YgdGhlIGRpZmZlcmVudCBvcHRpb25zIGlzIGRlc2NyaWJlZFxuICAgKiBbaW4gdGhlIE1ETiB3ZWIgZG9jc10oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9MZWFybi9DU1MvQ1NTX2xheW91dC9Qb3NpdGlvbmluZykuXG4gICAqIE5vdGU6IGBzdGlja3lgIGlzIG5vdCB1bml2ZXJzYWxseSBzdXBwb3J0ZWQgYW5kIHdpbGwgZmFsbCBiYWNrIHRvIGBzdGF0aWNgIHdoZW4gdW5hdmFpbGFibGUuXG4gICAqL1xuICBwb3NpdGlvbjogUHJvcFR5cGVzLm9uZU9mKFsnYWJzb2x1dGUnLCAnZml4ZWQnLCAncmVsYXRpdmUnLCAnc3RhdGljJywgJ3N0aWNreSddKVxufSA6IHZvaWQgMDtcbmV4cG9ydCBkZWZhdWx0IHdpdGhTdHlsZXMoc3R5bGVzLCB7XG4gIG5hbWU6ICdNdWlBcHBCYXInXG59KShBcHBCYXIpOyIsImZ1bmN0aW9uIGVhc2VJbk91dFNpbih0aW1lKSB7XG4gIHJldHVybiAoMSArIE1hdGguc2luKE1hdGguUEkgKiB0aW1lIC0gTWF0aC5QSSAvIDIpKSAvIDI7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGFuaW1hdGUocHJvcGVydHksIGVsZW1lbnQsIHRvKSB7XG4gIHZhciBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDMgJiYgYXJndW1lbnRzWzNdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbM10gOiB7fTtcbiAgdmFyIGNiID0gYXJndW1lbnRzLmxlbmd0aCA+IDQgJiYgYXJndW1lbnRzWzRdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbNF0gOiBmdW5jdGlvbiAoKSB7fTtcbiAgdmFyIF9vcHRpb25zJGVhc2UgPSBvcHRpb25zLmVhc2UsXG4gICAgICBlYXNlID0gX29wdGlvbnMkZWFzZSA9PT0gdm9pZCAwID8gZWFzZUluT3V0U2luIDogX29wdGlvbnMkZWFzZSxcbiAgICAgIF9vcHRpb25zJGR1cmF0aW9uID0gb3B0aW9ucy5kdXJhdGlvbixcbiAgICAgIGR1cmF0aW9uID0gX29wdGlvbnMkZHVyYXRpb24gPT09IHZvaWQgMCA/IDMwMCA6IF9vcHRpb25zJGR1cmF0aW9uO1xuICB2YXIgc3RhcnQgPSBudWxsO1xuICB2YXIgZnJvbSA9IGVsZW1lbnRbcHJvcGVydHldO1xuICB2YXIgY2FuY2VsbGVkID0gZmFsc2U7XG5cbiAgdmFyIGNhbmNlbCA9IGZ1bmN0aW9uIGNhbmNlbCgpIHtcbiAgICBjYW5jZWxsZWQgPSB0cnVlO1xuICB9O1xuXG4gIHZhciBzdGVwID0gZnVuY3Rpb24gc3RlcCh0aW1lc3RhbXApIHtcbiAgICBpZiAoY2FuY2VsbGVkKSB7XG4gICAgICBjYihuZXcgRXJyb3IoJ0FuaW1hdGlvbiBjYW5jZWxsZWQnKSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKHN0YXJ0ID09PSBudWxsKSB7XG4gICAgICBzdGFydCA9IHRpbWVzdGFtcDtcbiAgICB9XG5cbiAgICB2YXIgdGltZSA9IE1hdGgubWluKDEsICh0aW1lc3RhbXAgLSBzdGFydCkgLyBkdXJhdGlvbik7XG4gICAgZWxlbWVudFtwcm9wZXJ0eV0gPSBlYXNlKHRpbWUpICogKHRvIC0gZnJvbSkgKyBmcm9tO1xuXG4gICAgaWYgKHRpbWUgPj0gMSkge1xuICAgICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgY2IobnVsbCk7XG4gICAgICB9KTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoc3RlcCk7XG4gIH07XG5cbiAgaWYgKGZyb20gPT09IHRvKSB7XG4gICAgY2IobmV3IEVycm9yKCdFbGVtZW50IGFscmVhZHkgYXQgdGFyZ2V0IHBvc2l0aW9uJykpO1xuICAgIHJldHVybiBjYW5jZWw7XG4gIH1cblxuICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoc3RlcCk7XG4gIHJldHVybiBjYW5jZWw7XG59IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc1wiO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBkZWJvdW5jZSBmcm9tICcuLi91dGlscy9kZWJvdW5jZSc7XG52YXIgc3R5bGVzID0ge1xuICB3aWR0aDogOTksXG4gIGhlaWdodDogOTksXG4gIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICB0b3A6IC05OTk5LFxuICBvdmVyZmxvdzogJ3Njcm9sbCdcbn07XG4vKipcbiAqIEBpZ25vcmUgLSBpbnRlcm5hbCBjb21wb25lbnQuXG4gKiBUaGUgY29tcG9uZW50IG9yaWdpbmF0ZXMgZnJvbSBodHRwczovL2dpdGh1Yi5jb20vU1RPUklTL3JlYWN0LXNjcm9sbGJhci1zaXplLlxuICogSXQgaGFzIGJlZW4gbW92ZWQgaW50byB0aGUgY29yZSBpbiBvcmRlciB0byBtaW5pbWl6ZSB0aGUgYnVuZGxlIHNpemUuXG4gKi9cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gU2Nyb2xsYmFyU2l6ZShwcm9wcykge1xuICB2YXIgb25DaGFuZ2UgPSBwcm9wcy5vbkNoYW5nZSxcbiAgICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKHByb3BzLCBbXCJvbkNoYW5nZVwiXSk7XG5cbiAgdmFyIHNjcm9sbGJhckhlaWdodCA9IFJlYWN0LnVzZVJlZigpO1xuICB2YXIgbm9kZVJlZiA9IFJlYWN0LnVzZVJlZihudWxsKTtcblxuICB2YXIgc2V0TWVhc3VyZW1lbnRzID0gZnVuY3Rpb24gc2V0TWVhc3VyZW1lbnRzKCkge1xuICAgIHNjcm9sbGJhckhlaWdodC5jdXJyZW50ID0gbm9kZVJlZi5jdXJyZW50Lm9mZnNldEhlaWdodCAtIG5vZGVSZWYuY3VycmVudC5jbGllbnRIZWlnaHQ7XG4gIH07XG5cbiAgUmVhY3QudXNlRWZmZWN0KGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgaGFuZGxlUmVzaXplID0gZGVib3VuY2UoZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIHByZXZIZWlnaHQgPSBzY3JvbGxiYXJIZWlnaHQuY3VycmVudDtcbiAgICAgIHNldE1lYXN1cmVtZW50cygpO1xuXG4gICAgICBpZiAocHJldkhlaWdodCAhPT0gc2Nyb2xsYmFySGVpZ2h0LmN1cnJlbnQpIHtcbiAgICAgICAgb25DaGFuZ2Uoc2Nyb2xsYmFySGVpZ2h0LmN1cnJlbnQpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdyZXNpemUnLCBoYW5kbGVSZXNpemUpO1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICBoYW5kbGVSZXNpemUuY2xlYXIoKTtcbiAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdyZXNpemUnLCBoYW5kbGVSZXNpemUpO1xuICAgIH07XG4gIH0sIFtvbkNoYW5nZV0pO1xuICBSZWFjdC51c2VFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgIHNldE1lYXN1cmVtZW50cygpO1xuICAgIG9uQ2hhbmdlKHNjcm9sbGJhckhlaWdodC5jdXJyZW50KTtcbiAgfSwgW29uQ2hhbmdlXSk7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCBfZXh0ZW5kcyh7XG4gICAgc3R5bGU6IHN0eWxlcyxcbiAgICByZWY6IG5vZGVSZWZcbiAgfSwgb3RoZXIpKTtcbn1cbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFNjcm9sbGJhclNpemUucHJvcFR5cGVzID0ge1xuICBvbkNoYW5nZTogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZFxufSA6IHZvaWQgMDsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzXCI7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGNsc3ggZnJvbSAnY2xzeCc7XG5pbXBvcnQgd2l0aFN0eWxlcyBmcm9tICcuLi9zdHlsZXMvd2l0aFN0eWxlcyc7XG5pbXBvcnQgY2FwaXRhbGl6ZSBmcm9tICcuLi91dGlscy9jYXBpdGFsaXplJztcbmV4cG9ydCB2YXIgc3R5bGVzID0gZnVuY3Rpb24gc3R5bGVzKHRoZW1lKSB7XG4gIHJldHVybiB7XG4gICAgcm9vdDoge1xuICAgICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gICAgICBoZWlnaHQ6IDIsXG4gICAgICBib3R0b206IDAsXG4gICAgICB3aWR0aDogJzEwMCUnLFxuICAgICAgdHJhbnNpdGlvbjogdGhlbWUudHJhbnNpdGlvbnMuY3JlYXRlKClcbiAgICB9LFxuICAgIGNvbG9yUHJpbWFyeToge1xuICAgICAgYmFja2dyb3VuZENvbG9yOiB0aGVtZS5wYWxldHRlLnByaW1hcnkubWFpblxuICAgIH0sXG4gICAgY29sb3JTZWNvbmRhcnk6IHtcbiAgICAgIGJhY2tncm91bmRDb2xvcjogdGhlbWUucGFsZXR0ZS5zZWNvbmRhcnkubWFpblxuICAgIH0sXG4gICAgdmVydGljYWw6IHtcbiAgICAgIGhlaWdodDogJzEwMCUnLFxuICAgICAgd2lkdGg6IDIsXG4gICAgICByaWdodDogMFxuICAgIH1cbiAgfTtcbn07XG4vKipcbiAqIEBpZ25vcmUgLSBpbnRlcm5hbCBjb21wb25lbnQuXG4gKi9cblxudmFyIFRhYkluZGljYXRvciA9IC8qI19fUFVSRV9fKi9SZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIFRhYkluZGljYXRvcihwcm9wcywgcmVmKSB7XG4gIHZhciBjbGFzc2VzID0gcHJvcHMuY2xhc3NlcyxcbiAgICAgIGNsYXNzTmFtZSA9IHByb3BzLmNsYXNzTmFtZSxcbiAgICAgIGNvbG9yID0gcHJvcHMuY29sb3IsXG4gICAgICBvcmllbnRhdGlvbiA9IHByb3BzLm9yaWVudGF0aW9uLFxuICAgICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMocHJvcHMsIFtcImNsYXNzZXNcIiwgXCJjbGFzc05hbWVcIiwgXCJjb2xvclwiLCBcIm9yaWVudGF0aW9uXCJdKTtcblxuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIsIF9leHRlbmRzKHtcbiAgICBjbGFzc05hbWU6IGNsc3goY2xhc3Nlcy5yb290LCBjbGFzc2VzW1wiY29sb3JcIi5jb25jYXQoY2FwaXRhbGl6ZShjb2xvcikpXSwgY2xhc3NOYW1lLCBvcmllbnRhdGlvbiA9PT0gJ3ZlcnRpY2FsJyAmJiBjbGFzc2VzLnZlcnRpY2FsKSxcbiAgICByZWY6IHJlZlxuICB9LCBvdGhlcikpO1xufSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBUYWJJbmRpY2F0b3IucHJvcFR5cGVzID0ge1xuICAvKipcbiAgICogT3ZlcnJpZGUgb3IgZXh0ZW5kIHRoZSBzdHlsZXMgYXBwbGllZCB0byB0aGUgY29tcG9uZW50LlxuICAgKiBTZWUgW0NTUyBBUEldKCNjc3MpIGJlbG93IGZvciBtb3JlIGRldGFpbHMuXG4gICAqL1xuICBjbGFzc2VzOiBQcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWQsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKiBUaGUgY29sb3Igb2YgdGhlIHRhYiBpbmRpY2F0b3IuXG4gICAqL1xuICBjb2xvcjogUHJvcFR5cGVzLm9uZU9mKFsncHJpbWFyeScsICdzZWNvbmRhcnknXSkuaXNSZXF1aXJlZCxcblxuICAvKipcbiAgICogVGhlIHRhYnMgb3JpZW50YXRpb24gKGxheW91dCBmbG93IGRpcmVjdGlvbikuXG4gICAqL1xuICBvcmllbnRhdGlvbjogUHJvcFR5cGVzLm9uZU9mKFsnaG9yaXpvbnRhbCcsICd2ZXJ0aWNhbCddKS5pc1JlcXVpcmVkXG59IDogdm9pZCAwO1xuZXhwb3J0IGRlZmF1bHQgd2l0aFN0eWxlcyhzdHlsZXMsIHtcbiAgbmFtZTogJ1ByaXZhdGVUYWJJbmRpY2F0b3InXG59KShUYWJJbmRpY2F0b3IpOyIsImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBjcmVhdGVTdmdJY29uIGZyb20gJy4uLy4uL3V0aWxzL2NyZWF0ZVN2Z0ljb24nO1xuLyoqXG4gKiBAaWdub3JlIC0gaW50ZXJuYWwgY29tcG9uZW50LlxuICovXG5cbmV4cG9ydCBkZWZhdWx0IGNyZWF0ZVN2Z0ljb24oIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwicGF0aFwiLCB7XG4gIGQ6IFwiTTE1LjQxIDE2LjA5bC00LjU4LTQuNTkgNC41OC00LjU5TDE0IDUuNWwtNiA2IDYgNnpcIlxufSksICdLZXlib2FyZEFycm93TGVmdCcpOyIsImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBjcmVhdGVTdmdJY29uIGZyb20gJy4uLy4uL3V0aWxzL2NyZWF0ZVN2Z0ljb24nO1xuLyoqXG4gKiBAaWdub3JlIC0gaW50ZXJuYWwgY29tcG9uZW50LlxuICovXG5cbmV4cG9ydCBkZWZhdWx0IGNyZWF0ZVN2Z0ljb24oIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwicGF0aFwiLCB7XG4gIGQ6IFwiTTguNTkgMTYuMzRsNC41OC00LjU5LTQuNTgtNC41OUwxMCA1Ljc1bDYgNi02IDZ6XCJcbn0pLCAnS2V5Ym9hcmRBcnJvd1JpZ2h0Jyk7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc1wiO1xuXG4vKiBlc2xpbnQtZGlzYWJsZSBqc3gtYTExeS9hcmlhLXJvbGUgKi9cbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgY2xzeCBmcm9tICdjbHN4JztcbmltcG9ydCBLZXlib2FyZEFycm93TGVmdCBmcm9tICcuLi9pbnRlcm5hbC9zdmctaWNvbnMvS2V5Ym9hcmRBcnJvd0xlZnQnO1xuaW1wb3J0IEtleWJvYXJkQXJyb3dSaWdodCBmcm9tICcuLi9pbnRlcm5hbC9zdmctaWNvbnMvS2V5Ym9hcmRBcnJvd1JpZ2h0JztcbmltcG9ydCB3aXRoU3R5bGVzIGZyb20gJy4uL3N0eWxlcy93aXRoU3R5bGVzJztcbmltcG9ydCBCdXR0b25CYXNlIGZyb20gJy4uL0J1dHRvbkJhc2UnO1xuZXhwb3J0IHZhciBzdHlsZXMgPSB7XG4gIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQuICovXG4gIHJvb3Q6IHtcbiAgICB3aWR0aDogNDAsXG4gICAgZmxleFNocmluazogMCxcbiAgICBvcGFjaXR5OiAwLjgsXG4gICAgJyYkZGlzYWJsZWQnOiB7XG4gICAgICBvcGFjaXR5OiAwXG4gICAgfVxuICB9LFxuXG4gIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYG9yaWVudGF0aW9uPVwidmVydGljYWxcImAuICovXG4gIHZlcnRpY2FsOiB7XG4gICAgd2lkdGg6ICcxMDAlJyxcbiAgICBoZWlnaHQ6IDQwLFxuICAgICcmIHN2Zyc6IHtcbiAgICAgIHRyYW5zZm9ybTogJ3JvdGF0ZSg5MGRlZyknXG4gICAgfVxuICB9LFxuXG4gIC8qIFBzZXVkby1jbGFzcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGRpc2FibGVkPXt0cnVlfWAuICovXG4gIGRpc2FibGVkOiB7fVxufTtcblxudmFyIF9yZWYgPSAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChLZXlib2FyZEFycm93TGVmdCwge1xuICBmb250U2l6ZTogXCJzbWFsbFwiXG59KTtcblxudmFyIF9yZWYyID0gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoS2V5Ym9hcmRBcnJvd1JpZ2h0LCB7XG4gIGZvbnRTaXplOiBcInNtYWxsXCJcbn0pO1xuXG52YXIgVGFiU2Nyb2xsQnV0dG9uID0gLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gVGFiU2Nyb2xsQnV0dG9uKHByb3BzLCByZWYpIHtcbiAgdmFyIGNsYXNzZXMgPSBwcm9wcy5jbGFzc2VzLFxuICAgICAgY2xhc3NOYW1lUHJvcCA9IHByb3BzLmNsYXNzTmFtZSxcbiAgICAgIGRpcmVjdGlvbiA9IHByb3BzLmRpcmVjdGlvbixcbiAgICAgIG9yaWVudGF0aW9uID0gcHJvcHMub3JpZW50YXRpb24sXG4gICAgICBkaXNhYmxlZCA9IHByb3BzLmRpc2FibGVkLFxuICAgICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMocHJvcHMsIFtcImNsYXNzZXNcIiwgXCJjbGFzc05hbWVcIiwgXCJkaXJlY3Rpb25cIiwgXCJvcmllbnRhdGlvblwiLCBcImRpc2FibGVkXCJdKTtcblxuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoQnV0dG9uQmFzZSwgX2V4dGVuZHMoe1xuICAgIGNvbXBvbmVudDogXCJkaXZcIixcbiAgICBjbGFzc05hbWU6IGNsc3goY2xhc3Nlcy5yb290LCBjbGFzc05hbWVQcm9wLCBkaXNhYmxlZCAmJiBjbGFzc2VzLmRpc2FibGVkLCBvcmllbnRhdGlvbiA9PT0gJ3ZlcnRpY2FsJyAmJiBjbGFzc2VzLnZlcnRpY2FsKSxcbiAgICByZWY6IHJlZixcbiAgICByb2xlOiBudWxsLFxuICAgIHRhYkluZGV4OiBudWxsXG4gIH0sIG90aGVyKSwgZGlyZWN0aW9uID09PSAnbGVmdCcgPyBfcmVmIDogX3JlZjIpO1xufSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBUYWJTY3JvbGxCdXR0b24ucHJvcFR5cGVzID0ge1xuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBXYXJuaW5nIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIC8vIHwgVGhlc2UgUHJvcFR5cGVzIGFyZSBnZW5lcmF0ZWQgZnJvbSB0aGUgVHlwZVNjcmlwdCB0eXBlIGRlZmluaXRpb25zIHxcbiAgLy8gfCAgICAgVG8gdXBkYXRlIHRoZW0gZWRpdCB0aGUgZC50cyBmaWxlIGFuZCBydW4gXCJ5YXJuIHByb3B0eXBlc1wiICAgICB8XG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuICAvKipcbiAgICogVGhlIGNvbnRlbnQgb2YgdGhlIGNvbXBvbmVudC5cbiAgICovXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcblxuICAvKipcbiAgICogT3ZlcnJpZGUgb3IgZXh0ZW5kIHRoZSBzdHlsZXMgYXBwbGllZCB0byB0aGUgY29tcG9uZW50LlxuICAgKiBTZWUgW0NTUyBBUEldKCNjc3MpIGJlbG93IGZvciBtb3JlIGRldGFpbHMuXG4gICAqL1xuICBjbGFzc2VzOiBQcm9wVHlwZXMub2JqZWN0LFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIFdoaWNoIGRpcmVjdGlvbiBzaG91bGQgdGhlIGJ1dHRvbiBpbmRpY2F0ZT9cbiAgICovXG4gIGRpcmVjdGlvbjogUHJvcFR5cGVzLm9uZU9mKFsnbGVmdCcsICdyaWdodCddKS5pc1JlcXVpcmVkLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBlbGVtZW50IHdpbGwgYmUgZGlzYWJsZWQuXG4gICAqL1xuICBkaXNhYmxlZDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIFRoZSB0YWJzIG9yaWVudGF0aW9uIChsYXlvdXQgZmxvdyBkaXJlY3Rpb24pLlxuICAgKi9cbiAgb3JpZW50YXRpb246IFByb3BUeXBlcy5vbmVPZihbJ2hvcml6b250YWwnLCAndmVydGljYWwnXSkuaXNSZXF1aXJlZFxufSA6IHZvaWQgMDtcbmV4cG9ydCBkZWZhdWx0IHdpdGhTdHlsZXMoc3R5bGVzLCB7XG4gIG5hbWU6ICdNdWlUYWJTY3JvbGxCdXR0b24nXG59KShUYWJTY3JvbGxCdXR0b24pOyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNcIjtcbmltcG9ydCBfZGVmaW5lUHJvcGVydHkgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2RlZmluZVByb3BlcnR5XCI7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBpc0ZyYWdtZW50IH0gZnJvbSAncmVhY3QtaXMnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBjbHN4IGZyb20gJ2Nsc3gnO1xuaW1wb3J0IHsgcmVmVHlwZSB9IGZyb20gJ0BtYXRlcmlhbC11aS91dGlscyc7XG5pbXBvcnQgZGVib3VuY2UgZnJvbSAnLi4vdXRpbHMvZGVib3VuY2UnO1xuaW1wb3J0IG93bmVyV2luZG93IGZyb20gJy4uL3V0aWxzL293bmVyV2luZG93JztcbmltcG9ydCB7IGdldE5vcm1hbGl6ZWRTY3JvbGxMZWZ0LCBkZXRlY3RTY3JvbGxUeXBlIH0gZnJvbSAnLi4vdXRpbHMvc2Nyb2xsTGVmdCc7XG5pbXBvcnQgYW5pbWF0ZSBmcm9tICcuLi9pbnRlcm5hbC9hbmltYXRlJztcbmltcG9ydCBTY3JvbGxiYXJTaXplIGZyb20gJy4vU2Nyb2xsYmFyU2l6ZSc7XG5pbXBvcnQgd2l0aFN0eWxlcyBmcm9tICcuLi9zdHlsZXMvd2l0aFN0eWxlcyc7XG5pbXBvcnQgVGFiSW5kaWNhdG9yIGZyb20gJy4vVGFiSW5kaWNhdG9yJztcbmltcG9ydCBUYWJTY3JvbGxCdXR0b24gZnJvbSAnLi4vVGFiU2Nyb2xsQnV0dG9uJztcbmltcG9ydCB1c2VFdmVudENhbGxiYWNrIGZyb20gJy4uL3V0aWxzL3VzZUV2ZW50Q2FsbGJhY2snO1xuaW1wb3J0IHVzZVRoZW1lIGZyb20gJy4uL3N0eWxlcy91c2VUaGVtZSc7XG5leHBvcnQgdmFyIHN0eWxlcyA9IGZ1bmN0aW9uIHN0eWxlcyh0aGVtZSkge1xuICByZXR1cm4ge1xuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQuICovXG4gICAgcm9vdDoge1xuICAgICAgb3ZlcmZsb3c6ICdoaWRkZW4nLFxuICAgICAgbWluSGVpZ2h0OiA0OCxcbiAgICAgIFdlYmtpdE92ZXJmbG93U2Nyb2xsaW5nOiAndG91Y2gnLFxuICAgICAgLy8gQWRkIGlPUyBtb21lbnR1bSBzY3JvbGxpbmcuXG4gICAgICBkaXNwbGF5OiAnZmxleCdcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgb3JpZW50YXRpb249XCJ2ZXJ0aWNhbFwiYC4gKi9cbiAgICB2ZXJ0aWNhbDoge1xuICAgICAgZmxleERpcmVjdGlvbjogJ2NvbHVtbidcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIGZsZXggY29udGFpbmVyIGVsZW1lbnQuICovXG4gICAgZmxleENvbnRhaW5lcjoge1xuICAgICAgZGlzcGxheTogJ2ZsZXgnXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSBmbGV4IGNvbnRhaW5lciBlbGVtZW50IGlmIGBvcmllbnRhdGlvbj1cInZlcnRpY2FsXCJgLiAqL1xuICAgIGZsZXhDb250YWluZXJWZXJ0aWNhbDoge1xuICAgICAgZmxleERpcmVjdGlvbjogJ2NvbHVtbidcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIGZsZXggY29udGFpbmVyIGVsZW1lbnQgaWYgYGNlbnRlcmVkPXt0cnVlfWAgJiBgIXZhcmlhbnQ9XCJzY3JvbGxhYmxlXCJgLiAqL1xuICAgIGNlbnRlcmVkOiB7XG4gICAgICBqdXN0aWZ5Q29udGVudDogJ2NlbnRlcidcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHRhYmxpc3QgZWxlbWVudC4gKi9cbiAgICBzY3JvbGxlcjoge1xuICAgICAgcG9zaXRpb246ICdyZWxhdGl2ZScsXG4gICAgICBkaXNwbGF5OiAnaW5saW5lLWJsb2NrJyxcbiAgICAgIGZsZXg6ICcxIDEgYXV0bycsXG4gICAgICB3aGl0ZVNwYWNlOiAnbm93cmFwJ1xuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgdGFibGlzdCBlbGVtZW50IGlmIGAhdmFyaWFudD1cInNjcm9sbGFibGVcImBcYlxiXGIuICovXG4gICAgZml4ZWQ6IHtcbiAgICAgIG92ZXJmbG93WDogJ2hpZGRlbicsXG4gICAgICB3aWR0aDogJzEwMCUnXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSB0YWJsaXN0IGVsZW1lbnQgaWYgYHZhcmlhbnQ9XCJzY3JvbGxhYmxlXCJgLiAqL1xuICAgIHNjcm9sbGFibGU6IHtcbiAgICAgIG92ZXJmbG93WDogJ3Njcm9sbCcsXG4gICAgICAvLyBIaWRlIGRpbWVuc2lvbmxlc3Mgc2Nyb2xsYmFyIG9uIE1hY09TXG4gICAgICBzY3JvbGxiYXJXaWR0aDogJ25vbmUnLFxuICAgICAgLy8gRmlyZWZveFxuICAgICAgJyY6Oi13ZWJraXQtc2Nyb2xsYmFyJzoge1xuICAgICAgICBkaXNwbGF5OiAnbm9uZScgLy8gU2FmYXJpICsgQ2hyb21lXG5cbiAgICAgIH1cbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIGBTY3JvbGxCdXR0b25Db21wb25lbnRgIGNvbXBvbmVudC4gKi9cbiAgICBzY3JvbGxCdXR0b25zOiB7fSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSBgU2Nyb2xsQnV0dG9uQ29tcG9uZW50YCBjb21wb25lbnQgaWYgYHNjcm9sbEJ1dHRvbnM9XCJhdXRvXCJgIG9yIHNjcm9sbEJ1dHRvbnM9XCJkZXNrdG9wXCJgLiAqL1xuICAgIHNjcm9sbEJ1dHRvbnNEZXNrdG9wOiBfZGVmaW5lUHJvcGVydHkoe30sIHRoZW1lLmJyZWFrcG9pbnRzLmRvd24oJ3hzJyksIHtcbiAgICAgIGRpc3BsYXk6ICdub25lJ1xuICAgIH0pLFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIGBUYWJJbmRpY2F0b3JgIGNvbXBvbmVudC4gKi9cbiAgICBpbmRpY2F0b3I6IHt9XG4gIH07XG59O1xudmFyIFRhYnMgPSAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBUYWJzKHByb3BzLCByZWYpIHtcbiAgdmFyIGFyaWFMYWJlbCA9IHByb3BzWydhcmlhLWxhYmVsJ10sXG4gICAgICBhcmlhTGFiZWxsZWRCeSA9IHByb3BzWydhcmlhLWxhYmVsbGVkYnknXSxcbiAgICAgIGFjdGlvbiA9IHByb3BzLmFjdGlvbixcbiAgICAgIF9wcm9wcyRjZW50ZXJlZCA9IHByb3BzLmNlbnRlcmVkLFxuICAgICAgY2VudGVyZWQgPSBfcHJvcHMkY2VudGVyZWQgPT09IHZvaWQgMCA/IGZhbHNlIDogX3Byb3BzJGNlbnRlcmVkLFxuICAgICAgY2hpbGRyZW5Qcm9wID0gcHJvcHMuY2hpbGRyZW4sXG4gICAgICBjbGFzc2VzID0gcHJvcHMuY2xhc3NlcyxcbiAgICAgIGNsYXNzTmFtZSA9IHByb3BzLmNsYXNzTmFtZSxcbiAgICAgIF9wcm9wcyRjb21wb25lbnQgPSBwcm9wcy5jb21wb25lbnQsXG4gICAgICBDb21wb25lbnQgPSBfcHJvcHMkY29tcG9uZW50ID09PSB2b2lkIDAgPyAnZGl2JyA6IF9wcm9wcyRjb21wb25lbnQsXG4gICAgICBfcHJvcHMkaW5kaWNhdG9yQ29sb3IgPSBwcm9wcy5pbmRpY2F0b3JDb2xvcixcbiAgICAgIGluZGljYXRvckNvbG9yID0gX3Byb3BzJGluZGljYXRvckNvbG9yID09PSB2b2lkIDAgPyAnc2Vjb25kYXJ5JyA6IF9wcm9wcyRpbmRpY2F0b3JDb2xvcixcbiAgICAgIG9uQ2hhbmdlID0gcHJvcHMub25DaGFuZ2UsXG4gICAgICBfcHJvcHMkb3JpZW50YXRpb24gPSBwcm9wcy5vcmllbnRhdGlvbixcbiAgICAgIG9yaWVudGF0aW9uID0gX3Byb3BzJG9yaWVudGF0aW9uID09PSB2b2lkIDAgPyAnaG9yaXpvbnRhbCcgOiBfcHJvcHMkb3JpZW50YXRpb24sXG4gICAgICBfcHJvcHMkU2Nyb2xsQnV0dG9uQ28gPSBwcm9wcy5TY3JvbGxCdXR0b25Db21wb25lbnQsXG4gICAgICBTY3JvbGxCdXR0b25Db21wb25lbnQgPSBfcHJvcHMkU2Nyb2xsQnV0dG9uQ28gPT09IHZvaWQgMCA/IFRhYlNjcm9sbEJ1dHRvbiA6IF9wcm9wcyRTY3JvbGxCdXR0b25DbyxcbiAgICAgIF9wcm9wcyRzY3JvbGxCdXR0b25zID0gcHJvcHMuc2Nyb2xsQnV0dG9ucyxcbiAgICAgIHNjcm9sbEJ1dHRvbnMgPSBfcHJvcHMkc2Nyb2xsQnV0dG9ucyA9PT0gdm9pZCAwID8gJ2F1dG8nIDogX3Byb3BzJHNjcm9sbEJ1dHRvbnMsXG4gICAgICBzZWxlY3Rpb25Gb2xsb3dzRm9jdXMgPSBwcm9wcy5zZWxlY3Rpb25Gb2xsb3dzRm9jdXMsXG4gICAgICBfcHJvcHMkVGFiSW5kaWNhdG9yUHIgPSBwcm9wcy5UYWJJbmRpY2F0b3JQcm9wcyxcbiAgICAgIFRhYkluZGljYXRvclByb3BzID0gX3Byb3BzJFRhYkluZGljYXRvclByID09PSB2b2lkIDAgPyB7fSA6IF9wcm9wcyRUYWJJbmRpY2F0b3JQcixcbiAgICAgIFRhYlNjcm9sbEJ1dHRvblByb3BzID0gcHJvcHMuVGFiU2Nyb2xsQnV0dG9uUHJvcHMsXG4gICAgICBfcHJvcHMkdGV4dENvbG9yID0gcHJvcHMudGV4dENvbG9yLFxuICAgICAgdGV4dENvbG9yID0gX3Byb3BzJHRleHRDb2xvciA9PT0gdm9pZCAwID8gJ2luaGVyaXQnIDogX3Byb3BzJHRleHRDb2xvcixcbiAgICAgIHZhbHVlID0gcHJvcHMudmFsdWUsXG4gICAgICBfcHJvcHMkdmFyaWFudCA9IHByb3BzLnZhcmlhbnQsXG4gICAgICB2YXJpYW50ID0gX3Byb3BzJHZhcmlhbnQgPT09IHZvaWQgMCA/ICdzdGFuZGFyZCcgOiBfcHJvcHMkdmFyaWFudCxcbiAgICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKHByb3BzLCBbXCJhcmlhLWxhYmVsXCIsIFwiYXJpYS1sYWJlbGxlZGJ5XCIsIFwiYWN0aW9uXCIsIFwiY2VudGVyZWRcIiwgXCJjaGlsZHJlblwiLCBcImNsYXNzZXNcIiwgXCJjbGFzc05hbWVcIiwgXCJjb21wb25lbnRcIiwgXCJpbmRpY2F0b3JDb2xvclwiLCBcIm9uQ2hhbmdlXCIsIFwib3JpZW50YXRpb25cIiwgXCJTY3JvbGxCdXR0b25Db21wb25lbnRcIiwgXCJzY3JvbGxCdXR0b25zXCIsIFwic2VsZWN0aW9uRm9sbG93c0ZvY3VzXCIsIFwiVGFiSW5kaWNhdG9yUHJvcHNcIiwgXCJUYWJTY3JvbGxCdXR0b25Qcm9wc1wiLCBcInRleHRDb2xvclwiLCBcInZhbHVlXCIsIFwidmFyaWFudFwiXSk7XG5cbiAgdmFyIHRoZW1lID0gdXNlVGhlbWUoKTtcbiAgdmFyIHNjcm9sbGFibGUgPSB2YXJpYW50ID09PSAnc2Nyb2xsYWJsZSc7XG4gIHZhciBpc1J0bCA9IHRoZW1lLmRpcmVjdGlvbiA9PT0gJ3J0bCc7XG4gIHZhciB2ZXJ0aWNhbCA9IG9yaWVudGF0aW9uID09PSAndmVydGljYWwnO1xuICB2YXIgc2Nyb2xsU3RhcnQgPSB2ZXJ0aWNhbCA/ICdzY3JvbGxUb3AnIDogJ3Njcm9sbExlZnQnO1xuICB2YXIgc3RhcnQgPSB2ZXJ0aWNhbCA/ICd0b3AnIDogJ2xlZnQnO1xuICB2YXIgZW5kID0gdmVydGljYWwgPyAnYm90dG9tJyA6ICdyaWdodCc7XG4gIHZhciBjbGllbnRTaXplID0gdmVydGljYWwgPyAnY2xpZW50SGVpZ2h0JyA6ICdjbGllbnRXaWR0aCc7XG4gIHZhciBzaXplID0gdmVydGljYWwgPyAnaGVpZ2h0JyA6ICd3aWR0aCc7XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBpZiAoY2VudGVyZWQgJiYgc2Nyb2xsYWJsZSkge1xuICAgICAgY29uc29sZS5lcnJvcignTWF0ZXJpYWwtVUk6IFlvdSBjYW4gbm90IHVzZSB0aGUgYGNlbnRlcmVkPXt0cnVlfWAgYW5kIGB2YXJpYW50PVwic2Nyb2xsYWJsZVwiYCBwcm9wZXJ0aWVzICcgKyAnYXQgdGhlIHNhbWUgdGltZSBvbiBhIGBUYWJzYCBjb21wb25lbnQuJyk7XG4gICAgfVxuICB9XG5cbiAgdmFyIF9SZWFjdCR1c2VTdGF0ZSA9IFJlYWN0LnVzZVN0YXRlKGZhbHNlKSxcbiAgICAgIG1vdW50ZWQgPSBfUmVhY3QkdXNlU3RhdGVbMF0sXG4gICAgICBzZXRNb3VudGVkID0gX1JlYWN0JHVzZVN0YXRlWzFdO1xuXG4gIHZhciBfUmVhY3QkdXNlU3RhdGUyID0gUmVhY3QudXNlU3RhdGUoe30pLFxuICAgICAgaW5kaWNhdG9yU3R5bGUgPSBfUmVhY3QkdXNlU3RhdGUyWzBdLFxuICAgICAgc2V0SW5kaWNhdG9yU3R5bGUgPSBfUmVhY3QkdXNlU3RhdGUyWzFdO1xuXG4gIHZhciBfUmVhY3QkdXNlU3RhdGUzID0gUmVhY3QudXNlU3RhdGUoe1xuICAgIHN0YXJ0OiBmYWxzZSxcbiAgICBlbmQ6IGZhbHNlXG4gIH0pLFxuICAgICAgZGlzcGxheVNjcm9sbCA9IF9SZWFjdCR1c2VTdGF0ZTNbMF0sXG4gICAgICBzZXREaXNwbGF5U2Nyb2xsID0gX1JlYWN0JHVzZVN0YXRlM1sxXTtcblxuICB2YXIgX1JlYWN0JHVzZVN0YXRlNCA9IFJlYWN0LnVzZVN0YXRlKHtcbiAgICBvdmVyZmxvdzogJ2hpZGRlbicsXG4gICAgbWFyZ2luQm90dG9tOiBudWxsXG4gIH0pLFxuICAgICAgc2Nyb2xsZXJTdHlsZSA9IF9SZWFjdCR1c2VTdGF0ZTRbMF0sXG4gICAgICBzZXRTY3JvbGxlclN0eWxlID0gX1JlYWN0JHVzZVN0YXRlNFsxXTtcblxuICB2YXIgdmFsdWVUb0luZGV4ID0gbmV3IE1hcCgpO1xuICB2YXIgdGFic1JlZiA9IFJlYWN0LnVzZVJlZihudWxsKTtcbiAgdmFyIHRhYkxpc3RSZWYgPSBSZWFjdC51c2VSZWYobnVsbCk7XG5cbiAgdmFyIGdldFRhYnNNZXRhID0gZnVuY3Rpb24gZ2V0VGFic01ldGEoKSB7XG4gICAgdmFyIHRhYnNOb2RlID0gdGFic1JlZi5jdXJyZW50O1xuICAgIHZhciB0YWJzTWV0YTtcblxuICAgIGlmICh0YWJzTm9kZSkge1xuICAgICAgdmFyIHJlY3QgPSB0YWJzTm9kZS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTsgLy8gY3JlYXRlIGEgbmV3IG9iamVjdCB3aXRoIENsaWVudFJlY3QgY2xhc3MgcHJvcHMgKyBzY3JvbGxMZWZ0XG5cbiAgICAgIHRhYnNNZXRhID0ge1xuICAgICAgICBjbGllbnRXaWR0aDogdGFic05vZGUuY2xpZW50V2lkdGgsXG4gICAgICAgIHNjcm9sbExlZnQ6IHRhYnNOb2RlLnNjcm9sbExlZnQsXG4gICAgICAgIHNjcm9sbFRvcDogdGFic05vZGUuc2Nyb2xsVG9wLFxuICAgICAgICBzY3JvbGxMZWZ0Tm9ybWFsaXplZDogZ2V0Tm9ybWFsaXplZFNjcm9sbExlZnQodGFic05vZGUsIHRoZW1lLmRpcmVjdGlvbiksXG4gICAgICAgIHNjcm9sbFdpZHRoOiB0YWJzTm9kZS5zY3JvbGxXaWR0aCxcbiAgICAgICAgdG9wOiByZWN0LnRvcCxcbiAgICAgICAgYm90dG9tOiByZWN0LmJvdHRvbSxcbiAgICAgICAgbGVmdDogcmVjdC5sZWZ0LFxuICAgICAgICByaWdodDogcmVjdC5yaWdodFxuICAgICAgfTtcbiAgICB9XG5cbiAgICB2YXIgdGFiTWV0YTtcblxuICAgIGlmICh0YWJzTm9kZSAmJiB2YWx1ZSAhPT0gZmFsc2UpIHtcbiAgICAgIHZhciBfY2hpbGRyZW4gPSB0YWJMaXN0UmVmLmN1cnJlbnQuY2hpbGRyZW47XG5cbiAgICAgIGlmIChfY2hpbGRyZW4ubGVuZ3RoID4gMCkge1xuICAgICAgICB2YXIgdGFiID0gX2NoaWxkcmVuW3ZhbHVlVG9JbmRleC5nZXQodmFsdWUpXTtcblxuICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICAgIGlmICghdGFiKSB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKFtcIk1hdGVyaWFsLVVJOiBUaGUgdmFsdWUgcHJvdmlkZWQgdG8gdGhlIFRhYnMgY29tcG9uZW50IGlzIGludmFsaWQuXCIsIFwiTm9uZSBvZiB0aGUgVGFicycgY2hpbGRyZW4gbWF0Y2ggd2l0aCBgXCIuY29uY2F0KHZhbHVlLCBcImAuXCIpLCB2YWx1ZVRvSW5kZXgua2V5cyA/IFwiWW91IGNhbiBwcm92aWRlIG9uZSBvZiB0aGUgZm9sbG93aW5nIHZhbHVlczogXCIuY29uY2F0KEFycmF5LmZyb20odmFsdWVUb0luZGV4LmtleXMoKSkuam9pbignLCAnKSwgXCIuXCIpIDogbnVsbF0uam9pbignXFxuJykpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHRhYk1ldGEgPSB0YWIgPyB0YWIuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkgOiBudWxsO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICB0YWJzTWV0YTogdGFic01ldGEsXG4gICAgICB0YWJNZXRhOiB0YWJNZXRhXG4gICAgfTtcbiAgfTtcblxuICB2YXIgdXBkYXRlSW5kaWNhdG9yU3RhdGUgPSB1c2VFdmVudENhbGxiYWNrKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgX25ld0luZGljYXRvclN0eWxlO1xuXG4gICAgdmFyIF9nZXRUYWJzTWV0YSA9IGdldFRhYnNNZXRhKCksXG4gICAgICAgIHRhYnNNZXRhID0gX2dldFRhYnNNZXRhLnRhYnNNZXRhLFxuICAgICAgICB0YWJNZXRhID0gX2dldFRhYnNNZXRhLnRhYk1ldGE7XG5cbiAgICB2YXIgc3RhcnRWYWx1ZSA9IDA7XG5cbiAgICBpZiAodGFiTWV0YSAmJiB0YWJzTWV0YSkge1xuICAgICAgaWYgKHZlcnRpY2FsKSB7XG4gICAgICAgIHN0YXJ0VmFsdWUgPSB0YWJNZXRhLnRvcCAtIHRhYnNNZXRhLnRvcCArIHRhYnNNZXRhLnNjcm9sbFRvcDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciBjb3JyZWN0aW9uID0gaXNSdGwgPyB0YWJzTWV0YS5zY3JvbGxMZWZ0Tm9ybWFsaXplZCArIHRhYnNNZXRhLmNsaWVudFdpZHRoIC0gdGFic01ldGEuc2Nyb2xsV2lkdGggOiB0YWJzTWV0YS5zY3JvbGxMZWZ0O1xuICAgICAgICBzdGFydFZhbHVlID0gdGFiTWV0YS5sZWZ0IC0gdGFic01ldGEubGVmdCArIGNvcnJlY3Rpb247XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFyIG5ld0luZGljYXRvclN0eWxlID0gKF9uZXdJbmRpY2F0b3JTdHlsZSA9IHt9LCBfZGVmaW5lUHJvcGVydHkoX25ld0luZGljYXRvclN0eWxlLCBzdGFydCwgc3RhcnRWYWx1ZSksIF9kZWZpbmVQcm9wZXJ0eShfbmV3SW5kaWNhdG9yU3R5bGUsIHNpemUsIHRhYk1ldGEgPyB0YWJNZXRhW3NpemVdIDogMCksIF9uZXdJbmRpY2F0b3JTdHlsZSk7XG5cbiAgICBpZiAoaXNOYU4oaW5kaWNhdG9yU3R5bGVbc3RhcnRdKSB8fCBpc05hTihpbmRpY2F0b3JTdHlsZVtzaXplXSkpIHtcbiAgICAgIHNldEluZGljYXRvclN0eWxlKG5ld0luZGljYXRvclN0eWxlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIGRTdGFydCA9IE1hdGguYWJzKGluZGljYXRvclN0eWxlW3N0YXJ0XSAtIG5ld0luZGljYXRvclN0eWxlW3N0YXJ0XSk7XG4gICAgICB2YXIgZFNpemUgPSBNYXRoLmFicyhpbmRpY2F0b3JTdHlsZVtzaXplXSAtIG5ld0luZGljYXRvclN0eWxlW3NpemVdKTtcblxuICAgICAgaWYgKGRTdGFydCA+PSAxIHx8IGRTaXplID49IDEpIHtcbiAgICAgICAgc2V0SW5kaWNhdG9yU3R5bGUobmV3SW5kaWNhdG9yU3R5bGUpO1xuICAgICAgfVxuICAgIH1cbiAgfSk7XG5cbiAgdmFyIHNjcm9sbCA9IGZ1bmN0aW9uIHNjcm9sbChzY3JvbGxWYWx1ZSkge1xuICAgIGFuaW1hdGUoc2Nyb2xsU3RhcnQsIHRhYnNSZWYuY3VycmVudCwgc2Nyb2xsVmFsdWUpO1xuICB9O1xuXG4gIHZhciBtb3ZlVGFic1Njcm9sbCA9IGZ1bmN0aW9uIG1vdmVUYWJzU2Nyb2xsKGRlbHRhKSB7XG4gICAgdmFyIHNjcm9sbFZhbHVlID0gdGFic1JlZi5jdXJyZW50W3Njcm9sbFN0YXJ0XTtcblxuICAgIGlmICh2ZXJ0aWNhbCkge1xuICAgICAgc2Nyb2xsVmFsdWUgKz0gZGVsdGE7XG4gICAgfSBlbHNlIHtcbiAgICAgIHNjcm9sbFZhbHVlICs9IGRlbHRhICogKGlzUnRsID8gLTEgOiAxKTsgLy8gRml4IGZvciBFZGdlXG5cbiAgICAgIHNjcm9sbFZhbHVlICo9IGlzUnRsICYmIGRldGVjdFNjcm9sbFR5cGUoKSA9PT0gJ3JldmVyc2UnID8gLTEgOiAxO1xuICAgIH1cblxuICAgIHNjcm9sbChzY3JvbGxWYWx1ZSk7XG4gIH07XG5cbiAgdmFyIGhhbmRsZVN0YXJ0U2Nyb2xsQ2xpY2sgPSBmdW5jdGlvbiBoYW5kbGVTdGFydFNjcm9sbENsaWNrKCkge1xuICAgIG1vdmVUYWJzU2Nyb2xsKC10YWJzUmVmLmN1cnJlbnRbY2xpZW50U2l6ZV0pO1xuICB9O1xuXG4gIHZhciBoYW5kbGVFbmRTY3JvbGxDbGljayA9IGZ1bmN0aW9uIGhhbmRsZUVuZFNjcm9sbENsaWNrKCkge1xuICAgIG1vdmVUYWJzU2Nyb2xsKHRhYnNSZWYuY3VycmVudFtjbGllbnRTaXplXSk7XG4gIH07XG5cbiAgdmFyIGhhbmRsZVNjcm9sbGJhclNpemVDaGFuZ2UgPSBSZWFjdC51c2VDYWxsYmFjayhmdW5jdGlvbiAoc2Nyb2xsYmFySGVpZ2h0KSB7XG4gICAgc2V0U2Nyb2xsZXJTdHlsZSh7XG4gICAgICBvdmVyZmxvdzogbnVsbCxcbiAgICAgIG1hcmdpbkJvdHRvbTogLXNjcm9sbGJhckhlaWdodFxuICAgIH0pO1xuICB9LCBbXSk7XG5cbiAgdmFyIGdldENvbmRpdGlvbmFsRWxlbWVudHMgPSBmdW5jdGlvbiBnZXRDb25kaXRpb25hbEVsZW1lbnRzKCkge1xuICAgIHZhciBjb25kaXRpb25hbEVsZW1lbnRzID0ge307XG4gICAgY29uZGl0aW9uYWxFbGVtZW50cy5zY3JvbGxiYXJTaXplTGlzdGVuZXIgPSBzY3JvbGxhYmxlID8gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoU2Nyb2xsYmFyU2l6ZSwge1xuICAgICAgY2xhc3NOYW1lOiBjbGFzc2VzLnNjcm9sbGFibGUsXG4gICAgICBvbkNoYW5nZTogaGFuZGxlU2Nyb2xsYmFyU2l6ZUNoYW5nZVxuICAgIH0pIDogbnVsbDtcbiAgICB2YXIgc2Nyb2xsQnV0dG9uc0FjdGl2ZSA9IGRpc3BsYXlTY3JvbGwuc3RhcnQgfHwgZGlzcGxheVNjcm9sbC5lbmQ7XG4gICAgdmFyIHNob3dTY3JvbGxCdXR0b25zID0gc2Nyb2xsYWJsZSAmJiAoc2Nyb2xsQnV0dG9ucyA9PT0gJ2F1dG8nICYmIHNjcm9sbEJ1dHRvbnNBY3RpdmUgfHwgc2Nyb2xsQnV0dG9ucyA9PT0gJ2Rlc2t0b3AnIHx8IHNjcm9sbEJ1dHRvbnMgPT09ICdvbicpO1xuICAgIGNvbmRpdGlvbmFsRWxlbWVudHMuc2Nyb2xsQnV0dG9uU3RhcnQgPSBzaG93U2Nyb2xsQnV0dG9ucyA/IC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFNjcm9sbEJ1dHRvbkNvbXBvbmVudCwgX2V4dGVuZHMoe1xuICAgICAgb3JpZW50YXRpb246IG9yaWVudGF0aW9uLFxuICAgICAgZGlyZWN0aW9uOiBpc1J0bCA/ICdyaWdodCcgOiAnbGVmdCcsXG4gICAgICBvbkNsaWNrOiBoYW5kbGVTdGFydFNjcm9sbENsaWNrLFxuICAgICAgZGlzYWJsZWQ6ICFkaXNwbGF5U2Nyb2xsLnN0YXJ0LFxuICAgICAgY2xhc3NOYW1lOiBjbHN4KGNsYXNzZXMuc2Nyb2xsQnV0dG9ucywgc2Nyb2xsQnV0dG9ucyAhPT0gJ29uJyAmJiBjbGFzc2VzLnNjcm9sbEJ1dHRvbnNEZXNrdG9wKVxuICAgIH0sIFRhYlNjcm9sbEJ1dHRvblByb3BzKSkgOiBudWxsO1xuICAgIGNvbmRpdGlvbmFsRWxlbWVudHMuc2Nyb2xsQnV0dG9uRW5kID0gc2hvd1Njcm9sbEJ1dHRvbnMgPyAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChTY3JvbGxCdXR0b25Db21wb25lbnQsIF9leHRlbmRzKHtcbiAgICAgIG9yaWVudGF0aW9uOiBvcmllbnRhdGlvbixcbiAgICAgIGRpcmVjdGlvbjogaXNSdGwgPyAnbGVmdCcgOiAncmlnaHQnLFxuICAgICAgb25DbGljazogaGFuZGxlRW5kU2Nyb2xsQ2xpY2ssXG4gICAgICBkaXNhYmxlZDogIWRpc3BsYXlTY3JvbGwuZW5kLFxuICAgICAgY2xhc3NOYW1lOiBjbHN4KGNsYXNzZXMuc2Nyb2xsQnV0dG9ucywgc2Nyb2xsQnV0dG9ucyAhPT0gJ29uJyAmJiBjbGFzc2VzLnNjcm9sbEJ1dHRvbnNEZXNrdG9wKVxuICAgIH0sIFRhYlNjcm9sbEJ1dHRvblByb3BzKSkgOiBudWxsO1xuICAgIHJldHVybiBjb25kaXRpb25hbEVsZW1lbnRzO1xuICB9O1xuXG4gIHZhciBzY3JvbGxTZWxlY3RlZEludG9WaWV3ID0gdXNlRXZlbnRDYWxsYmFjayhmdW5jdGlvbiAoKSB7XG4gICAgdmFyIF9nZXRUYWJzTWV0YTIgPSBnZXRUYWJzTWV0YSgpLFxuICAgICAgICB0YWJzTWV0YSA9IF9nZXRUYWJzTWV0YTIudGFic01ldGEsXG4gICAgICAgIHRhYk1ldGEgPSBfZ2V0VGFic01ldGEyLnRhYk1ldGE7XG5cbiAgICBpZiAoIXRhYk1ldGEgfHwgIXRhYnNNZXRhKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKHRhYk1ldGFbc3RhcnRdIDwgdGFic01ldGFbc3RhcnRdKSB7XG4gICAgICAvLyBsZWZ0IHNpZGUgb2YgYnV0dG9uIGlzIG91dCBvZiB2aWV3XG4gICAgICB2YXIgbmV4dFNjcm9sbFN0YXJ0ID0gdGFic01ldGFbc2Nyb2xsU3RhcnRdICsgKHRhYk1ldGFbc3RhcnRdIC0gdGFic01ldGFbc3RhcnRdKTtcbiAgICAgIHNjcm9sbChuZXh0U2Nyb2xsU3RhcnQpO1xuICAgIH0gZWxzZSBpZiAodGFiTWV0YVtlbmRdID4gdGFic01ldGFbZW5kXSkge1xuICAgICAgLy8gcmlnaHQgc2lkZSBvZiBidXR0b24gaXMgb3V0IG9mIHZpZXdcbiAgICAgIHZhciBfbmV4dFNjcm9sbFN0YXJ0ID0gdGFic01ldGFbc2Nyb2xsU3RhcnRdICsgKHRhYk1ldGFbZW5kXSAtIHRhYnNNZXRhW2VuZF0pO1xuXG4gICAgICBzY3JvbGwoX25leHRTY3JvbGxTdGFydCk7XG4gICAgfVxuICB9KTtcbiAgdmFyIHVwZGF0ZVNjcm9sbEJ1dHRvblN0YXRlID0gdXNlRXZlbnRDYWxsYmFjayhmdW5jdGlvbiAoKSB7XG4gICAgaWYgKHNjcm9sbGFibGUgJiYgc2Nyb2xsQnV0dG9ucyAhPT0gJ29mZicpIHtcbiAgICAgIHZhciBfdGFic1JlZiRjdXJyZW50ID0gdGFic1JlZi5jdXJyZW50LFxuICAgICAgICAgIHNjcm9sbFRvcCA9IF90YWJzUmVmJGN1cnJlbnQuc2Nyb2xsVG9wLFxuICAgICAgICAgIHNjcm9sbEhlaWdodCA9IF90YWJzUmVmJGN1cnJlbnQuc2Nyb2xsSGVpZ2h0LFxuICAgICAgICAgIGNsaWVudEhlaWdodCA9IF90YWJzUmVmJGN1cnJlbnQuY2xpZW50SGVpZ2h0LFxuICAgICAgICAgIHNjcm9sbFdpZHRoID0gX3RhYnNSZWYkY3VycmVudC5zY3JvbGxXaWR0aCxcbiAgICAgICAgICBjbGllbnRXaWR0aCA9IF90YWJzUmVmJGN1cnJlbnQuY2xpZW50V2lkdGg7XG4gICAgICB2YXIgc2hvd1N0YXJ0U2Nyb2xsO1xuICAgICAgdmFyIHNob3dFbmRTY3JvbGw7XG5cbiAgICAgIGlmICh2ZXJ0aWNhbCkge1xuICAgICAgICBzaG93U3RhcnRTY3JvbGwgPSBzY3JvbGxUb3AgPiAxO1xuICAgICAgICBzaG93RW5kU2Nyb2xsID0gc2Nyb2xsVG9wIDwgc2Nyb2xsSGVpZ2h0IC0gY2xpZW50SGVpZ2h0IC0gMTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciBzY3JvbGxMZWZ0ID0gZ2V0Tm9ybWFsaXplZFNjcm9sbExlZnQodGFic1JlZi5jdXJyZW50LCB0aGVtZS5kaXJlY3Rpb24pOyAvLyB1c2UgMSBmb3IgdGhlIHBvdGVudGlhbCByb3VuZGluZyBlcnJvciB3aXRoIGJyb3dzZXIgem9vbXMuXG5cbiAgICAgICAgc2hvd1N0YXJ0U2Nyb2xsID0gaXNSdGwgPyBzY3JvbGxMZWZ0IDwgc2Nyb2xsV2lkdGggLSBjbGllbnRXaWR0aCAtIDEgOiBzY3JvbGxMZWZ0ID4gMTtcbiAgICAgICAgc2hvd0VuZFNjcm9sbCA9ICFpc1J0bCA/IHNjcm9sbExlZnQgPCBzY3JvbGxXaWR0aCAtIGNsaWVudFdpZHRoIC0gMSA6IHNjcm9sbExlZnQgPiAxO1xuICAgICAgfVxuXG4gICAgICBpZiAoc2hvd1N0YXJ0U2Nyb2xsICE9PSBkaXNwbGF5U2Nyb2xsLnN0YXJ0IHx8IHNob3dFbmRTY3JvbGwgIT09IGRpc3BsYXlTY3JvbGwuZW5kKSB7XG4gICAgICAgIHNldERpc3BsYXlTY3JvbGwoe1xuICAgICAgICAgIHN0YXJ0OiBzaG93U3RhcnRTY3JvbGwsXG4gICAgICAgICAgZW5kOiBzaG93RW5kU2Nyb2xsXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cbiAgfSk7XG4gIFJlYWN0LnVzZUVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGhhbmRsZVJlc2l6ZSA9IGRlYm91bmNlKGZ1bmN0aW9uICgpIHtcbiAgICAgIHVwZGF0ZUluZGljYXRvclN0YXRlKCk7XG4gICAgICB1cGRhdGVTY3JvbGxCdXR0b25TdGF0ZSgpO1xuICAgIH0pO1xuICAgIHZhciB3aW4gPSBvd25lcldpbmRvdyh0YWJzUmVmLmN1cnJlbnQpO1xuICAgIHdpbi5hZGRFdmVudExpc3RlbmVyKCdyZXNpemUnLCBoYW5kbGVSZXNpemUpO1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICBoYW5kbGVSZXNpemUuY2xlYXIoKTtcbiAgICAgIHdpbi5yZW1vdmVFdmVudExpc3RlbmVyKCdyZXNpemUnLCBoYW5kbGVSZXNpemUpO1xuICAgIH07XG4gIH0sIFt1cGRhdGVJbmRpY2F0b3JTdGF0ZSwgdXBkYXRlU2Nyb2xsQnV0dG9uU3RhdGVdKTtcbiAgdmFyIGhhbmRsZVRhYnNTY3JvbGwgPSBSZWFjdC51c2VDYWxsYmFjayhkZWJvdW5jZShmdW5jdGlvbiAoKSB7XG4gICAgdXBkYXRlU2Nyb2xsQnV0dG9uU3RhdGUoKTtcbiAgfSkpO1xuICBSZWFjdC51c2VFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICBoYW5kbGVUYWJzU2Nyb2xsLmNsZWFyKCk7XG4gICAgfTtcbiAgfSwgW2hhbmRsZVRhYnNTY3JvbGxdKTtcbiAgUmVhY3QudXNlRWZmZWN0KGZ1bmN0aW9uICgpIHtcbiAgICBzZXRNb3VudGVkKHRydWUpO1xuICB9LCBbXSk7XG4gIFJlYWN0LnVzZUVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgdXBkYXRlSW5kaWNhdG9yU3RhdGUoKTtcbiAgICB1cGRhdGVTY3JvbGxCdXR0b25TdGF0ZSgpO1xuICB9KTtcbiAgUmVhY3QudXNlRWZmZWN0KGZ1bmN0aW9uICgpIHtcbiAgICBzY3JvbGxTZWxlY3RlZEludG9WaWV3KCk7XG4gIH0sIFtzY3JvbGxTZWxlY3RlZEludG9WaWV3LCBpbmRpY2F0b3JTdHlsZV0pO1xuICBSZWFjdC51c2VJbXBlcmF0aXZlSGFuZGxlKGFjdGlvbiwgZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB7XG4gICAgICB1cGRhdGVJbmRpY2F0b3I6IHVwZGF0ZUluZGljYXRvclN0YXRlLFxuICAgICAgdXBkYXRlU2Nyb2xsQnV0dG9uczogdXBkYXRlU2Nyb2xsQnV0dG9uU3RhdGVcbiAgICB9O1xuICB9LCBbdXBkYXRlSW5kaWNhdG9yU3RhdGUsIHVwZGF0ZVNjcm9sbEJ1dHRvblN0YXRlXSk7XG4gIHZhciBpbmRpY2F0b3IgPSAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChUYWJJbmRpY2F0b3IsIF9leHRlbmRzKHtcbiAgICBjbGFzc05hbWU6IGNsYXNzZXMuaW5kaWNhdG9yLFxuICAgIG9yaWVudGF0aW9uOiBvcmllbnRhdGlvbixcbiAgICBjb2xvcjogaW5kaWNhdG9yQ29sb3JcbiAgfSwgVGFiSW5kaWNhdG9yUHJvcHMsIHtcbiAgICBzdHlsZTogX2V4dGVuZHMoe30sIGluZGljYXRvclN0eWxlLCBUYWJJbmRpY2F0b3JQcm9wcy5zdHlsZSlcbiAgfSkpO1xuICB2YXIgY2hpbGRJbmRleCA9IDA7XG4gIHZhciBjaGlsZHJlbiA9IFJlYWN0LkNoaWxkcmVuLm1hcChjaGlsZHJlblByb3AsIGZ1bmN0aW9uIChjaGlsZCkge1xuICAgIGlmICghIC8qI19fUFVSRV9fKi9SZWFjdC5pc1ZhbGlkRWxlbWVudChjaGlsZCkpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBpZiAoaXNGcmFnbWVudChjaGlsZCkpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihbXCJNYXRlcmlhbC1VSTogVGhlIFRhYnMgY29tcG9uZW50IGRvZXNuJ3QgYWNjZXB0IGEgRnJhZ21lbnQgYXMgYSBjaGlsZC5cIiwgJ0NvbnNpZGVyIHByb3ZpZGluZyBhbiBhcnJheSBpbnN0ZWFkLiddLmpvaW4oJ1xcbicpKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgY2hpbGRWYWx1ZSA9IGNoaWxkLnByb3BzLnZhbHVlID09PSB1bmRlZmluZWQgPyBjaGlsZEluZGV4IDogY2hpbGQucHJvcHMudmFsdWU7XG4gICAgdmFsdWVUb0luZGV4LnNldChjaGlsZFZhbHVlLCBjaGlsZEluZGV4KTtcbiAgICB2YXIgc2VsZWN0ZWQgPSBjaGlsZFZhbHVlID09PSB2YWx1ZTtcbiAgICBjaGlsZEluZGV4ICs9IDE7XG4gICAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jbG9uZUVsZW1lbnQoY2hpbGQsIHtcbiAgICAgIGZ1bGxXaWR0aDogdmFyaWFudCA9PT0gJ2Z1bGxXaWR0aCcsXG4gICAgICBpbmRpY2F0b3I6IHNlbGVjdGVkICYmICFtb3VudGVkICYmIGluZGljYXRvcixcbiAgICAgIHNlbGVjdGVkOiBzZWxlY3RlZCxcbiAgICAgIHNlbGVjdGlvbkZvbGxvd3NGb2N1czogc2VsZWN0aW9uRm9sbG93c0ZvY3VzLFxuICAgICAgb25DaGFuZ2U6IG9uQ2hhbmdlLFxuICAgICAgdGV4dENvbG9yOiB0ZXh0Q29sb3IsXG4gICAgICB2YWx1ZTogY2hpbGRWYWx1ZVxuICAgIH0pO1xuICB9KTtcblxuICB2YXIgaGFuZGxlS2V5RG93biA9IGZ1bmN0aW9uIGhhbmRsZUtleURvd24oZXZlbnQpIHtcbiAgICB2YXIgdGFyZ2V0ID0gZXZlbnQudGFyZ2V0OyAvLyBLZXlib2FyZCBuYXZpZ2F0aW9uIGFzc3VtZXMgdGhhdCBbcm9sZT1cInRhYlwiXSBhcmUgc2libGluZ3NcbiAgICAvLyB0aG91Z2ggd2UgbWlnaHQgd2FybiBpbiB0aGUgZnV0dXJlIGFib3V0IG5lc3RlZCwgaW50ZXJhY3RpdmUgZWxlbWVudHNcbiAgICAvLyBhcyBhIGExMXkgdmlvbGF0aW9uXG5cbiAgICB2YXIgcm9sZSA9IHRhcmdldC5nZXRBdHRyaWJ1dGUoJ3JvbGUnKTtcblxuICAgIGlmIChyb2xlICE9PSAndGFiJykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciBuZXdGb2N1c1RhcmdldCA9IG51bGw7XG4gICAgdmFyIHByZXZpb3VzSXRlbUtleSA9IG9yaWVudGF0aW9uICE9PSBcInZlcnRpY2FsXCIgPyAnQXJyb3dMZWZ0JyA6ICdBcnJvd1VwJztcbiAgICB2YXIgbmV4dEl0ZW1LZXkgPSBvcmllbnRhdGlvbiAhPT0gXCJ2ZXJ0aWNhbFwiID8gJ0Fycm93UmlnaHQnIDogJ0Fycm93RG93bic7XG5cbiAgICBpZiAob3JpZW50YXRpb24gIT09IFwidmVydGljYWxcIiAmJiB0aGVtZS5kaXJlY3Rpb24gPT09ICdydGwnKSB7XG4gICAgICAvLyBzd2FwIHByZXZpb3VzSXRlbUtleSB3aXRoIG5leHRJdGVtS2V5XG4gICAgICBwcmV2aW91c0l0ZW1LZXkgPSAnQXJyb3dSaWdodCc7XG4gICAgICBuZXh0SXRlbUtleSA9ICdBcnJvd0xlZnQnO1xuICAgIH1cblxuICAgIHN3aXRjaCAoZXZlbnQua2V5KSB7XG4gICAgICBjYXNlIHByZXZpb3VzSXRlbUtleTpcbiAgICAgICAgbmV3Rm9jdXNUYXJnZXQgPSB0YXJnZXQucHJldmlvdXNFbGVtZW50U2libGluZyB8fCB0YWJMaXN0UmVmLmN1cnJlbnQubGFzdENoaWxkO1xuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSBuZXh0SXRlbUtleTpcbiAgICAgICAgbmV3Rm9jdXNUYXJnZXQgPSB0YXJnZXQubmV4dEVsZW1lbnRTaWJsaW5nIHx8IHRhYkxpc3RSZWYuY3VycmVudC5maXJzdENoaWxkO1xuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSAnSG9tZSc6XG4gICAgICAgIG5ld0ZvY3VzVGFyZ2V0ID0gdGFiTGlzdFJlZi5jdXJyZW50LmZpcnN0Q2hpbGQ7XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlICdFbmQnOlxuICAgICAgICBuZXdGb2N1c1RhcmdldCA9IHRhYkxpc3RSZWYuY3VycmVudC5sYXN0Q2hpbGQ7XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBkZWZhdWx0OlxuICAgICAgICBicmVhaztcbiAgICB9XG5cbiAgICBpZiAobmV3Rm9jdXNUYXJnZXQgIT09IG51bGwpIHtcbiAgICAgIG5ld0ZvY3VzVGFyZ2V0LmZvY3VzKCk7XG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIH1cbiAgfTtcblxuICB2YXIgY29uZGl0aW9uYWxFbGVtZW50cyA9IGdldENvbmRpdGlvbmFsRWxlbWVudHMoKTtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KENvbXBvbmVudCwgX2V4dGVuZHMoe1xuICAgIGNsYXNzTmFtZTogY2xzeChjbGFzc2VzLnJvb3QsIGNsYXNzTmFtZSwgdmVydGljYWwgJiYgY2xhc3Nlcy52ZXJ0aWNhbCksXG4gICAgcmVmOiByZWZcbiAgfSwgb3RoZXIpLCBjb25kaXRpb25hbEVsZW1lbnRzLnNjcm9sbEJ1dHRvblN0YXJ0LCBjb25kaXRpb25hbEVsZW1lbnRzLnNjcm9sbGJhclNpemVMaXN0ZW5lciwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwge1xuICAgIGNsYXNzTmFtZTogY2xzeChjbGFzc2VzLnNjcm9sbGVyLCBzY3JvbGxhYmxlID8gY2xhc3Nlcy5zY3JvbGxhYmxlIDogY2xhc3Nlcy5maXhlZCksXG4gICAgc3R5bGU6IHNjcm9sbGVyU3R5bGUsXG4gICAgcmVmOiB0YWJzUmVmLFxuICAgIG9uU2Nyb2xsOiBoYW5kbGVUYWJzU2Nyb2xsXG4gIH0sIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHtcbiAgICBcImFyaWEtbGFiZWxcIjogYXJpYUxhYmVsLFxuICAgIFwiYXJpYS1sYWJlbGxlZGJ5XCI6IGFyaWFMYWJlbGxlZEJ5LFxuICAgIGNsYXNzTmFtZTogY2xzeChjbGFzc2VzLmZsZXhDb250YWluZXIsIHZlcnRpY2FsICYmIGNsYXNzZXMuZmxleENvbnRhaW5lclZlcnRpY2FsLCBjZW50ZXJlZCAmJiAhc2Nyb2xsYWJsZSAmJiBjbGFzc2VzLmNlbnRlcmVkKSxcbiAgICBvbktleURvd246IGhhbmRsZUtleURvd24sXG4gICAgcmVmOiB0YWJMaXN0UmVmLFxuICAgIHJvbGU6IFwidGFibGlzdFwiXG4gIH0sIGNoaWxkcmVuKSwgbW91bnRlZCAmJiBpbmRpY2F0b3IpLCBjb25kaXRpb25hbEVsZW1lbnRzLnNjcm9sbEJ1dHRvbkVuZCk7XG59KTtcbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFRhYnMucHJvcFR5cGVzID0ge1xuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBXYXJuaW5nIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIC8vIHwgVGhlc2UgUHJvcFR5cGVzIGFyZSBnZW5lcmF0ZWQgZnJvbSB0aGUgVHlwZVNjcmlwdCB0eXBlIGRlZmluaXRpb25zIHxcbiAgLy8gfCAgICAgVG8gdXBkYXRlIHRoZW0gZWRpdCB0aGUgZC50cyBmaWxlIGFuZCBydW4gXCJ5YXJuIHByb3B0eXBlc1wiICAgICB8XG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgd2hlbiB0aGUgY29tcG9uZW50IG1vdW50cy5cbiAgICogVGhpcyBpcyB1c2VmdWwgd2hlbiB5b3Ugd2FudCB0byB0cmlnZ2VyIGFuIGFjdGlvbiBwcm9ncmFtbWF0aWNhbGx5LlxuICAgKiBJdCBzdXBwb3J0cyB0d28gYWN0aW9uczogYHVwZGF0ZUluZGljYXRvcigpYCBhbmQgYHVwZGF0ZVNjcm9sbEJ1dHRvbnMoKWBcbiAgICpcbiAgICogQHBhcmFtIHtvYmplY3R9IGFjdGlvbnMgVGhpcyBvYmplY3QgY29udGFpbnMgYWxsIHBvc3NpYmxlIGFjdGlvbnNcbiAgICogdGhhdCBjYW4gYmUgdHJpZ2dlcmVkIHByb2dyYW1tYXRpY2FsbHkuXG4gICAqL1xuICBhY3Rpb246IHJlZlR5cGUsXG5cbiAgLyoqXG4gICAqIFRoZSBsYWJlbCBmb3IgdGhlIFRhYnMgYXMgYSBzdHJpbmcuXG4gICAqL1xuICAnYXJpYS1sYWJlbCc6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIEFuIGlkIG9yIGxpc3Qgb2YgaWRzIHNlcGFyYXRlZCBieSBhIHNwYWNlIHRoYXQgbGFiZWwgdGhlIFRhYnMuXG4gICAqL1xuICAnYXJpYS1sYWJlbGxlZGJ5JzogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgdGFicyB3aWxsIGJlIGNlbnRlcmVkLlxuICAgKiBUaGlzIHByb3BlcnR5IGlzIGludGVuZGVkIGZvciBsYXJnZSB2aWV3cy5cbiAgICovXG4gIGNlbnRlcmVkOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogVGhlIGNvbnRlbnQgb2YgdGhlIGNvbXBvbmVudC5cbiAgICovXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcblxuICAvKipcbiAgICogT3ZlcnJpZGUgb3IgZXh0ZW5kIHRoZSBzdHlsZXMgYXBwbGllZCB0byB0aGUgY29tcG9uZW50LlxuICAgKiBTZWUgW0NTUyBBUEldKCNjc3MpIGJlbG93IGZvciBtb3JlIGRldGFpbHMuXG4gICAqL1xuICBjbGFzc2VzOiBQcm9wVHlwZXMub2JqZWN0LFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIFRoZSBjb21wb25lbnQgdXNlZCBmb3IgdGhlIHJvb3Qgbm9kZS5cbiAgICogRWl0aGVyIGEgc3RyaW5nIHRvIHVzZSBhIEhUTUwgZWxlbWVudCBvciBhIGNvbXBvbmVudC5cbiAgICovXG4gIGNvbXBvbmVudDogUHJvcFR5cGVzXG4gIC8qIEB0eXBlc2NyaXB0LXRvLXByb3B0eXBlcy1pZ25vcmUgKi9cbiAgLmVsZW1lbnRUeXBlLFxuXG4gIC8qKlxuICAgKiBEZXRlcm1pbmVzIHRoZSBjb2xvciBvZiB0aGUgaW5kaWNhdG9yLlxuICAgKi9cbiAgaW5kaWNhdG9yQ29sb3I6IFByb3BUeXBlcy5vbmVPZihbJ3ByaW1hcnknLCAnc2Vjb25kYXJ5J10pLFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCB3aGVuIHRoZSB2YWx1ZSBjaGFuZ2VzLlxuICAgKlxuICAgKiBAcGFyYW0ge29iamVjdH0gZXZlbnQgVGhlIGV2ZW50IHNvdXJjZSBvZiB0aGUgY2FsbGJhY2tcbiAgICogQHBhcmFtIHthbnl9IHZhbHVlIFdlIGRlZmF1bHQgdG8gdGhlIGluZGV4IG9mIHRoZSBjaGlsZCAobnVtYmVyKVxuICAgKi9cbiAgb25DaGFuZ2U6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBUaGUgdGFicyBvcmllbnRhdGlvbiAobGF5b3V0IGZsb3cgZGlyZWN0aW9uKS5cbiAgICovXG4gIG9yaWVudGF0aW9uOiBQcm9wVHlwZXMub25lT2YoWydob3Jpem9udGFsJywgJ3ZlcnRpY2FsJ10pLFxuXG4gIC8qKlxuICAgKiBUaGUgY29tcG9uZW50IHVzZWQgdG8gcmVuZGVyIHRoZSBzY3JvbGwgYnV0dG9ucy5cbiAgICovXG4gIFNjcm9sbEJ1dHRvbkNvbXBvbmVudDogUHJvcFR5cGVzLmVsZW1lbnRUeXBlLFxuXG4gIC8qKlxuICAgKiBEZXRlcm1pbmUgYmVoYXZpb3Igb2Ygc2Nyb2xsIGJ1dHRvbnMgd2hlbiB0YWJzIGFyZSBzZXQgdG8gc2Nyb2xsOlxuICAgKlxuICAgKiAtIGBhdXRvYCB3aWxsIG9ubHkgcHJlc2VudCB0aGVtIHdoZW4gbm90IGFsbCB0aGUgaXRlbXMgYXJlIHZpc2libGUuXG4gICAqIC0gYGRlc2t0b3BgIHdpbGwgb25seSBwcmVzZW50IHRoZW0gb24gbWVkaXVtIGFuZCBsYXJnZXIgdmlld3BvcnRzLlxuICAgKiAtIGBvbmAgd2lsbCBhbHdheXMgcHJlc2VudCB0aGVtLlxuICAgKiAtIGBvZmZgIHdpbGwgbmV2ZXIgcHJlc2VudCB0aGVtLlxuICAgKi9cbiAgc2Nyb2xsQnV0dG9uczogUHJvcFR5cGVzLm9uZU9mKFsnYXV0bycsICdkZXNrdG9wJywgJ29mZicsICdvbiddKSxcblxuICAvKipcbiAgICogSWYgYHRydWVgIHRoZSBzZWxlY3RlZCB0YWIgY2hhbmdlcyBvbiBmb2N1cy4gT3RoZXJ3aXNlIGl0IG9ubHlcbiAgICogY2hhbmdlcyBvbiBhY3RpdmF0aW9uLlxuICAgKi9cbiAgc2VsZWN0aW9uRm9sbG93c0ZvY3VzOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogUHJvcHMgYXBwbGllZCB0byB0aGUgdGFiIGluZGljYXRvciBlbGVtZW50LlxuICAgKi9cbiAgVGFiSW5kaWNhdG9yUHJvcHM6IFByb3BUeXBlcy5vYmplY3QsXG5cbiAgLyoqXG4gICAqIFByb3BzIGFwcGxpZWQgdG8gdGhlIFtgVGFiU2Nyb2xsQnV0dG9uYF0oL2FwaS90YWItc2Nyb2xsLWJ1dHRvbi8pIGVsZW1lbnQuXG4gICAqL1xuICBUYWJTY3JvbGxCdXR0b25Qcm9wczogUHJvcFR5cGVzLm9iamVjdCxcblxuICAvKipcbiAgICogRGV0ZXJtaW5lcyB0aGUgY29sb3Igb2YgdGhlIGBUYWJgLlxuICAgKi9cbiAgdGV4dENvbG9yOiBQcm9wVHlwZXMub25lT2YoWydpbmhlcml0JywgJ3ByaW1hcnknLCAnc2Vjb25kYXJ5J10pLFxuXG4gIC8qKlxuICAgKiBUaGUgdmFsdWUgb2YgdGhlIGN1cnJlbnRseSBzZWxlY3RlZCBgVGFiYC5cbiAgICogSWYgeW91IGRvbid0IHdhbnQgYW55IHNlbGVjdGVkIGBUYWJgLCB5b3UgY2FuIHNldCB0aGlzIHByb3BlcnR5IHRvIGBmYWxzZWAuXG4gICAqL1xuICB2YWx1ZTogUHJvcFR5cGVzLmFueSxcblxuICAvKipcbiAgICogRGV0ZXJtaW5lcyBhZGRpdGlvbmFsIGRpc3BsYXkgYmVoYXZpb3Igb2YgdGhlIHRhYnM6XG4gICAqXG4gICAqICAtIGBzY3JvbGxhYmxlYCB3aWxsIGludm9rZSBzY3JvbGxpbmcgcHJvcGVydGllcyBhbmQgYWxsb3cgZm9yIGhvcml6b250YWxseVxuICAgKiAgc2Nyb2xsaW5nIChvciBzd2lwaW5nKSBvZiB0aGUgdGFiIGJhci5cbiAgICogIC1gZnVsbFdpZHRoYCB3aWxsIG1ha2UgdGhlIHRhYnMgZ3JvdyB0byB1c2UgYWxsIHRoZSBhdmFpbGFibGUgc3BhY2UsXG4gICAqICB3aGljaCBzaG91bGQgYmUgdXNlZCBmb3Igc21hbGwgdmlld3MsIGxpa2Ugb24gbW9iaWxlLlxuICAgKiAgLSBgc3RhbmRhcmRgIHdpbGwgcmVuZGVyIHRoZSBkZWZhdWx0IHN0YXRlLlxuICAgKi9cbiAgdmFyaWFudDogUHJvcFR5cGVzLm9uZU9mKFsnZnVsbFdpZHRoJywgJ3Njcm9sbGFibGUnLCAnc3RhbmRhcmQnXSlcbn0gOiB2b2lkIDA7XG5leHBvcnQgZGVmYXVsdCB3aXRoU3R5bGVzKHN0eWxlcywge1xuICBuYW1lOiAnTXVpVGFicydcbn0pKFRhYnMpOyIsImltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzXCI7XG5pbXBvcnQgX2RlZmluZVByb3BlcnR5IGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9kZWZpbmVQcm9wZXJ0eVwiO1xuaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGNsc3ggZnJvbSAnY2xzeCc7XG5pbXBvcnQgd2l0aFN0eWxlcyBmcm9tICcuLi9zdHlsZXMvd2l0aFN0eWxlcyc7XG5pbXBvcnQgQnV0dG9uQmFzZSBmcm9tICcuLi9CdXR0b25CYXNlJztcbmltcG9ydCBjYXBpdGFsaXplIGZyb20gJy4uL3V0aWxzL2NhcGl0YWxpemUnO1xuaW1wb3J0IHVuc3VwcG9ydGVkUHJvcCBmcm9tICcuLi91dGlscy91bnN1cHBvcnRlZFByb3AnO1xuZXhwb3J0IHZhciBzdHlsZXMgPSBmdW5jdGlvbiBzdHlsZXModGhlbWUpIHtcbiAgdmFyIF9leHRlbmRzMjtcblxuICByZXR1cm4ge1xuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQuICovXG4gICAgcm9vdDogX2V4dGVuZHMoe30sIHRoZW1lLnR5cG9ncmFwaHkuYnV0dG9uLCAoX2V4dGVuZHMyID0ge1xuICAgICAgbWF4V2lkdGg6IDI2NCxcbiAgICAgIG1pbldpZHRoOiA3MixcbiAgICAgIHBvc2l0aW9uOiAncmVsYXRpdmUnLFxuICAgICAgYm94U2l6aW5nOiAnYm9yZGVyLWJveCcsXG4gICAgICBtaW5IZWlnaHQ6IDQ4LFxuICAgICAgZmxleFNocmluazogMCxcbiAgICAgIHBhZGRpbmc6ICc2cHggMTJweCdcbiAgICB9LCBfZGVmaW5lUHJvcGVydHkoX2V4dGVuZHMyLCB0aGVtZS5icmVha3BvaW50cy51cCgnc20nKSwge1xuICAgICAgcGFkZGluZzogJzZweCAyNHB4J1xuICAgIH0pLCBfZGVmaW5lUHJvcGVydHkoX2V4dGVuZHMyLCBcIm92ZXJmbG93XCIsICdoaWRkZW4nKSwgX2RlZmluZVByb3BlcnR5KF9leHRlbmRzMiwgXCJ3aGl0ZVNwYWNlXCIsICdub3JtYWwnKSwgX2RlZmluZVByb3BlcnR5KF9leHRlbmRzMiwgXCJ0ZXh0QWxpZ25cIiwgJ2NlbnRlcicpLCBfZGVmaW5lUHJvcGVydHkoX2V4dGVuZHMyLCB0aGVtZS5icmVha3BvaW50cy51cCgnc20nKSwge1xuICAgICAgbWluV2lkdGg6IDE2MFxuICAgIH0pLCBfZXh0ZW5kczIpKSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYm90aCBgaWNvbmAgYW5kIGBsYWJlbGAgYXJlIHByb3ZpZGVkLiAqL1xuICAgIGxhYmVsSWNvbjoge1xuICAgICAgbWluSGVpZ2h0OiA3MixcbiAgICAgIHBhZGRpbmdUb3A6IDksXG4gICAgICAnJiAkd3JhcHBlciA+ICo6Zmlyc3QtY2hpbGQnOiB7XG4gICAgICAgIG1hcmdpbkJvdHRvbTogNlxuICAgICAgfVxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIHRoZSBwYXJlbnQgW2BUYWJzYF0oL2FwaS90YWJzLykgaGFzIGB0ZXh0Q29sb3I9XCJpbmhlcml0XCJgLiAqL1xuICAgIHRleHRDb2xvckluaGVyaXQ6IHtcbiAgICAgIGNvbG9yOiAnaW5oZXJpdCcsXG4gICAgICBvcGFjaXR5OiAwLjcsXG4gICAgICAnJiRzZWxlY3RlZCc6IHtcbiAgICAgICAgb3BhY2l0eTogMVxuICAgICAgfSxcbiAgICAgICcmJGRpc2FibGVkJzoge1xuICAgICAgICBvcGFjaXR5OiAwLjVcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiB0aGUgcGFyZW50IFtgVGFic2BdKC9hcGkvdGFicy8pIGhhcyBgdGV4dENvbG9yPVwicHJpbWFyeVwiYC4gKi9cbiAgICB0ZXh0Q29sb3JQcmltYXJ5OiB7XG4gICAgICBjb2xvcjogdGhlbWUucGFsZXR0ZS50ZXh0LnNlY29uZGFyeSxcbiAgICAgICcmJHNlbGVjdGVkJzoge1xuICAgICAgICBjb2xvcjogdGhlbWUucGFsZXR0ZS5wcmltYXJ5Lm1haW5cbiAgICAgIH0sXG4gICAgICAnJiRkaXNhYmxlZCc6IHtcbiAgICAgICAgY29sb3I6IHRoZW1lLnBhbGV0dGUudGV4dC5kaXNhYmxlZFxuICAgICAgfVxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIHRoZSBwYXJlbnQgW2BUYWJzYF0oL2FwaS90YWJzLykgaGFzIGB0ZXh0Q29sb3I9XCJzZWNvbmRhcnlcImAuICovXG4gICAgdGV4dENvbG9yU2Vjb25kYXJ5OiB7XG4gICAgICBjb2xvcjogdGhlbWUucGFsZXR0ZS50ZXh0LnNlY29uZGFyeSxcbiAgICAgICcmJHNlbGVjdGVkJzoge1xuICAgICAgICBjb2xvcjogdGhlbWUucGFsZXR0ZS5zZWNvbmRhcnkubWFpblxuICAgICAgfSxcbiAgICAgICcmJGRpc2FibGVkJzoge1xuICAgICAgICBjb2xvcjogdGhlbWUucGFsZXR0ZS50ZXh0LmRpc2FibGVkXG4gICAgICB9XG4gICAgfSxcblxuICAgIC8qIFBzZXVkby1jbGFzcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYHNlbGVjdGVkPXt0cnVlfWAgKGNvbnRyb2xsZWQgYnkgdGhlIFRhYnMgY29tcG9uZW50KS4gKi9cbiAgICBzZWxlY3RlZDoge30sXG5cbiAgICAvKiBQc2V1ZG8tY2xhc3MgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBkaXNhYmxlZD17dHJ1ZX1gIChjb250cm9sbGVkIGJ5IHRoZSBUYWJzIGNvbXBvbmVudCkuICovXG4gICAgZGlzYWJsZWQ6IHt9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgZnVsbFdpZHRoPXt0cnVlfWAgKGNvbnRyb2xsZWQgYnkgdGhlIFRhYnMgY29tcG9uZW50KS4gKi9cbiAgICBmdWxsV2lkdGg6IHtcbiAgICAgIGZsZXhTaHJpbms6IDEsXG4gICAgICBmbGV4R3JvdzogMSxcbiAgICAgIGZsZXhCYXNpczogMCxcbiAgICAgIG1heFdpZHRoOiAnbm9uZSdcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgd3JhcHBlZD17dHJ1ZX1gLiAqL1xuICAgIHdyYXBwZWQ6IHtcbiAgICAgIGZvbnRTaXplOiB0aGVtZS50eXBvZ3JhcGh5LnB4VG9SZW0oMTIpLFxuICAgICAgbGluZUhlaWdodDogMS41XG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSBgaWNvbmAgYW5kIGBsYWJlbGAncyB3cmFwcGVyIGVsZW1lbnQuICovXG4gICAgd3JhcHBlcjoge1xuICAgICAgZGlzcGxheTogJ2lubGluZS1mbGV4JyxcbiAgICAgIGFsaWduSXRlbXM6ICdjZW50ZXInLFxuICAgICAganVzdGlmeUNvbnRlbnQ6ICdjZW50ZXInLFxuICAgICAgd2lkdGg6ICcxMDAlJyxcbiAgICAgIGZsZXhEaXJlY3Rpb246ICdjb2x1bW4nXG4gICAgfVxuICB9O1xufTtcbnZhciBUYWIgPSAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBUYWIocHJvcHMsIHJlZikge1xuICB2YXIgY2xhc3NlcyA9IHByb3BzLmNsYXNzZXMsXG4gICAgICBjbGFzc05hbWUgPSBwcm9wcy5jbGFzc05hbWUsXG4gICAgICBfcHJvcHMkZGlzYWJsZWQgPSBwcm9wcy5kaXNhYmxlZCxcbiAgICAgIGRpc2FibGVkID0gX3Byb3BzJGRpc2FibGVkID09PSB2b2lkIDAgPyBmYWxzZSA6IF9wcm9wcyRkaXNhYmxlZCxcbiAgICAgIF9wcm9wcyRkaXNhYmxlRm9jdXNSaSA9IHByb3BzLmRpc2FibGVGb2N1c1JpcHBsZSxcbiAgICAgIGRpc2FibGVGb2N1c1JpcHBsZSA9IF9wcm9wcyRkaXNhYmxlRm9jdXNSaSA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcHJvcHMkZGlzYWJsZUZvY3VzUmksXG4gICAgICBmdWxsV2lkdGggPSBwcm9wcy5mdWxsV2lkdGgsXG4gICAgICBpY29uID0gcHJvcHMuaWNvbixcbiAgICAgIGluZGljYXRvciA9IHByb3BzLmluZGljYXRvcixcbiAgICAgIGxhYmVsID0gcHJvcHMubGFiZWwsXG4gICAgICBvbkNoYW5nZSA9IHByb3BzLm9uQ2hhbmdlLFxuICAgICAgb25DbGljayA9IHByb3BzLm9uQ2xpY2ssXG4gICAgICBvbkZvY3VzID0gcHJvcHMub25Gb2N1cyxcbiAgICAgIHNlbGVjdGVkID0gcHJvcHMuc2VsZWN0ZWQsXG4gICAgICBzZWxlY3Rpb25Gb2xsb3dzRm9jdXMgPSBwcm9wcy5zZWxlY3Rpb25Gb2xsb3dzRm9jdXMsXG4gICAgICBfcHJvcHMkdGV4dENvbG9yID0gcHJvcHMudGV4dENvbG9yLFxuICAgICAgdGV4dENvbG9yID0gX3Byb3BzJHRleHRDb2xvciA9PT0gdm9pZCAwID8gJ2luaGVyaXQnIDogX3Byb3BzJHRleHRDb2xvcixcbiAgICAgIHZhbHVlID0gcHJvcHMudmFsdWUsXG4gICAgICBfcHJvcHMkd3JhcHBlZCA9IHByb3BzLndyYXBwZWQsXG4gICAgICB3cmFwcGVkID0gX3Byb3BzJHdyYXBwZWQgPT09IHZvaWQgMCA/IGZhbHNlIDogX3Byb3BzJHdyYXBwZWQsXG4gICAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhwcm9wcywgW1wiY2xhc3Nlc1wiLCBcImNsYXNzTmFtZVwiLCBcImRpc2FibGVkXCIsIFwiZGlzYWJsZUZvY3VzUmlwcGxlXCIsIFwiZnVsbFdpZHRoXCIsIFwiaWNvblwiLCBcImluZGljYXRvclwiLCBcImxhYmVsXCIsIFwib25DaGFuZ2VcIiwgXCJvbkNsaWNrXCIsIFwib25Gb2N1c1wiLCBcInNlbGVjdGVkXCIsIFwic2VsZWN0aW9uRm9sbG93c0ZvY3VzXCIsIFwidGV4dENvbG9yXCIsIFwidmFsdWVcIiwgXCJ3cmFwcGVkXCJdKTtcblxuICB2YXIgaGFuZGxlQ2xpY2sgPSBmdW5jdGlvbiBoYW5kbGVDbGljayhldmVudCkge1xuICAgIGlmIChvbkNoYW5nZSkge1xuICAgICAgb25DaGFuZ2UoZXZlbnQsIHZhbHVlKTtcbiAgICB9XG5cbiAgICBpZiAob25DbGljaykge1xuICAgICAgb25DbGljayhldmVudCk7XG4gICAgfVxuICB9O1xuXG4gIHZhciBoYW5kbGVGb2N1cyA9IGZ1bmN0aW9uIGhhbmRsZUZvY3VzKGV2ZW50KSB7XG4gICAgaWYgKHNlbGVjdGlvbkZvbGxvd3NGb2N1cyAmJiAhc2VsZWN0ZWQgJiYgb25DaGFuZ2UpIHtcbiAgICAgIG9uQ2hhbmdlKGV2ZW50LCB2YWx1ZSk7XG4gICAgfVxuXG4gICAgaWYgKG9uRm9jdXMpIHtcbiAgICAgIG9uRm9jdXMoZXZlbnQpO1xuICAgIH1cbiAgfTtcblxuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoQnV0dG9uQmFzZSwgX2V4dGVuZHMoe1xuICAgIGZvY3VzUmlwcGxlOiAhZGlzYWJsZUZvY3VzUmlwcGxlLFxuICAgIGNsYXNzTmFtZTogY2xzeChjbGFzc2VzLnJvb3QsIGNsYXNzZXNbXCJ0ZXh0Q29sb3JcIi5jb25jYXQoY2FwaXRhbGl6ZSh0ZXh0Q29sb3IpKV0sIGNsYXNzTmFtZSwgZGlzYWJsZWQgJiYgY2xhc3Nlcy5kaXNhYmxlZCwgc2VsZWN0ZWQgJiYgY2xhc3Nlcy5zZWxlY3RlZCwgbGFiZWwgJiYgaWNvbiAmJiBjbGFzc2VzLmxhYmVsSWNvbiwgZnVsbFdpZHRoICYmIGNsYXNzZXMuZnVsbFdpZHRoLCB3cmFwcGVkICYmIGNsYXNzZXMud3JhcHBlZCksXG4gICAgcmVmOiByZWYsXG4gICAgcm9sZTogXCJ0YWJcIixcbiAgICBcImFyaWEtc2VsZWN0ZWRcIjogc2VsZWN0ZWQsXG4gICAgZGlzYWJsZWQ6IGRpc2FibGVkLFxuICAgIG9uQ2xpY2s6IGhhbmRsZUNsaWNrLFxuICAgIG9uRm9jdXM6IGhhbmRsZUZvY3VzLFxuICAgIHRhYkluZGV4OiBzZWxlY3RlZCA/IDAgOiAtMVxuICB9LCBvdGhlciksIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwic3BhblwiLCB7XG4gICAgY2xhc3NOYW1lOiBjbGFzc2VzLndyYXBwZXJcbiAgfSwgaWNvbiwgbGFiZWwpLCBpbmRpY2F0b3IpO1xufSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBUYWIucHJvcFR5cGVzID0ge1xuICAvKipcbiAgICogVGhpcyBwcm9wIGlzbid0IHN1cHBvcnRlZC5cbiAgICogVXNlIHRoZSBgY29tcG9uZW50YCBwcm9wIGlmIHlvdSBuZWVkIHRvIGNoYW5nZSB0aGUgY2hpbGRyZW4gc3RydWN0dXJlLlxuICAgKi9cbiAgY2hpbGRyZW46IHVuc3VwcG9ydGVkUHJvcCxcblxuICAvKipcbiAgICogT3ZlcnJpZGUgb3IgZXh0ZW5kIHRoZSBzdHlsZXMgYXBwbGllZCB0byB0aGUgY29tcG9uZW50LlxuICAgKiBTZWUgW0NTUyBBUEldKCNjc3MpIGJlbG93IGZvciBtb3JlIGRldGFpbHMuXG4gICAqL1xuICBjbGFzc2VzOiBQcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWQsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgdGFiIHdpbGwgYmUgZGlzYWJsZWQuXG4gICAqL1xuICBkaXNhYmxlZDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlICBrZXlib2FyZCBmb2N1cyByaXBwbGUgd2lsbCBiZSBkaXNhYmxlZC5cbiAgICovXG4gIGRpc2FibGVGb2N1c1JpcHBsZTogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIHJpcHBsZSBlZmZlY3Qgd2lsbCBiZSBkaXNhYmxlZC5cbiAgICovXG4gIGRpc2FibGVSaXBwbGU6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBmdWxsV2lkdGg6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBUaGUgaWNvbiBlbGVtZW50LlxuICAgKi9cbiAgaWNvbjogUHJvcFR5cGVzLm5vZGUsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICogRm9yIHNlcnZlci1zaWRlIHJlbmRlcmluZyBjb25zaWRlcmF0aW9uLCB3ZSBsZXQgdGhlIHNlbGVjdGVkIHRhYlxuICAgKiByZW5kZXIgdGhlIGluZGljYXRvci5cbiAgICovXG4gIGluZGljYXRvcjogUHJvcFR5cGVzLm5vZGUsXG5cbiAgLyoqXG4gICAqIFRoZSBsYWJlbCBlbGVtZW50LlxuICAgKi9cbiAgbGFiZWw6IFByb3BUeXBlcy5ub2RlLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBvbkNoYW5nZTogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIG9uQ2xpY2s6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBvbkZvY3VzOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgc2VsZWN0ZWQ6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBzZWxlY3Rpb25Gb2xsb3dzRm9jdXM6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICB0ZXh0Q29sb3I6IFByb3BUeXBlcy5vbmVPZihbJ3NlY29uZGFyeScsICdwcmltYXJ5JywgJ2luaGVyaXQnXSksXG5cbiAgLyoqXG4gICAqIFlvdSBjYW4gcHJvdmlkZSB5b3VyIG93biB2YWx1ZS4gT3RoZXJ3aXNlLCB3ZSBmYWxsYmFjayB0byB0aGUgY2hpbGQgcG9zaXRpb24gaW5kZXguXG4gICAqL1xuICB2YWx1ZTogUHJvcFR5cGVzLmFueSxcblxuICAvKipcbiAgICogVGFiIGxhYmVscyBhcHBlYXIgaW4gYSBzaW5nbGUgcm93LlxuICAgKiBUaGV5IGNhbiB1c2UgYSBzZWNvbmQgbGluZSBpZiBuZWVkZWQuXG4gICAqL1xuICB3cmFwcGVkOiBQcm9wVHlwZXMuYm9vbFxufSA6IHZvaWQgMDtcbmV4cG9ydCBkZWZhdWx0IHdpdGhTdHlsZXMoc3R5bGVzLCB7XG4gIG5hbWU6ICdNdWlUYWInXG59KShUYWIpOyIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCdcclxuaW1wb3J0IHsgbWFrZVN0eWxlcywgdXNlVGhlbWUgfSBmcm9tICdAbWF0ZXJpYWwtdWkvY29yZS9zdHlsZXMnXHJcbmltcG9ydCBTd2lwZWFibGVWaWV3cyBmcm9tICdyZWFjdC1zd2lwZWFibGUtdmlld3MnXHJcbmltcG9ydCBSZXZpZXcgZnJvbSAnLi9SZXZpZXcnXHJcbmltcG9ydCBSYXRpbmcgZnJvbSAnQG1hdGVyaWFsLXVpL2xhYi9SYXRpbmcnXHJcbmltcG9ydCB7IG5hbm9pZCB9IGZyb20gJ25hbm9pZCdcclxuaW1wb3J0IHtcclxuICAgIFBhcGVyLFxyXG4gICAgVGV4dEZpbGVkLFxyXG4gICAgQXBwQmFyLFxyXG4gICAgQ29udGFpbmVyLFxyXG4gICAgVGFicyxcclxuICAgIFRhYixcclxuICAgIFR5cG9ncmFwaHksXHJcbiAgICBDYXJkLFxyXG4gICAgQ2FyZEhlYWRlcixcclxuICAgIENhcmRDb250ZW50LFxyXG4gICAgQ2FyZE1lZGlhLFxyXG4gICAgRGl2aWRlcixcclxuICAgIENhcmRBY3Rpb25zLFxyXG4gICAgQnV0dG9uLFxyXG4gICAgQ2hpcCxcclxuICAgIEF2YXRhcixcclxuICAgIEljb25CdXR0b24sXHJcbiAgICBUZXh0RmllbGQsXHJcbn0gZnJvbSAnQG1hdGVyaWFsLXVpL2NvcmUnXHJcbmltcG9ydCBEZWxldGVJY29uIGZyb20gJ0BtYXRlcmlhbC11aS9pY29ucy9EZWxldGUnXHJcbmltcG9ydCBDcmVhdGVJY29uIGZyb20gJ0BtYXRlcmlhbC11aS9pY29ucy9DcmVhdGUnXHJcbmltcG9ydCBEb25lSWNvbiBmcm9tICdAbWF0ZXJpYWwtdWkvaWNvbnMvRG9uZSdcclxuaW1wb3J0IEluZm9JY29uIGZyb20gJ0BtYXRlcmlhbC11aS9pY29ucy9JbmZvJ1xyXG5pbXBvcnQgU2VuZEljb24gZnJvbSAnQG1hdGVyaWFsLXVpL2ljb25zL1NlbmQnXHJcblxyXG5mdW5jdGlvbiBhMTF5UHJvcHMoaW5kZXgpIHtcclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgaWQ6IGBmdWxsLXdpZHRoLXRhYi0ke2luZGV4fWAsXHJcbiAgICAgICAgJ2FyaWEtY29udHJvbHMnOiBgZnVsbC13aWR0aC10YWJwYW5lbC0ke2luZGV4fWAsXHJcbiAgICB9XHJcbn1cclxuXHJcbmNvbnN0IHVzZVN0eWxlcyA9IG1ha2VTdHlsZXMoKHRoZW1lKSA9PiAoe1xyXG4gICAgcm9vdDoge1xyXG4gICAgICAgIG1hcmdpbjogdGhlbWUuc3BhY2luZygxLCAwLCAwLCAwKSxcclxuICAgIH0sXHJcbiAgICBtZWRpYToge1xyXG4gICAgICAgIC8vIG1hcmdpbjogdGhlbWUuc3BhY2luZygwLCAwLCAwLjUsIDApLFxyXG4gICAgICAgIGZpbHRlcjogYGJyaWdodG5lc3MoMjUlKWAsXHJcbiAgICAgICAgekluZGV4OiAxLFxyXG4gICAgfSxcclxuICAgIGRpdmlkZXI6IHtcclxuICAgICAgICBtYXJnaW46IHRoZW1lLnNwYWNpbmcoMCwgMCwgMSwgMCksXHJcbiAgICB9LFxyXG4gICAgbmF2OiB7XHJcbiAgICAgICAgZmxleEdyb3c6IDEsXHJcbiAgICAgICAgd2lkdGg6ICcxMDAlJyxcclxuICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IHRoZW1lLnBhbGV0dGUuYmFja2dyb3VuZC5wYXBlcixcclxuICAgIH0sXHJcbiAgICBuYXZCdXR0b246IHtcclxuICAgICAgICBhbGlnblNlbGY6ICdmbGV4LXN0YXJ0JyxcclxuICAgICAgICBjb2xvcjogJyMwMDAnLFxyXG4gICAgICAgIHRleHRTaGFkb3c6ICcwcHggMXB4IDJweCByZ2JhKDI1NSwgMjU1LCAyNTUsIDAuMSknLFxyXG4gICAgfSxcclxuICAgIGNvbnRlbnQ6IHtcclxuICAgICAgICBwYWRkaW5nOiB0aGVtZS5zcGFjaW5nKDEpLFxyXG4gICAgfSxcclxuICAgIHJldmlld3M6IHtcclxuICAgICAgICBkaXNwbGF5OiAnZmxleCcsXHJcbiAgICAgICAgd2lkdGg6ICcxMDAlJyxcclxuICAgICAgICBmbGV4RGlyZWN0aW9uOiAnY29sdW1uJyxcclxuICAgICAgICBib3hTaXppbmc6ICdib3JkZXItYm94JyxcclxuICAgICAgICBqdXN0aWZ5Q29udGVudDogJ2NlbnRlcicsXHJcbiAgICAgICAgJyYgPiAqOm5vdCg6bGFzdC1jaGlsZCknOiB7XHJcbiAgICAgICAgICAgIG1hcmdpbkJvdHRvbTogdGhlbWUuc3BhY2luZygyKSxcclxuICAgICAgICB9LFxyXG4gICAgfSxcclxuICAgIHJldmlld0NvbnRlbnQ6IHtcclxuICAgICAgICBkaXNwbGF5OiAnZmxleCcsXHJcbiAgICAgICAgd2lkdGg6ICcxMDAlJyxcclxuICAgICAgICBhbGlnbkl0ZW1zOiAnY2VudGVyJyxcclxuICAgICAgICAnJiA+ICo6bm90KDpsYXN0LWNoaWxkKSc6IHtcclxuICAgICAgICAgICAgbWFyZ2luUmlnaHQ6IHRoZW1lLnNwYWNpbmcoMiksXHJcbiAgICAgICAgfSxcclxuICAgIH0sXHJcbiAgICByZXZpZXdzTGlzdDoge1xyXG4gICAgICAgIGRpc3BsYXk6ICdmbGV4JyxcclxuICAgICAgICBmbGV4RGlyZWN0aW9uOiAnY29sdW1uJyxcclxuICAgICAgICB3aWR0aDogJzEwMCUnLFxyXG4gICAgfSxcclxuICAgIHJldmlld0lucHV0OiB7XHJcbiAgICAgICAgZmxleEdyb3c6IDEsXHJcbiAgICB9LFxyXG4gICAgbGVzc29uSGVhZGVyOiB7XHJcbiAgICAgICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXHJcbiAgICAgICAgZGlzcGxheTogJ2ZsZXgnLFxyXG4gICAgICAgIGZsZXhEaXJlY3Rpb246ICdjb2x1bW4nLFxyXG4gICAgICAgIHpJbmRleDogMTAwMCxcclxuICAgICAgICBoZWlnaHQ6IDIwMCxcclxuICAgICAgICBib3hTaXppbmc6ICdib3JkZXItYm94JyxcclxuICAgICAgICBwYWRkaW5nOiB0aGVtZS5zcGFjaW5nKDAsIDAsIDQsIDIpLFxyXG4gICAgICAgIGp1c3RpZnlDb250ZW50OiAnc3BhY2UtYmV0d2VlbicsXHJcbiAgICB9LFxyXG59KSlcclxuXHJcbmZ1bmN0aW9uIFRhYlBhbmVsKHByb3BzKSB7XHJcbiAgICBjb25zdCB7IGNoaWxkcmVuLCB2YWx1ZSwgaW5kZXgsIC4uLm90aGVyIH0gPSBwcm9wc1xyXG4gICAgcmV0dXJuIDxkaXY+c2RhZHNzYWQ8L2Rpdj5cclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gTGVzc29uKHByb3BzKSB7XHJcbiAgICBjb25zdCBjbGFzc2VzID0gdXNlU3R5bGVzKClcclxuICAgIGNvbnN0IHRoZW1lID0gdXNlVGhlbWUoKVxyXG4gICAgY29uc3QgeyBsZXNzb24sIGRlbGV0ZUxlc29uQWN0aW9uLCBsZXNzb25JZCwgcHJvZmlsZSB9ID0gcHJvcHNcclxuICAgIGNvbnN0IFtpc0VkaXQsIHNldElzRWRpdF0gPSBSZWFjdC51c2VTdGF0ZShmYWxzZSlcclxuICAgIGNvbnN0IFt2YWx1ZSwgc2V0VmFsdWVdID0gUmVhY3QudXNlU3RhdGUoMClcclxuICAgIGNvbnN0IFtyZXZpZXcsIHNldFJldmlld10gPSBSZWFjdC51c2VTdGF0ZSgnJylcclxuXHJcbiAgICBpZiAobGVzc29uID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICByZXR1cm4gPGRpdj7Qo9GA0L7QuiDQvdC1INC90LDQudC00LXQvSDQstC10YDQvdC40YLQtdGB0Ywg0L3QsCDQs9C70LDQstC90YPRjiE8L2Rpdj5cclxuICAgIH1cclxuXHJcbiAgICBjb25zdCBoYW5kbGVDaGFuZ2UgPSAoZXZlbnQsIG5ld1ZhbHVlKSA9PiB7XHJcbiAgICAgICAgc2V0VmFsdWUobmV3VmFsdWUpXHJcbiAgICB9XHJcblxyXG4gICAgY29uc3QgaGFuZGxlQ2hhbmdlSW5kZXggPSAoaW5kZXgpID0+IHtcclxuICAgICAgICBzZXRWYWx1ZShpbmRleClcclxuICAgIH1cclxuXHJcbiAgICBjb25zdCBoYW5kbGVTZXRSZXZpZXcgPSAoKSA9PiB7XHJcbiAgICAgICAgY29uc3Qgc2VhcmNoUmV2aWV3ID0gcHJvcHMubGVzc29uLnJldmlld3MuZmluZChcclxuICAgICAgICAgICAgKGl0ZW0pID0+XHJcbiAgICAgICAgICAgICAgICBpdGVtLmF1dGhvciA9PT1cclxuICAgICAgICAgICAgICAgIGAke3Byb3BzLnByb2ZpbGUuZmlyc3ROYW1lfSAke3Byb3BzLnByb2ZpbGUubGFzdE5hbWV9YCxcclxuICAgICAgICApXHJcbiAgICAgICAgLy8gaWYgKHNlYXJjaFJldmlldykge1xyXG4gICAgICAgIC8vICAgICBhbGVydCgn0J7RgtC30YvQsiDRg9C20LUg0LXRgdGC0YwnKVxyXG4gICAgICAgIC8vICAgICByZXR1cm5cclxuICAgICAgICAvLyB9IGVsc2Uge1xyXG4gICAgICAgIHByb3BzLmFkZFJldmlld0xlc3Nvbih7XHJcbiAgICAgICAgICAgIGlkOiBwcm9wcy5sZXNzb25JZCxcclxuICAgICAgICAgICAgcmV2aWV3OiB7XHJcbiAgICAgICAgICAgICAgICBpZDogbmFub2lkKDQpLFxyXG4gICAgICAgICAgICAgICAgYXV0aG9yOiBgJHtwcm9wcy5wcm9maWxlLmZpcnN0TmFtZX0gJHtwcm9wcy5wcm9maWxlLmxhc3ROYW1lfWAsXHJcbiAgICAgICAgICAgICAgICB0ZXh0OiByZXZpZXcsXHJcbiAgICAgICAgICAgICAgICBhdmF0YXI6IHByb3BzLnByb2ZpbGUuYXZhdGFyLFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgIH0pXHJcbiAgICAgICAgc2V0UmV2aWV3KCcnKVxyXG4gICAgICAgIC8vIH1cclxuICAgIH1cclxuXHJcbiAgICBjb25zdCBoYW5kbGVEZWxldGVSZXZpZXcgPSAoZXZlbnQsIGlkKSA9PiB7XHJcbiAgICAgICAgcHJvcHMucmVtb3ZlUmV2aWV3TGVzc29uKHtcclxuICAgICAgICAgICAgbGVzc29uSWQ6IHByb3BzLmxlc3NvbklkLFxyXG4gICAgICAgICAgICByZXZpZXdJZDogaWQsXHJcbiAgICAgICAgfSlcclxuICAgIH1cclxuXHJcbiAgICBjb25zdCB7XHJcbiAgICAgICAgaWQsXHJcbiAgICAgICAgY2F0ZWdvcnksXHJcbiAgICAgICAgY29udGVudCxcclxuICAgICAgICB0aXRsZSxcclxuICAgICAgICBwcmljZSxcclxuICAgICAgICBjb3ZlcixcclxuICAgICAgICByYXRpbmcsXHJcbiAgICAgICAgYXV0aG9yLFxyXG4gICAgfSA9IGxlc3NvblxyXG5cclxuICAgIGNvbnN0IGhhbmRsZURlbGV0ZUxlc3NvbiA9ICgpID0+IHtcclxuICAgICAgICBkZWxldGVMZXNvbkFjdGlvbihsZXNzb25JZClcclxuICAgICAgICBwcm9wcy5yZWRpcmVjdCgnL2xlc3NvbnMnKVxyXG4gICAgfVxyXG4gICAgY29uc3QgaGFuZGxlUmVkaXJlY3QgPSAoKSA9PiB7XHJcbiAgICAgICAgcHJvcHMucmVkaXJlY3QoJy9sZXNzb25zJylcclxuICAgIH1cclxuXHJcbiAgICBjb25zdCBoYW5kbGVFZGl0ID0gKCkgPT4ge1xyXG4gICAgICAgIHNldElzRWRpdCghaXNFZGl0KVxyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiAoXHJcbiAgICAgICAgPGRpdiBzdHlsZT17eyBwb3NpdGlvbjogJ3JlbGF0aXZlJyB9fT5cclxuICAgICAgICAgICAgPENvbnRhaW5lciBtYXhXaWR0aD1cInhsXCIgY2xhc3NOYW1lPXtjbGFzc2VzLmxlc3NvbkhlYWRlcn0+XHJcbiAgICAgICAgICAgICAgICA8QnV0dG9uXHJcbiAgICAgICAgICAgICAgICAgICAgb25DbGljaz17aGFuZGxlUmVkaXJlY3R9XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyaWFudD1cInRleHRcIlxyXG4gICAgICAgICAgICAgICAgICAgIGNvbG9yPVwicHJpbWFyeVwiXHJcbiAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPXtjbGFzc2VzLm5hdkJ1dHRvbn1cclxuICAgICAgICAgICAgICAgID5cclxuICAgICAgICAgICAgICAgICAgICDQndCw0LfQsNC0INC6INGD0YDQvtC60LDQvFxyXG4gICAgICAgICAgICAgICAgPC9CdXR0b24+XHJcbiAgICAgICAgICAgICAgICA8VHlwb2dyYXBoeSB2YXJpYW50PVwiaDNcIiBjb21wb25lbnQ9XCJoM1wiIGNvbG9yPVwidGV4dFByaW1hcnlcIj5cclxuICAgICAgICAgICAgICAgICAgICB7dGl0bGV9XHJcbiAgICAgICAgICAgICAgICA8L1R5cG9ncmFwaHk+XHJcbiAgICAgICAgICAgICAgICA8VHlwb2dyYXBoeSB2YXJpYW50PVwiYm9keTJcIiBjb21wb25lbnQ9XCJzcGFuXCIgY29sb3I9XCJzZWNvbmRhcnlcIj5cclxuICAgICAgICAgICAgICAgICAgICB7cHJvZmlsZS5teUxlc3NvbnMuZmluZCgoaXRlbSkgPT4gaXRlbSA9PT0gbGVzc29uLmlkKSA/IChcclxuICAgICAgICAgICAgICAgICAgICAgICAgPENoaXBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yPVwicHJpbWFyeVwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpY29uPXs8RG9uZUljb24gLz59XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYWJlbD1cItCSINC80L7QuNGFINCj0YDQvtC60LDRhVwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaXplPVwic21hbGxcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvPlxyXG4gICAgICAgICAgICAgICAgICAgICkgOiAoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxDaGlwXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2xvcj1cInByaW1hcnlcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWNvbj17PEluZm9JY29uIC8+fVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGFiZWw9XCLQlNC+0YHRgtGD0L/QtdC9XCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNpemU9XCJzbWFsbFwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8+XHJcbiAgICAgICAgICAgICAgICAgICAgKX1cclxuICAgICAgICAgICAgICAgIDwvVHlwb2dyYXBoeT5cclxuICAgICAgICAgICAgPC9Db250YWluZXI+XHJcbiAgICAgICAgICAgIDxDYXJkTWVkaWFcclxuICAgICAgICAgICAgICAgIGNvbXBvbmVudD1cImltZ1wiXHJcbiAgICAgICAgICAgICAgICBhbHQ9XCJjb3Zlcl9sZXNzb25cIlxyXG4gICAgICAgICAgICAgICAgY2xhc3NOYW1lPXtjbGFzc2VzLm1lZGlhfVxyXG4gICAgICAgICAgICAgICAgaGVpZ2h0PVwiMjAwXCJcclxuICAgICAgICAgICAgICAgIGltYWdlPXtjb3Zlcn1cclxuICAgICAgICAgICAgICAgIHRpdGxlPXt0aXRsZX1cclxuICAgICAgICAgICAgLz5cclxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9e2NsYXNzZXMubmF2fT5cclxuICAgICAgICAgICAgICAgIDxBcHBCYXIgcG9zaXRpb249XCJzdGF0aWNcIiBjb2xvcj1cImRlZmF1bHRcIj5cclxuICAgICAgICAgICAgICAgICAgICA8VGFic1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZT17dmFsdWV9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2hhbmdlPXtoYW5kbGVDaGFuZ2V9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGluZGljYXRvckNvbG9yPVwicHJpbWFyeVwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRleHRDb2xvcj1cInByaW1hcnlcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXJpYW50PVwiZnVsbFdpZHRoXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgYXJpYS1sYWJlbD1cImZ1bGwgd2lkdGggdGFicyBleGFtcGxlXCJcclxuICAgICAgICAgICAgICAgICAgICA+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxUYWIgbGFiZWw9XCLQodC+0LTQtdGA0LbQsNC90LjQtVwiIHsuLi5hMTF5UHJvcHMoMCl9IC8+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxUYWIgbGFiZWw9XCLQntCxINGD0YDQvtC60LVcIiB7Li4uYTExeVByb3BzKDEpfSAvPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8VGFiIGxhYmVsPVwi0J7RgtC30YvQstGLXCIgey4uLmExMXlQcm9wcygyKX0gLz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPFRhYiBsYWJlbD1cItCS0L7Qv9GA0L7RgdGLINC4INC+0YLQstC10YLRi1wiIHsuLi5hMTF5UHJvcHMoMyl9IC8+XHJcbiAgICAgICAgICAgICAgICAgICAgPC9UYWJzPlxyXG4gICAgICAgICAgICAgICAgPC9BcHBCYXI+XHJcbiAgICAgICAgICAgICAgICA8U3dpcGVhYmxlVmlld3NcclxuICAgICAgICAgICAgICAgICAgICBheGlzPXt0aGVtZS5kaXJlY3Rpb24gPT09ICdydGwnID8gJ3gtcmV2ZXJzZScgOiAneCd9XHJcbiAgICAgICAgICAgICAgICAgICAgaW5kZXg9e3ZhbHVlfVxyXG4gICAgICAgICAgICAgICAgICAgIG9uQ2hhbmdlSW5kZXg9e2hhbmRsZUNoYW5nZUluZGV4fVxyXG4gICAgICAgICAgICAgICAgPlxyXG4gICAgICAgICAgICAgICAgICAgIDxDYXJkXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT17Y2xhc3Nlcy5yb290fVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpbmRleD17MH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgZGlyPXt0aGVtZS5kaXJlY3Rpb259XHJcbiAgICAgICAgICAgICAgICAgICAgPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8Q2FyZENvbnRlbnQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8VHlwb2dyYXBoeVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhcmlhbnQ9XCJib2R5MVwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sb3I9XCJ0ZXh0UHJpbWFyeVwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29tcG9uZW50PVwiaDNcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgINCe0L/QuNGB0LDQvdC40LUg0KPRgNC+0LrQsFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9UeXBvZ3JhcGh5PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAge2lzRWRpdCA/IG51bGwgOiAoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPFR5cG9ncmFwaHlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyaWFudD1cImJvZHkyXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sb3I9XCJ0ZXh0UHJpbWFyeVwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbXBvbmVudD1cInBcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge2NvbnRlbnR9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9UeXBvZ3JhcGh5PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC9DYXJkQ29udGVudD5cclxuICAgICAgICAgICAgICAgICAgICA8L0NhcmQ+XHJcbiAgICAgICAgICAgICAgICAgICAgPENhcmRcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPXtjbGFzc2VzLnJvb3R9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGluZGV4PXsxfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBkaXI9e3RoZW1lLmRpcmVjdGlvbn1cclxuICAgICAgICAgICAgICAgICAgICA+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxDYXJkQ29udGVudD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxUeXBvZ3JhcGh5PtCa0LDRgtC10LPQvtGA0LjRjzo8L1R5cG9ncmFwaHk+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8Q2hpcFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF2YXRhcj17PEF2YXRhcj57Y2F0ZWdvcnlbMF19PC9BdmF0YXI+fVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhYmVsPXtjYXRlZ29yeX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9e2NsYXNzZXMuZGl2aWRlcn1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2xvcj1cInByaW1hcnlcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxUeXBvZ3JhcGh5PtCh0LvQvtC20L3QvtGB0YLRjDogNTwvVHlwb2dyYXBoeT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxUeXBvZ3JhcGh5PtCQ0LLRgtC+0YA6IHthdXRob3J9PC9UeXBvZ3JhcGh5PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPFR5cG9ncmFwaHk+0KDQtdC50YLQuNC90LM6PC9UeXBvZ3JhcGh5PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPFJhdGluZyBuYW1lPVwicmVhZC1vbmx5XCIgdmFsdWU9e3JhdGluZ30gcmVhZE9ubHkgLz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC9DYXJkQ29udGVudD5cclxuICAgICAgICAgICAgICAgICAgICA8L0NhcmQ+XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIDxDYXJkXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT17Y2xhc3Nlcy5yb290fVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpbmRleD17Mn1cclxuICAgICAgICAgICAgICAgICAgICAgICAgZGlyPXt0aGVtZS5kaXJlY3Rpb259XHJcbiAgICAgICAgICAgICAgICAgICAgPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8Q2FyZENvbnRlbnQgY2xhc3NOYW1lPXtjbGFzc2VzLnJldmlld3N9PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9e2NsYXNzZXMucmV2aWV3c0xpc3R9PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxUeXBvZ3JhcGh5XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhcmlhbnQ9XCJoNFwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbXBvbmVudD1cImgzXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGU9e3sgbWFyZ2luQm90dG9tOiB0aGVtZS5zcGFjaW5nKDEpIH19XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICDQntGC0LfRi9Cy0YtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L1R5cG9ncmFwaHk+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPERpdmlkZXJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyaWFudD1cImZ1bGxXaWR0aFwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9yaWVudGF0aW9uPVwiaG9yaXpvbnRhbFwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlPXt7IG1hcmdpbkJvdHRvbTogdGhlbWUuc3BhY2luZygyKSB9fVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge3Byb3BzLmxlc3Nvbi5yZXZpZXdzLm1hcCgoaXRlbSwgaWR4KSA9PiAoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxQYXBlclxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAga2V5PXtpdGVtLmlkfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxldmF0aW9uPXsyfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGU9e3tcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXJnaW5Cb3R0b206IHRoZW1lLnNwYWNpbmcoMiksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFkZGluZzogdGhlbWUuc3BhY2luZygxKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBib3hTaXppbmc6ICdib3JkZXItYm94JyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH19XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPXtjbGFzc2VzLnJldmlld0NvbnRlbnR9PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxBdmF0YXIgc3JjPXtpdGVtLmF2YXRhcn0gLz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8VHlwb2dyYXBoeVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXJpYW50PVwiYm9keTJcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb21wb25lbnQ9XCJzcGFuXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGU9e3sgZmxleEdyb3c6IDEgfX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtpdGVtLmF1dGhvcn06IHtpdGVtLnRleHR9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9UeXBvZ3JhcGh5PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtpdGVtLmF1dGhvciA9PT1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBgJHtwcm9wcy5wcm9maWxlLmZpcnN0TmFtZX0gJHtwcm9wcy5wcm9maWxlLmxhc3ROYW1lfWAgPyAoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxDYXJkQWN0aW9ucz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxJY29uQnV0dG9uPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxDcmVhdGVJY29uIC8+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L0ljb25CdXR0b24+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8SWNvbkJ1dHRvblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkPXtpdGVtLmlkfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2xpY2s9eyhldmVudCkgPT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaGFuZGxlRGVsZXRlUmV2aWV3KFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpdGVtLmlkLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxEZWxldGVJY29uIC8+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L0ljb25CdXR0b24+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvQ2FyZEFjdGlvbnM+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKSA6IG51bGx9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9QYXBlcj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApKX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAge3Byb3BzLmxlc3Nvbi5yZXZpZXdzLmxlbmd0aCA+IDAgPyAoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPERpdmlkZXJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3JpZW50YXRpb249XCJob3Jpem9udGFsXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyaWFudD1cImZ1bGxXaWR0aFwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICkgOiBudWxsfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9e2NsYXNzZXMucmV2aWV3Q29udGVudH0+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPEF2YXRhciBzcmM9e3Byb2ZpbGUuYXZhdGFyfSAvPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxUZXh0RmllbGRcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI9e1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvcHMubGVzc29uLnJldmlld3MubGVuZ3RoID4gMFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gJ9Ce0YHRgtCw0LLRjNGC0LUg0L7RgtC30YvQsiAnXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOiAn0KHRgtCw0L3RjNGC0LUg0L/QtdGA0LLRi9C8LCDQutGC0L4g0L7RgdGC0LDQstC40YIg0L7RgtC30YvQsiDQvtCxINGN0YLQvtC8INGD0YDQvtC60LUhJ1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhcmlhbnQ9XCJvdXRsaW5lZFwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT17Y2xhc3Nlcy5yZXZpZXdJbnB1dH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2l6ZT1cInNtYWxsXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZT1cInRleHRcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbktleVByZXNzPXsoZXZlbnQpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChldmVudC5rZXkgPT09ICdFbnRlcicpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBoYW5kbGVTZXRSZXZpZXcoKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9fVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZT17cmV2aWV3fVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbkNoYW5nZT17KGUpID0+IHNldFJldmlldyhlLnRhcmdldC52YWx1ZSl9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8SWNvbkJ1dHRvblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbkNsaWNrPXtoYW5kbGVTZXRSZXZpZXd9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yPVwicHJpbWFyeVwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8U2VuZEljb24gLz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L0ljb25CdXR0b24+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC9DYXJkQ29udGVudD5cclxuICAgICAgICAgICAgICAgICAgICA8L0NhcmQ+XHJcbiAgICAgICAgICAgICAgICAgICAgPFJldmlld1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZT17dmFsdWV9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGluZGV4PXszfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBkaXI9e3RoZW1lLmRpcmVjdGlvbn1cclxuICAgICAgICAgICAgICAgICAgICAgICAgcHJvZmlsZT17cHJvcHMucHJvZmlsZX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgbGVzc29uPXtwcm9wcy5sZXNzb259XHJcbiAgICAgICAgICAgICAgICAgICAgPjwvUmV2aWV3PlxyXG4gICAgICAgICAgICAgICAgPC9Td2lwZWFibGVWaWV3cz5cclxuICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgPC9kaXY+XHJcbiAgICApXHJcbn1cclxuIiwiZXhwb3J0IGNvbnN0IExFU1NPTl9MT0FEID0gJ0xFU1NPTl9MT0FEJ1xyXG5leHBvcnQgY29uc3QgTEVTU09OX0RFTEVURSA9ICdMRVNTT05fREVMRVRFJ1xyXG5leHBvcnQgY29uc3QgTEVTU09OX0NSRUFURSA9ICdMRVNTT05fQ1JFQVRFJ1xyXG5leHBvcnQgY29uc3QgTEVTU09OX1NFTEVDVCA9ICdMRVNTT05fU0VMRUNUJ1xyXG5leHBvcnQgY29uc3QgUkVWSUVXX0FERCA9ICdSRVZJRVdfQUREJ1xyXG5leHBvcnQgY29uc3QgUkVNT1ZFX1JFVklFVyA9ICdSRU1PVkVfUkVWSUVXJ1xyXG5cclxuZXhwb3J0IGNvbnN0IGxlc3NvbnNMb2FkQWN0aW9uID0gKCkgPT4gKHtcclxuICAgIHR5cGU6IExFU1NPTl9MT0FELFxyXG59KVxyXG5cclxuZXhwb3J0IGNvbnN0IGNyZWF0ZUxlc3NvbkFjdGlvbiA9IChkYXRhKSA9PiAoe1xyXG4gICAgdHlwZTogTEVTU09OX0NSRUFURSxcclxuICAgIHBheWxvYWQ6IGRhdGEsXHJcbn0pXHJcblxyXG5leHBvcnQgY29uc3QgZGVsZXRlTGVzb25BY3Rpb24gPSAoaWQpID0+ICh7XHJcbiAgICB0eXBlOiBMRVNTT05fREVMRVRFLFxyXG4gICAgcGF5bG9hZDogaWQsXHJcbn0pXHJcblxyXG5leHBvcnQgY29uc3Qgc2VsZWN0TGVzc29uQWN0aW9uID0gKGlkKSA9PiAoe1xyXG4gICAgdHlwZTogTEVTU09OX1NFTEVDVCxcclxuICAgIHBheWxvYWQ6IGlkLFxyXG59KVxyXG5cclxuZXhwb3J0IGNvbnN0IGFkZFJldmlld0xlc3NvbiA9IChkYXRhKSA9PiAoe1xyXG4gICAgdHlwZTogUkVWSUVXX0FERCxcclxuICAgIHBheWxvYWQ6IGRhdGEsXHJcbn0pXHJcblxyXG5leHBvcnQgY29uc3QgcmVtb3ZlUmV2aWV3TGVzc29uID0gKGRhdGEpID0+ICh7XHJcbiAgICB0eXBlOiBSRU1PVkVfUkVWSUVXLFxyXG4gICAgcGF5bG9hZDogZGF0YSxcclxufSlcclxuIiwiaW1wb3J0IHsgY29ubmVjdCB9IGZyb20gJ3JlYWN0LXJlZHV4J1xyXG5pbXBvcnQgeyBwdXNoIH0gZnJvbSAnY29ubmVjdGVkLXJlYWN0LXJvdXRlcidcclxuaW1wb3J0IExlc3NvbiBmcm9tICdjb21wb25lbnRzL0xlc3Nvbi9MZXNzb24nXHJcbmltcG9ydCB7XHJcbiAgICBsZXNzb25zTG9hZEFjdGlvbixcclxuICAgIGRlbGV0ZUxlc29uQWN0aW9uLFxyXG4gICAgYWRkUmV2aWV3TGVzc29uLFxyXG4gICAgcmVtb3ZlUmV2aWV3TGVzc29uLFxyXG59IGZyb20gJ2FjdGlvbnMvbGVzc29ucydcclxuXHJcbmNvbnN0IG1hcFN0YXRlVG9Qcm9wcyA9IChzdGF0ZSkgPT4ge1xyXG4gICAgY29uc29sZS5sb2coc3RhdGUpXHJcbiAgICBjb25zdCB7IGxlc3NvbklkLCBsZXNzb25zTGlzdCB9ID0gc3RhdGUubGVzc29uc1xyXG4gICAgY29uc3QgeyBwcm9maWxlIH0gPSBzdGF0ZS5wcm9maWxlXHJcbiAgICBjb25zdCBsZXNzb24gPSBsZXNzb25zTGlzdFtsZXNzb25JZF1cclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgbGVzc29uSWQsXHJcbiAgICAgICAgbGVzc29uc0xpc3QsXHJcbiAgICAgICAgbGVzc29uLFxyXG4gICAgICAgIHByb2ZpbGUsXHJcbiAgICB9XHJcbn1cclxuXHJcbmNvbnN0IG1hcERpc3BhdGNoVG9Qcm9wcyA9IHtcclxuICAgIGxlc3NvbnNMb2FkQWN0aW9uLFxyXG4gICAgZGVsZXRlTGVzb25BY3Rpb24sXHJcbiAgICBhZGRSZXZpZXdMZXNzb24sXHJcbiAgICByZW1vdmVSZXZpZXdMZXNzb24sXHJcbiAgICByZWRpcmVjdDogcHVzaCxcclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgY29ubmVjdChtYXBTdGF0ZVRvUHJvcHMsIG1hcERpc3BhdGNoVG9Qcm9wcykoTGVzc29uKVxyXG4iLCJleHBvcnQgY29uc3QgTU9CSUxFX0RSQVdFUl9TVEFURV9MT0FEID0gJ01PQklMRV9EUkFXRVJfU1RBVEVfTE9BRCdcclxuZXhwb3J0IGNvbnN0IE1PQklMRV9EUkFXRVJfU1RBVEVfU0VUID0gJ01PQklMRV9EUkFXRVJfU1RBVEVfU0VUJ1xyXG5cclxuZXhwb3J0IGNvbnN0IG1vYmlsZURyYXdlclN0YXRlTG9hZEFjdGlvbiA9ICgpID0+ICh7XHJcbiAgICB0eXBlOiBNT0JJTEVfRFJBV0VSX1NUQVRFX0xPQUQsXHJcbn0pXHJcblxyXG5leHBvcnQgY29uc3QgbW9iaWxlRHJhd2VyU3RhdGVTZXRBY3Rpb24gPSAoKSA9PiAoe1xyXG4gICAgdHlwZTogTU9CSUxFX0RSQVdFUl9TVEFURV9TRVQsXHJcbn0pXHJcbiIsImV4cG9ydCBjb25zdCBQUk9GSUxFX0xPQUQgPSAnUFJPRklMRV9MT0FEJ1xyXG5leHBvcnQgY29uc3QgUFJPRklMRV9DSEFOR0VfTkFNRSA9ICdQUk9GSUxFX0NIQU5HRV9OQU1FJ1xyXG5leHBvcnQgY29uc3QgVVNFUlNfTE9BRCA9ICdVU0VSU19MT0FEJ1xyXG5leHBvcnQgY29uc3QgUkVHSVNUUkFUSU9OID0gJ1JFR0lTVFJBVElPTidcclxuZXhwb3J0IGNvbnN0IExPR09VVCA9ICdMT0dPVVQnXHJcbmV4cG9ydCBjb25zdCBMT0dJTiA9ICdMT0dJTidcclxuXHJcbmV4cG9ydCBjb25zdCBsb2dvdXRBY3Rpb24gPSAoKSA9PiAoe1xyXG4gICAgdHlwZTogTE9HT1VULFxyXG59KVxyXG5cclxuZXhwb3J0IGNvbnN0IGxvZ2luQWN0aW9uID0gKGRhdGEpID0+ICh7XHJcbiAgICB0eXBlOiBMT0dJTixcclxuICAgIHBheWxvYWQ6IGRhdGEsXHJcbn0pXHJcbmV4cG9ydCBjb25zdCBwcm9maWxlTG9hZEFjdGlvbiA9ICgpID0+ICh7XHJcbiAgICB0eXBlOiBQUk9GSUxFX0xPQUQsXHJcbn0pXHJcblxyXG5leHBvcnQgY29uc3QgdXNlcnNMb2FkQWN0aW9uID0gKCkgPT4gKHtcclxuICAgIHR5cGU6IFVTRVJTX0xPQUQsXHJcbn0pXHJcblxyXG5leHBvcnQgY29uc3QgcHJvZmlsZUNoYW5nZU5hbWVBY3Rpb24gPSAobmFtZSkgPT4gKHtcclxuICAgIHR5cGU6IFBST0ZJTEVfQ0hBTkdFX05BTUUsXHJcbiAgICBwYXlsb2FkOiBuYW1lLFxyXG59KVxyXG5cclxuZXhwb3J0IGNvbnN0IHJlZ2lzdHJhdGlvbkFjdGlvbiA9IChwcm9maWxlRGF0YSkgPT4gKHtcclxuICAgIHR5cGU6IFJFR0lTVFJBVElPTixcclxuICAgIHBheWxvYWQ6IHByb2ZpbGVEYXRhLFxyXG59KVxyXG4iLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzXCI7XG5pbXBvcnQgX2RlZmluZVByb3BlcnR5IGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9kZWZpbmVQcm9wZXJ0eVwiO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBjbHN4IGZyb20gJ2Nsc3gnO1xuaW1wb3J0IHdpdGhTdHlsZXMgZnJvbSAnLi4vc3R5bGVzL3dpdGhTdHlsZXMnO1xuZXhwb3J0IHZhciBzdHlsZXMgPSBmdW5jdGlvbiBzdHlsZXModGhlbWUpIHtcbiAgcmV0dXJuIHtcbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50LiAqL1xuICAgIHJvb3Q6IHtcbiAgICAgIHBvc2l0aW9uOiAncmVsYXRpdmUnLFxuICAgICAgZGlzcGxheTogJ2ZsZXgnLFxuICAgICAgYWxpZ25JdGVtczogJ2NlbnRlcidcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgZGlzYWJsZUd1dHRlcnM9e2ZhbHNlfWAuICovXG4gICAgZ3V0dGVyczogX2RlZmluZVByb3BlcnR5KHtcbiAgICAgIHBhZGRpbmdMZWZ0OiB0aGVtZS5zcGFjaW5nKDIpLFxuICAgICAgcGFkZGluZ1JpZ2h0OiB0aGVtZS5zcGFjaW5nKDIpXG4gICAgfSwgdGhlbWUuYnJlYWtwb2ludHMudXAoJ3NtJyksIHtcbiAgICAgIHBhZGRpbmdMZWZ0OiB0aGVtZS5zcGFjaW5nKDMpLFxuICAgICAgcGFkZGluZ1JpZ2h0OiB0aGVtZS5zcGFjaW5nKDMpXG4gICAgfSksXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGB2YXJpYW50PVwicmVndWxhclwiYC4gKi9cbiAgICByZWd1bGFyOiB0aGVtZS5taXhpbnMudG9vbGJhcixcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYHZhcmlhbnQ9XCJkZW5zZVwiYC4gKi9cbiAgICBkZW5zZToge1xuICAgICAgbWluSGVpZ2h0OiA0OFxuICAgIH1cbiAgfTtcbn07XG52YXIgVG9vbGJhciA9IC8qI19fUFVSRV9fKi9SZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIFRvb2xiYXIocHJvcHMsIHJlZikge1xuICB2YXIgY2xhc3NlcyA9IHByb3BzLmNsYXNzZXMsXG4gICAgICBjbGFzc05hbWUgPSBwcm9wcy5jbGFzc05hbWUsXG4gICAgICBfcHJvcHMkY29tcG9uZW50ID0gcHJvcHMuY29tcG9uZW50LFxuICAgICAgQ29tcG9uZW50ID0gX3Byb3BzJGNvbXBvbmVudCA9PT0gdm9pZCAwID8gJ2RpdicgOiBfcHJvcHMkY29tcG9uZW50LFxuICAgICAgX3Byb3BzJGRpc2FibGVHdXR0ZXJzID0gcHJvcHMuZGlzYWJsZUd1dHRlcnMsXG4gICAgICBkaXNhYmxlR3V0dGVycyA9IF9wcm9wcyRkaXNhYmxlR3V0dGVycyA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcHJvcHMkZGlzYWJsZUd1dHRlcnMsXG4gICAgICBfcHJvcHMkdmFyaWFudCA9IHByb3BzLnZhcmlhbnQsXG4gICAgICB2YXJpYW50ID0gX3Byb3BzJHZhcmlhbnQgPT09IHZvaWQgMCA/ICdyZWd1bGFyJyA6IF9wcm9wcyR2YXJpYW50LFxuICAgICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMocHJvcHMsIFtcImNsYXNzZXNcIiwgXCJjbGFzc05hbWVcIiwgXCJjb21wb25lbnRcIiwgXCJkaXNhYmxlR3V0dGVyc1wiLCBcInZhcmlhbnRcIl0pO1xuXG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChDb21wb25lbnQsIF9leHRlbmRzKHtcbiAgICBjbGFzc05hbWU6IGNsc3goY2xhc3Nlcy5yb290LCBjbGFzc2VzW3ZhcmlhbnRdLCBjbGFzc05hbWUsICFkaXNhYmxlR3V0dGVycyAmJiBjbGFzc2VzLmd1dHRlcnMpLFxuICAgIHJlZjogcmVmXG4gIH0sIG90aGVyKSk7XG59KTtcbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFRvb2xiYXIucHJvcFR5cGVzID0ge1xuICAvKipcbiAgICogVG9vbGJhciBjaGlsZHJlbiwgdXN1YWxseSBhIG1peHR1cmUgb2YgYEljb25CdXR0b25gLCBgQnV0dG9uYCBhbmQgYFR5cG9ncmFwaHlgLlxuICAgKi9cbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuXG4gIC8qKlxuICAgKiBPdmVycmlkZSBvciBleHRlbmQgdGhlIHN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAqIFNlZSBbQ1NTIEFQSV0oI2NzcykgYmVsb3cgZm9yIG1vcmUgZGV0YWlscy5cbiAgICovXG4gIGNsYXNzZXM6IFByb3BUeXBlcy5vYmplY3QuaXNSZXF1aXJlZCxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBUaGUgY29tcG9uZW50IHVzZWQgZm9yIHRoZSByb290IG5vZGUuXG4gICAqIEVpdGhlciBhIHN0cmluZyB0byB1c2UgYSBIVE1MIGVsZW1lbnQgb3IgYSBjb21wb25lbnQuXG4gICAqL1xuICBjb21wb25lbnQ6IFByb3BUeXBlc1xuICAvKiBAdHlwZXNjcmlwdC10by1wcm9wdHlwZXMtaWdub3JlICovXG4gIC5lbGVtZW50VHlwZSxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCBkaXNhYmxlcyBndXR0ZXIgcGFkZGluZy5cbiAgICovXG4gIGRpc2FibGVHdXR0ZXJzOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogVGhlIHZhcmlhbnQgdG8gdXNlLlxuICAgKi9cbiAgdmFyaWFudDogUHJvcFR5cGVzLm9uZU9mKFsncmVndWxhcicsICdkZW5zZSddKVxufSA6IHZvaWQgMDtcbmV4cG9ydCBkZWZhdWx0IHdpdGhTdHlsZXMoc3R5bGVzLCB7XG4gIG5hbWU6ICdNdWlUb29sYmFyJ1xufSkoVG9vbGJhcik7IiwiaW1wb3J0IHsgUm91dGVyLCBfX1JvdXRlckNvbnRleHQsIG1hdGNoUGF0aCB9IGZyb20gJ3JlYWN0LXJvdXRlcic7XG5leHBvcnQgeyBNZW1vcnlSb3V0ZXIsIFByb21wdCwgUmVkaXJlY3QsIFJvdXRlLCBSb3V0ZXIsIFN0YXRpY1JvdXRlciwgU3dpdGNoLCBnZW5lcmF0ZVBhdGgsIG1hdGNoUGF0aCwgdXNlSGlzdG9yeSwgdXNlTG9jYXRpb24sIHVzZVBhcmFtcywgdXNlUm91dGVNYXRjaCwgd2l0aFJvdXRlciB9IGZyb20gJ3JlYWN0LXJvdXRlcic7XG5pbXBvcnQgX2luaGVyaXRzTG9vc2UgZnJvbSAnQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vaW5oZXJpdHNMb29zZSc7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgY3JlYXRlQnJvd3Nlckhpc3RvcnksIGNyZWF0ZUhhc2hIaXN0b3J5LCBjcmVhdGVMb2NhdGlvbiB9IGZyb20gJ2hpc3RvcnknO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCB3YXJuaW5nIGZyb20gJ3Rpbnktd2FybmluZyc7XG5pbXBvcnQgX2V4dGVuZHMgZnJvbSAnQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kcyc7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSAnQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSc7XG5pbXBvcnQgaW52YXJpYW50IGZyb20gJ3RpbnktaW52YXJpYW50JztcblxuLyoqXG4gKiBUaGUgcHVibGljIEFQSSBmb3IgYSA8Um91dGVyPiB0aGF0IHVzZXMgSFRNTDUgaGlzdG9yeS5cbiAqL1xuXG52YXIgQnJvd3NlclJvdXRlciA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHNMb29zZShCcm93c2VyUm91dGVyLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBCcm93c2VyUm91dGVyKCkge1xuICAgIHZhciBfdGhpcztcblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICBfdGhpcyA9IF9SZWFjdCRDb21wb25lbnQuY2FsbC5hcHBseShfUmVhY3QkQ29tcG9uZW50LCBbdGhpc10uY29uY2F0KGFyZ3MpKSB8fCB0aGlzO1xuICAgIF90aGlzLmhpc3RvcnkgPSBjcmVhdGVCcm93c2VySGlzdG9yeShfdGhpcy5wcm9wcyk7XG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IEJyb3dzZXJSb3V0ZXIucHJvdG90eXBlO1xuXG4gIF9wcm90by5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoUm91dGVyLCB7XG4gICAgICBoaXN0b3J5OiB0aGlzLmhpc3RvcnksXG4gICAgICBjaGlsZHJlbjogdGhpcy5wcm9wcy5jaGlsZHJlblxuICAgIH0pO1xuICB9O1xuXG4gIHJldHVybiBCcm93c2VyUm91dGVyO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gIEJyb3dzZXJSb3V0ZXIucHJvcFR5cGVzID0ge1xuICAgIGJhc2VuYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcbiAgICBmb3JjZVJlZnJlc2g6IFByb3BUeXBlcy5ib29sLFxuICAgIGdldFVzZXJDb25maXJtYXRpb246IFByb3BUeXBlcy5mdW5jLFxuICAgIGtleUxlbmd0aDogUHJvcFR5cGVzLm51bWJlclxuICB9O1xuXG4gIEJyb3dzZXJSb3V0ZXIucHJvdG90eXBlLmNvbXBvbmVudERpZE1vdW50ID0gZnVuY3Rpb24gKCkge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoIXRoaXMucHJvcHMuaGlzdG9yeSwgXCI8QnJvd3NlclJvdXRlcj4gaWdub3JlcyB0aGUgaGlzdG9yeSBwcm9wLiBUbyB1c2UgYSBjdXN0b20gaGlzdG9yeSwgXCIgKyBcInVzZSBgaW1wb3J0IHsgUm91dGVyIH1gIGluc3RlYWQgb2YgYGltcG9ydCB7IEJyb3dzZXJSb3V0ZXIgYXMgUm91dGVyIH1gLlwiKSA6IHZvaWQgMDtcbiAgfTtcbn1cblxuLyoqXG4gKiBUaGUgcHVibGljIEFQSSBmb3IgYSA8Um91dGVyPiB0aGF0IHVzZXMgd2luZG93LmxvY2F0aW9uLmhhc2guXG4gKi9cblxudmFyIEhhc2hSb3V0ZXIgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzTG9vc2UoSGFzaFJvdXRlciwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gSGFzaFJvdXRlcigpIHtcbiAgICB2YXIgX3RoaXM7XG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgX3RoaXMgPSBfUmVhY3QkQ29tcG9uZW50LmNhbGwuYXBwbHkoX1JlYWN0JENvbXBvbmVudCwgW3RoaXNdLmNvbmNhdChhcmdzKSkgfHwgdGhpcztcbiAgICBfdGhpcy5oaXN0b3J5ID0gY3JlYXRlSGFzaEhpc3RvcnkoX3RoaXMucHJvcHMpO1xuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBIYXNoUm91dGVyLnByb3RvdHlwZTtcblxuICBfcHJvdG8ucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFJvdXRlciwge1xuICAgICAgaGlzdG9yeTogdGhpcy5oaXN0b3J5LFxuICAgICAgY2hpbGRyZW46IHRoaXMucHJvcHMuY2hpbGRyZW5cbiAgICB9KTtcbiAgfTtcblxuICByZXR1cm4gSGFzaFJvdXRlcjtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICBIYXNoUm91dGVyLnByb3BUeXBlcyA9IHtcbiAgICBiYXNlbmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG4gICAgZ2V0VXNlckNvbmZpcm1hdGlvbjogUHJvcFR5cGVzLmZ1bmMsXG4gICAgaGFzaFR5cGU6IFByb3BUeXBlcy5vbmVPZihbXCJoYXNoYmFuZ1wiLCBcIm5vc2xhc2hcIiwgXCJzbGFzaFwiXSlcbiAgfTtcblxuICBIYXNoUm91dGVyLnByb3RvdHlwZS5jb21wb25lbnREaWRNb3VudCA9IGZ1bmN0aW9uICgpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKCF0aGlzLnByb3BzLmhpc3RvcnksIFwiPEhhc2hSb3V0ZXI+IGlnbm9yZXMgdGhlIGhpc3RvcnkgcHJvcC4gVG8gdXNlIGEgY3VzdG9tIGhpc3RvcnksIFwiICsgXCJ1c2UgYGltcG9ydCB7IFJvdXRlciB9YCBpbnN0ZWFkIG9mIGBpbXBvcnQgeyBIYXNoUm91dGVyIGFzIFJvdXRlciB9YC5cIikgOiB2b2lkIDA7XG4gIH07XG59XG5cbnZhciByZXNvbHZlVG9Mb2NhdGlvbiA9IGZ1bmN0aW9uIHJlc29sdmVUb0xvY2F0aW9uKHRvLCBjdXJyZW50TG9jYXRpb24pIHtcbiAgcmV0dXJuIHR5cGVvZiB0byA9PT0gXCJmdW5jdGlvblwiID8gdG8oY3VycmVudExvY2F0aW9uKSA6IHRvO1xufTtcbnZhciBub3JtYWxpemVUb0xvY2F0aW9uID0gZnVuY3Rpb24gbm9ybWFsaXplVG9Mb2NhdGlvbih0bywgY3VycmVudExvY2F0aW9uKSB7XG4gIHJldHVybiB0eXBlb2YgdG8gPT09IFwic3RyaW5nXCIgPyBjcmVhdGVMb2NhdGlvbih0bywgbnVsbCwgbnVsbCwgY3VycmVudExvY2F0aW9uKSA6IHRvO1xufTtcblxudmFyIGZvcndhcmRSZWZTaGltID0gZnVuY3Rpb24gZm9yd2FyZFJlZlNoaW0oQykge1xuICByZXR1cm4gQztcbn07XG5cbnZhciBmb3J3YXJkUmVmID0gUmVhY3QuZm9yd2FyZFJlZjtcblxuaWYgKHR5cGVvZiBmb3J3YXJkUmVmID09PSBcInVuZGVmaW5lZFwiKSB7XG4gIGZvcndhcmRSZWYgPSBmb3J3YXJkUmVmU2hpbTtcbn1cblxuZnVuY3Rpb24gaXNNb2RpZmllZEV2ZW50KGV2ZW50KSB7XG4gIHJldHVybiAhIShldmVudC5tZXRhS2V5IHx8IGV2ZW50LmFsdEtleSB8fCBldmVudC5jdHJsS2V5IHx8IGV2ZW50LnNoaWZ0S2V5KTtcbn1cblxudmFyIExpbmtBbmNob3IgPSBmb3J3YXJkUmVmKGZ1bmN0aW9uIChfcmVmLCBmb3J3YXJkZWRSZWYpIHtcbiAgdmFyIGlubmVyUmVmID0gX3JlZi5pbm5lclJlZixcbiAgICAgIG5hdmlnYXRlID0gX3JlZi5uYXZpZ2F0ZSxcbiAgICAgIF9vbkNsaWNrID0gX3JlZi5vbkNsaWNrLFxuICAgICAgcmVzdCA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKF9yZWYsIFtcImlubmVyUmVmXCIsIFwibmF2aWdhdGVcIiwgXCJvbkNsaWNrXCJdKTtcblxuICB2YXIgdGFyZ2V0ID0gcmVzdC50YXJnZXQ7XG5cbiAgdmFyIHByb3BzID0gX2V4dGVuZHMoe30sIHJlc3QsIHtcbiAgICBvbkNsaWNrOiBmdW5jdGlvbiBvbkNsaWNrKGV2ZW50KSB7XG4gICAgICB0cnkge1xuICAgICAgICBpZiAoX29uQ2xpY2spIF9vbkNsaWNrKGV2ZW50KTtcbiAgICAgIH0gY2F0Y2ggKGV4KSB7XG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIHRocm93IGV4O1xuICAgICAgfVxuXG4gICAgICBpZiAoIWV2ZW50LmRlZmF1bHRQcmV2ZW50ZWQgJiYgLy8gb25DbGljayBwcmV2ZW50ZWQgZGVmYXVsdFxuICAgICAgZXZlbnQuYnV0dG9uID09PSAwICYmICggLy8gaWdub3JlIGV2ZXJ5dGhpbmcgYnV0IGxlZnQgY2xpY2tzXG4gICAgICAhdGFyZ2V0IHx8IHRhcmdldCA9PT0gXCJfc2VsZlwiKSAmJiAvLyBsZXQgYnJvd3NlciBoYW5kbGUgXCJ0YXJnZXQ9X2JsYW5rXCIgZXRjLlxuICAgICAgIWlzTW9kaWZpZWRFdmVudChldmVudCkgLy8gaWdub3JlIGNsaWNrcyB3aXRoIG1vZGlmaWVyIGtleXNcbiAgICAgICkge1xuICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgbmF2aWdhdGUoKTtcbiAgICAgICAgfVxuICAgIH1cbiAgfSk7IC8vIFJlYWN0IDE1IGNvbXBhdFxuXG5cbiAgaWYgKGZvcndhcmRSZWZTaGltICE9PSBmb3J3YXJkUmVmKSB7XG4gICAgcHJvcHMucmVmID0gZm9yd2FyZGVkUmVmIHx8IGlubmVyUmVmO1xuICB9IGVsc2Uge1xuICAgIHByb3BzLnJlZiA9IGlubmVyUmVmO1xuICB9XG4gIC8qIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBqc3gtYTExeS9hbmNob3ItaGFzLWNvbnRlbnQgKi9cblxuXG4gIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFwiYVwiLCBwcm9wcyk7XG59KTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICBMaW5rQW5jaG9yLmRpc3BsYXlOYW1lID0gXCJMaW5rQW5jaG9yXCI7XG59XG4vKipcbiAqIFRoZSBwdWJsaWMgQVBJIGZvciByZW5kZXJpbmcgYSBoaXN0b3J5LWF3YXJlIDxhPi5cbiAqL1xuXG5cbnZhciBMaW5rID0gZm9yd2FyZFJlZihmdW5jdGlvbiAoX3JlZjIsIGZvcndhcmRlZFJlZikge1xuICB2YXIgX3JlZjIkY29tcG9uZW50ID0gX3JlZjIuY29tcG9uZW50LFxuICAgICAgY29tcG9uZW50ID0gX3JlZjIkY29tcG9uZW50ID09PSB2b2lkIDAgPyBMaW5rQW5jaG9yIDogX3JlZjIkY29tcG9uZW50LFxuICAgICAgcmVwbGFjZSA9IF9yZWYyLnJlcGxhY2UsXG4gICAgICB0byA9IF9yZWYyLnRvLFxuICAgICAgaW5uZXJSZWYgPSBfcmVmMi5pbm5lclJlZixcbiAgICAgIHJlc3QgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShfcmVmMiwgW1wiY29tcG9uZW50XCIsIFwicmVwbGFjZVwiLCBcInRvXCIsIFwiaW5uZXJSZWZcIl0pO1xuXG4gIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KF9fUm91dGVyQ29udGV4dC5Db25zdW1lciwgbnVsbCwgZnVuY3Rpb24gKGNvbnRleHQpIHtcbiAgICAhY29udGV4dCA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgXCJZb3Ugc2hvdWxkIG5vdCB1c2UgPExpbms+IG91dHNpZGUgYSA8Um91dGVyPlwiKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgdmFyIGhpc3RvcnkgPSBjb250ZXh0Lmhpc3Rvcnk7XG4gICAgdmFyIGxvY2F0aW9uID0gbm9ybWFsaXplVG9Mb2NhdGlvbihyZXNvbHZlVG9Mb2NhdGlvbih0bywgY29udGV4dC5sb2NhdGlvbiksIGNvbnRleHQubG9jYXRpb24pO1xuICAgIHZhciBocmVmID0gbG9jYXRpb24gPyBoaXN0b3J5LmNyZWF0ZUhyZWYobG9jYXRpb24pIDogXCJcIjtcblxuICAgIHZhciBwcm9wcyA9IF9leHRlbmRzKHt9LCByZXN0LCB7XG4gICAgICBocmVmOiBocmVmLFxuICAgICAgbmF2aWdhdGU6IGZ1bmN0aW9uIG5hdmlnYXRlKCkge1xuICAgICAgICB2YXIgbG9jYXRpb24gPSByZXNvbHZlVG9Mb2NhdGlvbih0bywgY29udGV4dC5sb2NhdGlvbik7XG4gICAgICAgIHZhciBtZXRob2QgPSByZXBsYWNlID8gaGlzdG9yeS5yZXBsYWNlIDogaGlzdG9yeS5wdXNoO1xuICAgICAgICBtZXRob2QobG9jYXRpb24pO1xuICAgICAgfVxuICAgIH0pOyAvLyBSZWFjdCAxNSBjb21wYXRcblxuXG4gICAgaWYgKGZvcndhcmRSZWZTaGltICE9PSBmb3J3YXJkUmVmKSB7XG4gICAgICBwcm9wcy5yZWYgPSBmb3J3YXJkZWRSZWYgfHwgaW5uZXJSZWY7XG4gICAgfSBlbHNlIHtcbiAgICAgIHByb3BzLmlubmVyUmVmID0gaW5uZXJSZWY7XG4gICAgfVxuXG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoY29tcG9uZW50LCBwcm9wcyk7XG4gIH0pO1xufSk7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgdmFyIHRvVHlwZSA9IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5zdHJpbmcsIFByb3BUeXBlcy5vYmplY3QsIFByb3BUeXBlcy5mdW5jXSk7XG4gIHZhciByZWZUeXBlID0gUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLnN0cmluZywgUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5zaGFwZSh7XG4gICAgY3VycmVudDogUHJvcFR5cGVzLmFueVxuICB9KV0pO1xuICBMaW5rLmRpc3BsYXlOYW1lID0gXCJMaW5rXCI7XG4gIExpbmsucHJvcFR5cGVzID0ge1xuICAgIGlubmVyUmVmOiByZWZUeXBlLFxuICAgIG9uQ2xpY2s6IFByb3BUeXBlcy5mdW5jLFxuICAgIHJlcGxhY2U6IFByb3BUeXBlcy5ib29sLFxuICAgIHRhcmdldDogUHJvcFR5cGVzLnN0cmluZyxcbiAgICB0bzogdG9UeXBlLmlzUmVxdWlyZWRcbiAgfTtcbn1cblxudmFyIGZvcndhcmRSZWZTaGltJDEgPSBmdW5jdGlvbiBmb3J3YXJkUmVmU2hpbShDKSB7XG4gIHJldHVybiBDO1xufTtcblxudmFyIGZvcndhcmRSZWYkMSA9IFJlYWN0LmZvcndhcmRSZWY7XG5cbmlmICh0eXBlb2YgZm9yd2FyZFJlZiQxID09PSBcInVuZGVmaW5lZFwiKSB7XG4gIGZvcndhcmRSZWYkMSA9IGZvcndhcmRSZWZTaGltJDE7XG59XG5cbmZ1bmN0aW9uIGpvaW5DbGFzc25hbWVzKCkge1xuICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgY2xhc3NuYW1lcyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICBjbGFzc25hbWVzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICB9XG5cbiAgcmV0dXJuIGNsYXNzbmFtZXMuZmlsdGVyKGZ1bmN0aW9uIChpKSB7XG4gICAgcmV0dXJuIGk7XG4gIH0pLmpvaW4oXCIgXCIpO1xufVxuLyoqXG4gKiBBIDxMaW5rPiB3cmFwcGVyIHRoYXQga25vd3MgaWYgaXQncyBcImFjdGl2ZVwiIG9yIG5vdC5cbiAqL1xuXG5cbnZhciBOYXZMaW5rID0gZm9yd2FyZFJlZiQxKGZ1bmN0aW9uIChfcmVmLCBmb3J3YXJkZWRSZWYpIHtcbiAgdmFyIF9yZWYkYXJpYUN1cnJlbnQgPSBfcmVmW1wiYXJpYS1jdXJyZW50XCJdLFxuICAgICAgYXJpYUN1cnJlbnQgPSBfcmVmJGFyaWFDdXJyZW50ID09PSB2b2lkIDAgPyBcInBhZ2VcIiA6IF9yZWYkYXJpYUN1cnJlbnQsXG4gICAgICBfcmVmJGFjdGl2ZUNsYXNzTmFtZSA9IF9yZWYuYWN0aXZlQ2xhc3NOYW1lLFxuICAgICAgYWN0aXZlQ2xhc3NOYW1lID0gX3JlZiRhY3RpdmVDbGFzc05hbWUgPT09IHZvaWQgMCA/IFwiYWN0aXZlXCIgOiBfcmVmJGFjdGl2ZUNsYXNzTmFtZSxcbiAgICAgIGFjdGl2ZVN0eWxlID0gX3JlZi5hY3RpdmVTdHlsZSxcbiAgICAgIGNsYXNzTmFtZVByb3AgPSBfcmVmLmNsYXNzTmFtZSxcbiAgICAgIGV4YWN0ID0gX3JlZi5leGFjdCxcbiAgICAgIGlzQWN0aXZlUHJvcCA9IF9yZWYuaXNBY3RpdmUsXG4gICAgICBsb2NhdGlvblByb3AgPSBfcmVmLmxvY2F0aW9uLFxuICAgICAgc2Vuc2l0aXZlID0gX3JlZi5zZW5zaXRpdmUsXG4gICAgICBzdHJpY3QgPSBfcmVmLnN0cmljdCxcbiAgICAgIHN0eWxlUHJvcCA9IF9yZWYuc3R5bGUsXG4gICAgICB0byA9IF9yZWYudG8sXG4gICAgICBpbm5lclJlZiA9IF9yZWYuaW5uZXJSZWYsXG4gICAgICByZXN0ID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UoX3JlZiwgW1wiYXJpYS1jdXJyZW50XCIsIFwiYWN0aXZlQ2xhc3NOYW1lXCIsIFwiYWN0aXZlU3R5bGVcIiwgXCJjbGFzc05hbWVcIiwgXCJleGFjdFwiLCBcImlzQWN0aXZlXCIsIFwibG9jYXRpb25cIiwgXCJzZW5zaXRpdmVcIiwgXCJzdHJpY3RcIiwgXCJzdHlsZVwiLCBcInRvXCIsIFwiaW5uZXJSZWZcIl0pO1xuXG4gIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KF9fUm91dGVyQ29udGV4dC5Db25zdW1lciwgbnVsbCwgZnVuY3Rpb24gKGNvbnRleHQpIHtcbiAgICAhY29udGV4dCA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgXCJZb3Ugc2hvdWxkIG5vdCB1c2UgPE5hdkxpbms+IG91dHNpZGUgYSA8Um91dGVyPlwiKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgdmFyIGN1cnJlbnRMb2NhdGlvbiA9IGxvY2F0aW9uUHJvcCB8fCBjb250ZXh0LmxvY2F0aW9uO1xuICAgIHZhciB0b0xvY2F0aW9uID0gbm9ybWFsaXplVG9Mb2NhdGlvbihyZXNvbHZlVG9Mb2NhdGlvbih0bywgY3VycmVudExvY2F0aW9uKSwgY3VycmVudExvY2F0aW9uKTtcbiAgICB2YXIgcGF0aCA9IHRvTG9jYXRpb24ucGF0aG5hbWU7IC8vIFJlZ2V4IHRha2VuIGZyb206IGh0dHBzOi8vZ2l0aHViLmNvbS9waWxsYXJqcy9wYXRoLXRvLXJlZ2V4cC9ibG9iL21hc3Rlci9pbmRleC5qcyNMMjAyXG5cbiAgICB2YXIgZXNjYXBlZFBhdGggPSBwYXRoICYmIHBhdGgucmVwbGFjZSgvKFsuKyo/PV4hOiR7fSgpW1xcXXwvXFxcXF0pL2csIFwiXFxcXCQxXCIpO1xuICAgIHZhciBtYXRjaCA9IGVzY2FwZWRQYXRoID8gbWF0Y2hQYXRoKGN1cnJlbnRMb2NhdGlvbi5wYXRobmFtZSwge1xuICAgICAgcGF0aDogZXNjYXBlZFBhdGgsXG4gICAgICBleGFjdDogZXhhY3QsXG4gICAgICBzZW5zaXRpdmU6IHNlbnNpdGl2ZSxcbiAgICAgIHN0cmljdDogc3RyaWN0XG4gICAgfSkgOiBudWxsO1xuICAgIHZhciBpc0FjdGl2ZSA9ICEhKGlzQWN0aXZlUHJvcCA/IGlzQWN0aXZlUHJvcChtYXRjaCwgY3VycmVudExvY2F0aW9uKSA6IG1hdGNoKTtcbiAgICB2YXIgY2xhc3NOYW1lID0gaXNBY3RpdmUgPyBqb2luQ2xhc3NuYW1lcyhjbGFzc05hbWVQcm9wLCBhY3RpdmVDbGFzc05hbWUpIDogY2xhc3NOYW1lUHJvcDtcbiAgICB2YXIgc3R5bGUgPSBpc0FjdGl2ZSA/IF9leHRlbmRzKHt9LCBzdHlsZVByb3AsIHt9LCBhY3RpdmVTdHlsZSkgOiBzdHlsZVByb3A7XG5cbiAgICB2YXIgcHJvcHMgPSBfZXh0ZW5kcyh7XG4gICAgICBcImFyaWEtY3VycmVudFwiOiBpc0FjdGl2ZSAmJiBhcmlhQ3VycmVudCB8fCBudWxsLFxuICAgICAgY2xhc3NOYW1lOiBjbGFzc05hbWUsXG4gICAgICBzdHlsZTogc3R5bGUsXG4gICAgICB0bzogdG9Mb2NhdGlvblxuICAgIH0sIHJlc3QpOyAvLyBSZWFjdCAxNSBjb21wYXRcblxuXG4gICAgaWYgKGZvcndhcmRSZWZTaGltJDEgIT09IGZvcndhcmRSZWYkMSkge1xuICAgICAgcHJvcHMucmVmID0gZm9yd2FyZGVkUmVmIHx8IGlubmVyUmVmO1xuICAgIH0gZWxzZSB7XG4gICAgICBwcm9wcy5pbm5lclJlZiA9IGlubmVyUmVmO1xuICAgIH1cblxuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KExpbmssIHByb3BzKTtcbiAgfSk7XG59KTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICBOYXZMaW5rLmRpc3BsYXlOYW1lID0gXCJOYXZMaW5rXCI7XG4gIHZhciBhcmlhQ3VycmVudFR5cGUgPSBQcm9wVHlwZXMub25lT2YoW1wicGFnZVwiLCBcInN0ZXBcIiwgXCJsb2NhdGlvblwiLCBcImRhdGVcIiwgXCJ0aW1lXCIsIFwidHJ1ZVwiXSk7XG4gIE5hdkxpbmsucHJvcFR5cGVzID0gX2V4dGVuZHMoe30sIExpbmsucHJvcFR5cGVzLCB7XG4gICAgXCJhcmlhLWN1cnJlbnRcIjogYXJpYUN1cnJlbnRUeXBlLFxuICAgIGFjdGl2ZUNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgICBhY3RpdmVTdHlsZTogUHJvcFR5cGVzLm9iamVjdCxcbiAgICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgZXhhY3Q6IFByb3BUeXBlcy5ib29sLFxuICAgIGlzQWN0aXZlOiBQcm9wVHlwZXMuZnVuYyxcbiAgICBsb2NhdGlvbjogUHJvcFR5cGVzLm9iamVjdCxcbiAgICBzZW5zaXRpdmU6IFByb3BUeXBlcy5ib29sLFxuICAgIHN0cmljdDogUHJvcFR5cGVzLmJvb2wsXG4gICAgc3R5bGU6IFByb3BUeXBlcy5vYmplY3RcbiAgfSk7XG59XG5cbmV4cG9ydCB7IEJyb3dzZXJSb3V0ZXIsIEhhc2hSb3V0ZXIsIExpbmssIE5hdkxpbmsgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXJlYWN0LXJvdXRlci1kb20uanMubWFwXG4iLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzXCI7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGNsc3ggZnJvbSAnY2xzeCc7XG5pbXBvcnQgd2l0aFN0eWxlcyBmcm9tICcuLi9zdHlsZXMvd2l0aFN0eWxlcyc7XG5pbXBvcnQgY2FwaXRhbGl6ZSBmcm9tICcuLi91dGlscy9jYXBpdGFsaXplJztcbnZhciBSQURJVVNfU1RBTkRBUkQgPSAxMDtcbnZhciBSQURJVVNfRE9UID0gNDtcbmV4cG9ydCB2YXIgc3R5bGVzID0gZnVuY3Rpb24gc3R5bGVzKHRoZW1lKSB7XG4gIHJldHVybiB7XG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudC4gKi9cbiAgICByb290OiB7XG4gICAgICBwb3NpdGlvbjogJ3JlbGF0aXZlJyxcbiAgICAgIGRpc3BsYXk6ICdpbmxpbmUtZmxleCcsXG4gICAgICAvLyBGb3IgY29ycmVjdCBhbGlnbm1lbnQgd2l0aCB0aGUgdGV4dC5cbiAgICAgIHZlcnRpY2FsQWxpZ246ICdtaWRkbGUnLFxuICAgICAgZmxleFNocmluazogMFxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgYmFkZ2UgYHNwYW5gIGVsZW1lbnQuICovXG4gICAgYmFkZ2U6IHtcbiAgICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICAgIGZsZXhEaXJlY3Rpb246ICdyb3cnLFxuICAgICAgZmxleFdyYXA6ICd3cmFwJyxcbiAgICAgIGp1c3RpZnlDb250ZW50OiAnY2VudGVyJyxcbiAgICAgIGFsaWduQ29udGVudDogJ2NlbnRlcicsXG4gICAgICBhbGlnbkl0ZW1zOiAnY2VudGVyJyxcbiAgICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgICAgYm94U2l6aW5nOiAnYm9yZGVyLWJveCcsXG4gICAgICBmb250RmFtaWx5OiB0aGVtZS50eXBvZ3JhcGh5LmZvbnRGYW1pbHksXG4gICAgICBmb250V2VpZ2h0OiB0aGVtZS50eXBvZ3JhcGh5LmZvbnRXZWlnaHRNZWRpdW0sXG4gICAgICBmb250U2l6ZTogdGhlbWUudHlwb2dyYXBoeS5weFRvUmVtKDEyKSxcbiAgICAgIG1pbldpZHRoOiBSQURJVVNfU1RBTkRBUkQgKiAyLFxuICAgICAgbGluZUhlaWdodDogMSxcbiAgICAgIHBhZGRpbmc6ICcwIDZweCcsXG4gICAgICBoZWlnaHQ6IFJBRElVU19TVEFOREFSRCAqIDIsXG4gICAgICBib3JkZXJSYWRpdXM6IFJBRElVU19TVEFOREFSRCxcbiAgICAgIHpJbmRleDogMSxcbiAgICAgIC8vIFJlbmRlciB0aGUgYmFkZ2Ugb24gdG9wIG9mIHBvdGVudGlhbCByaXBwbGVzLlxuICAgICAgdHJhbnNpdGlvbjogdGhlbWUudHJhbnNpdGlvbnMuY3JlYXRlKCd0cmFuc2Zvcm0nLCB7XG4gICAgICAgIGVhc2luZzogdGhlbWUudHJhbnNpdGlvbnMuZWFzaW5nLmVhc2VJbk91dCxcbiAgICAgICAgZHVyYXRpb246IHRoZW1lLnRyYW5zaXRpb25zLmR1cmF0aW9uLmVudGVyaW5nU2NyZWVuXG4gICAgICB9KVxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBjb2xvcj1cInByaW1hcnlcImAuICovXG4gICAgY29sb3JQcmltYXJ5OiB7XG4gICAgICBiYWNrZ3JvdW5kQ29sb3I6IHRoZW1lLnBhbGV0dGUucHJpbWFyeS5tYWluLFxuICAgICAgY29sb3I6IHRoZW1lLnBhbGV0dGUucHJpbWFyeS5jb250cmFzdFRleHRcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgY29sb3I9XCJzZWNvbmRhcnlcImAuICovXG4gICAgY29sb3JTZWNvbmRhcnk6IHtcbiAgICAgIGJhY2tncm91bmRDb2xvcjogdGhlbWUucGFsZXR0ZS5zZWNvbmRhcnkubWFpbixcbiAgICAgIGNvbG9yOiB0aGVtZS5wYWxldHRlLnNlY29uZGFyeS5jb250cmFzdFRleHRcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgY29sb3I9XCJlcnJvclwiYC4gKi9cbiAgICBjb2xvckVycm9yOiB7XG4gICAgICBiYWNrZ3JvdW5kQ29sb3I6IHRoZW1lLnBhbGV0dGUuZXJyb3IubWFpbixcbiAgICAgIGNvbG9yOiB0aGVtZS5wYWxldHRlLmVycm9yLmNvbnRyYXN0VGV4dFxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGB2YXJpYW50PVwiZG90XCJgLiAqL1xuICAgIGRvdDoge1xuICAgICAgYm9yZGVyUmFkaXVzOiBSQURJVVNfRE9ULFxuICAgICAgaGVpZ2h0OiBSQURJVVNfRE9UICogMixcbiAgICAgIG1pbldpZHRoOiBSQURJVVNfRE9UICogMixcbiAgICAgIHBhZGRpbmc6IDBcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgYW5jaG9yT3JpZ2luPXt7ICd0b3AnLCAncmlnaHQnIH19IG92ZXJsYXA9XCJyZWN0YW5nbGVcImAuICovXG4gICAgYW5jaG9yT3JpZ2luVG9wUmlnaHRSZWN0YW5nbGU6IHtcbiAgICAgIHRvcDogMCxcbiAgICAgIHJpZ2h0OiAwLFxuICAgICAgdHJhbnNmb3JtOiAnc2NhbGUoMSkgdHJhbnNsYXRlKDUwJSwgLTUwJSknLFxuICAgICAgdHJhbnNmb3JtT3JpZ2luOiAnMTAwJSAwJScsXG4gICAgICAnJiRpbnZpc2libGUnOiB7XG4gICAgICAgIHRyYW5zZm9ybTogJ3NjYWxlKDApIHRyYW5zbGF0ZSg1MCUsIC01MCUpJ1xuICAgICAgfVxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBhbmNob3JPcmlnaW49e3sgJ2JvdHRvbScsICdyaWdodCcgfX0gb3ZlcmxhcD1cInJlY3RhbmdsZVwiYC4gKi9cbiAgICBhbmNob3JPcmlnaW5Cb3R0b21SaWdodFJlY3RhbmdsZToge1xuICAgICAgYm90dG9tOiAwLFxuICAgICAgcmlnaHQ6IDAsXG4gICAgICB0cmFuc2Zvcm06ICdzY2FsZSgxKSB0cmFuc2xhdGUoNTAlLCA1MCUpJyxcbiAgICAgIHRyYW5zZm9ybU9yaWdpbjogJzEwMCUgMTAwJScsXG4gICAgICAnJiRpbnZpc2libGUnOiB7XG4gICAgICAgIHRyYW5zZm9ybTogJ3NjYWxlKDApIHRyYW5zbGF0ZSg1MCUsIDUwJSknXG4gICAgICB9XG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGFuY2hvck9yaWdpbj17eyAndG9wJywgJ2xlZnQnIH19IG92ZXJsYXA9XCJyZWN0YW5nbGVcImAuICovXG4gICAgYW5jaG9yT3JpZ2luVG9wTGVmdFJlY3RhbmdsZToge1xuICAgICAgdG9wOiAwLFxuICAgICAgbGVmdDogMCxcbiAgICAgIHRyYW5zZm9ybTogJ3NjYWxlKDEpIHRyYW5zbGF0ZSgtNTAlLCAtNTAlKScsXG4gICAgICB0cmFuc2Zvcm1PcmlnaW46ICcwJSAwJScsXG4gICAgICAnJiRpbnZpc2libGUnOiB7XG4gICAgICAgIHRyYW5zZm9ybTogJ3NjYWxlKDApIHRyYW5zbGF0ZSgtNTAlLCAtNTAlKSdcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgYW5jaG9yT3JpZ2luPXt7ICdib3R0b20nLCAnbGVmdCcgfX0gb3ZlcmxhcD1cInJlY3RhbmdsZVwiYC4gKi9cbiAgICBhbmNob3JPcmlnaW5Cb3R0b21MZWZ0UmVjdGFuZ2xlOiB7XG4gICAgICBib3R0b206IDAsXG4gICAgICBsZWZ0OiAwLFxuICAgICAgdHJhbnNmb3JtOiAnc2NhbGUoMSkgdHJhbnNsYXRlKC01MCUsIDUwJSknLFxuICAgICAgdHJhbnNmb3JtT3JpZ2luOiAnMCUgMTAwJScsXG4gICAgICAnJiRpbnZpc2libGUnOiB7XG4gICAgICAgIHRyYW5zZm9ybTogJ3NjYWxlKDApIHRyYW5zbGF0ZSgtNTAlLCA1MCUpJ1xuICAgICAgfVxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBhbmNob3JPcmlnaW49e3sgJ3RvcCcsICdyaWdodCcgfX0gb3ZlcmxhcD1cImNpcmNsZVwiYC4gKi9cbiAgICBhbmNob3JPcmlnaW5Ub3BSaWdodENpcmNsZToge1xuICAgICAgdG9wOiAnMTQlJyxcbiAgICAgIHJpZ2h0OiAnMTQlJyxcbiAgICAgIHRyYW5zZm9ybTogJ3NjYWxlKDEpIHRyYW5zbGF0ZSg1MCUsIC01MCUpJyxcbiAgICAgIHRyYW5zZm9ybU9yaWdpbjogJzEwMCUgMCUnLFxuICAgICAgJyYkaW52aXNpYmxlJzoge1xuICAgICAgICB0cmFuc2Zvcm06ICdzY2FsZSgwKSB0cmFuc2xhdGUoNTAlLCAtNTAlKSdcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgYW5jaG9yT3JpZ2luPXt7ICdib3R0b20nLCAncmlnaHQnIH19IG92ZXJsYXA9XCJjaXJjbGVcImAuICovXG4gICAgYW5jaG9yT3JpZ2luQm90dG9tUmlnaHRDaXJjbGU6IHtcbiAgICAgIGJvdHRvbTogJzE0JScsXG4gICAgICByaWdodDogJzE0JScsXG4gICAgICB0cmFuc2Zvcm06ICdzY2FsZSgxKSB0cmFuc2xhdGUoNTAlLCA1MCUpJyxcbiAgICAgIHRyYW5zZm9ybU9yaWdpbjogJzEwMCUgMTAwJScsXG4gICAgICAnJiRpbnZpc2libGUnOiB7XG4gICAgICAgIHRyYW5zZm9ybTogJ3NjYWxlKDApIHRyYW5zbGF0ZSg1MCUsIDUwJSknXG4gICAgICB9XG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGFuY2hvck9yaWdpbj17eyAndG9wJywgJ2xlZnQnIH19IG92ZXJsYXA9XCJjaXJjbGVcImAuICovXG4gICAgYW5jaG9yT3JpZ2luVG9wTGVmdENpcmNsZToge1xuICAgICAgdG9wOiAnMTQlJyxcbiAgICAgIGxlZnQ6ICcxNCUnLFxuICAgICAgdHJhbnNmb3JtOiAnc2NhbGUoMSkgdHJhbnNsYXRlKC01MCUsIC01MCUpJyxcbiAgICAgIHRyYW5zZm9ybU9yaWdpbjogJzAlIDAlJyxcbiAgICAgICcmJGludmlzaWJsZSc6IHtcbiAgICAgICAgdHJhbnNmb3JtOiAnc2NhbGUoMCkgdHJhbnNsYXRlKC01MCUsIC01MCUpJ1xuICAgICAgfVxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBhbmNob3JPcmlnaW49e3sgJ2JvdHRvbScsICdsZWZ0JyB9fSBvdmVybGFwPVwiY2lyY2xlXCJgLiAqL1xuICAgIGFuY2hvck9yaWdpbkJvdHRvbUxlZnRDaXJjbGU6IHtcbiAgICAgIGJvdHRvbTogJzE0JScsXG4gICAgICBsZWZ0OiAnMTQlJyxcbiAgICAgIHRyYW5zZm9ybTogJ3NjYWxlKDEpIHRyYW5zbGF0ZSgtNTAlLCA1MCUpJyxcbiAgICAgIHRyYW5zZm9ybU9yaWdpbjogJzAlIDEwMCUnLFxuICAgICAgJyYkaW52aXNpYmxlJzoge1xuICAgICAgICB0cmFuc2Zvcm06ICdzY2FsZSgwKSB0cmFuc2xhdGUoLTUwJSwgNTAlKSdcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgLyogUHNldWRvLWNsYXNzIHRvIHRoZSBiYWRnZSBgc3BhbmAgZWxlbWVudCBpZiBgaW52aXNpYmxlPXt0cnVlfWAuICovXG4gICAgaW52aXNpYmxlOiB7XG4gICAgICB0cmFuc2l0aW9uOiB0aGVtZS50cmFuc2l0aW9ucy5jcmVhdGUoJ3RyYW5zZm9ybScsIHtcbiAgICAgICAgZWFzaW5nOiB0aGVtZS50cmFuc2l0aW9ucy5lYXNpbmcuZWFzZUluT3V0LFxuICAgICAgICBkdXJhdGlvbjogdGhlbWUudHJhbnNpdGlvbnMuZHVyYXRpb24ubGVhdmluZ1NjcmVlblxuICAgICAgfSlcbiAgICB9XG4gIH07XG59O1xudmFyIEJhZGdlID0gLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gQmFkZ2UocHJvcHMsIHJlZikge1xuICB2YXIgX3Byb3BzJGFuY2hvck9yaWdpbiA9IHByb3BzLmFuY2hvck9yaWdpbixcbiAgICAgIGFuY2hvck9yaWdpbiA9IF9wcm9wcyRhbmNob3JPcmlnaW4gPT09IHZvaWQgMCA/IHtcbiAgICB2ZXJ0aWNhbDogJ3RvcCcsXG4gICAgaG9yaXpvbnRhbDogJ3JpZ2h0J1xuICB9IDogX3Byb3BzJGFuY2hvck9yaWdpbixcbiAgICAgIGJhZGdlQ29udGVudCA9IHByb3BzLmJhZGdlQ29udGVudCxcbiAgICAgIGNoaWxkcmVuID0gcHJvcHMuY2hpbGRyZW4sXG4gICAgICBjbGFzc2VzID0gcHJvcHMuY2xhc3NlcyxcbiAgICAgIGNsYXNzTmFtZSA9IHByb3BzLmNsYXNzTmFtZSxcbiAgICAgIF9wcm9wcyRjb2xvciA9IHByb3BzLmNvbG9yLFxuICAgICAgY29sb3IgPSBfcHJvcHMkY29sb3IgPT09IHZvaWQgMCA/ICdkZWZhdWx0JyA6IF9wcm9wcyRjb2xvcixcbiAgICAgIF9wcm9wcyRjb21wb25lbnQgPSBwcm9wcy5jb21wb25lbnQsXG4gICAgICBDb21wb25lbnRQcm9wID0gX3Byb3BzJGNvbXBvbmVudCA9PT0gdm9pZCAwID8gJ3NwYW4nIDogX3Byb3BzJGNvbXBvbmVudCxcbiAgICAgIGludmlzaWJsZVByb3AgPSBwcm9wcy5pbnZpc2libGUsXG4gICAgICBfcHJvcHMkbWF4ID0gcHJvcHMubWF4LFxuICAgICAgbWF4ID0gX3Byb3BzJG1heCA9PT0gdm9pZCAwID8gOTkgOiBfcHJvcHMkbWF4LFxuICAgICAgX3Byb3BzJG92ZXJsYXAgPSBwcm9wcy5vdmVybGFwLFxuICAgICAgb3ZlcmxhcCA9IF9wcm9wcyRvdmVybGFwID09PSB2b2lkIDAgPyAncmVjdGFuZ2xlJyA6IF9wcm9wcyRvdmVybGFwLFxuICAgICAgX3Byb3BzJHNob3daZXJvID0gcHJvcHMuc2hvd1plcm8sXG4gICAgICBzaG93WmVybyA9IF9wcm9wcyRzaG93WmVybyA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcHJvcHMkc2hvd1plcm8sXG4gICAgICBfcHJvcHMkdmFyaWFudCA9IHByb3BzLnZhcmlhbnQsXG4gICAgICB2YXJpYW50ID0gX3Byb3BzJHZhcmlhbnQgPT09IHZvaWQgMCA/ICdzdGFuZGFyZCcgOiBfcHJvcHMkdmFyaWFudCxcbiAgICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKHByb3BzLCBbXCJhbmNob3JPcmlnaW5cIiwgXCJiYWRnZUNvbnRlbnRcIiwgXCJjaGlsZHJlblwiLCBcImNsYXNzZXNcIiwgXCJjbGFzc05hbWVcIiwgXCJjb2xvclwiLCBcImNvbXBvbmVudFwiLCBcImludmlzaWJsZVwiLCBcIm1heFwiLCBcIm92ZXJsYXBcIiwgXCJzaG93WmVyb1wiLCBcInZhcmlhbnRcIl0pO1xuXG4gIHZhciBpbnZpc2libGUgPSBpbnZpc2libGVQcm9wO1xuXG4gIGlmIChpbnZpc2libGVQcm9wID09IG51bGwgJiYgKGJhZGdlQ29udGVudCA9PT0gMCAmJiAhc2hvd1plcm8gfHwgYmFkZ2VDb250ZW50ID09IG51bGwgJiYgdmFyaWFudCAhPT0gJ2RvdCcpKSB7XG4gICAgaW52aXNpYmxlID0gdHJ1ZTtcbiAgfVxuXG4gIHZhciBkaXNwbGF5VmFsdWUgPSAnJztcblxuICBpZiAodmFyaWFudCAhPT0gJ2RvdCcpIHtcbiAgICBkaXNwbGF5VmFsdWUgPSBiYWRnZUNvbnRlbnQgPiBtYXggPyBcIlwiLmNvbmNhdChtYXgsIFwiK1wiKSA6IGJhZGdlQ29udGVudDtcbiAgfVxuXG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChDb21wb25lbnRQcm9wLCBfZXh0ZW5kcyh7XG4gICAgY2xhc3NOYW1lOiBjbHN4KGNsYXNzZXMucm9vdCwgY2xhc3NOYW1lKSxcbiAgICByZWY6IHJlZlxuICB9LCBvdGhlciksIGNoaWxkcmVuLCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcInNwYW5cIiwge1xuICAgIGNsYXNzTmFtZTogY2xzeChjbGFzc2VzLmJhZGdlLCBjbGFzc2VzW1wiXCIuY29uY2F0KGFuY2hvck9yaWdpbi5ob3Jpem9udGFsKS5jb25jYXQoY2FwaXRhbGl6ZShhbmNob3JPcmlnaW4udmVydGljYWwpLCBcIn1cIildLCBjbGFzc2VzW1wiYW5jaG9yT3JpZ2luXCIuY29uY2F0KGNhcGl0YWxpemUoYW5jaG9yT3JpZ2luLnZlcnRpY2FsKSkuY29uY2F0KGNhcGl0YWxpemUoYW5jaG9yT3JpZ2luLmhvcml6b250YWwpKS5jb25jYXQoY2FwaXRhbGl6ZShvdmVybGFwKSldLCBjb2xvciAhPT0gJ2RlZmF1bHQnICYmIGNsYXNzZXNbXCJjb2xvclwiLmNvbmNhdChjYXBpdGFsaXplKGNvbG9yKSldLCBpbnZpc2libGUgJiYgY2xhc3Nlcy5pbnZpc2libGUsIHZhcmlhbnQgPT09ICdkb3QnICYmIGNsYXNzZXMuZG90KVxuICB9LCBkaXNwbGF5VmFsdWUpKTtcbn0pO1xucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gQmFkZ2UucHJvcFR5cGVzID0ge1xuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBXYXJuaW5nIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIC8vIHwgVGhlc2UgUHJvcFR5cGVzIGFyZSBnZW5lcmF0ZWQgZnJvbSB0aGUgVHlwZVNjcmlwdCB0eXBlIGRlZmluaXRpb25zIHxcbiAgLy8gfCAgICAgVG8gdXBkYXRlIHRoZW0gZWRpdCB0aGUgZC50cyBmaWxlIGFuZCBydW4gXCJ5YXJuIHByb3B0eXBlc1wiICAgICB8XG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuICAvKipcbiAgICogVGhlIGFuY2hvciBvZiB0aGUgYmFkZ2UuXG4gICAqL1xuICBhbmNob3JPcmlnaW46IFByb3BUeXBlcy5zaGFwZSh7XG4gICAgaG9yaXpvbnRhbDogUHJvcFR5cGVzLm9uZU9mKFsnbGVmdCcsICdyaWdodCddKS5pc1JlcXVpcmVkLFxuICAgIHZlcnRpY2FsOiBQcm9wVHlwZXMub25lT2YoWydib3R0b20nLCAndG9wJ10pLmlzUmVxdWlyZWRcbiAgfSksXG5cbiAgLyoqXG4gICAqIFRoZSBjb250ZW50IHJlbmRlcmVkIHdpdGhpbiB0aGUgYmFkZ2UuXG4gICAqL1xuICBiYWRnZUNvbnRlbnQ6IFByb3BUeXBlcy5ub2RlLFxuXG4gIC8qKlxuICAgKiBUaGUgYmFkZ2Ugd2lsbCBiZSBhZGRlZCByZWxhdGl2ZSB0byB0aGlzIG5vZGUuXG4gICAqL1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG5cbiAgLyoqXG4gICAqIE92ZXJyaWRlIG9yIGV4dGVuZCB0aGUgc3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICogU2VlIFtDU1MgQVBJXSgjY3NzKSBiZWxvdyBmb3IgbW9yZSBkZXRhaWxzLlxuICAgKi9cbiAgY2xhc3NlczogUHJvcFR5cGVzLm9iamVjdCxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBUaGUgY29sb3Igb2YgdGhlIGNvbXBvbmVudC4gSXQgc3VwcG9ydHMgdGhvc2UgdGhlbWUgY29sb3JzIHRoYXQgbWFrZSBzZW5zZSBmb3IgdGhpcyBjb21wb25lbnQuXG4gICAqL1xuICBjb2xvcjogUHJvcFR5cGVzLm9uZU9mKFsnZGVmYXVsdCcsICdlcnJvcicsICdwcmltYXJ5JywgJ3NlY29uZGFyeSddKSxcblxuICAvKipcbiAgICogVGhlIGNvbXBvbmVudCB1c2VkIGZvciB0aGUgcm9vdCBub2RlLlxuICAgKiBFaXRoZXIgYSBzdHJpbmcgdG8gdXNlIGEgSFRNTCBlbGVtZW50IG9yIGEgY29tcG9uZW50LlxuICAgKi9cbiAgY29tcG9uZW50OiBQcm9wVHlwZXNcbiAgLyogQHR5cGVzY3JpcHQtdG8tcHJvcHR5cGVzLWlnbm9yZSAqL1xuICAuZWxlbWVudFR5cGUsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGJhZGdlIHdpbGwgYmUgaW52aXNpYmxlLlxuICAgKi9cbiAgaW52aXNpYmxlOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogTWF4IGNvdW50IHRvIHNob3cuXG4gICAqL1xuICBtYXg6IFByb3BUeXBlcy5udW1iZXIsXG5cbiAgLyoqXG4gICAqIFdyYXBwZWQgc2hhcGUgdGhlIGJhZGdlIHNob3VsZCBvdmVybGFwLlxuICAgKi9cbiAgb3ZlcmxhcDogUHJvcFR5cGVzLm9uZU9mKFsnY2lyY2xlJywgJ3JlY3RhbmdsZSddKSxcblxuICAvKipcbiAgICogQ29udHJvbHMgd2hldGhlciB0aGUgYmFkZ2UgaXMgaGlkZGVuIHdoZW4gYGJhZGdlQ29udGVudGAgaXMgemVyby5cbiAgICovXG4gIHNob3daZXJvOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogVGhlIHZhcmlhbnQgdG8gdXNlLlxuICAgKi9cbiAgdmFyaWFudDogUHJvcFR5cGVzLm9uZU9mKFsnZG90JywgJ3N0YW5kYXJkJ10pXG59IDogdm9pZCAwO1xuZXhwb3J0IGRlZmF1bHQgd2l0aFN0eWxlcyhzdHlsZXMsIHtcbiAgbmFtZTogJ011aUJhZGdlJ1xufSkoQmFkZ2UpOyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNcIjtcbmltcG9ydCBfZGVmaW5lUHJvcGVydHkgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2RlZmluZVByb3BlcnR5XCI7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGNsc3ggZnJvbSAnY2xzeCc7XG5pbXBvcnQgd2l0aFN0eWxlcyBmcm9tICcuLi9zdHlsZXMvd2l0aFN0eWxlcyc7XG5pbXBvcnQgY2FwaXRhbGl6ZSBmcm9tICcuLi91dGlscy9jYXBpdGFsaXplJztcbmltcG9ydCBNb2RhbCBmcm9tICcuLi9Nb2RhbCc7XG5pbXBvcnQgQmFja2Ryb3AgZnJvbSAnLi4vQmFja2Ryb3AnO1xuaW1wb3J0IEZhZGUgZnJvbSAnLi4vRmFkZSc7XG5pbXBvcnQgeyBkdXJhdGlvbiB9IGZyb20gJy4uL3N0eWxlcy90cmFuc2l0aW9ucyc7XG5pbXBvcnQgUGFwZXIgZnJvbSAnLi4vUGFwZXInO1xuZXhwb3J0IHZhciBzdHlsZXMgPSBmdW5jdGlvbiBzdHlsZXModGhlbWUpIHtcbiAgcmV0dXJuIHtcbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50LiAqL1xuICAgIHJvb3Q6IHtcbiAgICAgICdAbWVkaWEgcHJpbnQnOiB7XG4gICAgICAgIC8vIFVzZSAhaW1wb3J0YW50IHRvIG92ZXJyaWRlIHRoZSBNb2RhbCBpbmxpbmUtc3R5bGUuXG4gICAgICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUgIWltcG9ydGFudCdcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbnRhaW5lciBlbGVtZW50IGlmIGBzY3JvbGw9XCJwYXBlclwiYC4gKi9cbiAgICBzY3JvbGxQYXBlcjoge1xuICAgICAgZGlzcGxheTogJ2ZsZXgnLFxuICAgICAganVzdGlmeUNvbnRlbnQ6ICdjZW50ZXInLFxuICAgICAgYWxpZ25JdGVtczogJ2NlbnRlcidcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbnRhaW5lciBlbGVtZW50IGlmIGBzY3JvbGw9XCJib2R5XCJgLiAqL1xuICAgIHNjcm9sbEJvZHk6IHtcbiAgICAgIG92ZXJmbG93WTogJ2F1dG8nLFxuICAgICAgb3ZlcmZsb3dYOiAnaGlkZGVuJyxcbiAgICAgIHRleHRBbGlnbjogJ2NlbnRlcicsXG4gICAgICAnJjphZnRlcic6IHtcbiAgICAgICAgY29udGVudDogJ1wiXCInLFxuICAgICAgICBkaXNwbGF5OiAnaW5saW5lLWJsb2NrJyxcbiAgICAgICAgdmVydGljYWxBbGlnbjogJ21pZGRsZScsXG4gICAgICAgIGhlaWdodDogJzEwMCUnLFxuICAgICAgICB3aWR0aDogJzAnXG4gICAgICB9XG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb250YWluZXIgZWxlbWVudC4gKi9cbiAgICBjb250YWluZXI6IHtcbiAgICAgIGhlaWdodDogJzEwMCUnLFxuICAgICAgJ0BtZWRpYSBwcmludCc6IHtcbiAgICAgICAgaGVpZ2h0OiAnYXV0bydcbiAgICAgIH0sXG4gICAgICAvLyBXZSBkaXNhYmxlIHRoZSBmb2N1cyByaW5nIGZvciBtb3VzZSwgdG91Y2ggYW5kIGtleWJvYXJkIHVzZXJzLlxuICAgICAgb3V0bGluZTogMFxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgYFBhcGVyYCBjb21wb25lbnQuICovXG4gICAgcGFwZXI6IHtcbiAgICAgIG1hcmdpbjogMzIsXG4gICAgICBwb3NpdGlvbjogJ3JlbGF0aXZlJyxcbiAgICAgIG92ZXJmbG93WTogJ2F1dG8nLFxuICAgICAgLy8gRml4IElFIDExIGlzc3VlLCB0byByZW1vdmUgYXQgc29tZSBwb2ludC5cbiAgICAgICdAbWVkaWEgcHJpbnQnOiB7XG4gICAgICAgIG92ZXJmbG93WTogJ3Zpc2libGUnLFxuICAgICAgICBib3hTaGFkb3c6ICdub25lJ1xuICAgICAgfVxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgYFBhcGVyYCBjb21wb25lbnQgaWYgYHNjcm9sbD1cInBhcGVyXCJgLiAqL1xuICAgIHBhcGVyU2Nyb2xsUGFwZXI6IHtcbiAgICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICAgIGZsZXhEaXJlY3Rpb246ICdjb2x1bW4nLFxuICAgICAgbWF4SGVpZ2h0OiAnY2FsYygxMDAlIC0gNjRweCknXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSBgUGFwZXJgIGNvbXBvbmVudCBpZiBgc2Nyb2xsPVwiYm9keVwiYC4gKi9cbiAgICBwYXBlclNjcm9sbEJvZHk6IHtcbiAgICAgIGRpc3BsYXk6ICdpbmxpbmUtYmxvY2snLFxuICAgICAgdmVydGljYWxBbGlnbjogJ21pZGRsZScsXG4gICAgICB0ZXh0QWxpZ246ICdsZWZ0JyAvLyAnaW5pdGlhbCcgZG9lc24ndCB3b3JrIG9uIElFIDExXG5cbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIGBQYXBlcmAgY29tcG9uZW50IGlmIGBtYXhXaWR0aD1mYWxzZWAuICovXG4gICAgcGFwZXJXaWR0aEZhbHNlOiB7XG4gICAgICBtYXhXaWR0aDogJ2NhbGMoMTAwJSAtIDY0cHgpJ1xuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgYFBhcGVyYCBjb21wb25lbnQgaWYgYG1heFdpZHRoPVwieHNcImAuICovXG4gICAgcGFwZXJXaWR0aFhzOiB7XG4gICAgICBtYXhXaWR0aDogTWF0aC5tYXgodGhlbWUuYnJlYWtwb2ludHMudmFsdWVzLnhzLCA0NDQpLFxuICAgICAgJyYkcGFwZXJTY3JvbGxCb2R5JzogX2RlZmluZVByb3BlcnR5KHt9LCB0aGVtZS5icmVha3BvaW50cy5kb3duKE1hdGgubWF4KHRoZW1lLmJyZWFrcG9pbnRzLnZhbHVlcy54cywgNDQ0KSArIDMyICogMiksIHtcbiAgICAgICAgbWF4V2lkdGg6ICdjYWxjKDEwMCUgLSA2NHB4KSdcbiAgICAgIH0pXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSBgUGFwZXJgIGNvbXBvbmVudCBpZiBgbWF4V2lkdGg9XCJzbVwiYC4gKi9cbiAgICBwYXBlcldpZHRoU206IHtcbiAgICAgIG1heFdpZHRoOiB0aGVtZS5icmVha3BvaW50cy52YWx1ZXMuc20sXG4gICAgICAnJiRwYXBlclNjcm9sbEJvZHknOiBfZGVmaW5lUHJvcGVydHkoe30sIHRoZW1lLmJyZWFrcG9pbnRzLmRvd24odGhlbWUuYnJlYWtwb2ludHMudmFsdWVzLnNtICsgMzIgKiAyKSwge1xuICAgICAgICBtYXhXaWR0aDogJ2NhbGMoMTAwJSAtIDY0cHgpJ1xuICAgICAgfSlcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIGBQYXBlcmAgY29tcG9uZW50IGlmIGBtYXhXaWR0aD1cIm1kXCJgLiAqL1xuICAgIHBhcGVyV2lkdGhNZDoge1xuICAgICAgbWF4V2lkdGg6IHRoZW1lLmJyZWFrcG9pbnRzLnZhbHVlcy5tZCxcbiAgICAgICcmJHBhcGVyU2Nyb2xsQm9keSc6IF9kZWZpbmVQcm9wZXJ0eSh7fSwgdGhlbWUuYnJlYWtwb2ludHMuZG93bih0aGVtZS5icmVha3BvaW50cy52YWx1ZXMubWQgKyAzMiAqIDIpLCB7XG4gICAgICAgIG1heFdpZHRoOiAnY2FsYygxMDAlIC0gNjRweCknXG4gICAgICB9KVxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgYFBhcGVyYCBjb21wb25lbnQgaWYgYG1heFdpZHRoPVwibGdcImAuICovXG4gICAgcGFwZXJXaWR0aExnOiB7XG4gICAgICBtYXhXaWR0aDogdGhlbWUuYnJlYWtwb2ludHMudmFsdWVzLmxnLFxuICAgICAgJyYkcGFwZXJTY3JvbGxCb2R5JzogX2RlZmluZVByb3BlcnR5KHt9LCB0aGVtZS5icmVha3BvaW50cy5kb3duKHRoZW1lLmJyZWFrcG9pbnRzLnZhbHVlcy5sZyArIDMyICogMiksIHtcbiAgICAgICAgbWF4V2lkdGg6ICdjYWxjKDEwMCUgLSA2NHB4KSdcbiAgICAgIH0pXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSBgUGFwZXJgIGNvbXBvbmVudCBpZiBgbWF4V2lkdGg9XCJ4bFwiYC4gKi9cbiAgICBwYXBlcldpZHRoWGw6IHtcbiAgICAgIG1heFdpZHRoOiB0aGVtZS5icmVha3BvaW50cy52YWx1ZXMueGwsXG4gICAgICAnJiRwYXBlclNjcm9sbEJvZHknOiBfZGVmaW5lUHJvcGVydHkoe30sIHRoZW1lLmJyZWFrcG9pbnRzLmRvd24odGhlbWUuYnJlYWtwb2ludHMudmFsdWVzLnhsICsgMzIgKiAyKSwge1xuICAgICAgICBtYXhXaWR0aDogJ2NhbGMoMTAwJSAtIDY0cHgpJ1xuICAgICAgfSlcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIGBQYXBlcmAgY29tcG9uZW50IGlmIGBmdWxsV2lkdGg9e3RydWV9YC4gKi9cbiAgICBwYXBlckZ1bGxXaWR0aDoge1xuICAgICAgd2lkdGg6ICdjYWxjKDEwMCUgLSA2NHB4KSdcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIGBQYXBlcmAgY29tcG9uZW50IGlmIGBmdWxsU2NyZWVuPXt0cnVlfWAuICovXG4gICAgcGFwZXJGdWxsU2NyZWVuOiB7XG4gICAgICBtYXJnaW46IDAsXG4gICAgICB3aWR0aDogJzEwMCUnLFxuICAgICAgbWF4V2lkdGg6ICcxMDAlJyxcbiAgICAgIGhlaWdodDogJzEwMCUnLFxuICAgICAgbWF4SGVpZ2h0OiAnbm9uZScsXG4gICAgICBib3JkZXJSYWRpdXM6IDAsXG4gICAgICAnJiRwYXBlclNjcm9sbEJvZHknOiB7XG4gICAgICAgIG1hcmdpbjogMCxcbiAgICAgICAgbWF4V2lkdGg6ICcxMDAlJ1xuICAgICAgfVxuICAgIH1cbiAgfTtcbn07XG52YXIgZGVmYXVsdFRyYW5zaXRpb25EdXJhdGlvbiA9IHtcbiAgZW50ZXI6IGR1cmF0aW9uLmVudGVyaW5nU2NyZWVuLFxuICBleGl0OiBkdXJhdGlvbi5sZWF2aW5nU2NyZWVuXG59O1xuLyoqXG4gKiBEaWFsb2dzIGFyZSBvdmVybGFpZCBtb2RhbCBwYXBlciBiYXNlZCBjb21wb25lbnRzIHdpdGggYSBiYWNrZHJvcC5cbiAqL1xuXG52YXIgRGlhbG9nID0gLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gRGlhbG9nKHByb3BzLCByZWYpIHtcbiAgdmFyIEJhY2tkcm9wUHJvcHMgPSBwcm9wcy5CYWNrZHJvcFByb3BzLFxuICAgICAgY2hpbGRyZW4gPSBwcm9wcy5jaGlsZHJlbixcbiAgICAgIGNsYXNzZXMgPSBwcm9wcy5jbGFzc2VzLFxuICAgICAgY2xhc3NOYW1lID0gcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgX3Byb3BzJGRpc2FibGVCYWNrZHJvID0gcHJvcHMuZGlzYWJsZUJhY2tkcm9wQ2xpY2ssXG4gICAgICBkaXNhYmxlQmFja2Ryb3BDbGljayA9IF9wcm9wcyRkaXNhYmxlQmFja2RybyA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcHJvcHMkZGlzYWJsZUJhY2tkcm8sXG4gICAgICBfcHJvcHMkZGlzYWJsZUVzY2FwZUsgPSBwcm9wcy5kaXNhYmxlRXNjYXBlS2V5RG93bixcbiAgICAgIGRpc2FibGVFc2NhcGVLZXlEb3duID0gX3Byb3BzJGRpc2FibGVFc2NhcGVLID09PSB2b2lkIDAgPyBmYWxzZSA6IF9wcm9wcyRkaXNhYmxlRXNjYXBlSyxcbiAgICAgIF9wcm9wcyRmdWxsU2NyZWVuID0gcHJvcHMuZnVsbFNjcmVlbixcbiAgICAgIGZ1bGxTY3JlZW4gPSBfcHJvcHMkZnVsbFNjcmVlbiA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcHJvcHMkZnVsbFNjcmVlbixcbiAgICAgIF9wcm9wcyRmdWxsV2lkdGggPSBwcm9wcy5mdWxsV2lkdGgsXG4gICAgICBmdWxsV2lkdGggPSBfcHJvcHMkZnVsbFdpZHRoID09PSB2b2lkIDAgPyBmYWxzZSA6IF9wcm9wcyRmdWxsV2lkdGgsXG4gICAgICBfcHJvcHMkbWF4V2lkdGggPSBwcm9wcy5tYXhXaWR0aCxcbiAgICAgIG1heFdpZHRoID0gX3Byb3BzJG1heFdpZHRoID09PSB2b2lkIDAgPyAnc20nIDogX3Byb3BzJG1heFdpZHRoLFxuICAgICAgb25CYWNrZHJvcENsaWNrID0gcHJvcHMub25CYWNrZHJvcENsaWNrLFxuICAgICAgb25DbG9zZSA9IHByb3BzLm9uQ2xvc2UsXG4gICAgICBvbkVudGVyID0gcHJvcHMub25FbnRlcixcbiAgICAgIG9uRW50ZXJlZCA9IHByb3BzLm9uRW50ZXJlZCxcbiAgICAgIG9uRW50ZXJpbmcgPSBwcm9wcy5vbkVudGVyaW5nLFxuICAgICAgb25Fc2NhcGVLZXlEb3duID0gcHJvcHMub25Fc2NhcGVLZXlEb3duLFxuICAgICAgb25FeGl0ID0gcHJvcHMub25FeGl0LFxuICAgICAgb25FeGl0ZWQgPSBwcm9wcy5vbkV4aXRlZCxcbiAgICAgIG9uRXhpdGluZyA9IHByb3BzLm9uRXhpdGluZyxcbiAgICAgIG9wZW4gPSBwcm9wcy5vcGVuLFxuICAgICAgX3Byb3BzJFBhcGVyQ29tcG9uZW50ID0gcHJvcHMuUGFwZXJDb21wb25lbnQsXG4gICAgICBQYXBlckNvbXBvbmVudCA9IF9wcm9wcyRQYXBlckNvbXBvbmVudCA9PT0gdm9pZCAwID8gUGFwZXIgOiBfcHJvcHMkUGFwZXJDb21wb25lbnQsXG4gICAgICBfcHJvcHMkUGFwZXJQcm9wcyA9IHByb3BzLlBhcGVyUHJvcHMsXG4gICAgICBQYXBlclByb3BzID0gX3Byb3BzJFBhcGVyUHJvcHMgPT09IHZvaWQgMCA/IHt9IDogX3Byb3BzJFBhcGVyUHJvcHMsXG4gICAgICBfcHJvcHMkc2Nyb2xsID0gcHJvcHMuc2Nyb2xsLFxuICAgICAgc2Nyb2xsID0gX3Byb3BzJHNjcm9sbCA9PT0gdm9pZCAwID8gJ3BhcGVyJyA6IF9wcm9wcyRzY3JvbGwsXG4gICAgICBfcHJvcHMkVHJhbnNpdGlvbkNvbXAgPSBwcm9wcy5UcmFuc2l0aW9uQ29tcG9uZW50LFxuICAgICAgVHJhbnNpdGlvbkNvbXBvbmVudCA9IF9wcm9wcyRUcmFuc2l0aW9uQ29tcCA9PT0gdm9pZCAwID8gRmFkZSA6IF9wcm9wcyRUcmFuc2l0aW9uQ29tcCxcbiAgICAgIF9wcm9wcyR0cmFuc2l0aW9uRHVyYSA9IHByb3BzLnRyYW5zaXRpb25EdXJhdGlvbixcbiAgICAgIHRyYW5zaXRpb25EdXJhdGlvbiA9IF9wcm9wcyR0cmFuc2l0aW9uRHVyYSA9PT0gdm9pZCAwID8gZGVmYXVsdFRyYW5zaXRpb25EdXJhdGlvbiA6IF9wcm9wcyR0cmFuc2l0aW9uRHVyYSxcbiAgICAgIFRyYW5zaXRpb25Qcm9wcyA9IHByb3BzLlRyYW5zaXRpb25Qcm9wcyxcbiAgICAgIGFyaWFEZXNjcmliZWRieSA9IHByb3BzWydhcmlhLWRlc2NyaWJlZGJ5J10sXG4gICAgICBhcmlhTGFiZWxsZWRieSA9IHByb3BzWydhcmlhLWxhYmVsbGVkYnknXSxcbiAgICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKHByb3BzLCBbXCJCYWNrZHJvcFByb3BzXCIsIFwiY2hpbGRyZW5cIiwgXCJjbGFzc2VzXCIsIFwiY2xhc3NOYW1lXCIsIFwiZGlzYWJsZUJhY2tkcm9wQ2xpY2tcIiwgXCJkaXNhYmxlRXNjYXBlS2V5RG93blwiLCBcImZ1bGxTY3JlZW5cIiwgXCJmdWxsV2lkdGhcIiwgXCJtYXhXaWR0aFwiLCBcIm9uQmFja2Ryb3BDbGlja1wiLCBcIm9uQ2xvc2VcIiwgXCJvbkVudGVyXCIsIFwib25FbnRlcmVkXCIsIFwib25FbnRlcmluZ1wiLCBcIm9uRXNjYXBlS2V5RG93blwiLCBcIm9uRXhpdFwiLCBcIm9uRXhpdGVkXCIsIFwib25FeGl0aW5nXCIsIFwib3BlblwiLCBcIlBhcGVyQ29tcG9uZW50XCIsIFwiUGFwZXJQcm9wc1wiLCBcInNjcm9sbFwiLCBcIlRyYW5zaXRpb25Db21wb25lbnRcIiwgXCJ0cmFuc2l0aW9uRHVyYXRpb25cIiwgXCJUcmFuc2l0aW9uUHJvcHNcIiwgXCJhcmlhLWRlc2NyaWJlZGJ5XCIsIFwiYXJpYS1sYWJlbGxlZGJ5XCJdKTtcblxuICB2YXIgbW91c2VEb3duVGFyZ2V0ID0gUmVhY3QudXNlUmVmKCk7XG5cbiAgdmFyIGhhbmRsZU1vdXNlRG93biA9IGZ1bmN0aW9uIGhhbmRsZU1vdXNlRG93bihldmVudCkge1xuICAgIG1vdXNlRG93blRhcmdldC5jdXJyZW50ID0gZXZlbnQudGFyZ2V0O1xuICB9O1xuXG4gIHZhciBoYW5kbGVCYWNrZHJvcENsaWNrID0gZnVuY3Rpb24gaGFuZGxlQmFja2Ryb3BDbGljayhldmVudCkge1xuICAgIC8vIElnbm9yZSB0aGUgZXZlbnRzIG5vdCBjb21pbmcgZnJvbSB0aGUgXCJiYWNrZHJvcFwiXG4gICAgLy8gV2UgZG9uJ3Qgd2FudCB0byBjbG9zZSB0aGUgZGlhbG9nIHdoZW4gY2xpY2tpbmcgdGhlIGRpYWxvZyBjb250ZW50LlxuICAgIGlmIChldmVudC50YXJnZXQgIT09IGV2ZW50LmN1cnJlbnRUYXJnZXQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9IC8vIE1ha2Ugc3VyZSB0aGUgZXZlbnQgc3RhcnRzIGFuZCBlbmRzIG9uIHRoZSBzYW1lIERPTSBlbGVtZW50LlxuXG5cbiAgICBpZiAoZXZlbnQudGFyZ2V0ICE9PSBtb3VzZURvd25UYXJnZXQuY3VycmVudCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIG1vdXNlRG93blRhcmdldC5jdXJyZW50ID0gbnVsbDtcblxuICAgIGlmIChvbkJhY2tkcm9wQ2xpY2spIHtcbiAgICAgIG9uQmFja2Ryb3BDbGljayhldmVudCk7XG4gICAgfVxuXG4gICAgaWYgKCFkaXNhYmxlQmFja2Ryb3BDbGljayAmJiBvbkNsb3NlKSB7XG4gICAgICBvbkNsb3NlKGV2ZW50LCAnYmFja2Ryb3BDbGljaycpO1xuICAgIH1cbiAgfTtcblxuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoTW9kYWwsIF9leHRlbmRzKHtcbiAgICBjbGFzc05hbWU6IGNsc3goY2xhc3Nlcy5yb290LCBjbGFzc05hbWUpLFxuICAgIEJhY2tkcm9wQ29tcG9uZW50OiBCYWNrZHJvcCxcbiAgICBCYWNrZHJvcFByb3BzOiBfZXh0ZW5kcyh7XG4gICAgICB0cmFuc2l0aW9uRHVyYXRpb246IHRyYW5zaXRpb25EdXJhdGlvblxuICAgIH0sIEJhY2tkcm9wUHJvcHMpLFxuICAgIGNsb3NlQWZ0ZXJUcmFuc2l0aW9uOiB0cnVlLFxuICAgIGRpc2FibGVCYWNrZHJvcENsaWNrOiBkaXNhYmxlQmFja2Ryb3BDbGljayxcbiAgICBkaXNhYmxlRXNjYXBlS2V5RG93bjogZGlzYWJsZUVzY2FwZUtleURvd24sXG4gICAgb25Fc2NhcGVLZXlEb3duOiBvbkVzY2FwZUtleURvd24sXG4gICAgb25DbG9zZTogb25DbG9zZSxcbiAgICBvcGVuOiBvcGVuLFxuICAgIHJlZjogcmVmXG4gIH0sIG90aGVyKSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoVHJhbnNpdGlvbkNvbXBvbmVudCwgX2V4dGVuZHMoe1xuICAgIGFwcGVhcjogdHJ1ZSxcbiAgICBpbjogb3BlbixcbiAgICB0aW1lb3V0OiB0cmFuc2l0aW9uRHVyYXRpb24sXG4gICAgb25FbnRlcjogb25FbnRlcixcbiAgICBvbkVudGVyaW5nOiBvbkVudGVyaW5nLFxuICAgIG9uRW50ZXJlZDogb25FbnRlcmVkLFxuICAgIG9uRXhpdDogb25FeGl0LFxuICAgIG9uRXhpdGluZzogb25FeGl0aW5nLFxuICAgIG9uRXhpdGVkOiBvbkV4aXRlZCxcbiAgICByb2xlOiBcIm5vbmUgcHJlc2VudGF0aW9uXCJcbiAgfSwgVHJhbnNpdGlvblByb3BzKSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwge1xuICAgIGNsYXNzTmFtZTogY2xzeChjbGFzc2VzLmNvbnRhaW5lciwgY2xhc3Nlc1tcInNjcm9sbFwiLmNvbmNhdChjYXBpdGFsaXplKHNjcm9sbCkpXSksXG4gICAgb25Nb3VzZVVwOiBoYW5kbGVCYWNrZHJvcENsaWNrLFxuICAgIG9uTW91c2VEb3duOiBoYW5kbGVNb3VzZURvd25cbiAgfSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoUGFwZXJDb21wb25lbnQsIF9leHRlbmRzKHtcbiAgICBlbGV2YXRpb246IDI0LFxuICAgIHJvbGU6IFwiZGlhbG9nXCIsXG4gICAgXCJhcmlhLWRlc2NyaWJlZGJ5XCI6IGFyaWFEZXNjcmliZWRieSxcbiAgICBcImFyaWEtbGFiZWxsZWRieVwiOiBhcmlhTGFiZWxsZWRieVxuICB9LCBQYXBlclByb3BzLCB7XG4gICAgY2xhc3NOYW1lOiBjbHN4KGNsYXNzZXMucGFwZXIsIGNsYXNzZXNbXCJwYXBlclNjcm9sbFwiLmNvbmNhdChjYXBpdGFsaXplKHNjcm9sbCkpXSwgY2xhc3Nlc1tcInBhcGVyV2lkdGhcIi5jb25jYXQoY2FwaXRhbGl6ZShTdHJpbmcobWF4V2lkdGgpKSldLCBQYXBlclByb3BzLmNsYXNzTmFtZSwgZnVsbFNjcmVlbiAmJiBjbGFzc2VzLnBhcGVyRnVsbFNjcmVlbiwgZnVsbFdpZHRoICYmIGNsYXNzZXMucGFwZXJGdWxsV2lkdGgpXG4gIH0pLCBjaGlsZHJlbikpKSk7XG59KTtcbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IERpYWxvZy5wcm9wVHlwZXMgPSB7XG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIFdhcm5pbmcgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgLy8gfCBUaGVzZSBQcm9wVHlwZXMgYXJlIGdlbmVyYXRlZCBmcm9tIHRoZSBUeXBlU2NyaXB0IHR5cGUgZGVmaW5pdGlvbnMgfFxuICAvLyB8ICAgICBUbyB1cGRhdGUgdGhlbSBlZGl0IHRoZSBkLnRzIGZpbGUgYW5kIHJ1biBcInlhcm4gcHJvcHR5cGVzXCIgICAgIHxcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4gIC8qKlxuICAgKiBUaGUgaWQocykgb2YgdGhlIGVsZW1lbnQocykgdGhhdCBkZXNjcmliZSB0aGUgZGlhbG9nLlxuICAgKi9cbiAgJ2FyaWEtZGVzY3JpYmVkYnknOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBUaGUgaWQocykgb2YgdGhlIGVsZW1lbnQocykgdGhhdCBsYWJlbCB0aGUgZGlhbG9nLlxuICAgKi9cbiAgJ2FyaWEtbGFiZWxsZWRieSc6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIEJhY2tkcm9wUHJvcHM6IFByb3BUeXBlcy5vYmplY3QsXG5cbiAgLyoqXG4gICAqIERpYWxvZyBjaGlsZHJlbiwgdXN1YWxseSB0aGUgaW5jbHVkZWQgc3ViLWNvbXBvbmVudHMuXG4gICAqL1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG5cbiAgLyoqXG4gICAqIE92ZXJyaWRlIG9yIGV4dGVuZCB0aGUgc3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICogU2VlIFtDU1MgQVBJXSgjY3NzKSBiZWxvdyBmb3IgbW9yZSBkZXRhaWxzLlxuICAgKi9cbiAgY2xhc3NlczogUHJvcFR5cGVzLm9iamVjdCxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIGNsaWNraW5nIHRoZSBiYWNrZHJvcCB3aWxsIG5vdCBmaXJlIHRoZSBgb25DbG9zZWAgY2FsbGJhY2suXG4gICAqL1xuICBkaXNhYmxlQmFja2Ryb3BDbGljazogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgaGl0dGluZyBlc2NhcGUgd2lsbCBub3QgZmlyZSB0aGUgYG9uQ2xvc2VgIGNhbGxiYWNrLlxuICAgKi9cbiAgZGlzYWJsZUVzY2FwZUtleURvd246IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBkaWFsb2cgd2lsbCBiZSBmdWxsLXNjcmVlblxuICAgKi9cbiAgZnVsbFNjcmVlbjogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGRpYWxvZyBzdHJldGNoZXMgdG8gYG1heFdpZHRoYC5cbiAgICpcbiAgICogTm90aWNlIHRoYXQgdGhlIGRpYWxvZyB3aWR0aCBncm93IGlzIGxpbWl0ZWQgYnkgdGhlIGRlZmF1bHQgbWFyZ2luLlxuICAgKi9cbiAgZnVsbFdpZHRoOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogRGV0ZXJtaW5lIHRoZSBtYXgtd2lkdGggb2YgdGhlIGRpYWxvZy5cbiAgICogVGhlIGRpYWxvZyB3aWR0aCBncm93cyB3aXRoIHRoZSBzaXplIG9mIHRoZSBzY3JlZW4uXG4gICAqIFNldCB0byBgZmFsc2VgIHRvIGRpc2FibGUgYG1heFdpZHRoYC5cbiAgICovXG4gIG1heFdpZHRoOiBQcm9wVHlwZXMub25lT2YoWydsZycsICdtZCcsICdzbScsICd4bCcsICd4cycsIGZhbHNlXSksXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIHdoZW4gdGhlIGJhY2tkcm9wIGlzIGNsaWNrZWQuXG4gICAqL1xuICBvbkJhY2tkcm9wQ2xpY2s6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCB3aGVuIHRoZSBjb21wb25lbnQgcmVxdWVzdHMgdG8gYmUgY2xvc2VkLlxuICAgKlxuICAgKiBAcGFyYW0ge29iamVjdH0gZXZlbnQgVGhlIGV2ZW50IHNvdXJjZSBvZiB0aGUgY2FsbGJhY2suXG4gICAqIEBwYXJhbSB7c3RyaW5nfSByZWFzb24gQ2FuIGJlOiBgXCJlc2NhcGVLZXlEb3duXCJgLCBgXCJiYWNrZHJvcENsaWNrXCJgLlxuICAgKi9cbiAgb25DbG9zZTogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIGJlZm9yZSB0aGUgZGlhbG9nIGVudGVycy5cbiAgICovXG4gIG9uRW50ZXI6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCB3aGVuIHRoZSBkaWFsb2cgaGFzIGVudGVyZWQuXG4gICAqL1xuICBvbkVudGVyZWQ6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCB3aGVuIHRoZSBkaWFsb2cgaXMgZW50ZXJpbmcuXG4gICAqL1xuICBvbkVudGVyaW5nOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgd2hlbiB0aGUgZXNjYXBlIGtleSBpcyBwcmVzc2VkLFxuICAgKiBgZGlzYWJsZUtleWJvYXJkYCBpcyBmYWxzZSBhbmQgdGhlIG1vZGFsIGlzIGluIGZvY3VzLlxuICAgKi9cbiAgb25Fc2NhcGVLZXlEb3duOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgYmVmb3JlIHRoZSBkaWFsb2cgZXhpdHMuXG4gICAqL1xuICBvbkV4aXQ6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCB3aGVuIHRoZSBkaWFsb2cgaGFzIGV4aXRlZC5cbiAgICovXG4gIG9uRXhpdGVkOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgd2hlbiB0aGUgZGlhbG9nIGlzIGV4aXRpbmcuXG4gICAqL1xuICBvbkV4aXRpbmc6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBEaWFsb2cgaXMgb3Blbi5cbiAgICovXG4gIG9wZW46IFByb3BUeXBlcy5ib29sLmlzUmVxdWlyZWQsXG5cbiAgLyoqXG4gICAqIFRoZSBjb21wb25lbnQgdXNlZCB0byByZW5kZXIgdGhlIGJvZHkgb2YgdGhlIGRpYWxvZy5cbiAgICovXG4gIFBhcGVyQ29tcG9uZW50OiBQcm9wVHlwZXMuZWxlbWVudFR5cGUsXG5cbiAgLyoqXG4gICAqIFByb3BzIGFwcGxpZWQgdG8gdGhlIFtgUGFwZXJgXSgvYXBpL3BhcGVyLykgZWxlbWVudC5cbiAgICovXG4gIFBhcGVyUHJvcHM6IFByb3BUeXBlcy5vYmplY3QsXG5cbiAgLyoqXG4gICAqIERldGVybWluZSB0aGUgY29udGFpbmVyIGZvciBzY3JvbGxpbmcgdGhlIGRpYWxvZy5cbiAgICovXG4gIHNjcm9sbDogUHJvcFR5cGVzLm9uZU9mKFsnYm9keScsICdwYXBlciddKSxcblxuICAvKipcbiAgICogVGhlIGNvbXBvbmVudCB1c2VkIGZvciB0aGUgdHJhbnNpdGlvbi5cbiAgICogW0ZvbGxvdyB0aGlzIGd1aWRlXSgvY29tcG9uZW50cy90cmFuc2l0aW9ucy8jdHJhbnNpdGlvbmNvbXBvbmVudC1wcm9wKSB0byBsZWFybiBtb3JlIGFib3V0IHRoZSByZXF1aXJlbWVudHMgZm9yIHRoaXMgY29tcG9uZW50LlxuICAgKi9cbiAgVHJhbnNpdGlvbkNvbXBvbmVudDogUHJvcFR5cGVzLmVsZW1lbnRUeXBlLFxuXG4gIC8qKlxuICAgKiBUaGUgZHVyYXRpb24gZm9yIHRoZSB0cmFuc2l0aW9uLCBpbiBtaWxsaXNlY29uZHMuXG4gICAqIFlvdSBtYXkgc3BlY2lmeSBhIHNpbmdsZSB0aW1lb3V0IGZvciBhbGwgdHJhbnNpdGlvbnMsIG9yIGluZGl2aWR1YWxseSB3aXRoIGFuIG9iamVjdC5cbiAgICovXG4gIHRyYW5zaXRpb25EdXJhdGlvbjogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLm51bWJlciwgUHJvcFR5cGVzLnNoYXBlKHtcbiAgICBhcHBlYXI6IFByb3BUeXBlcy5udW1iZXIsXG4gICAgZW50ZXI6IFByb3BUeXBlcy5udW1iZXIsXG4gICAgZXhpdDogUHJvcFR5cGVzLm51bWJlclxuICB9KV0pLFxuXG4gIC8qKlxuICAgKiBQcm9wcyBhcHBsaWVkIHRvIHRoZSBbYFRyYW5zaXRpb25gXShodHRwOi8vcmVhY3Rjb21tdW5pdHkub3JnL3JlYWN0LXRyYW5zaXRpb24tZ3JvdXAvdHJhbnNpdGlvbiNUcmFuc2l0aW9uLXByb3BzKSBlbGVtZW50LlxuICAgKi9cbiAgVHJhbnNpdGlvblByb3BzOiBQcm9wVHlwZXMub2JqZWN0XG59IDogdm9pZCAwO1xuZXhwb3J0IGRlZmF1bHQgd2l0aFN0eWxlcyhzdHlsZXMsIHtcbiAgbmFtZTogJ011aURpYWxvZydcbn0pKERpYWxvZyk7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc1wiO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBjbHN4IGZyb20gJ2Nsc3gnO1xuaW1wb3J0IHdpdGhTdHlsZXMgZnJvbSAnLi4vc3R5bGVzL3dpdGhTdHlsZXMnO1xuaW1wb3J0IFR5cG9ncmFwaHkgZnJvbSAnLi4vVHlwb2dyYXBoeSc7XG5leHBvcnQgdmFyIHN0eWxlcyA9IHtcbiAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudC4gKi9cbiAgcm9vdDoge1xuICAgIG1hcmdpbjogMCxcbiAgICBwYWRkaW5nOiAnMTZweCAyNHB4JyxcbiAgICBmbGV4OiAnMCAwIGF1dG8nXG4gIH1cbn07XG52YXIgRGlhbG9nVGl0bGUgPSAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBEaWFsb2dUaXRsZShwcm9wcywgcmVmKSB7XG4gIHZhciBjaGlsZHJlbiA9IHByb3BzLmNoaWxkcmVuLFxuICAgICAgY2xhc3NlcyA9IHByb3BzLmNsYXNzZXMsXG4gICAgICBjbGFzc05hbWUgPSBwcm9wcy5jbGFzc05hbWUsXG4gICAgICBfcHJvcHMkZGlzYWJsZVR5cG9ncmEgPSBwcm9wcy5kaXNhYmxlVHlwb2dyYXBoeSxcbiAgICAgIGRpc2FibGVUeXBvZ3JhcGh5ID0gX3Byb3BzJGRpc2FibGVUeXBvZ3JhID09PSB2b2lkIDAgPyBmYWxzZSA6IF9wcm9wcyRkaXNhYmxlVHlwb2dyYSxcbiAgICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKHByb3BzLCBbXCJjaGlsZHJlblwiLCBcImNsYXNzZXNcIiwgXCJjbGFzc05hbWVcIiwgXCJkaXNhYmxlVHlwb2dyYXBoeVwiXSk7XG5cbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIF9leHRlbmRzKHtcbiAgICBjbGFzc05hbWU6IGNsc3goY2xhc3Nlcy5yb290LCBjbGFzc05hbWUpLFxuICAgIHJlZjogcmVmXG4gIH0sIG90aGVyKSwgZGlzYWJsZVR5cG9ncmFwaHkgPyBjaGlsZHJlbiA6IC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFR5cG9ncmFwaHksIHtcbiAgICBjb21wb25lbnQ6IFwiaDJcIixcbiAgICB2YXJpYW50OiBcImg2XCJcbiAgfSwgY2hpbGRyZW4pKTtcbn0pO1xucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gRGlhbG9nVGl0bGUucHJvcFR5cGVzID0ge1xuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBXYXJuaW5nIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIC8vIHwgVGhlc2UgUHJvcFR5cGVzIGFyZSBnZW5lcmF0ZWQgZnJvbSB0aGUgVHlwZVNjcmlwdCB0eXBlIGRlZmluaXRpb25zIHxcbiAgLy8gfCAgICAgVG8gdXBkYXRlIHRoZW0gZWRpdCB0aGUgZC50cyBmaWxlIGFuZCBydW4gXCJ5YXJuIHByb3B0eXBlc1wiICAgICB8XG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuICAvKipcbiAgICogVGhlIGNvbnRlbnQgb2YgdGhlIGNvbXBvbmVudC5cbiAgICovXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcblxuICAvKipcbiAgICogT3ZlcnJpZGUgb3IgZXh0ZW5kIHRoZSBzdHlsZXMgYXBwbGllZCB0byB0aGUgY29tcG9uZW50LlxuICAgKiBTZWUgW0NTUyBBUEldKCNjc3MpIGJlbG93IGZvciBtb3JlIGRldGFpbHMuXG4gICAqL1xuICBjbGFzc2VzOiBQcm9wVHlwZXMub2JqZWN0LFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGNoaWxkcmVuIHdvbid0IGJlIHdyYXBwZWQgYnkgYSB0eXBvZ3JhcGh5IGNvbXBvbmVudC5cbiAgICogRm9yIGluc3RhbmNlLCB0aGlzIGNhbiBiZSB1c2VmdWwgdG8gcmVuZGVyIGFuIGg0IGluc3RlYWQgb2YgdGhlIGRlZmF1bHQgaDIuXG4gICAqL1xuICBkaXNhYmxlVHlwb2dyYXBoeTogUHJvcFR5cGVzLmJvb2xcbn0gOiB2b2lkIDA7XG5leHBvcnQgZGVmYXVsdCB3aXRoU3R5bGVzKHN0eWxlcywge1xuICBuYW1lOiAnTXVpRGlhbG9nVGl0bGUnXG59KShEaWFsb2dUaXRsZSk7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc1wiO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBjbHN4IGZyb20gJ2Nsc3gnO1xuaW1wb3J0IHdpdGhTdHlsZXMgZnJvbSAnLi4vc3R5bGVzL3dpdGhTdHlsZXMnO1xuZXhwb3J0IHZhciBzdHlsZXMgPSBmdW5jdGlvbiBzdHlsZXModGhlbWUpIHtcbiAgcmV0dXJuIHtcbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50LiAqL1xuICAgIHJvb3Q6IHtcbiAgICAgIGZsZXg6ICcxIDEgYXV0bycsXG4gICAgICBXZWJraXRPdmVyZmxvd1Njcm9sbGluZzogJ3RvdWNoJyxcbiAgICAgIC8vIEFkZCBpT1MgbW9tZW50dW0gc2Nyb2xsaW5nLlxuICAgICAgb3ZlcmZsb3dZOiAnYXV0bycsXG4gICAgICBwYWRkaW5nOiAnOHB4IDI0cHgnLFxuICAgICAgJyY6Zmlyc3QtY2hpbGQnOiB7XG4gICAgICAgIC8vIGRpYWxvZyB3aXRob3V0IHRpdGxlXG4gICAgICAgIHBhZGRpbmdUb3A6IDIwXG4gICAgICB9XG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGRpdmlkZXJzPXt0cnVlfWAuICovXG4gICAgZGl2aWRlcnM6IHtcbiAgICAgIHBhZGRpbmc6ICcxNnB4IDI0cHgnLFxuICAgICAgYm9yZGVyVG9wOiBcIjFweCBzb2xpZCBcIi5jb25jYXQodGhlbWUucGFsZXR0ZS5kaXZpZGVyKSxcbiAgICAgIGJvcmRlckJvdHRvbTogXCIxcHggc29saWQgXCIuY29uY2F0KHRoZW1lLnBhbGV0dGUuZGl2aWRlcilcbiAgICB9XG4gIH07XG59O1xudmFyIERpYWxvZ0NvbnRlbnQgPSAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBEaWFsb2dDb250ZW50KHByb3BzLCByZWYpIHtcbiAgdmFyIGNsYXNzZXMgPSBwcm9wcy5jbGFzc2VzLFxuICAgICAgY2xhc3NOYW1lID0gcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgX3Byb3BzJGRpdmlkZXJzID0gcHJvcHMuZGl2aWRlcnMsXG4gICAgICBkaXZpZGVycyA9IF9wcm9wcyRkaXZpZGVycyA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcHJvcHMkZGl2aWRlcnMsXG4gICAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhwcm9wcywgW1wiY2xhc3Nlc1wiLCBcImNsYXNzTmFtZVwiLCBcImRpdmlkZXJzXCJdKTtcblxuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgX2V4dGVuZHMoe1xuICAgIGNsYXNzTmFtZTogY2xzeChjbGFzc2VzLnJvb3QsIGNsYXNzTmFtZSwgZGl2aWRlcnMgJiYgY2xhc3Nlcy5kaXZpZGVycyksXG4gICAgcmVmOiByZWZcbiAgfSwgb3RoZXIpKTtcbn0pO1xucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gRGlhbG9nQ29udGVudC5wcm9wVHlwZXMgPSB7XG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIFdhcm5pbmcgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgLy8gfCBUaGVzZSBQcm9wVHlwZXMgYXJlIGdlbmVyYXRlZCBmcm9tIHRoZSBUeXBlU2NyaXB0IHR5cGUgZGVmaW5pdGlvbnMgfFxuICAvLyB8ICAgICBUbyB1cGRhdGUgdGhlbSBlZGl0IHRoZSBkLnRzIGZpbGUgYW5kIHJ1biBcInlhcm4gcHJvcHR5cGVzXCIgICAgIHxcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4gIC8qKlxuICAgKiBUaGUgY29udGVudCBvZiB0aGUgY29tcG9uZW50LlxuICAgKi9cbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuXG4gIC8qKlxuICAgKiBPdmVycmlkZSBvciBleHRlbmQgdGhlIHN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAqIFNlZSBbQ1NTIEFQSV0oI2NzcykgYmVsb3cgZm9yIG1vcmUgZGV0YWlscy5cbiAgICovXG4gIGNsYXNzZXM6IFByb3BUeXBlcy5vYmplY3QsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogRGlzcGxheSB0aGUgdG9wIGFuZCBib3R0b20gZGl2aWRlcnMuXG4gICAqL1xuICBkaXZpZGVyczogUHJvcFR5cGVzLmJvb2xcbn0gOiB2b2lkIDA7XG5leHBvcnQgZGVmYXVsdCB3aXRoU3R5bGVzKHN0eWxlcywge1xuICBuYW1lOiAnTXVpRGlhbG9nQ29udGVudCdcbn0pKERpYWxvZ0NvbnRlbnQpOyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCB3aXRoU3R5bGVzIGZyb20gJy4uL3N0eWxlcy93aXRoU3R5bGVzJztcbmltcG9ydCBUeXBvZ3JhcGh5IGZyb20gJy4uL1R5cG9ncmFwaHknO1xuZXhwb3J0IHZhciBzdHlsZXMgPSB7XG4gIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQuICovXG4gIHJvb3Q6IHtcbiAgICBtYXJnaW5Cb3R0b206IDEyXG4gIH1cbn07XG52YXIgRGlhbG9nQ29udGVudFRleHQgPSAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBEaWFsb2dDb250ZW50VGV4dChwcm9wcywgcmVmKSB7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChUeXBvZ3JhcGh5LCBfZXh0ZW5kcyh7XG4gICAgY29tcG9uZW50OiBcInBcIixcbiAgICB2YXJpYW50OiBcImJvZHkxXCIsXG4gICAgY29sb3I6IFwidGV4dFNlY29uZGFyeVwiLFxuICAgIHJlZjogcmVmXG4gIH0sIHByb3BzKSk7XG59KTtcbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IERpYWxvZ0NvbnRlbnRUZXh0LnByb3BUeXBlcyA9IHtcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gV2FybmluZyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAvLyB8IFRoZXNlIFByb3BUeXBlcyBhcmUgZ2VuZXJhdGVkIGZyb20gdGhlIFR5cGVTY3JpcHQgdHlwZSBkZWZpbml0aW9ucyB8XG4gIC8vIHwgICAgIFRvIHVwZGF0ZSB0aGVtIGVkaXQgdGhlIGQudHMgZmlsZSBhbmQgcnVuIFwieWFybiBwcm9wdHlwZXNcIiAgICAgfFxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbiAgLyoqXG4gICAqIFRoZSBjb250ZW50IG9mIHRoZSBjb21wb25lbnQuXG4gICAqL1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG5cbiAgLyoqXG4gICAqIE92ZXJyaWRlIG9yIGV4dGVuZCB0aGUgc3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICogU2VlIFtDU1MgQVBJXSgjY3NzKSBiZWxvdyBmb3IgbW9yZSBkZXRhaWxzLlxuICAgKi9cbiAgY2xhc3NlczogUHJvcFR5cGVzLm9iamVjdFxufSA6IHZvaWQgMDtcbmV4cG9ydCBkZWZhdWx0IHdpdGhTdHlsZXMoc3R5bGVzLCB7XG4gIG5hbWU6ICdNdWlEaWFsb2dDb250ZW50VGV4dCdcbn0pKERpYWxvZ0NvbnRlbnRUZXh0KTsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzXCI7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGNsc3ggZnJvbSAnY2xzeCc7XG5pbXBvcnQgd2l0aFN0eWxlcyBmcm9tICcuLi9zdHlsZXMvd2l0aFN0eWxlcyc7XG5leHBvcnQgdmFyIHN0eWxlcyA9IHtcbiAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudC4gKi9cbiAgcm9vdDoge1xuICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICBhbGlnbkl0ZW1zOiAnY2VudGVyJyxcbiAgICBwYWRkaW5nOiA4LFxuICAgIGp1c3RpZnlDb250ZW50OiAnZmxleC1lbmQnLFxuICAgIGZsZXg6ICcwIDAgYXV0bydcbiAgfSxcblxuICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBkaXNhYmxlU3BhY2luZz17ZmFsc2V9YC4gKi9cbiAgc3BhY2luZzoge1xuICAgICcmID4gOm5vdCg6Zmlyc3QtY2hpbGQpJzoge1xuICAgICAgbWFyZ2luTGVmdDogOFxuICAgIH1cbiAgfVxufTtcbnZhciBEaWFsb2dBY3Rpb25zID0gLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gRGlhbG9nQWN0aW9ucyhwcm9wcywgcmVmKSB7XG4gIHZhciBfcHJvcHMkZGlzYWJsZVNwYWNpbmcgPSBwcm9wcy5kaXNhYmxlU3BhY2luZyxcbiAgICAgIGRpc2FibGVTcGFjaW5nID0gX3Byb3BzJGRpc2FibGVTcGFjaW5nID09PSB2b2lkIDAgPyBmYWxzZSA6IF9wcm9wcyRkaXNhYmxlU3BhY2luZyxcbiAgICAgIGNsYXNzZXMgPSBwcm9wcy5jbGFzc2VzLFxuICAgICAgY2xhc3NOYW1lID0gcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMocHJvcHMsIFtcImRpc2FibGVTcGFjaW5nXCIsIFwiY2xhc3Nlc1wiLCBcImNsYXNzTmFtZVwiXSk7XG5cbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIF9leHRlbmRzKHtcbiAgICBjbGFzc05hbWU6IGNsc3goY2xhc3Nlcy5yb290LCBjbGFzc05hbWUsICFkaXNhYmxlU3BhY2luZyAmJiBjbGFzc2VzLnNwYWNpbmcpLFxuICAgIHJlZjogcmVmXG4gIH0sIG90aGVyKSk7XG59KTtcbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IERpYWxvZ0FjdGlvbnMucHJvcFR5cGVzID0ge1xuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBXYXJuaW5nIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIC8vIHwgVGhlc2UgUHJvcFR5cGVzIGFyZSBnZW5lcmF0ZWQgZnJvbSB0aGUgVHlwZVNjcmlwdCB0eXBlIGRlZmluaXRpb25zIHxcbiAgLy8gfCAgICAgVG8gdXBkYXRlIHRoZW0gZWRpdCB0aGUgZC50cyBmaWxlIGFuZCBydW4gXCJ5YXJuIHByb3B0eXBlc1wiICAgICB8XG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuICAvKipcbiAgICogVGhlIGNvbnRlbnQgb2YgdGhlIGNvbXBvbmVudC5cbiAgICovXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcblxuICAvKipcbiAgICogT3ZlcnJpZGUgb3IgZXh0ZW5kIHRoZSBzdHlsZXMgYXBwbGllZCB0byB0aGUgY29tcG9uZW50LlxuICAgKiBTZWUgW0NTUyBBUEldKCNjc3MpIGJlbG93IGZvciBtb3JlIGRldGFpbHMuXG4gICAqL1xuICBjbGFzc2VzOiBQcm9wVHlwZXMub2JqZWN0LFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGFjdGlvbnMgZG8gbm90IGhhdmUgYWRkaXRpb25hbCBtYXJnaW4uXG4gICAqL1xuICBkaXNhYmxlU3BhY2luZzogUHJvcFR5cGVzLmJvb2xcbn0gOiB2b2lkIDA7XG5leHBvcnQgZGVmYXVsdCB3aXRoU3R5bGVzKHN0eWxlcywge1xuICBuYW1lOiAnTXVpRGlhbG9nQWN0aW9ucydcbn0pKERpYWxvZ0FjdGlvbnMpOyIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCdcclxuaW1wb3J0IERyYWdnYWJsZSBmcm9tICdyZWFjdC1kcmFnZ2FibGUnXHJcbmltcG9ydCB7IExpbmsgfSBmcm9tICdyZWFjdC1yb3V0ZXItZG9tJ1xyXG5pbXBvcnQgeyBtYWtlU3R5bGVzIH0gZnJvbSAnQG1hdGVyaWFsLXVpL2NvcmUvc3R5bGVzJ1xyXG5pbXBvcnQge1xyXG4gICAgQnV0dG9uLFxyXG4gICAgRGlhbG9nLFxyXG4gICAgRGlhbG9nQWN0aW9ucyxcclxuICAgIERpYWxvZ0NvbnRlbnQsXHJcbiAgICBEaWFsb2dDb250ZW50VGV4dCxcclxuICAgIERpYWxvZ1RpdGxlLFxyXG4gICAgUGFwZXIsXHJcbiAgICBUZXh0RmllbGQsXHJcbiAgICBUeXBvZ3JhcGh5LFxyXG4gICAgQXZhdGFyLFxyXG59IGZyb20gJ0BtYXRlcmlhbC11aS9jb3JlJ1xyXG5cclxuY29uc3QgdXNlU3R5bGVzID0gbWFrZVN0eWxlcygodGhlbWUpID0+ICh7XHJcbiAgICByb290OiB7XHJcbiAgICAgICAgZGlzcGxheTogJ2ZsZXgnLFxyXG4gICAgICAgICcmID4gKic6IHtcclxuICAgICAgICAgICAgbWFyZ2luOiB0aGVtZS5zcGFjaW5nKDEpLFxyXG4gICAgICAgIH0sXHJcbiAgICB9LFxyXG4gICAgcHJvZmlsZVRpdGxlQ29udGFpbmVyOiB7XHJcbiAgICAgICAgZGlzcGxheTogJ2ZsZXgnLFxyXG4gICAgICAgIGp1c3RpZnlDb250ZW50OiAnc3BhY2UtYmV0d2VlbicsXHJcbiAgICAgICAgd2lkdGg6ICcxMDAlJyxcclxuICAgICAgICBib3hTaXppbmc6ICdib3JkZXItYm94JyxcclxuICAgIH0sXHJcbiAgICBzbWFsbDoge1xyXG4gICAgICAgIHdpZHRoOiB0aGVtZS5zcGFjaW5nKDMpLFxyXG4gICAgICAgIGhlaWdodDogdGhlbWUuc3BhY2luZygzKSxcclxuICAgIH0sXHJcbiAgICByZWdCdXR0b246IHtcclxuICAgICAgICBtYXJnaW46ICcwIDAgMCAwJyxcclxuICAgIH0sXHJcbiAgICBsYXJnZToge1xyXG4gICAgICAgIHdpZHRoOiB0aGVtZS5zcGFjaW5nKDE3KSxcclxuICAgICAgICBoZWlnaHQ6IHRoZW1lLnNwYWNpbmcoMTcpLFxyXG4gICAgICAgIG1hcmdpbjogJzAgYXV0bycsXHJcbiAgICB9LFxyXG59KSlcclxuXHJcbmZ1bmN0aW9uIFBhcGVyQ29tcG9uZW50KHByb3BzKSB7XHJcbiAgICByZXR1cm4gKFxyXG4gICAgICAgIDxEcmFnZ2FibGVcclxuICAgICAgICAgICAgaGFuZGxlPVwiI2RyYWdnYWJsZS1kaWFsb2ctdGl0bGVcIlxyXG4gICAgICAgICAgICBjYW5jZWw9eydbY2xhc3MqPVwiTXVpRGlhbG9nQ29udGVudC1yb290XCJdJ31cclxuICAgICAgICA+XHJcbiAgICAgICAgICAgIDxQYXBlciB7Li4ucHJvcHN9IC8+XHJcbiAgICAgICAgPC9EcmFnZ2FibGU+XHJcbiAgICApXHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIFByb2ZpbGUocHJvcHMpIHtcclxuICAgIGNvbnN0IGNsYXNzZXMgPSB1c2VTdHlsZXMoKVxyXG4gICAgY29uc3QgW29wZW4sIHNldE9wZW5dID0gUmVhY3QudXNlU3RhdGUoZmFsc2UpXHJcbiAgICBjb25zdCBbZmlyc3ROYW1lLCBzZXRGaXJzdE5hbWVdID0gUmVhY3QudXNlU3RhdGUocHJvcHMucHJvZmlsZS5maXJzdE5hbWUpXHJcbiAgICBjb25zdCBbZW1haWwsIHNldEVtYWlsXSA9IFJlYWN0LnVzZVN0YXRlKHByb3BzLnByb2ZpbGUuZW1haWwpXHJcbiAgICBjb25zdCBbbGFzdE5hbWUsIHNldExhc3ROYW1lXSA9IFJlYWN0LnVzZVN0YXRlKHByb3BzLnByb2ZpbGUubGFzdE5hbWUpXHJcblxyXG4gICAgY29uc3QgaGFuZGxlQ2xpY2tPcGVuID0gKCkgPT4ge1xyXG4gICAgICAgIHNldE9wZW4odHJ1ZSlcclxuICAgIH1cclxuXHJcbiAgICBjb25zdCBoYW5kbGVGaXJzdE5hbWVDaGFuZ2UgPSAoZXZlbnQpID0+IHtcclxuICAgICAgICBzZXRGaXJzdE5hbWUoZXZlbnQudGFyZ2V0LnZhbHVlKVxyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IGhhbmRsZUxhc3ROYW1lQ2hhbmdlID0gKGV2ZW50KSA9PiB7XHJcbiAgICAgICAgc2V0TGFzdE5hbWUoZXZlbnQudGFyZ2V0LnZhbHVlKVxyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IGhhbmRsZUVtYWlsQ2hhbmdlID0gKGV2ZW50KSA9PiB7XHJcbiAgICAgICAgc2V0RW1haWwoZXZlbnQudGFyZ2V0LnZhbHVlKVxyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IGhhbmRsZUNsb3NlID0gKCkgPT4ge1xyXG4gICAgICAgIHNldE9wZW4oZmFsc2UpXHJcbiAgICB9XHJcblxyXG4gICAgY29uc3QgaGFuZGxlS2V5VXAgPSAoZXZlbnQpID0+IHtcclxuICAgICAgICBpZiAoZXZlbnQua2V5Q29kZSA9PT0gMTMpIHtcclxuICAgICAgICAgICAgaWYgKGZpcnN0TmFtZS5sZW5ndGggPiAwIHx8IGxhc3ROYW1lLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgIGhhbmRsZUNvbmZpcm0oKVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgY29uc3QgaGFuZGxlQ29uZmlybSA9ICgpID0+IHtcclxuICAgICAgICBwcm9wcy5oYW5kbGVOYW1lQ2hhbmdlKHsgZmlyc3ROYW1lLCBsYXN0TmFtZSB9KVxyXG4gICAgICAgIGhhbmRsZUNsb3NlKClcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gKFxyXG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPXtjbGFzc2VzLnJlZ0J1dHRvbn0+XHJcbiAgICAgICAgICAgIDxwIG9uQ2xpY2s9e2hhbmRsZUNsaWNrT3Blbn0+0J/RgNC+0YTQuNC70Yw8L3A+XHJcbiAgICAgICAgICAgIDxEaWFsb2dcclxuICAgICAgICAgICAgICAgIG9wZW49e29wZW59XHJcbiAgICAgICAgICAgICAgICBmdWxsV2lkdGhcclxuICAgICAgICAgICAgICAgIG9uQ2xvc2U9e2hhbmRsZUNsb3NlfVxyXG4gICAgICAgICAgICAgICAgUGFwZXJDb21wb25lbnQ9e1BhcGVyQ29tcG9uZW50fVxyXG4gICAgICAgICAgICAgICAgYXJpYS1sYWJlbGxlZGJ5PVwiZHJhZ2dhYmxlLWRpYWxvZy10aXRsZVwiXHJcbiAgICAgICAgICAgID5cclxuICAgICAgICAgICAgICAgIDxEaWFsb2dUaXRsZVxyXG4gICAgICAgICAgICAgICAgICAgIHN0eWxlPXt7IGN1cnNvcjogJ21vdmUnIH19XHJcbiAgICAgICAgICAgICAgICAgICAgaWQ9XCJkcmFnZ2FibGUtZGlhbG9nLXRpdGxlXCJcclxuICAgICAgICAgICAgICAgID5cclxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT17Y2xhc3Nlcy5wcm9maWxlVGl0bGVDb250YWluZXJ9PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB7cHJvcHMucHJvZmlsZS5maXJzdE5hbWV9IHtwcm9wcy5wcm9maWxlLmxhc3ROYW1lfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8TGluayB0bz1cIi9jYWJpbmV0XCIgcmVwbGFjZT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxCdXR0b25cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2xvcj1cInByaW1hcnlcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhcmlhbnQ9XCJjb250YWluZWRcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2xpY2s9e2hhbmRsZUNsb3NlfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgINCa0LDQsdC40L3QtdGCXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L0J1dHRvbj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC9MaW5rPlxyXG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgPC9EaWFsb2dUaXRsZT5cclxuICAgICAgICAgICAgICAgIDxEaWFsb2dDb250ZW50PlxyXG4gICAgICAgICAgICAgICAgICAgIDxBdmF0YXJcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwiYXZhdGFyXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPXtjbGFzc2VzLmxhcmdlfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBzcmM9e3Byb3BzLnByb2ZpbGUuYXZhdGFyfVxyXG4gICAgICAgICAgICAgICAgICAgIC8+XHJcbiAgICAgICAgICAgICAgICAgICAgPERpYWxvZ0NvbnRlbnRUZXh0PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICDQktCy0LXQtNC40YLQtSDQvdC+0LLRi9C1INC00LDQvdC90YvQtSDQviDQv9C+0LvRjNC30L7QstCw0YLQtdC70LVcclxuICAgICAgICAgICAgICAgICAgICA8L0RpYWxvZ0NvbnRlbnRUZXh0PlxyXG4gICAgICAgICAgICAgICAgICAgIDxEaWFsb2dDb250ZW50VGV4dD5cclxuICAgICAgICAgICAgICAgICAgICAgICAg0JLQvtC30YDQsNGB0YIgOiB7cHJvcHMucHJvZmlsZS5hZ2V9XHJcbiAgICAgICAgICAgICAgICAgICAgPC9EaWFsb2dDb250ZW50VGV4dD5cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgPFRleHRGaWVsZFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBhdXRvRm9jdXNcclxuICAgICAgICAgICAgICAgICAgICAgICAgbWFyZ2luPVwiZGVuc2VcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZD1cIm5hbWVcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBsYWJlbD1cItCY0LzRj1wiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2hhbmdlPXtoYW5kbGVGaXJzdE5hbWVDaGFuZ2V9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlPXtmaXJzdE5hbWV9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG9uS2V5VXA9eyhldmVudCkgPT4gaGFuZGxlS2V5VXAoZXZlbnQsIGZpcnN0TmFtZSl9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZ1bGxXaWR0aFxyXG4gICAgICAgICAgICAgICAgICAgIC8+XHJcbiAgICAgICAgICAgICAgICAgICAgPFRleHRGaWVsZFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBhdXRvRm9jdXNcclxuICAgICAgICAgICAgICAgICAgICAgICAgbWFyZ2luPVwiZGVuc2VcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZD1cIm5hbWVcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBsYWJlbD1cItCk0LDQvNC40LvQuNGPXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgb25DaGFuZ2U9e2hhbmRsZUxhc3ROYW1lQ2hhbmdlfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZT17bGFzdE5hbWV9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG9uS2V5VXA9eyhldmVudCkgPT4gaGFuZGxlS2V5VXAoZXZlbnQsIGxhc3ROYW1lKX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgZnVsbFdpZHRoXHJcbiAgICAgICAgICAgICAgICAgICAgLz5cclxuICAgICAgICAgICAgICAgICAgICA8VGV4dEZpZWxkXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGF1dG9Gb2N1c1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBtYXJnaW49XCJkZW5zZVwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlkPVwiZW1haWxcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlPVwiZW1haWxcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBsYWJlbD1cItCf0L7Rh9GC0LBcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBvbkNoYW5nZT17aGFuZGxlRW1haWxDaGFuZ2V9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlPXtlbWFpbH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgb25LZXlVcD17KGV2ZW50KSA9PiBoYW5kbGVLZXlVcChldmVudCwgZW1haWwpfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBmdWxsV2lkdGhcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVxdWlyZWRcclxuICAgICAgICAgICAgICAgICAgICAvPlxyXG4gICAgICAgICAgICAgICAgPC9EaWFsb2dDb250ZW50PlxyXG4gICAgICAgICAgICAgICAgPERpYWxvZ0FjdGlvbnM+XHJcbiAgICAgICAgICAgICAgICAgICAgPEJ1dHRvbiBhdXRvRm9jdXMgb25DbGljaz17aGFuZGxlQ2xvc2V9IGNvbG9yPVwicHJpbWFyeVwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICDQntGC0LzQtdC90LBcclxuICAgICAgICAgICAgICAgICAgICA8L0J1dHRvbj5cclxuICAgICAgICAgICAgICAgICAgICA8QnV0dG9uIG9uQ2xpY2s9e2hhbmRsZUNvbmZpcm19IGNvbG9yPVwicHJpbWFyeVwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICDQn9C+0YLQtNCy0LXRgNC00LjRgtGMXHJcbiAgICAgICAgICAgICAgICAgICAgPC9CdXR0b24+XHJcbiAgICAgICAgICAgICAgICA8L0RpYWxvZ0FjdGlvbnM+XHJcbiAgICAgICAgICAgIDwvRGlhbG9nPlxyXG4gICAgICAgIDwvZGl2PlxyXG4gICAgKVxyXG59XHJcbiIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCdcclxuaW1wb3J0IHsgbWFrZVN0eWxlcyB9IGZyb20gJ0BtYXRlcmlhbC11aS9jb3JlL3N0eWxlcydcclxuaW1wb3J0IHsgTGluayB9IGZyb20gJ3JlYWN0LXJvdXRlci1kb20nXHJcbmltcG9ydCB7IEljb25CdXR0b24sIEF2YXRhciwgQmFkZ2UsIE1lbnVJdGVtLCBNZW51IH0gZnJvbSAnQG1hdGVyaWFsLXVpL2NvcmUnXHJcbmltcG9ydCBQcm9maWxlIGZyb20gJ2NvbXBvbmVudHMvUHJvZmlsZS9Qcm9maWxlJ1xyXG5pbXBvcnQgTWVudUljb24gZnJvbSAnQG1hdGVyaWFsLXVpL2ljb25zL01lbnUnXHJcbmltcG9ydCBNYWlsSWNvbiBmcm9tICdAbWF0ZXJpYWwtdWkvaWNvbnMvTWFpbCdcclxuaW1wb3J0IE5vdGlmaWNhdGlvbnNJY29uIGZyb20gJ0BtYXRlcmlhbC11aS9pY29ucy9Ob3RpZmljYXRpb25zJ1xyXG5pbXBvcnQgTW9yZUljb24gZnJvbSAnQG1hdGVyaWFsLXVpL2ljb25zL01vcmVWZXJ0J1xyXG5pbXBvcnQgU2hvcHBpbmdDYXJ0SWNvbiBmcm9tICdAbWF0ZXJpYWwtdWkvaWNvbnMvU2hvcHBpbmdDYXJ0J1xyXG5cclxuY29uc3QgdXNlU3R5bGVzID0gbWFrZVN0eWxlcygodGhlbWUpID0+ICh7XHJcbiAgICBsaW5rOiB7XHJcbiAgICAgICAgYWxpZ25TZWxmOiAnY2VudGVyJyxcclxuICAgICAgICBjb2xvcjogJ2luaGVyaXQnLFxyXG4gICAgfSxcclxuICAgIHNlY3Rpb25EZXNrdG9wOiB7XHJcbiAgICAgICAgZGlzcGxheTogJ25vbmUnLFxyXG4gICAgICAgIFt0aGVtZS5icmVha3BvaW50cy51cCgnc20nKV06IHtcclxuICAgICAgICAgICAgZGlzcGxheTogJ2ZsZXgnLFxyXG4gICAgICAgIH0sXHJcbiAgICB9LFxyXG4gICAgc2VjdGlvbk1vYmlsZToge1xyXG4gICAgICAgIGRpc3BsYXk6ICdmbGV4JyxcclxuICAgICAgICBbdGhlbWUuYnJlYWtwb2ludHMudXAoJ3NtJyldOiB7XHJcbiAgICAgICAgICAgIGRpc3BsYXk6ICdub25lJyxcclxuICAgICAgICB9LFxyXG4gICAgfSxcclxufSkpXHJcblxyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBBdXRoTWVudShwcm9wcykge1xyXG4gICAgY29uc3QgY2xhc3NlcyA9IHVzZVN0eWxlcygpXHJcbiAgICBjb25zdCBbYW5jaG9yRWwsIHNldEFuY2hvckVsXSA9IFJlYWN0LnVzZVN0YXRlKG51bGwpXHJcbiAgICBjb25zdCBbbW9iaWxlTW9yZUFuY2hvckVsLCBzZXRNb2JpbGVNb3JlQW5jaG9yRWxdID0gUmVhY3QudXNlU3RhdGUobnVsbClcclxuICAgIGNvbnN0IGlzTWVudU9wZW4gPSBCb29sZWFuKGFuY2hvckVsKVxyXG4gICAgY29uc3QgaXNNb2JpbGVNZW51T3BlbiA9IEJvb2xlYW4obW9iaWxlTW9yZUFuY2hvckVsKVxyXG5cclxuICAgIGNvbnN0IGhhbmRsZU1lbnVPcGVuID0gKGV2ZW50KSA9PiB7XHJcbiAgICAgICAgc2V0QW5jaG9yRWwoZXZlbnQuY3VycmVudFRhcmdldClcclxuICAgIH1cclxuXHJcbiAgICBjb25zdCBoYW5kbGVNb2JpbGVNZW51Q2xvc2UgPSAoKSA9PiB7XHJcbiAgICAgICAgc2V0TW9iaWxlTW9yZUFuY2hvckVsKG51bGwpXHJcbiAgICB9XHJcblxyXG4gICAgY29uc3QgaGFuZGxlTWVudUNsb3NlID0gKCkgPT4ge1xyXG4gICAgICAgIHNldEFuY2hvckVsKG51bGwpXHJcbiAgICAgICAgaGFuZGxlTW9iaWxlTWVudUNsb3NlKClcclxuICAgIH1cclxuXHJcbiAgICBjb25zdCBoYW5kbGVDYXJ0T3BlbiA9ICgpID0+IHtcclxuICAgICAgICBzZXRBbmNob3JFbChudWxsKVxyXG4gICAgICAgIGhhbmRsZU1vYmlsZU1lbnVDbG9zZSgpXHJcbiAgICAgICAgcHJvcHMucmVkaXJlY3QoJ2NhcnQnKVxyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IGhhbmRsZU1vYmlsZU1lbnVPcGVuID0gKGV2ZW50KSA9PiB7XHJcbiAgICAgICAgc2V0TW9iaWxlTW9yZUFuY2hvckVsKGV2ZW50LmN1cnJlbnRUYXJnZXQpXHJcbiAgICB9XHJcblxyXG4gICAgY29uc3QgaGFuZGxlTG9nb3V0ID0gKCkgPT4ge1xyXG4gICAgICAgIHNldEFuY2hvckVsKG51bGwpXHJcbiAgICAgICAgcHJvcHMubG9nb3V0QWN0aW9uKClcclxuICAgIH1cclxuXHJcbiAgICBjb25zdCByZW5kZXJNZW51ID0gKFxyXG4gICAgICAgIDxNZW51XHJcbiAgICAgICAgICAgIGFuY2hvckVsPXthbmNob3JFbH1cclxuICAgICAgICAgICAgYW5jaG9yT3JpZ2luPXt7IHZlcnRpY2FsOiAndG9wJywgaG9yaXpvbnRhbDogJ3JpZ2h0JyB9fVxyXG4gICAgICAgICAgICBrZWVwTW91bnRlZFxyXG4gICAgICAgICAgICBpZD17cHJvcHMucHJvcHNtZW51SWR9XHJcbiAgICAgICAgICAgIHRyYW5zZm9ybU9yaWdpbj17eyB2ZXJ0aWNhbDogJ3RvcCcsIGhvcml6b250YWw6ICdyaWdodCcgfX1cclxuICAgICAgICAgICAgb3Blbj17aXNNZW51T3Blbn1cclxuICAgICAgICAgICAgb25DbG9zZT17aGFuZGxlTWVudUNsb3NlfVxyXG4gICAgICAgID5cclxuICAgICAgICAgICAgPE1lbnVJdGVtIG9uQ2xpY2s9e2hhbmRsZU1lbnVDbG9zZX0+XHJcbiAgICAgICAgICAgICAgICA8UHJvZmlsZVxyXG4gICAgICAgICAgICAgICAgICAgIHByb2ZpbGU9e3Byb3BzLnByb2ZpbGV9XHJcbiAgICAgICAgICAgICAgICAgICAgaGFuZGxlTmFtZUNoYW5nZT17cHJvcHMucHJvZmlsZUNoYW5nZU5hbWVBY3Rpb259XHJcbiAgICAgICAgICAgICAgICAvPlxyXG4gICAgICAgICAgICA8L01lbnVJdGVtPlxyXG4gICAgICAgICAgICA8TWVudUl0ZW0gb25DbGljaz17aGFuZGxlTG9nb3V0fT5cclxuICAgICAgICAgICAgICAgIDxwPtCS0YvRhdC+0LQ8L3A+XHJcbiAgICAgICAgICAgIDwvTWVudUl0ZW0+XHJcbiAgICAgICAgPC9NZW51PlxyXG4gICAgKVxyXG5cclxuICAgIGNvbnN0IHJlbmRlck1vYmlsZU1lbnUgPSAoXHJcbiAgICAgICAgPE1lbnVcclxuICAgICAgICAgICAgYW5jaG9yRWw9e21vYmlsZU1vcmVBbmNob3JFbH1cclxuICAgICAgICAgICAgYW5jaG9yT3JpZ2luPXt7IHZlcnRpY2FsOiAndG9wJywgaG9yaXpvbnRhbDogJ3JpZ2h0JyB9fVxyXG4gICAgICAgICAgICBpZD17cHJvcHMubW9iaWxlTWVudUlkfVxyXG4gICAgICAgICAgICBrZWVwTW91bnRlZFxyXG4gICAgICAgICAgICB0cmFuc2Zvcm1PcmlnaW49e3sgdmVydGljYWw6ICd0b3AnLCBob3Jpem9udGFsOiAncmlnaHQnIH19XHJcbiAgICAgICAgICAgIG9wZW49e2lzTW9iaWxlTWVudU9wZW59XHJcbiAgICAgICAgICAgIG9uQ2xvc2U9e2hhbmRsZU1vYmlsZU1lbnVDbG9zZX1cclxuICAgICAgICA+XHJcbiAgICAgICAgICAgIDxNZW51SXRlbSBvbkNsaWNrPXtoYW5kbGVNb2JpbGVNZW51Q2xvc2V9PlxyXG4gICAgICAgICAgICAgICAgPEljb25CdXR0b24gYXJpYS1sYWJlbD1cInNob3cgNCBuZXcgbWFpbHNcIiBjb2xvcj1cImluaGVyaXRcIj5cclxuICAgICAgICAgICAgICAgICAgICA8QmFkZ2UgYmFkZ2VDb250ZW50PXs0fSBjb2xvcj1cInNlY29uZGFyeVwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8TWFpbEljb24gLz5cclxuICAgICAgICAgICAgICAgICAgICA8L0JhZGdlPlxyXG4gICAgICAgICAgICAgICAgPC9JY29uQnV0dG9uPlxyXG4gICAgICAgICAgICAgICAgPHA+0KHQvtC+0LHRidC10L3QuNGPPC9wPlxyXG4gICAgICAgICAgICA8L01lbnVJdGVtPlxyXG4gICAgICAgICAgICA8TWVudUl0ZW0+XHJcbiAgICAgICAgICAgICAgICA8SWNvbkJ1dHRvblxyXG4gICAgICAgICAgICAgICAgICAgIGFyaWEtbGFiZWw9XCJzaG93IDExIG5ldyBub3RpZmljYXRpb25zXCJcclxuICAgICAgICAgICAgICAgICAgICBjb2xvcj1cImluaGVyaXRcIlxyXG4gICAgICAgICAgICAgICAgPlxyXG4gICAgICAgICAgICAgICAgICAgIDxCYWRnZSBiYWRnZUNvbnRlbnQ9ezExfSBjb2xvcj1cInNlY29uZGFyeVwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8Tm90aWZpY2F0aW9uc0ljb24gLz5cclxuICAgICAgICAgICAgICAgICAgICA8L0JhZGdlPlxyXG4gICAgICAgICAgICAgICAgPC9JY29uQnV0dG9uPlxyXG4gICAgICAgICAgICAgICAgPHA+0KPQstC10LTQvtC80LvQtdC90LjRjzwvcD5cclxuICAgICAgICAgICAgPC9NZW51SXRlbT5cclxuICAgICAgICAgICAgPE1lbnVJdGVtIG9uQ2xpY2s9e2hhbmRsZUNhcnRPcGVufT5cclxuICAgICAgICAgICAgICAgIDxJY29uQnV0dG9uIGFyaWEtbGFiZWw9XCJzaG93IDQgbmV3IG1haWxzXCIgY29sb3I9XCJpbmhlcml0XCI+XHJcbiAgICAgICAgICAgICAgICAgICAgPEJhZGdlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJhZGdlQ29udGVudD17T2JqZWN0LmtleXMocHJvcHMuY2FydCkubGVuZ3RofVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb2xvcj1cInNlY29uZGFyeVwiXHJcbiAgICAgICAgICAgICAgICAgICAgPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8U2hvcHBpbmdDYXJ0SWNvbiAvPlxyXG4gICAgICAgICAgICAgICAgICAgIDwvQmFkZ2U+XHJcbiAgICAgICAgICAgICAgICA8L0ljb25CdXR0b24+XHJcbiAgICAgICAgICAgICAgICA8cD7QmtC+0YDQt9C40L3QsDwvcD5cclxuICAgICAgICAgICAgPC9NZW51SXRlbT5cclxuICAgICAgICAgICAgPExpbmsgdG89XCIvY2FiaW5ldFwiIHJlcGxhY2U+XHJcbiAgICAgICAgICAgICAgICA8TWVudUl0ZW0gb25DbGljaz17aGFuZGxlTWVudUNsb3NlfT5cclxuICAgICAgICAgICAgICAgICAgICA8cD7Qn9GA0L7RhNC40LvRjDwvcD5cclxuICAgICAgICAgICAgICAgIDwvTWVudUl0ZW0+XHJcbiAgICAgICAgICAgIDwvTGluaz5cclxuICAgICAgICAgICAgPE1lbnVJdGVtIG9uQ2xpY2s9e2hhbmRsZUxvZ291dH0+XHJcbiAgICAgICAgICAgICAgICA8cD7QktGL0YXQvtC0PC9wPlxyXG4gICAgICAgICAgICA8L01lbnVJdGVtPlxyXG4gICAgICAgIDwvTWVudT5cclxuICAgIClcclxuXHJcbiAgICByZXR1cm4gKFxyXG4gICAgICAgIDw+XHJcbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPXtjbGFzc2VzLnNlY3Rpb25EZXNrdG9wfT5cclxuICAgICAgICAgICAgICAgIDxJY29uQnV0dG9uIGFyaWEtbGFiZWw9XCJzaG93IDQgbmV3IG1haWxzXCIgY29sb3I9XCJpbmhlcml0XCI+XHJcbiAgICAgICAgICAgICAgICAgICAgPEJhZGdlIGJhZGdlQ29udGVudD17NH0gY29sb3I9XCJzZWNvbmRhcnlcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPE1haWxJY29uIC8+XHJcbiAgICAgICAgICAgICAgICAgICAgPC9CYWRnZT5cclxuICAgICAgICAgICAgICAgIDwvSWNvbkJ1dHRvbj5cclxuICAgICAgICAgICAgICAgIDxJY29uQnV0dG9uXHJcbiAgICAgICAgICAgICAgICAgICAgYXJpYS1sYWJlbD1cInNob3cgMTcgbmV3IG5vdGlmaWNhdGlvbnNcIlxyXG4gICAgICAgICAgICAgICAgICAgIGNvbG9yPVwiaW5oZXJpdFwiXHJcbiAgICAgICAgICAgICAgICA+XHJcbiAgICAgICAgICAgICAgICAgICAgPEJhZGdlIGJhZGdlQ29udGVudD17MTd9IGNvbG9yPVwic2Vjb25kYXJ5XCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxOb3RpZmljYXRpb25zSWNvbiAvPlxyXG4gICAgICAgICAgICAgICAgICAgIDwvQmFkZ2U+XHJcbiAgICAgICAgICAgICAgICA8L0ljb25CdXR0b24+XHJcbiAgICAgICAgICAgICAgICA8SWNvbkJ1dHRvblxyXG4gICAgICAgICAgICAgICAgICAgIGVkZ2U9XCJlbmRcIlxyXG4gICAgICAgICAgICAgICAgICAgIGFyaWEtbGFiZWw9XCJhY2NvdW50IG9mIGN1cnJlbnQgdXNlclwiXHJcbiAgICAgICAgICAgICAgICAgICAgYXJpYS1jb250cm9scz17cHJvcHMubWVudUlkfVxyXG4gICAgICAgICAgICAgICAgICAgIGFyaWEtaGFzcG9wdXA9XCJ0cnVlXCJcclxuICAgICAgICAgICAgICAgICAgICBvbkNsaWNrPXtoYW5kbGVNZW51T3Blbn1cclxuICAgICAgICAgICAgICAgICAgICBjb2xvcj1cImluaGVyaXRcIlxyXG4gICAgICAgICAgICAgICAgPlxyXG4gICAgICAgICAgICAgICAgICAgIDxBdmF0YXIgc3JjPXtwcm9wcy5wcm9maWxlLmF2YXRhcn0gLz5cclxuICAgICAgICAgICAgICAgIDwvSWNvbkJ1dHRvbj5cclxuICAgICAgICAgICAgICAgIDxMaW5rIHRvPVwiL2NhcnRcIiByZXBsYWNlIGNsYXNzTmFtZT17Y2xhc3Nlcy5saW5rfT5cclxuICAgICAgICAgICAgICAgICAgICA8SWNvbkJ1dHRvblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBhcmlhLWxhYmVsPVwic2hvdyAxIGdvb2RzIGluIGNhcnRcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb2xvcj1cImluaGVyaXRcIlxyXG4gICAgICAgICAgICAgICAgICAgID5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPEJhZGdlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBiYWRnZUNvbnRlbnQ9e09iamVjdC5rZXlzKHByb3BzLmNhcnQpLmxlbmd0aH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yPVwic2Vjb25kYXJ5XCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPFNob3BwaW5nQ2FydEljb24gLz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC9CYWRnZT5cclxuICAgICAgICAgICAgICAgICAgICA8L0ljb25CdXR0b24+XHJcbiAgICAgICAgICAgICAgICA8L0xpbms+XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT17Y2xhc3Nlcy5zZWN0aW9uTW9iaWxlfT5cclxuICAgICAgICAgICAgICAgIDxJY29uQnV0dG9uXHJcbiAgICAgICAgICAgICAgICAgICAgYXJpYS1sYWJlbD1cInNob3cgbW9yZVwiXHJcbiAgICAgICAgICAgICAgICAgICAgYXJpYS1jb250cm9scz17cHJvcHMubW9iaWxlTWVudUlkfVxyXG4gICAgICAgICAgICAgICAgICAgIGFyaWEtaGFzcG9wdXA9XCJ0cnVlXCJcclxuICAgICAgICAgICAgICAgICAgICBvbkNsaWNrPXtoYW5kbGVNb2JpbGVNZW51T3Blbn1cclxuICAgICAgICAgICAgICAgICAgICBjb2xvcj1cImluaGVyaXRcIlxyXG4gICAgICAgICAgICAgICAgPlxyXG4gICAgICAgICAgICAgICAgICAgIDxNb3JlSWNvbiAvPlxyXG4gICAgICAgICAgICAgICAgPC9JY29uQnV0dG9uPlxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAge3JlbmRlck1lbnV9XHJcbiAgICAgICAgICAgIHtyZW5kZXJNb2JpbGVNZW51fVxyXG4gICAgICAgIDwvPlxyXG4gICAgKVxyXG59XHJcbiIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCdcclxuaW1wb3J0IHsgbWFrZVN0eWxlcyB9IGZyb20gJ0BtYXRlcmlhbC11aS9jb3JlL3N0eWxlcydcclxuaW1wb3J0IHtcclxuICAgIEFwcEJhcixcclxuICAgIFRvb2xiYXIsXHJcbiAgICBJY29uQnV0dG9uLFxyXG4gICAgVHlwb2dyYXBoeSxcclxuICAgIElucHV0QmFzZSxcclxuICAgIEJ1dHRvbixcclxufSBmcm9tICdAbWF0ZXJpYWwtdWkvY29yZSdcclxuaW1wb3J0IE1lbnVJY29uIGZyb20gJ0BtYXRlcmlhbC11aS9pY29ucy9NZW51J1xyXG5pbXBvcnQgQXV0aE1lbnUgZnJvbSAnLi9BdXRoTWVudSdcclxuaW1wb3J0IENvbGxlY3Rpb25zQm9va21hcmtPdXRsaW5lZEljb24gZnJvbSAnQG1hdGVyaWFsLXVpL2ljb25zL0NvbGxlY3Rpb25zQm9va21hcmtPdXRsaW5lZCdcclxuaW1wb3J0IE1lbnVCb29rT3V0bGluZWRJY29uIGZyb20gJ0BtYXRlcmlhbC11aS9pY29ucy9NZW51Qm9va091dGxpbmVkJ1xyXG5cclxuY29uc3QgZHJhd2VyV2lkdGggPSAxNTBcclxuXHJcbmNvbnN0IHVzZVN0eWxlcyA9IG1ha2VTdHlsZXMoKHRoZW1lKSA9PiAoe1xyXG4gICAgZ3Jvdzoge1xyXG4gICAgICAgIGZsZXhHcm93OiAxLFxyXG4gICAgfSxcclxuXHJcbiAgICBtZW51QnV0dG9uOiB7XHJcbiAgICAgICAgbWFyZ2luUmlnaHQ6IHRoZW1lLnNwYWNpbmcoMiksXHJcbiAgICAgICAgZGlzcGxheTogJ2ZsZXgnLFxyXG4gICAgICAgIFt0aGVtZS5icmVha3BvaW50cy51cCgnc20nKV06IHtcclxuICAgICAgICAgICAgZGlzcGxheTogJ25vbmUnLFxyXG4gICAgICAgIH0sXHJcbiAgICB9LFxyXG5cclxuICAgIG5hdjoge1xyXG4gICAgICAgICcmIGJ1dHRvbjpub3QoOmxhc3QtY2hpbGQpJzoge1xyXG4gICAgICAgICAgICBtYXJnaW5SaWdodDogJzFyZW0nLFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZGlzcGxheTogJ25vbmUnLFxyXG4gICAgICAgIFt0aGVtZS5icmVha3BvaW50cy51cCgnc20nKV06IHtcclxuICAgICAgICAgICAgZGlzcGxheTogJ2ZsZXgnLFxyXG4gICAgICAgIH0sXHJcbiAgICB9LFxyXG5cclxuICAgIG5hdkJ1dHRvbjoge1xyXG4gICAgICAgIGNvbG9yOiB0aGVtZS5wYWxldHRlLmNvbW1vbi53aGl0ZSxcclxuICAgIH0sXHJcblxyXG4gICAgYXBwQmFyOiB7XHJcbiAgICAgICAgW3RoZW1lLmJyZWFrcG9pbnRzLnVwKCdzbScpXToge1xyXG4gICAgICAgICAgICB3aWR0aDogYGNhbGMoMTAwJSAtICR7ZHJhd2VyV2lkdGh9cHgpYCxcclxuICAgICAgICAgICAgbWFyZ2luTGVmdDogZHJhd2VyV2lkdGgsXHJcbiAgICAgICAgfSxcclxuICAgIH0sXHJcbiAgICBhcHBCYXIyOiB7XHJcbiAgICAgICAgW3RoZW1lLmJyZWFrcG9pbnRzLnVwKCdzbScpXToge1xyXG4gICAgICAgICAgICB3aWR0aDogJzEwMCUnLFxyXG4gICAgICAgIH0sXHJcbiAgICB9LFxyXG5cclxuICAgIHRpdGxlOiB7XHJcbiAgICAgICAgLy8gZGlzcGxheTogJ25vbmUnLFxyXG4gICAgICAgIGN1cnNvcjogJ3BvaW50ZXInLFxyXG4gICAgICAgIFt0aGVtZS5icmVha3BvaW50cy51cCgnc20nKV06IHtcclxuICAgICAgICAgICAgZGlzcGxheTogJ2Jsb2NrJyxcclxuICAgICAgICB9LFxyXG4gICAgfSxcclxuXHJcbiAgICBzZWN0aW9uRGVza3RvcDoge1xyXG4gICAgICAgIGRpc3BsYXk6ICdub25lJyxcclxuICAgICAgICBbdGhlbWUuYnJlYWtwb2ludHMudXAoJ3NtJyldOiB7XHJcbiAgICAgICAgICAgIGRpc3BsYXk6ICdmbGV4JyxcclxuICAgICAgICB9LFxyXG4gICAgfSxcclxuXHJcbiAgICBzZWN0aW9uTW9iaWxlOiB7XHJcbiAgICAgICAgZGlzcGxheTogJ2ZsZXgnLFxyXG4gICAgICAgIFt0aGVtZS5icmVha3BvaW50cy51cCgnc20nKV06IHtcclxuICAgICAgICAgICAgZGlzcGxheTogJ25vbmUnLFxyXG4gICAgICAgIH0sXHJcbiAgICB9LFxyXG59KSlcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIEhlYWRlcihwcm9wcykge1xyXG4gICAgY29uc3QgY2xhc3NlcyA9IHVzZVN0eWxlcygpXHJcbiAgICBjb25zdCBtZW51SWQgPSAncHJpbWFyeS1zZWFyY2gtYWNjb3VudC1tZW51J1xyXG4gICAgY29uc3QgbW9iaWxlTWVudUlkID0gJ3ByaW1hcnktc2VhcmNoLWFjY291bnQtbWVudS1tb2JpbGUnXHJcblxyXG4gICAgcmV0dXJuIChcclxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT17Y2xhc3Nlcy5ncm93fT5cclxuICAgICAgICAgICAgPEFwcEJhclxyXG4gICAgICAgICAgICAgICAgcG9zaXRpb249XCJmaXhlZFwiXHJcbiAgICAgICAgICAgICAgICBjbGFzc05hbWU9e2NsYXNzZXMuYXBwQmFyMn1cclxuICAgICAgICAgICAgICAgIGNvbG9yPVwicHJpbWFyeVwiXHJcbiAgICAgICAgICAgID5cclxuICAgICAgICAgICAgICAgIDxUb29sYmFyPlxyXG4gICAgICAgICAgICAgICAgICAgIHtwcm9wcy50b2tlbiAhPT0gbnVsbCA/IChcclxuICAgICAgICAgICAgICAgICAgICAgICAgPEljb25CdXR0b25cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVkZ2U9XCJzdGFydFwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9e2NsYXNzZXMubWVudUJ1dHRvbn1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yPVwiaW5oZXJpdFwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcmlhLWxhYmVsPVwib3BlbiBkcmF3ZXJcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYXJpYS1jb250cm9scz17bW9iaWxlTWVudUlkfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYXJpYS1oYXNwb3B1cD1cInRydWVcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb25DbGljaz17cHJvcHMubW9iaWxlRHJhd2VyU3RhdGVTZXRBY3Rpb259XHJcbiAgICAgICAgICAgICAgICAgICAgICAgID5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxNZW51SWNvbiAvPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L0ljb25CdXR0b24+XHJcbiAgICAgICAgICAgICAgICAgICAgKSA6IG51bGx9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIDxUeXBvZ3JhcGh5XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2xpY2s9eygpID0+IHByb3BzLnJlZGlyZWN0KCcvJyl9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT17Y2xhc3Nlcy50aXRsZX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyaWFudD1cImg2XCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgbm9XcmFwXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbXBvbmVudD1cImgyXCJcclxuICAgICAgICAgICAgICAgICAgICA+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHtwcm9wcy50aXRsZX1cclxuICAgICAgICAgICAgICAgICAgICA8L1R5cG9ncmFwaHk+XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPXtjbGFzc2VzLmdyb3d9IC8+XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIDxuYXYgY2xhc3NOYW1lPXtjbGFzc2VzLm5hdn0+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxCdXR0b25cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT17Y2xhc3Nlcy5uYXZCdXR0b259XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGFydEljb249ezxNZW51Qm9va091dGxpbmVkSWNvbiAvPn1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNpemU9XCJzbWFsbFwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgID5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxUeXBvZ3JhcGh5IHZhcmlhbnQ9XCJib2R5MlwiIGNvbXBvbmVudD1cInNwYW5cIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICDQnNC+0Lgg0YPRgNC+0LrQuFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9UeXBvZ3JhcGh5PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L0J1dHRvbj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPEJ1dHRvblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb25DbGljaz17KCkgPT4gcHJvcHMucmVkaXJlY3QoJy9sZXNzb25zJyl9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9e2NsYXNzZXMubmF2QnV0dG9ufVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhcnRJY29uPXs8Q29sbGVjdGlvbnNCb29rbWFya091dGxpbmVkSWNvbiAvPn1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNpemU9XCJzbWFsbFwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgID5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxUeXBvZ3JhcGh5IHZhcmlhbnQ9XCJib2R5MlwiIGNvbXBvbmVudD1cInNwYW5cIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICDQmtCw0YLQsNC70L7Qs1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9UeXBvZ3JhcGh5PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L0J1dHRvbj5cclxuICAgICAgICAgICAgICAgICAgICA8L25hdj5cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9e2NsYXNzZXMuZ3Jvd30gLz5cclxuICAgICAgICAgICAgICAgICAgICB7cHJvcHMudG9rZW4gIT09IG51bGwgPyAoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxBdXRoTWVudVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVkaXJlY3Q9e3Byb3BzLnJlZGlyZWN0fVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbG9nb3V0QWN0aW9uPXtwcm9wcy5sb2dvdXRBY3Rpb259XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcm9maWxlPXtwcm9wcy5wcm9maWxlfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWVudUlkPXttZW51SWR9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtb2JpbGVNZW51SWQ9e21vYmlsZU1lbnVJZH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhcnQ9e3Byb3BzLmNhcnR9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8+XHJcbiAgICAgICAgICAgICAgICAgICAgKSA6IChcclxuICAgICAgICAgICAgICAgICAgICAgICAgPD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPXtjbGFzc2VzLnNlY3Rpb25EZXNrdG9wfT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8QnV0dG9uXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2xpY2s9eygpID0+IHByb3BzLnJlZGlyZWN0KCcvbG9naW4nKX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sb3I9XCJwcmltYXJ5XCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyaWFudD1cImNvbnRhaW5lZFwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICDQktGF0L7QtCAvINCg0LXQs9C40YHRgtGA0LDRhtC40Y9cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L0J1dHRvbj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9e2NsYXNzZXMuc2VjdGlvbk1vYmlsZX0+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPEJ1dHRvblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbkNsaWNrPXsoKSA9PiBwcm9wcy5yZWRpcmVjdCgnL2xvZ2luJyl9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yPVwicHJpbWFyeVwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhcmlhbnQ9XCJjb250YWluZWRcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaXplPVwic21hbGxcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPFR5cG9ncmFwaHlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhcmlhbnQ9XCJib2R5MlwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb21wb25lbnQ9XCJzcGFuXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg0JLRhdC+0LQgLyDQoNC10LPQuNGB0YLRgNCw0YbQuNGPXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvVHlwb2dyYXBoeT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L0J1dHRvbj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8Lz5cclxuICAgICAgICAgICAgICAgICAgICApfVxyXG4gICAgICAgICAgICAgICAgPC9Ub29sYmFyPlxyXG4gICAgICAgICAgICA8L0FwcEJhcj5cclxuICAgICAgICA8L2Rpdj5cclxuICAgIClcclxufVxyXG4iLCJpbXBvcnQgeyBjb25uZWN0IH0gZnJvbSAncmVhY3QtcmVkdXgnXHJcbmltcG9ydCB7IHB1c2ggfSBmcm9tICdjb25uZWN0ZWQtcmVhY3Qtcm91dGVyJ1xyXG5pbXBvcnQgeyBtb2JpbGVEcmF3ZXJTdGF0ZVNldEFjdGlvbiB9IGZyb20gJ2FjdGlvbnMvaGVhZGVyJ1xyXG5pbXBvcnQge1xyXG4gICAgcHJvZmlsZUxvYWRBY3Rpb24sXHJcbiAgICBwcm9maWxlQ2hhbmdlTmFtZUFjdGlvbixcclxuICAgIGxvZ291dEFjdGlvbixcclxuICAgIGxvZ2luQWN0aW9uLFxyXG59IGZyb20gJ2FjdGlvbnMvcHJvZmlsZSdcclxuXHJcbmltcG9ydCBIZWFkZXIgZnJvbSAnY29tcG9uZW50cy9IZWFkZXIvSGVhZGVyJ1xyXG5cclxuY29uc3QgbWFwU3RhdGVUb1Byb3BzID0gKHN0YXRlKSA9PiB7XHJcbiAgICBjb25zdCB7IHByb2ZpbGUsIHRva2VuIH0gPSBzdGF0ZS5wcm9maWxlXHJcbiAgICBjb25zdCB7IG1vYmlsZURyYXdlciB9ID0gc3RhdGUuaGVhZGVyXHJcbiAgICBjb25zdCB7IGNhcnQgfSA9IHN0YXRlLmNhcnRcclxuXHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIHByb2ZpbGUsXHJcbiAgICAgICAgbW9iaWxlRHJhd2VyLFxyXG4gICAgICAgIGNhcnQsXHJcbiAgICAgICAgdG9rZW4sXHJcbiAgICB9XHJcbn1cclxuXHJcbmNvbnN0IG1hcERpc3BhdGNoVG9Qcm9wcyA9IHtcclxuICAgIG1vYmlsZURyYXdlclN0YXRlU2V0QWN0aW9uLFxyXG4gICAgcmVkaXJlY3Q6IHB1c2gsXHJcbiAgICBwcm9maWxlQ2hhbmdlTmFtZUFjdGlvbixcclxuICAgIGxvZ291dEFjdGlvbixcclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgY29ubmVjdChtYXBTdGF0ZVRvUHJvcHMsIG1hcERpc3BhdGNoVG9Qcm9wcykoSGVhZGVyKVxyXG4iLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBjcmVhdGVTdmdJY29uIH0gZnJvbSAnQG1hdGVyaWFsLXVpL2NvcmUvdXRpbHMnO1xuLyoqXG4gKiBAaWdub3JlIC0gaW50ZXJuYWwgY29tcG9uZW50LlxuICovXG5cbmV4cG9ydCBkZWZhdWx0IGNyZWF0ZVN2Z0ljb24oIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwicGF0aFwiLCB7XG4gIGQ6IFwiTTIwLDEyQTgsOCAwIDAsMSAxMiwyMEE4LDggMCAwLDEgNCwxMkE4LDggMCAwLDEgMTIsNEMxMi43Niw0IDEzLjUsNC4xMSAxNC4yLCA0LjMxTDE1Ljc3LDIuNzRDMTQuNjEsMi4yNiAxMy4zNCwyIDEyLDJBMTAsMTAgMCAwLDAgMiwxMkExMCwxMCAwIDAsMCAxMiwyMkExMCwxMCAwIDAsIDAgMjIsMTJNNy45MSwxMC4wOEw2LjUsMTEuNUwxMSwxNkwyMSw2TDE5LjU5LDQuNThMMTEsMTMuMTdMNy45MSwxMC4wOFpcIlxufSksICdTdWNjZXNzT3V0bGluZWQnKTsiLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBjcmVhdGVTdmdJY29uIH0gZnJvbSAnQG1hdGVyaWFsLXVpL2NvcmUvdXRpbHMnO1xuLyoqXG4gKiBAaWdub3JlIC0gaW50ZXJuYWwgY29tcG9uZW50LlxuICovXG5cbmV4cG9ydCBkZWZhdWx0IGNyZWF0ZVN2Z0ljb24oIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwicGF0aFwiLCB7XG4gIGQ6IFwiTTEyIDUuOTlMMTkuNTMgMTlINC40N0wxMiA1Ljk5TTEyIDJMMSAyMWgyMkwxMiAyem0xIDE0aC0ydjJoMnYtMnptMC02aC0ydjRoMnYtNHpcIlxufSksICdSZXBvcnRQcm9ibGVtT3V0bGluZWQnKTsiLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBjcmVhdGVTdmdJY29uIH0gZnJvbSAnQG1hdGVyaWFsLXVpL2NvcmUvdXRpbHMnO1xuLyoqXG4gKiBAaWdub3JlIC0gaW50ZXJuYWwgY29tcG9uZW50LlxuICovXG5cbmV4cG9ydCBkZWZhdWx0IGNyZWF0ZVN2Z0ljb24oIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwicGF0aFwiLCB7XG4gIGQ6IFwiTTExIDE1aDJ2MmgtMnptMC04aDJ2NmgtMnptLjk5LTVDNi40NyAyIDIgNi40OCAyIDEyczQuNDcgMTAgOS45OSAxMEMxNy41MiAyMiAyMiAxNy41MiAyMiAxMlMxNy41MiAyIDExLjk5IDJ6TTEyIDIwYy00LjQyIDAtOC0zLjU4LTgtOHMzLjU4LTggOC04IDggMy41OCA4IDgtMy41OCA4LTggOHpcIlxufSksICdFcnJvck91dGxpbmUnKTsiLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBjcmVhdGVTdmdJY29uIH0gZnJvbSAnQG1hdGVyaWFsLXVpL2NvcmUvdXRpbHMnO1xuLyoqXG4gKiBAaWdub3JlIC0gaW50ZXJuYWwgY29tcG9uZW50LlxuICovXG5cbmV4cG9ydCBkZWZhdWx0IGNyZWF0ZVN2Z0ljb24oIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwicGF0aFwiLCB7XG4gIGQ6IFwiTTExLDlIMTNWN0gxMU0xMiwyMEM3LjU5LDIwIDQsMTYuNDEgNCwxMkM0LDcuNTkgNy41OSw0IDEyLDRDMTYuNDEsNCAyMCw3LjU5IDIwLCAxMkMyMCwxNi40MSAxNi40MSwyMCAxMiwyME0xMiwyQTEwLDEwIDAgMCwwIDIsMTJBMTAsMTAgMCAwLDAgMTIsMjJBMTAsMTAgMCAwLDAgMjIsMTJBMTAsIDEwIDAgMCwwIDEyLDJNMTEsMTdIMTNWMTFIMTFWMTdaXCJcbn0pLCAnSW5mb091dGxpbmVkJyk7IiwiaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNcIjtcbmltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBjbHN4IGZyb20gJ2Nsc3gnO1xuaW1wb3J0IHsgd2l0aFN0eWxlcywgbGlnaHRlbiwgZGFya2VuIH0gZnJvbSAnQG1hdGVyaWFsLXVpL2NvcmUvc3R5bGVzJztcbmltcG9ydCBQYXBlciBmcm9tICdAbWF0ZXJpYWwtdWkvY29yZS9QYXBlcic7XG5pbXBvcnQgU3VjY2Vzc091dGxpbmVkSWNvbiBmcm9tICcuLi9pbnRlcm5hbC9zdmctaWNvbnMvU3VjY2Vzc091dGxpbmVkJztcbmltcG9ydCBSZXBvcnRQcm9ibGVtT3V0bGluZWRJY29uIGZyb20gJy4uL2ludGVybmFsL3N2Zy1pY29ucy9SZXBvcnRQcm9ibGVtT3V0bGluZWQnO1xuaW1wb3J0IEVycm9yT3V0bGluZUljb24gZnJvbSAnLi4vaW50ZXJuYWwvc3ZnLWljb25zL0Vycm9yT3V0bGluZSc7XG5pbXBvcnQgSW5mb091dGxpbmVkSWNvbiBmcm9tICcuLi9pbnRlcm5hbC9zdmctaWNvbnMvSW5mb091dGxpbmVkJztcbmltcG9ydCBDbG9zZUljb24gZnJvbSAnLi4vaW50ZXJuYWwvc3ZnLWljb25zL0Nsb3NlJztcbmltcG9ydCBJY29uQnV0dG9uIGZyb20gJ0BtYXRlcmlhbC11aS9jb3JlL0ljb25CdXR0b24nO1xuaW1wb3J0IHsgY2FwaXRhbGl6ZSB9IGZyb20gJ0BtYXRlcmlhbC11aS9jb3JlL3V0aWxzJztcbmV4cG9ydCB2YXIgc3R5bGVzID0gZnVuY3Rpb24gc3R5bGVzKHRoZW1lKSB7XG4gIHZhciBnZXRDb2xvciA9IHRoZW1lLnBhbGV0dGUudHlwZSA9PT0gJ2xpZ2h0JyA/IGRhcmtlbiA6IGxpZ2h0ZW47XG4gIHZhciBnZXRCYWNrZ3JvdW5kQ29sb3IgPSB0aGVtZS5wYWxldHRlLnR5cGUgPT09ICdsaWdodCcgPyBsaWdodGVuIDogZGFya2VuO1xuICByZXR1cm4ge1xuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQuICovXG4gICAgcm9vdDogX2V4dGVuZHMoe30sIHRoZW1lLnR5cG9ncmFwaHkuYm9keTIsIHtcbiAgICAgIGJvcmRlclJhZGl1czogdGhlbWUuc2hhcGUuYm9yZGVyUmFkaXVzLFxuICAgICAgYmFja2dyb3VuZENvbG9yOiAndHJhbnNwYXJlbnQnLFxuICAgICAgZGlzcGxheTogJ2ZsZXgnLFxuICAgICAgcGFkZGluZzogJzZweCAxNnB4J1xuICAgIH0pLFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgdmFyaWFudD1cInN0YW5kYXJkXCJgIGFuZCBgY29sb3I9XCJzdWNjZXNzXCJgLiAqL1xuICAgIHN0YW5kYXJkU3VjY2Vzczoge1xuICAgICAgY29sb3I6IGdldENvbG9yKHRoZW1lLnBhbGV0dGUuc3VjY2Vzcy5tYWluLCAwLjYpLFxuICAgICAgYmFja2dyb3VuZENvbG9yOiBnZXRCYWNrZ3JvdW5kQ29sb3IodGhlbWUucGFsZXR0ZS5zdWNjZXNzLm1haW4sIDAuOSksXG4gICAgICAnJiAkaWNvbic6IHtcbiAgICAgICAgY29sb3I6IHRoZW1lLnBhbGV0dGUuc3VjY2Vzcy5tYWluXG4gICAgICB9XG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYHZhcmlhbnQ9XCJzdGFuZGFyZFwiYCBhbmQgYGNvbG9yPVwiaW5mb1wiYC4gKi9cbiAgICBzdGFuZGFyZEluZm86IHtcbiAgICAgIGNvbG9yOiBnZXRDb2xvcih0aGVtZS5wYWxldHRlLmluZm8ubWFpbiwgMC42KSxcbiAgICAgIGJhY2tncm91bmRDb2xvcjogZ2V0QmFja2dyb3VuZENvbG9yKHRoZW1lLnBhbGV0dGUuaW5mby5tYWluLCAwLjkpLFxuICAgICAgJyYgJGljb24nOiB7XG4gICAgICAgIGNvbG9yOiB0aGVtZS5wYWxldHRlLmluZm8ubWFpblxuICAgICAgfVxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGB2YXJpYW50PVwic3RhbmRhcmRcImAgYW5kIGBjb2xvcj1cIndhcm5pbmdcImAuICovXG4gICAgc3RhbmRhcmRXYXJuaW5nOiB7XG4gICAgICBjb2xvcjogZ2V0Q29sb3IodGhlbWUucGFsZXR0ZS53YXJuaW5nLm1haW4sIDAuNiksXG4gICAgICBiYWNrZ3JvdW5kQ29sb3I6IGdldEJhY2tncm91bmRDb2xvcih0aGVtZS5wYWxldHRlLndhcm5pbmcubWFpbiwgMC45KSxcbiAgICAgICcmICRpY29uJzoge1xuICAgICAgICBjb2xvcjogdGhlbWUucGFsZXR0ZS53YXJuaW5nLm1haW5cbiAgICAgIH1cbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgdmFyaWFudD1cInN0YW5kYXJkXCJgIGFuZCBgY29sb3I9XCJlcnJvclwiYC4gKi9cbiAgICBzdGFuZGFyZEVycm9yOiB7XG4gICAgICBjb2xvcjogZ2V0Q29sb3IodGhlbWUucGFsZXR0ZS5lcnJvci5tYWluLCAwLjYpLFxuICAgICAgYmFja2dyb3VuZENvbG9yOiBnZXRCYWNrZ3JvdW5kQ29sb3IodGhlbWUucGFsZXR0ZS5lcnJvci5tYWluLCAwLjkpLFxuICAgICAgJyYgJGljb24nOiB7XG4gICAgICAgIGNvbG9yOiB0aGVtZS5wYWxldHRlLmVycm9yLm1haW5cbiAgICAgIH1cbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgdmFyaWFudD1cIm91dGxpbmVkXCJgIGFuZCBgY29sb3I9XCJzdWNjZXNzXCJgLiAqL1xuICAgIG91dGxpbmVkU3VjY2Vzczoge1xuICAgICAgY29sb3I6IGdldENvbG9yKHRoZW1lLnBhbGV0dGUuc3VjY2Vzcy5tYWluLCAwLjYpLFxuICAgICAgYm9yZGVyOiBcIjFweCBzb2xpZCBcIi5jb25jYXQodGhlbWUucGFsZXR0ZS5zdWNjZXNzLm1haW4pLFxuICAgICAgJyYgJGljb24nOiB7XG4gICAgICAgIGNvbG9yOiB0aGVtZS5wYWxldHRlLnN1Y2Nlc3MubWFpblxuICAgICAgfVxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGB2YXJpYW50PVwib3V0bGluZWRcImAgYW5kIGBjb2xvcj1cImluZm9cImAuICovXG4gICAgb3V0bGluZWRJbmZvOiB7XG4gICAgICBjb2xvcjogZ2V0Q29sb3IodGhlbWUucGFsZXR0ZS5pbmZvLm1haW4sIDAuNiksXG4gICAgICBib3JkZXI6IFwiMXB4IHNvbGlkIFwiLmNvbmNhdCh0aGVtZS5wYWxldHRlLmluZm8ubWFpbiksXG4gICAgICAnJiAkaWNvbic6IHtcbiAgICAgICAgY29sb3I6IHRoZW1lLnBhbGV0dGUuaW5mby5tYWluXG4gICAgICB9XG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYHZhcmlhbnQ9XCJvdXRsaW5lZFwiYCBhbmQgYGNvbG9yPVwid2FybmluZ1wiYC4gKi9cbiAgICBvdXRsaW5lZFdhcm5pbmc6IHtcbiAgICAgIGNvbG9yOiBnZXRDb2xvcih0aGVtZS5wYWxldHRlLndhcm5pbmcubWFpbiwgMC42KSxcbiAgICAgIGJvcmRlcjogXCIxcHggc29saWQgXCIuY29uY2F0KHRoZW1lLnBhbGV0dGUud2FybmluZy5tYWluKSxcbiAgICAgICcmICRpY29uJzoge1xuICAgICAgICBjb2xvcjogdGhlbWUucGFsZXR0ZS53YXJuaW5nLm1haW5cbiAgICAgIH1cbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgdmFyaWFudD1cIm91dGxpbmVkXCJgIGFuZCBgY29sb3I9XCJlcnJvclwiYC4gKi9cbiAgICBvdXRsaW5lZEVycm9yOiB7XG4gICAgICBjb2xvcjogZ2V0Q29sb3IodGhlbWUucGFsZXR0ZS5lcnJvci5tYWluLCAwLjYpLFxuICAgICAgYm9yZGVyOiBcIjFweCBzb2xpZCBcIi5jb25jYXQodGhlbWUucGFsZXR0ZS5lcnJvci5tYWluKSxcbiAgICAgICcmICRpY29uJzoge1xuICAgICAgICBjb2xvcjogdGhlbWUucGFsZXR0ZS5lcnJvci5tYWluXG4gICAgICB9XG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYHZhcmlhbnQ9XCJmaWxsZWRcImAgYW5kIGBjb2xvcj1cInN1Y2Nlc3NcImAuICovXG4gICAgZmlsbGVkU3VjY2Vzczoge1xuICAgICAgY29sb3I6ICcjZmZmJyxcbiAgICAgIGZvbnRXZWlnaHQ6IHRoZW1lLnR5cG9ncmFwaHkuZm9udFdlaWdodE1lZGl1bSxcbiAgICAgIGJhY2tncm91bmRDb2xvcjogdGhlbWUucGFsZXR0ZS5zdWNjZXNzLm1haW5cbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgdmFyaWFudD1cImZpbGxlZFwiYCBhbmQgYGNvbG9yPVwiaW5mb1wiYC4gKi9cbiAgICBmaWxsZWRJbmZvOiB7XG4gICAgICBjb2xvcjogJyNmZmYnLFxuICAgICAgZm9udFdlaWdodDogdGhlbWUudHlwb2dyYXBoeS5mb250V2VpZ2h0TWVkaXVtLFxuICAgICAgYmFja2dyb3VuZENvbG9yOiB0aGVtZS5wYWxldHRlLmluZm8ubWFpblxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGB2YXJpYW50PVwiZmlsbGVkXCJgIGFuZCBgY29sb3I9XCJ3YXJuaW5nXCJgLiAqL1xuICAgIGZpbGxlZFdhcm5pbmc6IHtcbiAgICAgIGNvbG9yOiAnI2ZmZicsXG4gICAgICBmb250V2VpZ2h0OiB0aGVtZS50eXBvZ3JhcGh5LmZvbnRXZWlnaHRNZWRpdW0sXG4gICAgICBiYWNrZ3JvdW5kQ29sb3I6IHRoZW1lLnBhbGV0dGUud2FybmluZy5tYWluXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYHZhcmlhbnQ9XCJmaWxsZWRcImAgYW5kIGBjb2xvcj1cImVycm9yXCJgLiAqL1xuICAgIGZpbGxlZEVycm9yOiB7XG4gICAgICBjb2xvcjogJyNmZmYnLFxuICAgICAgZm9udFdlaWdodDogdGhlbWUudHlwb2dyYXBoeS5mb250V2VpZ2h0TWVkaXVtLFxuICAgICAgYmFja2dyb3VuZENvbG9yOiB0aGVtZS5wYWxldHRlLmVycm9yLm1haW5cbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIGljb24gd3JhcHBlciBlbGVtZW50LiAqL1xuICAgIGljb246IHtcbiAgICAgIG1hcmdpblJpZ2h0OiAxMixcbiAgICAgIHBhZGRpbmc6ICc3cHggMCcsXG4gICAgICBkaXNwbGF5OiAnZmxleCcsXG4gICAgICBmb250U2l6ZTogMjIsXG4gICAgICBvcGFjaXR5OiAwLjlcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIG1lc3NhZ2Ugd3JhcHBlciBlbGVtZW50LiAqL1xuICAgIG1lc3NhZ2U6IHtcbiAgICAgIHBhZGRpbmc6ICc4cHggMCdcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIGFjdGlvbiB3cmFwcGVyIGVsZW1lbnQgaWYgYGFjdGlvbmAgaXMgcHJvdmlkZWQuICovXG4gICAgYWN0aW9uOiB7XG4gICAgICBkaXNwbGF5OiAnZmxleCcsXG4gICAgICBhbGlnbkl0ZW1zOiAnY2VudGVyJyxcbiAgICAgIG1hcmdpbkxlZnQ6ICdhdXRvJyxcbiAgICAgIHBhZGRpbmdMZWZ0OiAxNixcbiAgICAgIG1hcmdpblJpZ2h0OiAtOFxuICAgIH1cbiAgfTtcbn07XG52YXIgZGVmYXVsdEljb25NYXBwaW5nID0ge1xuICBzdWNjZXNzOiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChTdWNjZXNzT3V0bGluZWRJY29uLCB7XG4gICAgZm9udFNpemU6IFwiaW5oZXJpdFwiXG4gIH0pLFxuICB3YXJuaW5nOiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChSZXBvcnRQcm9ibGVtT3V0bGluZWRJY29uLCB7XG4gICAgZm9udFNpemU6IFwiaW5oZXJpdFwiXG4gIH0pLFxuICBlcnJvcjogLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoRXJyb3JPdXRsaW5lSWNvbiwge1xuICAgIGZvbnRTaXplOiBcImluaGVyaXRcIlxuICB9KSxcbiAgaW5mbzogLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoSW5mb091dGxpbmVkSWNvbiwge1xuICAgIGZvbnRTaXplOiBcImluaGVyaXRcIlxuICB9KVxufTtcblxudmFyIF9yZWYgPSAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChDbG9zZUljb24sIHtcbiAgZm9udFNpemU6IFwic21hbGxcIlxufSk7XG5cbnZhciBBbGVydCA9IC8qI19fUFVSRV9fKi9SZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIEFsZXJ0KHByb3BzLCByZWYpIHtcbiAgdmFyIGFjdGlvbiA9IHByb3BzLmFjdGlvbixcbiAgICAgIGNoaWxkcmVuID0gcHJvcHMuY2hpbGRyZW4sXG4gICAgICBjbGFzc2VzID0gcHJvcHMuY2xhc3NlcyxcbiAgICAgIGNsYXNzTmFtZSA9IHByb3BzLmNsYXNzTmFtZSxcbiAgICAgIF9wcm9wcyRjbG9zZVRleHQgPSBwcm9wcy5jbG9zZVRleHQsXG4gICAgICBjbG9zZVRleHQgPSBfcHJvcHMkY2xvc2VUZXh0ID09PSB2b2lkIDAgPyAnQ2xvc2UnIDogX3Byb3BzJGNsb3NlVGV4dCxcbiAgICAgIGNvbG9yID0gcHJvcHMuY29sb3IsXG4gICAgICBpY29uID0gcHJvcHMuaWNvbixcbiAgICAgIF9wcm9wcyRpY29uTWFwcGluZyA9IHByb3BzLmljb25NYXBwaW5nLFxuICAgICAgaWNvbk1hcHBpbmcgPSBfcHJvcHMkaWNvbk1hcHBpbmcgPT09IHZvaWQgMCA/IGRlZmF1bHRJY29uTWFwcGluZyA6IF9wcm9wcyRpY29uTWFwcGluZyxcbiAgICAgIG9uQ2xvc2UgPSBwcm9wcy5vbkNsb3NlLFxuICAgICAgX3Byb3BzJHJvbGUgPSBwcm9wcy5yb2xlLFxuICAgICAgcm9sZSA9IF9wcm9wcyRyb2xlID09PSB2b2lkIDAgPyAnYWxlcnQnIDogX3Byb3BzJHJvbGUsXG4gICAgICBfcHJvcHMkc2V2ZXJpdHkgPSBwcm9wcy5zZXZlcml0eSxcbiAgICAgIHNldmVyaXR5ID0gX3Byb3BzJHNldmVyaXR5ID09PSB2b2lkIDAgPyAnc3VjY2VzcycgOiBfcHJvcHMkc2V2ZXJpdHksXG4gICAgICBfcHJvcHMkdmFyaWFudCA9IHByb3BzLnZhcmlhbnQsXG4gICAgICB2YXJpYW50ID0gX3Byb3BzJHZhcmlhbnQgPT09IHZvaWQgMCA/ICdzdGFuZGFyZCcgOiBfcHJvcHMkdmFyaWFudCxcbiAgICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKHByb3BzLCBbXCJhY3Rpb25cIiwgXCJjaGlsZHJlblwiLCBcImNsYXNzZXNcIiwgXCJjbGFzc05hbWVcIiwgXCJjbG9zZVRleHRcIiwgXCJjb2xvclwiLCBcImljb25cIiwgXCJpY29uTWFwcGluZ1wiLCBcIm9uQ2xvc2VcIiwgXCJyb2xlXCIsIFwic2V2ZXJpdHlcIiwgXCJ2YXJpYW50XCJdKTtcblxuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoUGFwZXIsIF9leHRlbmRzKHtcbiAgICByb2xlOiByb2xlLFxuICAgIHNxdWFyZTogdHJ1ZSxcbiAgICBlbGV2YXRpb246IDAsXG4gICAgY2xhc3NOYW1lOiBjbHN4KGNsYXNzZXMucm9vdCwgY2xhc3Nlc1tcIlwiLmNvbmNhdCh2YXJpYW50KS5jb25jYXQoY2FwaXRhbGl6ZShjb2xvciB8fCBzZXZlcml0eSkpXSwgY2xhc3NOYW1lKSxcbiAgICByZWY6IHJlZlxuICB9LCBvdGhlciksIGljb24gIT09IGZhbHNlID8gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwge1xuICAgIGNsYXNzTmFtZTogY2xhc3Nlcy5pY29uXG4gIH0sIGljb24gfHwgaWNvbk1hcHBpbmdbc2V2ZXJpdHldIHx8IGRlZmF1bHRJY29uTWFwcGluZ1tzZXZlcml0eV0pIDogbnVsbCwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwge1xuICAgIGNsYXNzTmFtZTogY2xhc3Nlcy5tZXNzYWdlXG4gIH0sIGNoaWxkcmVuKSwgYWN0aW9uICE9IG51bGwgPyAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7XG4gICAgY2xhc3NOYW1lOiBjbGFzc2VzLmFjdGlvblxuICB9LCBhY3Rpb24pIDogbnVsbCwgYWN0aW9uID09IG51bGwgJiYgb25DbG9zZSA/IC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHtcbiAgICBjbGFzc05hbWU6IGNsYXNzZXMuYWN0aW9uXG4gIH0sIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KEljb25CdXR0b24sIHtcbiAgICBzaXplOiBcInNtYWxsXCIsXG4gICAgXCJhcmlhLWxhYmVsXCI6IGNsb3NlVGV4dCxcbiAgICB0aXRsZTogY2xvc2VUZXh0LFxuICAgIGNvbG9yOiBcImluaGVyaXRcIixcbiAgICBvbkNsaWNrOiBvbkNsb3NlXG4gIH0sIF9yZWYpKSA6IG51bGwpO1xufSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBBbGVydC5wcm9wVHlwZXMgPSB7XG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIFdhcm5pbmcgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgLy8gfCBUaGVzZSBQcm9wVHlwZXMgYXJlIGdlbmVyYXRlZCBmcm9tIHRoZSBUeXBlU2NyaXB0IHR5cGUgZGVmaW5pdGlvbnMgfFxuICAvLyB8ICAgICBUbyB1cGRhdGUgdGhlbSBlZGl0IHRoZSBkLnRzIGZpbGUgYW5kIHJ1biBcInlhcm4gcHJvcHR5cGVzXCIgICAgIHxcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4gIC8qKlxuICAgKiBUaGUgYWN0aW9uIHRvIGRpc3BsYXkuIEl0IHJlbmRlcnMgYWZ0ZXIgdGhlIG1lc3NhZ2UsIGF0IHRoZSBlbmQgb2YgdGhlIGFsZXJ0LlxuICAgKi9cbiAgYWN0aW9uOiBQcm9wVHlwZXMubm9kZSxcblxuICAvKipcbiAgICogVGhlIGNvbnRlbnQgb2YgdGhlIGNvbXBvbmVudC5cbiAgICovXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcblxuICAvKipcbiAgICogT3ZlcnJpZGUgb3IgZXh0ZW5kIHRoZSBzdHlsZXMgYXBwbGllZCB0byB0aGUgY29tcG9uZW50LlxuICAgKiBTZWUgW0NTUyBBUEldKCNjc3MpIGJlbG93IGZvciBtb3JlIGRldGFpbHMuXG4gICAqL1xuICBjbGFzc2VzOiBQcm9wVHlwZXMub2JqZWN0LFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIE92ZXJyaWRlIHRoZSBkZWZhdWx0IGxhYmVsIGZvciB0aGUgKmNsb3NlIHBvcHVwKiBpY29uIGJ1dHRvbi5cbiAgICpcbiAgICogRm9yIGxvY2FsaXphdGlvbiBwdXJwb3NlcywgeW91IGNhbiB1c2UgdGhlIHByb3ZpZGVkIFt0cmFuc2xhdGlvbnNdKC9ndWlkZXMvbG9jYWxpemF0aW9uLykuXG4gICAqL1xuICBjbG9zZVRleHQ6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIFRoZSBtYWluIGNvbG9yIGZvciB0aGUgYWxlcnQuIFVubGVzcyBwcm92aWRlZCwgdGhlIHZhbHVlIGlzIHRha2VuIGZyb20gdGhlIGBzZXZlcml0eWAgcHJvcC5cbiAgICovXG4gIGNvbG9yOiBQcm9wVHlwZXMub25lT2YoWydlcnJvcicsICdpbmZvJywgJ3N1Y2Nlc3MnLCAnd2FybmluZyddKSxcblxuICAvKipcbiAgICogT3ZlcnJpZGUgdGhlIGljb24gZGlzcGxheWVkIGJlZm9yZSB0aGUgY2hpbGRyZW4uXG4gICAqIFVubGVzcyBwcm92aWRlZCwgdGhlIGljb24gaXMgbWFwcGVkIHRvIHRoZSB2YWx1ZSBvZiB0aGUgYHNldmVyaXR5YCBwcm9wLlxuICAgKi9cbiAgaWNvbjogUHJvcFR5cGVzLm5vZGUsXG5cbiAgLyoqXG4gICAqIFRoZSBjb21wb25lbnQgbWFwcyB0aGUgYHNldmVyaXR5YCBwcm9wIHRvIGEgcmFuZ2Ugb2YgZGlmZmVyZW50IGljb25zLFxuICAgKiBmb3IgaW5zdGFuY2Ugc3VjY2VzcyB0byBgPFN1Y2Nlc3NPdXRsaW5lZD5gLlxuICAgKiBJZiB5b3Ugd2lzaCB0byBjaGFuZ2UgdGhpcyBtYXBwaW5nLCB5b3UgY2FuIHByb3ZpZGUgeW91ciBvd24uXG4gICAqIEFsdGVybmF0aXZlbHksIHlvdSBjYW4gdXNlIHRoZSBgaWNvbmAgcHJvcCB0byBvdmVycmlkZSB0aGUgaWNvbiBkaXNwbGF5ZWQuXG4gICAqL1xuICBpY29uTWFwcGluZzogUHJvcFR5cGVzLnNoYXBlKHtcbiAgICBlcnJvcjogUHJvcFR5cGVzLm5vZGUsXG4gICAgaW5mbzogUHJvcFR5cGVzLm5vZGUsXG4gICAgc3VjY2VzczogUHJvcFR5cGVzLm5vZGUsXG4gICAgd2FybmluZzogUHJvcFR5cGVzLm5vZGVcbiAgfSksXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIHdoZW4gdGhlIGNvbXBvbmVudCByZXF1ZXN0cyB0byBiZSBjbG9zZWQuXG4gICAqIFdoZW4gcHJvdmlkZWQgYW5kIG5vIGBhY3Rpb25gIHByb3AgaXMgc2V0LCBhIGNsb3NlIGljb24gYnV0dG9uIGlzIGRpc3BsYXllZCB0aGF0IHRyaWdnZXJzIHRoZSBjYWxsYmFjayB3aGVuIGNsaWNrZWQuXG4gICAqXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBldmVudCBUaGUgZXZlbnQgc291cmNlIG9mIHRoZSBjYWxsYmFjay5cbiAgICovXG4gIG9uQ2xvc2U6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBUaGUgQVJJQSByb2xlIGF0dHJpYnV0ZSBvZiB0aGUgZWxlbWVudC5cbiAgICovXG4gIHJvbGU6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIFRoZSBzZXZlcml0eSBvZiB0aGUgYWxlcnQuIFRoaXMgZGVmaW5lcyB0aGUgY29sb3IgYW5kIGljb24gdXNlZC5cbiAgICovXG4gIHNldmVyaXR5OiBQcm9wVHlwZXMub25lT2YoWydlcnJvcicsICdpbmZvJywgJ3N1Y2Nlc3MnLCAnd2FybmluZyddKSxcblxuICAvKipcbiAgICogVGhlIHZhcmlhbnQgdG8gdXNlLlxuICAgKi9cbiAgdmFyaWFudDogUHJvcFR5cGVzLm9uZU9mKFsnZmlsbGVkJywgJ291dGxpbmVkJywgJ3N0YW5kYXJkJ10pXG59IDogdm9pZCAwO1xuZXhwb3J0IGRlZmF1bHQgd2l0aFN0eWxlcyhzdHlsZXMsIHtcbiAgbmFtZTogJ011aUFsZXJ0J1xufSkoQWxlcnQpOyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF9zbGljZWRUb0FycmF5IGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9zbGljZWRUb0FycmF5XCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc1wiO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IGNsc3ggZnJvbSAnY2xzeCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHsgVHJhbnNpdGlvbiB9IGZyb20gJ3JlYWN0LXRyYW5zaXRpb24tZ3JvdXAnO1xuaW1wb3J0IHdpdGhTdHlsZXMgZnJvbSAnLi4vc3R5bGVzL3dpdGhTdHlsZXMnO1xuaW1wb3J0IHsgZHVyYXRpb24gfSBmcm9tICcuLi9zdHlsZXMvdHJhbnNpdGlvbnMnO1xuaW1wb3J0IHsgZ2V0VHJhbnNpdGlvblByb3BzIH0gZnJvbSAnLi4vdHJhbnNpdGlvbnMvdXRpbHMnO1xuaW1wb3J0IHVzZVRoZW1lIGZyb20gJy4uL3N0eWxlcy91c2VUaGVtZSc7XG5pbXBvcnQgeyB1c2VGb3JrUmVmIH0gZnJvbSAnLi4vdXRpbHMnO1xuZXhwb3J0IHZhciBzdHlsZXMgPSBmdW5jdGlvbiBzdHlsZXModGhlbWUpIHtcbiAgcmV0dXJuIHtcbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgY29udGFpbmVyIGVsZW1lbnQuICovXG4gICAgY29udGFpbmVyOiB7XG4gICAgICBoZWlnaHQ6IDAsXG4gICAgICBvdmVyZmxvdzogJ2hpZGRlbicsXG4gICAgICB0cmFuc2l0aW9uOiB0aGVtZS50cmFuc2l0aW9ucy5jcmVhdGUoJ2hlaWdodCcpXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb250YWluZXIgZWxlbWVudCB3aGVuIHRoZSB0cmFuc2l0aW9uIGhhcyBlbnRlcmVkLiAqL1xuICAgIGVudGVyZWQ6IHtcbiAgICAgIGhlaWdodDogJ2F1dG8nLFxuICAgICAgb3ZlcmZsb3c6ICd2aXNpYmxlJ1xuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgY29udGFpbmVyIGVsZW1lbnQgd2hlbiB0aGUgdHJhbnNpdGlvbiBoYXMgZXhpdGVkIGFuZCBgY29sbGFwc2VkSGVpZ2h0YCAhPSAwcHguICovXG4gICAgaGlkZGVuOiB7XG4gICAgICB2aXNpYmlsaXR5OiAnaGlkZGVuJ1xuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgb3V0ZXIgd3JhcHBlciBlbGVtZW50LiAqL1xuICAgIHdyYXBwZXI6IHtcbiAgICAgIC8vIEhhY2sgdG8gZ2V0IGNoaWxkcmVuIHdpdGggYSBuZWdhdGl2ZSBtYXJnaW4gdG8gbm90IGZhbHNpZnkgdGhlIGhlaWdodCBjb21wdXRhdGlvbi5cbiAgICAgIGRpc3BsYXk6ICdmbGV4J1xuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgaW5uZXIgd3JhcHBlciBlbGVtZW50LiAqL1xuICAgIHdyYXBwZXJJbm5lcjoge1xuICAgICAgd2lkdGg6ICcxMDAlJ1xuICAgIH1cbiAgfTtcbn07XG4vKipcbiAqIFRoZSBDb2xsYXBzZSB0cmFuc2l0aW9uIGlzIHVzZWQgYnkgdGhlXG4gKiBbVmVydGljYWwgU3RlcHBlcl0oL2NvbXBvbmVudHMvc3RlcHBlcnMvI3ZlcnRpY2FsLXN0ZXBwZXIpIFN0ZXBDb250ZW50IGNvbXBvbmVudC5cbiAqIEl0IHVzZXMgW3JlYWN0LXRyYW5zaXRpb24tZ3JvdXBdKGh0dHBzOi8vZ2l0aHViLmNvbS9yZWFjdGpzL3JlYWN0LXRyYW5zaXRpb24tZ3JvdXApIGludGVybmFsbHkuXG4gKi9cblxudmFyIENvbGxhcHNlID0gLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gQ29sbGFwc2UocHJvcHMsIHJlZikge1xuICB2YXIgY2hpbGRyZW4gPSBwcm9wcy5jaGlsZHJlbixcbiAgICAgIGNsYXNzZXMgPSBwcm9wcy5jbGFzc2VzLFxuICAgICAgY2xhc3NOYW1lID0gcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgX3Byb3BzJGNvbGxhcHNlZEhlaWdoID0gcHJvcHMuY29sbGFwc2VkSGVpZ2h0LFxuICAgICAgY29sbGFwc2VkSGVpZ2h0UHJvcCA9IF9wcm9wcyRjb2xsYXBzZWRIZWlnaCA9PT0gdm9pZCAwID8gJzBweCcgOiBfcHJvcHMkY29sbGFwc2VkSGVpZ2gsXG4gICAgICBfcHJvcHMkY29tcG9uZW50ID0gcHJvcHMuY29tcG9uZW50LFxuICAgICAgQ29tcG9uZW50ID0gX3Byb3BzJGNvbXBvbmVudCA9PT0gdm9pZCAwID8gJ2RpdicgOiBfcHJvcHMkY29tcG9uZW50LFxuICAgICAgX3Byb3BzJGRpc2FibGVTdHJpY3RNID0gcHJvcHMuZGlzYWJsZVN0cmljdE1vZGVDb21wYXQsXG4gICAgICBkaXNhYmxlU3RyaWN0TW9kZUNvbXBhdCA9IF9wcm9wcyRkaXNhYmxlU3RyaWN0TSA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcHJvcHMkZGlzYWJsZVN0cmljdE0sXG4gICAgICBpblByb3AgPSBwcm9wcy5pbixcbiAgICAgIG9uRW50ZXIgPSBwcm9wcy5vbkVudGVyLFxuICAgICAgb25FbnRlcmVkID0gcHJvcHMub25FbnRlcmVkLFxuICAgICAgb25FbnRlcmluZyA9IHByb3BzLm9uRW50ZXJpbmcsXG4gICAgICBvbkV4aXQgPSBwcm9wcy5vbkV4aXQsXG4gICAgICBvbkV4aXRlZCA9IHByb3BzLm9uRXhpdGVkLFxuICAgICAgb25FeGl0aW5nID0gcHJvcHMub25FeGl0aW5nLFxuICAgICAgc3R5bGUgPSBwcm9wcy5zdHlsZSxcbiAgICAgIF9wcm9wcyR0aW1lb3V0ID0gcHJvcHMudGltZW91dCxcbiAgICAgIHRpbWVvdXQgPSBfcHJvcHMkdGltZW91dCA9PT0gdm9pZCAwID8gZHVyYXRpb24uc3RhbmRhcmQgOiBfcHJvcHMkdGltZW91dCxcbiAgICAgIF9wcm9wcyRUcmFuc2l0aW9uQ29tcCA9IHByb3BzLlRyYW5zaXRpb25Db21wb25lbnQsXG4gICAgICBUcmFuc2l0aW9uQ29tcG9uZW50ID0gX3Byb3BzJFRyYW5zaXRpb25Db21wID09PSB2b2lkIDAgPyBUcmFuc2l0aW9uIDogX3Byb3BzJFRyYW5zaXRpb25Db21wLFxuICAgICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMocHJvcHMsIFtcImNoaWxkcmVuXCIsIFwiY2xhc3Nlc1wiLCBcImNsYXNzTmFtZVwiLCBcImNvbGxhcHNlZEhlaWdodFwiLCBcImNvbXBvbmVudFwiLCBcImRpc2FibGVTdHJpY3RNb2RlQ29tcGF0XCIsIFwiaW5cIiwgXCJvbkVudGVyXCIsIFwib25FbnRlcmVkXCIsIFwib25FbnRlcmluZ1wiLCBcIm9uRXhpdFwiLCBcIm9uRXhpdGVkXCIsIFwib25FeGl0aW5nXCIsIFwic3R5bGVcIiwgXCJ0aW1lb3V0XCIsIFwiVHJhbnNpdGlvbkNvbXBvbmVudFwiXSk7XG5cbiAgdmFyIHRoZW1lID0gdXNlVGhlbWUoKTtcbiAgdmFyIHRpbWVyID0gUmVhY3QudXNlUmVmKCk7XG4gIHZhciB3cmFwcGVyUmVmID0gUmVhY3QudXNlUmVmKG51bGwpO1xuICB2YXIgYXV0b1RyYW5zaXRpb25EdXJhdGlvbiA9IFJlYWN0LnVzZVJlZigpO1xuICB2YXIgY29sbGFwc2VkSGVpZ2h0ID0gdHlwZW9mIGNvbGxhcHNlZEhlaWdodFByb3AgPT09ICdudW1iZXInID8gXCJcIi5jb25jYXQoY29sbGFwc2VkSGVpZ2h0UHJvcCwgXCJweFwiKSA6IGNvbGxhcHNlZEhlaWdodFByb3A7XG4gIFJlYWN0LnVzZUVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIGNsZWFyVGltZW91dCh0aW1lci5jdXJyZW50KTtcbiAgICB9O1xuICB9LCBbXSk7XG4gIHZhciBlbmFibGVTdHJpY3RNb2RlQ29tcGF0ID0gdGhlbWUudW5zdGFibGVfc3RyaWN0TW9kZSAmJiAhZGlzYWJsZVN0cmljdE1vZGVDb21wYXQ7XG4gIHZhciBub2RlUmVmID0gUmVhY3QudXNlUmVmKG51bGwpO1xuICB2YXIgaGFuZGxlUmVmID0gdXNlRm9ya1JlZihyZWYsIGVuYWJsZVN0cmljdE1vZGVDb21wYXQgPyBub2RlUmVmIDogdW5kZWZpbmVkKTtcblxuICB2YXIgbm9ybWFsaXplZFRyYW5zaXRpb25DYWxsYmFjayA9IGZ1bmN0aW9uIG5vcm1hbGl6ZWRUcmFuc2l0aW9uQ2FsbGJhY2soY2FsbGJhY2spIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKG5vZGVPckFwcGVhcmluZywgbWF5YmVBcHBlYXJpbmcpIHtcbiAgICAgIGlmIChjYWxsYmFjaykge1xuICAgICAgICB2YXIgX3JlZiA9IGVuYWJsZVN0cmljdE1vZGVDb21wYXQgPyBbbm9kZVJlZi5jdXJyZW50LCBub2RlT3JBcHBlYXJpbmddIDogW25vZGVPckFwcGVhcmluZywgbWF5YmVBcHBlYXJpbmddLFxuICAgICAgICAgICAgX3JlZjIgPSBfc2xpY2VkVG9BcnJheShfcmVmLCAyKSxcbiAgICAgICAgICAgIG5vZGUgPSBfcmVmMlswXSxcbiAgICAgICAgICAgIGlzQXBwZWFyaW5nID0gX3JlZjJbMV07IC8vIG9uRW50ZXJYeHggYW5kIG9uRXhpdFh4eCBjYWxsYmFja3MgaGF2ZSBhIGRpZmZlcmVudCBhcmd1bWVudHMubGVuZ3RoIHZhbHVlLlxuXG5cbiAgICAgICAgaWYgKGlzQXBwZWFyaW5nID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBjYWxsYmFjayhub2RlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjYWxsYmFjayhub2RlLCBpc0FwcGVhcmluZyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuICB9O1xuXG4gIHZhciBoYW5kbGVFbnRlciA9IG5vcm1hbGl6ZWRUcmFuc2l0aW9uQ2FsbGJhY2soZnVuY3Rpb24gKG5vZGUsIGlzQXBwZWFyaW5nKSB7XG4gICAgbm9kZS5zdHlsZS5oZWlnaHQgPSBjb2xsYXBzZWRIZWlnaHQ7XG5cbiAgICBpZiAob25FbnRlcikge1xuICAgICAgb25FbnRlcihub2RlLCBpc0FwcGVhcmluZyk7XG4gICAgfVxuICB9KTtcbiAgdmFyIGhhbmRsZUVudGVyaW5nID0gbm9ybWFsaXplZFRyYW5zaXRpb25DYWxsYmFjayhmdW5jdGlvbiAobm9kZSwgaXNBcHBlYXJpbmcpIHtcbiAgICB2YXIgd3JhcHBlckhlaWdodCA9IHdyYXBwZXJSZWYuY3VycmVudCA/IHdyYXBwZXJSZWYuY3VycmVudC5jbGllbnRIZWlnaHQgOiAwO1xuXG4gICAgdmFyIF9nZXRUcmFuc2l0aW9uUHJvcHMgPSBnZXRUcmFuc2l0aW9uUHJvcHMoe1xuICAgICAgc3R5bGU6IHN0eWxlLFxuICAgICAgdGltZW91dDogdGltZW91dFxuICAgIH0sIHtcbiAgICAgIG1vZGU6ICdlbnRlcidcbiAgICB9KSxcbiAgICAgICAgdHJhbnNpdGlvbkR1cmF0aW9uID0gX2dldFRyYW5zaXRpb25Qcm9wcy5kdXJhdGlvbjtcblxuICAgIGlmICh0aW1lb3V0ID09PSAnYXV0bycpIHtcbiAgICAgIHZhciBkdXJhdGlvbjIgPSB0aGVtZS50cmFuc2l0aW9ucy5nZXRBdXRvSGVpZ2h0RHVyYXRpb24od3JhcHBlckhlaWdodCk7XG4gICAgICBub2RlLnN0eWxlLnRyYW5zaXRpb25EdXJhdGlvbiA9IFwiXCIuY29uY2F0KGR1cmF0aW9uMiwgXCJtc1wiKTtcbiAgICAgIGF1dG9UcmFuc2l0aW9uRHVyYXRpb24uY3VycmVudCA9IGR1cmF0aW9uMjtcbiAgICB9IGVsc2Uge1xuICAgICAgbm9kZS5zdHlsZS50cmFuc2l0aW9uRHVyYXRpb24gPSB0eXBlb2YgdHJhbnNpdGlvbkR1cmF0aW9uID09PSAnc3RyaW5nJyA/IHRyYW5zaXRpb25EdXJhdGlvbiA6IFwiXCIuY29uY2F0KHRyYW5zaXRpb25EdXJhdGlvbiwgXCJtc1wiKTtcbiAgICB9XG5cbiAgICBub2RlLnN0eWxlLmhlaWdodCA9IFwiXCIuY29uY2F0KHdyYXBwZXJIZWlnaHQsIFwicHhcIik7XG5cbiAgICBpZiAob25FbnRlcmluZykge1xuICAgICAgb25FbnRlcmluZyhub2RlLCBpc0FwcGVhcmluZyk7XG4gICAgfVxuICB9KTtcbiAgdmFyIGhhbmRsZUVudGVyZWQgPSBub3JtYWxpemVkVHJhbnNpdGlvbkNhbGxiYWNrKGZ1bmN0aW9uIChub2RlLCBpc0FwcGVhcmluZykge1xuICAgIG5vZGUuc3R5bGUuaGVpZ2h0ID0gJ2F1dG8nO1xuXG4gICAgaWYgKG9uRW50ZXJlZCkge1xuICAgICAgb25FbnRlcmVkKG5vZGUsIGlzQXBwZWFyaW5nKTtcbiAgICB9XG4gIH0pO1xuICB2YXIgaGFuZGxlRXhpdCA9IG5vcm1hbGl6ZWRUcmFuc2l0aW9uQ2FsbGJhY2soZnVuY3Rpb24gKG5vZGUpIHtcbiAgICB2YXIgd3JhcHBlckhlaWdodCA9IHdyYXBwZXJSZWYuY3VycmVudCA/IHdyYXBwZXJSZWYuY3VycmVudC5jbGllbnRIZWlnaHQgOiAwO1xuICAgIG5vZGUuc3R5bGUuaGVpZ2h0ID0gXCJcIi5jb25jYXQod3JhcHBlckhlaWdodCwgXCJweFwiKTtcblxuICAgIGlmIChvbkV4aXQpIHtcbiAgICAgIG9uRXhpdChub2RlKTtcbiAgICB9XG4gIH0pO1xuICB2YXIgaGFuZGxlRXhpdGVkID0gbm9ybWFsaXplZFRyYW5zaXRpb25DYWxsYmFjayhvbkV4aXRlZCk7XG4gIHZhciBoYW5kbGVFeGl0aW5nID0gbm9ybWFsaXplZFRyYW5zaXRpb25DYWxsYmFjayhmdW5jdGlvbiAobm9kZSkge1xuICAgIHZhciB3cmFwcGVySGVpZ2h0ID0gd3JhcHBlclJlZi5jdXJyZW50ID8gd3JhcHBlclJlZi5jdXJyZW50LmNsaWVudEhlaWdodCA6IDA7XG5cbiAgICB2YXIgX2dldFRyYW5zaXRpb25Qcm9wczIgPSBnZXRUcmFuc2l0aW9uUHJvcHMoe1xuICAgICAgc3R5bGU6IHN0eWxlLFxuICAgICAgdGltZW91dDogdGltZW91dFxuICAgIH0sIHtcbiAgICAgIG1vZGU6ICdleGl0J1xuICAgIH0pLFxuICAgICAgICB0cmFuc2l0aW9uRHVyYXRpb24gPSBfZ2V0VHJhbnNpdGlvblByb3BzMi5kdXJhdGlvbjtcblxuICAgIGlmICh0aW1lb3V0ID09PSAnYXV0bycpIHtcbiAgICAgIHZhciBkdXJhdGlvbjIgPSB0aGVtZS50cmFuc2l0aW9ucy5nZXRBdXRvSGVpZ2h0RHVyYXRpb24od3JhcHBlckhlaWdodCk7XG4gICAgICBub2RlLnN0eWxlLnRyYW5zaXRpb25EdXJhdGlvbiA9IFwiXCIuY29uY2F0KGR1cmF0aW9uMiwgXCJtc1wiKTtcbiAgICAgIGF1dG9UcmFuc2l0aW9uRHVyYXRpb24uY3VycmVudCA9IGR1cmF0aW9uMjtcbiAgICB9IGVsc2Uge1xuICAgICAgbm9kZS5zdHlsZS50cmFuc2l0aW9uRHVyYXRpb24gPSB0eXBlb2YgdHJhbnNpdGlvbkR1cmF0aW9uID09PSAnc3RyaW5nJyA/IHRyYW5zaXRpb25EdXJhdGlvbiA6IFwiXCIuY29uY2F0KHRyYW5zaXRpb25EdXJhdGlvbiwgXCJtc1wiKTtcbiAgICB9XG5cbiAgICBub2RlLnN0eWxlLmhlaWdodCA9IGNvbGxhcHNlZEhlaWdodDtcblxuICAgIGlmIChvbkV4aXRpbmcpIHtcbiAgICAgIG9uRXhpdGluZyhub2RlKTtcbiAgICB9XG4gIH0pO1xuXG4gIHZhciBhZGRFbmRMaXN0ZW5lciA9IGZ1bmN0aW9uIGFkZEVuZExpc3RlbmVyKG5vZGVPck5leHQsIG1heWJlTmV4dCkge1xuICAgIHZhciBuZXh0ID0gZW5hYmxlU3RyaWN0TW9kZUNvbXBhdCA/IG5vZGVPck5leHQgOiBtYXliZU5leHQ7XG5cbiAgICBpZiAodGltZW91dCA9PT0gJ2F1dG8nKSB7XG4gICAgICB0aW1lci5jdXJyZW50ID0gc2V0VGltZW91dChuZXh0LCBhdXRvVHJhbnNpdGlvbkR1cmF0aW9uLmN1cnJlbnQgfHwgMCk7XG4gICAgfVxuICB9O1xuXG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChUcmFuc2l0aW9uQ29tcG9uZW50LCBfZXh0ZW5kcyh7XG4gICAgaW46IGluUHJvcCxcbiAgICBvbkVudGVyOiBoYW5kbGVFbnRlcixcbiAgICBvbkVudGVyZWQ6IGhhbmRsZUVudGVyZWQsXG4gICAgb25FbnRlcmluZzogaGFuZGxlRW50ZXJpbmcsXG4gICAgb25FeGl0OiBoYW5kbGVFeGl0LFxuICAgIG9uRXhpdGVkOiBoYW5kbGVFeGl0ZWQsXG4gICAgb25FeGl0aW5nOiBoYW5kbGVFeGl0aW5nLFxuICAgIGFkZEVuZExpc3RlbmVyOiBhZGRFbmRMaXN0ZW5lcixcbiAgICBub2RlUmVmOiBlbmFibGVTdHJpY3RNb2RlQ29tcGF0ID8gbm9kZVJlZiA6IHVuZGVmaW5lZCxcbiAgICB0aW1lb3V0OiB0aW1lb3V0ID09PSAnYXV0bycgPyBudWxsIDogdGltZW91dFxuICB9LCBvdGhlciksIGZ1bmN0aW9uIChzdGF0ZSwgY2hpbGRQcm9wcykge1xuICAgIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChDb21wb25lbnQsIF9leHRlbmRzKHtcbiAgICAgIGNsYXNzTmFtZTogY2xzeChjbGFzc2VzLmNvbnRhaW5lciwgY2xhc3NOYW1lLCB7XG4gICAgICAgICdlbnRlcmVkJzogY2xhc3Nlcy5lbnRlcmVkLFxuICAgICAgICAnZXhpdGVkJzogIWluUHJvcCAmJiBjb2xsYXBzZWRIZWlnaHQgPT09ICcwcHgnICYmIGNsYXNzZXMuaGlkZGVuXG4gICAgICB9W3N0YXRlXSksXG4gICAgICBzdHlsZTogX2V4dGVuZHMoe1xuICAgICAgICBtaW5IZWlnaHQ6IGNvbGxhcHNlZEhlaWdodFxuICAgICAgfSwgc3R5bGUpLFxuICAgICAgcmVmOiBoYW5kbGVSZWZcbiAgICB9LCBjaGlsZFByb3BzKSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwge1xuICAgICAgY2xhc3NOYW1lOiBjbGFzc2VzLndyYXBwZXIsXG4gICAgICByZWY6IHdyYXBwZXJSZWZcbiAgICB9LCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7XG4gICAgICBjbGFzc05hbWU6IGNsYXNzZXMud3JhcHBlcklubmVyXG4gICAgfSwgY2hpbGRyZW4pKSk7XG4gIH0pO1xufSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBDb2xsYXBzZS5wcm9wVHlwZXMgPSB7XG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIFdhcm5pbmcgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgLy8gfCBUaGVzZSBQcm9wVHlwZXMgYXJlIGdlbmVyYXRlZCBmcm9tIHRoZSBUeXBlU2NyaXB0IHR5cGUgZGVmaW5pdGlvbnMgfFxuICAvLyB8ICAgICBUbyB1cGRhdGUgdGhlbSBlZGl0IHRoZSBkLnRzIGZpbGUgYW5kIHJ1biBcInlhcm4gcHJvcHR5cGVzXCIgICAgIHxcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4gIC8qKlxuICAgKiBUaGUgY29udGVudCBub2RlIHRvIGJlIGNvbGxhcHNlZC5cbiAgICovXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcblxuICAvKipcbiAgICogT3ZlcnJpZGUgb3IgZXh0ZW5kIHRoZSBzdHlsZXMgYXBwbGllZCB0byB0aGUgY29tcG9uZW50LlxuICAgKiBTZWUgW0NTUyBBUEldKCNjc3MpIGJlbG93IGZvciBtb3JlIGRldGFpbHMuXG4gICAqL1xuICBjbGFzc2VzOiBQcm9wVHlwZXMub2JqZWN0LFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIFRoZSBoZWlnaHQgb2YgdGhlIGNvbnRhaW5lciB3aGVuIGNvbGxhcHNlZC5cbiAgICovXG4gIGNvbGxhcHNlZEhlaWdodDogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLm51bWJlciwgUHJvcFR5cGVzLnN0cmluZ10pLFxuXG4gIC8qKlxuICAgKiBUaGUgY29tcG9uZW50IHVzZWQgZm9yIHRoZSByb290IG5vZGUuXG4gICAqIEVpdGhlciBhIHN0cmluZyB0byB1c2UgYSBIVE1MIGVsZW1lbnQgb3IgYSBjb21wb25lbnQuXG4gICAqL1xuICBjb21wb25lbnQ6IFByb3BUeXBlc1xuICAvKiBAdHlwZXNjcmlwdC10by1wcm9wdHlwZXMtaWdub3JlICovXG4gIC5lbGVtZW50VHlwZSxcblxuICAvKipcbiAgICogRW5hYmxlIHRoaXMgcHJvcCBpZiB5b3UgZW5jb3VudGVyICdGdW5jdGlvbiBjb21wb25lbnRzIGNhbm5vdCBiZSBnaXZlbiByZWZzJyxcbiAgICogdXNlIGB1bnN0YWJsZV9jcmVhdGVTdHJpY3RNb2RlVGhlbWVgLFxuICAgKiBhbmQgY2FuJ3QgZm9yd2FyZCB0aGUgcmVmIGluIHRoZSBwYXNzZWQgYENvbXBvbmVudGAuXG4gICAqL1xuICBkaXNhYmxlU3RyaWN0TW9kZUNvbXBhdDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGNvbXBvbmVudCB3aWxsIHRyYW5zaXRpb24gaW4uXG4gICAqL1xuICBpbjogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIG9uRW50ZXI6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBvbkVudGVyZWQ6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBvbkVudGVyaW5nOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgb25FeGl0OiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgb25FeGl0ZWQ6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBvbkV4aXRpbmc6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBzdHlsZTogUHJvcFR5cGVzLm9iamVjdCxcblxuICAvKipcbiAgICogVGhlIGR1cmF0aW9uIGZvciB0aGUgdHJhbnNpdGlvbiwgaW4gbWlsbGlzZWNvbmRzLlxuICAgKiBZb3UgbWF5IHNwZWNpZnkgYSBzaW5nbGUgdGltZW91dCBmb3IgYWxsIHRyYW5zaXRpb25zLCBvciBpbmRpdmlkdWFsbHkgd2l0aCBhbiBvYmplY3QuXG4gICAqXG4gICAqIFNldCB0byAnYXV0bycgdG8gYXV0b21hdGljYWxseSBjYWxjdWxhdGUgdHJhbnNpdGlvbiB0aW1lIGJhc2VkIG9uIGhlaWdodC5cbiAgICovXG4gIHRpbWVvdXQ6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5vbmVPZihbJ2F1dG8nXSksIFByb3BUeXBlcy5udW1iZXIsIFByb3BUeXBlcy5zaGFwZSh7XG4gICAgYXBwZWFyOiBQcm9wVHlwZXMubnVtYmVyLFxuICAgIGVudGVyOiBQcm9wVHlwZXMubnVtYmVyLFxuICAgIGV4aXQ6IFByb3BUeXBlcy5udW1iZXJcbiAgfSldKVxufSA6IHZvaWQgMDtcbkNvbGxhcHNlLm11aVN1cHBvcnRBdXRvID0gdHJ1ZTtcbmV4cG9ydCBkZWZhdWx0IHdpdGhTdHlsZXMoc3R5bGVzLCB7XG4gIG5hbWU6ICdNdWlDb2xsYXBzZSdcbn0pKENvbGxhcHNlKTsiLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnXHJcbmltcG9ydCB7IG1ha2VTdHlsZXMgfSBmcm9tICdAbWF0ZXJpYWwtdWkvY29yZS9zdHlsZXMnXHJcbmltcG9ydCBBbGVydCBmcm9tICdAbWF0ZXJpYWwtdWkvbGFiL0FsZXJ0J1xyXG5pbXBvcnQgeyBJY29uQnV0dG9uLCBDb2xsYXBzZSwgQnV0dG9uIH0gZnJvbSAnQG1hdGVyaWFsLXVpL2NvcmUnXHJcbmltcG9ydCBEZWxldGVJY29uIGZyb20gJ0BtYXRlcmlhbC11aS9pY29ucy9EZWxldGUnXHJcbmltcG9ydCBDbG9zZUljb24gZnJvbSAnQG1hdGVyaWFsLXVpL2ljb25zL0Nsb3NlJ1xyXG5cclxuY29uc3QgdXNlU3R5bGVzID0gbWFrZVN0eWxlcygodGhlbWUpID0+ICh7XHJcbiAgICByb290OiB7XHJcbiAgICAgICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXHJcbiAgICAgICAgYm90dG9tOiAnMXJlbScsXHJcbiAgICAgICAgcmlnaHQ6ICcycmVtJyxcclxuICAgICAgICB3aWR0aDogJzYwJScsXHJcbiAgICAgICAgJyYgPiAqICsgKic6IHtcclxuICAgICAgICAgICAgbWFyZ2luVG9wOiB0aGVtZS5zcGFjaW5nKDIpLFxyXG4gICAgICAgIH0sXHJcbiAgICB9LFxyXG59KSlcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIEFsZXJ0U2hvdyhwcm9wcykge1xyXG4gICAgY29uc3QgY2xhc3NlcyA9IHVzZVN0eWxlcygpXHJcbiAgICBjb25zdCBbb3Blbiwgc2V0T3Blbl0gPSBSZWFjdC51c2VTdGF0ZShwcm9wcy5wb3B1cC5zdGF0dXMpXHJcblxyXG4gICAgcmV0dXJuIChcclxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT17Y2xhc3Nlcy5yb290fT5cclxuICAgICAgICAgICAgPENvbGxhcHNlIGluPXtwcm9wcy5wb3B1cC5zdGF0dXN9PlxyXG4gICAgICAgICAgICAgICAgPEFsZXJ0XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyaWFudD1cImZpbGxlZFwiXHJcbiAgICAgICAgICAgICAgICAgICAgc2V2ZXJpdHk9XCJzdWNjZXNzXCJcclxuICAgICAgICAgICAgICAgICAgICBhY3Rpb249e1xyXG4gICAgICAgICAgICAgICAgICAgICAgICA8SWNvbkJ1dHRvblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYXJpYS1sYWJlbD1cImNsb3NlXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yPVwiaW5oZXJpdFwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaXplPVwic21hbGxcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb25DbGljaz17KCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByb3BzLmhhbmxkZUNsb3NlQWxlcnQoZmFsc2UpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9fVxyXG4gICAgICAgICAgICAgICAgICAgICAgICA+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8Q2xvc2VJY29uIGZvbnRTaXplPVwiaW5oZXJpdFwiIC8+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvSWNvbkJ1dHRvbj5cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICA+XHJcbiAgICAgICAgICAgICAgICAgICAge3Byb3BzLnBvcHVwLnRleHR9XHJcbiAgICAgICAgICAgICAgICA8L0FsZXJ0PlxyXG4gICAgICAgICAgICA8L0NvbGxhcHNlPlxyXG4gICAgICAgIDwvZGl2PlxyXG4gICAgKVxyXG59XHJcbiIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCdcclxuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJ1xyXG5pbXBvcnQgU3dpcGVhYmxlVmlld3MgZnJvbSAncmVhY3Qtc3dpcGVhYmxlLXZpZXdzJ1xyXG5pbXBvcnQgeyBtYWtlU3R5bGVzLCB1c2VUaGVtZSB9IGZyb20gJ0BtYXRlcmlhbC11aS9jb3JlL3N0eWxlcydcclxuaW1wb3J0IHtcclxuICAgIEFwcEJhcixcclxuICAgIFRhYnMsXHJcbiAgICBUYWIsXHJcbiAgICBUeXBvZ3JhcGh5LFxyXG4gICAgUGFwZXIsXHJcbiAgICBCb3gsXHJcbiAgICBDb250YWluZXIsXHJcbiAgICBUZXh0RmllbGQsXHJcbiAgICBCdXR0b24sXHJcbn0gZnJvbSAnQG1hdGVyaWFsLXVpL2NvcmUnXHJcblxyXG5mdW5jdGlvbiBUYWJQYW5lbChwcm9wcykge1xyXG4gICAgY29uc3QgeyBjaGlsZHJlbiwgdmFsdWUsIGluZGV4LCAuLi5vdGhlciB9ID0gcHJvcHNcclxuXHJcbiAgICByZXR1cm4gKFxyXG4gICAgICAgIDxkaXZcclxuICAgICAgICAgICAgcm9sZT1cInRhYnBhbmVsXCJcclxuICAgICAgICAgICAgaGlkZGVuPXt2YWx1ZSAhPT0gaW5kZXh9XHJcbiAgICAgICAgICAgIGlkPXtgZnVsbC13aWR0aC10YWJwYW5lbC0ke2luZGV4fWB9XHJcbiAgICAgICAgICAgIGFyaWEtbGFiZWxsZWRieT17YGZ1bGwtd2lkdGgtdGFiLSR7aW5kZXh9YH1cclxuICAgICAgICAgICAgey4uLm90aGVyfVxyXG4gICAgICAgID5cclxuICAgICAgICAgICAge3ZhbHVlID09PSBpbmRleCAmJiAoXHJcbiAgICAgICAgICAgICAgICA8Qm94IHA9ezN9PlxyXG4gICAgICAgICAgICAgICAgICAgIDxUeXBvZ3JhcGh5IGNvbXBvbmVudD17J3NwYW4nfSB2YXJpYW50PXsnYm9keTInfT5cclxuICAgICAgICAgICAgICAgICAgICAgICAge2NoaWxkcmVufVxyXG4gICAgICAgICAgICAgICAgICAgIDwvVHlwb2dyYXBoeT5cclxuICAgICAgICAgICAgICAgIDwvQm94PlxyXG4gICAgICAgICAgICApfVxyXG4gICAgICAgIDwvZGl2PlxyXG4gICAgKVxyXG59XHJcblxyXG5UYWJQYW5lbC5wcm9wVHlwZXMgPSB7XHJcbiAgICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXHJcbiAgICBpbmRleDogUHJvcFR5cGVzLmFueS5pc1JlcXVpcmVkLFxyXG4gICAgdmFsdWU6IFByb3BUeXBlcy5hbnkuaXNSZXF1aXJlZCxcclxufVxyXG5cclxuZnVuY3Rpb24gYTExeVByb3BzKGluZGV4KSB7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIGlkOiBgZnVsbC13aWR0aC10YWItJHtpbmRleH1gLFxyXG4gICAgICAgICdhcmlhLWNvbnRyb2xzJzogYGZ1bGwtd2lkdGgtdGFicGFuZWwtJHtpbmRleH1gLFxyXG4gICAgfVxyXG59XHJcblxyXG5jb25zdCB1c2VTdHlsZXMgPSBtYWtlU3R5bGVzKCh0aGVtZSkgPT4gKHtcclxuICAgIHJvb3Q6IHtcclxuICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IHRoZW1lLnBhbGV0dGUuYmFja2dyb3VuZC5wYXBlcixcclxuICAgICAgICBtYXJnaW5Ub3A6ICcxcmVtJyxcclxuICAgICAgICBoZWlnaHQ6ICcxMDAlJyxcclxuICAgIH0sXHJcbiAgICBmb3JtOiB7XHJcbiAgICAgICAgJyYgLk11aVRleHRGaWVsZC1yb290Jzoge1xyXG4gICAgICAgICAgICBtYXJnaW5Cb3R0b206IHRoZW1lLnNwYWNpbmcoMSksXHJcbiAgICAgICAgICAgIHdpZHRoOiAnMTAwJScsXHJcbiAgICAgICAgfSxcclxuICAgIH0sXHJcbn0pKVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gTG9naW5QYWdlKHByb3BzKSB7XHJcbiAgICBjb25zdCBjbGFzc2VzID0gdXNlU3R5bGVzKClcclxuICAgIGNvbnN0IHRoZW1lID0gdXNlVGhlbWUoKVxyXG4gICAgY29uc3QgW3ZhbHVlLCBzZXRWYWx1ZV0gPSBSZWFjdC51c2VTdGF0ZSgwKVxyXG4gICAgY29uc3QgW2VtYWlsLCBzZXRFbWFpbF0gPSBSZWFjdC51c2VTdGF0ZSgnJylcclxuICAgIGNvbnN0IFtmaXJzdE5hbWUsIHNldEZpcnN0TmFtZV0gPSBSZWFjdC51c2VTdGF0ZSgnJylcclxuICAgIGNvbnN0IFtsYXN0TmFtZSwgc2V0TGFzdE5hbWVdID0gUmVhY3QudXNlU3RhdGUoJycpXHJcbiAgICBjb25zdCBbcGFzc3dvcmQsIHNldFBhc3N3b3JkXSA9IFJlYWN0LnVzZVN0YXRlKCcnKVxyXG4gICAgY29uc3QgW3JlUGFzc3dvcmQsIHNldFJlUGFzc3dvcmRdID0gUmVhY3QudXNlU3RhdGUoJycpXHJcblxyXG4gICAgY29uc3QgaGFuZGxlQ2hhbmdlID0gKGV2ZW50LCBuZXdWYWx1ZSkgPT4ge1xyXG4gICAgICAgIHNldFZhbHVlKG5ld1ZhbHVlKVxyXG4gICAgfVxyXG5cclxuICAgIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XHJcbiAgICAgICAgaWYgKHByb3BzLnRva2VuICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgIHByb3BzLnJlZGlyZWN0KCcvJylcclxuICAgICAgICB9XHJcbiAgICB9KVxyXG5cclxuICAgIGNvbnN0IGhhbmRsZUZpcnN0TmFtZSA9IChldmVudCkgPT4ge1xyXG4gICAgICAgIHNldEZpcnN0TmFtZShldmVudC50YXJnZXQudmFsdWUpXHJcbiAgICB9XHJcblxyXG4gICAgY29uc3QgaGFuZGxlTGFzdE5hbWUgPSAoZXZlbnQpID0+IHtcclxuICAgICAgICBzZXRMYXN0TmFtZShldmVudC50YXJnZXQudmFsdWUpXHJcbiAgICB9XHJcblxyXG4gICAgY29uc3QgaGFuZGxlRW1haWwgPSAoZXZlbnQpID0+IHtcclxuICAgICAgICBzZXRFbWFpbChldmVudC50YXJnZXQudmFsdWUpXHJcbiAgICB9XHJcblxyXG4gICAgY29uc3QgaGFuZGxlUmVQYXNzd29yZCA9IChldmVudCkgPT4ge1xyXG4gICAgICAgIHNldFJlUGFzc3dvcmQoZXZlbnQudGFyZ2V0LnZhbHVlKVxyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IGhhbmRsZVBhc3N3b3JkID0gKGV2ZW50KSA9PiB7XHJcbiAgICAgICAgc2V0UGFzc3dvcmQoZXZlbnQudGFyZ2V0LnZhbHVlKVxyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IGhhbmRsZUNoYW5nZUluZGV4ID0gKGluZGV4KSA9PiB7XHJcbiAgICAgICAgc2V0VmFsdWUoaW5kZXgpXHJcbiAgICB9XHJcblxyXG4gICAgY29uc3QgaGFuZGxlTG9naW4gPSAoKSA9PiB7XHJcbiAgICAgICAgaWYgKHBhc3N3b3JkLmxlbmd0aCA+IDAgJiYgZW1haWwubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICBwcm9wcy5oYW5kbGVMb2dpbih7IGVtYWlsLCBwYXNzd29yZCB9KVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBjb25zdCBoYW5kbGVTZW5kID0gKCkgPT4ge1xyXG4gICAgICAgIHByb3BzLmhhbmRsZVJlZ2lzdHJhdGlvbih7IGVtYWlsLCBmaXJzdE5hbWUsIGxhc3ROYW1lLCBwYXNzd29yZCB9KVxyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiAoXHJcbiAgICAgICAgPENvbnRhaW5lciBjbGFzc05hbWU9e2NsYXNzZXMucm9vdH0gbWF4V2lkdGg9XCJ4c1wiPlxyXG4gICAgICAgICAgICA8UGFwZXIgc3F1YXJlPlxyXG4gICAgICAgICAgICAgICAgPEFwcEJhciBwb3NpdGlvbj1cInN0YXRpY1wiIGNvbG9yPVwiZGVmYXVsdFwiPlxyXG4gICAgICAgICAgICAgICAgICAgIDxUYWJzXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlPXt2YWx1ZX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgb25DaGFuZ2U9e2hhbmRsZUNoYW5nZX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgaW5kaWNhdG9yQ29sb3I9XCJwcmltYXJ5XCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGV4dENvbG9yPVwicHJpbWFyeVwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhcmlhbnQ9XCJmdWxsV2lkdGhcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBhcmlhLWxhYmVsPVwiZnVsbCB3aWR0aCB0YWJzIGV4YW1wbGVcIlxyXG4gICAgICAgICAgICAgICAgICAgID5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPFRhYiBsYWJlbD1cItCQ0LLRgtC+0YDQuNC30LDRhtC40Y9cIiB7Li4uYTExeVByb3BzKDApfSAvPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8VGFiIGxhYmVsPVwi0KDQtdCz0LjRgdGC0YDQsNGG0LjRj1wiIHsuLi5hMTF5UHJvcHMoMSl9IC8+XHJcbiAgICAgICAgICAgICAgICAgICAgPC9UYWJzPlxyXG4gICAgICAgICAgICAgICAgPC9BcHBCYXI+XHJcbiAgICAgICAgICAgICAgICA8U3dpcGVhYmxlVmlld3NcclxuICAgICAgICAgICAgICAgICAgICBheGlzPXt0aGVtZS5kaXJlY3Rpb24gPT09ICdydGwnID8gJ3gtcmV2ZXJzZScgOiAneCd9XHJcbiAgICAgICAgICAgICAgICAgICAgaW5kZXg9e3ZhbHVlfVxyXG4gICAgICAgICAgICAgICAgICAgIG9uQ2hhbmdlSW5kZXg9e2hhbmRsZUNoYW5nZUluZGV4fVxyXG4gICAgICAgICAgICAgICAgPlxyXG4gICAgICAgICAgICAgICAgICAgIDxUYWJQYW5lbCB2YWx1ZT17dmFsdWV9IGluZGV4PXswfSBkaXI9e3RoZW1lLmRpcmVjdGlvbn0+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxmb3JtIGNsYXNzTmFtZT17Y2xhc3Nlcy5mb3JtfT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxUZXh0RmllbGRcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZD1cImVtYWlsXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYWJlbD1cItCb0L7Qs9C40L1cIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhcmlhbnQ9XCJvdXRsaW5lZFwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZnVsbFdpZHRoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVxdWlyZWRcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaXplPVwic21hbGxcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlPXtlbWFpbH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbkNoYW5nZT17aGFuZGxlRW1haWx9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPFRleHRGaWVsZFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkPVwicGFzc3dvcmRcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhYmVsPVwi0J/QsNGA0L7Qu9GMXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlPVwicGFzc3dvcmRcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhcmlhbnQ9XCJvdXRsaW5lZFwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZnVsbFdpZHRoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVxdWlyZWRcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaXplPVwic21hbGxcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlPXtwYXNzd29yZH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbkNoYW5nZT17aGFuZGxlUGFzc3dvcmR9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPEJ1dHRvblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhcmlhbnQ9XCJjb250YWluZWRcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yPVwicHJpbWFyeVwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZnVsbFdpZHRoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb25DbGljaz17aGFuZGxlTG9naW59XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg0JLRhdC+0LRcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvQnV0dG9uPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPEJ1dHRvblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2xpY2s9eygpID0+IHByb3BzLnJlZGlyZWN0KCcvJyl9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyaWFudD1cImNvbnRhaW5lZFwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sb3I9XCJzZWNvbmRhcnlcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgINCd0LDQt9Cw0LRcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvQnV0dG9uPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L2Zvcm0+XHJcbiAgICAgICAgICAgICAgICAgICAgPC9UYWJQYW5lbD5cclxuICAgICAgICAgICAgICAgICAgICA8VGFiUGFuZWwgdmFsdWU9e3ZhbHVlfSBpbmRleD17MX0gZGlyPXt0aGVtZS5kaXJlY3Rpb259PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8Zm9ybVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPXtjbGFzc2VzLmZvcm19XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhY3Rpb249XCIvXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1ldGhvZD1cIlBPU1RcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbm9WYWxpZGF0ZT17dHJ1ZX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPFRleHRGaWVsZFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkPVwiZmlyc3ROYW1lXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYWJlbD1cItCY0LzRj1wiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyaWFudD1cIm91dGxpbmVkXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmdWxsV2lkdGhcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXF1aXJlZFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNpemU9XCJzbWFsbFwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU9e2ZpcnN0TmFtZX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbkNoYW5nZT17aGFuZGxlRmlyc3ROYW1lfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxUZXh0RmllbGRcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZD1cImxhc3ROYW1lXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYWJlbD1cItCk0LDQvNC40LvQuNGPXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXJpYW50PVwib3V0bGluZWRcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZ1bGxXaWR0aFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlcXVpcmVkXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2l6ZT1cInNtYWxsXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZT17bGFzdE5hbWV9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb25DaGFuZ2U9e2hhbmRsZUxhc3ROYW1lfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxUZXh0RmllbGRcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZD1cImVtYWlsXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYWJlbD1cItCf0L7Rh9GC0LBcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU9XCJlbWFpbFwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyaWFudD1cIm91dGxpbmVkXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmdWxsV2lkdGhcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXF1aXJlZFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNpemU9XCJzbWFsbFwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU9e2VtYWlsfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2hhbmdlPXtoYW5kbGVFbWFpbH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8VGV4dEZpZWxkXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWQ9XCJwYXNzd29yZFwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGFiZWw9XCLQn9Cw0YDQvtC70YxcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU9XCJwYXNzd29yZFwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyaWFudD1cIm91dGxpbmVkXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmdWxsV2lkdGhcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXF1aXJlZFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNpemU9XCJzbWFsbFwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU9e3Bhc3N3b3JkfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2hhbmdlPXtoYW5kbGVQYXNzd29yZH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8VGV4dEZpZWxkXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWQ9XCJyZXBhc3N3b3JkXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYWJlbD1cItCf0L7QstGC0L7RgNC40YLRjCDQv9Cw0YDQvtC70YxcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU9XCJwYXNzd29yZFwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyaWFudD1cIm91dGxpbmVkXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmdWxsV2lkdGhcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXF1aXJlZFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNpemU9XCJzbWFsbFwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU9e3JlUGFzc3dvcmR9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb25DaGFuZ2U9e2hhbmRsZVJlUGFzc3dvcmR9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPEJ1dHRvblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhcmlhbnQ9XCJjb250YWluZWRcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yPVwicHJpbWFyeVwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZnVsbFdpZHRoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb25DbGljaz17aGFuZGxlU2VuZH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgID5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICDQoNC10LPQuNGB0YLRgNCw0YbQuNGPXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L0J1dHRvbj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxCdXR0b25cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbkNsaWNrPXsoKSA9PiBwcm9wcy5yZWRpcmVjdCgnLycpfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhcmlhbnQ9XCJjb250YWluZWRcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yPVwic2Vjb25kYXJ5XCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgID5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICDQndCw0LfQsNC0XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L0J1dHRvbj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC9mb3JtPlxyXG4gICAgICAgICAgICAgICAgICAgIDwvVGFiUGFuZWw+XHJcbiAgICAgICAgICAgICAgICA8L1N3aXBlYWJsZVZpZXdzPlxyXG4gICAgICAgICAgICA8L1BhcGVyPlxyXG4gICAgICAgIDwvQ29udGFpbmVyPlxyXG4gICAgKVxyXG59XHJcbiIsImltcG9ydCBSZWFjdCwgeyBDb21wb25lbnQsIEZyYWdtZW50IH0gZnJvbSAncmVhY3QnXHJcbmltcG9ydCB7IFN3aXRjaCwgUm91dGUsIExpbmsgfSBmcm9tICdyZWFjdC1yb3V0ZXItZG9tJ1xyXG5pbXBvcnQgeyBtYWtlU3R5bGVzIH0gZnJvbSAnQG1hdGVyaWFsLXVpL2NvcmUvc3R5bGVzJ1xyXG5pbXBvcnQgeyBDb250YWluZXIsIEJyZWFkY3J1bWJzLCBUeXBvZ3JhcGh5LCBIaWRkZW4gfSBmcm9tICdAbWF0ZXJpYWwtdWkvY29yZSdcclxuaW1wb3J0IExlc3Nvbkxpc3QgZnJvbSAnY29tcG9uZW50cy9MZXNzb25MaXN0L0xlc3Nvbkxpc3QnXHJcbmltcG9ydCBNYWluUGFnZSBmcm9tICdjb21wb25lbnRzL01haW5QYWdlL01haW5QYWdlJ1xyXG5pbXBvcnQgQ3JlYXRlTGVzc29uIGZyb20gJ2NvbXBvbmVudHMvQ3JlYXRlTGVzc29uL0NyZWF0ZUxlc3NvbidcclxuaW1wb3J0IEFzaWRlIGZyb20gJ2NvbXBvbmVudHMvQXNpZGUvQXNpZGUnXHJcbmltcG9ydCBDYXJ0IGZyb20gJ2NvbXBvbmVudHMvQ2FydC9DYXJ0J1xyXG5pbXBvcnQgQ2FiaW5ldCBmcm9tICdjb21wb25lbnRzL0NhYmluZXQvQ2FiaW5ldCdcclxuaW1wb3J0IExlc3NvbkNvbnRhaW5lciBmcm9tICdjb250YWluZXJzL0xlc3NvbkNvbnRhaW5lcidcclxuaW1wb3J0IEhlYWRlckNvbnRhaW5lciBmcm9tICdjb250YWluZXJzL0hlYWRlckNvbnRhaW5lcidcclxuaW1wb3J0IEFsZXJ0U2hvdyBmcm9tICdjb21wb25lbnRzL0FsZXJ0U2hvdy9BbGVydFNob3cnXHJcbmltcG9ydCBMb2dpblBhZ2UgZnJvbSAnY29tcG9uZW50cy9Mb2dpblBhZ2UvTG9naW5QYWdlJ1xyXG5cclxuY29uc3QgZHJhd2VyV2lkdGggPSAxNTBcclxuY29uc3QgdXNlU3R5bGVzID0gbWFrZVN0eWxlcygodGhlbWUpID0+ICh7XHJcbiAgICBtYWluOiB7XHJcbiAgICAgICAgbWFyZ2luVG9wOiA0MCxcclxuICAgICAgICAvLyBwYWRkaW5nOiAnMXJlbScsXHJcbiAgICAgICAgcG9zaXRpb246ICdyZWxhdGl2ZScsXHJcbiAgICAgICAgd2lkdGg6ICcxMDAlJyxcclxuICAgICAgICBib3hTaXppbmc6ICdib3JkZXItYm94JyxcclxuICAgICAgICBbdGhlbWUuYnJlYWtwb2ludHMudXAoJ3NtJyldOiB7XHJcbiAgICAgICAgICAgIG1hcmdpblRvcDogNjQsXHJcbiAgICAgICAgfSxcclxuICAgIH0sXHJcbiAgICBjb250YWluZXI6IHtcclxuICAgICAgICBkaXNwbGF5OiAnZmxleCcsXHJcbiAgICAgICAgLy8gaGVpZ2h0OiAnMTAwJScsXHJcbiAgICAgICAgLy8gd2lkdGg6ICcxMDAlJyxcclxuICAgIH0sXHJcblxyXG4gICAgZm9vdGVyOiB7XHJcbiAgICAgICAgcG9zaXRpb246ICdyZWxhdGl2ZScsXHJcbiAgICAgICAgaGVpZ2h0OiAnNTBweCcsXHJcbiAgICAgICAgZGlzcGxheTogJ2ZsZXgnLFxyXG4gICAgICAgIGFsaWduSXRlbXM6ICdjZW50ZXInLFxyXG4gICAgICAgIHpJbmRleDogMTUwMCxcclxuICAgICAgICB3aWR0aDogJzEwMCUnLFxyXG4gICAgICAgIFt0aGVtZS5icmVha3BvaW50cy51cCgnc20nKV06IHtcclxuICAgICAgICAgICAgJyYgcCc6IHtcclxuICAgICAgICAgICAgICAgIG1hcmdpbkxlZnQ6IGRyYXdlcldpZHRoLFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgYmFja2dyb3VuZENvbG9yOiAnI2Y1ZjVmNScsXHJcbiAgICB9LFxyXG5cclxuICAgIHNlY3Rpb25EZXNrdG9wOiB7XHJcbiAgICAgICAgZGlzcGxheTogJ25vbmUnLFxyXG4gICAgICAgIFt0aGVtZS5icmVha3BvaW50cy51cCgnc20nKV06IHtcclxuICAgICAgICAgICAgZGlzcGxheTogJ2ZsZXgnLFxyXG4gICAgICAgIH0sXHJcbiAgICB9LFxyXG4gICAgaGVscGVyOiB7fSxcclxufSkpXHJcblxyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBBcHAocHJvcHMpIHtcclxuICAgIGNvbnN0IGNsYXNzZXMgPSB1c2VTdHlsZXMoKVxyXG4gICAgY29uc3QgW3RpdGxlLCBzZXRUaXRsZV0gPSBSZWFjdC51c2VTdGF0ZSgnZUxlYXJuaW5nJylcclxuICAgIGNvbnN0IFtlcnJvciwgc2V0RXJyb3JdID0gUmVhY3QudXNlU3RhdGUobnVsbClcclxuXHJcbiAgICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xyXG4gICAgICAgIHByb3BzLmluaXRBY3Rpb24oKVxyXG4gICAgfSwgW3Byb3BzLnRva2VuXSlcclxuXHJcbiAgICAvL1JlZmFjdG9yXHJcbiAgICAvLyBoYW5kbGVBbGVydCA9ICh2YWx1ZSwgdHlwZSA9ICdpbmZvcm0nLCBpc1NlbGVjdCA9IGZhbHNlLCBtZXNzYWdlSWQpID0+IHtcclxuICAgIC8vICAgICB0aGlzLnByb3BzLmhhbmRsZVNob3dBbGVydCh7IHZhbHVlLCB0eXBlLCBpc1NlbGVjdCwgbWVzc2FnZUlkIH0pXHJcbiAgICAvLyB9XHJcblxyXG4gICAgcmV0dXJuIChcclxuICAgICAgICA8RnJhZ21lbnQ+XHJcbiAgICAgICAgICAgIDxIZWFkZXJDb250YWluZXIgdGl0bGU9e3RpdGxlfSAvPlxyXG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT17Y2xhc3Nlcy5jb250YWluZXJ9PlxyXG4gICAgICAgICAgICAgICAge3Byb3BzLm1vYmlsZURyYXdlciA/IChcclxuICAgICAgICAgICAgICAgICAgICA8QXNpZGVcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVkaXJlY3Q9e3Byb3BzLnJlZGlyZWN0fVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBoYW5kbGVNb2JpbGVEcmF3ZXJPcGVuPXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByb3BzLm1vYmlsZURyYXdlclN0YXRlU2V0QWN0aW9uXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgbW9iaWxlRHJhd2VyPXtwcm9wcy5tb2JpbGVEcmF3ZXJ9XHJcbiAgICAgICAgICAgICAgICAgICAgLz5cclxuICAgICAgICAgICAgICAgICkgOiBudWxsfVxyXG4gICAgICAgICAgICAgICAgPG1haW4gY2xhc3NOYW1lPXtjbGFzc2VzLm1haW59PlxyXG4gICAgICAgICAgICAgICAgICAgIHsvKiA8QnJlYWRjcnVtYnMgYXJpYS1sYWJlbD1cImJyZWFkY3J1bWJcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPExpbmsgdG89XCIvXCIgcmVwbGFjZT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxUeXBvZ3JhcGh5IGNvbG9yPVwidGV4dFByaW1hcnlcIj4g0JPQu9Cw0LLQvdCw0Y8gPC9UeXBvZ3JhcGh5PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L0xpbms+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxUeXBvZ3JhcGh5IGNvbG9yPVwidGV4dFByaW1hcnlcIj5CcmVhZGNydW1iPC9UeXBvZ3JhcGh5PlxyXG4gICAgICAgICAgICAgICAgICAgIDwvQnJlYWRjcnVtYnM+ICovfVxyXG4gICAgICAgICAgICAgICAgICAgIHsvKiA8Q29udGFpbmVyIG1heFdpZHRoPVwieGxcIiBzdHlsZT17eyBwYWRkaW5nQm90dG9tOiAnMnJlbScgfX0+ICovfVxyXG4gICAgICAgICAgICAgICAgICAgIDxTd2l0Y2g+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxSb3V0ZSBwYXRoPVwiL1wiIGV4YWN0PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPE1haW5QYWdlIC8+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvUm91dGU+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxSb3V0ZSBwYXRoPVwiL2xlc3NvbnNcIiBleGFjdD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxMZXNzb25MaXN0XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvZmlsZT17cHJvcHMucHJvZmlsZX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWRpcmVjdD17cHJvcHMucmVkaXJlY3R9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaGFuZGxlQ2FydEFkZD17cHJvcHMuY2FydEFkZEFjdGlvbn1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXNzb25zTGlzdD17cHJvcHMubGVzc29uc0xpc3R9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaGFuZGxlRGVsZXRlSXRlbT17cHJvcHMuZGVsZXRlTGVzb25BY3Rpb259XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaGFuZGxlU2VsZWN0TGVzc29uPXtwcm9wcy5zZWxlY3RMZXNzb25BY3Rpb259XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L1JvdXRlPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8Um91dGUgcGF0aD1cIi9sb2dpblwiIGV4YWN0PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPExvZ2luUGFnZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhhbmRsZVJlZ2lzdHJhdGlvbj17cHJvcHMucmVnaXN0cmF0aW9uQWN0aW9ufVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlZGlyZWN0PXtwcm9wcy5yZWRpcmVjdH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b2tlbj17cHJvcHMudG9rZW59XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaGFuZGxlTG9naW49e3Byb3BzLmxvZ2luQWN0aW9ufVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC9Sb3V0ZT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPFJvdXRlIHBhdGg9XCIvbGVzc29uLzppZFwiIGV4YWN0PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPExlc3NvbkNvbnRhaW5lciAvPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L1JvdXRlPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8Um91dGUgcGF0aD1cIi9jcmVhdGVMZXNzb25cIiBleGFjdD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxDcmVhdGVMZXNzb25cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBoYW5kbGVDcmVhdGVMZXNzb249e3Byb3BzLmhhbmRsZUNyZWF0ZUxlc3Nvbn1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWRpcmVjdD17cHJvcHMucmVkaXJlY3R9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L1JvdXRlPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8Um91dGUgcGF0aD1cIi9jYWJpbmV0XCIgZXhhY3Q+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8Q2FiaW5ldCBwcm9maWxlPXtwcm9wcy5wcm9maWxlfSAvPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L1JvdXRlPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8Um91dGUgcGF0aD1cIi9jYXJ0XCIgZXhhY3Q+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8Q2FydFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhcnQ9e3Byb3BzLmNhcnR9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaGFuZGxlQ2FydFBsdXNJdGVtPXtwcm9wcy5jYXJ0UGx1c0l0ZW1BY3Rpb259XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaGFuZGxlQ2FydE1pbnVzSXRlbT17cHJvcHMuY2FydE1pbnVzSXRlbUFjdGlvbn1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBoYW5kbGVDYXJ0UmVtb3ZlSXRlbT17cHJvcHMuY2FydFJlbW92ZUFjdGlvbn1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBoYW5sZGVDYXJ0RGVsZXRlPXtwcm9wcy5jYXJ0RGVsZXRlQWN0aW9ufVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC9Sb3V0ZT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPFJvdXRlIHBhdGg9XCIqXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDI+RXJyb3I8L2gyPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L1JvdXRlPlxyXG4gICAgICAgICAgICAgICAgICAgIDwvU3dpdGNoPlxyXG4gICAgICAgICAgICAgICAgICAgIDxBbGVydFNob3dcclxuICAgICAgICAgICAgICAgICAgICAgICAgcG9wdXA9e3Byb3BzLnBvcHVwfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBoYW5sZGVDbG9zZUFsZXJ0PXtwcm9wcy5hbGVydENsb3NlSW5mb3JtQWN0aW9ufVxyXG4gICAgICAgICAgICAgICAgICAgIC8+XHJcbiAgICAgICAgICAgICAgICAgICAgey8qIDwvQ29udGFpbmVyPiAqL31cclxuICAgICAgICAgICAgICAgIDwvbWFpbj5cclxuICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgIHsvKiA8SGlkZGVuIHhzRG93bj5cclxuICAgICAgICAgICAgICAgIDxmb290ZXIgY2xhc3NOYW1lPXsgY2xhc3Nlcy5mb290ZXIgfT5cclxuICAgICAgICAgICAgICAgICAgICA8Q29udGFpbmVyIGZ1bGxXaWR0aD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPFR5cG9ncmFwaHkgIHZhcmlhbnQ9XCJib2R5MVwiIGFsaWduPVwiY2VudGVyXCI+0JnQsCDQvdCw0LTQv9C40YHRjCDQsiDRhNGD0YLQsNGA0LU8L1R5cG9ncmFwaHk+XHJcbiAgICAgICAgICAgICAgICAgICAgPC9Db250YWluZXI+XHJcbiAgICAgICAgICAgICAgICA8L2Zvb3Rlcj5cclxuICAgICAgICAgICAgPC9IaWRkZW4+ICovfVxyXG4gICAgICAgIDwvRnJhZ21lbnQ+XHJcbiAgICApXHJcbn1cclxuIiwiZXhwb3J0IGNvbnN0IEFMRVJUX0xPQUQgPSAnQUxFUlRfTE9BRCdcclxuZXhwb3J0IGNvbnN0IEFMRVJUX1NFTkQgPSAnQUxFUlRfU0VORCdcclxuZXhwb3J0IGNvbnN0IEFMRVJUX0NMT1NFX0lORk9STSA9ICdBTEVSVF9DTE9TRV9JTkZPUk0nXHJcbmV4cG9ydCBjb25zdCBBTEVSVF9TRU5EX0lORk9STSA9ICdBTEVSVF9BRERfSU5GT1JNJ1xyXG5leHBvcnQgY29uc3QgQUxFUlRfQ0xPU0UgPSAnQUxFUlRfQ0xPU0UnXHJcblxyXG5leHBvcnQgY29uc3QgYWxlcnRMb2FkQWN0aW9uID0gKCkgPT4gKHtcclxuICAgIHR5cGU6IEFMRVJUX0xPQUQsXHJcbn0pXHJcblxyXG5leHBvcnQgY29uc3QgYWxlcnRTZW5kQWN0aW9uID0gKG1lc3NhZ2UpID0+ICh7XHJcbiAgICB0eXBlOiBBTEVSVF9TRU5ELFxyXG4gICAgcGF5bG9hZDogbWVzc2FnZSxcclxufSlcclxuXHJcbmV4cG9ydCBjb25zdCBhbGVydENsb3NlSW5mb3JtQWN0aW9uID0gKHZhbHVlKSA9PiAoe1xyXG4gICAgdHlwZTogQUxFUlRfQ0xPU0VfSU5GT1JNLFxyXG4gICAgcGF5bG9hZDogdmFsdWUsXHJcbn0pXHJcblxyXG5leHBvcnQgY29uc3QgYWxlcnRTZW5kSW5mb3JtQWN0aW9uID0gKG1lc3NhZ2UpID0+ICh7XHJcbiAgICB0eXBlOiBBTEVSVF9TRU5EX0lORk9STSxcclxuICAgIHBheWxvYWQ6IG1lc3NhZ2UsXHJcbn0pXHJcblxyXG5leHBvcnQgY29uc3QgYWxlcnRDbG9zZUFjdGlvbiA9ICh2YWx1ZSkgPT4gKHtcclxuICAgIHR5cGU6IEFMRVJUX0NMT1NFLFxyXG4gICAgcGF5bG9hZDogdmFsdWUsXHJcbn0pXHJcbiIsImltcG9ydCB7IGNvbm5lY3QgfSBmcm9tICdyZWFjdC1yZWR1eCdcclxuaW1wb3J0IHsgcHVzaCB9IGZyb20gJ2Nvbm5lY3RlZC1yZWFjdC1yb3V0ZXInXHJcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcydcclxuaW1wb3J0IEFwcCBmcm9tICdjb21wb25lbnRzL0FwcC9BcHAnXHJcbmltcG9ydCB7XHJcbiAgICBhbGVydExvYWRBY3Rpb24sXHJcbiAgICBhbGVydENsb3NlSW5mb3JtQWN0aW9uLFxyXG4gICAgYWxlcnRTZW5kSW5mb3JtQWN0aW9uLFxyXG59IGZyb20gJ2FjdGlvbnMvYWxlcnRzJ1xyXG5pbXBvcnQge1xyXG4gICAgcHJvZmlsZUxvYWRBY3Rpb24sXHJcbiAgICBwcm9maWxlQ2hhbmdlTmFtZUFjdGlvbixcclxuICAgIHJlZ2lzdHJhdGlvbkFjdGlvbixcclxuICAgIGxvZ291dEFjdGlvbixcclxuICAgIGxvZ2luQWN0aW9uLFxyXG59IGZyb20gJ2FjdGlvbnMvcHJvZmlsZSdcclxuaW1wb3J0IHtcclxuICAgIGxlc3NvbnNMb2FkQWN0aW9uLFxyXG4gICAgc2VsZWN0TGVzc29uQWN0aW9uLFxyXG4gICAgY3JlYXRlTGVzc29uQWN0aW9uLFxyXG4gICAgZGVsZXRlTGVzb25BY3Rpb24sXHJcbn0gZnJvbSAnYWN0aW9ucy9sZXNzb25zJ1xyXG5pbXBvcnQge1xyXG4gICAgbW9iaWxlRHJhd2VyU3RhdGVMb2FkQWN0aW9uLFxyXG4gICAgbW9iaWxlRHJhd2VyU3RhdGVTZXRBY3Rpb24sXHJcbn0gZnJvbSAnYWN0aW9ucy9oZWFkZXInXHJcbmltcG9ydCB7XHJcbiAgICBjYXJ0TG9hZEFjdGlvbixcclxuICAgIGNhcnRBZGRBY3Rpb24sXHJcbiAgICBjYXJ0RGVsZXRlQWN0aW9uLFxyXG4gICAgY2FydFJlbW92ZUFjdGlvbixcclxufSBmcm9tICdhY3Rpb25zL2NhcnQnXHJcbmltcG9ydCB7IGluaXRBY3Rpb24gfSBmcm9tICdhY3Rpb25zL2luaXQnXHJcblxyXG4vLyBoYW5kbGVTaG93QWxlcnQgPSAodmFsdWUsIHR5cGUgPSAnaW5mb3JtJywgaXNTZWxlY3QgPSBmYWxzZSwgbWVzc2FnZUlkKSA9PiB7XHJcbi8vICAgICB0aGlzLnByb3BzLmFsZXJ0U2VuZEluZm9ybUFjdGlvbih2YWx1ZSwgdHlwZSwgaXNTZWxlY3QsIG1lc3NhZ2VJZClcclxuLy8gfVxyXG5cclxuLy8gaGFuZGxlQ2xvc2VBbGVydCA9ICh2YWx1ZSkgPT4ge1xyXG4vLyAgICAgdGhpcy5wcm9wcy5hbGVydENsb3NlSW5mb3JtQWN0aW9uKHZhbHVlKVxyXG4vLyB9XHJcblxyXG5jb25zdCBtYXBTdGF0ZVRvUHJvcHMgPSAoc3RhdGUpID0+IHtcclxuICAgIGNvbnN0IHsgcG9wdXAgfSA9IHN0YXRlLmFsZXJ0XHJcbiAgICBjb25zdCB7IG1vYmlsZURyYXdlciB9ID0gc3RhdGUuaGVhZGVyXHJcbiAgICBjb25zdCB7IHByb2ZpbGUsIHRva2VuIH0gPSBzdGF0ZS5wcm9maWxlXHJcbiAgICBjb25zdCB7IGxlc3NvbnNMaXN0LCBsZXNzb25JZCB9ID0gc3RhdGUubGVzc29uc1xyXG4gICAgY29uc3QgeyBjYXJ0IH0gPSBzdGF0ZS5jYXJ0XHJcblxyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICBwb3B1cCxcclxuICAgICAgICBtb2JpbGVEcmF3ZXIsXHJcbiAgICAgICAgcHJvZmlsZSxcclxuICAgICAgICBsZXNzb25zTGlzdCxcclxuICAgICAgICBsZXNzb25JZCxcclxuICAgICAgICBjYXJ0LFxyXG4gICAgICAgIHRva2VuLFxyXG4gICAgfVxyXG59XHJcblxyXG5jb25zdCBtYXBEaXNwYXRjaFRvUHJvcHMgPSB7XHJcbiAgICBwcm9maWxlTG9hZEFjdGlvbixcclxuICAgIHByb2ZpbGVDaGFuZ2VOYW1lQWN0aW9uLFxyXG4gICAgcmVnaXN0cmF0aW9uQWN0aW9uLFxyXG4gICAgYWxlcnRMb2FkQWN0aW9uLFxyXG4gICAgYWxlcnRDbG9zZUluZm9ybUFjdGlvbixcclxuICAgIGFsZXJ0U2VuZEluZm9ybUFjdGlvbixcclxuICAgIGxlc3NvbnNMb2FkQWN0aW9uLFxyXG4gICAgc2VsZWN0TGVzc29uQWN0aW9uLFxyXG4gICAgY3JlYXRlTGVzc29uQWN0aW9uLFxyXG4gICAgZGVsZXRlTGVzb25BY3Rpb24sXHJcbiAgICBsb2dvdXRBY3Rpb24sXHJcbiAgICBsb2dpbkFjdGlvbixcclxuICAgIHJlZGlyZWN0OiBwdXNoLFxyXG4gICAgbW9iaWxlRHJhd2VyU3RhdGVMb2FkQWN0aW9uLFxyXG4gICAgbW9iaWxlRHJhd2VyU3RhdGVTZXRBY3Rpb24sXHJcbiAgICBjYXJ0TG9hZEFjdGlvbixcclxuICAgIGNhcnREZWxldGVBY3Rpb24sXHJcbiAgICBjYXJ0QWRkQWN0aW9uLFxyXG4gICAgY2FydFJlbW92ZUFjdGlvbixcclxuICAgIGluaXRBY3Rpb24sXHJcbn1cclxuXHJcbmNvbm5lY3QuUHJvcFR5cGVzID0ge1xyXG4gICAgaW5pdEFjdGlvbjogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcclxufVxyXG5cclxuY29uc3QgbWVyZ2VQcm9wcyA9IChzdGF0ZVByb3BzLCBkaXNwYXRjaFByb3BzLCBvd25Qcm9wcykgPT4ge1xyXG4gICAgY29uc3QgeyBwcm9maWxlIH0gPSBzdGF0ZVByb3BzXHJcblxyXG4gICAgY29uc3QgaGFuZGxlQ3JlYXRlTGVzc29uID0gKGRhdGEpID0+IHtcclxuICAgICAgICBkaXNwYXRjaFByb3BzLmNyZWF0ZUxlc3NvbkFjdGlvbih7IGF1dGhvcjogcHJvZmlsZSwgZGF0YTogZGF0YSB9KVxyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgLi4uc3RhdGVQcm9wcyxcclxuICAgICAgICAuLi5kaXNwYXRjaFByb3BzLFxyXG4gICAgICAgIGhhbmRsZUNyZWF0ZUxlc3NvbixcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgY29ubmVjdChtYXBTdGF0ZVRvUHJvcHMsIG1hcERpc3BhdGNoVG9Qcm9wcywgbWVyZ2VQcm9wcykoQXBwKVxyXG4iLCJleHBvcnQgY29uc3QgQ0FSVF9MT0FEID0gJ0NBUlRfTE9BRCdcclxuZXhwb3J0IGNvbnN0IENBUlRfQUREID0gJ0NBUlRfQUREJ1xyXG5leHBvcnQgY29uc3QgQ0FSVF9SRU1PVkUgPSAnQ0FSVF9SRU1PVkUnXHJcbmV4cG9ydCBjb25zdCBDQVJUX0RFTEVURSA9ICdDQVJUX0RFTEVURSdcclxuXHJcbmV4cG9ydCBjb25zdCBjYXJ0TG9hZEFjdGlvbiA9ICgpID0+ICh7XHJcbiAgICB0eXBlOiBDQVJUX0xPQUQsXHJcbn0pXHJcblxyXG5leHBvcnQgY29uc3QgY2FydEFkZEFjdGlvbiA9IChkYXRhKSA9PiAoe1xyXG4gICAgdHlwZTogQ0FSVF9BREQsXHJcbiAgICBwYXlsb2FkOiBkYXRhLFxyXG59KVxyXG5cclxuZXhwb3J0IGNvbnN0IGNhcnRSZW1vdmVBY3Rpb24gPSAoaXRlbUlkKSA9PiAoe1xyXG4gICAgdHlwZTogQ0FSVF9SRU1PVkUsXHJcbiAgICBwYXlsb2FkOiBpdGVtSWQsXHJcbn0pXHJcblxyXG5leHBvcnQgY29uc3QgY2FydERlbGV0ZUFjdGlvbiA9ICgpID0+ICh7XHJcbiAgICB0eXBlOiBDQVJUX0RFTEVURSxcclxufSlcclxuIiwiZXhwb3J0IGNvbnN0IElOSVQgPSAnSU5JVCdcclxuXHJcbmV4cG9ydCBjb25zdCBpbml0QWN0aW9uID0gKCkgPT4gKHtcclxuICAgIHR5cGU6IElOSVQsXHJcbn0pXHJcbiIsImZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IGlmICh0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIikgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH07IH0gZWxzZSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajsgfTsgfSByZXR1cm4gX3R5cGVvZihvYmopOyB9XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH1cblxuZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoY2FsbCAmJiAoX3R5cGVvZihjYWxsKSA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSkgeyByZXR1cm4gY2FsbDsgfSByZXR1cm4gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKTsgfVxuXG5mdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2YobykgeyBfZ2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3QuZ2V0UHJvdG90eXBlT2YgOiBmdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2YobykgeyByZXR1cm4gby5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKG8pOyB9OyByZXR1cm4gX2dldFByb3RvdHlwZU9mKG8pOyB9XG5cbmZ1bmN0aW9uIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZikgeyBpZiAoc2VsZiA9PT0gdm9pZCAwKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb25cIik7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgX3NldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKTsgfVxuXG5mdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkgeyBfc2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHwgZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHsgby5fX3Byb3RvX18gPSBwOyByZXR1cm4gbzsgfTsgcmV0dXJuIF9zZXRQcm90b3R5cGVPZihvLCBwKTsgfVxuXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7IGlmIChrZXkgaW4gb2JqKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgeyB2YWx1ZTogdmFsdWUsIGVudW1lcmFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSwgd3JpdGFibGU6IHRydWUgfSk7IH0gZWxzZSB7IG9ialtrZXldID0gdmFsdWU7IH0gcmV0dXJuIG9iajsgfVxuXG5pbXBvcnQgUmVhY3QsIHsgUHVyZUNvbXBvbmVudCB9IGZyb20gJ3JlYWN0JzsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBpbXBvcnQvbm8tdW5yZXNvbHZlZFxuXG5leHBvcnQgdmFyIFBlcnNpc3RHYXRlID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfUHVyZUNvbXBvbmVudCkge1xuICBfaW5oZXJpdHMoUGVyc2lzdEdhdGUsIF9QdXJlQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBQZXJzaXN0R2F0ZSgpIHtcbiAgICB2YXIgX2dldFByb3RvdHlwZU9mMjtcblxuICAgIHZhciBfdGhpcztcblxuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBQZXJzaXN0R2F0ZSk7XG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCAoX2dldFByb3RvdHlwZU9mMiA9IF9nZXRQcm90b3R5cGVPZihQZXJzaXN0R2F0ZSkpLmNhbGwuYXBwbHkoX2dldFByb3RvdHlwZU9mMiwgW3RoaXNdLmNvbmNhdChhcmdzKSkpO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcInN0YXRlXCIsIHtcbiAgICAgIGJvb3RzdHJhcHBlZDogZmFsc2VcbiAgICB9KTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJfdW5zdWJzY3JpYmVcIiwgdm9pZCAwKTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJoYW5kbGVQZXJzaXN0b3JTdGF0ZVwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgcGVyc2lzdG9yID0gX3RoaXMucHJvcHMucGVyc2lzdG9yO1xuXG4gICAgICB2YXIgX3BlcnNpc3RvciRnZXRTdGF0ZSA9IHBlcnNpc3Rvci5nZXRTdGF0ZSgpLFxuICAgICAgICAgIGJvb3RzdHJhcHBlZCA9IF9wZXJzaXN0b3IkZ2V0U3RhdGUuYm9vdHN0cmFwcGVkO1xuXG4gICAgICBpZiAoYm9vdHN0cmFwcGVkKSB7XG4gICAgICAgIGlmIChfdGhpcy5wcm9wcy5vbkJlZm9yZUxpZnQpIHtcbiAgICAgICAgICBQcm9taXNlLnJlc29sdmUoX3RoaXMucHJvcHMub25CZWZvcmVMaWZ0KCkpLmZpbmFsbHkoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIF90aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICAgICAgYm9vdHN0cmFwcGVkOiB0cnVlXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBfdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgICBib290c3RyYXBwZWQ6IHRydWVcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIF90aGlzLl91bnN1YnNjcmliZSAmJiBfdGhpcy5fdW5zdWJzY3JpYmUoKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhQZXJzaXN0R2F0ZSwgW3tcbiAgICBrZXk6IFwiY29tcG9uZW50RGlkTW91bnRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgICB0aGlzLl91bnN1YnNjcmliZSA9IHRoaXMucHJvcHMucGVyc2lzdG9yLnN1YnNjcmliZSh0aGlzLmhhbmRsZVBlcnNpc3RvclN0YXRlKTtcbiAgICAgIHRoaXMuaGFuZGxlUGVyc2lzdG9yU3RhdGUoKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiY29tcG9uZW50V2lsbFVubW91bnRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgICB0aGlzLl91bnN1YnNjcmliZSAmJiB0aGlzLl91bnN1YnNjcmliZSgpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJyZW5kZXJcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgaWYgKHR5cGVvZiB0aGlzLnByb3BzLmNoaWxkcmVuID09PSAnZnVuY3Rpb24nICYmIHRoaXMucHJvcHMubG9hZGluZykgY29uc29sZS5lcnJvcigncmVkdXgtcGVyc2lzdDogUGVyc2lzdEdhdGUgZXhwZWN0cyBlaXRoZXIgYSBmdW5jdGlvbiBjaGlsZCBvciBsb2FkaW5nIHByb3AsIGJ1dCBub3QgYm90aC4gVGhlIGxvYWRpbmcgcHJvcCB3aWxsIGJlIGlnbm9yZWQuJyk7XG4gICAgICB9XG5cbiAgICAgIGlmICh0eXBlb2YgdGhpcy5wcm9wcy5jaGlsZHJlbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICByZXR1cm4gdGhpcy5wcm9wcy5jaGlsZHJlbih0aGlzLnN0YXRlLmJvb3RzdHJhcHBlZCk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzLnN0YXRlLmJvb3RzdHJhcHBlZCA/IHRoaXMucHJvcHMuY2hpbGRyZW4gOiB0aGlzLnByb3BzLmxvYWRpbmc7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIFBlcnNpc3RHYXRlO1xufShQdXJlQ29tcG9uZW50KTtcblxuX2RlZmluZVByb3BlcnR5KFBlcnNpc3RHYXRlLCBcImRlZmF1bHRQcm9wc1wiLCB7XG4gIGNoaWxkcmVuOiBudWxsLFxuICBsb2FkaW5nOiBudWxsXG59KTsiLCJmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyBcIkBiYWJlbC9oZWxwZXJzIC0gdHlwZW9mXCI7IGlmICh0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIikgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH07IH0gZWxzZSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajsgfTsgfSByZXR1cm4gX3R5cGVvZihvYmopOyB9XG5cbmltcG9ydCB7IG1hdGNoUGF0aCB9IGZyb20gXCJyZWFjdC1yb3V0ZXJcIjtcblxudmFyIGNyZWF0ZVNlbGVjdG9ycyA9IGZ1bmN0aW9uIGNyZWF0ZVNlbGVjdG9ycyhzdHJ1Y3R1cmUpIHtcbiAgdmFyIGdldEluID0gc3RydWN0dXJlLmdldEluLFxuICAgICAgdG9KUyA9IHN0cnVjdHVyZS50b0pTO1xuXG4gIHZhciBpc1JvdXRlciA9IGZ1bmN0aW9uIGlzUm91dGVyKHZhbHVlKSB7XG4gICAgcmV0dXJuIHZhbHVlICE9IG51bGwgJiYgX3R5cGVvZih2YWx1ZSkgPT09ICdvYmplY3QnICYmIGdldEluKHZhbHVlLCBbJ2xvY2F0aW9uJ10pICYmIGdldEluKHZhbHVlLCBbJ2FjdGlvbiddKTtcbiAgfTtcblxuICB2YXIgZ2V0Um91dGVyID0gZnVuY3Rpb24gZ2V0Um91dGVyKHN0YXRlKSB7XG4gICAgdmFyIHJvdXRlciA9IHRvSlMoZ2V0SW4oc3RhdGUsIFsncm91dGVyJ10pKTtcblxuICAgIGlmICghaXNSb3V0ZXIocm91dGVyKSkge1xuICAgICAgdGhyb3cgJ0NvdWxkIG5vdCBmaW5kIHJvdXRlciByZWR1Y2VyIGluIHN0YXRlIHRyZWUsIGl0IG11c3QgYmUgbW91bnRlZCB1bmRlciBcInJvdXRlclwiJztcbiAgICB9XG5cbiAgICByZXR1cm4gcm91dGVyO1xuICB9O1xuXG4gIHZhciBnZXRMb2NhdGlvbiA9IGZ1bmN0aW9uIGdldExvY2F0aW9uKHN0YXRlKSB7XG4gICAgcmV0dXJuIHRvSlMoZ2V0SW4oZ2V0Um91dGVyKHN0YXRlKSwgWydsb2NhdGlvbiddKSk7XG4gIH07XG5cbiAgdmFyIGdldEFjdGlvbiA9IGZ1bmN0aW9uIGdldEFjdGlvbihzdGF0ZSkge1xuICAgIHJldHVybiB0b0pTKGdldEluKGdldFJvdXRlcihzdGF0ZSksIFsnYWN0aW9uJ10pKTtcbiAgfTtcblxuICB2YXIgZ2V0U2VhcmNoID0gZnVuY3Rpb24gZ2V0U2VhcmNoKHN0YXRlKSB7XG4gICAgcmV0dXJuIHRvSlMoZ2V0SW4oZ2V0Um91dGVyKHN0YXRlKSwgWydsb2NhdGlvbicsICdzZWFyY2gnXSkpO1xuICB9O1xuXG4gIHZhciBnZXRIYXNoID0gZnVuY3Rpb24gZ2V0SGFzaChzdGF0ZSkge1xuICAgIHJldHVybiB0b0pTKGdldEluKGdldFJvdXRlcihzdGF0ZSksIFsnbG9jYXRpb24nLCAnaGFzaCddKSk7XG4gIH07IC8vIEl0IG9ubHkgbWFrZXMgc2Vuc2UgdG8gcmVjYWxjdWxhdGUgdGhlIGBtYXRjaFBhdGhgIHdoZW5ldmVyIHRoZSBwYXRobmFtZVxuICAvLyBvZiB0aGUgbG9jYXRpb24gY2hhbmdlcy4gVGhhdCdzIHdoeSBgY3JlYXRlTWF0Y2hTZWxlY3RvcmAgbWVtb2l6ZXNcbiAgLy8gdGhlIGxhdGVzdCByZXN1bHQgYmFzZWQgb24gdGhlIGxvY2F0aW9uJ3MgcGF0aG5hbWUuXG5cblxuICB2YXIgY3JlYXRlTWF0Y2hTZWxlY3RvciA9IGZ1bmN0aW9uIGNyZWF0ZU1hdGNoU2VsZWN0b3IocGF0aCkge1xuICAgIHZhciBsYXN0UGF0aG5hbWUgPSBudWxsO1xuICAgIHZhciBsYXN0TWF0Y2ggPSBudWxsO1xuICAgIHJldHVybiBmdW5jdGlvbiAoc3RhdGUpIHtcbiAgICAgIHZhciBfcmVmID0gZ2V0TG9jYXRpb24oc3RhdGUpIHx8IHt9LFxuICAgICAgICAgIHBhdGhuYW1lID0gX3JlZi5wYXRobmFtZTtcblxuICAgICAgaWYgKHBhdGhuYW1lID09PSBsYXN0UGF0aG5hbWUpIHtcbiAgICAgICAgcmV0dXJuIGxhc3RNYXRjaDtcbiAgICAgIH1cblxuICAgICAgbGFzdFBhdGhuYW1lID0gcGF0aG5hbWU7XG4gICAgICB2YXIgbWF0Y2ggPSBtYXRjaFBhdGgocGF0aG5hbWUsIHBhdGgpO1xuXG4gICAgICBpZiAoIW1hdGNoIHx8ICFsYXN0TWF0Y2ggfHwgbWF0Y2gudXJsICE9PSBsYXN0TWF0Y2gudXJsIC8vIFdoZW4gVVJMIG1hdGNoZWQgZm9yIG5lc3RlZCByb3V0ZXMsIFVSTCBpcyB0aGUgc2FtZSBidXQgaXNFeGFjdCBpcyBub3QuXG4gICAgICB8fCBtYXRjaC5pc0V4YWN0ICE9PSBsYXN0TWF0Y2guaXNFeGFjdCkge1xuICAgICAgICBsYXN0TWF0Y2ggPSBtYXRjaDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGxhc3RNYXRjaDtcbiAgICB9O1xuICB9O1xuXG4gIHJldHVybiB7XG4gICAgZ2V0TG9jYXRpb246IGdldExvY2F0aW9uLFxuICAgIGdldEFjdGlvbjogZ2V0QWN0aW9uLFxuICAgIGdldFJvdXRlcjogZ2V0Um91dGVyLFxuICAgIGdldFNlYXJjaDogZ2V0U2VhcmNoLFxuICAgIGdldEhhc2g6IGdldEhhc2gsXG4gICAgY3JlYXRlTWF0Y2hTZWxlY3RvcjogY3JlYXRlTWF0Y2hTZWxlY3RvclxuICB9O1xufTtcblxuZXhwb3J0IGRlZmF1bHQgY3JlYXRlU2VsZWN0b3JzOyIsImZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IFwiQGJhYmVsL2hlbHBlcnMgLSB0eXBlb2ZcIjsgaWYgKHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiKSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfTsgfSBlbHNlIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9OyB9IHJldHVybiBfdHlwZW9mKG9iaik7IH1cblxuZnVuY3Rpb24gX2V4dGVuZHMoKSB7IF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTsgcmV0dXJuIF9leHRlbmRzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7IH1cblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfVxuXG5mdW5jdGlvbiBfY3JlYXRlQ2xhc3MoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmIChjYWxsICYmIChfdHlwZW9mKGNhbGwpID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpKSB7IHJldHVybiBjYWxsOyB9IHJldHVybiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpOyB9XG5cbmZ1bmN0aW9uIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZikgeyBpZiAoc2VsZiA9PT0gdm9pZCAwKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gc2VsZjsgfVxuXG5mdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2YobykgeyBfZ2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3QuZ2V0UHJvdG90eXBlT2YgOiBmdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2YobykgeyByZXR1cm4gby5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKG8pOyB9OyByZXR1cm4gX2dldFByb3RvdHlwZU9mKG8pOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvblwiKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBfc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpOyB9XG5cbmZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7IF9zZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fCBmdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkgeyBvLl9fcHJvdG9fXyA9IHA7IHJldHVybiBvOyB9OyByZXR1cm4gX3NldFByb3RvdHlwZU9mKG8sIHApOyB9XG5cbmltcG9ydCBSZWFjdCwgeyBQdXJlQ29tcG9uZW50IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCB7IGNvbm5lY3QsIFJlYWN0UmVkdXhDb250ZXh0IH0gZnJvbSAncmVhY3QtcmVkdXgnO1xuaW1wb3J0IHsgUm91dGVyIH0gZnJvbSAncmVhY3Qtcm91dGVyJztcbmltcG9ydCB7IG9uTG9jYXRpb25DaGFuZ2VkIGFzIF9vbkxvY2F0aW9uQ2hhbmdlZCB9IGZyb20gJy4vYWN0aW9ucyc7XG5pbXBvcnQgY3JlYXRlU2VsZWN0b3JzIGZyb20gJy4vc2VsZWN0b3JzJztcblxudmFyIGNyZWF0ZUNvbm5lY3RlZFJvdXRlciA9IGZ1bmN0aW9uIGNyZWF0ZUNvbm5lY3RlZFJvdXRlcihzdHJ1Y3R1cmUpIHtcbiAgdmFyIF9jcmVhdGVTZWxlY3RvcnMgPSBjcmVhdGVTZWxlY3RvcnMoc3RydWN0dXJlKSxcbiAgICAgIGdldExvY2F0aW9uID0gX2NyZWF0ZVNlbGVjdG9ycy5nZXRMb2NhdGlvbjtcbiAgLypcbiAgICogQ29ubmVjdGVkUm91dGVyIGxpc3RlbnMgdG8gYSBoaXN0b3J5IG9iamVjdCBwYXNzZWQgZnJvbSBwcm9wcy5cbiAgICogV2hlbiBoaXN0b3J5IGlzIGNoYW5nZWQsIGl0IGRpc3BhdGNoZXMgYWN0aW9uIHRvIHJlZHV4IHN0b3JlLlxuICAgKiBUaGVuLCBzdG9yZSB3aWxsIHBhc3MgcHJvcHMgdG8gY29tcG9uZW50IHRvIHJlbmRlci5cbiAgICogVGhpcyBjcmVhdGVzIHVuaS1kaXJlY3Rpb25hbCBmbG93IGZyb20gaGlzdG9yeS0+c3RvcmUtPnJvdXRlci0+Y29tcG9uZW50cy5cbiAgICovXG5cblxuICB2YXIgQ29ubmVjdGVkUm91dGVyID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfUHVyZUNvbXBvbmVudCkge1xuICAgIF9pbmhlcml0cyhDb25uZWN0ZWRSb3V0ZXIsIF9QdXJlQ29tcG9uZW50KTtcblxuICAgIGZ1bmN0aW9uIENvbm5lY3RlZFJvdXRlcihwcm9wcykge1xuICAgICAgdmFyIF90aGlzO1xuXG4gICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgQ29ubmVjdGVkUm91dGVyKTtcblxuICAgICAgX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfZ2V0UHJvdG90eXBlT2YoQ29ubmVjdGVkUm91dGVyKS5jYWxsKHRoaXMsIHByb3BzKSk7XG4gICAgICB2YXIgc3RvcmUgPSBwcm9wcy5zdG9yZSxcbiAgICAgICAgICBoaXN0b3J5ID0gcHJvcHMuaGlzdG9yeSxcbiAgICAgICAgICBvbkxvY2F0aW9uQ2hhbmdlZCA9IHByb3BzLm9uTG9jYXRpb25DaGFuZ2VkO1xuICAgICAgX3RoaXMuaW5UaW1lVHJhdmVsbGluZyA9IGZhbHNlOyAvLyBTdWJzY3JpYmUgdG8gc3RvcmUgY2hhbmdlcyB0byBjaGVjayBpZiB3ZSBhcmUgaW4gdGltZSB0cmF2ZWxsaW5nXG5cbiAgICAgIF90aGlzLnVuc3Vic2NyaWJlID0gc3RvcmUuc3Vic2NyaWJlKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgLy8gRXh0cmFjdCBzdG9yZSdzIGxvY2F0aW9uXG4gICAgICAgIHZhciBfZ2V0TG9jYXRpb24gPSBnZXRMb2NhdGlvbihzdG9yZS5nZXRTdGF0ZSgpKSxcbiAgICAgICAgICAgIHBhdGhuYW1lSW5TdG9yZSA9IF9nZXRMb2NhdGlvbi5wYXRobmFtZSxcbiAgICAgICAgICAgIHNlYXJjaEluU3RvcmUgPSBfZ2V0TG9jYXRpb24uc2VhcmNoLFxuICAgICAgICAgICAgaGFzaEluU3RvcmUgPSBfZ2V0TG9jYXRpb24uaGFzaCxcbiAgICAgICAgICAgIHN0YXRlSW5TdG9yZSA9IF9nZXRMb2NhdGlvbi5zdGF0ZTsgLy8gRXh0cmFjdCBoaXN0b3J5J3MgbG9jYXRpb25cblxuXG4gICAgICAgIHZhciBfaGlzdG9yeSRsb2NhdGlvbiA9IGhpc3RvcnkubG9jYXRpb24sXG4gICAgICAgICAgICBwYXRobmFtZUluSGlzdG9yeSA9IF9oaXN0b3J5JGxvY2F0aW9uLnBhdGhuYW1lLFxuICAgICAgICAgICAgc2VhcmNoSW5IaXN0b3J5ID0gX2hpc3RvcnkkbG9jYXRpb24uc2VhcmNoLFxuICAgICAgICAgICAgaGFzaEluSGlzdG9yeSA9IF9oaXN0b3J5JGxvY2F0aW9uLmhhc2gsXG4gICAgICAgICAgICBzdGF0ZUluSGlzdG9yeSA9IF9oaXN0b3J5JGxvY2F0aW9uLnN0YXRlOyAvLyBJZiB3ZSBkbyB0aW1lIHRyYXZlbGxpbmcsIHRoZSBsb2NhdGlvbiBpbiBzdG9yZSBpcyBjaGFuZ2VkIGJ1dCBsb2NhdGlvbiBpbiBoaXN0b3J5IGlzIG5vdCBjaGFuZ2VkXG5cbiAgICAgICAgaWYgKHByb3BzLmhpc3RvcnkuYWN0aW9uID09PSAnUFVTSCcgJiYgKHBhdGhuYW1lSW5IaXN0b3J5ICE9PSBwYXRobmFtZUluU3RvcmUgfHwgc2VhcmNoSW5IaXN0b3J5ICE9PSBzZWFyY2hJblN0b3JlIHx8IGhhc2hJbkhpc3RvcnkgIT09IGhhc2hJblN0b3JlIHx8IHN0YXRlSW5TdG9yZSAhPT0gc3RhdGVJbkhpc3RvcnkpKSB7XG4gICAgICAgICAgX3RoaXMuaW5UaW1lVHJhdmVsbGluZyA9IHRydWU7IC8vIFVwZGF0ZSBoaXN0b3J5J3MgbG9jYXRpb24gdG8gbWF0Y2ggc3RvcmUncyBsb2NhdGlvblxuXG4gICAgICAgICAgaGlzdG9yeS5wdXNoKHtcbiAgICAgICAgICAgIHBhdGhuYW1lOiBwYXRobmFtZUluU3RvcmUsXG4gICAgICAgICAgICBzZWFyY2g6IHNlYXJjaEluU3RvcmUsXG4gICAgICAgICAgICBoYXNoOiBoYXNoSW5TdG9yZSxcbiAgICAgICAgICAgIHN0YXRlOiBzdGF0ZUluU3RvcmVcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfSk7XG5cbiAgICAgIHZhciBoYW5kbGVMb2NhdGlvbkNoYW5nZSA9IGZ1bmN0aW9uIGhhbmRsZUxvY2F0aW9uQ2hhbmdlKGxvY2F0aW9uLCBhY3Rpb24pIHtcbiAgICAgICAgdmFyIGlzRmlyc3RSZW5kZXJpbmcgPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6IGZhbHNlO1xuXG4gICAgICAgIC8vIERpc3BhdGNoIG9uTG9jYXRpb25DaGFuZ2VkIGV4Y2VwdCB3aGVuIHdlJ3JlIGluIHRpbWUgdHJhdmVsbGluZ1xuICAgICAgICBpZiAoIV90aGlzLmluVGltZVRyYXZlbGxpbmcpIHtcbiAgICAgICAgICBvbkxvY2F0aW9uQ2hhbmdlZChsb2NhdGlvbiwgYWN0aW9uLCBpc0ZpcnN0UmVuZGVyaW5nKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBfdGhpcy5pblRpbWVUcmF2ZWxsaW5nID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgIH07IC8vIExpc3RlbiB0byBoaXN0b3J5IGNoYW5nZXNcblxuXG4gICAgICBfdGhpcy51bmxpc3RlbiA9IGhpc3RvcnkubGlzdGVuKGhhbmRsZUxvY2F0aW9uQ2hhbmdlKTtcblxuICAgICAgaWYgKCFwcm9wcy5ub0luaXRpYWxQb3ApIHtcbiAgICAgICAgLy8gRGlzcGF0Y2ggYSBsb2NhdGlvbiBjaGFuZ2UgYWN0aW9uIGZvciB0aGUgaW5pdGlhbCBsb2NhdGlvbi5cbiAgICAgICAgLy8gVGhpcyBtYWtlcyBpdCBiYWNrd2FyZC1jb21wYXRpYmxlIHdpdGggcmVhY3Qtcm91dGVyLXJlZHV4LlxuICAgICAgICAvLyBCdXQsIHdlIGFkZCBgaXNGaXJzdFJlbmRlcmluZ2AgdG8gYHRydWVgIHRvIHByZXZlbnQgZG91YmxlLXJlbmRlcmluZy5cbiAgICAgICAgaGFuZGxlTG9jYXRpb25DaGFuZ2UoaGlzdG9yeS5sb2NhdGlvbiwgaGlzdG9yeS5hY3Rpb24sIHRydWUpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuXG4gICAgX2NyZWF0ZUNsYXNzKENvbm5lY3RlZFJvdXRlciwgW3tcbiAgICAgIGtleTogXCJjb21wb25lbnRXaWxsVW5tb3VudFwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgICAgICB0aGlzLnVubGlzdGVuKCk7XG4gICAgICAgIHRoaXMudW5zdWJzY3JpYmUoKTtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwicmVuZGVyXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgICB2YXIgX3RoaXMkcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICAgICAgaGlzdG9yeSA9IF90aGlzJHByb3BzLmhpc3RvcnksXG4gICAgICAgICAgICBjaGlsZHJlbiA9IF90aGlzJHByb3BzLmNoaWxkcmVuO1xuICAgICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChSb3V0ZXIsIHtcbiAgICAgICAgICBoaXN0b3J5OiBoaXN0b3J5XG4gICAgICAgIH0sIGNoaWxkcmVuKTtcbiAgICAgIH1cbiAgICB9XSk7XG5cbiAgICByZXR1cm4gQ29ubmVjdGVkUm91dGVyO1xuICB9KFB1cmVDb21wb25lbnQpO1xuXG4gIENvbm5lY3RlZFJvdXRlci5wcm9wVHlwZXMgPSB7XG4gICAgc3RvcmU6IFByb3BUeXBlcy5zaGFwZSh7XG4gICAgICBnZXRTdGF0ZTogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgICAgIHN1YnNjcmliZTogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZFxuICAgIH0pLmlzUmVxdWlyZWQsXG4gICAgaGlzdG9yeTogUHJvcFR5cGVzLnNoYXBlKHtcbiAgICAgIGFjdGlvbjogUHJvcFR5cGVzLnN0cmluZy5pc1JlcXVpcmVkLFxuICAgICAgbGlzdGVuOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgICAgbG9jYXRpb246IFByb3BUeXBlcy5vYmplY3QuaXNSZXF1aXJlZCxcbiAgICAgIHB1c2g6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWRcbiAgICB9KS5pc1JlcXVpcmVkLFxuICAgIGJhc2VuYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIGNoaWxkcmVuOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm5vZGVdKSxcbiAgICBvbkxvY2F0aW9uQ2hhbmdlZDogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgICBub0luaXRpYWxQb3A6IFByb3BUeXBlcy5ib29sXG4gIH07XG5cbiAgdmFyIG1hcERpc3BhdGNoVG9Qcm9wcyA9IGZ1bmN0aW9uIG1hcERpc3BhdGNoVG9Qcm9wcyhkaXNwYXRjaCkge1xuICAgIHJldHVybiB7XG4gICAgICBvbkxvY2F0aW9uQ2hhbmdlZDogZnVuY3Rpb24gb25Mb2NhdGlvbkNoYW5nZWQobG9jYXRpb24sIGFjdGlvbiwgaXNGaXJzdFJlbmRlcmluZykge1xuICAgICAgICByZXR1cm4gZGlzcGF0Y2goX29uTG9jYXRpb25DaGFuZ2VkKGxvY2F0aW9uLCBhY3Rpb24sIGlzRmlyc3RSZW5kZXJpbmcpKTtcbiAgICAgIH1cbiAgICB9O1xuICB9O1xuXG4gIHZhciBDb25uZWN0ZWRSb3V0ZXJXaXRoQ29udGV4dCA9IGZ1bmN0aW9uIENvbm5lY3RlZFJvdXRlcldpdGhDb250ZXh0KHByb3BzKSB7XG4gICAgdmFyIENvbnRleHQgPSBwcm9wcy5jb250ZXh0IHx8IFJlYWN0UmVkdXhDb250ZXh0O1xuXG4gICAgaWYgKENvbnRleHQgPT0gbnVsbCkge1xuICAgICAgdGhyb3cgJ1BsZWFzZSB1cGdyYWRlIHRvIHJlYWN0LXJlZHV4IHY2JztcbiAgICB9XG5cbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChDb250ZXh0LkNvbnN1bWVyLCBudWxsLCBmdW5jdGlvbiAoX3JlZikge1xuICAgICAgdmFyIHN0b3JlID0gX3JlZi5zdG9yZTtcbiAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KENvbm5lY3RlZFJvdXRlciwgX2V4dGVuZHMoe1xuICAgICAgICBzdG9yZTogc3RvcmVcbiAgICAgIH0sIHByb3BzKSk7XG4gICAgfSk7XG4gIH07XG5cbiAgQ29ubmVjdGVkUm91dGVyV2l0aENvbnRleHQucHJvcFR5cGVzID0ge1xuICAgIGNvbnRleHQ6IFByb3BUeXBlcy5vYmplY3RcbiAgfTtcbiAgcmV0dXJuIGNvbm5lY3QobnVsbCwgbWFwRGlzcGF0Y2hUb1Byb3BzKShDb25uZWN0ZWRSb3V0ZXJXaXRoQ29udGV4dCk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBjcmVhdGVDb25uZWN0ZWRSb3V0ZXI7IiwiZnVuY3Rpb24gX3NsaWNlZFRvQXJyYXkoYXJyLCBpKSB7IHJldHVybiBfYXJyYXlXaXRoSG9sZXMoYXJyKSB8fCBfaXRlcmFibGVUb0FycmF5TGltaXQoYXJyLCBpKSB8fCBfbm9uSXRlcmFibGVSZXN0KCk7IH1cblxuZnVuY3Rpb24gX25vbkl0ZXJhYmxlUmVzdCgpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkludmFsaWQgYXR0ZW1wdCB0byBkZXN0cnVjdHVyZSBub24taXRlcmFibGUgaW5zdGFuY2VcIik7IH1cblxuZnVuY3Rpb24gX2l0ZXJhYmxlVG9BcnJheUxpbWl0KGFyciwgaSkgeyBpZiAoIShTeW1ib2wuaXRlcmF0b3IgaW4gT2JqZWN0KGFycikgfHwgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGFycikgPT09IFwiW29iamVjdCBBcmd1bWVudHNdXCIpKSB7IHJldHVybjsgfSB2YXIgX2FyciA9IFtdOyB2YXIgX24gPSB0cnVlOyB2YXIgX2QgPSBmYWxzZTsgdmFyIF9lID0gdW5kZWZpbmVkOyB0cnkgeyBmb3IgKHZhciBfaSA9IGFycltTeW1ib2wuaXRlcmF0b3JdKCksIF9zOyAhKF9uID0gKF9zID0gX2kubmV4dCgpKS5kb25lKTsgX24gPSB0cnVlKSB7IF9hcnIucHVzaChfcy52YWx1ZSk7IGlmIChpICYmIF9hcnIubGVuZ3RoID09PSBpKSBicmVhazsgfSB9IGNhdGNoIChlcnIpIHsgX2QgPSB0cnVlOyBfZSA9IGVycjsgfSBmaW5hbGx5IHsgdHJ5IHsgaWYgKCFfbiAmJiBfaVtcInJldHVyblwiXSAhPSBudWxsKSBfaVtcInJldHVyblwiXSgpOyB9IGZpbmFsbHkgeyBpZiAoX2QpIHRocm93IF9lOyB9IH0gcmV0dXJuIF9hcnI7IH1cblxuZnVuY3Rpb24gX2FycmF5V2l0aEhvbGVzKGFycikgeyBpZiAoQXJyYXkuaXNBcnJheShhcnIpKSByZXR1cm4gYXJyOyB9XG5cbmZ1bmN0aW9uIG93bktleXMob2JqZWN0LCBlbnVtZXJhYmxlT25seSkgeyB2YXIga2V5cyA9IE9iamVjdC5rZXlzKG9iamVjdCk7IGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7IHZhciBzeW1ib2xzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhvYmplY3QpOyBpZiAoZW51bWVyYWJsZU9ubHkpIHN5bWJvbHMgPSBzeW1ib2xzLmZpbHRlcihmdW5jdGlvbiAoc3ltKSB7IHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iamVjdCwgc3ltKS5lbnVtZXJhYmxlOyB9KTsga2V5cy5wdXNoLmFwcGx5KGtleXMsIHN5bWJvbHMpOyB9IHJldHVybiBrZXlzOyB9XG5cbmZ1bmN0aW9uIF9vYmplY3RTcHJlYWQodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV0gIT0gbnVsbCA/IGFyZ3VtZW50c1tpXSA6IHt9OyBpZiAoaSAlIDIpIHsgb3duS2V5cyhPYmplY3Qoc291cmNlKSwgdHJ1ZSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7IF9kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgc291cmNlW2tleV0pOyB9KTsgfSBlbHNlIGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycykgeyBPYmplY3QuZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKHNvdXJjZSkpOyB9IGVsc2UgeyBvd25LZXlzKE9iamVjdChzb3VyY2UpKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHNvdXJjZSwga2V5KSk7IH0pOyB9IH0gcmV0dXJuIHRhcmdldDsgfVxuXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7IGlmIChrZXkgaW4gb2JqKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgeyB2YWx1ZTogdmFsdWUsIGVudW1lcmFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSwgd3JpdGFibGU6IHRydWUgfSk7IH0gZWxzZSB7IG9ialtrZXldID0gdmFsdWU7IH0gcmV0dXJuIG9iajsgfVxuXG5pbXBvcnQgeyBMT0NBVElPTl9DSEFOR0UgfSBmcm9tICcuL2FjdGlvbnMnO1xuLyoqXG4gKiBBZGRzIHF1ZXJ5IHRvIGxvY2F0aW9uLlxuICogVXRpbGlzZXMgdGhlIHNlYXJjaCBwcm9wIG9mIGxvY2F0aW9uIHRvIGNvbnN0cnVjdCBxdWVyeS5cbiAqL1xuXG52YXIgaW5qZWN0UXVlcnkgPSBmdW5jdGlvbiBpbmplY3RRdWVyeShsb2NhdGlvbikge1xuICBpZiAobG9jYXRpb24gJiYgbG9jYXRpb24ucXVlcnkpIHtcbiAgICAvLyBEb24ndCBpbmplY3QgcXVlcnkgaWYgaXQgYWxyZWFkeSBleGlzdHMgaW4gaGlzdG9yeVxuICAgIHJldHVybiBsb2NhdGlvbjtcbiAgfVxuXG4gIHZhciBzZWFyY2hRdWVyeSA9IGxvY2F0aW9uICYmIGxvY2F0aW9uLnNlYXJjaDtcblxuICBpZiAodHlwZW9mIHNlYXJjaFF1ZXJ5ICE9PSAnc3RyaW5nJyB8fCBzZWFyY2hRdWVyeS5sZW5ndGggPT09IDApIHtcbiAgICByZXR1cm4gX29iamVjdFNwcmVhZCh7fSwgbG9jYXRpb24sIHtcbiAgICAgIHF1ZXJ5OiB7fVxuICAgIH0pO1xuICB9IC8vIElnbm9yZSB0aGUgYD9gIHBhcnQgb2YgdGhlIHNlYXJjaCBzdHJpbmcgZS5nLiA/dXNlcm5hbWU9Y29kZWpvY2tpZVxuXG5cbiAgdmFyIHNlYXJjaCA9IHNlYXJjaFF1ZXJ5LnN1YnN0cmluZygxKTsgLy8gU3BsaXQgdGhlIHF1ZXJ5IHN0cmluZyBvbiBgJmAgZS5nLiA/dXNlcm5hbWU9Y29kZWpvY2tpZSZuYW1lPUtlbm5lZHlcblxuICB2YXIgcXVlcmllcyA9IHNlYXJjaC5zcGxpdCgnJicpOyAvLyBDb250cnVjdCBxdWVyeVxuXG4gIHZhciBxdWVyeSA9IHF1ZXJpZXMucmVkdWNlKGZ1bmN0aW9uIChhY2MsIGN1cnJlbnRRdWVyeSkge1xuICAgIC8vIFNwbGl0IG9uIGA9YCwgdG8gZ2V0IGtleSBhbmQgdmFsdWVcbiAgICB2YXIgX2N1cnJlbnRRdWVyeSRzcGxpdCA9IGN1cnJlbnRRdWVyeS5zcGxpdCgnPScpLFxuICAgICAgICBfY3VycmVudFF1ZXJ5JHNwbGl0MiA9IF9zbGljZWRUb0FycmF5KF9jdXJyZW50UXVlcnkkc3BsaXQsIDIpLFxuICAgICAgICBxdWVyeUtleSA9IF9jdXJyZW50UXVlcnkkc3BsaXQyWzBdLFxuICAgICAgICBxdWVyeVZhbHVlID0gX2N1cnJlbnRRdWVyeSRzcGxpdDJbMV07XG5cbiAgICByZXR1cm4gX29iamVjdFNwcmVhZCh7fSwgYWNjLCBfZGVmaW5lUHJvcGVydHkoe30sIHF1ZXJ5S2V5LCBxdWVyeVZhbHVlKSk7XG4gIH0sIHt9KTtcbiAgcmV0dXJuIF9vYmplY3RTcHJlYWQoe30sIGxvY2F0aW9uLCB7XG4gICAgcXVlcnk6IHF1ZXJ5XG4gIH0pO1xufTtcblxudmFyIGNyZWF0ZUNvbm5lY3RSb3V0ZXIgPSBmdW5jdGlvbiBjcmVhdGVDb25uZWN0Um91dGVyKHN0cnVjdHVyZSkge1xuICB2YXIgZnJvbUpTID0gc3RydWN0dXJlLmZyb21KUyxcbiAgICAgIG1lcmdlID0gc3RydWN0dXJlLm1lcmdlO1xuXG4gIHZhciBjcmVhdGVSb3V0ZXJSZWR1Y2VyID0gZnVuY3Rpb24gY3JlYXRlUm91dGVyUmVkdWNlcihoaXN0b3J5KSB7XG4gICAgdmFyIGluaXRpYWxSb3V0ZXJTdGF0ZSA9IGZyb21KUyh7XG4gICAgICBsb2NhdGlvbjogaW5qZWN0UXVlcnkoaGlzdG9yeS5sb2NhdGlvbiksXG4gICAgICBhY3Rpb246IGhpc3RvcnkuYWN0aW9uXG4gICAgfSk7XG4gICAgLypcbiAgICAqIFRoaXMgcmVkdWNlciB3aWxsIHVwZGF0ZSB0aGUgc3RhdGUgd2l0aCB0aGUgbW9zdCByZWNlbnQgbG9jYXRpb24gaGlzdG9yeVxuICAgICogaGFzIHRyYW5zaXRpb25lZCB0by5cbiAgICAqL1xuXG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBzdGF0ZSA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogaW5pdGlhbFJvdXRlclN0YXRlO1xuXG4gICAgICB2YXIgX3JlZiA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDoge30sXG4gICAgICAgICAgdHlwZSA9IF9yZWYudHlwZSxcbiAgICAgICAgICBwYXlsb2FkID0gX3JlZi5wYXlsb2FkO1xuXG4gICAgICBpZiAodHlwZSA9PT0gTE9DQVRJT05fQ0hBTkdFKSB7XG4gICAgICAgIHZhciBsb2NhdGlvbiA9IHBheWxvYWQubG9jYXRpb24sXG4gICAgICAgICAgICBhY3Rpb24gPSBwYXlsb2FkLmFjdGlvbixcbiAgICAgICAgICAgIGlzRmlyc3RSZW5kZXJpbmcgPSBwYXlsb2FkLmlzRmlyc3RSZW5kZXJpbmc7IC8vIERvbid0IHVwZGF0ZSB0aGUgc3RhdGUgcmVmIGZvciB0aGUgZmlyc3QgcmVuZGVyaW5nXG4gICAgICAgIC8vIHRvIHByZXZlbnQgdGhlIGRvdWJsZS1yZW5kZXJpbmcgaXNzdWUgb24gaW5pdGlsaXphdGlvblxuXG4gICAgICAgIHJldHVybiBpc0ZpcnN0UmVuZGVyaW5nID8gc3RhdGUgOiBtZXJnZShzdGF0ZSwge1xuICAgICAgICAgIGxvY2F0aW9uOiBmcm9tSlMoaW5qZWN0UXVlcnkobG9jYXRpb24pKSxcbiAgICAgICAgICBhY3Rpb246IGFjdGlvblxuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHN0YXRlO1xuICAgIH07XG4gIH07XG5cbiAgcmV0dXJuIGNyZWF0ZVJvdXRlclJlZHVjZXI7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBjcmVhdGVDb25uZWN0Um91dGVyOyIsImZ1bmN0aW9uIG93bktleXMob2JqZWN0LCBlbnVtZXJhYmxlT25seSkgeyB2YXIga2V5cyA9IE9iamVjdC5rZXlzKG9iamVjdCk7IGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7IHZhciBzeW1ib2xzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhvYmplY3QpOyBpZiAoZW51bWVyYWJsZU9ubHkpIHN5bWJvbHMgPSBzeW1ib2xzLmZpbHRlcihmdW5jdGlvbiAoc3ltKSB7IHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iamVjdCwgc3ltKS5lbnVtZXJhYmxlOyB9KTsga2V5cy5wdXNoLmFwcGx5KGtleXMsIHN5bWJvbHMpOyB9IHJldHVybiBrZXlzOyB9XG5cbmZ1bmN0aW9uIF9vYmplY3RTcHJlYWQodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV0gIT0gbnVsbCA/IGFyZ3VtZW50c1tpXSA6IHt9OyBpZiAoaSAlIDIpIHsgb3duS2V5cyhPYmplY3Qoc291cmNlKSwgdHJ1ZSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7IF9kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgc291cmNlW2tleV0pOyB9KTsgfSBlbHNlIGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycykgeyBPYmplY3QuZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKHNvdXJjZSkpOyB9IGVsc2UgeyBvd25LZXlzKE9iamVjdChzb3VyY2UpKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHNvdXJjZSwga2V5KSk7IH0pOyB9IH0gcmV0dXJuIHRhcmdldDsgfVxuXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7IGlmIChrZXkgaW4gb2JqKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgeyB2YWx1ZTogdmFsdWUsIGVudW1lcmFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSwgd3JpdGFibGU6IHRydWUgfSk7IH0gZWxzZSB7IG9ialtrZXldID0gdmFsdWU7IH0gcmV0dXJuIG9iajsgfVxuXG5pbXBvcnQgZ2V0SW4gZnJvbSAnLi9nZXRJbic7XG52YXIgc3RydWN0dXJlID0ge1xuICBmcm9tSlM6IGZ1bmN0aW9uIGZyb21KUyh2YWx1ZSkge1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfSxcbiAgZ2V0SW46IGdldEluLFxuICBtZXJnZTogZnVuY3Rpb24gbWVyZ2Uoc3RhdGUsIHBheWxvYWQpIHtcbiAgICByZXR1cm4gX29iamVjdFNwcmVhZCh7fSwgc3RhdGUsIHt9LCBwYXlsb2FkKTtcbiAgfSxcbiAgdG9KUzogZnVuY3Rpb24gdG9KUyh2YWx1ZSkge1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxufTtcbmV4cG9ydCBkZWZhdWx0IHN0cnVjdHVyZTsiLCIvKiBDb2RlIGZyb20gZ2l0aHViLmNvbS9lcmlrcmFzL3JlZHV4LWZvcm0gYnkgRXJpayBSYXNtdXNzZW4gKi9cbnZhciBnZXRJbiA9IGZ1bmN0aW9uIGdldEluKHN0YXRlLCBwYXRoKSB7XG4gIGlmICghc3RhdGUpIHtcbiAgICByZXR1cm4gc3RhdGU7XG4gIH1cblxuICB2YXIgbGVuZ3RoID0gcGF0aC5sZW5ndGg7XG5cbiAgaWYgKCFsZW5ndGgpIHtcbiAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9XG5cbiAgdmFyIHJlc3VsdCA9IHN0YXRlO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoICYmICEhcmVzdWx0OyArK2kpIHtcbiAgICByZXN1bHQgPSByZXN1bHRbcGF0aFtpXV07XG4gIH1cblxuICByZXR1cm4gcmVzdWx0O1xufTtcblxuZXhwb3J0IGRlZmF1bHQgZ2V0SW47IiwiaW1wb3J0IGNyZWF0ZUNvbm5lY3RlZFJvdXRlciBmcm9tIFwiLi9Db25uZWN0ZWRSb3V0ZXJcIjtcbmltcG9ydCBjcmVhdGVDb25uZWN0Um91dGVyIGZyb20gXCIuL3JlZHVjZXJcIjtcbmltcG9ydCBjcmVhdGVTZWxlY3RvcnMgZnJvbSBcIi4vc2VsZWN0b3JzXCI7XG5pbXBvcnQgcGxhaW5TdHJ1Y3R1cmUgZnJvbSBcIi4vc3RydWN0dXJlL3BsYWluXCI7XG5leHBvcnQgeyBMT0NBVElPTl9DSEFOR0UsIENBTExfSElTVE9SWV9NRVRIT0QsIG9uTG9jYXRpb25DaGFuZ2VkLCBwdXNoLCByZXBsYWNlLCBnbywgZ29CYWNrLCBnb0ZvcndhcmQsIHJvdXRlckFjdGlvbnMgfSBmcm9tIFwiLi9hY3Rpb25zXCI7XG5leHBvcnQgeyBkZWZhdWx0IGFzIHJvdXRlck1pZGRsZXdhcmUgfSBmcm9tIFwiLi9taWRkbGV3YXJlXCI7XG5leHBvcnQgdmFyIENvbm5lY3RlZFJvdXRlciA9IC8qI19fUFVSRV9fKi9jcmVhdGVDb25uZWN0ZWRSb3V0ZXIocGxhaW5TdHJ1Y3R1cmUpO1xuZXhwb3J0IHZhciBjb25uZWN0Um91dGVyID0gLyojX19QVVJFX18qL2NyZWF0ZUNvbm5lY3RSb3V0ZXIocGxhaW5TdHJ1Y3R1cmUpO1xuXG52YXIgX2NyZWF0ZVNlbGVjdG9ycyA9IC8qI19fUFVSRV9fKi9jcmVhdGVTZWxlY3RvcnMocGxhaW5TdHJ1Y3R1cmUpLFxuICAgIGdldExvY2F0aW9uID0gX2NyZWF0ZVNlbGVjdG9ycy5nZXRMb2NhdGlvbixcbiAgICBnZXRBY3Rpb24gPSBfY3JlYXRlU2VsZWN0b3JzLmdldEFjdGlvbixcbiAgICBnZXRIYXNoID0gX2NyZWF0ZVNlbGVjdG9ycy5nZXRIYXNoLFxuICAgIGdldFNlYXJjaCA9IF9jcmVhdGVTZWxlY3RvcnMuZ2V0U2VhcmNoLFxuICAgIGNyZWF0ZU1hdGNoU2VsZWN0b3IgPSBfY3JlYXRlU2VsZWN0b3JzLmNyZWF0ZU1hdGNoU2VsZWN0b3I7XG5cbmV4cG9ydCB7IGdldExvY2F0aW9uLCBnZXRBY3Rpb24sIGdldEhhc2gsIGdldFNlYXJjaCwgY3JlYXRlTWF0Y2hTZWxlY3RvciB9OyIsImltcG9ydCB7IHByb2ZpbGUgfSBmcm9tICdoZWxwZXJzL3Byb2ZpbGVEYXRhJ1xyXG5pbXBvcnQge1xyXG4gICAgUFJPRklMRV9MT0FELFxyXG4gICAgUFJPRklMRV9DSEFOR0VfTkFNRSxcclxuICAgIFJFR0lTVFJBVElPTixcclxuICAgIExPR09VVCxcclxuICAgIExPR0lOLFxyXG59IGZyb20gJ2FjdGlvbnMvcHJvZmlsZSdcclxuXHJcbmNvbnN0IGluaXRpYWxTdGF0ZSA9IHtcclxuICAgIHByb2ZpbGU6IHt9LFxyXG4gICAgdG9rZW46IG51bGwsXHJcbn1cclxuXHJcbmV4cG9ydCBjb25zdCBwcm9maWxlUmVkdWNlciA9IChzdGF0ZSA9IGluaXRpYWxTdGF0ZSwgYWN0aW9uKSA9PiB7XHJcbiAgICBzd2l0Y2ggKGFjdGlvbi50eXBlKSB7XHJcbiAgICAgICAgY2FzZSBQUk9GSUxFX0xPQUQ6XHJcbiAgICAgICAgICAgIHJldHVybiB7IC4uLnN0YXRlLCBwcm9maWxlIH1cclxuICAgICAgICAvLyByZXR1cm4geyAuLi5zdGF0ZSwgcHJvZmlsZTogYWN0aW9uLnBheWxvYWQucHJvZmlsZSwgdG9rZW46IGFjdGlvbi5wYXlsb2FkLnRva2VuIH1cclxuXHJcbiAgICAgICAgY2FzZSBQUk9GSUxFX0NIQU5HRV9OQU1FOlxyXG4gICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgLi4uc3RhdGUsXHJcbiAgICAgICAgICAgICAgICBwcm9maWxlOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgLi4uc3RhdGUucHJvZmlsZSxcclxuICAgICAgICAgICAgICAgICAgICBmaXJzdE5hbWU6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFjdGlvbi5wYXlsb2FkLmZpcnN0TmFtZSA9PT0gdW5kZWZpbmVkXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IHN0YXRlLnByb2ZpbGUuZmlyc3ROYW1lXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IGFjdGlvbi5wYXlsb2FkLmZpcnN0TmFtZSxcclxuICAgICAgICAgICAgICAgICAgICBsYXN0TmFtZTpcclxuICAgICAgICAgICAgICAgICAgICAgICAgYWN0aW9uLnBheWxvYWQubGFzdE5hbWUgPT09IHVuZGVmaW5lZFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPyBzdGF0ZS5wcm9maWxlLmxhc3ROYW1lXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IGFjdGlvbi5wYXlsb2FkLmxhc3ROYW1lLFxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIGNhc2UgTE9HT1VUOlxyXG4gICAgICAgICAgICByZXR1cm4geyAuLi5zdGF0ZSwgdG9rZW46IG51bGwgfVxyXG5cclxuICAgICAgICBjYXNlIExPR0lOOlxyXG4gICAgICAgICAgICByZXR1cm4geyAuLi5zdGF0ZSwgdG9rZW46IGFjdGlvbi5wYXlsb2FkLnRva2VuIH1cclxuXHJcbiAgICAgICAgY2FzZSBSRUdJU1RSQVRJT046XHJcbiAgICAgICAgICAgIHJldHVybiB7IC4uLnN0YXRlLCBwcm9maWxlOiB7IC4uLmFjdGlvbi5wYXlsb2FkIH0gfVxyXG5cclxuICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICByZXR1cm4gc3RhdGVcclxuICAgIH1cclxufVxyXG4iLCJpbXBvcnQgeyBBTEVSVF9MT0FELCBBTEVSVF9TRU5ELCBBTEVSVF9DTE9TRSB9IGZyb20gJ2FjdGlvbnMvYWxlcnRzJ1xyXG5cclxuY29uc3QgaW5pdGlhbFN0YXRlID0ge1xyXG4gICAgcG9wdXA6IFtdLFxyXG59XHJcblxyXG5leHBvcnQgY29uc3QgYWxlcnRSZWR1Y2VyID0gKHN0YXRlID0gaW5pdGlhbFN0YXRlLCBhY3Rpb24pID0+IHtcclxuICAgIHN3aXRjaCAoYWN0aW9uLnR5cGUpIHtcclxuICAgICAgICBjYXNlIEFMRVJUX0xPQUQ6XHJcbiAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICAuLi5zdGF0ZSxcclxuICAgICAgICAgICAgICAgIHBvcHVwOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGV4dDogJycsXHJcbiAgICAgICAgICAgICAgICAgICAgc3RhdHVzOiBmYWxzZSxcclxuICAgICAgICAgICAgICAgICAgICB0eXBlOiAnJyxcclxuICAgICAgICAgICAgICAgICAgICBpZDogJycsXHJcbiAgICAgICAgICAgICAgICAgICAgaXNTZWxlY3Q6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICBjYXNlIEFMRVJUX1NFTkQ6XHJcbiAgICAgICAgICAgIHJldHVybiB7IC4uLnN0YXRlLCBwb3B1cDogYWN0aW9uLnBheWxvYWQgfVxyXG5cclxuICAgICAgICBjYXNlIEFMRVJUX0NMT1NFOlxyXG4gICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgLi4uc3RhdGUsXHJcbiAgICAgICAgICAgICAgICBwb3B1cDoge1xyXG4gICAgICAgICAgICAgICAgICAgIHRleHQ6ICcnLFxyXG4gICAgICAgICAgICAgICAgICAgIHN0YXR1czogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogJycsXHJcbiAgICAgICAgICAgICAgICAgICAgaWQ6ICcnLFxyXG4gICAgICAgICAgICAgICAgICAgIGlzU2VsZWN0OiBmYWxzZSxcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgcmV0dXJuIHN0YXRlXHJcbiAgICB9XHJcbn1cclxuIiwiaW1wb3J0IHsgQXZhdGFyR2VuZXJhdG9yIH0gZnJvbSAncmFuZG9tLWF2YXRhci1nZW5lcmF0b3InXHJcbmNvbnN0IGdlbmVyYXRvciA9IG5ldyBBdmF0YXJHZW5lcmF0b3IoKVxyXG5pbXBvcnQgeyBuYW5vaWQgfSBmcm9tICduYW5vaWQnXHJcbmV4cG9ydCBjb25zdCBsZXNzb25zRW50cnkgPSB7XHJcbiAgICBVa203U0o6IHtcclxuICAgICAgICBpZDogJ1VrbTdTSicsXHJcbiAgICAgICAgdGl0bGU6ICfQo9GA0L7QuiAxJyxcclxuICAgICAgICByYXRpbmc6IDEsXHJcbiAgICAgICAgY29udGVudDogJ9Cd0LjRh9C10LPQviDQvdC1INC/0L7QvdGP0YLQvdC+INC90L4g0L7Rh9C10L3RjCDQuNC90YLQtdGA0L3QtdGB0L3QvicsXHJcbiAgICAgICAgY292ZXI6IGdlbmVyYXRvci5nZW5lcmF0ZVJhbmRvbUF2YXRhcigpLFxyXG4gICAgICAgIGNhdGVnb3J5OiAn0J/RgNC+0YfQtdC1JyxcclxuICAgICAgICBwcmljZTogMzEsXHJcbiAgICAgICAgYXV0aG9yOiAndXNlcklkJyxcclxuICAgICAgICByZXZpZXdzOiBbXSxcclxuICAgICAgICBxdXN0aW9uczogW10sXHJcbiAgICB9LFxyXG4gICAgZGszdDBtOiB7XHJcbiAgICAgICAgaWQ6ICdkazN0MG0nLFxyXG4gICAgICAgIHRpdGxlOiAn0KPRgNC+0LogMicsXHJcbiAgICAgICAgcmF0aW5nOiA0LFxyXG4gICAgICAgIGNvbnRlbnQ6ICfQndC40YfQtdCz0L4g0L3QtSDQv9C+0L3Rj9GC0L3QviDQvdC+INC+0YfQtdC90Ywg0LjQvdGC0LXRgNC90LXRgdC90L4nLFxyXG4gICAgICAgIGNvdmVyOiBnZW5lcmF0b3IuZ2VuZXJhdGVSYW5kb21BdmF0YXIoKSxcclxuICAgICAgICBjYXRlZ29yeTogJ9Cf0YDQvtGH0LXQtScsXHJcbiAgICAgICAgcHJpY2U6IDcxLFxyXG4gICAgICAgIGF1dGhvcjogJ3VzZXJJZCcsXHJcbiAgICAgICAgcmV2aWV3czogW10sXHJcbiAgICAgICAgcXVzdGlvbnM6IFtdLFxyXG4gICAgfSxcclxuICAgIGZ2MWh1ZDoge1xyXG4gICAgICAgIGlkOiAnZnYxaHVkJyxcclxuICAgICAgICB0aXRsZTogJ9Cj0YDQvtC6IDMnLFxyXG4gICAgICAgIHJhdGluZzogNCxcclxuICAgICAgICBjb250ZW50OiAn0J3QuNGH0LXQs9C+INC90LUg0L/QvtC90Y/RgtC90L4g0L3QviDQvtGH0LXQvdGMINC40L3RgtC10YDQvdC10YHQvdC+JyxcclxuICAgICAgICBjb3ZlcjogZ2VuZXJhdG9yLmdlbmVyYXRlUmFuZG9tQXZhdGFyKCksXHJcbiAgICAgICAgY2F0ZWdvcnk6ICfQn9GA0L7Rh9C10LUnLFxyXG4gICAgICAgIHByaWNlOiAwLFxyXG4gICAgICAgIGF1dGhvcjogJ3VzZXJJZCcsXHJcbiAgICAgICAgcmV2aWV3czogW10sXHJcbiAgICAgICAgcXVzdGlvbnM6IFtdLFxyXG4gICAgfSxcclxuICAgIHRpcUQwUjoge1xyXG4gICAgICAgIGlkOiAndGlxRDBSJyxcclxuICAgICAgICB0aXRsZTogJ9Cj0YDQvtC6IDQnLFxyXG4gICAgICAgIHJhdGluZzogNSxcclxuICAgICAgICBjb250ZW50OiAn0J3QuNGH0LXQs9C+INC90LUg0L/QvtC90Y/RgtC90L4g0L3QviDQvtGH0LXQvdGMINC40L3RgtC10YDQvdC10YHQvdC+JyxcclxuICAgICAgICBjb3ZlcjogZ2VuZXJhdG9yLmdlbmVyYXRlUmFuZG9tQXZhdGFyKCksXHJcbiAgICAgICAgY2F0ZWdvcnk6ICfQn9GA0L7Rh9C10LUnLFxyXG4gICAgICAgIHByaWNlOiAxNTEsXHJcbiAgICAgICAgYXV0aG9yOiAndXNlcklkJyxcclxuICAgICAgICByZXZpZXdzOiBbXSxcclxuICAgICAgICBxdXN0aW9uczogW10sXHJcbiAgICB9LFxyXG59XHJcbiIsImltcG9ydCB7XHJcbiAgICBMRVNTT05fTE9BRCxcclxuICAgIExFU1NPTl9DUkVBVEUsXHJcbiAgICBMRVNTT05fREVMRVRFLFxyXG4gICAgTEVTU09OX1NFTEVDVCxcclxuICAgIFJFVklFV19BREQsXHJcbiAgICBSRU1PVkVfUkVWSUVXLFxyXG59IGZyb20gJ2FjdGlvbnMvbGVzc29ucydcclxuaW1wb3J0IHsgbGVzc29uc0VudHJ5IH0gZnJvbSAnaGVscGVycy9sZXNzb25DYXJkJ1xyXG5cclxuY29uc3QgaW5pdGlhbFN0YXRlID0ge1xyXG4gICAgbGVzc29uc0xpc3Q6IHt9LFxyXG4gICAgbGVzc29uSWQ6ICcnLFxyXG59XHJcblxyXG5leHBvcnQgY29uc3QgbGVzc29uUmVkdWNlciA9IChzdGF0ZSA9IGluaXRpYWxTdGF0ZSwgYWN0aW9uKSA9PiB7XHJcbiAgICBzd2l0Y2ggKGFjdGlvbi50eXBlKSB7XHJcbiAgICAgICAgY2FzZSBMRVNTT05fTE9BRDpcclxuICAgICAgICAgICAgcmV0dXJuIHsgLi4uc3RhdGUsIGxlc3NvbnNMaXN0OiBsZXNzb25zRW50cnkgfVxyXG5cclxuICAgICAgICBjYXNlIExFU1NPTl9DUkVBVEU6XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGFjdGlvbi5wYXlsb2FkKVxyXG4gICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgLi4uc3RhdGUsXHJcbiAgICAgICAgICAgICAgICBsZXNzb25zTGlzdDoge1xyXG4gICAgICAgICAgICAgICAgICAgIC4uLnN0YXRlLmxlc3NvbnNMaXN0LFxyXG4gICAgICAgICAgICAgICAgICAgIFthY3Rpb24ucGF5bG9hZC5kYXRhLmlkXToge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAuLi5hY3Rpb24ucGF5bG9hZC5kYXRhLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBhdXRob3I6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhY3Rpb24ucGF5bG9hZC5hdXRob3IuZmlyc3ROYW1lICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICcgJyArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhY3Rpb24ucGF5bG9hZC5hdXRob3IubGFzdE5hbWUsXHJcbiAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBsZXNzb25JZDogYWN0aW9uLnBheWxvYWQuZGF0YS5pZCxcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICBjYXNlIExFU1NPTl9TRUxFQ1Q6XHJcbiAgICAgICAgICAgIHJldHVybiB7IC4uLnN0YXRlLCBsZXNzb25JZDogYWN0aW9uLnBheWxvYWQgfVxyXG5cclxuICAgICAgICBjYXNlIExFU1NPTl9ERUxFVEU6XHJcbiAgICAgICAgICAgIGNvbnN0IHsgW2FjdGlvbi5wYXlsb2FkXTogXywgLi4ubmV3TGVzc29ucyB9ID0gc3RhdGUubGVzc29uc0xpc3RcclxuXHJcbiAgICAgICAgICAgIHJldHVybiB7IC4uLnN0YXRlLCBsZXNzb25zTGlzdDogbmV3TGVzc29ucyB9XHJcblxyXG4gICAgICAgIGNhc2UgUkVWSUVXX0FERDpcclxuICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgIC4uLnN0YXRlLFxyXG4gICAgICAgICAgICAgICAgbGVzc29uc0xpc3Q6IHtcclxuICAgICAgICAgICAgICAgICAgICAuLi5zdGF0ZS5sZXNzb25zTGlzdCxcclxuICAgICAgICAgICAgICAgICAgICBbYWN0aW9uLnBheWxvYWQuaWRdOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC4uLnN0YXRlLmxlc3NvbnNMaXN0W2FjdGlvbi5wYXlsb2FkLmlkXSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV2aWV3czogW1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLi4uc3RhdGUubGVzc29uc0xpc3RbYWN0aW9uLnBheWxvYWQuaWRdLnJldmlld3MsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhY3Rpb24ucGF5bG9hZC5yZXZpZXcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF0sXHJcbiAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICBjYXNlIFJFTU9WRV9SRVZJRVc6XHJcbiAgICAgICAgICAgIGNvbnN0IHNlYXJjaFJldmlldyA9IHN0YXRlLmxlc3NvbnNMaXN0W1xyXG4gICAgICAgICAgICAgICAgYWN0aW9uLnBheWxvYWQubGVzc29uSWRcclxuICAgICAgICAgICAgXS5yZXZpZXdzLmZpbHRlcigoaXRlbSkgPT4gaXRlbS5pZCAhPT0gYWN0aW9uLnBheWxvYWQucmV2aWV3SWQpXHJcbiAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICAuLi5zdGF0ZSxcclxuICAgICAgICAgICAgICAgIGxlc3NvbnNMaXN0OiB7XHJcbiAgICAgICAgICAgICAgICAgICAgLi4uc3RhdGUubGVzc29uc0xpc3QsXHJcbiAgICAgICAgICAgICAgICAgICAgW2FjdGlvbi5wYXlsb2FkLmxlc3NvbklkXToge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAuLi5zdGF0ZS5sZXNzb25zTGlzdFthY3Rpb24ucGF5bG9hZC5sZXNzb25JZF0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldmlld3M6IHNlYXJjaFJldmlldyxcclxuICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgIHJldHVybiBzdGF0ZVxyXG4gICAgfVxyXG59XHJcbiIsImltcG9ydCB7IENBUlRfTE9BRCwgQ0FSVF9BREQsIENBUlRfUkVNT1ZFLCBDQVJUX0RFTEVURSB9IGZyb20gJ2FjdGlvbnMvY2FydCdcclxuXHJcbmNvbnN0IGluaXRpYWxTdGF0ZSA9IHtcclxuICAgIGNhcnQ6IHt9LFxyXG59XHJcblxyXG5leHBvcnQgY29uc3QgY2FydFJlZHVjZXIgPSAoc3RhdGUgPSBpbml0aWFsU3RhdGUsIGFjdGlvbikgPT4ge1xyXG4gICAgc3dpdGNoIChhY3Rpb24udHlwZSkge1xyXG4gICAgICAgIGNhc2UgQ0FSVF9MT0FEOlxyXG4gICAgICAgICAgICByZXR1cm4geyAuLi5zdGF0ZSwgY2FydCB9XHJcblxyXG4gICAgICAgIGNhc2UgQ0FSVF9BREQ6XHJcbiAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICAuLi5zdGF0ZSxcclxuICAgICAgICAgICAgICAgIGNhcnQ6IHtcclxuICAgICAgICAgICAgICAgICAgICAuLi5zdGF0ZS5jYXJ0LFxyXG4gICAgICAgICAgICAgICAgICAgIFthY3Rpb24ucGF5bG9hZC5pZF06IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLi4uc3RhdGUuY2FydFthY3Rpb24ucGF5bG9hZC5pZF0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC4uLmFjdGlvbi5wYXlsb2FkLFxyXG4gICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgIGNhc2UgQ0FSVF9SRU1PVkU6XHJcbiAgICAgICAgICAgIGNvbnN0IHsgY2FydCB9ID0gc3RhdGVcclxuICAgICAgICAgICAgY29uc3QgeyBbYWN0aW9uLnBheWxvYWRdOiBfLCAuLi5uZXdDYXJ0IH0gPSBjYXJ0XHJcblxyXG4gICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgLi4uc3RhdGUsXHJcbiAgICAgICAgICAgICAgICBjYXJ0OiBuZXdDYXJ0LFxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgIGNhc2UgQ0FSVF9ERUxFVEU6XHJcbiAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICAuLi5zdGF0ZSxcclxuICAgICAgICAgICAgICAgIGNhcnQ6IFtdLFxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgIHJldHVybiBzdGF0ZVxyXG4gICAgfVxyXG59XHJcbiIsImltcG9ydCB7XHJcbiAgICBNT0JJTEVfRFJBV0VSX1NUQVRFX0xPQUQsXHJcbiAgICBNT0JJTEVfRFJBV0VSX1NUQVRFX1NFVCxcclxufSBmcm9tICdhY3Rpb25zL2hlYWRlcidcclxuXHJcbmNvbnN0IGluaXRpYWxTdGF0ZSA9IHtcclxuICAgIG1vYmlsZURyYXdlcjogZmFsc2UsXHJcbn1cclxuXHJcbmV4cG9ydCBjb25zdCBoZWFkZXJSZWR1Y2VyID0gKHN0YXRlID0gaW5pdGlhbFN0YXRlLCBhY3Rpb24pID0+IHtcclxuICAgIHN3aXRjaCAoYWN0aW9uLnR5cGUpIHtcclxuICAgICAgICBjYXNlIE1PQklMRV9EUkFXRVJfU1RBVEVfTE9BRDpcclxuICAgICAgICAgICAgcmV0dXJuIHsgLi4uc3RhdGUsIG1vYmlsZURyYXdlciB9XHJcblxyXG4gICAgICAgIGNhc2UgTU9CSUxFX0RSQVdFUl9TVEFURV9TRVQ6XHJcbiAgICAgICAgICAgIHJldHVybiB7IC4uLnN0YXRlLCBtb2JpbGVEcmF3ZXI6ICFzdGF0ZS5tb2JpbGVEcmF3ZXIgfVxyXG5cclxuICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICByZXR1cm4gc3RhdGVcclxuICAgIH1cclxufVxyXG4iLCJpbXBvcnQgeyBJTklUIH0gZnJvbSAnYWN0aW9ucy9pbml0J1xyXG5cclxuY29uc3QgaW5pdGlhbFN0YXRlID0ge31cclxuXHJcbmV4cG9ydCBjb25zdCBpbml0UmVkdWNlciA9IChzdGF0ZSA9IGluaXRpYWxTdGF0ZSwgYWN0aW9uKSA9PiB7XHJcbiAgICBzd2l0Y2ggKGFjdGlvbi50eXBlKSB7XHJcbiAgICAgICAgY2FzZSBJTklUOlxyXG4gICAgICAgICAgICByZXR1cm4geyAuLi5zdGF0ZSB9XHJcblxyXG4gICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgIHJldHVybiBzdGF0ZVxyXG4gICAgfVxyXG59XHJcbiIsImV4cG9ydCB2YXIgS0VZX1BSRUZJWCA9ICdwZXJzaXN0Oic7XG5leHBvcnQgdmFyIEZMVVNIID0gJ3BlcnNpc3QvRkxVU0gnO1xuZXhwb3J0IHZhciBSRUhZRFJBVEUgPSAncGVyc2lzdC9SRUhZRFJBVEUnO1xuZXhwb3J0IHZhciBQQVVTRSA9ICdwZXJzaXN0L1BBVVNFJztcbmV4cG9ydCB2YXIgUEVSU0lTVCA9ICdwZXJzaXN0L1BFUlNJU1QnO1xuZXhwb3J0IHZhciBQVVJHRSA9ICdwZXJzaXN0L1BVUkdFJztcbmV4cG9ydCB2YXIgUkVHSVNURVIgPSAncGVyc2lzdC9SRUdJU1RFUic7XG5leHBvcnQgdmFyIERFRkFVTFRfVkVSU0lPTiA9IC0xOyIsImZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IGlmICh0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIikgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH07IH0gZWxzZSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajsgfTsgfSByZXR1cm4gX3R5cGVvZihvYmopOyB9XG5cbmZ1bmN0aW9uIG93bktleXMob2JqZWN0LCBlbnVtZXJhYmxlT25seSkgeyB2YXIga2V5cyA9IE9iamVjdC5rZXlzKG9iamVjdCk7IGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7IHZhciBzeW1ib2xzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhvYmplY3QpOyBpZiAoZW51bWVyYWJsZU9ubHkpIHN5bWJvbHMgPSBzeW1ib2xzLmZpbHRlcihmdW5jdGlvbiAoc3ltKSB7IHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iamVjdCwgc3ltKS5lbnVtZXJhYmxlOyB9KTsga2V5cy5wdXNoLmFwcGx5KGtleXMsIHN5bWJvbHMpOyB9IHJldHVybiBrZXlzOyB9XG5cbmZ1bmN0aW9uIF9vYmplY3RTcHJlYWQodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV0gIT0gbnVsbCA/IGFyZ3VtZW50c1tpXSA6IHt9OyBpZiAoaSAlIDIpIHsgb3duS2V5cyhzb3VyY2UsIHRydWUpLmZvckVhY2goZnVuY3Rpb24gKGtleSkgeyBfZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHNvdXJjZVtrZXldKTsgfSk7IH0gZWxzZSBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMpIHsgT2JqZWN0LmRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyhzb3VyY2UpKTsgfSBlbHNlIHsgb3duS2V5cyhzb3VyY2UpLmZvckVhY2goZnVuY3Rpb24gKGtleSkgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Ioc291cmNlLCBrZXkpKTsgfSk7IH0gfSByZXR1cm4gdGFyZ2V0OyB9XG5cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHsgaWYgKGtleSBpbiBvYmopIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7IHZhbHVlOiB2YWx1ZSwgZW51bWVyYWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlLCB3cml0YWJsZTogdHJ1ZSB9KTsgfSBlbHNlIHsgb2JqW2tleV0gPSB2YWx1ZTsgfSByZXR1cm4gb2JqOyB9XG5cbi8qXG4gIGF1dG9NZXJnZUxldmVsMTogXG4gICAgLSBtZXJnZXMgMSBsZXZlbCBvZiBzdWJzdGF0ZVxuICAgIC0gc2tpcHMgc3Vic3RhdGUgaWYgYWxyZWFkeSBtb2RpZmllZFxuKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGF1dG9NZXJnZUxldmVsMShpbmJvdW5kU3RhdGUsIG9yaWdpbmFsU3RhdGUsIHJlZHVjZWRTdGF0ZSwgX3JlZikge1xuICB2YXIgZGVidWcgPSBfcmVmLmRlYnVnO1xuXG4gIHZhciBuZXdTdGF0ZSA9IF9vYmplY3RTcHJlYWQoe30sIHJlZHVjZWRTdGF0ZSk7IC8vIG9ubHkgcmVoeWRyYXRlIGlmIGluYm91bmRTdGF0ZSBleGlzdHMgYW5kIGlzIGFuIG9iamVjdFxuXG5cbiAgaWYgKGluYm91bmRTdGF0ZSAmJiBfdHlwZW9mKGluYm91bmRTdGF0ZSkgPT09ICdvYmplY3QnKSB7XG4gICAgT2JqZWN0LmtleXMoaW5ib3VuZFN0YXRlKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgIC8vIGlnbm9yZSBfcGVyc2lzdCBkYXRhXG4gICAgICBpZiAoa2V5ID09PSAnX3BlcnNpc3QnKSByZXR1cm47IC8vIGlmIHJlZHVjZXIgbW9kaWZpZXMgc3Vic3RhdGUsIHNraXAgYXV0byByZWh5ZHJhdGlvblxuXG4gICAgICBpZiAob3JpZ2luYWxTdGF0ZVtrZXldICE9PSByZWR1Y2VkU3RhdGVba2V5XSkge1xuICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBkZWJ1ZykgY29uc29sZS5sb2coJ3JlZHV4LXBlcnNpc3Qvc3RhdGVSZWNvbmNpbGVyOiBzdWIgc3RhdGUgZm9yIGtleSBgJXNgIG1vZGlmaWVkLCBza2lwcGluZy4nLCBrZXkpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9IC8vIG90aGVyd2lzZSBoYXJkIHNldCB0aGUgbmV3IHZhbHVlXG5cblxuICAgICAgbmV3U3RhdGVba2V5XSA9IGluYm91bmRTdGF0ZVtrZXldO1xuICAgIH0pO1xuICB9XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgZGVidWcgJiYgaW5ib3VuZFN0YXRlICYmIF90eXBlb2YoaW5ib3VuZFN0YXRlKSA9PT0gJ29iamVjdCcpIGNvbnNvbGUubG9nKFwicmVkdXgtcGVyc2lzdC9zdGF0ZVJlY29uY2lsZXI6IHJlaHlkcmF0ZWQga2V5cyAnXCIuY29uY2F0KE9iamVjdC5rZXlzKGluYm91bmRTdGF0ZSkuam9pbignLCAnKSwgXCInXCIpKTtcbiAgcmV0dXJuIG5ld1N0YXRlO1xufSIsImltcG9ydCB7IEtFWV9QUkVGSVgsIFJFSFlEUkFURSB9IGZyb20gJy4vY29uc3RhbnRzJztcbi8vIEBUT0RPIHJlbW92ZSBvbmNlIGZsb3cgPCAwLjYzIHN1cHBvcnQgaXMgbm8gbG9uZ2VyIHJlcXVpcmVkLlxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY3JlYXRlUGVyc2lzdG9pZChjb25maWcpIHtcbiAgLy8gZGVmYXVsdHNcbiAgdmFyIGJsYWNrbGlzdCA9IGNvbmZpZy5ibGFja2xpc3QgfHwgbnVsbDtcbiAgdmFyIHdoaXRlbGlzdCA9IGNvbmZpZy53aGl0ZWxpc3QgfHwgbnVsbDtcbiAgdmFyIHRyYW5zZm9ybXMgPSBjb25maWcudHJhbnNmb3JtcyB8fCBbXTtcbiAgdmFyIHRocm90dGxlID0gY29uZmlnLnRocm90dGxlIHx8IDA7XG4gIHZhciBzdG9yYWdlS2V5ID0gXCJcIi5jb25jYXQoY29uZmlnLmtleVByZWZpeCAhPT0gdW5kZWZpbmVkID8gY29uZmlnLmtleVByZWZpeCA6IEtFWV9QUkVGSVgpLmNvbmNhdChjb25maWcua2V5KTtcbiAgdmFyIHN0b3JhZ2UgPSBjb25maWcuc3RvcmFnZTtcbiAgdmFyIHNlcmlhbGl6ZTtcblxuICBpZiAoY29uZmlnLnNlcmlhbGl6ZSA9PT0gZmFsc2UpIHtcbiAgICBzZXJpYWxpemUgPSBmdW5jdGlvbiBzZXJpYWxpemUoeCkge1xuICAgICAgcmV0dXJuIHg7XG4gICAgfTtcbiAgfSBlbHNlIGlmICh0eXBlb2YgY29uZmlnLnNlcmlhbGl6ZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHNlcmlhbGl6ZSA9IGNvbmZpZy5zZXJpYWxpemU7XG4gIH0gZWxzZSB7XG4gICAgc2VyaWFsaXplID0gZGVmYXVsdFNlcmlhbGl6ZTtcbiAgfVxuXG4gIHZhciB3cml0ZUZhaWxIYW5kbGVyID0gY29uZmlnLndyaXRlRmFpbEhhbmRsZXIgfHwgbnVsbDsgLy8gaW5pdGlhbGl6ZSBzdGF0ZWZ1bCB2YWx1ZXNcblxuICB2YXIgbGFzdFN0YXRlID0ge307XG4gIHZhciBzdGFnZWRTdGF0ZSA9IHt9O1xuICB2YXIga2V5c1RvUHJvY2VzcyA9IFtdO1xuICB2YXIgdGltZUl0ZXJhdG9yID0gbnVsbDtcbiAgdmFyIHdyaXRlUHJvbWlzZSA9IG51bGw7XG5cbiAgdmFyIHVwZGF0ZSA9IGZ1bmN0aW9uIHVwZGF0ZShzdGF0ZSkge1xuICAgIC8vIGFkZCBhbnkgY2hhbmdlZCBrZXlzIHRvIHRoZSBxdWV1ZVxuICAgIE9iamVjdC5rZXlzKHN0YXRlKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgIGlmICghcGFzc1doaXRlbGlzdEJsYWNrbGlzdChrZXkpKSByZXR1cm47IC8vIGlzIGtleXNwYWNlIGlnbm9yZWQ/IG5vb3BcblxuICAgICAgaWYgKGxhc3RTdGF0ZVtrZXldID09PSBzdGF0ZVtrZXldKSByZXR1cm47IC8vIHZhbHVlIHVuY2hhbmdlZD8gbm9vcFxuXG4gICAgICBpZiAoa2V5c1RvUHJvY2Vzcy5pbmRleE9mKGtleSkgIT09IC0xKSByZXR1cm47IC8vIGlzIGtleSBhbHJlYWR5IHF1ZXVlZD8gbm9vcFxuXG4gICAgICBrZXlzVG9Qcm9jZXNzLnB1c2goa2V5KTsgLy8gYWRkIGtleSB0byBxdWV1ZVxuICAgIH0pOyAvL2lmIGFueSBrZXkgaXMgbWlzc2luZyBpbiB0aGUgbmV3IHN0YXRlIHdoaWNoIHdhcyBwcmVzZW50IGluIHRoZSBsYXN0U3RhdGUsXG4gICAgLy9hZGQgaXQgZm9yIHByb2Nlc3NpbmcgdG9vXG5cbiAgICBPYmplY3Qua2V5cyhsYXN0U3RhdGUpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgaWYgKHN0YXRlW2tleV0gPT09IHVuZGVmaW5lZCAmJiBwYXNzV2hpdGVsaXN0QmxhY2tsaXN0KGtleSkgJiYga2V5c1RvUHJvY2Vzcy5pbmRleE9mKGtleSkgPT09IC0xICYmIGxhc3RTdGF0ZVtrZXldICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAga2V5c1RvUHJvY2Vzcy5wdXNoKGtleSk7XG4gICAgICB9XG4gICAgfSk7IC8vIHN0YXJ0IHRoZSB0aW1lIGl0ZXJhdG9yIGlmIG5vdCBydW5uaW5nIChyZWFkOiB0aHJvdHRsZSlcblxuICAgIGlmICh0aW1lSXRlcmF0b3IgPT09IG51bGwpIHtcbiAgICAgIHRpbWVJdGVyYXRvciA9IHNldEludGVydmFsKHByb2Nlc3NOZXh0S2V5LCB0aHJvdHRsZSk7XG4gICAgfVxuXG4gICAgbGFzdFN0YXRlID0gc3RhdGU7XG4gIH07XG5cbiAgZnVuY3Rpb24gcHJvY2Vzc05leHRLZXkoKSB7XG4gICAgaWYgKGtleXNUb1Byb2Nlc3MubGVuZ3RoID09PSAwKSB7XG4gICAgICBpZiAodGltZUl0ZXJhdG9yKSBjbGVhckludGVydmFsKHRpbWVJdGVyYXRvcik7XG4gICAgICB0aW1lSXRlcmF0b3IgPSBudWxsO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciBrZXkgPSBrZXlzVG9Qcm9jZXNzLnNoaWZ0KCk7XG4gICAgdmFyIGVuZFN0YXRlID0gdHJhbnNmb3Jtcy5yZWR1Y2UoZnVuY3Rpb24gKHN1YlN0YXRlLCB0cmFuc2Zvcm1lcikge1xuICAgICAgcmV0dXJuIHRyYW5zZm9ybWVyLmluKHN1YlN0YXRlLCBrZXksIGxhc3RTdGF0ZSk7XG4gICAgfSwgbGFzdFN0YXRlW2tleV0pO1xuXG4gICAgaWYgKGVuZFN0YXRlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHN0YWdlZFN0YXRlW2tleV0gPSBzZXJpYWxpemUoZW5kU3RhdGUpO1xuICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ3JlZHV4LXBlcnNpc3QvY3JlYXRlUGVyc2lzdG9pZDogZXJyb3Igc2VyaWFsaXppbmcgc3RhdGUnLCBlcnIpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAvL2lmIHRoZSBlbmRTdGF0ZSBpcyB1bmRlZmluZWQsIG5vIG5lZWQgdG8gcGVyc2lzdCB0aGUgZXhpc3Rpbmcgc2VyaWFsaXplZCBjb250ZW50XG4gICAgICBkZWxldGUgc3RhZ2VkU3RhdGVba2V5XTtcbiAgICB9XG5cbiAgICBpZiAoa2V5c1RvUHJvY2Vzcy5sZW5ndGggPT09IDApIHtcbiAgICAgIHdyaXRlU3RhZ2VkU3RhdGUoKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiB3cml0ZVN0YWdlZFN0YXRlKCkge1xuICAgIC8vIGNsZWFudXAgYW55IHJlbW92ZWQga2V5cyBqdXN0IGJlZm9yZSB3cml0ZS5cbiAgICBPYmplY3Qua2V5cyhzdGFnZWRTdGF0ZSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICBpZiAobGFzdFN0YXRlW2tleV0gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBkZWxldGUgc3RhZ2VkU3RhdGVba2V5XTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICB3cml0ZVByb21pc2UgPSBzdG9yYWdlLnNldEl0ZW0oc3RvcmFnZUtleSwgc2VyaWFsaXplKHN0YWdlZFN0YXRlKSkuY2F0Y2gob25Xcml0ZUZhaWwpO1xuICB9XG5cbiAgZnVuY3Rpb24gcGFzc1doaXRlbGlzdEJsYWNrbGlzdChrZXkpIHtcbiAgICBpZiAod2hpdGVsaXN0ICYmIHdoaXRlbGlzdC5pbmRleE9mKGtleSkgPT09IC0xICYmIGtleSAhPT0gJ19wZXJzaXN0JykgcmV0dXJuIGZhbHNlO1xuICAgIGlmIChibGFja2xpc3QgJiYgYmxhY2tsaXN0LmluZGV4T2Yoa2V5KSAhPT0gLTEpIHJldHVybiBmYWxzZTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIG9uV3JpdGVGYWlsKGVycikge1xuICAgIC8vIEBUT0RPIGFkZCBmYWlsIGhhbmRsZXJzICh0eXBpY2FsbHkgc3RvcmFnZSBmdWxsKVxuICAgIGlmICh3cml0ZUZhaWxIYW5kbGVyKSB3cml0ZUZhaWxIYW5kbGVyKGVycik7XG5cbiAgICBpZiAoZXJyICYmIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIHN0b3JpbmcgZGF0YScsIGVycik7XG4gICAgfVxuICB9XG5cbiAgdmFyIGZsdXNoID0gZnVuY3Rpb24gZmx1c2goKSB7XG4gICAgd2hpbGUgKGtleXNUb1Byb2Nlc3MubGVuZ3RoICE9PSAwKSB7XG4gICAgICBwcm9jZXNzTmV4dEtleSgpO1xuICAgIH1cblxuICAgIHJldHVybiB3cml0ZVByb21pc2UgfHwgUHJvbWlzZS5yZXNvbHZlKCk7XG4gIH07IC8vIHJldHVybiBgcGVyc2lzdG9pZGBcblxuXG4gIHJldHVybiB7XG4gICAgdXBkYXRlOiB1cGRhdGUsXG4gICAgZmx1c2g6IGZsdXNoXG4gIH07XG59IC8vIEBOT1RFIGluIHRoZSBmdXR1cmUgdGhpcyBtYXkgYmUgZXhwb3NlZCB2aWEgY29uZmlnXG5cbmZ1bmN0aW9uIGRlZmF1bHRTZXJpYWxpemUoZGF0YSkge1xuICByZXR1cm4gSlNPTi5zdHJpbmdpZnkoZGF0YSk7XG59IiwiaW1wb3J0IHsgS0VZX1BSRUZJWCB9IGZyb20gJy4vY29uc3RhbnRzJztcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldFN0b3JlZFN0YXRlKGNvbmZpZykge1xuICB2YXIgdHJhbnNmb3JtcyA9IGNvbmZpZy50cmFuc2Zvcm1zIHx8IFtdO1xuICB2YXIgc3RvcmFnZUtleSA9IFwiXCIuY29uY2F0KGNvbmZpZy5rZXlQcmVmaXggIT09IHVuZGVmaW5lZCA/IGNvbmZpZy5rZXlQcmVmaXggOiBLRVlfUFJFRklYKS5jb25jYXQoY29uZmlnLmtleSk7XG4gIHZhciBzdG9yYWdlID0gY29uZmlnLnN0b3JhZ2U7XG4gIHZhciBkZWJ1ZyA9IGNvbmZpZy5kZWJ1ZztcbiAgdmFyIGRlc2VyaWFsaXplO1xuXG4gIGlmIChjb25maWcuZGVzZXJpYWxpemUgPT09IGZhbHNlKSB7XG4gICAgZGVzZXJpYWxpemUgPSBmdW5jdGlvbiBkZXNlcmlhbGl6ZSh4KSB7XG4gICAgICByZXR1cm4geDtcbiAgICB9O1xuICB9IGVsc2UgaWYgKHR5cGVvZiBjb25maWcuZGVzZXJpYWxpemUgPT09ICdmdW5jdGlvbicpIHtcbiAgICBkZXNlcmlhbGl6ZSA9IGNvbmZpZy5kZXNlcmlhbGl6ZTtcbiAgfSBlbHNlIHtcbiAgICBkZXNlcmlhbGl6ZSA9IGRlZmF1bHREZXNlcmlhbGl6ZTtcbiAgfVxuXG4gIHJldHVybiBzdG9yYWdlLmdldEl0ZW0oc3RvcmFnZUtleSkudGhlbihmdW5jdGlvbiAoc2VyaWFsaXplZCkge1xuICAgIGlmICghc2VyaWFsaXplZCkgcmV0dXJuIHVuZGVmaW5lZDtlbHNlIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHZhciBzdGF0ZSA9IHt9O1xuICAgICAgICB2YXIgcmF3U3RhdGUgPSBkZXNlcmlhbGl6ZShzZXJpYWxpemVkKTtcbiAgICAgICAgT2JqZWN0LmtleXMocmF3U3RhdGUpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgICAgIHN0YXRlW2tleV0gPSB0cmFuc2Zvcm1zLnJlZHVjZVJpZ2h0KGZ1bmN0aW9uIChzdWJTdGF0ZSwgdHJhbnNmb3JtZXIpIHtcbiAgICAgICAgICAgIHJldHVybiB0cmFuc2Zvcm1lci5vdXQoc3ViU3RhdGUsIGtleSwgcmF3U3RhdGUpO1xuICAgICAgICAgIH0sIGRlc2VyaWFsaXplKHJhd1N0YXRlW2tleV0pKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBzdGF0ZTtcbiAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBkZWJ1ZykgY29uc29sZS5sb2coXCJyZWR1eC1wZXJzaXN0L2dldFN0b3JlZFN0YXRlOiBFcnJvciByZXN0b3JpbmcgZGF0YSBcIi5jb25jYXQoc2VyaWFsaXplZCksIGVycik7XG4gICAgICAgIHRocm93IGVycjtcbiAgICAgIH1cbiAgICB9XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBkZWZhdWx0RGVzZXJpYWxpemUoc2VyaWFsKSB7XG4gIHJldHVybiBKU09OLnBhcnNlKHNlcmlhbCk7XG59IiwiaW1wb3J0IHsgS0VZX1BSRUZJWCB9IGZyb20gJy4vY29uc3RhbnRzJztcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHB1cmdlU3RvcmVkU3RhdGUoY29uZmlnKSB7XG4gIHZhciBzdG9yYWdlID0gY29uZmlnLnN0b3JhZ2U7XG4gIHZhciBzdG9yYWdlS2V5ID0gXCJcIi5jb25jYXQoY29uZmlnLmtleVByZWZpeCAhPT0gdW5kZWZpbmVkID8gY29uZmlnLmtleVByZWZpeCA6IEtFWV9QUkVGSVgpLmNvbmNhdChjb25maWcua2V5KTtcbiAgcmV0dXJuIHN0b3JhZ2UucmVtb3ZlSXRlbShzdG9yYWdlS2V5LCB3YXJuSWZSZW1vdmVFcnJvcik7XG59XG5cbmZ1bmN0aW9uIHdhcm5JZlJlbW92ZUVycm9yKGVycikge1xuICBpZiAoZXJyICYmIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBjb25zb2xlLmVycm9yKCdyZWR1eC1wZXJzaXN0L3B1cmdlU3RvcmVkU3RhdGU6IEVycm9yIHB1cmdpbmcgZGF0YSBzdG9yZWQgc3RhdGUnLCBlcnIpO1xuICB9XG59IiwiZnVuY3Rpb24gb3duS2V5cyhvYmplY3QsIGVudW1lcmFibGVPbmx5KSB7IHZhciBrZXlzID0gT2JqZWN0LmtleXMob2JqZWN0KTsgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHsgdmFyIHN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKG9iamVjdCk7IGlmIChlbnVtZXJhYmxlT25seSkgc3ltYm9scyA9IHN5bWJvbHMuZmlsdGVyKGZ1bmN0aW9uIChzeW0pIHsgcmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqZWN0LCBzeW0pLmVudW1lcmFibGU7IH0pOyBrZXlzLnB1c2guYXBwbHkoa2V5cywgc3ltYm9scyk7IH0gcmV0dXJuIGtleXM7IH1cblxuZnVuY3Rpb24gX29iamVjdFNwcmVhZCh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXSAhPSBudWxsID8gYXJndW1lbnRzW2ldIDoge307IGlmIChpICUgMikgeyBvd25LZXlzKHNvdXJjZSwgdHJ1ZSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7IF9kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgc291cmNlW2tleV0pOyB9KTsgfSBlbHNlIGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycykgeyBPYmplY3QuZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKHNvdXJjZSkpOyB9IGVsc2UgeyBvd25LZXlzKHNvdXJjZSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihzb3VyY2UsIGtleSkpOyB9KTsgfSB9IHJldHVybiB0YXJnZXQ7IH1cblxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkgeyBpZiAoa2V5IGluIG9iaikgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHsgdmFsdWU6IHZhbHVlLCBlbnVtZXJhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUsIHdyaXRhYmxlOiB0cnVlIH0pOyB9IGVsc2UgeyBvYmpba2V5XSA9IHZhbHVlOyB9IHJldHVybiBvYmo7IH1cblxuZnVuY3Rpb24gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKHNvdXJjZSwgZXhjbHVkZWQpIHsgaWYgKHNvdXJjZSA9PSBudWxsKSByZXR1cm4ge307IHZhciB0YXJnZXQgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShzb3VyY2UsIGV4Y2x1ZGVkKTsgdmFyIGtleSwgaTsgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHsgdmFyIHNvdXJjZVN5bWJvbEtleXMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKHNvdXJjZSk7IGZvciAoaSA9IDA7IGkgPCBzb3VyY2VTeW1ib2xLZXlzLmxlbmd0aDsgaSsrKSB7IGtleSA9IHNvdXJjZVN5bWJvbEtleXNbaV07IGlmIChleGNsdWRlZC5pbmRleE9mKGtleSkgPj0gMCkgY29udGludWU7IGlmICghT2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKHNvdXJjZSwga2V5KSkgY29udGludWU7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSByZXR1cm4gdGFyZ2V0OyB9XG5cbmZ1bmN0aW9uIF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHNvdXJjZSwgZXhjbHVkZWQpIHsgaWYgKHNvdXJjZSA9PSBudWxsKSByZXR1cm4ge307IHZhciB0YXJnZXQgPSB7fTsgdmFyIHNvdXJjZUtleXMgPSBPYmplY3Qua2V5cyhzb3VyY2UpOyB2YXIga2V5LCBpOyBmb3IgKGkgPSAwOyBpIDwgc291cmNlS2V5cy5sZW5ndGg7IGkrKykgeyBrZXkgPSBzb3VyY2VLZXlzW2ldOyBpZiAoZXhjbHVkZWQuaW5kZXhPZihrZXkpID49IDApIGNvbnRpbnVlOyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IHJldHVybiB0YXJnZXQ7IH1cblxuaW1wb3J0IHsgRkxVU0gsIFBBVVNFLCBQRVJTSVNULCBQVVJHRSwgUkVIWURSQVRFLCBERUZBVUxUX1ZFUlNJT04gfSBmcm9tICcuL2NvbnN0YW50cyc7XG5pbXBvcnQgYXV0b01lcmdlTGV2ZWwxIGZyb20gJy4vc3RhdGVSZWNvbmNpbGVyL2F1dG9NZXJnZUxldmVsMSc7XG5pbXBvcnQgY3JlYXRlUGVyc2lzdG9pZCBmcm9tICcuL2NyZWF0ZVBlcnNpc3RvaWQnO1xuaW1wb3J0IGRlZmF1bHRHZXRTdG9yZWRTdGF0ZSBmcm9tICcuL2dldFN0b3JlZFN0YXRlJztcbmltcG9ydCBwdXJnZVN0b3JlZFN0YXRlIGZyb20gJy4vcHVyZ2VTdG9yZWRTdGF0ZSc7XG52YXIgREVGQVVMVF9USU1FT1VUID0gNTAwMDtcbi8qXG4gIEBUT0RPIGFkZCB2YWxpZGF0aW9uIC8gaGFuZGxpbmcgZm9yOlxuICAtIHBlcnNpc3RpbmcgYSByZWR1Y2VyIHdoaWNoIGhhcyBuZXN0ZWQgX3BlcnNpc3RcbiAgLSBoYW5kbGluZyBhY3Rpb25zIHRoYXQgZmlyZSBiZWZvcmUgcmV5ZHJhdGUgaXMgY2FsbGVkXG4qL1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBwZXJzaXN0UmVkdWNlcihjb25maWcsIGJhc2VSZWR1Y2VyKSB7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgaWYgKCFjb25maWcpIHRocm93IG5ldyBFcnJvcignY29uZmlnIGlzIHJlcXVpcmVkIGZvciBwZXJzaXN0UmVkdWNlcicpO1xuICAgIGlmICghY29uZmlnLmtleSkgdGhyb3cgbmV3IEVycm9yKCdrZXkgaXMgcmVxdWlyZWQgaW4gcGVyc2lzdG9yIGNvbmZpZycpO1xuICAgIGlmICghY29uZmlnLnN0b3JhZ2UpIHRocm93IG5ldyBFcnJvcihcInJlZHV4LXBlcnNpc3Q6IGNvbmZpZy5zdG9yYWdlIGlzIHJlcXVpcmVkLiBUcnkgdXNpbmcgb25lIG9mIHRoZSBwcm92aWRlZCBzdG9yYWdlIGVuZ2luZXMgYGltcG9ydCBzdG9yYWdlIGZyb20gJ3JlZHV4LXBlcnNpc3QvbGliL3N0b3JhZ2UnYFwiKTtcbiAgfVxuXG4gIHZhciB2ZXJzaW9uID0gY29uZmlnLnZlcnNpb24gIT09IHVuZGVmaW5lZCA/IGNvbmZpZy52ZXJzaW9uIDogREVGQVVMVF9WRVJTSU9OO1xuICB2YXIgZGVidWcgPSBjb25maWcuZGVidWcgfHwgZmFsc2U7XG4gIHZhciBzdGF0ZVJlY29uY2lsZXIgPSBjb25maWcuc3RhdGVSZWNvbmNpbGVyID09PSB1bmRlZmluZWQgPyBhdXRvTWVyZ2VMZXZlbDEgOiBjb25maWcuc3RhdGVSZWNvbmNpbGVyO1xuICB2YXIgZ2V0U3RvcmVkU3RhdGUgPSBjb25maWcuZ2V0U3RvcmVkU3RhdGUgfHwgZGVmYXVsdEdldFN0b3JlZFN0YXRlO1xuICB2YXIgdGltZW91dCA9IGNvbmZpZy50aW1lb3V0ICE9PSB1bmRlZmluZWQgPyBjb25maWcudGltZW91dCA6IERFRkFVTFRfVElNRU9VVDtcbiAgdmFyIF9wZXJzaXN0b2lkID0gbnVsbDtcbiAgdmFyIF9wdXJnZSA9IGZhbHNlO1xuICB2YXIgX3BhdXNlZCA9IHRydWU7XG5cbiAgdmFyIGNvbmRpdGlvbmFsVXBkYXRlID0gZnVuY3Rpb24gY29uZGl0aW9uYWxVcGRhdGUoc3RhdGUpIHtcbiAgICAvLyB1cGRhdGUgdGhlIHBlcnNpc3RvaWQgb25seSBpZiB3ZSBhcmUgcmVoeWRyYXRlZCBhbmQgbm90IHBhdXNlZFxuICAgIHN0YXRlLl9wZXJzaXN0LnJlaHlkcmF0ZWQgJiYgX3BlcnNpc3RvaWQgJiYgIV9wYXVzZWQgJiYgX3BlcnNpc3RvaWQudXBkYXRlKHN0YXRlKTtcbiAgICByZXR1cm4gc3RhdGU7XG4gIH07XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIChzdGF0ZSwgYWN0aW9uKSB7XG4gICAgdmFyIF9yZWYgPSBzdGF0ZSB8fCB7fSxcbiAgICAgICAgX3BlcnNpc3QgPSBfcmVmLl9wZXJzaXN0LFxuICAgICAgICByZXN0ID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKF9yZWYsIFtcIl9wZXJzaXN0XCJdKTsgLy8gJEZsb3dJZ25vcmUgbmVlZCB0byB1cGRhdGUgU3RhdGUgdHlwZVxuXG5cbiAgICB2YXIgcmVzdFN0YXRlID0gcmVzdDtcblxuICAgIGlmIChhY3Rpb24udHlwZSA9PT0gUEVSU0lTVCkge1xuICAgICAgdmFyIF9zZWFsZWQgPSBmYWxzZTtcblxuICAgICAgdmFyIF9yZWh5ZHJhdGUgPSBmdW5jdGlvbiBfcmVoeWRyYXRlKHBheWxvYWQsIGVycikge1xuICAgICAgICAvLyBkZXYgd2FybmluZyBpZiB3ZSBhcmUgYWxyZWFkeSBzZWFsZWRcbiAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgX3NlYWxlZCkgY29uc29sZS5lcnJvcihcInJlZHV4LXBlcnNpc3Q6IHJlaHlkcmF0ZSBmb3IgXFxcIlwiLmNvbmNhdChjb25maWcua2V5LCBcIlxcXCIgY2FsbGVkIGFmdGVyIHRpbWVvdXQuXCIpLCBwYXlsb2FkLCBlcnIpOyAvLyBvbmx5IHJlaHlkcmF0ZSBpZiB3ZSBhcmUgbm90IGFscmVhZHkgc2VhbGVkXG5cbiAgICAgICAgaWYgKCFfc2VhbGVkKSB7XG4gICAgICAgICAgYWN0aW9uLnJlaHlkcmF0ZShjb25maWcua2V5LCBwYXlsb2FkLCBlcnIpO1xuICAgICAgICAgIF9zZWFsZWQgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9O1xuXG4gICAgICB0aW1lb3V0ICYmIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAhX3NlYWxlZCAmJiBfcmVoeWRyYXRlKHVuZGVmaW5lZCwgbmV3IEVycm9yKFwicmVkdXgtcGVyc2lzdDogcGVyc2lzdCB0aW1lZCBvdXQgZm9yIHBlcnNpc3Qga2V5IFxcXCJcIi5jb25jYXQoY29uZmlnLmtleSwgXCJcXFwiXCIpKSk7XG4gICAgICB9LCB0aW1lb3V0KTsgLy8gQE5PVEUgUEVSU0lTVCByZXN1bWVzIGlmIHBhdXNlZC5cblxuICAgICAgX3BhdXNlZCA9IGZhbHNlOyAvLyBATk9URSBvbmx5IGV2ZXIgY3JlYXRlIHBlcnNpc3RvaWQgb25jZSwgZW5zdXJlIHdlIGNhbGwgaXQgYXQgbGVhc3Qgb25jZSwgZXZlbiBpZiBfcGVyc2lzdCBoYXMgYWxyZWFkeSBiZWVuIHNldFxuXG4gICAgICBpZiAoIV9wZXJzaXN0b2lkKSBfcGVyc2lzdG9pZCA9IGNyZWF0ZVBlcnNpc3RvaWQoY29uZmlnKTsgLy8gQE5PVEUgUEVSU0lTVCBjYW4gYmUgY2FsbGVkIG11bHRpcGxlIHRpbWVzLCBub29wIGFmdGVyIHRoZSBmaXJzdFxuXG4gICAgICBpZiAoX3BlcnNpc3QpIHtcbiAgICAgICAgLy8gV2Ugc3RpbGwgbmVlZCB0byBjYWxsIHRoZSBiYXNlIHJlZHVjZXIgYmVjYXVzZSB0aGVyZSBtaWdodCBiZSBuZXN0ZWRcbiAgICAgICAgLy8gdXNlcyBvZiBwZXJzaXN0UmVkdWNlciB3aGljaCBuZWVkIHRvIGJlIGF3YXJlIG9mIHRoZSBQRVJTSVNUIGFjdGlvblxuICAgICAgICByZXR1cm4gX29iamVjdFNwcmVhZCh7fSwgYmFzZVJlZHVjZXIocmVzdFN0YXRlLCBhY3Rpb24pLCB7XG4gICAgICAgICAgX3BlcnNpc3Q6IF9wZXJzaXN0XG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICBpZiAodHlwZW9mIGFjdGlvbi5yZWh5ZHJhdGUgIT09ICdmdW5jdGlvbicgfHwgdHlwZW9mIGFjdGlvbi5yZWdpc3RlciAhPT0gJ2Z1bmN0aW9uJykgdGhyb3cgbmV3IEVycm9yKCdyZWR1eC1wZXJzaXN0OiBlaXRoZXIgcmVoeWRyYXRlIG9yIHJlZ2lzdGVyIGlzIG5vdCBhIGZ1bmN0aW9uIG9uIHRoZSBQRVJTSVNUIGFjdGlvbi4gVGhpcyBjYW4gaGFwcGVuIGlmIHRoZSBhY3Rpb24gaXMgYmVpbmcgcmVwbGF5ZWQuIFRoaXMgaXMgYW4gdW5leHBsb3JlZCB1c2UgY2FzZSwgcGxlYXNlIG9wZW4gYW4gaXNzdWUgYW5kIHdlIHdpbGwgZmlndXJlIG91dCBhIHJlc29sdXRpb24uJyk7XG4gICAgICBhY3Rpb24ucmVnaXN0ZXIoY29uZmlnLmtleSk7XG4gICAgICBnZXRTdG9yZWRTdGF0ZShjb25maWcpLnRoZW4oZnVuY3Rpb24gKHJlc3RvcmVkU3RhdGUpIHtcbiAgICAgICAgdmFyIG1pZ3JhdGUgPSBjb25maWcubWlncmF0ZSB8fCBmdW5jdGlvbiAocywgdikge1xuICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUocyk7XG4gICAgICAgIH07XG5cbiAgICAgICAgbWlncmF0ZShyZXN0b3JlZFN0YXRlLCB2ZXJzaW9uKS50aGVuKGZ1bmN0aW9uIChtaWdyYXRlZFN0YXRlKSB7XG4gICAgICAgICAgX3JlaHlkcmF0ZShtaWdyYXRlZFN0YXRlKTtcbiAgICAgICAgfSwgZnVuY3Rpb24gKG1pZ3JhdGVFcnIpIHtcbiAgICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBtaWdyYXRlRXJyKSBjb25zb2xlLmVycm9yKCdyZWR1eC1wZXJzaXN0OiBtaWdyYXRpb24gZXJyb3InLCBtaWdyYXRlRXJyKTtcblxuICAgICAgICAgIF9yZWh5ZHJhdGUodW5kZWZpbmVkLCBtaWdyYXRlRXJyKTtcbiAgICAgICAgfSk7XG4gICAgICB9LCBmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgIF9yZWh5ZHJhdGUodW5kZWZpbmVkLCBlcnIpO1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gX29iamVjdFNwcmVhZCh7fSwgYmFzZVJlZHVjZXIocmVzdFN0YXRlLCBhY3Rpb24pLCB7XG4gICAgICAgIF9wZXJzaXN0OiB7XG4gICAgICAgICAgdmVyc2lvbjogdmVyc2lvbixcbiAgICAgICAgICByZWh5ZHJhdGVkOiBmYWxzZVxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9IGVsc2UgaWYgKGFjdGlvbi50eXBlID09PSBQVVJHRSkge1xuICAgICAgX3B1cmdlID0gdHJ1ZTtcbiAgICAgIGFjdGlvbi5yZXN1bHQocHVyZ2VTdG9yZWRTdGF0ZShjb25maWcpKTtcbiAgICAgIHJldHVybiBfb2JqZWN0U3ByZWFkKHt9LCBiYXNlUmVkdWNlcihyZXN0U3RhdGUsIGFjdGlvbiksIHtcbiAgICAgICAgX3BlcnNpc3Q6IF9wZXJzaXN0XG4gICAgICB9KTtcbiAgICB9IGVsc2UgaWYgKGFjdGlvbi50eXBlID09PSBGTFVTSCkge1xuICAgICAgYWN0aW9uLnJlc3VsdChfcGVyc2lzdG9pZCAmJiBfcGVyc2lzdG9pZC5mbHVzaCgpKTtcbiAgICAgIHJldHVybiBfb2JqZWN0U3ByZWFkKHt9LCBiYXNlUmVkdWNlcihyZXN0U3RhdGUsIGFjdGlvbiksIHtcbiAgICAgICAgX3BlcnNpc3Q6IF9wZXJzaXN0XG4gICAgICB9KTtcbiAgICB9IGVsc2UgaWYgKGFjdGlvbi50eXBlID09PSBQQVVTRSkge1xuICAgICAgX3BhdXNlZCA9IHRydWU7XG4gICAgfSBlbHNlIGlmIChhY3Rpb24udHlwZSA9PT0gUkVIWURSQVRFKSB7XG4gICAgICAvLyBub29wIG9uIHJlc3RTdGF0ZSBpZiBwdXJnaW5nXG4gICAgICBpZiAoX3B1cmdlKSByZXR1cm4gX29iamVjdFNwcmVhZCh7fSwgcmVzdFN0YXRlLCB7XG4gICAgICAgIF9wZXJzaXN0OiBfb2JqZWN0U3ByZWFkKHt9LCBfcGVyc2lzdCwge1xuICAgICAgICAgIHJlaHlkcmF0ZWQ6IHRydWVcbiAgICAgICAgfSkgLy8gQE5PVEUgaWYga2V5IGRvZXMgbm90IG1hdGNoLCB3aWxsIGNvbnRpbnVlIHRvIGRlZmF1bHQgZWxzZSBiZWxvd1xuXG4gICAgICB9KTtcblxuICAgICAgaWYgKGFjdGlvbi5rZXkgPT09IGNvbmZpZy5rZXkpIHtcbiAgICAgICAgdmFyIHJlZHVjZWRTdGF0ZSA9IGJhc2VSZWR1Y2VyKHJlc3RTdGF0ZSwgYWN0aW9uKTtcbiAgICAgICAgdmFyIGluYm91bmRTdGF0ZSA9IGFjdGlvbi5wYXlsb2FkOyAvLyBvbmx5IHJlY29uY2lsZSBzdGF0ZSBpZiBzdGF0ZVJlY29uY2lsZXIgYW5kIGluYm91bmRTdGF0ZSBhcmUgYm90aCBkZWZpbmVkXG5cbiAgICAgICAgdmFyIHJlY29uY2lsZWRSZXN0ID0gc3RhdGVSZWNvbmNpbGVyICE9PSBmYWxzZSAmJiBpbmJvdW5kU3RhdGUgIT09IHVuZGVmaW5lZCA/IHN0YXRlUmVjb25jaWxlcihpbmJvdW5kU3RhdGUsIHN0YXRlLCByZWR1Y2VkU3RhdGUsIGNvbmZpZykgOiByZWR1Y2VkU3RhdGU7XG5cbiAgICAgICAgdmFyIF9uZXdTdGF0ZSA9IF9vYmplY3RTcHJlYWQoe30sIHJlY29uY2lsZWRSZXN0LCB7XG4gICAgICAgICAgX3BlcnNpc3Q6IF9vYmplY3RTcHJlYWQoe30sIF9wZXJzaXN0LCB7XG4gICAgICAgICAgICByZWh5ZHJhdGVkOiB0cnVlXG4gICAgICAgICAgfSlcbiAgICAgICAgfSk7XG5cbiAgICAgICAgcmV0dXJuIGNvbmRpdGlvbmFsVXBkYXRlKF9uZXdTdGF0ZSk7XG4gICAgICB9XG4gICAgfSAvLyBpZiB3ZSBoYXZlIG5vdCBhbHJlYWR5IGhhbmRsZWQgUEVSU0lTVCwgc3RyYWlnaHQgcGFzc3Rocm91Z2hcblxuXG4gICAgaWYgKCFfcGVyc2lzdCkgcmV0dXJuIGJhc2VSZWR1Y2VyKHN0YXRlLCBhY3Rpb24pOyAvLyBydW4gYmFzZSByZWR1Y2VyOlxuICAgIC8vIGlzIHN0YXRlIG1vZGlmaWVkID8gcmV0dXJuIG9yaWdpbmFsIDogcmV0dXJuIHVwZGF0ZWRcblxuICAgIHZhciBuZXdTdGF0ZSA9IGJhc2VSZWR1Y2VyKHJlc3RTdGF0ZSwgYWN0aW9uKTtcbiAgICBpZiAobmV3U3RhdGUgPT09IHJlc3RTdGF0ZSkgcmV0dXJuIHN0YXRlO1xuICAgIHJldHVybiBjb25kaXRpb25hbFVwZGF0ZShfb2JqZWN0U3ByZWFkKHt9LCBuZXdTdGF0ZSwge1xuICAgICAgX3BlcnNpc3Q6IF9wZXJzaXN0XG4gICAgfSkpO1xuICB9O1xufSIsImZ1bmN0aW9uIF90b0NvbnN1bWFibGVBcnJheShhcnIpIHsgcmV0dXJuIF9hcnJheVdpdGhvdXRIb2xlcyhhcnIpIHx8IF9pdGVyYWJsZVRvQXJyYXkoYXJyKSB8fCBfbm9uSXRlcmFibGVTcHJlYWQoKTsgfVxuXG5mdW5jdGlvbiBfbm9uSXRlcmFibGVTcHJlYWQoKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJJbnZhbGlkIGF0dGVtcHQgdG8gc3ByZWFkIG5vbi1pdGVyYWJsZSBpbnN0YW5jZVwiKTsgfVxuXG5mdW5jdGlvbiBfaXRlcmFibGVUb0FycmF5KGl0ZXIpIHsgaWYgKFN5bWJvbC5pdGVyYXRvciBpbiBPYmplY3QoaXRlcikgfHwgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGl0ZXIpID09PSBcIltvYmplY3QgQXJndW1lbnRzXVwiKSByZXR1cm4gQXJyYXkuZnJvbShpdGVyKTsgfVxuXG5mdW5jdGlvbiBfYXJyYXlXaXRob3V0SG9sZXMoYXJyKSB7IGlmIChBcnJheS5pc0FycmF5KGFycikpIHsgZm9yICh2YXIgaSA9IDAsIGFycjIgPSBuZXcgQXJyYXkoYXJyLmxlbmd0aCk7IGkgPCBhcnIubGVuZ3RoOyBpKyspIHsgYXJyMltpXSA9IGFycltpXTsgfSByZXR1cm4gYXJyMjsgfSB9XG5cbmZ1bmN0aW9uIG93bktleXMob2JqZWN0LCBlbnVtZXJhYmxlT25seSkgeyB2YXIga2V5cyA9IE9iamVjdC5rZXlzKG9iamVjdCk7IGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7IHZhciBzeW1ib2xzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhvYmplY3QpOyBpZiAoZW51bWVyYWJsZU9ubHkpIHN5bWJvbHMgPSBzeW1ib2xzLmZpbHRlcihmdW5jdGlvbiAoc3ltKSB7IHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iamVjdCwgc3ltKS5lbnVtZXJhYmxlOyB9KTsga2V5cy5wdXNoLmFwcGx5KGtleXMsIHN5bWJvbHMpOyB9IHJldHVybiBrZXlzOyB9XG5cbmZ1bmN0aW9uIF9vYmplY3RTcHJlYWQodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV0gIT0gbnVsbCA/IGFyZ3VtZW50c1tpXSA6IHt9OyBpZiAoaSAlIDIpIHsgb3duS2V5cyhzb3VyY2UsIHRydWUpLmZvckVhY2goZnVuY3Rpb24gKGtleSkgeyBfZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHNvdXJjZVtrZXldKTsgfSk7IH0gZWxzZSBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMpIHsgT2JqZWN0LmRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyhzb3VyY2UpKTsgfSBlbHNlIHsgb3duS2V5cyhzb3VyY2UpLmZvckVhY2goZnVuY3Rpb24gKGtleSkgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Ioc291cmNlLCBrZXkpKTsgfSk7IH0gfSByZXR1cm4gdGFyZ2V0OyB9XG5cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHsgaWYgKGtleSBpbiBvYmopIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7IHZhbHVlOiB2YWx1ZSwgZW51bWVyYWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlLCB3cml0YWJsZTogdHJ1ZSB9KTsgfSBlbHNlIHsgb2JqW2tleV0gPSB2YWx1ZTsgfSByZXR1cm4gb2JqOyB9XG5cbmltcG9ydCB7IGNyZWF0ZVN0b3JlIH0gZnJvbSAncmVkdXgnO1xuaW1wb3J0IHsgRkxVU0gsIFBBVVNFLCBQRVJTSVNULCBQVVJHRSwgUkVHSVNURVIsIFJFSFlEUkFURSB9IGZyb20gJy4vY29uc3RhbnRzJztcbnZhciBpbml0aWFsU3RhdGUgPSB7XG4gIHJlZ2lzdHJ5OiBbXSxcbiAgYm9vdHN0cmFwcGVkOiBmYWxzZVxufTtcblxudmFyIHBlcnNpc3RvclJlZHVjZXIgPSBmdW5jdGlvbiBwZXJzaXN0b3JSZWR1Y2VyKCkge1xuICB2YXIgc3RhdGUgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IGluaXRpYWxTdGF0ZTtcbiAgdmFyIGFjdGlvbiA9IGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkO1xuXG4gIHN3aXRjaCAoYWN0aW9uLnR5cGUpIHtcbiAgICBjYXNlIFJFR0lTVEVSOlxuICAgICAgcmV0dXJuIF9vYmplY3RTcHJlYWQoe30sIHN0YXRlLCB7XG4gICAgICAgIHJlZ2lzdHJ5OiBbXS5jb25jYXQoX3RvQ29uc3VtYWJsZUFycmF5KHN0YXRlLnJlZ2lzdHJ5KSwgW2FjdGlvbi5rZXldKVxuICAgICAgfSk7XG5cbiAgICBjYXNlIFJFSFlEUkFURTpcbiAgICAgIHZhciBmaXJzdEluZGV4ID0gc3RhdGUucmVnaXN0cnkuaW5kZXhPZihhY3Rpb24ua2V5KTtcblxuICAgICAgdmFyIHJlZ2lzdHJ5ID0gX3RvQ29uc3VtYWJsZUFycmF5KHN0YXRlLnJlZ2lzdHJ5KTtcblxuICAgICAgcmVnaXN0cnkuc3BsaWNlKGZpcnN0SW5kZXgsIDEpO1xuICAgICAgcmV0dXJuIF9vYmplY3RTcHJlYWQoe30sIHN0YXRlLCB7XG4gICAgICAgIHJlZ2lzdHJ5OiByZWdpc3RyeSxcbiAgICAgICAgYm9vdHN0cmFwcGVkOiByZWdpc3RyeS5sZW5ndGggPT09IDBcbiAgICAgIH0pO1xuXG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiBzdGF0ZTtcbiAgfVxufTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gcGVyc2lzdFN0b3JlKHN0b3JlLCBvcHRpb25zLCBjYikge1xuICAvLyBoZWxwIGNhdGNoIGluY29ycmVjdCB1c2FnZSBvZiBwYXNzaW5nIFBlcnNpc3RDb25maWcgaW4gYXMgUGVyc2lzdG9yT3B0aW9uc1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIHZhciBvcHRpb25zVG9UZXN0ID0gb3B0aW9ucyB8fCB7fTtcbiAgICB2YXIgYmFubmVkS2V5cyA9IFsnYmxhY2tsaXN0JywgJ3doaXRlbGlzdCcsICd0cmFuc2Zvcm1zJywgJ3N0b3JhZ2UnLCAna2V5UHJlZml4JywgJ21pZ3JhdGUnXTtcbiAgICBiYW5uZWRLZXlzLmZvckVhY2goZnVuY3Rpb24gKGspIHtcbiAgICAgIGlmICghIW9wdGlvbnNUb1Rlc3Rba10pIGNvbnNvbGUuZXJyb3IoXCJyZWR1eC1wZXJzaXN0OiBpbnZhbGlkIG9wdGlvbiBwYXNzZWQgdG8gcGVyc2lzdFN0b3JlOiBcXFwiXCIuY29uY2F0KGssIFwiXFxcIi4gWW91IG1heSBiZSBpbmNvcnJlY3RseSBwYXNzaW5nIHBlcnNpc3RDb25maWcgaW50byBwZXJzaXN0U3RvcmUsIHdoZXJlYXMgaXQgc2hvdWxkIGJlIHBhc3NlZCBpbnRvIHBlcnNpc3RSZWR1Y2VyLlwiKSk7XG4gICAgfSk7XG4gIH1cblxuICB2YXIgYm9vc3RyYXBwZWRDYiA9IGNiIHx8IGZhbHNlO1xuXG4gIHZhciBfcFN0b3JlID0gY3JlYXRlU3RvcmUocGVyc2lzdG9yUmVkdWNlciwgaW5pdGlhbFN0YXRlLCBvcHRpb25zICYmIG9wdGlvbnMuZW5oYW5jZXIgPyBvcHRpb25zLmVuaGFuY2VyIDogdW5kZWZpbmVkKTtcblxuICB2YXIgcmVnaXN0ZXIgPSBmdW5jdGlvbiByZWdpc3RlcihrZXkpIHtcbiAgICBfcFN0b3JlLmRpc3BhdGNoKHtcbiAgICAgIHR5cGU6IFJFR0lTVEVSLFxuICAgICAga2V5OiBrZXlcbiAgICB9KTtcbiAgfTtcblxuICB2YXIgcmVoeWRyYXRlID0gZnVuY3Rpb24gcmVoeWRyYXRlKGtleSwgcGF5bG9hZCwgZXJyKSB7XG4gICAgdmFyIHJlaHlkcmF0ZUFjdGlvbiA9IHtcbiAgICAgIHR5cGU6IFJFSFlEUkFURSxcbiAgICAgIHBheWxvYWQ6IHBheWxvYWQsXG4gICAgICBlcnI6IGVycixcbiAgICAgIGtleToga2V5IC8vIGRpc3BhdGNoIHRvIGBzdG9yZWAgdG8gcmVoeWRyYXRlIGFuZCBgcGVyc2lzdG9yYCB0byB0cmFjayByZXN1bHRcblxuICAgIH07XG4gICAgc3RvcmUuZGlzcGF0Y2gocmVoeWRyYXRlQWN0aW9uKTtcblxuICAgIF9wU3RvcmUuZGlzcGF0Y2gocmVoeWRyYXRlQWN0aW9uKTtcblxuICAgIGlmIChib29zdHJhcHBlZENiICYmIHBlcnNpc3Rvci5nZXRTdGF0ZSgpLmJvb3RzdHJhcHBlZCkge1xuICAgICAgYm9vc3RyYXBwZWRDYigpO1xuICAgICAgYm9vc3RyYXBwZWRDYiA9IGZhbHNlO1xuICAgIH1cbiAgfTtcblxuICB2YXIgcGVyc2lzdG9yID0gX29iamVjdFNwcmVhZCh7fSwgX3BTdG9yZSwge1xuICAgIHB1cmdlOiBmdW5jdGlvbiBwdXJnZSgpIHtcbiAgICAgIHZhciByZXN1bHRzID0gW107XG4gICAgICBzdG9yZS5kaXNwYXRjaCh7XG4gICAgICAgIHR5cGU6IFBVUkdFLFxuICAgICAgICByZXN1bHQ6IGZ1bmN0aW9uIHJlc3VsdChwdXJnZVJlc3VsdCkge1xuICAgICAgICAgIHJlc3VsdHMucHVzaChwdXJnZVJlc3VsdCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIFByb21pc2UuYWxsKHJlc3VsdHMpO1xuICAgIH0sXG4gICAgZmx1c2g6IGZ1bmN0aW9uIGZsdXNoKCkge1xuICAgICAgdmFyIHJlc3VsdHMgPSBbXTtcbiAgICAgIHN0b3JlLmRpc3BhdGNoKHtcbiAgICAgICAgdHlwZTogRkxVU0gsXG4gICAgICAgIHJlc3VsdDogZnVuY3Rpb24gcmVzdWx0KGZsdXNoUmVzdWx0KSB7XG4gICAgICAgICAgcmVzdWx0cy5wdXNoKGZsdXNoUmVzdWx0KTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICByZXR1cm4gUHJvbWlzZS5hbGwocmVzdWx0cyk7XG4gICAgfSxcbiAgICBwYXVzZTogZnVuY3Rpb24gcGF1c2UoKSB7XG4gICAgICBzdG9yZS5kaXNwYXRjaCh7XG4gICAgICAgIHR5cGU6IFBBVVNFXG4gICAgICB9KTtcbiAgICB9LFxuICAgIHBlcnNpc3Q6IGZ1bmN0aW9uIHBlcnNpc3QoKSB7XG4gICAgICBzdG9yZS5kaXNwYXRjaCh7XG4gICAgICAgIHR5cGU6IFBFUlNJU1QsXG4gICAgICAgIHJlZ2lzdGVyOiByZWdpc3RlcixcbiAgICAgICAgcmVoeWRyYXRlOiByZWh5ZHJhdGVcbiAgICAgIH0pO1xuICAgIH1cbiAgfSk7XG5cbiAgaWYgKCEob3B0aW9ucyAmJiBvcHRpb25zLm1hbnVhbFBlcnNpc3QpKSB7XG4gICAgcGVyc2lzdG9yLnBlcnNpc3QoKTtcbiAgfVxuXG4gIHJldHVybiBwZXJzaXN0b3I7XG59IiwiZnVuY3Rpb24gX3RvQ29uc3VtYWJsZUFycmF5KGFycikgeyByZXR1cm4gX2FycmF5V2l0aG91dEhvbGVzKGFycikgfHwgX2l0ZXJhYmxlVG9BcnJheShhcnIpIHx8IF9ub25JdGVyYWJsZVNwcmVhZCgpOyB9XG5cbmZ1bmN0aW9uIF9ub25JdGVyYWJsZVNwcmVhZCgpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkludmFsaWQgYXR0ZW1wdCB0byBzcHJlYWQgbm9uLWl0ZXJhYmxlIGluc3RhbmNlXCIpOyB9XG5cbmZ1bmN0aW9uIF9pdGVyYWJsZVRvQXJyYXkoaXRlcikgeyBpZiAoU3ltYm9sLml0ZXJhdG9yIGluIE9iamVjdChpdGVyKSB8fCBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoaXRlcikgPT09IFwiW29iamVjdCBBcmd1bWVudHNdXCIpIHJldHVybiBBcnJheS5mcm9tKGl0ZXIpOyB9XG5cbmZ1bmN0aW9uIF9hcnJheVdpdGhvdXRIb2xlcyhhcnIpIHsgaWYgKEFycmF5LmlzQXJyYXkoYXJyKSkgeyBmb3IgKHZhciBpID0gMCwgYXJyMiA9IG5ldyBBcnJheShhcnIubGVuZ3RoKTsgaSA8IGFyci5sZW5ndGg7IGkrKykgeyBhcnIyW2ldID0gYXJyW2ldOyB9IHJldHVybiBhcnIyOyB9IH1cblxuaW1wb3J0IHsgQ0FMTF9ISVNUT1JZX01FVEhPRCB9IGZyb20gJy4vYWN0aW9ucyc7XG4vKipcbiAqIFRoaXMgbWlkZGxld2FyZSBjYXB0dXJlcyBDQUxMX0hJU1RPUllfTUVUSE9EIGFjdGlvbnMgdG8gcmVkaXJlY3QgdG8gdGhlXG4gKiBwcm92aWRlZCBoaXN0b3J5IG9iamVjdC4gVGhpcyB3aWxsIHByZXZlbnQgdGhlc2UgYWN0aW9ucyBmcm9tIHJlYWNoaW5nIHlvdXJcbiAqIHJlZHVjZXIgb3IgYW55IG1pZGRsZXdhcmUgdGhhdCBjb21lcyBhZnRlciB0aGlzIG9uZS5cbiAqL1xuXG52YXIgcm91dGVyTWlkZGxld2FyZSA9IGZ1bmN0aW9uIHJvdXRlck1pZGRsZXdhcmUoaGlzdG9yeSkge1xuICByZXR1cm4gZnVuY3Rpb24gKHN0b3JlKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChuZXh0KSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24gKGFjdGlvbikge1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzXG4gICAgICAgIGlmIChhY3Rpb24udHlwZSAhPT0gQ0FMTF9ISVNUT1JZX01FVEhPRCkge1xuICAgICAgICAgIHJldHVybiBuZXh0KGFjdGlvbik7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgX2FjdGlvbiRwYXlsb2FkID0gYWN0aW9uLnBheWxvYWQsXG4gICAgICAgICAgICBtZXRob2QgPSBfYWN0aW9uJHBheWxvYWQubWV0aG9kLFxuICAgICAgICAgICAgYXJncyA9IF9hY3Rpb24kcGF5bG9hZC5hcmdzO1xuICAgICAgICBoaXN0b3J5W21ldGhvZF0uYXBwbHkoaGlzdG9yeSwgX3RvQ29uc3VtYWJsZUFycmF5KGFyZ3MpKTtcbiAgICAgIH07XG4gICAgfTtcbiAgfTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IHJvdXRlck1pZGRsZXdhcmU7IiwiaW1wb3J0IHtcclxuICAgIHByb2ZpbGVMb2FkQWN0aW9uLFxyXG4gICAgbG9naW5BY3Rpb24sXHJcbiAgICByZWdpc3RyYXRpb25BY3Rpb24sXHJcbiAgICBSRUdJU1RSQVRJT04sXHJcbiAgICBMT0dJTixcclxufSBmcm9tICdhY3Rpb25zL3Byb2ZpbGUnXHJcbmltcG9ydCB7IGxlc3NvbnNMb2FkQWN0aW9uIH0gZnJvbSAnYWN0aW9ucy9sZXNzb25zJ1xyXG5pbXBvcnQgeyBJTklUIH0gZnJvbSAnYWN0aW9ucy9pbml0J1xyXG5cclxuZXhwb3J0IGNvbnN0IHJlZ2lzdHJhdGlvbk1pZGRsZVdhcmUgPSAoc3RvcmUpID0+IChuZXh0KSA9PiAoYWN0aW9uKSA9PiB7XHJcbiAgICBpZiAoYWN0aW9uLnR5cGUgPT09IFJFR0lTVFJBVElPTikge1xyXG4gICAgICAgIGNvbnN0IHsgcGFzc3dvcmQsIHJlUGFzc3dvcmQgfSA9IGFjdGlvbi5wYXlsb2FkXHJcbiAgICAgICAgLy/Qv9GA0L7QstC10YDQutCwINC/0LDRgNC+0LvQtdC5XHJcbiAgICAgICAgaWYgKHBhc3N3b3JkID09PSByZVBhc3N3b3JkKSB7XHJcbiAgICAgICAgICAgIC8v0L/QvtC40YHQuiDRjtC30LXRgNCwXHJcbiAgICAgICAgICAgIC8vIGZldGNoKHVybCwgb3B0aW9ucylcclxuICAgICAgICAgICAgLy8gICAgIC50aGVuKHJlcyA9PiByZXMuanNvbilcclxuICAgICAgICAgICAgLy8gICAgIC50aGVuKHVzZXJEYXRhID0+IHtcclxuICAgICAgICAgICAgLy8gICAgc3RvcmUuZGlzcGF0Y2gobG9naW5BY3Rpb24odXNlckRhdGEpKVxyXG4gICAgICAgICAgICAvL30gKVxyXG4gICAgICAgICAgICAvLyB9XHJcbiAgICAgICAgICAgIHN0b3JlLmRpc3BhdGNoKGxvZ2luQWN0aW9uKGFjdGlvbi5wYXlsb2FkKSlcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKGFjdGlvbi50eXBlID09PSBMT0dJTikge1xyXG4gICAgICAgIGlmIChcclxuICAgICAgICAgICAgYWN0aW9uLnBheWxvYWQuZW1haWwubGVuZ3RoID09PSAwIHx8XHJcbiAgICAgICAgICAgIGFjdGlvbi5wYXlsb2FkLnBhc3N3b3JkLmxlbmd0aCA9PT0gMFxyXG4gICAgICAgICkge1xyXG4gICAgICAgICAgICByZXR1cm5cclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAvL9CQ0LLRgtC+0YDQuNC30LDRhtC40Y8g0L3QsCDRgdC10YDQstC10YDQtSDQuCDQv9C+0LvRg9GH0LXQvdC40LUg0YLQvtC60LXQvdCwXHJcbiAgICAgICAgICAgIC8vIGNvbnN0IG9wdGlvbnMgPSB7XHJcbiAgICAgICAgICAgIC8vICAgICBtZXRob2Q6ICdQT1NUJyxcclxuICAgICAgICAgICAgLy8gICAgIGhlYWRlcjogeyBcIkNvbnRlbnQtVHlwZVwiOiBcImFwcGxpY2F0aW9uL2pzb25cIiB9LFxyXG4gICAgICAgICAgICAvLyAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkoe1xyXG4gICAgICAgICAgICAvLyAgICAgICAgIGVtYWlsOiBhY3Rpb24ucGF5bG9hZC5lbWFpbCxcclxuICAgICAgICAgICAgLy8gICAgICAgICBwYXNzd29yZDogYWN0aW9uLnBheWxvYWQucGFzc3dvcmRcclxuICAgICAgICAgICAgLy8gICAgIH0pXHJcbiAgICAgICAgICAgIC8vIH1cclxuICAgICAgICAgICAgLy8gY29uc3QgdXJsID0gJ2h0dHA6Ly9sb2NhbGhvc3Q6MzAwMCdcclxuXHJcbiAgICAgICAgICAgIC8vIGZldGNoKHVybCwgb3B0aW9ucylcclxuICAgICAgICAgICAgLy8gICAgIC50aGVuKHJlcyA9PiByZXMuanNvbilcclxuICAgICAgICAgICAgLy8gICAgIC50aGVuKHJlc3VsdCA9PiB7XHJcbiAgICAgICAgICAgIC8vICAgICAgICAgY29uc29sZS5sb2cocmVzdWx0KVxyXG4gICAgICAgICAgICAvLyAgICAgfSlcclxuXHJcbiAgICAgICAgICAgIC8vICAgICBpZiAoIXJlc3VsdC50b2tlbikge1xyXG4gICAgICAgICAgICAvLyAgICAgcmV0dXJuXHJcbiAgICAgICAgICAgIC8vIH1cclxuXHJcbiAgICAgICAgICAgIC8vIGFjdGlvbi5wYXlsb2FkID0ge1xyXG4gICAgICAgICAgICAvLyAgICAgLi4ucmVzdWx0XHJcbiAgICAgICAgICAgIC8vIH1cclxuXHJcbiAgICAgICAgICAgIHN0b3JlLmRpc3BhdGNoKHByb2ZpbGVMb2FkQWN0aW9uKCkpXHJcbiAgICAgICAgICAgIGNvbnN0IHN0YXRlID0gc3RvcmUuZ2V0U3RhdGUoKVxyXG4gICAgICAgICAgICBpZiAoYWN0aW9uLnBheWxvYWQuZW1haWwgIT09IHN0YXRlLnByb2ZpbGUucHJvZmlsZS5lbWFpbCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgYWN0aW9uLnBheWxvYWQgPSB7XHJcbiAgICAgICAgICAgICAgICAuLi5hY3Rpb24ucGF5bG9hZCxcclxuICAgICAgICAgICAgICAgIHRva2VuOiAnMTIxMjMnLFxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBuZXh0KGFjdGlvbilcclxufVxyXG4iLCJpbXBvcnQgeyBjb21iaW5lUmVkdWNlcnMgfSBmcm9tICdyZWR1eCdcclxuaW1wb3J0IHsgY29ubmVjdFJvdXRlciB9IGZyb20gJ2Nvbm5lY3RlZC1yZWFjdC1yb3V0ZXInXHJcbmltcG9ydCB7IHByb2ZpbGVSZWR1Y2VyIH0gZnJvbSAnLi9wcm9maWxlJ1xyXG5pbXBvcnQgeyBhbGVydFJlZHVjZXIgfSBmcm9tICcuL2FsZXJ0cydcclxuaW1wb3J0IHsgbGVzc29uUmVkdWNlciB9IGZyb20gJy4vbGVzc29ucydcclxuaW1wb3J0IHsgY2FydFJlZHVjZXIgfSBmcm9tICcuL2NhcnQnXHJcbmltcG9ydCB7IGhlYWRlclJlZHVjZXIgfSBmcm9tICcuL2hlYWRlcidcclxuaW1wb3J0IHsgaW5pdFJlZHVjZXIgfSBmcm9tICcuL2luaXQnXHJcblxyXG5leHBvcnQgY29uc3QgY3JlYXRlUm9vdFJlZHVjZXIgPSAoaGlzdG9yeSkgPT5cclxuICAgIGNvbWJpbmVSZWR1Y2Vycyh7XHJcbiAgICAgICAgcHJvZmlsZTogcHJvZmlsZVJlZHVjZXIsXHJcbiAgICAgICAgYWxlcnQ6IGFsZXJ0UmVkdWNlcixcclxuICAgICAgICBsZXNzb25zOiBsZXNzb25SZWR1Y2VyLFxyXG4gICAgICAgIGhlYWRlcjogaGVhZGVyUmVkdWNlcixcclxuICAgICAgICBjYXJ0OiBjYXJ0UmVkdWNlcixcclxuICAgICAgICBpbml0OiBpbml0UmVkdWNlcixcclxuICAgICAgICByb3V0ZXI6IGNvbm5lY3RSb3V0ZXIoaGlzdG9yeSksXHJcbiAgICB9KVxyXG4iLCJpbXBvcnQgeyBjcmVhdGVTdG9yZSwgYXBwbHlNaWRkbGV3YXJlIH0gZnJvbSAncmVkdXgnXHJcbmltcG9ydCB7IGNvbXBvc2VXaXRoRGV2VG9vbHMgfSBmcm9tICdyZWR1eC1kZXZ0b29scy1leHRlbnNpb24nXHJcbmltcG9ydCB7IGNyZWF0ZVJvb3RSZWR1Y2VyIH0gZnJvbSAncmVkdWNlcnMnXHJcbmltcG9ydCBsb2dnZXIgZnJvbSAncmVkdXgtbG9nZ2VyJ1xyXG5pbXBvcnQgc3RvcmFnZSBmcm9tICdyZWR1eC1wZXJzaXN0L2xpYi9zdG9yYWdlJ1xyXG5pbXBvcnQgeyBwZXJzaXN0UmVkdWNlciwgcGVyc2lzdFN0b3JlIH0gZnJvbSAncmVkdXgtcGVyc2lzdCdcclxuaW1wb3J0IHsgY3JlYXRlQnJvd3Nlckhpc3RvcnkgfSBmcm9tICdoaXN0b3J5J1xyXG5pbXBvcnQgeyByb3V0ZXJNaWRkbGV3YXJlIH0gZnJvbSAnY29ubmVjdGVkLXJlYWN0LXJvdXRlcidcclxuaW1wb3J0IHsgcmVnaXN0cmF0aW9uTWlkZGxlV2FyZSB9IGZyb20gJ21pZGRsZXdhcmVzL3JlZ2lzdHJhdGlvbk1pZGRsZVdhcmUnXHJcbmltcG9ydCB7IGFsZXJ0TWlkZGxlV2FyZSB9IGZyb20gJ21pZGRsZXdhcmVzL2FsZXJ0TWlkZGxlV2FyZSdcclxuaW1wb3J0IHsgaW5pdE1pZGRsZVdhcmUgfSBmcm9tICdtaWRkbGV3YXJlcy9pbml0TWlkZGxlV2FyZSdcclxuZXhwb3J0IGNvbnN0IGhpc3RvcnkgPSBjcmVhdGVCcm93c2VySGlzdG9yeSgpXHJcblxyXG5jb25zdCBwZXJzaXN0Q29uZmlnID0ge1xyXG4gICAga2V5OiAnYXBwJyxcclxuICAgIHN0b3JhZ2UsXHJcbiAgICB3aGl0ZWxpc3Q6IFsnaW5pdCcsICdsZXNzb25zJywgJ3Byb2ZpbGUnXSxcclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IGluaXRTdG9yZSA9ICgpID0+IHtcclxuICAgIGNvbnN0IGluaXRpYWxTdG9yZSA9IHt9XHJcbiAgICBjb25zdCBzdG9yZSA9IGNyZWF0ZVN0b3JlKFxyXG4gICAgICAgIHBlcnNpc3RSZWR1Y2VyKHBlcnNpc3RDb25maWcsIGNyZWF0ZVJvb3RSZWR1Y2VyKGhpc3RvcnkpKSxcclxuICAgICAgICBpbml0aWFsU3RvcmUsXHJcbiAgICAgICAgY29tcG9zZVdpdGhEZXZUb29scyhcclxuICAgICAgICAgICAgYXBwbHlNaWRkbGV3YXJlKFxyXG4gICAgICAgICAgICAgICAgbG9nZ2VyLFxyXG4gICAgICAgICAgICAgICAgaW5pdE1pZGRsZVdhcmUsXHJcbiAgICAgICAgICAgICAgICByZWdpc3RyYXRpb25NaWRkbGVXYXJlLFxyXG4gICAgICAgICAgICAgICAgcm91dGVyTWlkZGxld2FyZShoaXN0b3J5KSxcclxuICAgICAgICAgICAgICAgIGFsZXJ0TWlkZGxlV2FyZSxcclxuICAgICAgICAgICAgKSxcclxuICAgICAgICApLFxyXG4gICAgKVxyXG4gICAgY29uc3QgcGVyc2lzdG9yID0gcGVyc2lzdFN0b3JlKHN0b3JlKVxyXG4gICAgcmV0dXJuIHsgc3RvcmUsIHBlcnNpc3RvciB9XHJcbn1cclxuIiwiaW1wb3J0IHtcclxuICAgIGFsZXJ0Q2xvc2VBY3Rpb24sXHJcbiAgICBhbGVydFNlbmRBY3Rpb24sXHJcbiAgICBBTEVSVF9TRU5EX0lORk9STSxcclxuICAgIEFMRVJUX0NMT1NFX0lORk9STSxcclxufSBmcm9tICdhY3Rpb25zL2FsZXJ0cydcclxuXHJcbmxldCB0aW1lb3V0SWQgPSAwXHJcblxyXG5leHBvcnQgY29uc3QgYWxlcnRNaWRkbGVXYXJlID0gKHN0b3JlKSA9PiAobmV4dCkgPT4gKGFjdGlvbikgPT4ge1xyXG4gICAgaWYgKGFjdGlvbi50eXBlID09PSBBTEVSVF9TRU5EX0lORk9STSkge1xyXG4gICAgICAgIGNvbnN0IHsgdmFsdWUsIHR5cGUsIGlzU2VsZWN0LCBtZXNzYWdlSWQgfSA9IGFjdGlvbi5wYXlsb2FkXHJcbiAgICAgICAgY29uc3QgZGljdCA9IHsgZXJyb3I6ICdlcnJvcicsIHdhcm5pbmc6ICd3YXJuaW5nJywgaW5mb3JtOiAnaW5mb3JtJyB9XHJcbiAgICAgICAgY29uc3QgYWxlcnRUeXBlID0gZGljdFt0eXBlXSB8fCAnaW5mb3JtJ1xyXG5cclxuICAgICAgICBzdG9yZS5kaXNwYXRjaChcclxuICAgICAgICAgICAgYWxlcnRTZW5kQWN0aW9uKHtcclxuICAgICAgICAgICAgICAgIHRleHQ6IHZhbHVlLFxyXG4gICAgICAgICAgICAgICAgc3RhdHVzOiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgdHlwZTogYWxlcnRUeXBlLFxyXG4gICAgICAgICAgICAgICAgaWQ6IG1lc3NhZ2VJZCxcclxuICAgICAgICAgICAgICAgIGlzU2VsZWN0LFxyXG4gICAgICAgICAgICB9KSxcclxuICAgICAgICApXHJcblxyXG4gICAgICAgIGlmICghYWN0aW9uLnBheWxvYWQuaXNTZWxlY3QpIHtcclxuICAgICAgICAgICAgY2xlYXJUaW1lb3V0KHRpbWVvdXRJZClcclxuICAgICAgICAgICAgdGltZW91dElkID0gc2V0VGltZW91dCgoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBzdG9yZS5kaXNwYXRjaChhbGVydENsb3NlQWN0aW9uKGZhbHNlKSlcclxuICAgICAgICAgICAgfSwgNDAwMClcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKGFjdGlvbi50eXBlID09PSBBTEVSVF9DTE9TRV9JTkZPUk0pIHtcclxuICAgICAgICBzdG9yZS5kaXNwYXRjaChhbGVydENsb3NlQWN0aW9uKGFjdGlvbi5wYXlsb2FkKSlcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gbmV4dChhY3Rpb24pXHJcbn1cclxuIiwiaW1wb3J0IHsgcHJvZmlsZUxvYWRBY3Rpb24sIExPR0lOIH0gZnJvbSAnYWN0aW9ucy9wcm9maWxlJ1xyXG5pbXBvcnQgeyBsZXNzb25zTG9hZEFjdGlvbiB9IGZyb20gJ2FjdGlvbnMvbGVzc29ucydcclxuaW1wb3J0IHsgSU5JVCB9IGZyb20gJ2FjdGlvbnMvaW5pdCdcclxuXHJcbmV4cG9ydCBjb25zdCBpbml0TWlkZGxlV2FyZSA9IChzdG9yZSkgPT4gKG5leHQpID0+IChhY3Rpb24pID0+IHtcclxuICAgIGlmIChhY3Rpb24udHlwZSA9PT0gSU5JVCkge1xyXG4gICAgICAgIGNvbnN0IHN0YXRlID0gc3RvcmUuZ2V0U3RhdGUoKVxyXG4gICAgICAgIGlmIChcclxuICAgICAgICAgICAgIU9iamVjdC5rZXlzKHN0YXRlLnByb2ZpbGUucHJvZmlsZSkubGVuZ3RoIHx8XHJcbiAgICAgICAgICAgICFPYmplY3Qua2V5cyhzdGF0ZS5sZXNzb25zLmxlc3NvbnNMaXN0KS5sZW5ndGhcclxuICAgICAgICApIHtcclxuICAgICAgICAgICAgc3RvcmUuZGlzcGF0Y2gobGVzc29uc0xvYWRBY3Rpb24oKSlcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gbmV4dChhY3Rpb24pXHJcbn1cclxuIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0J1xyXG5pbXBvcnQgUmVhY3RET00gZnJvbSAncmVhY3QtZG9tJ1xyXG5pbXBvcnQgQXBwQ29udGFpbmVyIGZyb20gJ2NvbnRhaW5lcnMvQXBwQ29udGFpbmVyJ1xyXG5pbXBvcnQgeyBQcm92aWRlciB9IGZyb20gJ3JlYWN0LXJlZHV4J1xyXG5pbXBvcnQgeyBQZXJzaXN0R2F0ZSB9IGZyb20gJ3JlZHV4LXBlcnNpc3QvaW50ZWdyYXRpb24vcmVhY3QnXHJcbmltcG9ydCB7IGluaXRTdG9yZSB9IGZyb20gJy4vc3RvcmUnXHJcbmltcG9ydCB7IENvbm5lY3RlZFJvdXRlciB9IGZyb20gJ2Nvbm5lY3RlZC1yZWFjdC1yb3V0ZXInXHJcbmltcG9ydCB7IGhpc3RvcnkgfSBmcm9tICcuL3N0b3JlJ1xyXG5pbXBvcnQgJy4vbGF5b3V0L2Nzcy9zdHlsZS5jc3MnXHJcbmltcG9ydCB7IEJyb3dzZXJSb3V0ZXIgfSBmcm9tICdyZWFjdC1yb3V0ZXItZG9tJ1xyXG5cclxuY29uc3QgeyBzdG9yZSwgcGVyc2lzdG9yIH0gPSBpbml0U3RvcmUoKVxyXG5cclxuUmVhY3RET00ucmVuZGVyKFxyXG4gICAgPFByb3ZpZGVyIHN0b3JlPXtzdG9yZX0+XHJcbiAgICAgICAgPFBlcnNpc3RHYXRlIHBlcnNpc3Rvcj17cGVyc2lzdG9yfT5cclxuICAgICAgICAgICAgPENvbm5lY3RlZFJvdXRlciBoaXN0b3J5PXtoaXN0b3J5fT5cclxuICAgICAgICAgICAgICAgIDxBcHBDb250YWluZXIgLz5cclxuICAgICAgICAgICAgPC9Db25uZWN0ZWRSb3V0ZXI+XHJcbiAgICAgICAgPC9QZXJzaXN0R2F0ZT5cclxuICAgIDwvUHJvdmlkZXI+LFxyXG4gICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3Jvb3QnKSxcclxuKVxyXG4iLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfdHlwZW9mIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS90eXBlb2ZcIjtcbmV4cG9ydCBmdW5jdGlvbiBpc1BsYWluT2JqZWN0KGl0ZW0pIHtcbiAgcmV0dXJuIGl0ZW0gJiYgX3R5cGVvZihpdGVtKSA9PT0gJ29iamVjdCcgJiYgaXRlbS5jb25zdHJ1Y3RvciA9PT0gT2JqZWN0O1xufVxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZGVlcG1lcmdlKHRhcmdldCwgc291cmNlKSB7XG4gIHZhciBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiB7XG4gICAgY2xvbmU6IHRydWVcbiAgfTtcbiAgdmFyIG91dHB1dCA9IG9wdGlvbnMuY2xvbmUgPyBfZXh0ZW5kcyh7fSwgdGFyZ2V0KSA6IHRhcmdldDtcblxuICBpZiAoaXNQbGFpbk9iamVjdCh0YXJnZXQpICYmIGlzUGxhaW5PYmplY3Qoc291cmNlKSkge1xuICAgIE9iamVjdC5rZXlzKHNvdXJjZSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAvLyBBdm9pZCBwcm90b3R5cGUgcG9sbHV0aW9uXG4gICAgICBpZiAoa2V5ID09PSAnX19wcm90b19fJykge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmIChpc1BsYWluT2JqZWN0KHNvdXJjZVtrZXldKSAmJiBrZXkgaW4gdGFyZ2V0KSB7XG4gICAgICAgIG91dHB1dFtrZXldID0gZGVlcG1lcmdlKHRhcmdldFtrZXldLCBzb3VyY2Vba2V5XSwgb3B0aW9ucyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBvdXRwdXRba2V5XSA9IHNvdXJjZVtrZXldO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgcmV0dXJuIG91dHB1dDtcbn0iLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCB7IGdldERpc3BsYXlOYW1lIH0gZnJvbSAnQG1hdGVyaWFsLXVpL3V0aWxzJztcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIG1lcmdlQ2xhc3NlcygpIHtcbiAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHt9O1xuICB2YXIgYmFzZUNsYXNzZXMgPSBvcHRpb25zLmJhc2VDbGFzc2VzLFxuICAgICAgbmV3Q2xhc3NlcyA9IG9wdGlvbnMubmV3Q2xhc3NlcyxcbiAgICAgIENvbXBvbmVudCA9IG9wdGlvbnMuQ29tcG9uZW50O1xuXG4gIGlmICghbmV3Q2xhc3Nlcykge1xuICAgIHJldHVybiBiYXNlQ2xhc3NlcztcbiAgfVxuXG4gIHZhciBuZXh0Q2xhc3NlcyA9IF9leHRlbmRzKHt9LCBiYXNlQ2xhc3Nlcyk7XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBpZiAodHlwZW9mIG5ld0NsYXNzZXMgPT09ICdzdHJpbmcnKSB7XG4gICAgICBjb25zb2xlLmVycm9yKFtcIk1hdGVyaWFsLVVJOiBUaGUgdmFsdWUgYFwiLmNvbmNhdChuZXdDbGFzc2VzLCBcImAgXCIpICsgXCJwcm92aWRlZCB0byB0aGUgY2xhc3NlcyBwcm9wIG9mIFwiLmNvbmNhdChnZXREaXNwbGF5TmFtZShDb21wb25lbnQpLCBcIiBpcyBpbmNvcnJlY3QuXCIpLCAnWW91IG1pZ2h0IHdhbnQgdG8gdXNlIHRoZSBjbGFzc05hbWUgcHJvcCBpbnN0ZWFkLiddLmpvaW4oJ1xcbicpKTtcbiAgICAgIHJldHVybiBiYXNlQ2xhc3NlcztcbiAgICB9XG4gIH1cblxuICBPYmplY3Qua2V5cyhuZXdDbGFzc2VzKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgaWYgKCFiYXNlQ2xhc3Nlc1trZXldICYmIG5ld0NsYXNzZXNba2V5XSkge1xuICAgICAgICBjb25zb2xlLmVycm9yKFtcIk1hdGVyaWFsLVVJOiBUaGUga2V5IGBcIi5jb25jYXQoa2V5LCBcImAgXCIpICsgXCJwcm92aWRlZCB0byB0aGUgY2xhc3NlcyBwcm9wIGlzIG5vdCBpbXBsZW1lbnRlZCBpbiBcIi5jb25jYXQoZ2V0RGlzcGxheU5hbWUoQ29tcG9uZW50KSwgXCIuXCIpLCBcIllvdSBjYW4gb25seSBvdmVycmlkZSBvbmUgb2YgdGhlIGZvbGxvd2luZzogXCIuY29uY2F0KE9iamVjdC5rZXlzKGJhc2VDbGFzc2VzKS5qb2luKCcsJyksIFwiLlwiKV0uam9pbignXFxuJykpO1xuICAgICAgfVxuXG4gICAgICBpZiAobmV3Q2xhc3Nlc1trZXldICYmIHR5cGVvZiBuZXdDbGFzc2VzW2tleV0gIT09ICdzdHJpbmcnKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoW1wiTWF0ZXJpYWwtVUk6IFRoZSBrZXkgYFwiLmNvbmNhdChrZXksIFwiYCBcIikgKyBcInByb3ZpZGVkIHRvIHRoZSBjbGFzc2VzIHByb3AgaXMgbm90IHZhbGlkIGZvciBcIi5jb25jYXQoZ2V0RGlzcGxheU5hbWUoQ29tcG9uZW50KSwgXCIuXCIpLCBcIllvdSBuZWVkIHRvIHByb3ZpZGUgYSBub24gZW1wdHkgc3RyaW5nIGluc3RlYWQgb2Y6IFwiLmNvbmNhdChuZXdDbGFzc2VzW2tleV0sIFwiLlwiKV0uam9pbignXFxuJykpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChuZXdDbGFzc2VzW2tleV0pIHtcbiAgICAgIG5leHRDbGFzc2VzW2tleV0gPSBcIlwiLmNvbmNhdChiYXNlQ2xhc3Nlc1trZXldLCBcIiBcIikuY29uY2F0KG5ld0NsYXNzZXNba2V5XSk7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIG5leHRDbGFzc2VzO1xufSIsIi8qIGVzbGludC1kaXNhYmxlIG5vLXJlc3RyaWN0ZWQtc3ludGF4ICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRUaGVtZVByb3BzKHBhcmFtcykge1xuICB2YXIgdGhlbWUgPSBwYXJhbXMudGhlbWUsXG4gICAgICBuYW1lID0gcGFyYW1zLm5hbWUsXG4gICAgICBwcm9wcyA9IHBhcmFtcy5wcm9wcztcblxuICBpZiAoIXRoZW1lIHx8ICF0aGVtZS5wcm9wcyB8fCAhdGhlbWUucHJvcHNbbmFtZV0pIHtcbiAgICByZXR1cm4gcHJvcHM7XG4gIH0gLy8gUmVzb2x2ZSBkZWZhdWx0IHByb3BzLCBjb2RlIGJvcnJvdyBmcm9tIFJlYWN0IHNvdXJjZS5cbiAgLy8gaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL3JlYWN0L2Jsb2IvMTVhOGYwMzE4MzhhNTUzZTQxYzBiNjZlYjFiY2YxZGE4NDQ4MTA0ZC9wYWNrYWdlcy9yZWFjdC9zcmMvUmVhY3RFbGVtZW50LmpzI0wyMjFcblxuXG4gIHZhciBkZWZhdWx0UHJvcHMgPSB0aGVtZS5wcm9wc1tuYW1lXTtcbiAgdmFyIHByb3BOYW1lO1xuXG4gIGZvciAocHJvcE5hbWUgaW4gZGVmYXVsdFByb3BzKSB7XG4gICAgaWYgKHByb3BzW3Byb3BOYW1lXSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBwcm9wc1twcm9wTmFtZV0gPSBkZWZhdWx0UHJvcHNbcHJvcE5hbWVdO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBwcm9wcztcbn0iLCJ2YXIgX3R5cGVvZiA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiID8gZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfSA6IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH07XG5cbmV4cG9ydCB2YXIgaXNCcm93c2VyID0gKHR5cGVvZiB3aW5kb3cgPT09IFwidW5kZWZpbmVkXCIgPyBcInVuZGVmaW5lZFwiIDogX3R5cGVvZih3aW5kb3cpKSA9PT0gXCJvYmplY3RcIiAmJiAodHlwZW9mIGRvY3VtZW50ID09PSBcInVuZGVmaW5lZFwiID8gXCJ1bmRlZmluZWRcIiA6IF90eXBlb2YoZG9jdW1lbnQpKSA9PT0gJ29iamVjdCcgJiYgZG9jdW1lbnQubm9kZVR5cGUgPT09IDk7XG5cbmV4cG9ydCBkZWZhdWx0IGlzQnJvd3NlcjtcbiIsImltcG9ydCBfZXh0ZW5kcyBmcm9tICdAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzJztcbmltcG9ydCBpc0luQnJvd3NlciBmcm9tICdpcy1pbi1icm93c2VyJztcbmltcG9ydCB3YXJuaW5nIGZyb20gJ3Rpbnktd2FybmluZyc7XG5pbXBvcnQgX2NyZWF0ZUNsYXNzIGZyb20gJ0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2NyZWF0ZUNsYXNzJztcbmltcG9ydCBfaW5oZXJpdHNMb29zZSBmcm9tICdAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9pbmhlcml0c0xvb3NlJztcbmltcG9ydCBfYXNzZXJ0VGhpc0luaXRpYWxpemVkIGZyb20gJ0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2Fzc2VydFRoaXNJbml0aWFsaXplZCc7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSAnQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSc7XG5cbnZhciBwbGFpbk9iamVjdENvbnN0cnVyY3RvciA9IHt9LmNvbnN0cnVjdG9yO1xuZnVuY3Rpb24gY2xvbmVTdHlsZShzdHlsZSkge1xuICBpZiAoc3R5bGUgPT0gbnVsbCB8fCB0eXBlb2Ygc3R5bGUgIT09ICdvYmplY3QnKSByZXR1cm4gc3R5bGU7XG4gIGlmIChBcnJheS5pc0FycmF5KHN0eWxlKSkgcmV0dXJuIHN0eWxlLm1hcChjbG9uZVN0eWxlKTtcbiAgaWYgKHN0eWxlLmNvbnN0cnVjdG9yICE9PSBwbGFpbk9iamVjdENvbnN0cnVyY3RvcikgcmV0dXJuIHN0eWxlO1xuICB2YXIgbmV3U3R5bGUgPSB7fTtcblxuICBmb3IgKHZhciBuYW1lIGluIHN0eWxlKSB7XG4gICAgbmV3U3R5bGVbbmFtZV0gPSBjbG9uZVN0eWxlKHN0eWxlW25hbWVdKTtcbiAgfVxuXG4gIHJldHVybiBuZXdTdHlsZTtcbn1cblxuLyoqXG4gKiBDcmVhdGUgYSBydWxlIGluc3RhbmNlLlxuICovXG5cbmZ1bmN0aW9uIGNyZWF0ZVJ1bGUobmFtZSwgZGVjbCwgb3B0aW9ucykge1xuICBpZiAobmFtZSA9PT0gdm9pZCAwKSB7XG4gICAgbmFtZSA9ICd1bm5hbWVkJztcbiAgfVxuXG4gIHZhciBqc3MgPSBvcHRpb25zLmpzcztcbiAgdmFyIGRlY2xDb3B5ID0gY2xvbmVTdHlsZShkZWNsKTtcbiAgdmFyIHJ1bGUgPSBqc3MucGx1Z2lucy5vbkNyZWF0ZVJ1bGUobmFtZSwgZGVjbENvcHksIG9wdGlvbnMpO1xuICBpZiAocnVsZSkgcmV0dXJuIHJ1bGU7IC8vIEl0IGlzIGFuIGF0LXJ1bGUgYW5kIGl0IGhhcyBubyBpbnN0YW5jZS5cblxuICBpZiAobmFtZVswXSA9PT0gJ0AnKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhmYWxzZSwgXCJbSlNTXSBVbmtub3duIHJ1bGUgXCIgKyBuYW1lKSA6IHZvaWQgMDtcbiAgfVxuXG4gIHJldHVybiBudWxsO1xufVxuXG52YXIgam9pbiA9IGZ1bmN0aW9uIGpvaW4odmFsdWUsIGJ5KSB7XG4gIHZhciByZXN1bHQgPSAnJztcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IHZhbHVlLmxlbmd0aDsgaSsrKSB7XG4gICAgLy8gUmVtb3ZlICFpbXBvcnRhbnQgZnJvbSB0aGUgdmFsdWUsIGl0IHdpbGwgYmUgcmVhZGRlZCBsYXRlci5cbiAgICBpZiAodmFsdWVbaV0gPT09ICchaW1wb3J0YW50JykgYnJlYWs7XG4gICAgaWYgKHJlc3VsdCkgcmVzdWx0ICs9IGJ5O1xuICAgIHJlc3VsdCArPSB2YWx1ZVtpXTtcbiAgfVxuXG4gIHJldHVybiByZXN1bHQ7XG59O1xuLyoqXG4gKiBDb252ZXJ0cyBhcnJheSB2YWx1ZXMgdG8gc3RyaW5nLlxuICpcbiAqIGBtYXJnaW46IFtbJzVweCcsICcxMHB4J11dYCA+IGBtYXJnaW46IDVweCAxMHB4O2BcbiAqIGBib3JkZXI6IFsnMXB4JywgJzJweCddYCA+IGBib3JkZXI6IDFweCwgMnB4O2BcbiAqIGBtYXJnaW46IFtbJzVweCcsICcxMHB4J10sICchaW1wb3J0YW50J11gID4gYG1hcmdpbjogNXB4IDEwcHggIWltcG9ydGFudDtgXG4gKiBgY29sb3I6IFsncmVkJywgIWltcG9ydGFudF1gID4gYGNvbG9yOiByZWQgIWltcG9ydGFudDtgXG4gKi9cblxuXG5mdW5jdGlvbiB0b0Nzc1ZhbHVlKHZhbHVlLCBpZ25vcmVJbXBvcnRhbnQpIHtcbiAgaWYgKGlnbm9yZUltcG9ydGFudCA9PT0gdm9pZCAwKSB7XG4gICAgaWdub3JlSW1wb3J0YW50ID0gZmFsc2U7XG4gIH1cblxuICBpZiAoIUFycmF5LmlzQXJyYXkodmFsdWUpKSByZXR1cm4gdmFsdWU7XG4gIHZhciBjc3NWYWx1ZSA9ICcnOyAvLyBTdXBwb3J0IHNwYWNlIHNlcGFyYXRlZCB2YWx1ZXMgdmlhIGBbWyc1cHgnLCAnMTBweCddXWAuXG5cbiAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWVbMF0pKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB2YWx1ZS5sZW5ndGg7IGkrKykge1xuICAgICAgaWYgKHZhbHVlW2ldID09PSAnIWltcG9ydGFudCcpIGJyZWFrO1xuICAgICAgaWYgKGNzc1ZhbHVlKSBjc3NWYWx1ZSArPSAnLCAnO1xuICAgICAgY3NzVmFsdWUgKz0gam9pbih2YWx1ZVtpXSwgJyAnKTtcbiAgICB9XG4gIH0gZWxzZSBjc3NWYWx1ZSA9IGpvaW4odmFsdWUsICcsICcpOyAvLyBBZGQgIWltcG9ydGFudCwgYmVjYXVzZSBpdCB3YXMgaWdub3JlZC5cblxuXG4gIGlmICghaWdub3JlSW1wb3J0YW50ICYmIHZhbHVlW3ZhbHVlLmxlbmd0aCAtIDFdID09PSAnIWltcG9ydGFudCcpIHtcbiAgICBjc3NWYWx1ZSArPSAnICFpbXBvcnRhbnQnO1xuICB9XG5cbiAgcmV0dXJuIGNzc1ZhbHVlO1xufVxuXG4vKipcbiAqIEluZGVudCBhIHN0cmluZy5cbiAqIGh0dHA6Ly9qc3BlcmYuY29tL2FycmF5LWpvaW4tdnMtZm9yXG4gKi9cbmZ1bmN0aW9uIGluZGVudFN0cihzdHIsIGluZGVudCkge1xuICB2YXIgcmVzdWx0ID0gJyc7XG5cbiAgZm9yICh2YXIgaW5kZXggPSAwOyBpbmRleCA8IGluZGVudDsgaW5kZXgrKykge1xuICAgIHJlc3VsdCArPSAnICAnO1xuICB9XG5cbiAgcmV0dXJuIHJlc3VsdCArIHN0cjtcbn1cbi8qKlxuICogQ29udmVydHMgYSBSdWxlIHRvIENTUyBzdHJpbmcuXG4gKi9cblxuXG5mdW5jdGlvbiB0b0NzcyhzZWxlY3Rvciwgc3R5bGUsIG9wdGlvbnMpIHtcbiAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkge1xuICAgIG9wdGlvbnMgPSB7fTtcbiAgfVxuXG4gIHZhciByZXN1bHQgPSAnJztcbiAgaWYgKCFzdHlsZSkgcmV0dXJuIHJlc3VsdDtcbiAgdmFyIF9vcHRpb25zID0gb3B0aW9ucyxcbiAgICAgIF9vcHRpb25zJGluZGVudCA9IF9vcHRpb25zLmluZGVudCxcbiAgICAgIGluZGVudCA9IF9vcHRpb25zJGluZGVudCA9PT0gdm9pZCAwID8gMCA6IF9vcHRpb25zJGluZGVudDtcbiAgdmFyIGZhbGxiYWNrcyA9IHN0eWxlLmZhbGxiYWNrcztcbiAgaWYgKHNlbGVjdG9yKSBpbmRlbnQrKzsgLy8gQXBwbHkgZmFsbGJhY2tzIGZpcnN0LlxuXG4gIGlmIChmYWxsYmFja3MpIHtcbiAgICAvLyBBcnJheSBzeW50YXgge2ZhbGxiYWNrczogW3twcm9wOiB2YWx1ZX1dfVxuICAgIGlmIChBcnJheS5pc0FycmF5KGZhbGxiYWNrcykpIHtcbiAgICAgIGZvciAodmFyIGluZGV4ID0gMDsgaW5kZXggPCBmYWxsYmFja3MubGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgICAgIHZhciBmYWxsYmFjayA9IGZhbGxiYWNrc1tpbmRleF07XG5cbiAgICAgICAgZm9yICh2YXIgcHJvcCBpbiBmYWxsYmFjaykge1xuICAgICAgICAgIHZhciB2YWx1ZSA9IGZhbGxiYWNrW3Byb3BdO1xuXG4gICAgICAgICAgaWYgKHZhbHVlICE9IG51bGwpIHtcbiAgICAgICAgICAgIGlmIChyZXN1bHQpIHJlc3VsdCArPSAnXFxuJztcbiAgICAgICAgICAgIHJlc3VsdCArPSBcIlwiICsgaW5kZW50U3RyKHByb3AgKyBcIjogXCIgKyB0b0Nzc1ZhbHVlKHZhbHVlKSArIFwiO1wiLCBpbmRlbnQpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBPYmplY3Qgc3ludGF4IHtmYWxsYmFja3M6IHtwcm9wOiB2YWx1ZX19XG4gICAgICBmb3IgKHZhciBfcHJvcCBpbiBmYWxsYmFja3MpIHtcbiAgICAgICAgdmFyIF92YWx1ZSA9IGZhbGxiYWNrc1tfcHJvcF07XG5cbiAgICAgICAgaWYgKF92YWx1ZSAhPSBudWxsKSB7XG4gICAgICAgICAgaWYgKHJlc3VsdCkgcmVzdWx0ICs9ICdcXG4nO1xuICAgICAgICAgIHJlc3VsdCArPSBcIlwiICsgaW5kZW50U3RyKF9wcm9wICsgXCI6IFwiICsgdG9Dc3NWYWx1ZShfdmFsdWUpICsgXCI7XCIsIGluZGVudCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmb3IgKHZhciBfcHJvcDIgaW4gc3R5bGUpIHtcbiAgICB2YXIgX3ZhbHVlMiA9IHN0eWxlW19wcm9wMl07XG5cbiAgICBpZiAoX3ZhbHVlMiAhPSBudWxsICYmIF9wcm9wMiAhPT0gJ2ZhbGxiYWNrcycpIHtcbiAgICAgIGlmIChyZXN1bHQpIHJlc3VsdCArPSAnXFxuJztcbiAgICAgIHJlc3VsdCArPSBcIlwiICsgaW5kZW50U3RyKF9wcm9wMiArIFwiOiBcIiArIHRvQ3NzVmFsdWUoX3ZhbHVlMikgKyBcIjtcIiwgaW5kZW50KTtcbiAgICB9XG4gIH0gLy8gQWxsb3cgZW1wdHkgc3R5bGUgaW4gdGhpcyBjYXNlLCBiZWNhdXNlIHByb3BlcnRpZXMgd2lsbCBiZSBhZGRlZCBkeW5hbWljYWxseS5cblxuXG4gIGlmICghcmVzdWx0ICYmICFvcHRpb25zLmFsbG93RW1wdHkpIHJldHVybiByZXN1bHQ7IC8vIFdoZW4gcnVsZSBpcyBiZWluZyBzdHJpbmdpZmllZCBiZWZvcmUgc2VsZWN0b3Igd2FzIGRlZmluZWQuXG5cbiAgaWYgKCFzZWxlY3RvcikgcmV0dXJuIHJlc3VsdDtcbiAgaW5kZW50LS07XG4gIGlmIChyZXN1bHQpIHJlc3VsdCA9IFwiXFxuXCIgKyByZXN1bHQgKyBcIlxcblwiO1xuICByZXR1cm4gaW5kZW50U3RyKHNlbGVjdG9yICsgXCIge1wiICsgcmVzdWx0LCBpbmRlbnQpICsgaW5kZW50U3RyKCd9JywgaW5kZW50KTtcbn1cblxudmFyIGVzY2FwZVJlZ2V4ID0gLyhbW1xcXS4jKiQ+PCt+PXxeOigpLFwiJ2BcXHNdKS9nO1xudmFyIG5hdGl2ZUVzY2FwZSA9IHR5cGVvZiBDU1MgIT09ICd1bmRlZmluZWQnICYmIENTUy5lc2NhcGU7XG52YXIgZXNjYXBlID0gKGZ1bmN0aW9uIChzdHIpIHtcbiAgcmV0dXJuIG5hdGl2ZUVzY2FwZSA/IG5hdGl2ZUVzY2FwZShzdHIpIDogc3RyLnJlcGxhY2UoZXNjYXBlUmVnZXgsICdcXFxcJDEnKTtcbn0pO1xuXG52YXIgQmFzZVN0eWxlUnVsZSA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIEJhc2VTdHlsZVJ1bGUoa2V5LCBzdHlsZSwgb3B0aW9ucykge1xuICAgIHRoaXMudHlwZSA9ICdzdHlsZSc7XG4gICAgdGhpcy5rZXkgPSB2b2lkIDA7XG4gICAgdGhpcy5pc1Byb2Nlc3NlZCA9IGZhbHNlO1xuICAgIHRoaXMuc3R5bGUgPSB2b2lkIDA7XG4gICAgdGhpcy5yZW5kZXJlciA9IHZvaWQgMDtcbiAgICB0aGlzLnJlbmRlcmFibGUgPSB2b2lkIDA7XG4gICAgdGhpcy5vcHRpb25zID0gdm9pZCAwO1xuICAgIHZhciBzaGVldCA9IG9wdGlvbnMuc2hlZXQsXG4gICAgICAgIFJlbmRlcmVyID0gb3B0aW9ucy5SZW5kZXJlcjtcbiAgICB0aGlzLmtleSA9IGtleTtcbiAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuICAgIHRoaXMuc3R5bGUgPSBzdHlsZTtcbiAgICBpZiAoc2hlZXQpIHRoaXMucmVuZGVyZXIgPSBzaGVldC5yZW5kZXJlcjtlbHNlIGlmIChSZW5kZXJlcikgdGhpcy5yZW5kZXJlciA9IG5ldyBSZW5kZXJlcigpO1xuICB9XG4gIC8qKlxuICAgKiBHZXQgb3Igc2V0IGEgc3R5bGUgcHJvcGVydHkuXG4gICAqL1xuXG5cbiAgdmFyIF9wcm90byA9IEJhc2VTdHlsZVJ1bGUucHJvdG90eXBlO1xuXG4gIF9wcm90by5wcm9wID0gZnVuY3Rpb24gcHJvcChuYW1lLCB2YWx1ZSwgb3B0aW9ucykge1xuICAgIC8vIEl0J3MgYSBnZXR0ZXIuXG4gICAgaWYgKHZhbHVlID09PSB1bmRlZmluZWQpIHJldHVybiB0aGlzLnN0eWxlW25hbWVdOyAvLyBEb24ndCBkbyBhbnl0aGluZyBpZiB0aGUgdmFsdWUgaGFzIG5vdCBjaGFuZ2VkLlxuXG4gICAgdmFyIGZvcmNlID0gb3B0aW9ucyA/IG9wdGlvbnMuZm9yY2UgOiBmYWxzZTtcbiAgICBpZiAoIWZvcmNlICYmIHRoaXMuc3R5bGVbbmFtZV0gPT09IHZhbHVlKSByZXR1cm4gdGhpcztcbiAgICB2YXIgbmV3VmFsdWUgPSB2YWx1ZTtcblxuICAgIGlmICghb3B0aW9ucyB8fCBvcHRpb25zLnByb2Nlc3MgIT09IGZhbHNlKSB7XG4gICAgICBuZXdWYWx1ZSA9IHRoaXMub3B0aW9ucy5qc3MucGx1Z2lucy5vbkNoYW5nZVZhbHVlKHZhbHVlLCBuYW1lLCB0aGlzKTtcbiAgICB9XG5cbiAgICB2YXIgaXNFbXB0eSA9IG5ld1ZhbHVlID09IG51bGwgfHwgbmV3VmFsdWUgPT09IGZhbHNlO1xuICAgIHZhciBpc0RlZmluZWQgPSBuYW1lIGluIHRoaXMuc3R5bGU7IC8vIFZhbHVlIGlzIGVtcHR5IGFuZCB3YXNuJ3QgZGVmaW5lZCBiZWZvcmUuXG5cbiAgICBpZiAoaXNFbXB0eSAmJiAhaXNEZWZpbmVkICYmICFmb3JjZSkgcmV0dXJuIHRoaXM7IC8vIFdlIGFyZSBnb2luZyB0byByZW1vdmUgdGhpcyB2YWx1ZS5cblxuICAgIHZhciByZW1vdmUgPSBpc0VtcHR5ICYmIGlzRGVmaW5lZDtcbiAgICBpZiAocmVtb3ZlKSBkZWxldGUgdGhpcy5zdHlsZVtuYW1lXTtlbHNlIHRoaXMuc3R5bGVbbmFtZV0gPSBuZXdWYWx1ZTsgLy8gUmVuZGVyYWJsZSBpcyBkZWZpbmVkIGlmIFN0eWxlU2hlZXQgb3B0aW9uIGBsaW5rYCBpcyB0cnVlLlxuXG4gICAgaWYgKHRoaXMucmVuZGVyYWJsZSAmJiB0aGlzLnJlbmRlcmVyKSB7XG4gICAgICBpZiAocmVtb3ZlKSB0aGlzLnJlbmRlcmVyLnJlbW92ZVByb3BlcnR5KHRoaXMucmVuZGVyYWJsZSwgbmFtZSk7ZWxzZSB0aGlzLnJlbmRlcmVyLnNldFByb3BlcnR5KHRoaXMucmVuZGVyYWJsZSwgbmFtZSwgbmV3VmFsdWUpO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgdmFyIHNoZWV0ID0gdGhpcy5vcHRpb25zLnNoZWV0O1xuXG4gICAgaWYgKHNoZWV0ICYmIHNoZWV0LmF0dGFjaGVkKSB7XG4gICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKGZhbHNlLCAnW0pTU10gUnVsZSBpcyBub3QgbGlua2VkLiBNaXNzaW5nIHNoZWV0IG9wdGlvbiBcImxpbms6IHRydWVcIi4nKSA6IHZvaWQgMDtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICByZXR1cm4gQmFzZVN0eWxlUnVsZTtcbn0oKTtcbnZhciBTdHlsZVJ1bGUgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9CYXNlU3R5bGVSdWxlKSB7XG4gIF9pbmhlcml0c0xvb3NlKFN0eWxlUnVsZSwgX0Jhc2VTdHlsZVJ1bGUpO1xuXG4gIGZ1bmN0aW9uIFN0eWxlUnVsZShrZXksIHN0eWxlLCBvcHRpb25zKSB7XG4gICAgdmFyIF90aGlzO1xuXG4gICAgX3RoaXMgPSBfQmFzZVN0eWxlUnVsZS5jYWxsKHRoaXMsIGtleSwgc3R5bGUsIG9wdGlvbnMpIHx8IHRoaXM7XG4gICAgX3RoaXMuc2VsZWN0b3JUZXh0ID0gdm9pZCAwO1xuICAgIF90aGlzLmlkID0gdm9pZCAwO1xuICAgIF90aGlzLnJlbmRlcmFibGUgPSB2b2lkIDA7XG4gICAgdmFyIHNlbGVjdG9yID0gb3B0aW9ucy5zZWxlY3RvcixcbiAgICAgICAgc2NvcGVkID0gb3B0aW9ucy5zY29wZWQsXG4gICAgICAgIHNoZWV0ID0gb3B0aW9ucy5zaGVldCxcbiAgICAgICAgZ2VuZXJhdGVJZCA9IG9wdGlvbnMuZ2VuZXJhdGVJZDtcblxuICAgIGlmIChzZWxlY3Rvcikge1xuICAgICAgX3RoaXMuc2VsZWN0b3JUZXh0ID0gc2VsZWN0b3I7XG4gICAgfSBlbHNlIGlmIChzY29wZWQgIT09IGZhbHNlKSB7XG4gICAgICBfdGhpcy5pZCA9IGdlbmVyYXRlSWQoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSksIHNoZWV0KTtcbiAgICAgIF90aGlzLnNlbGVjdG9yVGV4dCA9IFwiLlwiICsgZXNjYXBlKF90aGlzLmlkKTtcbiAgICB9XG5cbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cbiAgLyoqXG4gICAqIFNldCBzZWxlY3RvciBzdHJpbmcuXG4gICAqIEF0dGVudGlvbjogdXNlIHRoaXMgd2l0aCBjYXV0aW9uLiBNb3N0IGJyb3dzZXJzIGRpZG4ndCBpbXBsZW1lbnRcbiAgICogc2VsZWN0b3JUZXh0IHNldHRlciwgc28gdGhpcyBtYXkgcmVzdWx0IGluIHJlcmVuZGVyaW5nIG9mIGVudGlyZSBTdHlsZSBTaGVldC5cbiAgICovXG5cblxuICB2YXIgX3Byb3RvMiA9IFN0eWxlUnVsZS5wcm90b3R5cGU7XG5cbiAgLyoqXG4gICAqIEFwcGx5IHJ1bGUgdG8gYW4gZWxlbWVudCBpbmxpbmUuXG4gICAqL1xuICBfcHJvdG8yLmFwcGx5VG8gPSBmdW5jdGlvbiBhcHBseVRvKHJlbmRlcmFibGUpIHtcbiAgICB2YXIgcmVuZGVyZXIgPSB0aGlzLnJlbmRlcmVyO1xuXG4gICAgaWYgKHJlbmRlcmVyKSB7XG4gICAgICB2YXIganNvbiA9IHRoaXMudG9KU09OKCk7XG5cbiAgICAgIGZvciAodmFyIHByb3AgaW4ganNvbikge1xuICAgICAgICByZW5kZXJlci5zZXRQcm9wZXJ0eShyZW5kZXJhYmxlLCBwcm9wLCBqc29uW3Byb3BdKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfVxuICAvKipcbiAgICogUmV0dXJucyBKU09OIHJlcHJlc2VudGF0aW9uIG9mIHRoZSBydWxlLlxuICAgKiBGYWxsYmFja3MgYXJlIG5vdCBzdXBwb3J0ZWQuXG4gICAqIFVzZWZ1bCBmb3IgaW5saW5lIHN0eWxlcy5cbiAgICovXG4gIDtcblxuICBfcHJvdG8yLnRvSlNPTiA9IGZ1bmN0aW9uIHRvSlNPTigpIHtcbiAgICB2YXIganNvbiA9IHt9O1xuXG4gICAgZm9yICh2YXIgcHJvcCBpbiB0aGlzLnN0eWxlKSB7XG4gICAgICB2YXIgdmFsdWUgPSB0aGlzLnN0eWxlW3Byb3BdO1xuICAgICAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gJ29iamVjdCcpIGpzb25bcHJvcF0gPSB2YWx1ZTtlbHNlIGlmIChBcnJheS5pc0FycmF5KHZhbHVlKSkganNvbltwcm9wXSA9IHRvQ3NzVmFsdWUodmFsdWUpO1xuICAgIH1cblxuICAgIHJldHVybiBqc29uO1xuICB9XG4gIC8qKlxuICAgKiBHZW5lcmF0ZXMgYSBDU1Mgc3RyaW5nLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90bzIudG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZyhvcHRpb25zKSB7XG4gICAgdmFyIHNoZWV0ID0gdGhpcy5vcHRpb25zLnNoZWV0O1xuICAgIHZhciBsaW5rID0gc2hlZXQgPyBzaGVldC5vcHRpb25zLmxpbmsgOiBmYWxzZTtcbiAgICB2YXIgb3B0cyA9IGxpbmsgPyBfZXh0ZW5kcyh7fSwgb3B0aW9ucywge1xuICAgICAgYWxsb3dFbXB0eTogdHJ1ZVxuICAgIH0pIDogb3B0aW9ucztcbiAgICByZXR1cm4gdG9Dc3ModGhpcy5zZWxlY3RvclRleHQsIHRoaXMuc3R5bGUsIG9wdHMpO1xuICB9O1xuXG4gIF9jcmVhdGVDbGFzcyhTdHlsZVJ1bGUsIFt7XG4gICAga2V5OiBcInNlbGVjdG9yXCIsXG4gICAgc2V0OiBmdW5jdGlvbiBzZXQoc2VsZWN0b3IpIHtcbiAgICAgIGlmIChzZWxlY3RvciA9PT0gdGhpcy5zZWxlY3RvclRleHQpIHJldHVybjtcbiAgICAgIHRoaXMuc2VsZWN0b3JUZXh0ID0gc2VsZWN0b3I7XG4gICAgICB2YXIgcmVuZGVyZXIgPSB0aGlzLnJlbmRlcmVyLFxuICAgICAgICAgIHJlbmRlcmFibGUgPSB0aGlzLnJlbmRlcmFibGU7XG4gICAgICBpZiAoIXJlbmRlcmFibGUgfHwgIXJlbmRlcmVyKSByZXR1cm47XG4gICAgICB2YXIgaGFzQ2hhbmdlZCA9IHJlbmRlcmVyLnNldFNlbGVjdG9yKHJlbmRlcmFibGUsIHNlbGVjdG9yKTsgLy8gSWYgc2VsZWN0b3Igc2V0dGVyIGlzIG5vdCBpbXBsZW1lbnRlZCwgcmVyZW5kZXIgdGhlIHJ1bGUuXG5cbiAgICAgIGlmICghaGFzQ2hhbmdlZCkge1xuICAgICAgICByZW5kZXJlci5yZXBsYWNlUnVsZShyZW5kZXJhYmxlLCB0aGlzKTtcbiAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogR2V0IHNlbGVjdG9yIHN0cmluZy5cbiAgICAgKi9cbiAgICAsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gdGhpcy5zZWxlY3RvclRleHQ7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIFN0eWxlUnVsZTtcbn0oQmFzZVN0eWxlUnVsZSk7XG52YXIgcGx1Z2luU3R5bGVSdWxlID0ge1xuICBvbkNyZWF0ZVJ1bGU6IGZ1bmN0aW9uIG9uQ3JlYXRlUnVsZShuYW1lLCBzdHlsZSwgb3B0aW9ucykge1xuICAgIGlmIChuYW1lWzBdID09PSAnQCcgfHwgb3B0aW9ucy5wYXJlbnQgJiYgb3B0aW9ucy5wYXJlbnQudHlwZSA9PT0gJ2tleWZyYW1lcycpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIHJldHVybiBuZXcgU3R5bGVSdWxlKG5hbWUsIHN0eWxlLCBvcHRpb25zKTtcbiAgfVxufTtcblxudmFyIGRlZmF1bHRUb1N0cmluZ09wdGlvbnMgPSB7XG4gIGluZGVudDogMSxcbiAgY2hpbGRyZW46IHRydWVcbn07XG52YXIgYXRSZWdFeHAgPSAvQChbXFx3LV0rKS87XG4vKipcbiAqIENvbmRpdGlvbmFsIHJ1bGUgZm9yIEBtZWRpYSwgQHN1cHBvcnRzXG4gKi9cblxudmFyIENvbmRpdGlvbmFsUnVsZSA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIENvbmRpdGlvbmFsUnVsZShrZXksIHN0eWxlcywgb3B0aW9ucykge1xuICAgIHRoaXMudHlwZSA9ICdjb25kaXRpb25hbCc7XG4gICAgdGhpcy5hdCA9IHZvaWQgMDtcbiAgICB0aGlzLmtleSA9IHZvaWQgMDtcbiAgICB0aGlzLnF1ZXJ5ID0gdm9pZCAwO1xuICAgIHRoaXMucnVsZXMgPSB2b2lkIDA7XG4gICAgdGhpcy5vcHRpb25zID0gdm9pZCAwO1xuICAgIHRoaXMuaXNQcm9jZXNzZWQgPSBmYWxzZTtcbiAgICB0aGlzLnJlbmRlcmFibGUgPSB2b2lkIDA7XG4gICAgdGhpcy5rZXkgPSBrZXk7IC8vIEtleSBtaWdodCBjb250YWluIGEgdW5pcXVlIHN1ZmZpeCBpbiBjYXNlIHRoZSBgbmFtZWAgcGFzc2VkIGJ5IHVzZXIgd2FzIGR1cGxpY2F0ZS5cblxuICAgIHRoaXMucXVlcnkgPSBvcHRpb25zLm5hbWU7XG4gICAgdmFyIGF0TWF0Y2ggPSBrZXkubWF0Y2goYXRSZWdFeHApO1xuICAgIHRoaXMuYXQgPSBhdE1hdGNoID8gYXRNYXRjaFsxXSA6ICd1bmtub3duJztcbiAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuICAgIHRoaXMucnVsZXMgPSBuZXcgUnVsZUxpc3QoX2V4dGVuZHMoe30sIG9wdGlvbnMsIHtcbiAgICAgIHBhcmVudDogdGhpc1xuICAgIH0pKTtcblxuICAgIGZvciAodmFyIG5hbWUgaW4gc3R5bGVzKSB7XG4gICAgICB0aGlzLnJ1bGVzLmFkZChuYW1lLCBzdHlsZXNbbmFtZV0pO1xuICAgIH1cblxuICAgIHRoaXMucnVsZXMucHJvY2VzcygpO1xuICB9XG4gIC8qKlxuICAgKiBHZXQgYSBydWxlLlxuICAgKi9cblxuXG4gIHZhciBfcHJvdG8gPSBDb25kaXRpb25hbFJ1bGUucHJvdG90eXBlO1xuXG4gIF9wcm90by5nZXRSdWxlID0gZnVuY3Rpb24gZ2V0UnVsZShuYW1lKSB7XG4gICAgcmV0dXJuIHRoaXMucnVsZXMuZ2V0KG5hbWUpO1xuICB9XG4gIC8qKlxuICAgKiBHZXQgaW5kZXggb2YgYSBydWxlLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5pbmRleE9mID0gZnVuY3Rpb24gaW5kZXhPZihydWxlKSB7XG4gICAgcmV0dXJuIHRoaXMucnVsZXMuaW5kZXhPZihydWxlKTtcbiAgfVxuICAvKipcbiAgICogQ3JlYXRlIGFuZCByZWdpc3RlciBydWxlLCBydW4gcGx1Z2lucy5cbiAgICovXG4gIDtcblxuICBfcHJvdG8uYWRkUnVsZSA9IGZ1bmN0aW9uIGFkZFJ1bGUobmFtZSwgc3R5bGUsIG9wdGlvbnMpIHtcbiAgICB2YXIgcnVsZSA9IHRoaXMucnVsZXMuYWRkKG5hbWUsIHN0eWxlLCBvcHRpb25zKTtcbiAgICBpZiAoIXJ1bGUpIHJldHVybiBudWxsO1xuICAgIHRoaXMub3B0aW9ucy5qc3MucGx1Z2lucy5vblByb2Nlc3NSdWxlKHJ1bGUpO1xuICAgIHJldHVybiBydWxlO1xuICB9XG4gIC8qKlxuICAgKiBHZW5lcmF0ZXMgYSBDU1Mgc3RyaW5nLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKG9wdGlvbnMpIHtcbiAgICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7XG4gICAgICBvcHRpb25zID0gZGVmYXVsdFRvU3RyaW5nT3B0aW9ucztcbiAgICB9XG5cbiAgICBpZiAob3B0aW9ucy5pbmRlbnQgPT0gbnVsbCkgb3B0aW9ucy5pbmRlbnQgPSBkZWZhdWx0VG9TdHJpbmdPcHRpb25zLmluZGVudDtcbiAgICBpZiAob3B0aW9ucy5jaGlsZHJlbiA9PSBudWxsKSBvcHRpb25zLmNoaWxkcmVuID0gZGVmYXVsdFRvU3RyaW5nT3B0aW9ucy5jaGlsZHJlbjtcblxuICAgIGlmIChvcHRpb25zLmNoaWxkcmVuID09PSBmYWxzZSkge1xuICAgICAgcmV0dXJuIHRoaXMucXVlcnkgKyBcIiB7fVwiO1xuICAgIH1cblxuICAgIHZhciBjaGlsZHJlbiA9IHRoaXMucnVsZXMudG9TdHJpbmcob3B0aW9ucyk7XG4gICAgcmV0dXJuIGNoaWxkcmVuID8gdGhpcy5xdWVyeSArIFwiIHtcXG5cIiArIGNoaWxkcmVuICsgXCJcXG59XCIgOiAnJztcbiAgfTtcblxuICByZXR1cm4gQ29uZGl0aW9uYWxSdWxlO1xufSgpO1xudmFyIGtleVJlZ0V4cCA9IC9AbWVkaWF8QHN1cHBvcnRzXFxzKy87XG52YXIgcGx1Z2luQ29uZGl0aW9uYWxSdWxlID0ge1xuICBvbkNyZWF0ZVJ1bGU6IGZ1bmN0aW9uIG9uQ3JlYXRlUnVsZShrZXksIHN0eWxlcywgb3B0aW9ucykge1xuICAgIHJldHVybiBrZXlSZWdFeHAudGVzdChrZXkpID8gbmV3IENvbmRpdGlvbmFsUnVsZShrZXksIHN0eWxlcywgb3B0aW9ucykgOiBudWxsO1xuICB9XG59O1xuXG52YXIgZGVmYXVsdFRvU3RyaW5nT3B0aW9ucyQxID0ge1xuICBpbmRlbnQ6IDEsXG4gIGNoaWxkcmVuOiB0cnVlXG59O1xudmFyIG5hbWVSZWdFeHAgPSAvQGtleWZyYW1lc1xccysoW1xcdy1dKykvO1xuLyoqXG4gKiBSdWxlIGZvciBAa2V5ZnJhbWVzXG4gKi9cblxudmFyIEtleWZyYW1lc1J1bGUgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBLZXlmcmFtZXNSdWxlKGtleSwgZnJhbWVzLCBvcHRpb25zKSB7XG4gICAgdGhpcy50eXBlID0gJ2tleWZyYW1lcyc7XG4gICAgdGhpcy5hdCA9ICdAa2V5ZnJhbWVzJztcbiAgICB0aGlzLmtleSA9IHZvaWQgMDtcbiAgICB0aGlzLm5hbWUgPSB2b2lkIDA7XG4gICAgdGhpcy5pZCA9IHZvaWQgMDtcbiAgICB0aGlzLnJ1bGVzID0gdm9pZCAwO1xuICAgIHRoaXMub3B0aW9ucyA9IHZvaWQgMDtcbiAgICB0aGlzLmlzUHJvY2Vzc2VkID0gZmFsc2U7XG4gICAgdGhpcy5yZW5kZXJhYmxlID0gdm9pZCAwO1xuICAgIHZhciBuYW1lTWF0Y2ggPSBrZXkubWF0Y2gobmFtZVJlZ0V4cCk7XG5cbiAgICBpZiAobmFtZU1hdGNoICYmIG5hbWVNYXRjaFsxXSkge1xuICAgICAgdGhpcy5uYW1lID0gbmFtZU1hdGNoWzFdO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLm5hbWUgPSAnbm9uYW1lJztcbiAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoZmFsc2UsIFwiW0pTU10gQmFkIGtleWZyYW1lcyBuYW1lIFwiICsga2V5KSA6IHZvaWQgMDtcbiAgICB9XG5cbiAgICB0aGlzLmtleSA9IHRoaXMudHlwZSArIFwiLVwiICsgdGhpcy5uYW1lO1xuICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgdmFyIHNjb3BlZCA9IG9wdGlvbnMuc2NvcGVkLFxuICAgICAgICBzaGVldCA9IG9wdGlvbnMuc2hlZXQsXG4gICAgICAgIGdlbmVyYXRlSWQgPSBvcHRpb25zLmdlbmVyYXRlSWQ7XG4gICAgdGhpcy5pZCA9IHNjb3BlZCA9PT0gZmFsc2UgPyB0aGlzLm5hbWUgOiBlc2NhcGUoZ2VuZXJhdGVJZCh0aGlzLCBzaGVldCkpO1xuICAgIHRoaXMucnVsZXMgPSBuZXcgUnVsZUxpc3QoX2V4dGVuZHMoe30sIG9wdGlvbnMsIHtcbiAgICAgIHBhcmVudDogdGhpc1xuICAgIH0pKTtcblxuICAgIGZvciAodmFyIG5hbWUgaW4gZnJhbWVzKSB7XG4gICAgICB0aGlzLnJ1bGVzLmFkZChuYW1lLCBmcmFtZXNbbmFtZV0sIF9leHRlbmRzKHt9LCBvcHRpb25zLCB7XG4gICAgICAgIHBhcmVudDogdGhpc1xuICAgICAgfSkpO1xuICAgIH1cblxuICAgIHRoaXMucnVsZXMucHJvY2VzcygpO1xuICB9XG4gIC8qKlxuICAgKiBHZW5lcmF0ZXMgYSBDU1Mgc3RyaW5nLlxuICAgKi9cblxuXG4gIHZhciBfcHJvdG8gPSBLZXlmcmFtZXNSdWxlLnByb3RvdHlwZTtcblxuICBfcHJvdG8udG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZyhvcHRpb25zKSB7XG4gICAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkge1xuICAgICAgb3B0aW9ucyA9IGRlZmF1bHRUb1N0cmluZ09wdGlvbnMkMTtcbiAgICB9XG5cbiAgICBpZiAob3B0aW9ucy5pbmRlbnQgPT0gbnVsbCkgb3B0aW9ucy5pbmRlbnQgPSBkZWZhdWx0VG9TdHJpbmdPcHRpb25zJDEuaW5kZW50O1xuICAgIGlmIChvcHRpb25zLmNoaWxkcmVuID09IG51bGwpIG9wdGlvbnMuY2hpbGRyZW4gPSBkZWZhdWx0VG9TdHJpbmdPcHRpb25zJDEuY2hpbGRyZW47XG5cbiAgICBpZiAob3B0aW9ucy5jaGlsZHJlbiA9PT0gZmFsc2UpIHtcbiAgICAgIHJldHVybiB0aGlzLmF0ICsgXCIgXCIgKyB0aGlzLmlkICsgXCIge31cIjtcbiAgICB9XG5cbiAgICB2YXIgY2hpbGRyZW4gPSB0aGlzLnJ1bGVzLnRvU3RyaW5nKG9wdGlvbnMpO1xuICAgIGlmIChjaGlsZHJlbikgY2hpbGRyZW4gPSBcIlxcblwiICsgY2hpbGRyZW4gKyBcIlxcblwiO1xuICAgIHJldHVybiB0aGlzLmF0ICsgXCIgXCIgKyB0aGlzLmlkICsgXCIge1wiICsgY2hpbGRyZW4gKyBcIn1cIjtcbiAgfTtcblxuICByZXR1cm4gS2V5ZnJhbWVzUnVsZTtcbn0oKTtcbnZhciBrZXlSZWdFeHAkMSA9IC9Aa2V5ZnJhbWVzXFxzKy87XG52YXIgcmVmUmVnRXhwID0gL1xcJChbXFx3LV0rKS9nO1xuXG52YXIgZmluZFJlZmVyZW5jZWRLZXlmcmFtZSA9IGZ1bmN0aW9uIGZpbmRSZWZlcmVuY2VkS2V5ZnJhbWUodmFsLCBrZXlmcmFtZXMpIHtcbiAgaWYgKHR5cGVvZiB2YWwgPT09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIHZhbC5yZXBsYWNlKHJlZlJlZ0V4cCwgZnVuY3Rpb24gKG1hdGNoLCBuYW1lKSB7XG4gICAgICBpZiAobmFtZSBpbiBrZXlmcmFtZXMpIHtcbiAgICAgICAgcmV0dXJuIGtleWZyYW1lc1tuYW1lXTtcbiAgICAgIH1cblxuICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhmYWxzZSwgXCJbSlNTXSBSZWZlcmVuY2VkIGtleWZyYW1lcyBydWxlIFxcXCJcIiArIG5hbWUgKyBcIlxcXCIgaXMgbm90IGRlZmluZWQuXCIpIDogdm9pZCAwO1xuICAgICAgcmV0dXJuIG1hdGNoO1xuICAgIH0pO1xuICB9XG5cbiAgcmV0dXJuIHZhbDtcbn07XG4vKipcbiAqIFJlcGxhY2UgdGhlIHJlZmVyZW5jZSBmb3IgYSBhbmltYXRpb24gbmFtZS5cbiAqL1xuXG5cbnZhciByZXBsYWNlUmVmID0gZnVuY3Rpb24gcmVwbGFjZVJlZihzdHlsZSwgcHJvcCwga2V5ZnJhbWVzKSB7XG4gIHZhciB2YWx1ZSA9IHN0eWxlW3Byb3BdO1xuICB2YXIgcmVmS2V5ZnJhbWUgPSBmaW5kUmVmZXJlbmNlZEtleWZyYW1lKHZhbHVlLCBrZXlmcmFtZXMpO1xuXG4gIGlmIChyZWZLZXlmcmFtZSAhPT0gdmFsdWUpIHtcbiAgICBzdHlsZVtwcm9wXSA9IHJlZktleWZyYW1lO1xuICB9XG59O1xuXG52YXIgcGx1Z2luID0ge1xuICBvbkNyZWF0ZVJ1bGU6IGZ1bmN0aW9uIG9uQ3JlYXRlUnVsZShrZXksIGZyYW1lcywgb3B0aW9ucykge1xuICAgIHJldHVybiB0eXBlb2Yga2V5ID09PSAnc3RyaW5nJyAmJiBrZXlSZWdFeHAkMS50ZXN0KGtleSkgPyBuZXcgS2V5ZnJhbWVzUnVsZShrZXksIGZyYW1lcywgb3B0aW9ucykgOiBudWxsO1xuICB9LFxuICAvLyBBbmltYXRpb24gbmFtZSByZWYgcmVwbGFjZXIuXG4gIG9uUHJvY2Vzc1N0eWxlOiBmdW5jdGlvbiBvblByb2Nlc3NTdHlsZShzdHlsZSwgcnVsZSwgc2hlZXQpIHtcbiAgICBpZiAocnVsZS50eXBlICE9PSAnc3R5bGUnIHx8ICFzaGVldCkgcmV0dXJuIHN0eWxlO1xuICAgIGlmICgnYW5pbWF0aW9uLW5hbWUnIGluIHN0eWxlKSByZXBsYWNlUmVmKHN0eWxlLCAnYW5pbWF0aW9uLW5hbWUnLCBzaGVldC5rZXlmcmFtZXMpO1xuICAgIGlmICgnYW5pbWF0aW9uJyBpbiBzdHlsZSkgcmVwbGFjZVJlZihzdHlsZSwgJ2FuaW1hdGlvbicsIHNoZWV0LmtleWZyYW1lcyk7XG4gICAgcmV0dXJuIHN0eWxlO1xuICB9LFxuICBvbkNoYW5nZVZhbHVlOiBmdW5jdGlvbiBvbkNoYW5nZVZhbHVlKHZhbCwgcHJvcCwgcnVsZSkge1xuICAgIHZhciBzaGVldCA9IHJ1bGUub3B0aW9ucy5zaGVldDtcblxuICAgIGlmICghc2hlZXQpIHtcbiAgICAgIHJldHVybiB2YWw7XG4gICAgfVxuXG4gICAgc3dpdGNoIChwcm9wKSB7XG4gICAgICBjYXNlICdhbmltYXRpb24nOlxuICAgICAgICByZXR1cm4gZmluZFJlZmVyZW5jZWRLZXlmcmFtZSh2YWwsIHNoZWV0LmtleWZyYW1lcyk7XG5cbiAgICAgIGNhc2UgJ2FuaW1hdGlvbi1uYW1lJzpcbiAgICAgICAgcmV0dXJuIGZpbmRSZWZlcmVuY2VkS2V5ZnJhbWUodmFsLCBzaGVldC5rZXlmcmFtZXMpO1xuXG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gdmFsO1xuICAgIH1cbiAgfVxufTtcblxudmFyIEtleWZyYW1lUnVsZSA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX0Jhc2VTdHlsZVJ1bGUpIHtcbiAgX2luaGVyaXRzTG9vc2UoS2V5ZnJhbWVSdWxlLCBfQmFzZVN0eWxlUnVsZSk7XG5cbiAgZnVuY3Rpb24gS2V5ZnJhbWVSdWxlKCkge1xuICAgIHZhciBfdGhpcztcblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICBfdGhpcyA9IF9CYXNlU3R5bGVSdWxlLmNhbGwuYXBwbHkoX0Jhc2VTdHlsZVJ1bGUsIFt0aGlzXS5jb25jYXQoYXJncykpIHx8IHRoaXM7XG4gICAgX3RoaXMucmVuZGVyYWJsZSA9IHZvaWQgMDtcbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gS2V5ZnJhbWVSdWxlLnByb3RvdHlwZTtcblxuICAvKipcbiAgICogR2VuZXJhdGVzIGEgQ1NTIHN0cmluZy5cbiAgICovXG4gIF9wcm90by50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKG9wdGlvbnMpIHtcbiAgICB2YXIgc2hlZXQgPSB0aGlzLm9wdGlvbnMuc2hlZXQ7XG4gICAgdmFyIGxpbmsgPSBzaGVldCA/IHNoZWV0Lm9wdGlvbnMubGluayA6IGZhbHNlO1xuICAgIHZhciBvcHRzID0gbGluayA/IF9leHRlbmRzKHt9LCBvcHRpb25zLCB7XG4gICAgICBhbGxvd0VtcHR5OiB0cnVlXG4gICAgfSkgOiBvcHRpb25zO1xuICAgIHJldHVybiB0b0Nzcyh0aGlzLmtleSwgdGhpcy5zdHlsZSwgb3B0cyk7XG4gIH07XG5cbiAgcmV0dXJuIEtleWZyYW1lUnVsZTtcbn0oQmFzZVN0eWxlUnVsZSk7XG52YXIgcGx1Z2luS2V5ZnJhbWVSdWxlID0ge1xuICBvbkNyZWF0ZVJ1bGU6IGZ1bmN0aW9uIG9uQ3JlYXRlUnVsZShrZXksIHN0eWxlLCBvcHRpb25zKSB7XG4gICAgaWYgKG9wdGlvbnMucGFyZW50ICYmIG9wdGlvbnMucGFyZW50LnR5cGUgPT09ICdrZXlmcmFtZXMnKSB7XG4gICAgICByZXR1cm4gbmV3IEtleWZyYW1lUnVsZShrZXksIHN0eWxlLCBvcHRpb25zKTtcbiAgICB9XG5cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxufTtcblxudmFyIEZvbnRGYWNlUnVsZSA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIEZvbnRGYWNlUnVsZShrZXksIHN0eWxlLCBvcHRpb25zKSB7XG4gICAgdGhpcy50eXBlID0gJ2ZvbnQtZmFjZSc7XG4gICAgdGhpcy5hdCA9ICdAZm9udC1mYWNlJztcbiAgICB0aGlzLmtleSA9IHZvaWQgMDtcbiAgICB0aGlzLnN0eWxlID0gdm9pZCAwO1xuICAgIHRoaXMub3B0aW9ucyA9IHZvaWQgMDtcbiAgICB0aGlzLmlzUHJvY2Vzc2VkID0gZmFsc2U7XG4gICAgdGhpcy5yZW5kZXJhYmxlID0gdm9pZCAwO1xuICAgIHRoaXMua2V5ID0ga2V5O1xuICAgIHRoaXMuc3R5bGUgPSBzdHlsZTtcbiAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuICB9XG4gIC8qKlxuICAgKiBHZW5lcmF0ZXMgYSBDU1Mgc3RyaW5nLlxuICAgKi9cblxuXG4gIHZhciBfcHJvdG8gPSBGb250RmFjZVJ1bGUucHJvdG90eXBlO1xuXG4gIF9wcm90by50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKG9wdGlvbnMpIHtcbiAgICBpZiAoQXJyYXkuaXNBcnJheSh0aGlzLnN0eWxlKSkge1xuICAgICAgdmFyIHN0ciA9ICcnO1xuXG4gICAgICBmb3IgKHZhciBpbmRleCA9IDA7IGluZGV4IDwgdGhpcy5zdHlsZS5sZW5ndGg7IGluZGV4KyspIHtcbiAgICAgICAgc3RyICs9IHRvQ3NzKHRoaXMuYXQsIHRoaXMuc3R5bGVbaW5kZXhdKTtcbiAgICAgICAgaWYgKHRoaXMuc3R5bGVbaW5kZXggKyAxXSkgc3RyICs9ICdcXG4nO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gc3RyO1xuICAgIH1cblxuICAgIHJldHVybiB0b0Nzcyh0aGlzLmF0LCB0aGlzLnN0eWxlLCBvcHRpb25zKTtcbiAgfTtcblxuICByZXR1cm4gRm9udEZhY2VSdWxlO1xufSgpO1xudmFyIGtleVJlZ0V4cCQyID0gL0Bmb250LWZhY2UvO1xudmFyIHBsdWdpbkZvbnRGYWNlUnVsZSA9IHtcbiAgb25DcmVhdGVSdWxlOiBmdW5jdGlvbiBvbkNyZWF0ZVJ1bGUoa2V5LCBzdHlsZSwgb3B0aW9ucykge1xuICAgIHJldHVybiBrZXlSZWdFeHAkMi50ZXN0KGtleSkgPyBuZXcgRm9udEZhY2VSdWxlKGtleSwgc3R5bGUsIG9wdGlvbnMpIDogbnVsbDtcbiAgfVxufTtcblxudmFyIFZpZXdwb3J0UnVsZSA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIFZpZXdwb3J0UnVsZShrZXksIHN0eWxlLCBvcHRpb25zKSB7XG4gICAgdGhpcy50eXBlID0gJ3ZpZXdwb3J0JztcbiAgICB0aGlzLmF0ID0gJ0B2aWV3cG9ydCc7XG4gICAgdGhpcy5rZXkgPSB2b2lkIDA7XG4gICAgdGhpcy5zdHlsZSA9IHZvaWQgMDtcbiAgICB0aGlzLm9wdGlvbnMgPSB2b2lkIDA7XG4gICAgdGhpcy5pc1Byb2Nlc3NlZCA9IGZhbHNlO1xuICAgIHRoaXMucmVuZGVyYWJsZSA9IHZvaWQgMDtcbiAgICB0aGlzLmtleSA9IGtleTtcbiAgICB0aGlzLnN0eWxlID0gc3R5bGU7XG4gICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcbiAgfVxuICAvKipcbiAgICogR2VuZXJhdGVzIGEgQ1NTIHN0cmluZy5cbiAgICovXG5cblxuICB2YXIgX3Byb3RvID0gVmlld3BvcnRSdWxlLnByb3RvdHlwZTtcblxuICBfcHJvdG8udG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZyhvcHRpb25zKSB7XG4gICAgcmV0dXJuIHRvQ3NzKHRoaXMua2V5LCB0aGlzLnN0eWxlLCBvcHRpb25zKTtcbiAgfTtcblxuICByZXR1cm4gVmlld3BvcnRSdWxlO1xufSgpO1xudmFyIHBsdWdpblZpZXdwb3J0UnVsZSA9IHtcbiAgb25DcmVhdGVSdWxlOiBmdW5jdGlvbiBvbkNyZWF0ZVJ1bGUoa2V5LCBzdHlsZSwgb3B0aW9ucykge1xuICAgIHJldHVybiBrZXkgPT09ICdAdmlld3BvcnQnIHx8IGtleSA9PT0gJ0AtbXMtdmlld3BvcnQnID8gbmV3IFZpZXdwb3J0UnVsZShrZXksIHN0eWxlLCBvcHRpb25zKSA6IG51bGw7XG4gIH1cbn07XG5cbnZhciBTaW1wbGVSdWxlID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gU2ltcGxlUnVsZShrZXksIHZhbHVlLCBvcHRpb25zKSB7XG4gICAgdGhpcy50eXBlID0gJ3NpbXBsZSc7XG4gICAgdGhpcy5rZXkgPSB2b2lkIDA7XG4gICAgdGhpcy52YWx1ZSA9IHZvaWQgMDtcbiAgICB0aGlzLm9wdGlvbnMgPSB2b2lkIDA7XG4gICAgdGhpcy5pc1Byb2Nlc3NlZCA9IGZhbHNlO1xuICAgIHRoaXMucmVuZGVyYWJsZSA9IHZvaWQgMDtcbiAgICB0aGlzLmtleSA9IGtleTtcbiAgICB0aGlzLnZhbHVlID0gdmFsdWU7XG4gICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcbiAgfVxuICAvKipcbiAgICogR2VuZXJhdGVzIGEgQ1NTIHN0cmluZy5cbiAgICovXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnVzZWQtdmFyc1xuXG5cbiAgdmFyIF9wcm90byA9IFNpbXBsZVJ1bGUucHJvdG90eXBlO1xuXG4gIF9wcm90by50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKG9wdGlvbnMpIHtcbiAgICBpZiAoQXJyYXkuaXNBcnJheSh0aGlzLnZhbHVlKSkge1xuICAgICAgdmFyIHN0ciA9ICcnO1xuXG4gICAgICBmb3IgKHZhciBpbmRleCA9IDA7IGluZGV4IDwgdGhpcy52YWx1ZS5sZW5ndGg7IGluZGV4KyspIHtcbiAgICAgICAgc3RyICs9IHRoaXMua2V5ICsgXCIgXCIgKyB0aGlzLnZhbHVlW2luZGV4XSArIFwiO1wiO1xuICAgICAgICBpZiAodGhpcy52YWx1ZVtpbmRleCArIDFdKSBzdHIgKz0gJ1xcbic7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBzdHI7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMua2V5ICsgXCIgXCIgKyB0aGlzLnZhbHVlICsgXCI7XCI7XG4gIH07XG5cbiAgcmV0dXJuIFNpbXBsZVJ1bGU7XG59KCk7XG52YXIga2V5c01hcCA9IHtcbiAgJ0BjaGFyc2V0JzogdHJ1ZSxcbiAgJ0BpbXBvcnQnOiB0cnVlLFxuICAnQG5hbWVzcGFjZSc6IHRydWVcbn07XG52YXIgcGx1Z2luU2ltcGxlUnVsZSA9IHtcbiAgb25DcmVhdGVSdWxlOiBmdW5jdGlvbiBvbkNyZWF0ZVJ1bGUoa2V5LCB2YWx1ZSwgb3B0aW9ucykge1xuICAgIHJldHVybiBrZXkgaW4ga2V5c01hcCA/IG5ldyBTaW1wbGVSdWxlKGtleSwgdmFsdWUsIG9wdGlvbnMpIDogbnVsbDtcbiAgfVxufTtcblxudmFyIHBsdWdpbnMgPSBbcGx1Z2luU3R5bGVSdWxlLCBwbHVnaW5Db25kaXRpb25hbFJ1bGUsIHBsdWdpbiwgcGx1Z2luS2V5ZnJhbWVSdWxlLCBwbHVnaW5Gb250RmFjZVJ1bGUsIHBsdWdpblZpZXdwb3J0UnVsZSwgcGx1Z2luU2ltcGxlUnVsZV07XG5cbnZhciBkZWZhdWx0VXBkYXRlT3B0aW9ucyA9IHtcbiAgcHJvY2VzczogdHJ1ZVxufTtcbnZhciBmb3JjZVVwZGF0ZU9wdGlvbnMgPSB7XG4gIGZvcmNlOiB0cnVlLFxuICBwcm9jZXNzOiB0cnVlXG4gIC8qKlxuICAgKiBDb250YWlucyBydWxlcyBvYmplY3RzIGFuZCBhbGxvd3MgYWRkaW5nL3JlbW92aW5nIGV0Yy5cbiAgICogSXMgdXNlZCBmb3IgZS5nLiBieSBgU3R5bGVTaGVldGAgb3IgYENvbmRpdGlvbmFsUnVsZWAuXG4gICAqL1xuXG59O1xuXG52YXIgUnVsZUxpc3QgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKCkge1xuICAvLyBSdWxlcyByZWdpc3RyeSBmb3IgYWNjZXNzIGJ5IC5nZXQoKSBtZXRob2QuXG4gIC8vIEl0IGNvbnRhaW5zIHRoZSBzYW1lIHJ1bGUgcmVnaXN0ZXJlZCBieSBuYW1lIGFuZCBieSBzZWxlY3Rvci5cbiAgLy8gT3JpZ2luYWwgc3R5bGVzIG9iamVjdC5cbiAgLy8gVXNlZCB0byBlbnN1cmUgY29ycmVjdCBydWxlcyBvcmRlci5cbiAgZnVuY3Rpb24gUnVsZUxpc3Qob3B0aW9ucykge1xuICAgIHRoaXMubWFwID0ge307XG4gICAgdGhpcy5yYXcgPSB7fTtcbiAgICB0aGlzLmluZGV4ID0gW107XG4gICAgdGhpcy5jb3VudGVyID0gMDtcbiAgICB0aGlzLm9wdGlvbnMgPSB2b2lkIDA7XG4gICAgdGhpcy5jbGFzc2VzID0gdm9pZCAwO1xuICAgIHRoaXMua2V5ZnJhbWVzID0gdm9pZCAwO1xuICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgdGhpcy5jbGFzc2VzID0gb3B0aW9ucy5jbGFzc2VzO1xuICAgIHRoaXMua2V5ZnJhbWVzID0gb3B0aW9ucy5rZXlmcmFtZXM7XG4gIH1cbiAgLyoqXG4gICAqIENyZWF0ZSBhbmQgcmVnaXN0ZXIgcnVsZS5cbiAgICpcbiAgICogV2lsbCBub3QgcmVuZGVyIGFmdGVyIFN0eWxlIFNoZWV0IHdhcyByZW5kZXJlZCB0aGUgZmlyc3QgdGltZS5cbiAgICovXG5cblxuICB2YXIgX3Byb3RvID0gUnVsZUxpc3QucHJvdG90eXBlO1xuXG4gIF9wcm90by5hZGQgPSBmdW5jdGlvbiBhZGQobmFtZSwgZGVjbCwgcnVsZU9wdGlvbnMpIHtcbiAgICB2YXIgX3RoaXMkb3B0aW9ucyA9IHRoaXMub3B0aW9ucyxcbiAgICAgICAgcGFyZW50ID0gX3RoaXMkb3B0aW9ucy5wYXJlbnQsXG4gICAgICAgIHNoZWV0ID0gX3RoaXMkb3B0aW9ucy5zaGVldCxcbiAgICAgICAganNzID0gX3RoaXMkb3B0aW9ucy5qc3MsXG4gICAgICAgIFJlbmRlcmVyID0gX3RoaXMkb3B0aW9ucy5SZW5kZXJlcixcbiAgICAgICAgZ2VuZXJhdGVJZCA9IF90aGlzJG9wdGlvbnMuZ2VuZXJhdGVJZCxcbiAgICAgICAgc2NvcGVkID0gX3RoaXMkb3B0aW9ucy5zY29wZWQ7XG5cbiAgICB2YXIgb3B0aW9ucyA9IF9leHRlbmRzKHtcbiAgICAgIGNsYXNzZXM6IHRoaXMuY2xhc3NlcyxcbiAgICAgIHBhcmVudDogcGFyZW50LFxuICAgICAgc2hlZXQ6IHNoZWV0LFxuICAgICAganNzOiBqc3MsXG4gICAgICBSZW5kZXJlcjogUmVuZGVyZXIsXG4gICAgICBnZW5lcmF0ZUlkOiBnZW5lcmF0ZUlkLFxuICAgICAgc2NvcGVkOiBzY29wZWQsXG4gICAgICBuYW1lOiBuYW1lLFxuICAgICAga2V5ZnJhbWVzOiB0aGlzLmtleWZyYW1lcyxcbiAgICAgIHNlbGVjdG9yOiB1bmRlZmluZWRcbiAgICB9LCBydWxlT3B0aW9ucyk7IC8vIFdoZW4gdXNlciB1c2VzIC5jcmVhdGVTdHlsZVNoZWV0KCksIGR1cGxpY2F0ZSBuYW1lcyBhcmUgbm90IHBvc3NpYmxlLCBidXRcbiAgICAvLyBgc2hlZXQuYWRkUnVsZSgpYCBvcGVucyB0aGUgZG9vciBmb3IgYW55IGR1cGxpY2F0ZSBydWxlIG5hbWUuIFdoZW4gdGhpcyBoYXBwZW5zXG4gICAgLy8gd2UgbmVlZCB0byBtYWtlIHRoZSBrZXkgdW5pcXVlIHdpdGhpbiB0aGlzIFJ1bGVMaXN0IGluc3RhbmNlIHNjb3BlLlxuXG5cbiAgICB2YXIga2V5ID0gbmFtZTtcblxuICAgIGlmIChuYW1lIGluIHRoaXMucmF3KSB7XG4gICAgICBrZXkgPSBuYW1lICsgXCItZFwiICsgdGhpcy5jb3VudGVyKys7XG4gICAgfSAvLyBXZSBuZWVkIHRvIHNhdmUgdGhlIG9yaWdpbmFsIGRlY2wgYmVmb3JlIGNyZWF0aW5nIHRoZSBydWxlXG4gICAgLy8gYmVjYXVzZSBjYWNoZSBwbHVnaW4gbmVlZHMgdG8gdXNlIGl0IGFzIGEga2V5IHRvIHJldHVybiBhIGNhY2hlZCBydWxlLlxuXG5cbiAgICB0aGlzLnJhd1trZXldID0gZGVjbDtcblxuICAgIGlmIChrZXkgaW4gdGhpcy5jbGFzc2VzKSB7XG4gICAgICAvLyBFLmcuIHJ1bGVzIGluc2lkZSBvZiBAbWVkaWEgY29udGFpbmVyXG4gICAgICBvcHRpb25zLnNlbGVjdG9yID0gXCIuXCIgKyBlc2NhcGUodGhpcy5jbGFzc2VzW2tleV0pO1xuICAgIH1cblxuICAgIHZhciBydWxlID0gY3JlYXRlUnVsZShrZXksIGRlY2wsIG9wdGlvbnMpO1xuICAgIGlmICghcnVsZSkgcmV0dXJuIG51bGw7XG4gICAgdGhpcy5yZWdpc3RlcihydWxlKTtcbiAgICB2YXIgaW5kZXggPSBvcHRpb25zLmluZGV4ID09PSB1bmRlZmluZWQgPyB0aGlzLmluZGV4Lmxlbmd0aCA6IG9wdGlvbnMuaW5kZXg7XG4gICAgdGhpcy5pbmRleC5zcGxpY2UoaW5kZXgsIDAsIHJ1bGUpO1xuICAgIHJldHVybiBydWxlO1xuICB9XG4gIC8qKlxuICAgKiBHZXQgYSBydWxlLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5nZXQgPSBmdW5jdGlvbiBnZXQobmFtZSkge1xuICAgIHJldHVybiB0aGlzLm1hcFtuYW1lXTtcbiAgfVxuICAvKipcbiAgICogRGVsZXRlIGEgcnVsZS5cbiAgICovXG4gIDtcblxuICBfcHJvdG8ucmVtb3ZlID0gZnVuY3Rpb24gcmVtb3ZlKHJ1bGUpIHtcbiAgICB0aGlzLnVucmVnaXN0ZXIocnVsZSk7XG4gICAgZGVsZXRlIHRoaXMucmF3W3J1bGUua2V5XTtcbiAgICB0aGlzLmluZGV4LnNwbGljZSh0aGlzLmluZGV4LmluZGV4T2YocnVsZSksIDEpO1xuICB9XG4gIC8qKlxuICAgKiBHZXQgaW5kZXggb2YgYSBydWxlLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5pbmRleE9mID0gZnVuY3Rpb24gaW5kZXhPZihydWxlKSB7XG4gICAgcmV0dXJuIHRoaXMuaW5kZXguaW5kZXhPZihydWxlKTtcbiAgfVxuICAvKipcbiAgICogUnVuIGBvblByb2Nlc3NSdWxlKClgIHBsdWdpbnMgb24gZXZlcnkgcnVsZS5cbiAgICovXG4gIDtcblxuICBfcHJvdG8ucHJvY2VzcyA9IGZ1bmN0aW9uIHByb2Nlc3MoKSB7XG4gICAgdmFyIHBsdWdpbnMgPSB0aGlzLm9wdGlvbnMuanNzLnBsdWdpbnM7IC8vIFdlIG5lZWQgdG8gY2xvbmUgYXJyYXkgYmVjYXVzZSBpZiB3ZSBtb2RpZnkgdGhlIGluZGV4IHNvbWV3aGVyZSBlbHNlIGR1cmluZyBhIGxvb3BcbiAgICAvLyB3ZSBlbmQgdXAgd2l0aCB2ZXJ5IGhhcmQtdG8tdHJhY2stZG93biBzaWRlIGVmZmVjdHMuXG5cbiAgICB0aGlzLmluZGV4LnNsaWNlKDApLmZvckVhY2gocGx1Z2lucy5vblByb2Nlc3NSdWxlLCBwbHVnaW5zKTtcbiAgfVxuICAvKipcbiAgICogUmVnaXN0ZXIgYSBydWxlIGluIGAubWFwYCwgYC5jbGFzc2VzYCBhbmQgYC5rZXlmcmFtZXNgIG1hcHMuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnJlZ2lzdGVyID0gZnVuY3Rpb24gcmVnaXN0ZXIocnVsZSkge1xuICAgIHRoaXMubWFwW3J1bGUua2V5XSA9IHJ1bGU7XG5cbiAgICBpZiAocnVsZSBpbnN0YW5jZW9mIFN0eWxlUnVsZSkge1xuICAgICAgdGhpcy5tYXBbcnVsZS5zZWxlY3Rvcl0gPSBydWxlO1xuICAgICAgaWYgKHJ1bGUuaWQpIHRoaXMuY2xhc3Nlc1tydWxlLmtleV0gPSBydWxlLmlkO1xuICAgIH0gZWxzZSBpZiAocnVsZSBpbnN0YW5jZW9mIEtleWZyYW1lc1J1bGUgJiYgdGhpcy5rZXlmcmFtZXMpIHtcbiAgICAgIHRoaXMua2V5ZnJhbWVzW3J1bGUubmFtZV0gPSBydWxlLmlkO1xuICAgIH1cbiAgfVxuICAvKipcbiAgICogVW5yZWdpc3RlciBhIHJ1bGUuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnVucmVnaXN0ZXIgPSBmdW5jdGlvbiB1bnJlZ2lzdGVyKHJ1bGUpIHtcbiAgICBkZWxldGUgdGhpcy5tYXBbcnVsZS5rZXldO1xuXG4gICAgaWYgKHJ1bGUgaW5zdGFuY2VvZiBTdHlsZVJ1bGUpIHtcbiAgICAgIGRlbGV0ZSB0aGlzLm1hcFtydWxlLnNlbGVjdG9yXTtcbiAgICAgIGRlbGV0ZSB0aGlzLmNsYXNzZXNbcnVsZS5rZXldO1xuICAgIH0gZWxzZSBpZiAocnVsZSBpbnN0YW5jZW9mIEtleWZyYW1lc1J1bGUpIHtcbiAgICAgIGRlbGV0ZSB0aGlzLmtleWZyYW1lc1tydWxlLm5hbWVdO1xuICAgIH1cbiAgfVxuICAvKipcbiAgICogVXBkYXRlIHRoZSBmdW5jdGlvbiB2YWx1ZXMgd2l0aCBhIG5ldyBkYXRhLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by51cGRhdGUgPSBmdW5jdGlvbiB1cGRhdGUoKSB7XG4gICAgdmFyIG5hbWU7XG4gICAgdmFyIGRhdGE7XG4gICAgdmFyIG9wdGlvbnM7XG5cbiAgICBpZiAodHlwZW9mIChhcmd1bWVudHMubGVuZ3RoIDw9IDAgPyB1bmRlZmluZWQgOiBhcmd1bWVudHNbMF0pID09PSAnc3RyaW5nJykge1xuICAgICAgbmFtZSA9IGFyZ3VtZW50cy5sZW5ndGggPD0gMCA/IHVuZGVmaW5lZCA6IGFyZ3VtZW50c1swXTsgLy8gJEZsb3dGaXhNZVxuXG4gICAgICBkYXRhID0gYXJndW1lbnRzLmxlbmd0aCA8PSAxID8gdW5kZWZpbmVkIDogYXJndW1lbnRzWzFdOyAvLyAkRmxvd0ZpeE1lXG5cbiAgICAgIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoIDw9IDIgPyB1bmRlZmluZWQgOiBhcmd1bWVudHNbMl07XG4gICAgfSBlbHNlIHtcbiAgICAgIGRhdGEgPSBhcmd1bWVudHMubGVuZ3RoIDw9IDAgPyB1bmRlZmluZWQgOiBhcmd1bWVudHNbMF07IC8vICRGbG93Rml4TWVcblxuICAgICAgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPD0gMSA/IHVuZGVmaW5lZCA6IGFyZ3VtZW50c1sxXTtcbiAgICAgIG5hbWUgPSBudWxsO1xuICAgIH1cblxuICAgIGlmIChuYW1lKSB7XG4gICAgICB0aGlzLnVwZGF0ZU9uZSh0aGlzLm1hcFtuYW1lXSwgZGF0YSwgb3B0aW9ucyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGZvciAodmFyIGluZGV4ID0gMDsgaW5kZXggPCB0aGlzLmluZGV4Lmxlbmd0aDsgaW5kZXgrKykge1xuICAgICAgICB0aGlzLnVwZGF0ZU9uZSh0aGlzLmluZGV4W2luZGV4XSwgZGF0YSwgb3B0aW9ucyk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBFeGVjdXRlIHBsdWdpbnMsIHVwZGF0ZSBydWxlIHByb3BzLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by51cGRhdGVPbmUgPSBmdW5jdGlvbiB1cGRhdGVPbmUocnVsZSwgZGF0YSwgb3B0aW9ucykge1xuICAgIGlmIChvcHRpb25zID09PSB2b2lkIDApIHtcbiAgICAgIG9wdGlvbnMgPSBkZWZhdWx0VXBkYXRlT3B0aW9ucztcbiAgICB9XG5cbiAgICB2YXIgX3RoaXMkb3B0aW9uczIgPSB0aGlzLm9wdGlvbnMsXG4gICAgICAgIHBsdWdpbnMgPSBfdGhpcyRvcHRpb25zMi5qc3MucGx1Z2lucyxcbiAgICAgICAgc2hlZXQgPSBfdGhpcyRvcHRpb25zMi5zaGVldDsgLy8gSXQgaXMgYSBydWxlcyBjb250YWluZXIgbGlrZSBmb3IgZS5nLiBDb25kaXRpb25hbFJ1bGUuXG5cbiAgICBpZiAocnVsZS5ydWxlcyBpbnN0YW5jZW9mIFJ1bGVMaXN0KSB7XG4gICAgICBydWxlLnJ1bGVzLnVwZGF0ZShkYXRhLCBvcHRpb25zKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgc3R5bGVSdWxlID0gcnVsZTtcbiAgICB2YXIgc3R5bGUgPSBzdHlsZVJ1bGUuc3R5bGU7XG4gICAgcGx1Z2lucy5vblVwZGF0ZShkYXRhLCBydWxlLCBzaGVldCwgb3B0aW9ucyk7IC8vIFdlIHJlbHkgb24gYSBuZXcgYHN0eWxlYCByZWYgaW4gY2FzZSBpdCB3YXMgbXV0YXRlZCBkdXJpbmcgb25VcGRhdGUgaG9vay5cblxuICAgIGlmIChvcHRpb25zLnByb2Nlc3MgJiYgc3R5bGUgJiYgc3R5bGUgIT09IHN0eWxlUnVsZS5zdHlsZSkge1xuICAgICAgLy8gV2UgbmVlZCB0byBydW4gdGhlIHBsdWdpbnMgaW4gY2FzZSBuZXcgYHN0eWxlYCByZWxpZXMgb24gc3ludGF4IHBsdWdpbnMuXG4gICAgICBwbHVnaW5zLm9uUHJvY2Vzc1N0eWxlKHN0eWxlUnVsZS5zdHlsZSwgc3R5bGVSdWxlLCBzaGVldCk7IC8vIFVwZGF0ZSBhbmQgYWRkIHByb3BzLlxuXG4gICAgICBmb3IgKHZhciBwcm9wIGluIHN0eWxlUnVsZS5zdHlsZSkge1xuICAgICAgICB2YXIgbmV4dFZhbHVlID0gc3R5bGVSdWxlLnN0eWxlW3Byb3BdO1xuICAgICAgICB2YXIgcHJldlZhbHVlID0gc3R5bGVbcHJvcF07IC8vIFdlIG5lZWQgdG8gdXNlIGBmb3JjZTogdHJ1ZWAgYmVjYXVzZSBgcnVsZS5zdHlsZWAgaGFzIGJlZW4gdXBkYXRlZCBkdXJpbmcgb25VcGRhdGUgaG9vaywgc28gYHJ1bGUucHJvcCgpYCB3aWxsIG5vdCB1cGRhdGUgdGhlIENTU09NIHJ1bGUuXG4gICAgICAgIC8vIFdlIGRvIHRoaXMgY29tcGFyaXNvbiB0byBhdm9pZCB1bm5lZWRlZCBgcnVsZS5wcm9wKClgIGNhbGxzLCBzaW5jZSB3ZSBoYXZlIHRoZSBvbGQgYHN0eWxlYCBvYmplY3QgaGVyZS5cblxuICAgICAgICBpZiAobmV4dFZhbHVlICE9PSBwcmV2VmFsdWUpIHtcbiAgICAgICAgICBzdHlsZVJ1bGUucHJvcChwcm9wLCBuZXh0VmFsdWUsIGZvcmNlVXBkYXRlT3B0aW9ucyk7XG4gICAgICAgIH1cbiAgICAgIH0gLy8gUmVtb3ZlIHByb3BzLlxuXG5cbiAgICAgIGZvciAodmFyIF9wcm9wIGluIHN0eWxlKSB7XG4gICAgICAgIHZhciBfbmV4dFZhbHVlID0gc3R5bGVSdWxlLnN0eWxlW19wcm9wXTtcbiAgICAgICAgdmFyIF9wcmV2VmFsdWUgPSBzdHlsZVtfcHJvcF07IC8vIFdlIG5lZWQgdG8gdXNlIGBmb3JjZTogdHJ1ZWAgYmVjYXVzZSBgcnVsZS5zdHlsZWAgaGFzIGJlZW4gdXBkYXRlZCBkdXJpbmcgb25VcGRhdGUgaG9vaywgc28gYHJ1bGUucHJvcCgpYCB3aWxsIG5vdCB1cGRhdGUgdGhlIENTU09NIHJ1bGUuXG4gICAgICAgIC8vIFdlIGRvIHRoaXMgY29tcGFyaXNvbiB0byBhdm9pZCB1bm5lZWRlZCBgcnVsZS5wcm9wKClgIGNhbGxzLCBzaW5jZSB3ZSBoYXZlIHRoZSBvbGQgYHN0eWxlYCBvYmplY3QgaGVyZS5cblxuICAgICAgICBpZiAoX25leHRWYWx1ZSA9PSBudWxsICYmIF9uZXh0VmFsdWUgIT09IF9wcmV2VmFsdWUpIHtcbiAgICAgICAgICBzdHlsZVJ1bGUucHJvcChfcHJvcCwgbnVsbCwgZm9yY2VVcGRhdGVPcHRpb25zKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuICAvKipcbiAgICogQ29udmVydCBydWxlcyB0byBhIENTUyBzdHJpbmcuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcob3B0aW9ucykge1xuICAgIHZhciBzdHIgPSAnJztcbiAgICB2YXIgc2hlZXQgPSB0aGlzLm9wdGlvbnMuc2hlZXQ7XG4gICAgdmFyIGxpbmsgPSBzaGVldCA/IHNoZWV0Lm9wdGlvbnMubGluayA6IGZhbHNlO1xuXG4gICAgZm9yICh2YXIgaW5kZXggPSAwOyBpbmRleCA8IHRoaXMuaW5kZXgubGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgICB2YXIgcnVsZSA9IHRoaXMuaW5kZXhbaW5kZXhdO1xuICAgICAgdmFyIGNzcyA9IHJ1bGUudG9TdHJpbmcob3B0aW9ucyk7IC8vIE5vIG5lZWQgdG8gcmVuZGVyIGFuIGVtcHR5IHJ1bGUuXG5cbiAgICAgIGlmICghY3NzICYmICFsaW5rKSBjb250aW51ZTtcbiAgICAgIGlmIChzdHIpIHN0ciArPSAnXFxuJztcbiAgICAgIHN0ciArPSBjc3M7XG4gICAgfVxuXG4gICAgcmV0dXJuIHN0cjtcbiAgfTtcblxuICByZXR1cm4gUnVsZUxpc3Q7XG59KCk7XG5cbnZhciBTdHlsZVNoZWV0ID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gU3R5bGVTaGVldChzdHlsZXMsIG9wdGlvbnMpIHtcbiAgICB0aGlzLm9wdGlvbnMgPSB2b2lkIDA7XG4gICAgdGhpcy5kZXBsb3llZCA9IHZvaWQgMDtcbiAgICB0aGlzLmF0dGFjaGVkID0gdm9pZCAwO1xuICAgIHRoaXMucnVsZXMgPSB2b2lkIDA7XG4gICAgdGhpcy5yZW5kZXJlciA9IHZvaWQgMDtcbiAgICB0aGlzLmNsYXNzZXMgPSB2b2lkIDA7XG4gICAgdGhpcy5rZXlmcmFtZXMgPSB2b2lkIDA7XG4gICAgdGhpcy5xdWV1ZSA9IHZvaWQgMDtcbiAgICB0aGlzLmF0dGFjaGVkID0gZmFsc2U7XG4gICAgdGhpcy5kZXBsb3llZCA9IGZhbHNlO1xuICAgIHRoaXMuY2xhc3NlcyA9IHt9O1xuICAgIHRoaXMua2V5ZnJhbWVzID0ge307XG4gICAgdGhpcy5vcHRpb25zID0gX2V4dGVuZHMoe30sIG9wdGlvbnMsIHtcbiAgICAgIHNoZWV0OiB0aGlzLFxuICAgICAgcGFyZW50OiB0aGlzLFxuICAgICAgY2xhc3NlczogdGhpcy5jbGFzc2VzLFxuICAgICAga2V5ZnJhbWVzOiB0aGlzLmtleWZyYW1lc1xuICAgIH0pO1xuXG4gICAgaWYgKG9wdGlvbnMuUmVuZGVyZXIpIHtcbiAgICAgIHRoaXMucmVuZGVyZXIgPSBuZXcgb3B0aW9ucy5SZW5kZXJlcih0aGlzKTtcbiAgICB9XG5cbiAgICB0aGlzLnJ1bGVzID0gbmV3IFJ1bGVMaXN0KHRoaXMub3B0aW9ucyk7XG5cbiAgICBmb3IgKHZhciBuYW1lIGluIHN0eWxlcykge1xuICAgICAgdGhpcy5ydWxlcy5hZGQobmFtZSwgc3R5bGVzW25hbWVdKTtcbiAgICB9XG5cbiAgICB0aGlzLnJ1bGVzLnByb2Nlc3MoKTtcbiAgfVxuICAvKipcbiAgICogQXR0YWNoIHJlbmRlcmFibGUgdG8gdGhlIHJlbmRlciB0cmVlLlxuICAgKi9cblxuXG4gIHZhciBfcHJvdG8gPSBTdHlsZVNoZWV0LnByb3RvdHlwZTtcblxuICBfcHJvdG8uYXR0YWNoID0gZnVuY3Rpb24gYXR0YWNoKCkge1xuICAgIGlmICh0aGlzLmF0dGFjaGVkKSByZXR1cm4gdGhpcztcbiAgICBpZiAodGhpcy5yZW5kZXJlcikgdGhpcy5yZW5kZXJlci5hdHRhY2goKTtcbiAgICB0aGlzLmF0dGFjaGVkID0gdHJ1ZTsgLy8gT3JkZXIgaXMgaW1wb3J0YW50LCBiZWNhdXNlIHdlIGNhbid0IHVzZSBpbnNlcnRSdWxlIEFQSSBpZiBzdHlsZSBlbGVtZW50IGlzIG5vdCBhdHRhY2hlZC5cblxuICAgIGlmICghdGhpcy5kZXBsb3llZCkgdGhpcy5kZXBsb3koKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuICAvKipcbiAgICogUmVtb3ZlIHJlbmRlcmFibGUgZnJvbSByZW5kZXIgdHJlZS5cbiAgICovXG4gIDtcblxuICBfcHJvdG8uZGV0YWNoID0gZnVuY3Rpb24gZGV0YWNoKCkge1xuICAgIGlmICghdGhpcy5hdHRhY2hlZCkgcmV0dXJuIHRoaXM7XG4gICAgaWYgKHRoaXMucmVuZGVyZXIpIHRoaXMucmVuZGVyZXIuZGV0YWNoKCk7XG4gICAgdGhpcy5hdHRhY2hlZCA9IGZhbHNlO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG4gIC8qKlxuICAgKiBBZGQgYSBydWxlIHRvIHRoZSBjdXJyZW50IHN0eWxlc2hlZXQuXG4gICAqIFdpbGwgaW5zZXJ0IGEgcnVsZSBhbHNvIGFmdGVyIHRoZSBzdHlsZXNoZWV0IGhhcyBiZWVuIHJlbmRlcmVkIGZpcnN0IHRpbWUuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmFkZFJ1bGUgPSBmdW5jdGlvbiBhZGRSdWxlKG5hbWUsIGRlY2wsIG9wdGlvbnMpIHtcbiAgICB2YXIgcXVldWUgPSB0aGlzLnF1ZXVlOyAvLyBQbHVnaW5zIGNhbiBjcmVhdGUgcnVsZXMuXG4gICAgLy8gSW4gb3JkZXIgdG8gcHJlc2VydmUgdGhlIHJpZ2h0IG9yZGVyLCB3ZSBuZWVkIHRvIHF1ZXVlIGFsbCBgLmFkZFJ1bGVgIGNhbGxzLFxuICAgIC8vIHdoaWNoIGhhcHBlbiBhZnRlciB0aGUgZmlyc3QgYHJ1bGVzLmFkZCgpYCBjYWxsLlxuXG4gICAgaWYgKHRoaXMuYXR0YWNoZWQgJiYgIXF1ZXVlKSB0aGlzLnF1ZXVlID0gW107XG4gICAgdmFyIHJ1bGUgPSB0aGlzLnJ1bGVzLmFkZChuYW1lLCBkZWNsLCBvcHRpb25zKTtcbiAgICBpZiAoIXJ1bGUpIHJldHVybiBudWxsO1xuICAgIHRoaXMub3B0aW9ucy5qc3MucGx1Z2lucy5vblByb2Nlc3NSdWxlKHJ1bGUpO1xuXG4gICAgaWYgKHRoaXMuYXR0YWNoZWQpIHtcbiAgICAgIGlmICghdGhpcy5kZXBsb3llZCkgcmV0dXJuIHJ1bGU7IC8vIERvbid0IGluc2VydCBydWxlIGRpcmVjdGx5IGlmIHRoZXJlIGlzIG5vIHN0cmluZ2lmaWVkIHZlcnNpb24geWV0LlxuICAgICAgLy8gSXQgd2lsbCBiZSBpbnNlcnRlZCBhbGwgdG9nZXRoZXIgd2hlbiAuYXR0YWNoIGlzIGNhbGxlZC5cblxuICAgICAgaWYgKHF1ZXVlKSBxdWV1ZS5wdXNoKHJ1bGUpO2Vsc2Uge1xuICAgICAgICB0aGlzLmluc2VydFJ1bGUocnVsZSk7XG5cbiAgICAgICAgaWYgKHRoaXMucXVldWUpIHtcbiAgICAgICAgICB0aGlzLnF1ZXVlLmZvckVhY2godGhpcy5pbnNlcnRSdWxlLCB0aGlzKTtcbiAgICAgICAgICB0aGlzLnF1ZXVlID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gcnVsZTtcbiAgICB9IC8vIFdlIGNhbid0IGFkZCBydWxlcyB0byBhIGRldGFjaGVkIHN0eWxlIG5vZGUuXG4gICAgLy8gV2Ugd2lsbCByZWRlcGxveSB0aGUgc2hlZXQgb25jZSB1c2VyIHdpbGwgYXR0YWNoIGl0LlxuXG5cbiAgICB0aGlzLmRlcGxveWVkID0gZmFsc2U7XG4gICAgcmV0dXJuIHJ1bGU7XG4gIH1cbiAgLyoqXG4gICAqIEluc2VydCBydWxlIGludG8gdGhlIFN0eWxlU2hlZXRcbiAgICovXG4gIDtcblxuICBfcHJvdG8uaW5zZXJ0UnVsZSA9IGZ1bmN0aW9uIGluc2VydFJ1bGUocnVsZSkge1xuICAgIGlmICh0aGlzLnJlbmRlcmVyKSB7XG4gICAgICB0aGlzLnJlbmRlcmVyLmluc2VydFJ1bGUocnVsZSk7XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBDcmVhdGUgYW5kIGFkZCBydWxlcy5cbiAgICogV2lsbCByZW5kZXIgYWxzbyBhZnRlciBTdHlsZSBTaGVldCB3YXMgcmVuZGVyZWQgdGhlIGZpcnN0IHRpbWUuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmFkZFJ1bGVzID0gZnVuY3Rpb24gYWRkUnVsZXMoc3R5bGVzLCBvcHRpb25zKSB7XG4gICAgdmFyIGFkZGVkID0gW107XG5cbiAgICBmb3IgKHZhciBuYW1lIGluIHN0eWxlcykge1xuICAgICAgdmFyIHJ1bGUgPSB0aGlzLmFkZFJ1bGUobmFtZSwgc3R5bGVzW25hbWVdLCBvcHRpb25zKTtcbiAgICAgIGlmIChydWxlKSBhZGRlZC5wdXNoKHJ1bGUpO1xuICAgIH1cblxuICAgIHJldHVybiBhZGRlZDtcbiAgfVxuICAvKipcbiAgICogR2V0IGEgcnVsZSBieSBuYW1lLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5nZXRSdWxlID0gZnVuY3Rpb24gZ2V0UnVsZShuYW1lKSB7XG4gICAgcmV0dXJuIHRoaXMucnVsZXMuZ2V0KG5hbWUpO1xuICB9XG4gIC8qKlxuICAgKiBEZWxldGUgYSBydWxlIGJ5IG5hbWUuXG4gICAqIFJldHVybnMgYHRydWVgOiBpZiBydWxlIGhhcyBiZWVuIGRlbGV0ZWQgZnJvbSB0aGUgRE9NLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5kZWxldGVSdWxlID0gZnVuY3Rpb24gZGVsZXRlUnVsZShuYW1lKSB7XG4gICAgdmFyIHJ1bGUgPSB0eXBlb2YgbmFtZSA9PT0gJ29iamVjdCcgPyBuYW1lIDogdGhpcy5ydWxlcy5nZXQobmFtZSk7XG4gICAgaWYgKCFydWxlKSByZXR1cm4gZmFsc2U7XG4gICAgdGhpcy5ydWxlcy5yZW1vdmUocnVsZSk7XG5cbiAgICBpZiAodGhpcy5hdHRhY2hlZCAmJiBydWxlLnJlbmRlcmFibGUgJiYgdGhpcy5yZW5kZXJlcikge1xuICAgICAgcmV0dXJuIHRoaXMucmVuZGVyZXIuZGVsZXRlUnVsZShydWxlLnJlbmRlcmFibGUpO1xuICAgIH1cblxuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIC8qKlxuICAgKiBHZXQgaW5kZXggb2YgYSBydWxlLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5pbmRleE9mID0gZnVuY3Rpb24gaW5kZXhPZihydWxlKSB7XG4gICAgcmV0dXJuIHRoaXMucnVsZXMuaW5kZXhPZihydWxlKTtcbiAgfVxuICAvKipcbiAgICogRGVwbG95IHB1cmUgQ1NTIHN0cmluZyB0byBhIHJlbmRlcmFibGUuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmRlcGxveSA9IGZ1bmN0aW9uIGRlcGxveSgpIHtcbiAgICBpZiAodGhpcy5yZW5kZXJlcikgdGhpcy5yZW5kZXJlci5kZXBsb3koKTtcbiAgICB0aGlzLmRlcGxveWVkID0gdHJ1ZTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuICAvKipcbiAgICogVXBkYXRlIHRoZSBmdW5jdGlvbiB2YWx1ZXMgd2l0aCBhIG5ldyBkYXRhLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by51cGRhdGUgPSBmdW5jdGlvbiB1cGRhdGUoKSB7XG4gICAgdmFyIF90aGlzJHJ1bGVzO1xuXG4gICAgKF90aGlzJHJ1bGVzID0gdGhpcy5ydWxlcykudXBkYXRlLmFwcGx5KF90aGlzJHJ1bGVzLCBhcmd1bWVudHMpO1xuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbiAgLyoqXG4gICAqIFVwZGF0ZXMgYSBzaW5nbGUgcnVsZS5cbiAgICovXG4gIDtcblxuICBfcHJvdG8udXBkYXRlT25lID0gZnVuY3Rpb24gdXBkYXRlT25lKHJ1bGUsIGRhdGEsIG9wdGlvbnMpIHtcbiAgICB0aGlzLnJ1bGVzLnVwZGF0ZU9uZShydWxlLCBkYXRhLCBvcHRpb25zKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuICAvKipcbiAgICogQ29udmVydCBydWxlcyB0byBhIENTUyBzdHJpbmcuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcob3B0aW9ucykge1xuICAgIHJldHVybiB0aGlzLnJ1bGVzLnRvU3RyaW5nKG9wdGlvbnMpO1xuICB9O1xuXG4gIHJldHVybiBTdHlsZVNoZWV0O1xufSgpO1xuXG52YXIgUGx1Z2luc1JlZ2lzdHJ5ID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gUGx1Z2luc1JlZ2lzdHJ5KCkge1xuICAgIHRoaXMucGx1Z2lucyA9IHtcbiAgICAgIGludGVybmFsOiBbXSxcbiAgICAgIGV4dGVybmFsOiBbXVxuICAgIH07XG4gICAgdGhpcy5yZWdpc3RyeSA9IHZvaWQgMDtcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBQbHVnaW5zUmVnaXN0cnkucHJvdG90eXBlO1xuXG4gIC8qKlxuICAgKiBDYWxsIGBvbkNyZWF0ZVJ1bGVgIGhvb2tzIGFuZCByZXR1cm4gYW4gb2JqZWN0IGlmIHJldHVybmVkIGJ5IGEgaG9vay5cbiAgICovXG4gIF9wcm90by5vbkNyZWF0ZVJ1bGUgPSBmdW5jdGlvbiBvbkNyZWF0ZVJ1bGUobmFtZSwgZGVjbCwgb3B0aW9ucykge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5yZWdpc3RyeS5vbkNyZWF0ZVJ1bGUubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBydWxlID0gdGhpcy5yZWdpc3RyeS5vbkNyZWF0ZVJ1bGVbaV0obmFtZSwgZGVjbCwgb3B0aW9ucyk7XG4gICAgICBpZiAocnVsZSkgcmV0dXJuIHJ1bGU7XG4gICAgfVxuXG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbiAgLyoqXG4gICAqIENhbGwgYG9uUHJvY2Vzc1J1bGVgIGhvb2tzLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5vblByb2Nlc3NSdWxlID0gZnVuY3Rpb24gb25Qcm9jZXNzUnVsZShydWxlKSB7XG4gICAgaWYgKHJ1bGUuaXNQcm9jZXNzZWQpIHJldHVybjtcbiAgICB2YXIgc2hlZXQgPSBydWxlLm9wdGlvbnMuc2hlZXQ7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMucmVnaXN0cnkub25Qcm9jZXNzUnVsZS5sZW5ndGg7IGkrKykge1xuICAgICAgdGhpcy5yZWdpc3RyeS5vblByb2Nlc3NSdWxlW2ldKHJ1bGUsIHNoZWV0KTtcbiAgICB9XG5cbiAgICBpZiAocnVsZS5zdHlsZSkgdGhpcy5vblByb2Nlc3NTdHlsZShydWxlLnN0eWxlLCBydWxlLCBzaGVldCk7XG4gICAgcnVsZS5pc1Byb2Nlc3NlZCA9IHRydWU7XG4gIH1cbiAgLyoqXG4gICAqIENhbGwgYG9uUHJvY2Vzc1N0eWxlYCBob29rcy5cbiAgICovXG4gIDtcblxuICBfcHJvdG8ub25Qcm9jZXNzU3R5bGUgPSBmdW5jdGlvbiBvblByb2Nlc3NTdHlsZShzdHlsZSwgcnVsZSwgc2hlZXQpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMucmVnaXN0cnkub25Qcm9jZXNzU3R5bGUubGVuZ3RoOyBpKyspIHtcbiAgICAgIC8vICRGbG93Rml4TWVcbiAgICAgIHJ1bGUuc3R5bGUgPSB0aGlzLnJlZ2lzdHJ5Lm9uUHJvY2Vzc1N0eWxlW2ldKHJ1bGUuc3R5bGUsIHJ1bGUsIHNoZWV0KTtcbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIENhbGwgYG9uUHJvY2Vzc1NoZWV0YCBob29rcy5cbiAgICovXG4gIDtcblxuICBfcHJvdG8ub25Qcm9jZXNzU2hlZXQgPSBmdW5jdGlvbiBvblByb2Nlc3NTaGVldChzaGVldCkge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5yZWdpc3RyeS5vblByb2Nlc3NTaGVldC5sZW5ndGg7IGkrKykge1xuICAgICAgdGhpcy5yZWdpc3RyeS5vblByb2Nlc3NTaGVldFtpXShzaGVldCk7XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBDYWxsIGBvblVwZGF0ZWAgaG9va3MuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLm9uVXBkYXRlID0gZnVuY3Rpb24gb25VcGRhdGUoZGF0YSwgcnVsZSwgc2hlZXQsIG9wdGlvbnMpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMucmVnaXN0cnkub25VcGRhdGUubGVuZ3RoOyBpKyspIHtcbiAgICAgIHRoaXMucmVnaXN0cnkub25VcGRhdGVbaV0oZGF0YSwgcnVsZSwgc2hlZXQsIG9wdGlvbnMpO1xuICAgIH1cbiAgfVxuICAvKipcbiAgICogQ2FsbCBgb25DaGFuZ2VWYWx1ZWAgaG9va3MuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLm9uQ2hhbmdlVmFsdWUgPSBmdW5jdGlvbiBvbkNoYW5nZVZhbHVlKHZhbHVlLCBwcm9wLCBydWxlKSB7XG4gICAgdmFyIHByb2Nlc3NlZFZhbHVlID0gdmFsdWU7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMucmVnaXN0cnkub25DaGFuZ2VWYWx1ZS5sZW5ndGg7IGkrKykge1xuICAgICAgcHJvY2Vzc2VkVmFsdWUgPSB0aGlzLnJlZ2lzdHJ5Lm9uQ2hhbmdlVmFsdWVbaV0ocHJvY2Vzc2VkVmFsdWUsIHByb3AsIHJ1bGUpO1xuICAgIH1cblxuICAgIHJldHVybiBwcm9jZXNzZWRWYWx1ZTtcbiAgfVxuICAvKipcbiAgICogUmVnaXN0ZXIgYSBwbHVnaW4uXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnVzZSA9IGZ1bmN0aW9uIHVzZShuZXdQbHVnaW4sIG9wdGlvbnMpIHtcbiAgICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7XG4gICAgICBvcHRpb25zID0ge1xuICAgICAgICBxdWV1ZTogJ2V4dGVybmFsJ1xuICAgICAgfTtcbiAgICB9XG5cbiAgICB2YXIgcGx1Z2lucyA9IHRoaXMucGx1Z2luc1tvcHRpb25zLnF1ZXVlXTsgLy8gQXZvaWRzIGFwcGx5aW5nIHNhbWUgcGx1Z2luIHR3aWNlLCBhdCBsZWFzdCBiYXNlZCBvbiByZWYuXG5cbiAgICBpZiAocGx1Z2lucy5pbmRleE9mKG5ld1BsdWdpbikgIT09IC0xKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgcGx1Z2lucy5wdXNoKG5ld1BsdWdpbik7XG4gICAgdGhpcy5yZWdpc3RyeSA9IFtdLmNvbmNhdCh0aGlzLnBsdWdpbnMuZXh0ZXJuYWwsIHRoaXMucGx1Z2lucy5pbnRlcm5hbCkucmVkdWNlKGZ1bmN0aW9uIChyZWdpc3RyeSwgcGx1Z2luKSB7XG4gICAgICBmb3IgKHZhciBuYW1lIGluIHBsdWdpbikge1xuICAgICAgICBpZiAobmFtZSBpbiByZWdpc3RyeSkge1xuICAgICAgICAgIHJlZ2lzdHJ5W25hbWVdLnB1c2gocGx1Z2luW25hbWVdKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKGZhbHNlLCBcIltKU1NdIFVua25vd24gaG9vayBcXFwiXCIgKyBuYW1lICsgXCJcXFwiLlwiKSA6IHZvaWQgMDtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gcmVnaXN0cnk7XG4gICAgfSwge1xuICAgICAgb25DcmVhdGVSdWxlOiBbXSxcbiAgICAgIG9uUHJvY2Vzc1J1bGU6IFtdLFxuICAgICAgb25Qcm9jZXNzU3R5bGU6IFtdLFxuICAgICAgb25Qcm9jZXNzU2hlZXQ6IFtdLFxuICAgICAgb25DaGFuZ2VWYWx1ZTogW10sXG4gICAgICBvblVwZGF0ZTogW11cbiAgICB9KTtcbiAgfTtcblxuICByZXR1cm4gUGx1Z2luc1JlZ2lzdHJ5O1xufSgpO1xuXG4vKipcbiAqIFNoZWV0cyByZWdpc3RyeSB0byBhY2Nlc3MgdGhlbSBhbGwgYXQgb25lIHBsYWNlLlxuICovXG52YXIgU2hlZXRzUmVnaXN0cnkgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBTaGVldHNSZWdpc3RyeSgpIHtcbiAgICB0aGlzLnJlZ2lzdHJ5ID0gW107XG4gIH1cblxuICB2YXIgX3Byb3RvID0gU2hlZXRzUmVnaXN0cnkucHJvdG90eXBlO1xuXG4gIC8qKlxuICAgKiBSZWdpc3RlciBhIFN0eWxlIFNoZWV0LlxuICAgKi9cbiAgX3Byb3RvLmFkZCA9IGZ1bmN0aW9uIGFkZChzaGVldCkge1xuICAgIHZhciByZWdpc3RyeSA9IHRoaXMucmVnaXN0cnk7XG4gICAgdmFyIGluZGV4ID0gc2hlZXQub3B0aW9ucy5pbmRleDtcbiAgICBpZiAocmVnaXN0cnkuaW5kZXhPZihzaGVldCkgIT09IC0xKSByZXR1cm47XG5cbiAgICBpZiAocmVnaXN0cnkubGVuZ3RoID09PSAwIHx8IGluZGV4ID49IHRoaXMuaW5kZXgpIHtcbiAgICAgIHJlZ2lzdHJ5LnB1c2goc2hlZXQpO1xuICAgICAgcmV0dXJuO1xuICAgIH0gLy8gRmluZCBhIHBvc2l0aW9uLlxuXG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHJlZ2lzdHJ5Lmxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAocmVnaXN0cnlbaV0ub3B0aW9ucy5pbmRleCA+IGluZGV4KSB7XG4gICAgICAgIHJlZ2lzdHJ5LnNwbGljZShpLCAwLCBzaGVldCk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIFJlc2V0IHRoZSByZWdpc3RyeS5cbiAgICovXG4gIDtcblxuICBfcHJvdG8ucmVzZXQgPSBmdW5jdGlvbiByZXNldCgpIHtcbiAgICB0aGlzLnJlZ2lzdHJ5ID0gW107XG4gIH1cbiAgLyoqXG4gICAqIFJlbW92ZSBhIFN0eWxlIFNoZWV0LlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5yZW1vdmUgPSBmdW5jdGlvbiByZW1vdmUoc2hlZXQpIHtcbiAgICB2YXIgaW5kZXggPSB0aGlzLnJlZ2lzdHJ5LmluZGV4T2Yoc2hlZXQpO1xuICAgIHRoaXMucmVnaXN0cnkuc3BsaWNlKGluZGV4LCAxKTtcbiAgfVxuICAvKipcbiAgICogQ29udmVydCBhbGwgYXR0YWNoZWQgc2hlZXRzIHRvIGEgQ1NTIHN0cmluZy5cbiAgICovXG4gIDtcblxuICBfcHJvdG8udG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZyhfdGVtcCkge1xuICAgIHZhciBfcmVmID0gX3RlbXAgPT09IHZvaWQgMCA/IHt9IDogX3RlbXAsXG4gICAgICAgIGF0dGFjaGVkID0gX3JlZi5hdHRhY2hlZCxcbiAgICAgICAgb3B0aW9ucyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKF9yZWYsIFtcImF0dGFjaGVkXCJdKTtcblxuICAgIHZhciBjc3MgPSAnJztcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5yZWdpc3RyeS5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHNoZWV0ID0gdGhpcy5yZWdpc3RyeVtpXTtcblxuICAgICAgaWYgKGF0dGFjaGVkICE9IG51bGwgJiYgc2hlZXQuYXR0YWNoZWQgIT09IGF0dGFjaGVkKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICBpZiAoY3NzKSBjc3MgKz0gJ1xcbic7XG4gICAgICBjc3MgKz0gc2hlZXQudG9TdHJpbmcob3B0aW9ucyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGNzcztcbiAgfTtcblxuICBfY3JlYXRlQ2xhc3MoU2hlZXRzUmVnaXN0cnksIFt7XG4gICAga2V5OiBcImluZGV4XCIsXG5cbiAgICAvKipcbiAgICAgKiBDdXJyZW50IGhpZ2hlc3QgaW5kZXggbnVtYmVyLlxuICAgICAqL1xuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuIHRoaXMucmVnaXN0cnkubGVuZ3RoID09PSAwID8gMCA6IHRoaXMucmVnaXN0cnlbdGhpcy5yZWdpc3RyeS5sZW5ndGggLSAxXS5vcHRpb25zLmluZGV4O1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBTaGVldHNSZWdpc3RyeTtcbn0oKTtcblxuLyoqXG4gKiBUaGlzIGlzIGEgZ2xvYmFsIHNoZWV0cyByZWdpc3RyeS4gT25seSBEb21SZW5kZXJlciB3aWxsIGFkZCBzaGVldHMgdG8gaXQuXG4gKiBPbiB0aGUgc2VydmVyIG9uZSBzaG91bGQgdXNlIGFuIG93biBTaGVldHNSZWdpc3RyeSBpbnN0YW5jZSBhbmQgYWRkIHRoZVxuICogc2hlZXRzIHRvIGl0LCBiZWNhdXNlIHlvdSBuZWVkIHRvIG1ha2Ugc3VyZSB0byBjcmVhdGUgYSBuZXcgcmVnaXN0cnkgZm9yXG4gKiBlYWNoIHJlcXVlc3QgaW4gb3JkZXIgdG8gbm90IGxlYWsgc2hlZXRzIGFjcm9zcyByZXF1ZXN0cy5cbiAqL1xuXG52YXIgc2hlZXRzID0gbmV3IFNoZWV0c1JlZ2lzdHJ5KCk7XG5cbi8qIGVzbGludC1kaXNhYmxlICovXG4vLyBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9pc3N1ZXMvODYjaXNzdWVjb21tZW50LTExNTc1OTAyOFxudmFyIGdsb2JhbFRoaXMgPSB0eXBlb2Ygd2luZG93ICE9ICd1bmRlZmluZWQnICYmIHdpbmRvdy5NYXRoID09IE1hdGggPyB3aW5kb3cgOiB0eXBlb2Ygc2VsZiAhPSAndW5kZWZpbmVkJyAmJiBzZWxmLk1hdGggPT0gTWF0aCA/IHNlbGYgOiBGdW5jdGlvbigncmV0dXJuIHRoaXMnKSgpO1xuXG52YXIgbnMgPSAnMmYxYWNjNmMzYTYwNmIwODJlNWVlZjVlNTQ0MTRmZmInO1xuaWYgKGdsb2JhbFRoaXNbbnNdID09IG51bGwpIGdsb2JhbFRoaXNbbnNdID0gMDsgLy8gQnVuZGxlIG1heSBjb250YWluIG11bHRpcGxlIEpTUyB2ZXJzaW9ucyBhdCB0aGUgc2FtZSB0aW1lLiBJbiBvcmRlciB0byBpZGVudGlmeVxuLy8gdGhlIGN1cnJlbnQgdmVyc2lvbiB3aXRoIGp1c3Qgb25lIHNob3J0IG51bWJlciBhbmQgdXNlIGl0IGZvciBjbGFzc2VzIGdlbmVyYXRpb25cbi8vIHdlIHVzZSBhIGNvdW50ZXIuIEFsc28gaXQgaXMgbW9yZSBhY2N1cmF0ZSwgYmVjYXVzZSB1c2VyIGNhbiBtYW51YWxseSByZWV2YWx1YXRlXG4vLyB0aGUgbW9kdWxlLlxuXG52YXIgbW9kdWxlSWQgPSBnbG9iYWxUaGlzW25zXSsrO1xuXG52YXIgbWF4UnVsZXMgPSAxZTEwO1xuXG4vKipcbiAqIFJldHVybnMgYSBmdW5jdGlvbiB3aGljaCBnZW5lcmF0ZXMgdW5pcXVlIGNsYXNzIG5hbWVzIGJhc2VkIG9uIGNvdW50ZXJzLlxuICogV2hlbiBuZXcgZ2VuZXJhdG9yIGZ1bmN0aW9uIGlzIGNyZWF0ZWQsIHJ1bGUgY291bnRlciBpcyByZXNldGVkLlxuICogV2UgbmVlZCB0byByZXNldCB0aGUgcnVsZSBjb3VudGVyIGZvciBTU1IgZm9yIGVhY2ggcmVxdWVzdC5cbiAqL1xudmFyIGNyZWF0ZUdlbmVyYXRlSWQgPSBmdW5jdGlvbiBjcmVhdGVHZW5lcmF0ZUlkKG9wdGlvbnMpIHtcbiAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkge1xuICAgIG9wdGlvbnMgPSB7fTtcbiAgfVxuXG4gIHZhciBydWxlQ291bnRlciA9IDA7XG4gIHJldHVybiBmdW5jdGlvbiAocnVsZSwgc2hlZXQpIHtcbiAgICBydWxlQ291bnRlciArPSAxO1xuXG4gICAgaWYgKHJ1bGVDb3VudGVyID4gbWF4UnVsZXMpIHtcbiAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoZmFsc2UsIFwiW0pTU10gWW91IG1pZ2h0IGhhdmUgYSBtZW1vcnkgbGVhay4gUnVsZSBjb3VudGVyIGlzIGF0IFwiICsgcnVsZUNvdW50ZXIgKyBcIi5cIikgOiB2b2lkIDA7XG4gICAgfVxuXG4gICAgdmFyIGpzc0lkID0gJyc7XG4gICAgdmFyIHByZWZpeCA9ICcnO1xuXG4gICAgaWYgKHNoZWV0KSB7XG4gICAgICBpZiAoc2hlZXQub3B0aW9ucy5jbGFzc05hbWVQcmVmaXgpIHtcbiAgICAgICAgcHJlZml4ID0gc2hlZXQub3B0aW9ucy5jbGFzc05hbWVQcmVmaXg7XG4gICAgICB9XG5cbiAgICAgIGlmIChzaGVldC5vcHRpb25zLmpzcy5pZCAhPSBudWxsKSB7XG4gICAgICAgIGpzc0lkID0gU3RyaW5nKHNoZWV0Lm9wdGlvbnMuanNzLmlkKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAob3B0aW9ucy5taW5pZnkpIHtcbiAgICAgIC8vIFVzaW5nIFwiY1wiIGJlY2F1c2UgYSBudW1iZXIgY2FuJ3QgYmUgdGhlIGZpcnN0IGNoYXIgaW4gYSBjbGFzcyBuYW1lLlxuICAgICAgcmV0dXJuIFwiXCIgKyAocHJlZml4IHx8ICdjJykgKyBtb2R1bGVJZCArIGpzc0lkICsgcnVsZUNvdW50ZXI7XG4gICAgfVxuXG4gICAgcmV0dXJuIHByZWZpeCArIHJ1bGUua2V5ICsgXCItXCIgKyBtb2R1bGVJZCArIChqc3NJZCA/IFwiLVwiICsganNzSWQgOiAnJykgKyBcIi1cIiArIHJ1bGVDb3VudGVyO1xuICB9O1xufTtcblxuLyoqXG4gKiBDYWNoZSB0aGUgdmFsdWUgZnJvbSB0aGUgZmlyc3QgdGltZSBhIGZ1bmN0aW9uIGlzIGNhbGxlZC5cbiAqL1xudmFyIG1lbW9pemUgPSBmdW5jdGlvbiBtZW1vaXplKGZuKSB7XG4gIHZhciB2YWx1ZTtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoIXZhbHVlKSB2YWx1ZSA9IGZuKCk7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9O1xufTtcbi8qKlxuICogR2V0IGEgc3R5bGUgcHJvcGVydHkgdmFsdWUuXG4gKi9cblxuXG5mdW5jdGlvbiBnZXRQcm9wZXJ0eVZhbHVlKGNzc1J1bGUsIHByb3ApIHtcbiAgdHJ5IHtcbiAgICAvLyBTdXBwb3J0IENTU1RPTS5cbiAgICBpZiAoY3NzUnVsZS5hdHRyaWJ1dGVTdHlsZU1hcCkge1xuICAgICAgcmV0dXJuIGNzc1J1bGUuYXR0cmlidXRlU3R5bGVNYXAuZ2V0KHByb3ApO1xuICAgIH1cblxuICAgIHJldHVybiBjc3NSdWxlLnN0eWxlLmdldFByb3BlcnR5VmFsdWUocHJvcCk7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIC8vIElFIG1heSB0aHJvdyBpZiBwcm9wZXJ0eSBpcyB1bmtub3duLlxuICAgIHJldHVybiAnJztcbiAgfVxufVxuLyoqXG4gKiBTZXQgYSBzdHlsZSBwcm9wZXJ0eS5cbiAqL1xuXG5cbmZ1bmN0aW9uIHNldFByb3BlcnR5KGNzc1J1bGUsIHByb3AsIHZhbHVlKSB7XG4gIHRyeSB7XG4gICAgdmFyIGNzc1ZhbHVlID0gdmFsdWU7XG5cbiAgICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgIGNzc1ZhbHVlID0gdG9Dc3NWYWx1ZSh2YWx1ZSwgdHJ1ZSk7XG5cbiAgICAgIGlmICh2YWx1ZVt2YWx1ZS5sZW5ndGggLSAxXSA9PT0gJyFpbXBvcnRhbnQnKSB7XG4gICAgICAgIGNzc1J1bGUuc3R5bGUuc2V0UHJvcGVydHkocHJvcCwgY3NzVmFsdWUsICdpbXBvcnRhbnQnKTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgfSAvLyBTdXBwb3J0IENTU1RPTS5cblxuXG4gICAgaWYgKGNzc1J1bGUuYXR0cmlidXRlU3R5bGVNYXApIHtcbiAgICAgIGNzc1J1bGUuYXR0cmlidXRlU3R5bGVNYXAuc2V0KHByb3AsIGNzc1ZhbHVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY3NzUnVsZS5zdHlsZS5zZXRQcm9wZXJ0eShwcm9wLCBjc3NWYWx1ZSk7XG4gICAgfVxuICB9IGNhdGNoIChlcnIpIHtcbiAgICAvLyBJRSBtYXkgdGhyb3cgaWYgcHJvcGVydHkgaXMgdW5rbm93bi5cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICByZXR1cm4gdHJ1ZTtcbn1cbi8qKlxuICogUmVtb3ZlIGEgc3R5bGUgcHJvcGVydHkuXG4gKi9cblxuXG5mdW5jdGlvbiByZW1vdmVQcm9wZXJ0eShjc3NSdWxlLCBwcm9wKSB7XG4gIHRyeSB7XG4gICAgLy8gU3VwcG9ydCBDU1NUT00uXG4gICAgaWYgKGNzc1J1bGUuYXR0cmlidXRlU3R5bGVNYXApIHtcbiAgICAgIGNzc1J1bGUuYXR0cmlidXRlU3R5bGVNYXAuZGVsZXRlKHByb3ApO1xuICAgIH0gZWxzZSB7XG4gICAgICBjc3NSdWxlLnN0eWxlLnJlbW92ZVByb3BlcnR5KHByb3ApO1xuICAgIH1cbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhmYWxzZSwgXCJbSlNTXSBET01FeGNlcHRpb24gXFxcIlwiICsgZXJyLm1lc3NhZ2UgKyBcIlxcXCIgd2FzIHRocm93bi4gVHJpZWQgdG8gcmVtb3ZlIHByb3BlcnR5IFxcXCJcIiArIHByb3AgKyBcIlxcXCIuXCIpIDogdm9pZCAwO1xuICB9XG59XG4vKipcbiAqIFNldCB0aGUgc2VsZWN0b3IuXG4gKi9cblxuXG5mdW5jdGlvbiBzZXRTZWxlY3Rvcihjc3NSdWxlLCBzZWxlY3RvclRleHQpIHtcbiAgY3NzUnVsZS5zZWxlY3RvclRleHQgPSBzZWxlY3RvclRleHQ7IC8vIFJldHVybiBmYWxzZSBpZiBzZXR0ZXIgd2FzIG5vdCBzdWNjZXNzZnVsLlxuICAvLyBDdXJyZW50bHkgd29ya3MgaW4gY2hyb21lIG9ubHkuXG5cbiAgcmV0dXJuIGNzc1J1bGUuc2VsZWN0b3JUZXh0ID09PSBzZWxlY3RvclRleHQ7XG59XG4vKipcbiAqIEdldHMgdGhlIGBoZWFkYCBlbGVtZW50IHVwb24gdGhlIGZpcnN0IGNhbGwgYW5kIGNhY2hlcyBpdC5cbiAqIFdlIGFzc3VtZSBpdCBjYW4ndCBiZSBudWxsLlxuICovXG5cblxudmFyIGdldEhlYWQgPSBtZW1vaXplKGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ2hlYWQnKTtcbn0pO1xuLyoqXG4gKiBGaW5kIGF0dGFjaGVkIHNoZWV0IHdpdGggYW4gaW5kZXggaGlnaGVyIHRoYW4gdGhlIHBhc3NlZCBvbmUuXG4gKi9cblxuZnVuY3Rpb24gZmluZEhpZ2hlclNoZWV0KHJlZ2lzdHJ5LCBvcHRpb25zKSB7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgcmVnaXN0cnkubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgc2hlZXQgPSByZWdpc3RyeVtpXTtcblxuICAgIGlmIChzaGVldC5hdHRhY2hlZCAmJiBzaGVldC5vcHRpb25zLmluZGV4ID4gb3B0aW9ucy5pbmRleCAmJiBzaGVldC5vcHRpb25zLmluc2VydGlvblBvaW50ID09PSBvcHRpb25zLmluc2VydGlvblBvaW50KSB7XG4gICAgICByZXR1cm4gc2hlZXQ7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG51bGw7XG59XG4vKipcbiAqIEZpbmQgYXR0YWNoZWQgc2hlZXQgd2l0aCB0aGUgaGlnaGVzdCBpbmRleC5cbiAqL1xuXG5cbmZ1bmN0aW9uIGZpbmRIaWdoZXN0U2hlZXQocmVnaXN0cnksIG9wdGlvbnMpIHtcbiAgZm9yICh2YXIgaSA9IHJlZ2lzdHJ5Lmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgdmFyIHNoZWV0ID0gcmVnaXN0cnlbaV07XG5cbiAgICBpZiAoc2hlZXQuYXR0YWNoZWQgJiYgc2hlZXQub3B0aW9ucy5pbnNlcnRpb25Qb2ludCA9PT0gb3B0aW9ucy5pbnNlcnRpb25Qb2ludCkge1xuICAgICAgcmV0dXJuIHNoZWV0O1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBudWxsO1xufVxuLyoqXG4gKiBGaW5kIGEgY29tbWVudCB3aXRoIFwianNzXCIgaW5zaWRlLlxuICovXG5cblxuZnVuY3Rpb24gZmluZENvbW1lbnROb2RlKHRleHQpIHtcbiAgdmFyIGhlYWQgPSBnZXRIZWFkKCk7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBoZWFkLmNoaWxkTm9kZXMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgbm9kZSA9IGhlYWQuY2hpbGROb2Rlc1tpXTtcblxuICAgIGlmIChub2RlLm5vZGVUeXBlID09PSA4ICYmIG5vZGUubm9kZVZhbHVlLnRyaW0oKSA9PT0gdGV4dCkge1xuICAgICAgcmV0dXJuIG5vZGU7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG51bGw7XG59XG5cbi8qKlxuICogRmluZCBhIG5vZGUgYmVmb3JlIHdoaWNoIHdlIGNhbiBpbnNlcnQgdGhlIHNoZWV0LlxuICovXG5mdW5jdGlvbiBmaW5kUHJldk5vZGUob3B0aW9ucykge1xuICB2YXIgcmVnaXN0cnkgPSBzaGVldHMucmVnaXN0cnk7XG5cbiAgaWYgKHJlZ2lzdHJ5Lmxlbmd0aCA+IDApIHtcbiAgICAvLyBUcnkgdG8gaW5zZXJ0IGJlZm9yZSB0aGUgbmV4dCBoaWdoZXIgc2hlZXQuXG4gICAgdmFyIHNoZWV0ID0gZmluZEhpZ2hlclNoZWV0KHJlZ2lzdHJ5LCBvcHRpb25zKTtcblxuICAgIGlmIChzaGVldCAmJiBzaGVldC5yZW5kZXJlcikge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgcGFyZW50OiBzaGVldC5yZW5kZXJlci5lbGVtZW50LnBhcmVudE5vZGUsXG4gICAgICAgIG5vZGU6IHNoZWV0LnJlbmRlcmVyLmVsZW1lbnRcbiAgICAgIH07XG4gICAgfSAvLyBPdGhlcndpc2UgaW5zZXJ0IGFmdGVyIHRoZSBsYXN0IGF0dGFjaGVkLlxuXG5cbiAgICBzaGVldCA9IGZpbmRIaWdoZXN0U2hlZXQocmVnaXN0cnksIG9wdGlvbnMpO1xuXG4gICAgaWYgKHNoZWV0ICYmIHNoZWV0LnJlbmRlcmVyKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBwYXJlbnQ6IHNoZWV0LnJlbmRlcmVyLmVsZW1lbnQucGFyZW50Tm9kZSxcbiAgICAgICAgbm9kZTogc2hlZXQucmVuZGVyZXIuZWxlbWVudC5uZXh0U2libGluZ1xuICAgICAgfTtcbiAgICB9XG4gIH0gLy8gVHJ5IHRvIGZpbmQgYSBjb21tZW50IHBsYWNlaG9sZGVyIGlmIHJlZ2lzdHJ5IGlzIGVtcHR5LlxuXG5cbiAgdmFyIGluc2VydGlvblBvaW50ID0gb3B0aW9ucy5pbnNlcnRpb25Qb2ludDtcblxuICBpZiAoaW5zZXJ0aW9uUG9pbnQgJiYgdHlwZW9mIGluc2VydGlvblBvaW50ID09PSAnc3RyaW5nJykge1xuICAgIHZhciBjb21tZW50ID0gZmluZENvbW1lbnROb2RlKGluc2VydGlvblBvaW50KTtcblxuICAgIGlmIChjb21tZW50KSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBwYXJlbnQ6IGNvbW1lbnQucGFyZW50Tm9kZSxcbiAgICAgICAgbm9kZTogY29tbWVudC5uZXh0U2libGluZ1xuICAgICAgfTtcbiAgICB9IC8vIElmIHVzZXIgc3BlY2lmaWVzIGFuIGluc2VydGlvbiBwb2ludCBhbmQgaXQgY2FuJ3QgYmUgZm91bmQgaW4gdGhlIGRvY3VtZW50IC1cbiAgICAvLyBiYWQgc3BlY2lmaWNpdHkgaXNzdWVzIG1heSBhcHBlYXIuXG5cblxuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoZmFsc2UsIFwiW0pTU10gSW5zZXJ0aW9uIHBvaW50IFxcXCJcIiArIGluc2VydGlvblBvaW50ICsgXCJcXFwiIG5vdCBmb3VuZC5cIikgOiB2b2lkIDA7XG4gIH1cblxuICByZXR1cm4gZmFsc2U7XG59XG4vKipcbiAqIEluc2VydCBzdHlsZSBlbGVtZW50IGludG8gdGhlIERPTS5cbiAqL1xuXG5cbmZ1bmN0aW9uIGluc2VydFN0eWxlKHN0eWxlLCBvcHRpb25zKSB7XG4gIHZhciBpbnNlcnRpb25Qb2ludCA9IG9wdGlvbnMuaW5zZXJ0aW9uUG9pbnQ7XG4gIHZhciBuZXh0Tm9kZSA9IGZpbmRQcmV2Tm9kZShvcHRpb25zKTtcblxuICBpZiAobmV4dE5vZGUgIT09IGZhbHNlICYmIG5leHROb2RlLnBhcmVudCkge1xuICAgIG5leHROb2RlLnBhcmVudC5pbnNlcnRCZWZvcmUoc3R5bGUsIG5leHROb2RlLm5vZGUpO1xuICAgIHJldHVybjtcbiAgfSAvLyBXb3JrcyB3aXRoIGlmcmFtZXMgYW5kIGFueSBub2RlIHR5cGVzLlxuXG5cbiAgaWYgKGluc2VydGlvblBvaW50ICYmIHR5cGVvZiBpbnNlcnRpb25Qb2ludC5ub2RlVHlwZSA9PT0gJ251bWJlcicpIHtcbiAgICAvLyBodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy80MTMyODcyOC9mb3JjZS1jYXN0aW5nLWluLWZsb3dcbiAgICB2YXIgaW5zZXJ0aW9uUG9pbnRFbGVtZW50ID0gaW5zZXJ0aW9uUG9pbnQ7XG4gICAgdmFyIHBhcmVudE5vZGUgPSBpbnNlcnRpb25Qb2ludEVsZW1lbnQucGFyZW50Tm9kZTtcbiAgICBpZiAocGFyZW50Tm9kZSkgcGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoc3R5bGUsIGluc2VydGlvblBvaW50RWxlbWVudC5uZXh0U2libGluZyk7ZWxzZSBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKGZhbHNlLCAnW0pTU10gSW5zZXJ0aW9uIHBvaW50IGlzIG5vdCBpbiB0aGUgRE9NLicpIDogdm9pZCAwO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGdldEhlYWQoKS5hcHBlbmRDaGlsZChzdHlsZSk7XG59XG4vKipcbiAqIFJlYWQganNzIG5vbmNlIHNldHRpbmcgZnJvbSB0aGUgcGFnZSBpZiB0aGUgdXNlciBoYXMgc2V0IGl0LlxuICovXG5cblxudmFyIGdldE5vbmNlID0gbWVtb2l6ZShmdW5jdGlvbiAoKSB7XG4gIHZhciBub2RlID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignbWV0YVtwcm9wZXJ0eT1cImNzcC1ub25jZVwiXScpO1xuICByZXR1cm4gbm9kZSA/IG5vZGUuZ2V0QXR0cmlidXRlKCdjb250ZW50JykgOiBudWxsO1xufSk7XG5cbnZhciBfaW5zZXJ0UnVsZSA9IGZ1bmN0aW9uIGluc2VydFJ1bGUoY29udGFpbmVyLCBydWxlLCBpbmRleCkge1xuICB2YXIgbWF4SW5kZXggPSBjb250YWluZXIuY3NzUnVsZXMubGVuZ3RoOyAvLyBJbiBjYXNlIHByZXZpb3VzIGluc2VydGlvbiBmYWlscywgcGFzc2VkIGluZGV4IG1pZ2h0IGJlIHdyb25nXG5cbiAgaWYgKGluZGV4ID09PSB1bmRlZmluZWQgfHwgaW5kZXggPiBtYXhJbmRleCkge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wYXJhbS1yZWFzc2lnblxuICAgIGluZGV4ID0gbWF4SW5kZXg7XG4gIH1cblxuICB0cnkge1xuICAgIGlmICgnaW5zZXJ0UnVsZScgaW4gY29udGFpbmVyKSB7XG4gICAgICB2YXIgYyA9IGNvbnRhaW5lcjtcbiAgICAgIGMuaW5zZXJ0UnVsZShydWxlLCBpbmRleCk7XG4gICAgfSAvLyBLZXlmcmFtZXMgcnVsZS5cbiAgICBlbHNlIGlmICgnYXBwZW5kUnVsZScgaW4gY29udGFpbmVyKSB7XG4gICAgICAgIHZhciBfYyA9IGNvbnRhaW5lcjtcblxuICAgICAgICBfYy5hcHBlbmRSdWxlKHJ1bGUpO1xuICAgICAgfVxuICB9IGNhdGNoIChlcnIpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKGZhbHNlLCBcIltKU1NdIFwiICsgZXJyLm1lc3NhZ2UpIDogdm9pZCAwO1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHJldHVybiBjb250YWluZXIuY3NzUnVsZXNbaW5kZXhdO1xufTtcblxudmFyIGNyZWF0ZVN0eWxlID0gZnVuY3Rpb24gY3JlYXRlU3R5bGUoKSB7XG4gIHZhciBlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3N0eWxlJyk7IC8vIFdpdGhvdXQgaXQsIElFIHdpbGwgaGF2ZSBhIGJyb2tlbiBzb3VyY2Ugb3JkZXIgc3BlY2lmaWNpdHkgaWYgd2VcbiAgLy8gaW5zZXJ0IHJ1bGVzIGFmdGVyIHdlIGluc2VydCB0aGUgc3R5bGUgdGFnLlxuICAvLyBJdCBzZWVtcyB0byBraWNrLW9mZiB0aGUgc291cmNlIG9yZGVyIHNwZWNpZmljaXR5IGFsZ29yaXRobS5cblxuICBlbC50ZXh0Q29udGVudCA9ICdcXG4nO1xuICByZXR1cm4gZWw7XG59O1xuXG52YXIgRG9tUmVuZGVyZXIgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKCkge1xuICAvLyBIVE1MU3R5bGVFbGVtZW50IG5lZWRzIGZpeGluZyBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svZmxvdy9pc3N1ZXMvMjY5NlxuICBmdW5jdGlvbiBEb21SZW5kZXJlcihzaGVldCkge1xuICAgIHRoaXMuZ2V0UHJvcGVydHlWYWx1ZSA9IGdldFByb3BlcnR5VmFsdWU7XG4gICAgdGhpcy5zZXRQcm9wZXJ0eSA9IHNldFByb3BlcnR5O1xuICAgIHRoaXMucmVtb3ZlUHJvcGVydHkgPSByZW1vdmVQcm9wZXJ0eTtcbiAgICB0aGlzLnNldFNlbGVjdG9yID0gc2V0U2VsZWN0b3I7XG4gICAgdGhpcy5lbGVtZW50ID0gdm9pZCAwO1xuICAgIHRoaXMuc2hlZXQgPSB2b2lkIDA7XG4gICAgdGhpcy5oYXNJbnNlcnRlZFJ1bGVzID0gZmFsc2U7XG4gICAgLy8gVGhlcmUgaXMgbm8gc2hlZXQgd2hlbiB0aGUgcmVuZGVyZXIgaXMgdXNlZCBmcm9tIGEgc3RhbmRhbG9uZSBTdHlsZVJ1bGUuXG4gICAgaWYgKHNoZWV0KSBzaGVldHMuYWRkKHNoZWV0KTtcbiAgICB0aGlzLnNoZWV0ID0gc2hlZXQ7XG5cbiAgICB2YXIgX3JlZiA9IHRoaXMuc2hlZXQgPyB0aGlzLnNoZWV0Lm9wdGlvbnMgOiB7fSxcbiAgICAgICAgbWVkaWEgPSBfcmVmLm1lZGlhLFxuICAgICAgICBtZXRhID0gX3JlZi5tZXRhLFxuICAgICAgICBlbGVtZW50ID0gX3JlZi5lbGVtZW50O1xuXG4gICAgdGhpcy5lbGVtZW50ID0gZWxlbWVudCB8fCBjcmVhdGVTdHlsZSgpO1xuICAgIHRoaXMuZWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2RhdGEtanNzJywgJycpO1xuICAgIGlmIChtZWRpYSkgdGhpcy5lbGVtZW50LnNldEF0dHJpYnV0ZSgnbWVkaWEnLCBtZWRpYSk7XG4gICAgaWYgKG1ldGEpIHRoaXMuZWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2RhdGEtbWV0YScsIG1ldGEpO1xuICAgIHZhciBub25jZSA9IGdldE5vbmNlKCk7XG4gICAgaWYgKG5vbmNlKSB0aGlzLmVsZW1lbnQuc2V0QXR0cmlidXRlKCdub25jZScsIG5vbmNlKTtcbiAgfVxuICAvKipcbiAgICogSW5zZXJ0IHN0eWxlIGVsZW1lbnQgaW50byByZW5kZXIgdHJlZS5cbiAgICovXG5cblxuICB2YXIgX3Byb3RvID0gRG9tUmVuZGVyZXIucHJvdG90eXBlO1xuXG4gIF9wcm90by5hdHRhY2ggPSBmdW5jdGlvbiBhdHRhY2goKSB7XG4gICAgLy8gSW4gdGhlIGNhc2UgdGhlIGVsZW1lbnQgbm9kZSBpcyBleHRlcm5hbCBhbmQgaXQgaXMgYWxyZWFkeSBpbiB0aGUgRE9NLlxuICAgIGlmICh0aGlzLmVsZW1lbnQucGFyZW50Tm9kZSB8fCAhdGhpcy5zaGVldCkgcmV0dXJuO1xuICAgIGluc2VydFN0eWxlKHRoaXMuZWxlbWVudCwgdGhpcy5zaGVldC5vcHRpb25zKTsgLy8gV2hlbiBydWxlcyBhcmUgaW5zZXJ0ZWQgdXNpbmcgYGluc2VydFJ1bGVgIEFQSSwgYWZ0ZXIgYHNoZWV0LmRldGFjaCgpLmF0dGFjaCgpYFxuICAgIC8vIG1vc3QgYnJvd3NlcnMgY3JlYXRlIGEgbmV3IENTU1N0eWxlU2hlZXQsIGV4Y2VwdCBvZiBhbGwgSUVzLlxuXG4gICAgdmFyIGRlcGxveWVkID0gQm9vbGVhbih0aGlzLnNoZWV0ICYmIHRoaXMuc2hlZXQuZGVwbG95ZWQpO1xuXG4gICAgaWYgKHRoaXMuaGFzSW5zZXJ0ZWRSdWxlcyAmJiBkZXBsb3llZCkge1xuICAgICAgdGhpcy5oYXNJbnNlcnRlZFJ1bGVzID0gZmFsc2U7XG4gICAgICB0aGlzLmRlcGxveSgpO1xuICAgIH1cbiAgfVxuICAvKipcbiAgICogUmVtb3ZlIHN0eWxlIGVsZW1lbnQgZnJvbSByZW5kZXIgdHJlZS5cbiAgICovXG4gIDtcblxuICBfcHJvdG8uZGV0YWNoID0gZnVuY3Rpb24gZGV0YWNoKCkge1xuICAgIHZhciBwYXJlbnROb2RlID0gdGhpcy5lbGVtZW50LnBhcmVudE5vZGU7XG4gICAgaWYgKHBhcmVudE5vZGUpIHBhcmVudE5vZGUucmVtb3ZlQ2hpbGQodGhpcy5lbGVtZW50KTtcbiAgfVxuICAvKipcbiAgICogSW5qZWN0IENTUyBzdHJpbmcgaW50byBlbGVtZW50LlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5kZXBsb3kgPSBmdW5jdGlvbiBkZXBsb3koKSB7XG4gICAgdmFyIHNoZWV0ID0gdGhpcy5zaGVldDtcbiAgICBpZiAoIXNoZWV0KSByZXR1cm47XG5cbiAgICBpZiAoc2hlZXQub3B0aW9ucy5saW5rKSB7XG4gICAgICB0aGlzLmluc2VydFJ1bGVzKHNoZWV0LnJ1bGVzKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0aGlzLmVsZW1lbnQudGV4dENvbnRlbnQgPSBcIlxcblwiICsgc2hlZXQudG9TdHJpbmcoKSArIFwiXFxuXCI7XG4gIH1cbiAgLyoqXG4gICAqIEluc2VydCBSdWxlTGlzdCBpbnRvIGFuIGVsZW1lbnQuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmluc2VydFJ1bGVzID0gZnVuY3Rpb24gaW5zZXJ0UnVsZXMocnVsZXMsIG5hdGl2ZVBhcmVudCkge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcnVsZXMuaW5kZXgubGVuZ3RoOyBpKyspIHtcbiAgICAgIHRoaXMuaW5zZXJ0UnVsZShydWxlcy5pbmRleFtpXSwgaSwgbmF0aXZlUGFyZW50KTtcbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIEluc2VydCBhIHJ1bGUgaW50byBlbGVtZW50LlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5pbnNlcnRSdWxlID0gZnVuY3Rpb24gaW5zZXJ0UnVsZShydWxlLCBpbmRleCwgbmF0aXZlUGFyZW50KSB7XG4gICAgaWYgKG5hdGl2ZVBhcmVudCA9PT0gdm9pZCAwKSB7XG4gICAgICBuYXRpdmVQYXJlbnQgPSB0aGlzLmVsZW1lbnQuc2hlZXQ7XG4gICAgfVxuXG4gICAgaWYgKHJ1bGUucnVsZXMpIHtcbiAgICAgIHZhciBwYXJlbnQgPSBydWxlO1xuICAgICAgdmFyIGxhdGVzdE5hdGl2ZVBhcmVudCA9IG5hdGl2ZVBhcmVudDtcblxuICAgICAgaWYgKHJ1bGUudHlwZSA9PT0gJ2NvbmRpdGlvbmFsJyB8fCBydWxlLnR5cGUgPT09ICdrZXlmcmFtZXMnKSB7XG4gICAgICAgIC8vIFdlIG5lZWQgdG8gcmVuZGVyIHRoZSBjb250YWluZXIgd2l0aG91dCBjaGlsZHJlbiBmaXJzdC5cbiAgICAgICAgbGF0ZXN0TmF0aXZlUGFyZW50ID0gX2luc2VydFJ1bGUobmF0aXZlUGFyZW50LCBwYXJlbnQudG9TdHJpbmcoe1xuICAgICAgICAgIGNoaWxkcmVuOiBmYWxzZVxuICAgICAgICB9KSwgaW5kZXgpO1xuXG4gICAgICAgIGlmIChsYXRlc3ROYXRpdmVQYXJlbnQgPT09IGZhbHNlKSB7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHRoaXMuaW5zZXJ0UnVsZXMocGFyZW50LnJ1bGVzLCBsYXRlc3ROYXRpdmVQYXJlbnQpO1xuICAgICAgcmV0dXJuIGxhdGVzdE5hdGl2ZVBhcmVudDtcbiAgICB9IC8vIElFIGtlZXBzIHRoZSBDU1NTdHlsZVNoZWV0IGFmdGVyIHN0eWxlIG5vZGUgaGFzIGJlZW4gcmVhdHRhY2hlZCxcbiAgICAvLyBzbyB3ZSBuZWVkIHRvIGNoZWNrIGlmIHRoZSBgcmVuZGVyYWJsZWAgcmVmZXJlbmNlIHRoZSByaWdodCBzdHlsZSBzaGVldCBhbmQgbm90XG4gICAgLy8gcmVyZW5kZXIgdGhvc2UgcnVsZXMuXG5cblxuICAgIGlmIChydWxlLnJlbmRlcmFibGUgJiYgcnVsZS5yZW5kZXJhYmxlLnBhcmVudFN0eWxlU2hlZXQgPT09IHRoaXMuZWxlbWVudC5zaGVldCkge1xuICAgICAgcmV0dXJuIHJ1bGUucmVuZGVyYWJsZTtcbiAgICB9XG5cbiAgICB2YXIgcnVsZVN0ciA9IHJ1bGUudG9TdHJpbmcoKTtcbiAgICBpZiAoIXJ1bGVTdHIpIHJldHVybiBmYWxzZTtcblxuICAgIHZhciBuYXRpdmVSdWxlID0gX2luc2VydFJ1bGUobmF0aXZlUGFyZW50LCBydWxlU3RyLCBpbmRleCk7XG5cbiAgICBpZiAobmF0aXZlUnVsZSA9PT0gZmFsc2UpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICB0aGlzLmhhc0luc2VydGVkUnVsZXMgPSB0cnVlO1xuICAgIHJ1bGUucmVuZGVyYWJsZSA9IG5hdGl2ZVJ1bGU7XG4gICAgcmV0dXJuIG5hdGl2ZVJ1bGU7XG4gIH1cbiAgLyoqXG4gICAqIERlbGV0ZSBhIHJ1bGUuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmRlbGV0ZVJ1bGUgPSBmdW5jdGlvbiBkZWxldGVSdWxlKGNzc1J1bGUpIHtcbiAgICB2YXIgc2hlZXQgPSB0aGlzLmVsZW1lbnQuc2hlZXQ7XG4gICAgdmFyIGluZGV4ID0gdGhpcy5pbmRleE9mKGNzc1J1bGUpO1xuICAgIGlmIChpbmRleCA9PT0gLTEpIHJldHVybiBmYWxzZTtcbiAgICBzaGVldC5kZWxldGVSdWxlKGluZGV4KTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICAvKipcbiAgICogR2V0IGluZGV4IG9mIGEgQ1NTIFJ1bGUuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmluZGV4T2YgPSBmdW5jdGlvbiBpbmRleE9mKGNzc1J1bGUpIHtcbiAgICB2YXIgY3NzUnVsZXMgPSB0aGlzLmVsZW1lbnQuc2hlZXQuY3NzUnVsZXM7XG5cbiAgICBmb3IgKHZhciBpbmRleCA9IDA7IGluZGV4IDwgY3NzUnVsZXMubGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgICBpZiAoY3NzUnVsZSA9PT0gY3NzUnVsZXNbaW5kZXhdKSByZXR1cm4gaW5kZXg7XG4gICAgfVxuXG4gICAgcmV0dXJuIC0xO1xuICB9XG4gIC8qKlxuICAgKiBHZW5lcmF0ZSBhIG5ldyBDU1MgcnVsZSBhbmQgcmVwbGFjZSB0aGUgZXhpc3Rpbmcgb25lLlxuICAgKlxuICAgKiBPbmx5IHVzZWQgZm9yIHNvbWUgb2xkIGJyb3dzZXJzIGJlY2F1c2UgdGhleSBjYW4ndCBzZXQgYSBzZWxlY3Rvci5cbiAgICovXG4gIDtcblxuICBfcHJvdG8ucmVwbGFjZVJ1bGUgPSBmdW5jdGlvbiByZXBsYWNlUnVsZShjc3NSdWxlLCBydWxlKSB7XG4gICAgdmFyIGluZGV4ID0gdGhpcy5pbmRleE9mKGNzc1J1bGUpO1xuICAgIGlmIChpbmRleCA9PT0gLTEpIHJldHVybiBmYWxzZTtcbiAgICB0aGlzLmVsZW1lbnQuc2hlZXQuZGVsZXRlUnVsZShpbmRleCk7XG4gICAgcmV0dXJuIHRoaXMuaW5zZXJ0UnVsZShydWxlLCBpbmRleCk7XG4gIH1cbiAgLyoqXG4gICAqIEdldCBhbGwgcnVsZXMgZWxlbWVudHMuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmdldFJ1bGVzID0gZnVuY3Rpb24gZ2V0UnVsZXMoKSB7XG4gICAgcmV0dXJuIHRoaXMuZWxlbWVudC5zaGVldC5jc3NSdWxlcztcbiAgfTtcblxuICByZXR1cm4gRG9tUmVuZGVyZXI7XG59KCk7XG5cbnZhciBpbnN0YW5jZUNvdW50ZXIgPSAwO1xuXG52YXIgSnNzID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gSnNzKG9wdGlvbnMpIHtcbiAgICB0aGlzLmlkID0gaW5zdGFuY2VDb3VudGVyKys7XG4gICAgdGhpcy52ZXJzaW9uID0gXCIxMC40LjBcIjtcbiAgICB0aGlzLnBsdWdpbnMgPSBuZXcgUGx1Z2luc1JlZ2lzdHJ5KCk7XG4gICAgdGhpcy5vcHRpb25zID0ge1xuICAgICAgaWQ6IHtcbiAgICAgICAgbWluaWZ5OiBmYWxzZVxuICAgICAgfSxcbiAgICAgIGNyZWF0ZUdlbmVyYXRlSWQ6IGNyZWF0ZUdlbmVyYXRlSWQsXG4gICAgICBSZW5kZXJlcjogaXNJbkJyb3dzZXIgPyBEb21SZW5kZXJlciA6IG51bGwsXG4gICAgICBwbHVnaW5zOiBbXVxuICAgIH07XG4gICAgdGhpcy5nZW5lcmF0ZUlkID0gY3JlYXRlR2VuZXJhdGVJZCh7XG4gICAgICBtaW5pZnk6IGZhbHNlXG4gICAgfSk7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHBsdWdpbnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHRoaXMucGx1Z2lucy51c2UocGx1Z2luc1tpXSwge1xuICAgICAgICBxdWV1ZTogJ2ludGVybmFsJ1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgdGhpcy5zZXR1cChvcHRpb25zKTtcbiAgfVxuICAvKipcbiAgICogUHJlcGFyZXMgdmFyaW91cyBvcHRpb25zLCBhcHBsaWVzIHBsdWdpbnMuXG4gICAqIFNob3VsZCBub3QgYmUgdXNlZCB0d2ljZSBvbiB0aGUgc2FtZSBpbnN0YW5jZSwgYmVjYXVzZSB0aGVyZSBpcyBubyBwbHVnaW5zXG4gICAqIGRlZHVwbGljYXRpb24gbG9naWMuXG4gICAqL1xuXG5cbiAgdmFyIF9wcm90byA9IEpzcy5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLnNldHVwID0gZnVuY3Rpb24gc2V0dXAob3B0aW9ucykge1xuICAgIGlmIChvcHRpb25zID09PSB2b2lkIDApIHtcbiAgICAgIG9wdGlvbnMgPSB7fTtcbiAgICB9XG5cbiAgICBpZiAob3B0aW9ucy5jcmVhdGVHZW5lcmF0ZUlkKSB7XG4gICAgICB0aGlzLm9wdGlvbnMuY3JlYXRlR2VuZXJhdGVJZCA9IG9wdGlvbnMuY3JlYXRlR2VuZXJhdGVJZDtcbiAgICB9XG5cbiAgICBpZiAob3B0aW9ucy5pZCkge1xuICAgICAgdGhpcy5vcHRpb25zLmlkID0gX2V4dGVuZHMoe30sIHRoaXMub3B0aW9ucy5pZCwgb3B0aW9ucy5pZCk7XG4gICAgfVxuXG4gICAgaWYgKG9wdGlvbnMuY3JlYXRlR2VuZXJhdGVJZCB8fCBvcHRpb25zLmlkKSB7XG4gICAgICB0aGlzLmdlbmVyYXRlSWQgPSB0aGlzLm9wdGlvbnMuY3JlYXRlR2VuZXJhdGVJZCh0aGlzLm9wdGlvbnMuaWQpO1xuICAgIH1cblxuICAgIGlmIChvcHRpb25zLmluc2VydGlvblBvaW50ICE9IG51bGwpIHRoaXMub3B0aW9ucy5pbnNlcnRpb25Qb2ludCA9IG9wdGlvbnMuaW5zZXJ0aW9uUG9pbnQ7XG5cbiAgICBpZiAoJ1JlbmRlcmVyJyBpbiBvcHRpb25zKSB7XG4gICAgICB0aGlzLm9wdGlvbnMuUmVuZGVyZXIgPSBvcHRpb25zLlJlbmRlcmVyO1xuICAgIH0gLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHByZWZlci1zcHJlYWRcblxuXG4gICAgaWYgKG9wdGlvbnMucGx1Z2lucykgdGhpcy51c2UuYXBwbHkodGhpcywgb3B0aW9ucy5wbHVnaW5zKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuICAvKipcbiAgICogQ3JlYXRlIGEgU3R5bGUgU2hlZXQuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmNyZWF0ZVN0eWxlU2hlZXQgPSBmdW5jdGlvbiBjcmVhdGVTdHlsZVNoZWV0KHN0eWxlcywgb3B0aW9ucykge1xuICAgIGlmIChvcHRpb25zID09PSB2b2lkIDApIHtcbiAgICAgIG9wdGlvbnMgPSB7fTtcbiAgICB9XG5cbiAgICB2YXIgX29wdGlvbnMgPSBvcHRpb25zLFxuICAgICAgICBpbmRleCA9IF9vcHRpb25zLmluZGV4O1xuXG4gICAgaWYgKHR5cGVvZiBpbmRleCAhPT0gJ251bWJlcicpIHtcbiAgICAgIGluZGV4ID0gc2hlZXRzLmluZGV4ID09PSAwID8gMCA6IHNoZWV0cy5pbmRleCArIDE7XG4gICAgfVxuXG4gICAgdmFyIHNoZWV0ID0gbmV3IFN0eWxlU2hlZXQoc3R5bGVzLCBfZXh0ZW5kcyh7fSwgb3B0aW9ucywge1xuICAgICAganNzOiB0aGlzLFxuICAgICAgZ2VuZXJhdGVJZDogb3B0aW9ucy5nZW5lcmF0ZUlkIHx8IHRoaXMuZ2VuZXJhdGVJZCxcbiAgICAgIGluc2VydGlvblBvaW50OiB0aGlzLm9wdGlvbnMuaW5zZXJ0aW9uUG9pbnQsXG4gICAgICBSZW5kZXJlcjogdGhpcy5vcHRpb25zLlJlbmRlcmVyLFxuICAgICAgaW5kZXg6IGluZGV4XG4gICAgfSkpO1xuICAgIHRoaXMucGx1Z2lucy5vblByb2Nlc3NTaGVldChzaGVldCk7XG4gICAgcmV0dXJuIHNoZWV0O1xuICB9XG4gIC8qKlxuICAgKiBEZXRhY2ggdGhlIFN0eWxlIFNoZWV0IGFuZCByZW1vdmUgaXQgZnJvbSB0aGUgcmVnaXN0cnkuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnJlbW92ZVN0eWxlU2hlZXQgPSBmdW5jdGlvbiByZW1vdmVTdHlsZVNoZWV0KHNoZWV0KSB7XG4gICAgc2hlZXQuZGV0YWNoKCk7XG4gICAgc2hlZXRzLnJlbW92ZShzaGVldCk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbiAgLyoqXG4gICAqIENyZWF0ZSBhIHJ1bGUgd2l0aG91dCBhIFN0eWxlIFNoZWV0LlxuICAgKiBbRGVwcmVjYXRlZF0gd2lsbCBiZSByZW1vdmVkIGluIHRoZSBuZXh0IG1ham9yIHZlcnNpb24uXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmNyZWF0ZVJ1bGUgPSBmdW5jdGlvbiBjcmVhdGVSdWxlJDEobmFtZSwgc3R5bGUsIG9wdGlvbnMpIHtcbiAgICBpZiAoc3R5bGUgPT09IHZvaWQgMCkge1xuICAgICAgc3R5bGUgPSB7fTtcbiAgICB9XG5cbiAgICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7XG4gICAgICBvcHRpb25zID0ge307XG4gICAgfVxuXG4gICAgLy8gRW5hYmxlIHJ1bGUgd2l0aG91dCBuYW1lIGZvciBpbmxpbmUgc3R5bGVzLlxuICAgIGlmICh0eXBlb2YgbmFtZSA9PT0gJ29iamVjdCcpIHtcbiAgICAgIC8vICRGbG93SWdub3JlXG4gICAgICByZXR1cm4gdGhpcy5jcmVhdGVSdWxlKHVuZGVmaW5lZCwgbmFtZSwgc3R5bGUpO1xuICAgIH0gLy8gJEZsb3dJZ25vcmVcblxuXG4gICAgdmFyIHJ1bGVPcHRpb25zID0gX2V4dGVuZHMoe30sIG9wdGlvbnMsIHtcbiAgICAgIG5hbWU6IG5hbWUsXG4gICAgICBqc3M6IHRoaXMsXG4gICAgICBSZW5kZXJlcjogdGhpcy5vcHRpb25zLlJlbmRlcmVyXG4gICAgfSk7XG5cbiAgICBpZiAoIXJ1bGVPcHRpb25zLmdlbmVyYXRlSWQpIHJ1bGVPcHRpb25zLmdlbmVyYXRlSWQgPSB0aGlzLmdlbmVyYXRlSWQ7XG4gICAgaWYgKCFydWxlT3B0aW9ucy5jbGFzc2VzKSBydWxlT3B0aW9ucy5jbGFzc2VzID0ge307XG4gICAgaWYgKCFydWxlT3B0aW9ucy5rZXlmcmFtZXMpIHJ1bGVPcHRpb25zLmtleWZyYW1lcyA9IHt9O1xuXG4gICAgdmFyIHJ1bGUgPSBjcmVhdGVSdWxlKG5hbWUsIHN0eWxlLCBydWxlT3B0aW9ucyk7XG5cbiAgICBpZiAocnVsZSkgdGhpcy5wbHVnaW5zLm9uUHJvY2Vzc1J1bGUocnVsZSk7XG4gICAgcmV0dXJuIHJ1bGU7XG4gIH1cbiAgLyoqXG4gICAqIFJlZ2lzdGVyIHBsdWdpbi4gUGFzc2VkIGZ1bmN0aW9uIHdpbGwgYmUgaW52b2tlZCB3aXRoIGEgcnVsZSBpbnN0YW5jZS5cbiAgICovXG4gIDtcblxuICBfcHJvdG8udXNlID0gZnVuY3Rpb24gdXNlKCkge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgcGx1Z2lucyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIHBsdWdpbnNbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgcGx1Z2lucy5mb3JFYWNoKGZ1bmN0aW9uIChwbHVnaW4pIHtcbiAgICAgIF90aGlzLnBsdWdpbnMudXNlKHBsdWdpbik7XG4gICAgfSk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgcmV0dXJuIEpzcztcbn0oKTtcblxuLyoqXG4gKiBFeHRyYWN0cyBhIHN0eWxlcyBvYmplY3Qgd2l0aCBvbmx5IHByb3BzIHRoYXQgY29udGFpbiBmdW5jdGlvbiB2YWx1ZXMuXG4gKi9cbmZ1bmN0aW9uIGdldER5bmFtaWNTdHlsZXMoc3R5bGVzKSB7XG4gIHZhciB0byA9IG51bGw7XG5cbiAgZm9yICh2YXIga2V5IGluIHN0eWxlcykge1xuICAgIHZhciB2YWx1ZSA9IHN0eWxlc1trZXldO1xuICAgIHZhciB0eXBlID0gdHlwZW9mIHZhbHVlO1xuXG4gICAgaWYgKHR5cGUgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIGlmICghdG8pIHRvID0ge307XG4gICAgICB0b1trZXldID0gdmFsdWU7XG4gICAgfSBlbHNlIGlmICh0eXBlID09PSAnb2JqZWN0JyAmJiB2YWx1ZSAhPT0gbnVsbCAmJiAhQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgIHZhciBleHRyYWN0ZWQgPSBnZXREeW5hbWljU3R5bGVzKHZhbHVlKTtcblxuICAgICAgaWYgKGV4dHJhY3RlZCkge1xuICAgICAgICBpZiAoIXRvKSB0byA9IHt9O1xuICAgICAgICB0b1trZXldID0gZXh0cmFjdGVkO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0bztcbn1cblxuLyoqXG4gKiBTaGVldHNNYW5hZ2VyIGlzIGxpa2UgYSBXZWFrTWFwIHdoaWNoIGlzIGRlc2lnbmVkIHRvIGNvdW50IFN0eWxlU2hlZXRcbiAqIGluc3RhbmNlcyBhbmQgYXR0YWNoL2RldGFjaCBhdXRvbWF0aWNhbGx5LlxuICovXG52YXIgU2hlZXRzTWFuYWdlciA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIFNoZWV0c01hbmFnZXIoKSB7XG4gICAgdGhpcy5sZW5ndGggPSAwO1xuICAgIHRoaXMuc2hlZXRzID0gbmV3IFdlYWtNYXAoKTtcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBTaGVldHNNYW5hZ2VyLnByb3RvdHlwZTtcblxuICBfcHJvdG8uZ2V0ID0gZnVuY3Rpb24gZ2V0KGtleSkge1xuICAgIHZhciBlbnRyeSA9IHRoaXMuc2hlZXRzLmdldChrZXkpO1xuICAgIHJldHVybiBlbnRyeSAmJiBlbnRyeS5zaGVldDtcbiAgfTtcblxuICBfcHJvdG8uYWRkID0gZnVuY3Rpb24gYWRkKGtleSwgc2hlZXQpIHtcbiAgICBpZiAodGhpcy5zaGVldHMuaGFzKGtleSkpIHJldHVybjtcbiAgICB0aGlzLmxlbmd0aCsrO1xuICAgIHRoaXMuc2hlZXRzLnNldChrZXksIHtcbiAgICAgIHNoZWV0OiBzaGVldCxcbiAgICAgIHJlZnM6IDBcbiAgICB9KTtcbiAgfTtcblxuICBfcHJvdG8ubWFuYWdlID0gZnVuY3Rpb24gbWFuYWdlKGtleSkge1xuICAgIHZhciBlbnRyeSA9IHRoaXMuc2hlZXRzLmdldChrZXkpO1xuXG4gICAgaWYgKGVudHJ5KSB7XG4gICAgICBpZiAoZW50cnkucmVmcyA9PT0gMCkge1xuICAgICAgICBlbnRyeS5zaGVldC5hdHRhY2goKTtcbiAgICAgIH1cblxuICAgICAgZW50cnkucmVmcysrO1xuICAgICAgcmV0dXJuIGVudHJ5LnNoZWV0O1xuICAgIH1cblxuICAgIHdhcm5pbmcoZmFsc2UsIFwiW0pTU10gU2hlZXRzTWFuYWdlcjogY2FuJ3QgZmluZCBzaGVldCB0byBtYW5hZ2VcIik7XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfTtcblxuICBfcHJvdG8udW5tYW5hZ2UgPSBmdW5jdGlvbiB1bm1hbmFnZShrZXkpIHtcbiAgICB2YXIgZW50cnkgPSB0aGlzLnNoZWV0cy5nZXQoa2V5KTtcblxuICAgIGlmIChlbnRyeSkge1xuICAgICAgaWYgKGVudHJ5LnJlZnMgPiAwKSB7XG4gICAgICAgIGVudHJ5LnJlZnMtLTtcbiAgICAgICAgaWYgKGVudHJ5LnJlZnMgPT09IDApIGVudHJ5LnNoZWV0LmRldGFjaCgpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB3YXJuaW5nKGZhbHNlLCBcIlNoZWV0c01hbmFnZXI6IGNhbid0IGZpbmQgc2hlZXQgdG8gdW5tYW5hZ2VcIik7XG4gICAgfVxuICB9O1xuXG4gIF9jcmVhdGVDbGFzcyhTaGVldHNNYW5hZ2VyLCBbe1xuICAgIGtleTogXCJzaXplXCIsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gdGhpcy5sZW5ndGg7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIFNoZWV0c01hbmFnZXI7XG59KCk7XG5cbi8qKlxuICogQSBiZXR0ZXIgYWJzdHJhY3Rpb24gb3ZlciBDU1MuXG4gKlxuICogQGNvcHlyaWdodCBPbGVnIElzb25lbiAoU2xvYm9kc2tvaSkgLyBJc29uZW4gMjAxNC1wcmVzZW50XG4gKiBAd2Vic2l0ZSBodHRwczovL2dpdGh1Yi5jb20vY3NzaW5qcy9qc3NcbiAqIEBsaWNlbnNlIE1JVFxuICovXG5cbi8qKlxuICogRXhwb3J0IGEgY29uc3RhbnQgaW5kaWNhdGluZyBpZiB0aGlzIGJyb3dzZXIgaGFzIENTU1RPTSBzdXBwb3J0LlxuICogaHR0cHM6Ly9kZXZlbG9wZXJzLmdvb2dsZS5jb20vd2ViL3VwZGF0ZXMvMjAxOC8wMy9jc3NvbVxuICovXG52YXIgaGFzQ1NTVE9NU3VwcG9ydCA9IHR5cGVvZiBDU1MgIT09ICd1bmRlZmluZWQnICYmIENTUyAmJiAnbnVtYmVyJyBpbiBDU1M7XG4vKipcbiAqIENyZWF0ZXMgYSBuZXcgaW5zdGFuY2Ugb2YgSnNzLlxuICovXG5cbnZhciBjcmVhdGUgPSBmdW5jdGlvbiBjcmVhdGUob3B0aW9ucykge1xuICByZXR1cm4gbmV3IEpzcyhvcHRpb25zKTtcbn07XG4vKipcbiAqIEEgZ2xvYmFsIEpzcyBpbnN0YW5jZS5cbiAqL1xuXG52YXIgaW5kZXggPSBjcmVhdGUoKTtcblxuZXhwb3J0IGRlZmF1bHQgaW5kZXg7XG5leHBvcnQgeyBSdWxlTGlzdCwgU2hlZXRzTWFuYWdlciwgU2hlZXRzUmVnaXN0cnksIGNyZWF0ZSwgY3JlYXRlR2VuZXJhdGVJZCwgY3JlYXRlUnVsZSwgZ2V0RHluYW1pY1N0eWxlcywgaGFzQ1NTVE9NU3VwcG9ydCwgc2hlZXRzLCB0b0Nzc1ZhbHVlIH07XG4iLCIvLyBVc2VkIGh0dHBzOi8vZ2l0aHViLmNvbS90aGlua2xvb3AvbXVsdGkta2V5LWNhY2hlIGFzIGluc3BpcmF0aW9uXG52YXIgbXVsdGlLZXlTdG9yZSA9IHtcbiAgc2V0OiBmdW5jdGlvbiBzZXQoY2FjaGUsIGtleTEsIGtleTIsIHZhbHVlKSB7XG4gICAgdmFyIHN1YkNhY2hlID0gY2FjaGUuZ2V0KGtleTEpO1xuXG4gICAgaWYgKCFzdWJDYWNoZSkge1xuICAgICAgc3ViQ2FjaGUgPSBuZXcgTWFwKCk7XG4gICAgICBjYWNoZS5zZXQoa2V5MSwgc3ViQ2FjaGUpO1xuICAgIH1cblxuICAgIHN1YkNhY2hlLnNldChrZXkyLCB2YWx1ZSk7XG4gIH0sXG4gIGdldDogZnVuY3Rpb24gZ2V0KGNhY2hlLCBrZXkxLCBrZXkyKSB7XG4gICAgdmFyIHN1YkNhY2hlID0gY2FjaGUuZ2V0KGtleTEpO1xuICAgIHJldHVybiBzdWJDYWNoZSA/IHN1YkNhY2hlLmdldChrZXkyKSA6IHVuZGVmaW5lZDtcbiAgfSxcbiAgZGVsZXRlOiBmdW5jdGlvbiBfZGVsZXRlKGNhY2hlLCBrZXkxLCBrZXkyKSB7XG4gICAgdmFyIHN1YkNhY2hlID0gY2FjaGUuZ2V0KGtleTEpO1xuICAgIHN1YkNhY2hlLmRlbGV0ZShrZXkyKTtcbiAgfVxufTtcbmV4cG9ydCBkZWZhdWx0IG11bHRpS2V5U3RvcmU7IiwidmFyIGhhc1N5bWJvbCA9IHR5cGVvZiBTeW1ib2wgPT09ICdmdW5jdGlvbicgJiYgU3ltYm9sLmZvcjtcbmV4cG9ydCBkZWZhdWx0IGhhc1N5bWJvbCA/IFN5bWJvbC5mb3IoJ211aS5uZXN0ZWQnKSA6ICdfX1RIRU1FX05FU1RFRF9fJzsiLCJpbXBvcnQgbmVzdGVkIGZyb20gJy4uL1RoZW1lUHJvdmlkZXIvbmVzdGVkJztcbi8qKlxuICogVGhpcyBpcyB0aGUgbGlzdCBvZiB0aGUgc3R5bGUgcnVsZSBuYW1lIHdlIHVzZSBhcyBkcm9wIGluIHJlcGxhY2VtZW50IGZvciB0aGUgYnVpbHQtaW5cbiAqIHBzZXVkbyBjbGFzc2VzICg6Y2hlY2tlZCwgOmRpc2FibGVkLCA6Zm9jdXNlZCwgZXRjLikuXG4gKlxuICogV2h5IGRvIHRoZXkgZXhpc3QgaW4gdGhlIGZpcnN0IHBsYWNlP1xuICogVGhlc2UgY2xhc3NlcyBhcmUgdXNlZCBhdCBhIHNwZWNpZmljaXR5IG9mIDIuXG4gKiBJdCBhbGxvd3MgdGhlbSB0byBvdmVycmlkZSBwcmV2aW91c2x5IGRlZmluaWVkIHN0eWxlcyBhcyB3ZWxsIGFzXG4gKiBiZWluZyB1bnRvdWNoZWQgYnkgc2ltcGxlIHVzZXIgb3ZlcnJpZGVzLlxuICovXG5cbnZhciBwc2V1ZG9DbGFzc2VzID0gWydjaGVja2VkJywgJ2Rpc2FibGVkJywgJ2Vycm9yJywgJ2ZvY3VzZWQnLCAnZm9jdXNWaXNpYmxlJywgJ3JlcXVpcmVkJywgJ2V4cGFuZGVkJywgJ3NlbGVjdGVkJ107IC8vIFJldHVybnMgYSBmdW5jdGlvbiB3aGljaCBnZW5lcmF0ZXMgdW5pcXVlIGNsYXNzIG5hbWVzIGJhc2VkIG9uIGNvdW50ZXJzLlxuLy8gV2hlbiBuZXcgZ2VuZXJhdG9yIGZ1bmN0aW9uIGlzIGNyZWF0ZWQsIHJ1bGUgY291bnRlciBpcyByZXNldC5cbi8vIFdlIG5lZWQgdG8gcmVzZXQgdGhlIHJ1bGUgY291bnRlciBmb3IgU1NSIGZvciBlYWNoIHJlcXVlc3QuXG4vL1xuLy8gSXQncyBpbnNwaXJlZCBieVxuLy8gaHR0cHM6Ly9naXRodWIuY29tL2Nzc2luanMvanNzL2Jsb2IvNGU2YTA1ZGQzZjdiNjU3MmZkZDNhYjIxNjg2MWQ5ZTQ0NmMyMDMzMS9zcmMvdXRpbHMvY3JlYXRlR2VuZXJhdGVDbGFzc05hbWUuanNcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY3JlYXRlR2VuZXJhdGVDbGFzc05hbWUoKSB7XG4gIHZhciBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB7fTtcbiAgdmFyIF9vcHRpb25zJGRpc2FibGVHbG9iYSA9IG9wdGlvbnMuZGlzYWJsZUdsb2JhbCxcbiAgICAgIGRpc2FibGVHbG9iYWwgPSBfb3B0aW9ucyRkaXNhYmxlR2xvYmEgPT09IHZvaWQgMCA/IGZhbHNlIDogX29wdGlvbnMkZGlzYWJsZUdsb2JhLFxuICAgICAgX29wdGlvbnMkcHJvZHVjdGlvblByID0gb3B0aW9ucy5wcm9kdWN0aW9uUHJlZml4LFxuICAgICAgcHJvZHVjdGlvblByZWZpeCA9IF9vcHRpb25zJHByb2R1Y3Rpb25QciA9PT0gdm9pZCAwID8gJ2pzcycgOiBfb3B0aW9ucyRwcm9kdWN0aW9uUHIsXG4gICAgICBfb3B0aW9ucyRzZWVkID0gb3B0aW9ucy5zZWVkLFxuICAgICAgc2VlZCA9IF9vcHRpb25zJHNlZWQgPT09IHZvaWQgMCA/ICcnIDogX29wdGlvbnMkc2VlZDtcbiAgdmFyIHNlZWRQcmVmaXggPSBzZWVkID09PSAnJyA/ICcnIDogXCJcIi5jb25jYXQoc2VlZCwgXCItXCIpO1xuICB2YXIgcnVsZUNvdW50ZXIgPSAwO1xuXG4gIHZhciBnZXROZXh0Q291bnRlcklkID0gZnVuY3Rpb24gZ2V0TmV4dENvdW50ZXJJZCgpIHtcbiAgICBydWxlQ291bnRlciArPSAxO1xuXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIGlmIChydWxlQ291bnRlciA+PSAxZTEwKSB7XG4gICAgICAgIGNvbnNvbGUud2FybihbJ01hdGVyaWFsLVVJOiBZb3UgbWlnaHQgaGF2ZSBhIG1lbW9yeSBsZWFrLicsICdUaGUgcnVsZUNvdW50ZXIgaXMgbm90IHN1cHBvc2VkIHRvIGdyb3cgdGhhdCBtdWNoLiddLmpvaW4oJycpKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gcnVsZUNvdW50ZXI7XG4gIH07XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIChydWxlLCBzdHlsZVNoZWV0KSB7XG4gICAgdmFyIG5hbWUgPSBzdHlsZVNoZWV0Lm9wdGlvbnMubmFtZTsgLy8gSXMgYSBnbG9iYWwgc3RhdGljIE1VSSBzdHlsZT9cblxuICAgIGlmIChuYW1lICYmIG5hbWUuaW5kZXhPZignTXVpJykgPT09IDAgJiYgIXN0eWxlU2hlZXQub3B0aW9ucy5saW5rICYmICFkaXNhYmxlR2xvYmFsKSB7XG4gICAgICAvLyBXZSBjYW4gdXNlIGEgc2hvcnRoYW5kIGNsYXNzIG5hbWUsIHdlIG5ldmVyIHVzZSB0aGUga2V5cyB0byBzdHlsZSB0aGUgY29tcG9uZW50cy5cbiAgICAgIGlmIChwc2V1ZG9DbGFzc2VzLmluZGV4T2YocnVsZS5rZXkpICE9PSAtMSkge1xuICAgICAgICByZXR1cm4gXCJNdWktXCIuY29uY2F0KHJ1bGUua2V5KTtcbiAgICAgIH1cblxuICAgICAgdmFyIHByZWZpeCA9IFwiXCIuY29uY2F0KHNlZWRQcmVmaXgpLmNvbmNhdChuYW1lLCBcIi1cIikuY29uY2F0KHJ1bGUua2V5KTtcblxuICAgICAgaWYgKCFzdHlsZVNoZWV0Lm9wdGlvbnMudGhlbWVbbmVzdGVkXSB8fCBzZWVkICE9PSAnJykge1xuICAgICAgICByZXR1cm4gcHJlZml4O1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gXCJcIi5jb25jYXQocHJlZml4LCBcIi1cIikuY29uY2F0KGdldE5leHRDb3VudGVySWQoKSk7XG4gICAgfVxuXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIHJldHVybiBcIlwiLmNvbmNhdChzZWVkUHJlZml4KS5jb25jYXQocHJvZHVjdGlvblByZWZpeCkuY29uY2F0KGdldE5leHRDb3VudGVySWQoKSk7XG4gICAgfVxuXG4gICAgdmFyIHN1ZmZpeCA9IFwiXCIuY29uY2F0KHJ1bGUua2V5LCBcIi1cIikuY29uY2F0KGdldE5leHRDb3VudGVySWQoKSk7IC8vIEhlbHAgd2l0aCBkZWJ1Z2dhYmlsaXR5LlxuXG4gICAgaWYgKHN0eWxlU2hlZXQub3B0aW9ucy5jbGFzc05hbWVQcmVmaXgpIHtcbiAgICAgIHJldHVybiBcIlwiLmNvbmNhdChzZWVkUHJlZml4KS5jb25jYXQoc3R5bGVTaGVldC5vcHRpb25zLmNsYXNzTmFtZVByZWZpeCwgXCItXCIpLmNvbmNhdChzdWZmaXgpO1xuICAgIH1cblxuICAgIHJldHVybiBcIlwiLmNvbmNhdChzZWVkUHJlZml4KS5jb25jYXQoc3VmZml4KTtcbiAgfTtcbn0iLCJpbXBvcnQgd2FybmluZyBmcm9tICd0aW55LXdhcm5pbmcnO1xuaW1wb3J0IHsgY3JlYXRlUnVsZSB9IGZyb20gJ2pzcyc7XG5cbnZhciBub3cgPSBEYXRlLm5vdygpO1xudmFyIGZuVmFsdWVzTnMgPSBcImZuVmFsdWVzXCIgKyBub3c7XG52YXIgZm5SdWxlTnMgPSBcImZuU3R5bGVcIiArICsrbm93O1xuZnVuY3Rpb24gZnVuY3Rpb25QbHVnaW4oKSB7XG4gIHJldHVybiB7XG4gICAgb25DcmVhdGVSdWxlOiBmdW5jdGlvbiBvbkNyZWF0ZVJ1bGUobmFtZSwgZGVjbCwgb3B0aW9ucykge1xuICAgICAgaWYgKHR5cGVvZiBkZWNsICE9PSAnZnVuY3Rpb24nKSByZXR1cm4gbnVsbDtcbiAgICAgIHZhciBydWxlID0gY3JlYXRlUnVsZShuYW1lLCB7fSwgb3B0aW9ucyk7XG4gICAgICBydWxlW2ZuUnVsZU5zXSA9IGRlY2w7XG4gICAgICByZXR1cm4gcnVsZTtcbiAgICB9LFxuICAgIG9uUHJvY2Vzc1N0eWxlOiBmdW5jdGlvbiBvblByb2Nlc3NTdHlsZShzdHlsZSwgcnVsZSkge1xuICAgICAgLy8gV2UgbmVlZCB0byBleHRyYWN0IGZ1bmN0aW9uIHZhbHVlcyBmcm9tIHRoZSBkZWNsYXJhdGlvbiwgc28gdGhhdCB3ZSBjYW4ga2VlcCBjb3JlIHVuYXdhcmUgb2YgdGhlbS5cbiAgICAgIC8vIFdlIG5lZWQgdG8gZG8gdGhhdCBvbmx5IG9uY2UuXG4gICAgICAvLyBXZSBkb24ndCBuZWVkIHRvIGV4dHJhY3QgZnVuY3Rpb25zIG9uIGVhY2ggc3R5bGUgdXBkYXRlLCBzaW5jZSB0aGlzIGNhbiBoYXBwZW4gb25seSBvbmNlLlxuICAgICAgLy8gV2UgZG9uJ3Qgc3VwcG9ydCBmdW5jdGlvbiB2YWx1ZXMgaW5zaWRlIG9mIGZ1bmN0aW9uIHJ1bGVzLlxuICAgICAgaWYgKGZuVmFsdWVzTnMgaW4gcnVsZSB8fCBmblJ1bGVOcyBpbiBydWxlKSByZXR1cm4gc3R5bGU7XG4gICAgICB2YXIgZm5WYWx1ZXMgPSB7fTtcblxuICAgICAgZm9yICh2YXIgcHJvcCBpbiBzdHlsZSkge1xuICAgICAgICB2YXIgdmFsdWUgPSBzdHlsZVtwcm9wXTtcbiAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gJ2Z1bmN0aW9uJykgY29udGludWU7XG4gICAgICAgIGRlbGV0ZSBzdHlsZVtwcm9wXTtcbiAgICAgICAgZm5WYWx1ZXNbcHJvcF0gPSB2YWx1ZTtcbiAgICAgIH0gLy8gJEZsb3dGaXhNZVxuXG5cbiAgICAgIHJ1bGVbZm5WYWx1ZXNOc10gPSBmblZhbHVlcztcbiAgICAgIHJldHVybiBzdHlsZTtcbiAgICB9LFxuICAgIG9uVXBkYXRlOiBmdW5jdGlvbiBvblVwZGF0ZShkYXRhLCBydWxlLCBzaGVldCwgb3B0aW9ucykge1xuICAgICAgdmFyIHN0eWxlUnVsZSA9IHJ1bGU7XG4gICAgICB2YXIgZm5SdWxlID0gc3R5bGVSdWxlW2ZuUnVsZU5zXTsgLy8gSWYgd2UgaGF2ZSBhIHN0eWxlIGZ1bmN0aW9uLCB0aGUgZW50aXJlIHJ1bGUgaXMgZHluYW1pYyBhbmQgc3R5bGUgb2JqZWN0XG4gICAgICAvLyB3aWxsIGJlIHJldHVybmVkIGZyb20gdGhhdCBmdW5jdGlvbi5cblxuICAgICAgaWYgKGZuUnVsZSkge1xuICAgICAgICAvLyBFbXB0eSBvYmplY3Qgd2lsbCByZW1vdmUgYWxsIGN1cnJlbnRseSBkZWZpbmVkIHByb3BzXG4gICAgICAgIC8vIGluIGNhc2UgZnVuY3Rpb24gcnVsZSByZXR1cm5zIGEgZmFsc3kgdmFsdWUuXG4gICAgICAgIHN0eWxlUnVsZS5zdHlsZSA9IGZuUnVsZShkYXRhKSB8fCB7fTtcblxuICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdkZXZlbG9wbWVudCcpIHtcbiAgICAgICAgICBmb3IgKHZhciBwcm9wIGluIHN0eWxlUnVsZS5zdHlsZSkge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBzdHlsZVJ1bGUuc3R5bGVbcHJvcF0gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhmYWxzZSwgJ1tKU1NdIEZ1bmN0aW9uIHZhbHVlcyBpbnNpZGUgZnVuY3Rpb24gcnVsZXMgYXJlIG5vdCBzdXBwb3J0ZWQuJykgOiB2b2lkIDA7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB2YXIgZm5WYWx1ZXMgPSBzdHlsZVJ1bGVbZm5WYWx1ZXNOc107IC8vIElmIHdlIGhhdmUgYSBmbiB2YWx1ZXMgbWFwLCBpdCBpcyBhIHJ1bGUgd2l0aCBmdW5jdGlvbiB2YWx1ZXMuXG5cbiAgICAgIGlmIChmblZhbHVlcykge1xuICAgICAgICBmb3IgKHZhciBfcHJvcCBpbiBmblZhbHVlcykge1xuICAgICAgICAgIHN0eWxlUnVsZS5wcm9wKF9wcm9wLCBmblZhbHVlc1tfcHJvcF0oZGF0YSksIG9wdGlvbnMpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvblBsdWdpbjtcbiIsImltcG9ydCBfZXh0ZW5kcyBmcm9tICdAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzJztcbmltcG9ydCB7IFJ1bGVMaXN0IH0gZnJvbSAnanNzJztcblxudmFyIGF0ID0gJ0BnbG9iYWwnO1xudmFyIGF0UHJlZml4ID0gJ0BnbG9iYWwgJztcblxudmFyIEdsb2JhbENvbnRhaW5lclJ1bGUgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBHbG9iYWxDb250YWluZXJSdWxlKGtleSwgc3R5bGVzLCBvcHRpb25zKSB7XG4gICAgdGhpcy50eXBlID0gJ2dsb2JhbCc7XG4gICAgdGhpcy5hdCA9IGF0O1xuICAgIHRoaXMucnVsZXMgPSB2b2lkIDA7XG4gICAgdGhpcy5vcHRpb25zID0gdm9pZCAwO1xuICAgIHRoaXMua2V5ID0gdm9pZCAwO1xuICAgIHRoaXMuaXNQcm9jZXNzZWQgPSBmYWxzZTtcbiAgICB0aGlzLmtleSA9IGtleTtcbiAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuICAgIHRoaXMucnVsZXMgPSBuZXcgUnVsZUxpc3QoX2V4dGVuZHMoe30sIG9wdGlvbnMsIHtcbiAgICAgIHBhcmVudDogdGhpc1xuICAgIH0pKTtcblxuICAgIGZvciAodmFyIHNlbGVjdG9yIGluIHN0eWxlcykge1xuICAgICAgdGhpcy5ydWxlcy5hZGQoc2VsZWN0b3IsIHN0eWxlc1tzZWxlY3Rvcl0pO1xuICAgIH1cblxuICAgIHRoaXMucnVsZXMucHJvY2VzcygpO1xuICB9XG4gIC8qKlxuICAgKiBHZXQgYSBydWxlLlxuICAgKi9cblxuXG4gIHZhciBfcHJvdG8gPSBHbG9iYWxDb250YWluZXJSdWxlLnByb3RvdHlwZTtcblxuICBfcHJvdG8uZ2V0UnVsZSA9IGZ1bmN0aW9uIGdldFJ1bGUobmFtZSkge1xuICAgIHJldHVybiB0aGlzLnJ1bGVzLmdldChuYW1lKTtcbiAgfVxuICAvKipcbiAgICogQ3JlYXRlIGFuZCByZWdpc3RlciBydWxlLCBydW4gcGx1Z2lucy5cbiAgICovXG4gIDtcblxuICBfcHJvdG8uYWRkUnVsZSA9IGZ1bmN0aW9uIGFkZFJ1bGUobmFtZSwgc3R5bGUsIG9wdGlvbnMpIHtcbiAgICB2YXIgcnVsZSA9IHRoaXMucnVsZXMuYWRkKG5hbWUsIHN0eWxlLCBvcHRpb25zKTtcbiAgICB0aGlzLm9wdGlvbnMuanNzLnBsdWdpbnMub25Qcm9jZXNzUnVsZShydWxlKTtcbiAgICByZXR1cm4gcnVsZTtcbiAgfVxuICAvKipcbiAgICogR2V0IGluZGV4IG9mIGEgcnVsZS5cbiAgICovXG4gIDtcblxuICBfcHJvdG8uaW5kZXhPZiA9IGZ1bmN0aW9uIGluZGV4T2YocnVsZSkge1xuICAgIHJldHVybiB0aGlzLnJ1bGVzLmluZGV4T2YocnVsZSk7XG4gIH1cbiAgLyoqXG4gICAqIEdlbmVyYXRlcyBhIENTUyBzdHJpbmcuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuIHRoaXMucnVsZXMudG9TdHJpbmcoKTtcbiAgfTtcblxuICByZXR1cm4gR2xvYmFsQ29udGFpbmVyUnVsZTtcbn0oKTtcblxudmFyIEdsb2JhbFByZWZpeGVkUnVsZSA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIEdsb2JhbFByZWZpeGVkUnVsZShrZXksIHN0eWxlLCBvcHRpb25zKSB7XG4gICAgdGhpcy50eXBlID0gJ2dsb2JhbCc7XG4gICAgdGhpcy5hdCA9IGF0O1xuICAgIHRoaXMub3B0aW9ucyA9IHZvaWQgMDtcbiAgICB0aGlzLnJ1bGUgPSB2b2lkIDA7XG4gICAgdGhpcy5pc1Byb2Nlc3NlZCA9IGZhbHNlO1xuICAgIHRoaXMua2V5ID0gdm9pZCAwO1xuICAgIHRoaXMua2V5ID0ga2V5O1xuICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgdmFyIHNlbGVjdG9yID0ga2V5LnN1YnN0cihhdFByZWZpeC5sZW5ndGgpO1xuICAgIHRoaXMucnVsZSA9IG9wdGlvbnMuanNzLmNyZWF0ZVJ1bGUoc2VsZWN0b3IsIHN0eWxlLCBfZXh0ZW5kcyh7fSwgb3B0aW9ucywge1xuICAgICAgcGFyZW50OiB0aGlzXG4gICAgfSkpO1xuICB9XG5cbiAgdmFyIF9wcm90bzIgPSBHbG9iYWxQcmVmaXhlZFJ1bGUucHJvdG90eXBlO1xuXG4gIF9wcm90bzIudG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZyhvcHRpb25zKSB7XG4gICAgcmV0dXJuIHRoaXMucnVsZSA/IHRoaXMucnVsZS50b1N0cmluZyhvcHRpb25zKSA6ICcnO1xuICB9O1xuXG4gIHJldHVybiBHbG9iYWxQcmVmaXhlZFJ1bGU7XG59KCk7XG5cbnZhciBzZXBhcmF0b3JSZWdFeHAgPSAvXFxzKixcXHMqL2c7XG5cbmZ1bmN0aW9uIGFkZFNjb3BlKHNlbGVjdG9yLCBzY29wZSkge1xuICB2YXIgcGFydHMgPSBzZWxlY3Rvci5zcGxpdChzZXBhcmF0b3JSZWdFeHApO1xuICB2YXIgc2NvcGVkID0gJyc7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBwYXJ0cy5sZW5ndGg7IGkrKykge1xuICAgIHNjb3BlZCArPSBzY29wZSArIFwiIFwiICsgcGFydHNbaV0udHJpbSgpO1xuICAgIGlmIChwYXJ0c1tpICsgMV0pIHNjb3BlZCArPSAnLCAnO1xuICB9XG5cbiAgcmV0dXJuIHNjb3BlZDtcbn1cblxuZnVuY3Rpb24gaGFuZGxlTmVzdGVkR2xvYmFsQ29udGFpbmVyUnVsZShydWxlKSB7XG4gIHZhciBvcHRpb25zID0gcnVsZS5vcHRpb25zLFxuICAgICAgc3R5bGUgPSBydWxlLnN0eWxlO1xuICB2YXIgcnVsZXMgPSBzdHlsZSA/IHN0eWxlW2F0XSA6IG51bGw7XG4gIGlmICghcnVsZXMpIHJldHVybjtcblxuICBmb3IgKHZhciBuYW1lIGluIHJ1bGVzKSB7XG4gICAgb3B0aW9ucy5zaGVldC5hZGRSdWxlKG5hbWUsIHJ1bGVzW25hbWVdLCBfZXh0ZW5kcyh7fSwgb3B0aW9ucywge1xuICAgICAgc2VsZWN0b3I6IGFkZFNjb3BlKG5hbWUsIHJ1bGUuc2VsZWN0b3IpXG4gICAgfSkpO1xuICB9XG5cbiAgZGVsZXRlIHN0eWxlW2F0XTtcbn1cblxuZnVuY3Rpb24gaGFuZGxlUHJlZml4ZWRHbG9iYWxSdWxlKHJ1bGUpIHtcbiAgdmFyIG9wdGlvbnMgPSBydWxlLm9wdGlvbnMsXG4gICAgICBzdHlsZSA9IHJ1bGUuc3R5bGU7XG5cbiAgZm9yICh2YXIgcHJvcCBpbiBzdHlsZSkge1xuICAgIGlmIChwcm9wWzBdICE9PSAnQCcgfHwgcHJvcC5zdWJzdHIoMCwgYXQubGVuZ3RoKSAhPT0gYXQpIGNvbnRpbnVlO1xuICAgIHZhciBzZWxlY3RvciA9IGFkZFNjb3BlKHByb3Auc3Vic3RyKGF0Lmxlbmd0aCksIHJ1bGUuc2VsZWN0b3IpO1xuICAgIG9wdGlvbnMuc2hlZXQuYWRkUnVsZShzZWxlY3Rvciwgc3R5bGVbcHJvcF0sIF9leHRlbmRzKHt9LCBvcHRpb25zLCB7XG4gICAgICBzZWxlY3Rvcjogc2VsZWN0b3JcbiAgICB9KSk7XG4gICAgZGVsZXRlIHN0eWxlW3Byb3BdO1xuICB9XG59XG4vKipcbiAqIENvbnZlcnQgbmVzdGVkIHJ1bGVzIHRvIHNlcGFyYXRlLCByZW1vdmUgdGhlbSBmcm9tIG9yaWdpbmFsIHN0eWxlcy5cbiAqXG4gKiBAcGFyYW0ge1J1bGV9IHJ1bGVcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuXG5mdW5jdGlvbiBqc3NHbG9iYWwoKSB7XG4gIGZ1bmN0aW9uIG9uQ3JlYXRlUnVsZShuYW1lLCBzdHlsZXMsIG9wdGlvbnMpIHtcbiAgICBpZiAoIW5hbWUpIHJldHVybiBudWxsO1xuXG4gICAgaWYgKG5hbWUgPT09IGF0KSB7XG4gICAgICByZXR1cm4gbmV3IEdsb2JhbENvbnRhaW5lclJ1bGUobmFtZSwgc3R5bGVzLCBvcHRpb25zKTtcbiAgICB9XG5cbiAgICBpZiAobmFtZVswXSA9PT0gJ0AnICYmIG5hbWUuc3Vic3RyKDAsIGF0UHJlZml4Lmxlbmd0aCkgPT09IGF0UHJlZml4KSB7XG4gICAgICByZXR1cm4gbmV3IEdsb2JhbFByZWZpeGVkUnVsZShuYW1lLCBzdHlsZXMsIG9wdGlvbnMpO1xuICAgIH1cblxuICAgIHZhciBwYXJlbnQgPSBvcHRpb25zLnBhcmVudDtcblxuICAgIGlmIChwYXJlbnQpIHtcbiAgICAgIGlmIChwYXJlbnQudHlwZSA9PT0gJ2dsb2JhbCcgfHwgcGFyZW50Lm9wdGlvbnMucGFyZW50ICYmIHBhcmVudC5vcHRpb25zLnBhcmVudC50eXBlID09PSAnZ2xvYmFsJykge1xuICAgICAgICBvcHRpb25zLnNjb3BlZCA9IGZhbHNlO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChvcHRpb25zLnNjb3BlZCA9PT0gZmFsc2UpIHtcbiAgICAgIG9wdGlvbnMuc2VsZWN0b3IgPSBuYW1lO1xuICAgIH1cblxuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgZnVuY3Rpb24gb25Qcm9jZXNzUnVsZShydWxlKSB7XG4gICAgaWYgKHJ1bGUudHlwZSAhPT0gJ3N0eWxlJykgcmV0dXJuO1xuICAgIGhhbmRsZU5lc3RlZEdsb2JhbENvbnRhaW5lclJ1bGUocnVsZSk7XG4gICAgaGFuZGxlUHJlZml4ZWRHbG9iYWxSdWxlKHJ1bGUpO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBvbkNyZWF0ZVJ1bGU6IG9uQ3JlYXRlUnVsZSxcbiAgICBvblByb2Nlc3NSdWxlOiBvblByb2Nlc3NSdWxlXG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGpzc0dsb2JhbDtcbiIsImltcG9ydCBfZXh0ZW5kcyBmcm9tICdAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzJztcbmltcG9ydCB3YXJuaW5nIGZyb20gJ3Rpbnktd2FybmluZyc7XG5cbnZhciBzZXBhcmF0b3JSZWdFeHAgPSAvXFxzKixcXHMqL2c7XG52YXIgcGFyZW50UmVnRXhwID0gLyYvZztcbnZhciByZWZSZWdFeHAgPSAvXFwkKFtcXHctXSspL2c7XG4vKipcbiAqIENvbnZlcnQgbmVzdGVkIHJ1bGVzIHRvIHNlcGFyYXRlLCByZW1vdmUgdGhlbSBmcm9tIG9yaWdpbmFsIHN0eWxlcy5cbiAqXG4gKiBAcGFyYW0ge1J1bGV9IHJ1bGVcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZnVuY3Rpb24ganNzTmVzdGVkKCkge1xuICAvLyBHZXQgYSBmdW5jdGlvbiB0byBiZSB1c2VkIGZvciAkcmVmIHJlcGxhY2VtZW50LlxuICBmdW5jdGlvbiBnZXRSZXBsYWNlUmVmKGNvbnRhaW5lciwgc2hlZXQpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKG1hdGNoLCBrZXkpIHtcbiAgICAgIHZhciBydWxlID0gY29udGFpbmVyLmdldFJ1bGUoa2V5KSB8fCBzaGVldCAmJiBzaGVldC5nZXRSdWxlKGtleSk7XG5cbiAgICAgIGlmIChydWxlKSB7XG4gICAgICAgIHJ1bGUgPSBydWxlO1xuICAgICAgICByZXR1cm4gcnVsZS5zZWxlY3RvcjtcbiAgICAgIH1cblxuICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhmYWxzZSwgXCJbSlNTXSBDb3VsZCBub3QgZmluZCB0aGUgcmVmZXJlbmNlZCBydWxlIFxcXCJcIiArIGtleSArIFwiXFxcIiBpbiBcXFwiXCIgKyAoY29udGFpbmVyLm9wdGlvbnMubWV0YSB8fCBjb250YWluZXIudG9TdHJpbmcoKSkgKyBcIlxcXCIuXCIpIDogdm9pZCAwO1xuICAgICAgcmV0dXJuIGtleTtcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gcmVwbGFjZVBhcmVudFJlZnMobmVzdGVkUHJvcCwgcGFyZW50UHJvcCkge1xuICAgIHZhciBwYXJlbnRTZWxlY3RvcnMgPSBwYXJlbnRQcm9wLnNwbGl0KHNlcGFyYXRvclJlZ0V4cCk7XG4gICAgdmFyIG5lc3RlZFNlbGVjdG9ycyA9IG5lc3RlZFByb3Auc3BsaXQoc2VwYXJhdG9yUmVnRXhwKTtcbiAgICB2YXIgcmVzdWx0ID0gJyc7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHBhcmVudFNlbGVjdG9ycy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHBhcmVudCA9IHBhcmVudFNlbGVjdG9yc1tpXTtcblxuICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBuZXN0ZWRTZWxlY3RvcnMubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgdmFyIG5lc3RlZCA9IG5lc3RlZFNlbGVjdG9yc1tqXTtcbiAgICAgICAgaWYgKHJlc3VsdCkgcmVzdWx0ICs9ICcsICc7IC8vIFJlcGxhY2UgYWxsICYgYnkgdGhlIHBhcmVudCBvciBwcmVmaXggJiB3aXRoIHRoZSBwYXJlbnQuXG5cbiAgICAgICAgcmVzdWx0ICs9IG5lc3RlZC5pbmRleE9mKCcmJykgIT09IC0xID8gbmVzdGVkLnJlcGxhY2UocGFyZW50UmVnRXhwLCBwYXJlbnQpIDogcGFyZW50ICsgXCIgXCIgKyBuZXN0ZWQ7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdldE9wdGlvbnMocnVsZSwgY29udGFpbmVyLCBwcmV2T3B0aW9ucykge1xuICAgIC8vIE9wdGlvbnMgaGFzIGJlZW4gYWxyZWFkeSBjcmVhdGVkLCBub3cgd2Ugb25seSBpbmNyZWFzZSBpbmRleC5cbiAgICBpZiAocHJldk9wdGlvbnMpIHJldHVybiBfZXh0ZW5kcyh7fSwgcHJldk9wdGlvbnMsIHtcbiAgICAgIGluZGV4OiBwcmV2T3B0aW9ucy5pbmRleCArIDFcbiAgICB9KTtcbiAgICB2YXIgbmVzdGluZ0xldmVsID0gcnVsZS5vcHRpb25zLm5lc3RpbmdMZXZlbDtcbiAgICBuZXN0aW5nTGV2ZWwgPSBuZXN0aW5nTGV2ZWwgPT09IHVuZGVmaW5lZCA/IDEgOiBuZXN0aW5nTGV2ZWwgKyAxO1xuXG4gICAgdmFyIG9wdGlvbnMgPSBfZXh0ZW5kcyh7fSwgcnVsZS5vcHRpb25zLCB7XG4gICAgICBuZXN0aW5nTGV2ZWw6IG5lc3RpbmdMZXZlbCxcbiAgICAgIGluZGV4OiBjb250YWluZXIuaW5kZXhPZihydWxlKSArIDEgLy8gV2UgZG9uJ3QgbmVlZCB0aGUgcGFyZW50IG5hbWUgdG8gYmUgc2V0IG9wdGlvbnMgZm9yIGNobGlkLlxuXG4gICAgfSk7XG5cbiAgICBkZWxldGUgb3B0aW9ucy5uYW1lO1xuICAgIHJldHVybiBvcHRpb25zO1xuICB9XG5cbiAgZnVuY3Rpb24gb25Qcm9jZXNzU3R5bGUoc3R5bGUsIHJ1bGUsIHNoZWV0KSB7XG4gICAgaWYgKHJ1bGUudHlwZSAhPT0gJ3N0eWxlJykgcmV0dXJuIHN0eWxlO1xuICAgIHZhciBzdHlsZVJ1bGUgPSBydWxlO1xuICAgIHZhciBjb250YWluZXIgPSBzdHlsZVJ1bGUub3B0aW9ucy5wYXJlbnQ7XG4gICAgdmFyIG9wdGlvbnM7XG4gICAgdmFyIHJlcGxhY2VSZWY7XG5cbiAgICBmb3IgKHZhciBwcm9wIGluIHN0eWxlKSB7XG4gICAgICB2YXIgaXNOZXN0ZWQgPSBwcm9wLmluZGV4T2YoJyYnKSAhPT0gLTE7XG4gICAgICB2YXIgaXNOZXN0ZWRDb25kaXRpb25hbCA9IHByb3BbMF0gPT09ICdAJztcbiAgICAgIGlmICghaXNOZXN0ZWQgJiYgIWlzTmVzdGVkQ29uZGl0aW9uYWwpIGNvbnRpbnVlO1xuICAgICAgb3B0aW9ucyA9IGdldE9wdGlvbnMoc3R5bGVSdWxlLCBjb250YWluZXIsIG9wdGlvbnMpO1xuXG4gICAgICBpZiAoaXNOZXN0ZWQpIHtcbiAgICAgICAgdmFyIHNlbGVjdG9yID0gcmVwbGFjZVBhcmVudFJlZnMocHJvcCwgc3R5bGVSdWxlLnNlbGVjdG9yKTsgLy8gTGF6aWx5IGNyZWF0ZSB0aGUgcmVmIHJlcGxhY2VyIGZ1bmN0aW9uIGp1c3Qgb25jZSBmb3JcbiAgICAgICAgLy8gYWxsIG5lc3RlZCBydWxlcyB3aXRoaW4gdGhlIHNoZWV0LlxuXG4gICAgICAgIGlmICghcmVwbGFjZVJlZikgcmVwbGFjZVJlZiA9IGdldFJlcGxhY2VSZWYoY29udGFpbmVyLCBzaGVldCk7IC8vIFJlcGxhY2UgYWxsICRyZWZzLlxuXG4gICAgICAgIHNlbGVjdG9yID0gc2VsZWN0b3IucmVwbGFjZShyZWZSZWdFeHAsIHJlcGxhY2VSZWYpO1xuICAgICAgICBjb250YWluZXIuYWRkUnVsZShzZWxlY3Rvciwgc3R5bGVbcHJvcF0sIF9leHRlbmRzKHt9LCBvcHRpb25zLCB7XG4gICAgICAgICAgc2VsZWN0b3I6IHNlbGVjdG9yXG4gICAgICAgIH0pKTtcbiAgICAgIH0gZWxzZSBpZiAoaXNOZXN0ZWRDb25kaXRpb25hbCkge1xuICAgICAgICAvLyBQbGFjZSBjb25kaXRpb25hbCByaWdodCBhZnRlciB0aGUgcGFyZW50IHJ1bGUgdG8gZW5zdXJlIHJpZ2h0IG9yZGVyaW5nLlxuICAgICAgICBjb250YWluZXIuYWRkUnVsZShwcm9wLCB7fSwgb3B0aW9ucykgLy8gRmxvdyBleHBlY3RzIG1vcmUgb3B0aW9ucyBidXQgdGhleSBhcmVuJ3QgcmVxdWlyZWRcbiAgICAgICAgLy8gQW5kIGZsb3cgZG9lc24ndCBrbm93IHRoaXMgd2lsbCBhbHdheXMgYmUgYSBTdHlsZVJ1bGUgd2hpY2ggaGFzIHRoZSBhZGRSdWxlIG1ldGhvZFxuICAgICAgICAvLyAkRmxvd0ZpeE1lXG4gICAgICAgIC5hZGRSdWxlKHN0eWxlUnVsZS5rZXksIHN0eWxlW3Byb3BdLCB7XG4gICAgICAgICAgc2VsZWN0b3I6IHN0eWxlUnVsZS5zZWxlY3RvclxuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgZGVsZXRlIHN0eWxlW3Byb3BdO1xuICAgIH1cblxuICAgIHJldHVybiBzdHlsZTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgb25Qcm9jZXNzU3R5bGU6IG9uUHJvY2Vzc1N0eWxlXG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGpzc05lc3RlZDtcbiIsIi8qIGVzbGludC1kaXNhYmxlIG5vLXZhciwgcHJlZmVyLXRlbXBsYXRlICovXG52YXIgdXBwZXJjYXNlUGF0dGVybiA9IC9bQS1aXS9nXG52YXIgbXNQYXR0ZXJuID0gL15tcy0vXG52YXIgY2FjaGUgPSB7fVxuXG5mdW5jdGlvbiB0b0h5cGhlbkxvd2VyKG1hdGNoKSB7XG4gIHJldHVybiAnLScgKyBtYXRjaC50b0xvd2VyQ2FzZSgpXG59XG5cbmZ1bmN0aW9uIGh5cGhlbmF0ZVN0eWxlTmFtZShuYW1lKSB7XG4gIGlmIChjYWNoZS5oYXNPd25Qcm9wZXJ0eShuYW1lKSkge1xuICAgIHJldHVybiBjYWNoZVtuYW1lXVxuICB9XG5cbiAgdmFyIGhOYW1lID0gbmFtZS5yZXBsYWNlKHVwcGVyY2FzZVBhdHRlcm4sIHRvSHlwaGVuTG93ZXIpXG4gIHJldHVybiAoY2FjaGVbbmFtZV0gPSBtc1BhdHRlcm4udGVzdChoTmFtZSkgPyAnLScgKyBoTmFtZSA6IGhOYW1lKVxufVxuXG5leHBvcnQgZGVmYXVsdCBoeXBoZW5hdGVTdHlsZU5hbWVcbiIsImltcG9ydCBoeXBoZW5hdGUgZnJvbSAnaHlwaGVuYXRlLXN0eWxlLW5hbWUnO1xuXG4vKipcbiAqIENvbnZlcnQgY2FtZWwgY2FzZWQgcHJvcGVydHkgbmFtZXMgdG8gZGFzaCBzZXBhcmF0ZWQuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHN0eWxlXG4gKiBAcmV0dXJuIHtPYmplY3R9XG4gKi9cblxuZnVuY3Rpb24gY29udmVydENhc2Uoc3R5bGUpIHtcbiAgdmFyIGNvbnZlcnRlZCA9IHt9O1xuXG4gIGZvciAodmFyIHByb3AgaW4gc3R5bGUpIHtcbiAgICB2YXIga2V5ID0gcHJvcC5pbmRleE9mKCctLScpID09PSAwID8gcHJvcCA6IGh5cGhlbmF0ZShwcm9wKTtcbiAgICBjb252ZXJ0ZWRba2V5XSA9IHN0eWxlW3Byb3BdO1xuICB9XG5cbiAgaWYgKHN0eWxlLmZhbGxiYWNrcykge1xuICAgIGlmIChBcnJheS5pc0FycmF5KHN0eWxlLmZhbGxiYWNrcykpIGNvbnZlcnRlZC5mYWxsYmFja3MgPSBzdHlsZS5mYWxsYmFja3MubWFwKGNvbnZlcnRDYXNlKTtlbHNlIGNvbnZlcnRlZC5mYWxsYmFja3MgPSBjb252ZXJ0Q2FzZShzdHlsZS5mYWxsYmFja3MpO1xuICB9XG5cbiAgcmV0dXJuIGNvbnZlcnRlZDtcbn1cbi8qKlxuICogQWxsb3cgY2FtZWwgY2FzZWQgcHJvcGVydHkgbmFtZXMgYnkgY29udmVydGluZyB0aGVtIGJhY2sgdG8gZGFzaGVyaXplZC5cbiAqXG4gKiBAcGFyYW0ge1J1bGV9IHJ1bGVcbiAqL1xuXG5cbmZ1bmN0aW9uIGNhbWVsQ2FzZSgpIHtcbiAgZnVuY3Rpb24gb25Qcm9jZXNzU3R5bGUoc3R5bGUpIHtcbiAgICBpZiAoQXJyYXkuaXNBcnJheShzdHlsZSkpIHtcbiAgICAgIC8vIEhhbmRsZSBydWxlcyBsaWtlIEBmb250LWZhY2UsIHdoaWNoIGNhbiBoYXZlIG11bHRpcGxlIHN0eWxlcyBpbiBhbiBhcnJheVxuICAgICAgZm9yICh2YXIgaW5kZXggPSAwOyBpbmRleCA8IHN0eWxlLmxlbmd0aDsgaW5kZXgrKykge1xuICAgICAgICBzdHlsZVtpbmRleF0gPSBjb252ZXJ0Q2FzZShzdHlsZVtpbmRleF0pO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gc3R5bGU7XG4gICAgfVxuXG4gICAgcmV0dXJuIGNvbnZlcnRDYXNlKHN0eWxlKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIG9uQ2hhbmdlVmFsdWUodmFsdWUsIHByb3AsIHJ1bGUpIHtcbiAgICBpZiAocHJvcC5pbmRleE9mKCctLScpID09PSAwKSB7XG4gICAgICByZXR1cm4gdmFsdWU7XG4gICAgfVxuXG4gICAgdmFyIGh5cGhlbmF0ZWRQcm9wID0gaHlwaGVuYXRlKHByb3ApOyAvLyBUaGVyZSB3YXMgbm8gY2FtZWwgY2FzZSBpbiBwbGFjZVxuXG4gICAgaWYgKHByb3AgPT09IGh5cGhlbmF0ZWRQcm9wKSByZXR1cm4gdmFsdWU7XG4gICAgcnVsZS5wcm9wKGh5cGhlbmF0ZWRQcm9wLCB2YWx1ZSk7IC8vIENvcmUgd2lsbCBpZ25vcmUgdGhhdCBwcm9wZXJ0eSB2YWx1ZSB3ZSBzZXQgdGhlIHByb3BlciBvbmUgYWJvdmUuXG5cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgb25Qcm9jZXNzU3R5bGU6IG9uUHJvY2Vzc1N0eWxlLFxuICAgIG9uQ2hhbmdlVmFsdWU6IG9uQ2hhbmdlVmFsdWVcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgY2FtZWxDYXNlO1xuIiwiaW1wb3J0IHsgaGFzQ1NTVE9NU3VwcG9ydCB9IGZyb20gJ2pzcyc7XG5cbnZhciBweCA9IGhhc0NTU1RPTVN1cHBvcnQgJiYgQ1NTID8gQ1NTLnB4IDogJ3B4JztcbnZhciBtcyA9IGhhc0NTU1RPTVN1cHBvcnQgJiYgQ1NTID8gQ1NTLm1zIDogJ21zJztcbnZhciBwZXJjZW50ID0gaGFzQ1NTVE9NU3VwcG9ydCAmJiBDU1MgPyBDU1MucGVyY2VudCA6ICclJztcbi8qKlxuICogR2VuZXJhdGVkIGpzcy1wbHVnaW4tZGVmYXVsdC11bml0IENTUyBwcm9wZXJ0eSB1bml0c1xuICpcbiAqIEB0eXBlIG9iamVjdFxuICovXG5cbnZhciBkZWZhdWx0VW5pdHMgPSB7XG4gIC8vIEFuaW1hdGlvbiBwcm9wZXJ0aWVzXG4gICdhbmltYXRpb24tZGVsYXknOiBtcyxcbiAgJ2FuaW1hdGlvbi1kdXJhdGlvbic6IG1zLFxuICAvLyBCYWNrZ3JvdW5kIHByb3BlcnRpZXNcbiAgJ2JhY2tncm91bmQtcG9zaXRpb24nOiBweCxcbiAgJ2JhY2tncm91bmQtcG9zaXRpb24teCc6IHB4LFxuICAnYmFja2dyb3VuZC1wb3NpdGlvbi15JzogcHgsXG4gICdiYWNrZ3JvdW5kLXNpemUnOiBweCxcbiAgLy8gQm9yZGVyIFByb3BlcnRpZXNcbiAgYm9yZGVyOiBweCxcbiAgJ2JvcmRlci1ib3R0b20nOiBweCxcbiAgJ2JvcmRlci1ib3R0b20tbGVmdC1yYWRpdXMnOiBweCxcbiAgJ2JvcmRlci1ib3R0b20tcmlnaHQtcmFkaXVzJzogcHgsXG4gICdib3JkZXItYm90dG9tLXdpZHRoJzogcHgsXG4gICdib3JkZXItbGVmdCc6IHB4LFxuICAnYm9yZGVyLWxlZnQtd2lkdGgnOiBweCxcbiAgJ2JvcmRlci1yYWRpdXMnOiBweCxcbiAgJ2JvcmRlci1yaWdodCc6IHB4LFxuICAnYm9yZGVyLXJpZ2h0LXdpZHRoJzogcHgsXG4gICdib3JkZXItdG9wJzogcHgsXG4gICdib3JkZXItdG9wLWxlZnQtcmFkaXVzJzogcHgsXG4gICdib3JkZXItdG9wLXJpZ2h0LXJhZGl1cyc6IHB4LFxuICAnYm9yZGVyLXRvcC13aWR0aCc6IHB4LFxuICAnYm9yZGVyLXdpZHRoJzogcHgsXG4gIC8vIE1hcmdpbiBwcm9wZXJ0aWVzXG4gIG1hcmdpbjogcHgsXG4gICdtYXJnaW4tYm90dG9tJzogcHgsXG4gICdtYXJnaW4tbGVmdCc6IHB4LFxuICAnbWFyZ2luLXJpZ2h0JzogcHgsXG4gICdtYXJnaW4tdG9wJzogcHgsXG4gIC8vIFBhZGRpbmcgcHJvcGVydGllc1xuICBwYWRkaW5nOiBweCxcbiAgJ3BhZGRpbmctYm90dG9tJzogcHgsXG4gICdwYWRkaW5nLWxlZnQnOiBweCxcbiAgJ3BhZGRpbmctcmlnaHQnOiBweCxcbiAgJ3BhZGRpbmctdG9wJzogcHgsXG4gIC8vIE1hc2sgcHJvcGVydGllc1xuICAnbWFzay1wb3NpdGlvbi14JzogcHgsXG4gICdtYXNrLXBvc2l0aW9uLXknOiBweCxcbiAgJ21hc2stc2l6ZSc6IHB4LFxuICAvLyBXaWR0aCBhbmQgaGVpZ2h0IHByb3BlcnRpZXNcbiAgaGVpZ2h0OiBweCxcbiAgd2lkdGg6IHB4LFxuICAnbWluLWhlaWdodCc6IHB4LFxuICAnbWF4LWhlaWdodCc6IHB4LFxuICAnbWluLXdpZHRoJzogcHgsXG4gICdtYXgtd2lkdGgnOiBweCxcbiAgLy8gUG9zaXRpb24gcHJvcGVydGllc1xuICBib3R0b206IHB4LFxuICBsZWZ0OiBweCxcbiAgdG9wOiBweCxcbiAgcmlnaHQ6IHB4LFxuICAvLyBTaGFkb3cgcHJvcGVydGllc1xuICAnYm94LXNoYWRvdyc6IHB4LFxuICAndGV4dC1zaGFkb3cnOiBweCxcbiAgLy8gQ29sdW1uIHByb3BlcnRpZXNcbiAgJ2NvbHVtbi1nYXAnOiBweCxcbiAgJ2NvbHVtbi1ydWxlJzogcHgsXG4gICdjb2x1bW4tcnVsZS13aWR0aCc6IHB4LFxuICAnY29sdW1uLXdpZHRoJzogcHgsXG4gIC8vIEZvbnQgYW5kIHRleHQgcHJvcGVydGllc1xuICAnZm9udC1zaXplJzogcHgsXG4gICdmb250LXNpemUtZGVsdGEnOiBweCxcbiAgJ2xldHRlci1zcGFjaW5nJzogcHgsXG4gICd0ZXh0LWluZGVudCc6IHB4LFxuICAndGV4dC1zdHJva2UnOiBweCxcbiAgJ3RleHQtc3Ryb2tlLXdpZHRoJzogcHgsXG4gICd3b3JkLXNwYWNpbmcnOiBweCxcbiAgLy8gTW90aW9uIHByb3BlcnRpZXNcbiAgbW90aW9uOiBweCxcbiAgJ21vdGlvbi1vZmZzZXQnOiBweCxcbiAgLy8gT3V0bGluZSBwcm9wZXJ0aWVzXG4gIG91dGxpbmU6IHB4LFxuICAnb3V0bGluZS1vZmZzZXQnOiBweCxcbiAgJ291dGxpbmUtd2lkdGgnOiBweCxcbiAgLy8gUGVyc3BlY3RpdmUgcHJvcGVydGllc1xuICBwZXJzcGVjdGl2ZTogcHgsXG4gICdwZXJzcGVjdGl2ZS1vcmlnaW4teCc6IHBlcmNlbnQsXG4gICdwZXJzcGVjdGl2ZS1vcmlnaW4teSc6IHBlcmNlbnQsXG4gIC8vIFRyYW5zZm9ybSBwcm9wZXJ0aWVzXG4gICd0cmFuc2Zvcm0tb3JpZ2luJzogcGVyY2VudCxcbiAgJ3RyYW5zZm9ybS1vcmlnaW4teCc6IHBlcmNlbnQsXG4gICd0cmFuc2Zvcm0tb3JpZ2luLXknOiBwZXJjZW50LFxuICAndHJhbnNmb3JtLW9yaWdpbi16JzogcGVyY2VudCxcbiAgLy8gVHJhbnNpdGlvbiBwcm9wZXJ0aWVzXG4gICd0cmFuc2l0aW9uLWRlbGF5JzogbXMsXG4gICd0cmFuc2l0aW9uLWR1cmF0aW9uJzogbXMsXG4gIC8vIEFsaWdubWVudCBwcm9wZXJ0aWVzXG4gICd2ZXJ0aWNhbC1hbGlnbic6IHB4LFxuICAnZmxleC1iYXNpcyc6IHB4LFxuICAvLyBTb21lIHJhbmRvbSBwcm9wZXJ0aWVzXG4gICdzaGFwZS1tYXJnaW4nOiBweCxcbiAgc2l6ZTogcHgsXG4gIC8vIEdyaWQgcHJvcGVydGllc1xuICBncmlkOiBweCxcbiAgJ2dyaWQtZ2FwJzogcHgsXG4gICdncmlkLXJvdy1nYXAnOiBweCxcbiAgJ2dyaWQtY29sdW1uLWdhcCc6IHB4LFxuICAnZ3JpZC10ZW1wbGF0ZS1yb3dzJzogcHgsXG4gICdncmlkLXRlbXBsYXRlLWNvbHVtbnMnOiBweCxcbiAgJ2dyaWQtYXV0by1yb3dzJzogcHgsXG4gICdncmlkLWF1dG8tY29sdW1ucyc6IHB4LFxuICAvLyBOb3QgZXhpc3RpbmcgcHJvcGVydGllcy5cbiAgLy8gVXNlZCB0byBhdm9pZCBpc3N1ZXMgd2l0aCBqc3MtcGx1Z2luLWV4cGFuZCBpbnRlZ3JhdGlvbi5cbiAgJ2JveC1zaGFkb3cteCc6IHB4LFxuICAnYm94LXNoYWRvdy15JzogcHgsXG4gICdib3gtc2hhZG93LWJsdXInOiBweCxcbiAgJ2JveC1zaGFkb3ctc3ByZWFkJzogcHgsXG4gICdmb250LWxpbmUtaGVpZ2h0JzogcHgsXG4gICd0ZXh0LXNoYWRvdy14JzogcHgsXG4gICd0ZXh0LXNoYWRvdy15JzogcHgsXG4gICd0ZXh0LXNoYWRvdy1ibHVyJzogcHhcbn07XG5cbi8qKlxuICogQ2xvbmVzIHRoZSBvYmplY3QgYW5kIGFkZHMgYSBjYW1lbCBjYXNlZCBwcm9wZXJ0eSB2ZXJzaW9uLlxuICovXG5mdW5jdGlvbiBhZGRDYW1lbENhc2VkVmVyc2lvbihvYmopIHtcbiAgdmFyIHJlZ0V4cCA9IC8oLVthLXpdKS9nO1xuXG4gIHZhciByZXBsYWNlID0gZnVuY3Rpb24gcmVwbGFjZShzdHIpIHtcbiAgICByZXR1cm4gc3RyWzFdLnRvVXBwZXJDYXNlKCk7XG4gIH07XG5cbiAgdmFyIG5ld09iaiA9IHt9O1xuXG4gIGZvciAodmFyIF9rZXkgaW4gb2JqKSB7XG4gICAgbmV3T2JqW19rZXldID0gb2JqW19rZXldO1xuICAgIG5ld09ialtfa2V5LnJlcGxhY2UocmVnRXhwLCByZXBsYWNlKV0gPSBvYmpbX2tleV07XG4gIH1cblxuICByZXR1cm4gbmV3T2JqO1xufVxuXG52YXIgdW5pdHMgPSBhZGRDYW1lbENhc2VkVmVyc2lvbihkZWZhdWx0VW5pdHMpO1xuLyoqXG4gKiBSZWN1cnNpdmUgZGVlcCBzdHlsZSBwYXNzaW5nIGZ1bmN0aW9uXG4gKi9cblxuZnVuY3Rpb24gaXRlcmF0ZShwcm9wLCB2YWx1ZSwgb3B0aW9ucykge1xuICBpZiAoIXZhbHVlKSByZXR1cm4gdmFsdWU7XG5cbiAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB2YWx1ZS5sZW5ndGg7IGkrKykge1xuICAgICAgdmFsdWVbaV0gPSBpdGVyYXRlKHByb3AsIHZhbHVlW2ldLCBvcHRpb25zKTtcbiAgICB9XG4gIH0gZWxzZSBpZiAodHlwZW9mIHZhbHVlID09PSAnb2JqZWN0Jykge1xuICAgIGlmIChwcm9wID09PSAnZmFsbGJhY2tzJykge1xuICAgICAgZm9yICh2YXIgaW5uZXJQcm9wIGluIHZhbHVlKSB7XG4gICAgICAgIHZhbHVlW2lubmVyUHJvcF0gPSBpdGVyYXRlKGlubmVyUHJvcCwgdmFsdWVbaW5uZXJQcm9wXSwgb3B0aW9ucyk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGZvciAodmFyIF9pbm5lclByb3AgaW4gdmFsdWUpIHtcbiAgICAgICAgdmFsdWVbX2lubmVyUHJvcF0gPSBpdGVyYXRlKHByb3AgKyBcIi1cIiArIF9pbm5lclByb3AsIHZhbHVlW19pbm5lclByb3BdLCBvcHRpb25zKTtcbiAgICAgIH1cbiAgICB9XG4gIH0gZWxzZSBpZiAodHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJykge1xuICAgIHZhciB1bml0ID0gb3B0aW9uc1twcm9wXSB8fCB1bml0c1twcm9wXTtcblxuICAgIGlmICh1bml0KSB7XG4gICAgICByZXR1cm4gdHlwZW9mIHVuaXQgPT09ICdmdW5jdGlvbicgPyB1bml0KHZhbHVlKS50b1N0cmluZygpIDogXCJcIiArIHZhbHVlICsgdW5pdDtcbiAgICB9XG5cbiAgICByZXR1cm4gdmFsdWUudG9TdHJpbmcoKTtcbiAgfVxuXG4gIHJldHVybiB2YWx1ZTtcbn1cbi8qKlxuICogQWRkIHVuaXQgdG8gbnVtZXJpYyB2YWx1ZXMuXG4gKi9cblxuXG5mdW5jdGlvbiBkZWZhdWx0VW5pdChvcHRpb25zKSB7XG4gIGlmIChvcHRpb25zID09PSB2b2lkIDApIHtcbiAgICBvcHRpb25zID0ge307XG4gIH1cblxuICB2YXIgY2FtZWxDYXNlZE9wdGlvbnMgPSBhZGRDYW1lbENhc2VkVmVyc2lvbihvcHRpb25zKTtcblxuICBmdW5jdGlvbiBvblByb2Nlc3NTdHlsZShzdHlsZSwgcnVsZSkge1xuICAgIGlmIChydWxlLnR5cGUgIT09ICdzdHlsZScpIHJldHVybiBzdHlsZTtcblxuICAgIGZvciAodmFyIHByb3AgaW4gc3R5bGUpIHtcbiAgICAgIHN0eWxlW3Byb3BdID0gaXRlcmF0ZShwcm9wLCBzdHlsZVtwcm9wXSwgY2FtZWxDYXNlZE9wdGlvbnMpO1xuICAgIH1cblxuICAgIHJldHVybiBzdHlsZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIG9uQ2hhbmdlVmFsdWUodmFsdWUsIHByb3ApIHtcbiAgICByZXR1cm4gaXRlcmF0ZShwcm9wLCB2YWx1ZSwgY2FtZWxDYXNlZE9wdGlvbnMpO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBvblByb2Nlc3NTdHlsZTogb25Qcm9jZXNzU3R5bGUsXG4gICAgb25DaGFuZ2VWYWx1ZTogb25DaGFuZ2VWYWx1ZVxuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBkZWZhdWx0VW5pdDtcbiIsImltcG9ydCBpc0luQnJvd3NlciBmcm9tICdpcy1pbi1icm93c2VyJztcbmltcG9ydCBfdG9Db25zdW1hYmxlQXJyYXkgZnJvbSAnQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vdG9Db25zdW1hYmxlQXJyYXknO1xuXG4vLyBFeHBvcnQgamF2YXNjcmlwdCBzdHlsZSBhbmQgY3NzIHN0eWxlIHZlbmRvciBwcmVmaXhlcy5cbnZhciBqcyA9ICcnO1xudmFyIGNzcyA9ICcnO1xudmFyIHZlbmRvciA9ICcnO1xudmFyIGJyb3dzZXIgPSAnJztcbnZhciBpc1RvdWNoID0gaXNJbkJyb3dzZXIgJiYgJ29udG91Y2hzdGFydCcgaW4gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50OyAvLyBXZSBzaG91bGQgbm90IGRvIGFueXRoaW5nIGlmIHJlcXVpcmVkIHNlcnZlcnNpZGUuXG5cbmlmIChpc0luQnJvd3Nlcikge1xuICAvLyBPcmRlciBtYXR0ZXJzLiBXZSBuZWVkIHRvIGNoZWNrIFdlYmtpdCB0aGUgbGFzdCBvbmUgYmVjYXVzZVxuICAvLyBvdGhlciB2ZW5kb3JzIHVzZSB0byBhZGQgV2Via2l0IHByZWZpeGVzIHRvIHNvbWUgcHJvcGVydGllc1xuICB2YXIganNDc3NNYXAgPSB7XG4gICAgTW96OiAnLW1vei0nLFxuICAgIG1zOiAnLW1zLScsXG4gICAgTzogJy1vLScsXG4gICAgV2Via2l0OiAnLXdlYmtpdC0nXG4gIH07XG5cbiAgdmFyIF9kb2N1bWVudCRjcmVhdGVFbGVtZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3AnKSxcbiAgICAgIHN0eWxlID0gX2RvY3VtZW50JGNyZWF0ZUVsZW1lLnN0eWxlO1xuXG4gIHZhciB0ZXN0UHJvcCA9ICdUcmFuc2Zvcm0nO1xuXG4gIGZvciAodmFyIGtleSBpbiBqc0Nzc01hcCkge1xuICAgIGlmIChrZXkgKyB0ZXN0UHJvcCBpbiBzdHlsZSkge1xuICAgICAganMgPSBrZXk7XG4gICAgICBjc3MgPSBqc0Nzc01hcFtrZXldO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9IC8vIENvcnJlY3RseSBkZXRlY3QgdGhlIEVkZ2UgYnJvd3Nlci5cblxuXG4gIGlmIChqcyA9PT0gJ1dlYmtpdCcgJiYgJ21zSHlwaGVucycgaW4gc3R5bGUpIHtcbiAgICBqcyA9ICdtcyc7XG4gICAgY3NzID0ganNDc3NNYXAubXM7XG4gICAgYnJvd3NlciA9ICdlZGdlJztcbiAgfSAvLyBDb3JyZWN0bHkgZGV0ZWN0IHRoZSBTYWZhcmkgYnJvd3Nlci5cblxuXG4gIGlmIChqcyA9PT0gJ1dlYmtpdCcgJiYgJy1hcHBsZS10cmFpbGluZy13b3JkJyBpbiBzdHlsZSkge1xuICAgIHZlbmRvciA9ICdhcHBsZSc7XG4gIH1cbn1cbi8qKlxuICogVmVuZG9yIHByZWZpeCBzdHJpbmcgZm9yIHRoZSBjdXJyZW50IGJyb3dzZXIuXG4gKlxuICogQHR5cGUge3tqczogU3RyaW5nLCBjc3M6IFN0cmluZywgdmVuZG9yOiBTdHJpbmcsIGJyb3dzZXI6IFN0cmluZ319XG4gKiBAYXBpIHB1YmxpY1xuICovXG5cblxudmFyIHByZWZpeCA9IHtcbiAganM6IGpzLFxuICBjc3M6IGNzcyxcbiAgdmVuZG9yOiB2ZW5kb3IsXG4gIGJyb3dzZXI6IGJyb3dzZXIsXG4gIGlzVG91Y2g6IGlzVG91Y2hcbn07XG5cbi8qKlxuICogVGVzdCBpZiBhIGtleWZyYW1lIGF0LXJ1bGUgc2hvdWxkIGJlIHByZWZpeGVkIG9yIG5vdFxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSB2ZW5kb3IgcHJlZml4IHN0cmluZyBmb3IgdGhlIGN1cnJlbnQgYnJvd3Nlci5cbiAqIEByZXR1cm4ge1N0cmluZ31cbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZnVuY3Rpb24gc3VwcG9ydGVkS2V5ZnJhbWVzKGtleSkge1xuICAvLyBLZXlmcmFtZXMgaXMgYWxyZWFkeSBwcmVmaXhlZC4gZS5nLiBrZXkgPSAnQC13ZWJraXQta2V5ZnJhbWVzIGEnXG4gIGlmIChrZXlbMV0gPT09ICctJykgcmV0dXJuIGtleTsgLy8gTm8gbmVlZCB0byBwcmVmaXggSUUvRWRnZS4gT2xkZXIgYnJvd3NlcnMgd2lsbCBpZ25vcmUgdW5zdXBwb3J0ZWQgcnVsZXMuXG4gIC8vIGh0dHBzOi8vY2FuaXVzZS5jb20vI3NlYXJjaD1rZXlmcmFtZXNcblxuICBpZiAocHJlZml4LmpzID09PSAnbXMnKSByZXR1cm4ga2V5O1xuICByZXR1cm4gXCJAXCIgKyBwcmVmaXguY3NzICsgXCJrZXlmcmFtZXNcIiArIGtleS5zdWJzdHIoMTApO1xufVxuXG4vLyBodHRwczovL2Nhbml1c2UuY29tLyNzZWFyY2g9YXBwZWFyYW5jZVxuXG52YXIgYXBwZWFyZW5jZSA9IHtcbiAgbm9QcmVmaWxsOiBbJ2FwcGVhcmFuY2UnXSxcbiAgc3VwcG9ydGVkUHJvcGVydHk6IGZ1bmN0aW9uIHN1cHBvcnRlZFByb3BlcnR5KHByb3ApIHtcbiAgICBpZiAocHJvcCAhPT0gJ2FwcGVhcmFuY2UnKSByZXR1cm4gZmFsc2U7XG4gICAgaWYgKHByZWZpeC5qcyA9PT0gJ21zJykgcmV0dXJuIFwiLXdlYmtpdC1cIiArIHByb3A7XG4gICAgcmV0dXJuIHByZWZpeC5jc3MgKyBwcm9wO1xuICB9XG59O1xuXG4vLyBodHRwczovL2Nhbml1c2UuY29tLyNzZWFyY2g9Y29sb3ItYWRqdXN0XG5cbnZhciBjb2xvckFkanVzdCA9IHtcbiAgbm9QcmVmaWxsOiBbJ2NvbG9yLWFkanVzdCddLFxuICBzdXBwb3J0ZWRQcm9wZXJ0eTogZnVuY3Rpb24gc3VwcG9ydGVkUHJvcGVydHkocHJvcCkge1xuICAgIGlmIChwcm9wICE9PSAnY29sb3ItYWRqdXN0JykgcmV0dXJuIGZhbHNlO1xuICAgIGlmIChwcmVmaXguanMgPT09ICdXZWJraXQnKSByZXR1cm4gcHJlZml4LmNzcyArIFwicHJpbnQtXCIgKyBwcm9wO1xuICAgIHJldHVybiBwcm9wO1xuICB9XG59O1xuXG52YXIgcmVnRXhwID0gL1stXFxzXSsoLik/L2c7XG4vKipcbiAqIFJlcGxhY2VzIHRoZSBsZXR0ZXIgd2l0aCB0aGUgY2FwaXRhbCBsZXR0ZXJcbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gbWF0Y2hcbiAqIEBwYXJhbSB7U3RyaW5nfSBjXG4gKiBAcmV0dXJuIHtTdHJpbmd9XG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiB0b1VwcGVyKG1hdGNoLCBjKSB7XG4gIHJldHVybiBjID8gYy50b1VwcGVyQ2FzZSgpIDogJyc7XG59XG4vKipcbiAqIENvbnZlcnQgZGFzaCBzZXBhcmF0ZWQgc3RyaW5ncyB0byBjYW1lbC1jYXNlZC5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gc3RyXG4gKiBAcmV0dXJuIHtTdHJpbmd9XG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5cbmZ1bmN0aW9uIGNhbWVsaXplKHN0cikge1xuICByZXR1cm4gc3RyLnJlcGxhY2UocmVnRXhwLCB0b1VwcGVyKTtcbn1cblxuLyoqXG4gKiBDb252ZXJ0IGRhc2ggc2VwYXJhdGVkIHN0cmluZ3MgdG8gcGFzY2FsIGNhc2VkLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBzdHJcbiAqIEByZXR1cm4ge1N0cmluZ31cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIHBhc2NhbGl6ZShzdHIpIHtcbiAgcmV0dXJuIGNhbWVsaXplKFwiLVwiICsgc3RyKTtcbn1cblxuLy8gYnV0IHdlIGNhbiB1c2UgYSBsb25naGFuZCBwcm9wZXJ0eSBpbnN0ZWFkLlxuLy8gaHR0cHM6Ly9jYW5pdXNlLmNvbS8jc2VhcmNoPW1hc2tcblxudmFyIG1hc2sgPSB7XG4gIG5vUHJlZmlsbDogWydtYXNrJ10sXG4gIHN1cHBvcnRlZFByb3BlcnR5OiBmdW5jdGlvbiBzdXBwb3J0ZWRQcm9wZXJ0eShwcm9wLCBzdHlsZSkge1xuICAgIGlmICghL15tYXNrLy50ZXN0KHByb3ApKSByZXR1cm4gZmFsc2U7XG5cbiAgICBpZiAocHJlZml4LmpzID09PSAnV2Via2l0Jykge1xuICAgICAgdmFyIGxvbmdoYW5kID0gJ21hc2staW1hZ2UnO1xuXG4gICAgICBpZiAoY2FtZWxpemUobG9uZ2hhbmQpIGluIHN0eWxlKSB7XG4gICAgICAgIHJldHVybiBwcm9wO1xuICAgICAgfVxuXG4gICAgICBpZiAocHJlZml4LmpzICsgcGFzY2FsaXplKGxvbmdoYW5kKSBpbiBzdHlsZSkge1xuICAgICAgICByZXR1cm4gcHJlZml4LmNzcyArIHByb3A7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHByb3A7XG4gIH1cbn07XG5cbi8vIGh0dHBzOi8vY2FuaXVzZS5jb20vI3NlYXJjaD10ZXh0LW9yaWVudGF0aW9uXG5cbnZhciB0ZXh0T3JpZW50YXRpb24gPSB7XG4gIG5vUHJlZmlsbDogWyd0ZXh0LW9yaWVudGF0aW9uJ10sXG4gIHN1cHBvcnRlZFByb3BlcnR5OiBmdW5jdGlvbiBzdXBwb3J0ZWRQcm9wZXJ0eShwcm9wKSB7XG4gICAgaWYgKHByb3AgIT09ICd0ZXh0LW9yaWVudGF0aW9uJykgcmV0dXJuIGZhbHNlO1xuXG4gICAgaWYgKHByZWZpeC52ZW5kb3IgPT09ICdhcHBsZScgJiYgIXByZWZpeC5pc1RvdWNoKSB7XG4gICAgICByZXR1cm4gcHJlZml4LmNzcyArIHByb3A7XG4gICAgfVxuXG4gICAgcmV0dXJuIHByb3A7XG4gIH1cbn07XG5cbi8vIGh0dHBzOi8vY2FuaXVzZS5jb20vI3NlYXJjaD10cmFuc2Zvcm1cblxudmFyIHRyYW5zZm9ybSA9IHtcbiAgbm9QcmVmaWxsOiBbJ3RyYW5zZm9ybSddLFxuICBzdXBwb3J0ZWRQcm9wZXJ0eTogZnVuY3Rpb24gc3VwcG9ydGVkUHJvcGVydHkocHJvcCwgc3R5bGUsIG9wdGlvbnMpIHtcbiAgICBpZiAocHJvcCAhPT0gJ3RyYW5zZm9ybScpIHJldHVybiBmYWxzZTtcblxuICAgIGlmIChvcHRpb25zLnRyYW5zZm9ybSkge1xuICAgICAgcmV0dXJuIHByb3A7XG4gICAgfVxuXG4gICAgcmV0dXJuIHByZWZpeC5jc3MgKyBwcm9wO1xuICB9XG59O1xuXG4vLyBodHRwczovL2Nhbml1c2UuY29tLyNzZWFyY2g9dHJhbnNpdGlvblxuXG52YXIgdHJhbnNpdGlvbiA9IHtcbiAgbm9QcmVmaWxsOiBbJ3RyYW5zaXRpb24nXSxcbiAgc3VwcG9ydGVkUHJvcGVydHk6IGZ1bmN0aW9uIHN1cHBvcnRlZFByb3BlcnR5KHByb3AsIHN0eWxlLCBvcHRpb25zKSB7XG4gICAgaWYgKHByb3AgIT09ICd0cmFuc2l0aW9uJykgcmV0dXJuIGZhbHNlO1xuXG4gICAgaWYgKG9wdGlvbnMudHJhbnNpdGlvbikge1xuICAgICAgcmV0dXJuIHByb3A7XG4gICAgfVxuXG4gICAgcmV0dXJuIHByZWZpeC5jc3MgKyBwcm9wO1xuICB9XG59O1xuXG4vLyBodHRwczovL2Nhbml1c2UuY29tLyNzZWFyY2g9d3JpdGluZy1tb2RlXG5cbnZhciB3cml0aW5nTW9kZSA9IHtcbiAgbm9QcmVmaWxsOiBbJ3dyaXRpbmctbW9kZSddLFxuICBzdXBwb3J0ZWRQcm9wZXJ0eTogZnVuY3Rpb24gc3VwcG9ydGVkUHJvcGVydHkocHJvcCkge1xuICAgIGlmIChwcm9wICE9PSAnd3JpdGluZy1tb2RlJykgcmV0dXJuIGZhbHNlO1xuXG4gICAgaWYgKHByZWZpeC5qcyA9PT0gJ1dlYmtpdCcgfHwgcHJlZml4LmpzID09PSAnbXMnICYmIHByZWZpeC5icm93c2VyICE9PSAnZWRnZScpIHtcbiAgICAgIHJldHVybiBwcmVmaXguY3NzICsgcHJvcDtcbiAgICB9XG5cbiAgICByZXR1cm4gcHJvcDtcbiAgfVxufTtcblxuLy8gaHR0cHM6Ly9jYW5pdXNlLmNvbS8jc2VhcmNoPXVzZXItc2VsZWN0XG5cbnZhciB1c2VyU2VsZWN0ID0ge1xuICBub1ByZWZpbGw6IFsndXNlci1zZWxlY3QnXSxcbiAgc3VwcG9ydGVkUHJvcGVydHk6IGZ1bmN0aW9uIHN1cHBvcnRlZFByb3BlcnR5KHByb3ApIHtcbiAgICBpZiAocHJvcCAhPT0gJ3VzZXItc2VsZWN0JykgcmV0dXJuIGZhbHNlO1xuXG4gICAgaWYgKHByZWZpeC5qcyA9PT0gJ01veicgfHwgcHJlZml4LmpzID09PSAnbXMnIHx8IHByZWZpeC52ZW5kb3IgPT09ICdhcHBsZScpIHtcbiAgICAgIHJldHVybiBwcmVmaXguY3NzICsgcHJvcDtcbiAgICB9XG5cbiAgICByZXR1cm4gcHJvcDtcbiAgfVxufTtcblxuLy8gaHR0cHM6Ly9jYW5pdXNlLmNvbS8jc2VhcmNoPW11bHRpY29sdW1uXG4vLyBodHRwczovL2dpdGh1Yi5jb20vcG9zdGNzcy9hdXRvcHJlZml4ZXIvaXNzdWVzLzQ5MVxuLy8gaHR0cHM6Ly9naXRodWIuY29tL3Bvc3Rjc3MvYXV0b3ByZWZpeGVyL2lzc3Vlcy8xNzdcblxudmFyIGJyZWFrUHJvcHNPbGQgPSB7XG4gIHN1cHBvcnRlZFByb3BlcnR5OiBmdW5jdGlvbiBzdXBwb3J0ZWRQcm9wZXJ0eShwcm9wLCBzdHlsZSkge1xuICAgIGlmICghL15icmVhay0vLnRlc3QocHJvcCkpIHJldHVybiBmYWxzZTtcblxuICAgIGlmIChwcmVmaXguanMgPT09ICdXZWJraXQnKSB7XG4gICAgICB2YXIganNQcm9wID0gXCJXZWJraXRDb2x1bW5cIiArIHBhc2NhbGl6ZShwcm9wKTtcbiAgICAgIHJldHVybiBqc1Byb3AgaW4gc3R5bGUgPyBwcmVmaXguY3NzICsgXCJjb2x1bW4tXCIgKyBwcm9wIDogZmFsc2U7XG4gICAgfVxuXG4gICAgaWYgKHByZWZpeC5qcyA9PT0gJ01veicpIHtcbiAgICAgIHZhciBfanNQcm9wID0gXCJwYWdlXCIgKyBwYXNjYWxpemUocHJvcCk7XG5cbiAgICAgIHJldHVybiBfanNQcm9wIGluIHN0eWxlID8gXCJwYWdlLVwiICsgcHJvcCA6IGZhbHNlO1xuICAgIH1cblxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxufTtcblxuLy8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9wb3N0Y3NzL2F1dG9wcmVmaXhlci9pc3N1ZXMvMzI0LlxuXG52YXIgaW5saW5lTG9naWNhbE9sZCA9IHtcbiAgc3VwcG9ydGVkUHJvcGVydHk6IGZ1bmN0aW9uIHN1cHBvcnRlZFByb3BlcnR5KHByb3AsIHN0eWxlKSB7XG4gICAgaWYgKCEvXihib3JkZXJ8bWFyZ2lufHBhZGRpbmcpLWlubGluZS8udGVzdChwcm9wKSkgcmV0dXJuIGZhbHNlO1xuICAgIGlmIChwcmVmaXguanMgPT09ICdNb3onKSByZXR1cm4gcHJvcDtcbiAgICB2YXIgbmV3UHJvcCA9IHByb3AucmVwbGFjZSgnLWlubGluZScsICcnKTtcbiAgICByZXR1cm4gcHJlZml4LmpzICsgcGFzY2FsaXplKG5ld1Byb3ApIGluIHN0eWxlID8gcHJlZml4LmNzcyArIG5ld1Byb3AgOiBmYWxzZTtcbiAgfVxufTtcblxuLy8gQ2FtZWxpemF0aW9uIGlzIHJlcXVpcmVkIGJlY2F1c2Ugd2UgY2FuJ3QgdGVzdCB1c2luZy5cbi8vIENTUyBzeW50YXggZm9yIGUuZy4gaW4gRkYuXG5cbnZhciB1bnByZWZpeGVkID0ge1xuICBzdXBwb3J0ZWRQcm9wZXJ0eTogZnVuY3Rpb24gc3VwcG9ydGVkUHJvcGVydHkocHJvcCwgc3R5bGUpIHtcbiAgICByZXR1cm4gY2FtZWxpemUocHJvcCkgaW4gc3R5bGUgPyBwcm9wIDogZmFsc2U7XG4gIH1cbn07XG5cbnZhciBwcmVmaXhlZCA9IHtcbiAgc3VwcG9ydGVkUHJvcGVydHk6IGZ1bmN0aW9uIHN1cHBvcnRlZFByb3BlcnR5KHByb3AsIHN0eWxlKSB7XG4gICAgdmFyIHBhc2NhbGl6ZWQgPSBwYXNjYWxpemUocHJvcCk7IC8vIFJldHVybiBjdXN0b20gQ1NTIHZhcmlhYmxlIHdpdGhvdXQgcHJlZml4aW5nLlxuXG4gICAgaWYgKHByb3BbMF0gPT09ICctJykgcmV0dXJuIHByb3A7IC8vIFJldHVybiBhbHJlYWR5IHByZWZpeGVkIHZhbHVlIHdpdGhvdXQgcHJlZml4aW5nLlxuXG4gICAgaWYgKHByb3BbMF0gPT09ICctJyAmJiBwcm9wWzFdID09PSAnLScpIHJldHVybiBwcm9wO1xuICAgIGlmIChwcmVmaXguanMgKyBwYXNjYWxpemVkIGluIHN0eWxlKSByZXR1cm4gcHJlZml4LmNzcyArIHByb3A7IC8vIFRyeSB3ZWJraXQgZmFsbGJhY2suXG5cbiAgICBpZiAocHJlZml4LmpzICE9PSAnV2Via2l0JyAmJiBcIldlYmtpdFwiICsgcGFzY2FsaXplZCBpbiBzdHlsZSkgcmV0dXJuIFwiLXdlYmtpdC1cIiArIHByb3A7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG59O1xuXG4vLyBodHRwczovL2Nhbml1c2UuY29tLyNzZWFyY2g9c2Nyb2xsLXNuYXBcblxudmFyIHNjcm9sbFNuYXAgPSB7XG4gIHN1cHBvcnRlZFByb3BlcnR5OiBmdW5jdGlvbiBzdXBwb3J0ZWRQcm9wZXJ0eShwcm9wKSB7XG4gICAgaWYgKHByb3Auc3Vic3RyaW5nKDAsIDExKSAhPT0gJ3Njcm9sbC1zbmFwJykgcmV0dXJuIGZhbHNlO1xuXG4gICAgaWYgKHByZWZpeC5qcyA9PT0gJ21zJykge1xuICAgICAgcmV0dXJuIFwiXCIgKyBwcmVmaXguY3NzICsgcHJvcDtcbiAgICB9XG5cbiAgICByZXR1cm4gcHJvcDtcbiAgfVxufTtcblxuLy8gaHR0cHM6Ly9jYW5pdXNlLmNvbS8jc2VhcmNoPW92ZXJzY3JvbGwtYmVoYXZpb3JcblxudmFyIG92ZXJzY3JvbGxCZWhhdmlvciA9IHtcbiAgc3VwcG9ydGVkUHJvcGVydHk6IGZ1bmN0aW9uIHN1cHBvcnRlZFByb3BlcnR5KHByb3ApIHtcbiAgICBpZiAocHJvcCAhPT0gJ292ZXJzY3JvbGwtYmVoYXZpb3InKSByZXR1cm4gZmFsc2U7XG5cbiAgICBpZiAocHJlZml4LmpzID09PSAnbXMnKSB7XG4gICAgICByZXR1cm4gcHJlZml4LmNzcyArIFwic2Nyb2xsLWNoYWluaW5nXCI7XG4gICAgfVxuXG4gICAgcmV0dXJuIHByb3A7XG4gIH1cbn07XG5cbnZhciBwcm9wTWFwID0ge1xuICAnZmxleC1ncm93JzogJ2ZsZXgtcG9zaXRpdmUnLFxuICAnZmxleC1zaHJpbmsnOiAnZmxleC1uZWdhdGl2ZScsXG4gICdmbGV4LWJhc2lzJzogJ2ZsZXgtcHJlZmVycmVkLXNpemUnLFxuICAnanVzdGlmeS1jb250ZW50JzogJ2ZsZXgtcGFjaycsXG4gIG9yZGVyOiAnZmxleC1vcmRlcicsXG4gICdhbGlnbi1pdGVtcyc6ICdmbGV4LWFsaWduJyxcbiAgJ2FsaWduLWNvbnRlbnQnOiAnZmxleC1saW5lLXBhY2snIC8vICdhbGlnbi1zZWxmJyBpcyBoYW5kbGVkIGJ5ICdhbGlnbi1zZWxmJyBwbHVnaW4uXG5cbn07IC8vIFN1cHBvcnQgb2xkIGZsZXggc3BlYyBmcm9tIDIwMTIuXG5cbnZhciBmbGV4MjAxMiA9IHtcbiAgc3VwcG9ydGVkUHJvcGVydHk6IGZ1bmN0aW9uIHN1cHBvcnRlZFByb3BlcnR5KHByb3AsIHN0eWxlKSB7XG4gICAgdmFyIG5ld1Byb3AgPSBwcm9wTWFwW3Byb3BdO1xuICAgIGlmICghbmV3UHJvcCkgcmV0dXJuIGZhbHNlO1xuICAgIHJldHVybiBwcmVmaXguanMgKyBwYXNjYWxpemUobmV3UHJvcCkgaW4gc3R5bGUgPyBwcmVmaXguY3NzICsgbmV3UHJvcCA6IGZhbHNlO1xuICB9XG59O1xuXG52YXIgcHJvcE1hcCQxID0ge1xuICBmbGV4OiAnYm94LWZsZXgnLFxuICAnZmxleC1ncm93JzogJ2JveC1mbGV4JyxcbiAgJ2ZsZXgtZGlyZWN0aW9uJzogWydib3gtb3JpZW50JywgJ2JveC1kaXJlY3Rpb24nXSxcbiAgb3JkZXI6ICdib3gtb3JkaW5hbC1ncm91cCcsXG4gICdhbGlnbi1pdGVtcyc6ICdib3gtYWxpZ24nLFxuICAnZmxleC1mbG93JzogWydib3gtb3JpZW50JywgJ2JveC1kaXJlY3Rpb24nXSxcbiAgJ2p1c3RpZnktY29udGVudCc6ICdib3gtcGFjaydcbn07XG52YXIgcHJvcEtleXMgPSBPYmplY3Qua2V5cyhwcm9wTWFwJDEpO1xuXG52YXIgcHJlZml4Q3NzID0gZnVuY3Rpb24gcHJlZml4Q3NzKHApIHtcbiAgcmV0dXJuIHByZWZpeC5jc3MgKyBwO1xufTsgLy8gU3VwcG9ydCBvbGQgZmxleCBzcGVjIGZyb20gMjAwOS5cblxuXG52YXIgZmxleDIwMDkgPSB7XG4gIHN1cHBvcnRlZFByb3BlcnR5OiBmdW5jdGlvbiBzdXBwb3J0ZWRQcm9wZXJ0eShwcm9wLCBzdHlsZSwgX3JlZikge1xuICAgIHZhciBtdWx0aXBsZSA9IF9yZWYubXVsdGlwbGU7XG5cbiAgICBpZiAocHJvcEtleXMuaW5kZXhPZihwcm9wKSA+IC0xKSB7XG4gICAgICB2YXIgbmV3UHJvcCA9IHByb3BNYXAkMVtwcm9wXTtcblxuICAgICAgaWYgKCFBcnJheS5pc0FycmF5KG5ld1Byb3ApKSB7XG4gICAgICAgIHJldHVybiBwcmVmaXguanMgKyBwYXNjYWxpemUobmV3UHJvcCkgaW4gc3R5bGUgPyBwcmVmaXguY3NzICsgbmV3UHJvcCA6IGZhbHNlO1xuICAgICAgfVxuXG4gICAgICBpZiAoIW11bHRpcGxlKSByZXR1cm4gZmFsc2U7XG5cbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbmV3UHJvcC5sZW5ndGg7IGkrKykge1xuICAgICAgICBpZiAoIShwcmVmaXguanMgKyBwYXNjYWxpemUobmV3UHJvcFswXSkgaW4gc3R5bGUpKSB7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBuZXdQcm9wLm1hcChwcmVmaXhDc3MpO1xuICAgIH1cblxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxufTtcblxuLy8gcGx1Z2lucyA9IFtcbi8vICAgLi4ucGx1Z2lucyxcbi8vICAgIGJyZWFrUHJvcHNPbGQsXG4vLyAgICBpbmxpbmVMb2dpY2FsT2xkLFxuLy8gICAgdW5wcmVmaXhlZCxcbi8vICAgIHByZWZpeGVkLFxuLy8gICAgc2Nyb2xsU25hcCxcbi8vICAgIGZsZXgyMDEyLFxuLy8gICAgZmxleDIwMDlcbi8vIF1cbi8vIFBsdWdpbnMgd2l0aG91dCAnbm9QcmVmaWxsJyB2YWx1ZSwgZ29pbmcgbGFzdC5cbi8vICdmbGV4LSonIHBsdWdpbnMgc2hvdWxkIGJlIGF0IHRoZSBib3R0b20uXG4vLyAnZmxleDIwMDknIGdvaW5nIGFmdGVyICdmbGV4MjAxMicuXG4vLyAncHJlZml4ZWQnIGdvaW5nIGFmdGVyICd1bnByZWZpeGVkJ1xuXG52YXIgcGx1Z2lucyA9IFthcHBlYXJlbmNlLCBjb2xvckFkanVzdCwgbWFzaywgdGV4dE9yaWVudGF0aW9uLCB0cmFuc2Zvcm0sIHRyYW5zaXRpb24sIHdyaXRpbmdNb2RlLCB1c2VyU2VsZWN0LCBicmVha1Byb3BzT2xkLCBpbmxpbmVMb2dpY2FsT2xkLCB1bnByZWZpeGVkLCBwcmVmaXhlZCwgc2Nyb2xsU25hcCwgb3ZlcnNjcm9sbEJlaGF2aW9yLCBmbGV4MjAxMiwgZmxleDIwMDldO1xudmFyIHByb3BlcnR5RGV0ZWN0b3JzID0gcGx1Z2lucy5maWx0ZXIoZnVuY3Rpb24gKHApIHtcbiAgcmV0dXJuIHAuc3VwcG9ydGVkUHJvcGVydHk7XG59KS5tYXAoZnVuY3Rpb24gKHApIHtcbiAgcmV0dXJuIHAuc3VwcG9ydGVkUHJvcGVydHk7XG59KTtcbnZhciBub1ByZWZpbGwgPSBwbHVnaW5zLmZpbHRlcihmdW5jdGlvbiAocCkge1xuICByZXR1cm4gcC5ub1ByZWZpbGw7XG59KS5yZWR1Y2UoZnVuY3Rpb24gKGEsIHApIHtcbiAgYS5wdXNoLmFwcGx5KGEsIF90b0NvbnN1bWFibGVBcnJheShwLm5vUHJlZmlsbCkpO1xuICByZXR1cm4gYTtcbn0sIFtdKTtcblxudmFyIGVsO1xudmFyIGNhY2hlID0ge307XG5cbmlmIChpc0luQnJvd3Nlcikge1xuICBlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3AnKTsgLy8gV2UgdGVzdCBldmVyeSBwcm9wZXJ0eSBvbiB2ZW5kb3IgcHJlZml4IHJlcXVpcmVtZW50LlxuICAvLyBPbmNlIHRlc3RlZCwgcmVzdWx0IGlzIGNhY2hlZC4gSXQgZ2l2ZXMgdXMgdXAgdG8gNzAlIHBlcmYgYm9vc3QuXG4gIC8vIGh0dHA6Ly9qc3BlcmYuY29tL2VsZW1lbnQtc3R5bGUtb2JqZWN0LWFjY2Vzcy12cy1wbGFpbi1vYmplY3RcbiAgLy9cbiAgLy8gUHJlZmlsbCBjYWNoZSB3aXRoIGtub3duIGNzcyBwcm9wZXJ0aWVzIHRvIHJlZHVjZSBhbW91bnQgb2ZcbiAgLy8gcHJvcGVydGllcyB3ZSBuZWVkIHRvIGZlYXR1cmUgdGVzdCBhdCBydW50aW1lLlxuICAvLyBodHRwOi8vZGF2aWR3YWxzaC5uYW1lL3ZlbmRvci1wcmVmaXhcblxuICB2YXIgY29tcHV0ZWQgPSB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQsICcnKTtcblxuICBmb3IgKHZhciBrZXkkMSBpbiBjb21wdXRlZCkge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1yZXN0cmljdGVkLWdsb2JhbHNcbiAgICBpZiAoIWlzTmFOKGtleSQxKSkgY2FjaGVbY29tcHV0ZWRba2V5JDFdXSA9IGNvbXB1dGVkW2tleSQxXTtcbiAgfSAvLyBQcm9wZXJ0aWVzIHRoYXQgY2Fubm90IGJlIGNvcnJlY3RseSBkZXRlY3RlZCB1c2luZyB0aGVcbiAgLy8gY2FjaGUgcHJlZmlsbCBtZXRob2QuXG5cblxuICBub1ByZWZpbGwuZm9yRWFjaChmdW5jdGlvbiAoeCkge1xuICAgIHJldHVybiBkZWxldGUgY2FjaGVbeF07XG4gIH0pO1xufVxuLyoqXG4gKiBUZXN0IGlmIGEgcHJvcGVydHkgaXMgc3VwcG9ydGVkLCByZXR1cm5zIHN1cHBvcnRlZCBwcm9wZXJ0eSB3aXRoIHZlbmRvclxuICogcHJlZml4IGlmIHJlcXVpcmVkLiBSZXR1cm5zIGBmYWxzZWAgaWYgbm90IHN1cHBvcnRlZC5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gcHJvcCBkYXNoIHNlcGFyYXRlZFxuICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXVxuICogQHJldHVybiB7U3RyaW5nfEJvb2xlYW59XG4gKiBAYXBpIHB1YmxpY1xuICovXG5cblxuZnVuY3Rpb24gc3VwcG9ydGVkUHJvcGVydHkocHJvcCwgb3B0aW9ucykge1xuICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7XG4gICAgb3B0aW9ucyA9IHt9O1xuICB9XG5cbiAgLy8gRm9yIHNlcnZlci1zaWRlIHJlbmRlcmluZy5cbiAgaWYgKCFlbCkgcmV0dXJuIHByb3A7IC8vIFJlbW92ZSBjYWNoZSBmb3IgYmVuY2htYXJrIHRlc3RzIG9yIHJldHVybiBwcm9wZXJ0eSBmcm9tIHRoZSBjYWNoZS5cblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdiZW5jaG1hcmsnICYmIGNhY2hlW3Byb3BdICE9IG51bGwpIHtcbiAgICByZXR1cm4gY2FjaGVbcHJvcF07XG4gIH0gLy8gQ2hlY2sgaWYgJ3RyYW5zaXRpb24nIG9yICd0cmFuc2Zvcm0nIG5hdGl2ZWx5IHN1cHBvcnRlZCBpbiBicm93c2VyLlxuXG5cbiAgaWYgKHByb3AgPT09ICd0cmFuc2l0aW9uJyB8fCBwcm9wID09PSAndHJhbnNmb3JtJykge1xuICAgIG9wdGlvbnNbcHJvcF0gPSBwcm9wIGluIGVsLnN0eWxlO1xuICB9IC8vIEZpbmQgYSBwbHVnaW4gZm9yIGN1cnJlbnQgcHJlZml4IHByb3BlcnR5LlxuXG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wZXJ0eURldGVjdG9ycy5sZW5ndGg7IGkrKykge1xuICAgIGNhY2hlW3Byb3BdID0gcHJvcGVydHlEZXRlY3RvcnNbaV0ocHJvcCwgZWwuc3R5bGUsIG9wdGlvbnMpOyAvLyBCcmVhayBsb29wLCBpZiB2YWx1ZSBmb3VuZC5cblxuICAgIGlmIChjYWNoZVtwcm9wXSkgYnJlYWs7XG4gIH0gLy8gUmVzZXQgc3R5bGVzIGZvciBjdXJyZW50IHByb3BlcnR5LlxuICAvLyBGaXJlZm94IGNhbiBldmVuIHRocm93IGFuIGVycm9yIGZvciBpbnZhbGlkIHByb3BlcnRpZXMsIGUuZy4sIFwiMFwiLlxuXG5cbiAgdHJ5IHtcbiAgICBlbC5zdHlsZVtwcm9wXSA9ICcnO1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICByZXR1cm4gY2FjaGVbcHJvcF07XG59XG5cbnZhciBjYWNoZSQxID0ge307XG52YXIgdHJhbnNpdGlvblByb3BlcnRpZXMgPSB7XG4gIHRyYW5zaXRpb246IDEsXG4gICd0cmFuc2l0aW9uLXByb3BlcnR5JzogMSxcbiAgJy13ZWJraXQtdHJhbnNpdGlvbic6IDEsXG4gICctd2Via2l0LXRyYW5zaXRpb24tcHJvcGVydHknOiAxXG59O1xudmFyIHRyYW5zUHJvcHNSZWdFeHAgPSAvKF5cXHMqW1xcdy1dKyl8LCAoXFxzKltcXHctXSspKD8hW14oKV0qXFwpKS9nO1xudmFyIGVsJDE7XG4vKipcbiAqIFJldHVybnMgcHJlZml4ZWQgdmFsdWUgdHJhbnNpdGlvbi90cmFuc2Zvcm0gaWYgbmVlZGVkLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBtYXRjaFxuICogQHBhcmFtIHtTdHJpbmd9IHAxXG4gKiBAcGFyYW0ge1N0cmluZ30gcDJcbiAqIEByZXR1cm4ge1N0cmluZ31cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIHByZWZpeFRyYW5zaXRpb25DYWxsYmFjayhtYXRjaCwgcDEsIHAyKSB7XG4gIGlmIChwMSA9PT0gJ3ZhcicpIHJldHVybiAndmFyJztcbiAgaWYgKHAxID09PSAnYWxsJykgcmV0dXJuICdhbGwnO1xuICBpZiAocDIgPT09ICdhbGwnKSByZXR1cm4gJywgYWxsJztcbiAgdmFyIHByZWZpeGVkVmFsdWUgPSBwMSA/IHN1cHBvcnRlZFByb3BlcnR5KHAxKSA6IFwiLCBcIiArIHN1cHBvcnRlZFByb3BlcnR5KHAyKTtcbiAgaWYgKCFwcmVmaXhlZFZhbHVlKSByZXR1cm4gcDEgfHwgcDI7XG4gIHJldHVybiBwcmVmaXhlZFZhbHVlO1xufVxuXG5pZiAoaXNJbkJyb3dzZXIpIGVsJDEgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdwJyk7XG4vKipcbiAqIFJldHVybnMgcHJlZml4ZWQgdmFsdWUgaWYgbmVlZGVkLiBSZXR1cm5zIGBmYWxzZWAgaWYgdmFsdWUgaXMgbm90IHN1cHBvcnRlZC5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gcHJvcGVydHlcbiAqIEBwYXJhbSB7U3RyaW5nfSB2YWx1ZVxuICogQHJldHVybiB7U3RyaW5nfEJvb2xlYW59XG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmZ1bmN0aW9uIHN1cHBvcnRlZFZhbHVlKHByb3BlcnR5LCB2YWx1ZSkge1xuICAvLyBGb3Igc2VydmVyLXNpZGUgcmVuZGVyaW5nLlxuICB2YXIgcHJlZml4ZWRWYWx1ZSA9IHZhbHVlO1xuICBpZiAoIWVsJDEgfHwgcHJvcGVydHkgPT09ICdjb250ZW50JykgcmV0dXJuIHZhbHVlOyAvLyBJdCBpcyBhIHN0cmluZyBvciBhIG51bWJlciBhcyBhIHN0cmluZyBsaWtlICcxJy5cbiAgLy8gV2Ugd2FudCBvbmx5IHByZWZpeGFibGUgdmFsdWVzIGhlcmUuXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1yZXN0cmljdGVkLWdsb2JhbHNcblxuICBpZiAodHlwZW9mIHByZWZpeGVkVmFsdWUgIT09ICdzdHJpbmcnIHx8ICFpc05hTihwYXJzZUludChwcmVmaXhlZFZhbHVlLCAxMCkpKSB7XG4gICAgcmV0dXJuIHByZWZpeGVkVmFsdWU7XG4gIH0gLy8gQ3JlYXRlIGNhY2hlIGtleSBmb3IgY3VycmVudCB2YWx1ZS5cblxuXG4gIHZhciBjYWNoZUtleSA9IHByb3BlcnR5ICsgcHJlZml4ZWRWYWx1ZTsgLy8gUmVtb3ZlIGNhY2hlIGZvciBiZW5jaG1hcmsgdGVzdHMgb3IgcmV0dXJuIHZhbHVlIGZyb20gY2FjaGUuXG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAnYmVuY2htYXJrJyAmJiBjYWNoZSQxW2NhY2hlS2V5XSAhPSBudWxsKSB7XG4gICAgcmV0dXJuIGNhY2hlJDFbY2FjaGVLZXldO1xuICB9IC8vIElFIGNhbiBldmVuIHRocm93IGFuIGVycm9yIGluIHNvbWUgY2FzZXMsIGZvciBlLmcuIHN0eWxlLmNvbnRlbnQgPSAnYmFyJy5cblxuXG4gIHRyeSB7XG4gICAgLy8gVGVzdCB2YWx1ZSBhcyBpdCBpcy5cbiAgICBlbCQxLnN0eWxlW3Byb3BlcnR5XSA9IHByZWZpeGVkVmFsdWU7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIC8vIFJldHVybiBmYWxzZSBpZiB2YWx1ZSBub3Qgc3VwcG9ydGVkLlxuICAgIGNhY2hlJDFbY2FjaGVLZXldID0gZmFsc2U7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9IC8vIElmICd0cmFuc2l0aW9uJyBvciAndHJhbnNpdGlvbi1wcm9wZXJ0eScgcHJvcGVydHkuXG5cblxuICBpZiAodHJhbnNpdGlvblByb3BlcnRpZXNbcHJvcGVydHldKSB7XG4gICAgcHJlZml4ZWRWYWx1ZSA9IHByZWZpeGVkVmFsdWUucmVwbGFjZSh0cmFuc1Byb3BzUmVnRXhwLCBwcmVmaXhUcmFuc2l0aW9uQ2FsbGJhY2spO1xuICB9IGVsc2UgaWYgKGVsJDEuc3R5bGVbcHJvcGVydHldID09PSAnJykge1xuICAgIC8vIFZhbHVlIHdpdGggYSB2ZW5kb3IgcHJlZml4LlxuICAgIHByZWZpeGVkVmFsdWUgPSBwcmVmaXguY3NzICsgcHJlZml4ZWRWYWx1ZTsgLy8gSGFyZGNvZGUgdGVzdCB0byBjb252ZXJ0IFwiZmxleFwiIHRvIFwiLW1zLWZsZXhib3hcIiBmb3IgSUUxMC5cblxuICAgIGlmIChwcmVmaXhlZFZhbHVlID09PSAnLW1zLWZsZXgnKSBlbCQxLnN0eWxlW3Byb3BlcnR5XSA9ICctbXMtZmxleGJveCc7IC8vIFRlc3QgcHJlZml4ZWQgdmFsdWUuXG5cbiAgICBlbCQxLnN0eWxlW3Byb3BlcnR5XSA9IHByZWZpeGVkVmFsdWU7IC8vIFJldHVybiBmYWxzZSBpZiB2YWx1ZSBub3Qgc3VwcG9ydGVkLlxuXG4gICAgaWYgKGVsJDEuc3R5bGVbcHJvcGVydHldID09PSAnJykge1xuICAgICAgY2FjaGUkMVtjYWNoZUtleV0gPSBmYWxzZTtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH0gLy8gUmVzZXQgc3R5bGVzIGZvciBjdXJyZW50IHByb3BlcnR5LlxuXG5cbiAgZWwkMS5zdHlsZVtwcm9wZXJ0eV0gPSAnJzsgLy8gV3JpdGUgY3VycmVudCB2YWx1ZSB0byBjYWNoZS5cblxuICBjYWNoZSQxW2NhY2hlS2V5XSA9IHByZWZpeGVkVmFsdWU7XG4gIHJldHVybiBjYWNoZSQxW2NhY2hlS2V5XTtcbn1cblxuZXhwb3J0IHsgcHJlZml4LCBzdXBwb3J0ZWRLZXlmcmFtZXMsIHN1cHBvcnRlZFByb3BlcnR5LCBzdXBwb3J0ZWRWYWx1ZSB9O1xuIiwiaW1wb3J0IHsgc3VwcG9ydGVkS2V5ZnJhbWVzLCBzdXBwb3J0ZWRWYWx1ZSwgc3VwcG9ydGVkUHJvcGVydHkgfSBmcm9tICdjc3MtdmVuZG9yJztcbmltcG9ydCB7IHRvQ3NzVmFsdWUgfSBmcm9tICdqc3MnO1xuXG4vKipcbiAqIEFkZCB2ZW5kb3IgcHJlZml4IHRvIGEgcHJvcGVydHkgbmFtZSB3aGVuIG5lZWRlZC5cbiAqXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmZ1bmN0aW9uIGpzc1ZlbmRvclByZWZpeGVyKCkge1xuICBmdW5jdGlvbiBvblByb2Nlc3NSdWxlKHJ1bGUpIHtcbiAgICBpZiAocnVsZS50eXBlID09PSAna2V5ZnJhbWVzJykge1xuICAgICAgdmFyIGF0UnVsZSA9IHJ1bGU7XG4gICAgICBhdFJ1bGUuYXQgPSBzdXBwb3J0ZWRLZXlmcmFtZXMoYXRSdWxlLmF0KTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBwcmVmaXhTdHlsZShzdHlsZSkge1xuICAgIGZvciAodmFyIHByb3AgaW4gc3R5bGUpIHtcbiAgICAgIHZhciB2YWx1ZSA9IHN0eWxlW3Byb3BdO1xuXG4gICAgICBpZiAocHJvcCA9PT0gJ2ZhbGxiYWNrcycgJiYgQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgICAgc3R5bGVbcHJvcF0gPSB2YWx1ZS5tYXAocHJlZml4U3R5bGUpO1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgdmFyIGNoYW5nZVByb3AgPSBmYWxzZTtcbiAgICAgIHZhciBzdXBwb3J0ZWRQcm9wID0gc3VwcG9ydGVkUHJvcGVydHkocHJvcCk7XG4gICAgICBpZiAoc3VwcG9ydGVkUHJvcCAmJiBzdXBwb3J0ZWRQcm9wICE9PSBwcm9wKSBjaGFuZ2VQcm9wID0gdHJ1ZTtcbiAgICAgIHZhciBjaGFuZ2VWYWx1ZSA9IGZhbHNlO1xuICAgICAgdmFyIHN1cHBvcnRlZFZhbHVlJDEgPSBzdXBwb3J0ZWRWYWx1ZShzdXBwb3J0ZWRQcm9wLCB0b0Nzc1ZhbHVlKHZhbHVlKSk7XG4gICAgICBpZiAoc3VwcG9ydGVkVmFsdWUkMSAmJiBzdXBwb3J0ZWRWYWx1ZSQxICE9PSB2YWx1ZSkgY2hhbmdlVmFsdWUgPSB0cnVlO1xuXG4gICAgICBpZiAoY2hhbmdlUHJvcCB8fCBjaGFuZ2VWYWx1ZSkge1xuICAgICAgICBpZiAoY2hhbmdlUHJvcCkgZGVsZXRlIHN0eWxlW3Byb3BdO1xuICAgICAgICBzdHlsZVtzdXBwb3J0ZWRQcm9wIHx8IHByb3BdID0gc3VwcG9ydGVkVmFsdWUkMSB8fCB2YWx1ZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gc3R5bGU7XG4gIH1cblxuICBmdW5jdGlvbiBvblByb2Nlc3NTdHlsZShzdHlsZSwgcnVsZSkge1xuICAgIGlmIChydWxlLnR5cGUgIT09ICdzdHlsZScpIHJldHVybiBzdHlsZTtcbiAgICByZXR1cm4gcHJlZml4U3R5bGUoc3R5bGUpO1xuICB9XG5cbiAgZnVuY3Rpb24gb25DaGFuZ2VWYWx1ZSh2YWx1ZSwgcHJvcCkge1xuICAgIHJldHVybiBzdXBwb3J0ZWRWYWx1ZShwcm9wLCB0b0Nzc1ZhbHVlKHZhbHVlKSkgfHwgdmFsdWU7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIG9uUHJvY2Vzc1J1bGU6IG9uUHJvY2Vzc1J1bGUsXG4gICAgb25Qcm9jZXNzU3R5bGU6IG9uUHJvY2Vzc1N0eWxlLFxuICAgIG9uQ2hhbmdlVmFsdWU6IG9uQ2hhbmdlVmFsdWVcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQganNzVmVuZG9yUHJlZml4ZXI7XG4iLCIvKipcbiAqIFNvcnQgcHJvcHMgYnkgbGVuZ3RoLlxuICovXG5mdW5jdGlvbiBqc3NQcm9wc1NvcnQoKSB7XG4gIHZhciBzb3J0ID0gZnVuY3Rpb24gc29ydChwcm9wMCwgcHJvcDEpIHtcbiAgICBpZiAocHJvcDAubGVuZ3RoID09PSBwcm9wMS5sZW5ndGgpIHtcbiAgICAgIHJldHVybiBwcm9wMCA+IHByb3AxID8gMSA6IC0xO1xuICAgIH1cblxuICAgIHJldHVybiBwcm9wMC5sZW5ndGggLSBwcm9wMS5sZW5ndGg7XG4gIH07XG5cbiAgcmV0dXJuIHtcbiAgICBvblByb2Nlc3NTdHlsZTogZnVuY3Rpb24gb25Qcm9jZXNzU3R5bGUoc3R5bGUsIHJ1bGUpIHtcbiAgICAgIGlmIChydWxlLnR5cGUgIT09ICdzdHlsZScpIHJldHVybiBzdHlsZTtcbiAgICAgIHZhciBuZXdTdHlsZSA9IHt9O1xuICAgICAgdmFyIHByb3BzID0gT2JqZWN0LmtleXMoc3R5bGUpLnNvcnQoc29ydCk7XG5cbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgbmV3U3R5bGVbcHJvcHNbaV1dID0gc3R5bGVbcHJvcHNbaV1dO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gbmV3U3R5bGU7XG4gICAgfVxuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBqc3NQcm9wc1NvcnQ7XG4iLCJpbXBvcnQgZnVuY3Rpb25zIGZyb20gJ2pzcy1wbHVnaW4tcnVsZS12YWx1ZS1mdW5jdGlvbic7XG5pbXBvcnQgZ2xvYmFsIGZyb20gJ2pzcy1wbHVnaW4tZ2xvYmFsJztcbmltcG9ydCBuZXN0ZWQgZnJvbSAnanNzLXBsdWdpbi1uZXN0ZWQnO1xuaW1wb3J0IGNhbWVsQ2FzZSBmcm9tICdqc3MtcGx1Z2luLWNhbWVsLWNhc2UnO1xuaW1wb3J0IGRlZmF1bHRVbml0IGZyb20gJ2pzcy1wbHVnaW4tZGVmYXVsdC11bml0JztcbmltcG9ydCB2ZW5kb3JQcmVmaXhlciBmcm9tICdqc3MtcGx1Z2luLXZlbmRvci1wcmVmaXhlcic7XG5pbXBvcnQgcHJvcHNTb3J0IGZyb20gJ2pzcy1wbHVnaW4tcHJvcHMtc29ydCc7IC8vIFN1YnNldCBvZiBqc3MtcHJlc2V0LWRlZmF1bHQgd2l0aCBvbmx5IHRoZSBwbHVnaW5zIHRoZSBNYXRlcmlhbC1VSSBjb21wb25lbnRzIGFyZSB1c2luZy5cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24ganNzUHJlc2V0KCkge1xuICByZXR1cm4ge1xuICAgIHBsdWdpbnM6IFtmdW5jdGlvbnMoKSwgZ2xvYmFsKCksIG5lc3RlZCgpLCBjYW1lbENhc2UoKSwgZGVmYXVsdFVuaXQoKSwgLy8gRGlzYWJsZSB0aGUgdmVuZG9yIHByZWZpeGVyIHNlcnZlci1zaWRlLCBpdCBkb2VzIG5vdGhpbmcuXG4gICAgLy8gVGhpcyB3YXksIHdlIGNhbiBnZXQgYSBwZXJmb3JtYW5jZSBib29zdC5cbiAgICAvLyBJbiB0aGUgZG9jdW1lbnRhdGlvbiwgd2UgYXJlIHVzaW5nIGBhdXRvcHJlZml4ZXJgIHRvIHNvbHZlIHRoaXMgcHJvYmxlbS5cbiAgICB0eXBlb2Ygd2luZG93ID09PSAndW5kZWZpbmVkJyA/IG51bGwgOiB2ZW5kb3JQcmVmaXhlcigpLCBwcm9wc1NvcnQoKV1cbiAgfTtcbn0iLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzXCI7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCB7IGV4YWN0UHJvcCB9IGZyb20gJ0BtYXRlcmlhbC11aS91dGlscyc7XG5pbXBvcnQgY3JlYXRlR2VuZXJhdGVDbGFzc05hbWUgZnJvbSAnLi4vY3JlYXRlR2VuZXJhdGVDbGFzc05hbWUnO1xuaW1wb3J0IHsgY3JlYXRlIH0gZnJvbSAnanNzJztcbmltcG9ydCBqc3NQcmVzZXQgZnJvbSAnLi4vanNzUHJlc2V0JzsgLy8gRGVmYXVsdCBKU1MgaW5zdGFuY2UuXG5cbnZhciBqc3MgPSBjcmVhdGUoanNzUHJlc2V0KCkpOyAvLyBVc2UgYSBzaW5nbGV0b24gb3IgdGhlIHByb3ZpZGVkIG9uZSBieSB0aGUgY29udGV4dC5cbi8vXG4vLyBUaGUgY291bnRlci1iYXNlZCBhcHByb2FjaCBkb2Vzbid0IHRvbGVyYXRlIGFueSBtaXN0YWtlLlxuLy8gSXQncyBtdWNoIHNhZmVyIHRvIHVzZSB0aGUgc2FtZSBjb3VudGVyIGV2ZXJ5d2hlcmUuXG5cbnZhciBnZW5lcmF0ZUNsYXNzTmFtZSA9IGNyZWF0ZUdlbmVyYXRlQ2xhc3NOYW1lKCk7IC8vIEV4cG9ydGVkIGZvciB0ZXN0IHB1cnBvc2VzXG5cbmV4cG9ydCB2YXIgc2hlZXRzTWFuYWdlciA9IG5ldyBNYXAoKTtcbnZhciBkZWZhdWx0T3B0aW9ucyA9IHtcbiAgZGlzYWJsZUdlbmVyYXRpb246IGZhbHNlLFxuICBnZW5lcmF0ZUNsYXNzTmFtZTogZ2VuZXJhdGVDbGFzc05hbWUsXG4gIGpzczoganNzLFxuICBzaGVldHNDYWNoZTogbnVsbCxcbiAgc2hlZXRzTWFuYWdlcjogc2hlZXRzTWFuYWdlcixcbiAgc2hlZXRzUmVnaXN0cnk6IG51bGxcbn07XG5leHBvcnQgdmFyIFN0eWxlc0NvbnRleHQgPSBSZWFjdC5jcmVhdGVDb250ZXh0KGRlZmF1bHRPcHRpb25zKTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgU3R5bGVzQ29udGV4dC5kaXNwbGF5TmFtZSA9ICdTdHlsZXNDb250ZXh0Jztcbn1cblxudmFyIGluamVjdEZpcnN0Tm9kZTtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIFN0eWxlc1Byb3ZpZGVyKHByb3BzKSB7XG4gIHZhciBjaGlsZHJlbiA9IHByb3BzLmNoaWxkcmVuLFxuICAgICAgX3Byb3BzJGluamVjdEZpcnN0ID0gcHJvcHMuaW5qZWN0Rmlyc3QsXG4gICAgICBpbmplY3RGaXJzdCA9IF9wcm9wcyRpbmplY3RGaXJzdCA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcHJvcHMkaW5qZWN0Rmlyc3QsXG4gICAgICBfcHJvcHMkZGlzYWJsZUdlbmVyYXQgPSBwcm9wcy5kaXNhYmxlR2VuZXJhdGlvbixcbiAgICAgIGRpc2FibGVHZW5lcmF0aW9uID0gX3Byb3BzJGRpc2FibGVHZW5lcmF0ID09PSB2b2lkIDAgPyBmYWxzZSA6IF9wcm9wcyRkaXNhYmxlR2VuZXJhdCxcbiAgICAgIGxvY2FsT3B0aW9ucyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhwcm9wcywgW1wiY2hpbGRyZW5cIiwgXCJpbmplY3RGaXJzdFwiLCBcImRpc2FibGVHZW5lcmF0aW9uXCJdKTtcblxuICB2YXIgb3V0ZXJPcHRpb25zID0gUmVhY3QudXNlQ29udGV4dChTdHlsZXNDb250ZXh0KTtcblxuICB2YXIgY29udGV4dCA9IF9leHRlbmRzKF9leHRlbmRzKHt9LCBvdXRlck9wdGlvbnMpLCB7fSwge1xuICAgIGRpc2FibGVHZW5lcmF0aW9uOiBkaXNhYmxlR2VuZXJhdGlvblxuICB9LCBsb2NhbE9wdGlvbnMpO1xuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgaWYgKHR5cGVvZiB3aW5kb3cgPT09ICd1bmRlZmluZWQnICYmICFjb250ZXh0LnNoZWV0c01hbmFnZXIpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ01hdGVyaWFsLVVJOiBZb3UgbmVlZCB0byB1c2UgdGhlIFNlcnZlclN0eWxlU2hlZXRzIEFQSSB3aGVuIHJlbmRlcmluZyBvbiB0aGUgc2VydmVyLicpO1xuICAgIH1cbiAgfVxuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgaWYgKGNvbnRleHQuanNzLm9wdGlvbnMuaW5zZXJ0aW9uUG9pbnQgJiYgaW5qZWN0Rmlyc3QpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ01hdGVyaWFsLVVJOiBZb3UgY2Fubm90IHVzZSBhIGN1c3RvbSBpbnNlcnRpb25Qb2ludCBhbmQgPFN0eWxlc0NvbnRleHQgaW5qZWN0Rmlyc3Q+IGF0IHRoZSBzYW1lIHRpbWUuJyk7XG4gICAgfVxuICB9XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBpZiAoaW5qZWN0Rmlyc3QgJiYgbG9jYWxPcHRpb25zLmpzcykge1xuICAgICAgY29uc29sZS5lcnJvcignTWF0ZXJpYWwtVUk6IFlvdSBjYW5ub3QgdXNlIHRoZSBqc3MgYW5kIGluamVjdEZpcnN0IHByb3BzIGF0IHRoZSBzYW1lIHRpbWUuJyk7XG4gICAgfVxuICB9XG5cbiAgaWYgKCFjb250ZXh0Lmpzcy5vcHRpb25zLmluc2VydGlvblBvaW50ICYmIGluamVjdEZpcnN0ICYmIHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgaWYgKCFpbmplY3RGaXJzdE5vZGUpIHtcbiAgICAgIHZhciBoZWFkID0gZG9jdW1lbnQuaGVhZDtcbiAgICAgIGluamVjdEZpcnN0Tm9kZSA9IGRvY3VtZW50LmNyZWF0ZUNvbW1lbnQoJ211aS1pbmplY3QtZmlyc3QnKTtcbiAgICAgIGhlYWQuaW5zZXJ0QmVmb3JlKGluamVjdEZpcnN0Tm9kZSwgaGVhZC5maXJzdENoaWxkKTtcbiAgICB9XG5cbiAgICBjb250ZXh0LmpzcyA9IGNyZWF0ZSh7XG4gICAgICBwbHVnaW5zOiBqc3NQcmVzZXQoKS5wbHVnaW5zLFxuICAgICAgaW5zZXJ0aW9uUG9pbnQ6IGluamVjdEZpcnN0Tm9kZVxuICAgIH0pO1xuICB9XG5cbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFN0eWxlc0NvbnRleHQuUHJvdmlkZXIsIHtcbiAgICB2YWx1ZTogY29udGV4dFxuICB9LCBjaGlsZHJlbik7XG59XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBTdHlsZXNQcm92aWRlci5wcm9wVHlwZXMgPSB7XG4gIC8qKlxuICAgKiBZb3VyIGNvbXBvbmVudCB0cmVlLlxuICAgKi9cbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLmlzUmVxdWlyZWQsXG5cbiAgLyoqXG4gICAqIFlvdSBjYW4gZGlzYWJsZSB0aGUgZ2VuZXJhdGlvbiBvZiB0aGUgc3R5bGVzIHdpdGggdGhpcyBvcHRpb24uXG4gICAqIEl0IGNhbiBiZSB1c2VmdWwgd2hlbiB0cmF2ZXJzaW5nIHRoZSBSZWFjdCB0cmVlIG91dHNpZGUgb2YgdGhlIEhUTUxcbiAgICogcmVuZGVyaW5nIHN0ZXAgb24gdGhlIHNlcnZlci5cbiAgICogTGV0J3Mgc2F5IHlvdSBhcmUgdXNpbmcgcmVhY3QtYXBvbGxvIHRvIGV4dHJhY3QgYWxsXG4gICAqIHRoZSBxdWVyaWVzIG1hZGUgYnkgdGhlIGludGVyZmFjZSBzZXJ2ZXItc2lkZSAtIHlvdSBjYW4gc2lnbmlmaWNhbnRseSBzcGVlZCB1cCB0aGUgdHJhdmVyc2FsIHdpdGggdGhpcyBwcm9wLlxuICAgKi9cbiAgZGlzYWJsZUdlbmVyYXRpb246IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBKU1MncyBjbGFzcyBuYW1lIGdlbmVyYXRvci5cbiAgICovXG4gIGdlbmVyYXRlQ2xhc3NOYW1lOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQnkgZGVmYXVsdCwgdGhlIHN0eWxlcyBhcmUgaW5qZWN0ZWQgbGFzdCBpbiB0aGUgPGhlYWQ+IGVsZW1lbnQgb2YgdGhlIHBhZ2UuXG4gICAqIEFzIGEgcmVzdWx0LCB0aGV5IGdhaW4gbW9yZSBzcGVjaWZpY2l0eSB0aGFuIGFueSBvdGhlciBzdHlsZSBzaGVldC5cbiAgICogSWYgeW91IHdhbnQgdG8gb3ZlcnJpZGUgTWF0ZXJpYWwtVUkncyBzdHlsZXMsIHNldCB0aGlzIHByb3AuXG4gICAqL1xuICBpbmplY3RGaXJzdDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIEpTUydzIGluc3RhbmNlLlxuICAgKi9cbiAganNzOiBQcm9wVHlwZXMub2JqZWN0LFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBzZXJ2ZXJHZW5lcmF0ZUNsYXNzTmFtZTogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICpcbiAgICogQmV0YSBmZWF0dXJlLlxuICAgKlxuICAgKiBDYWNoZSBmb3IgdGhlIHNoZWV0cy5cbiAgICovXG4gIHNoZWV0c0NhY2hlOiBQcm9wVHlwZXMub2JqZWN0LFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqXG4gICAqIFRoZSBzaGVldHNNYW5hZ2VyIGlzIHVzZWQgdG8gZGVkdXBsaWNhdGUgc3R5bGUgc2hlZXQgaW5qZWN0aW9uIGluIHRoZSBwYWdlLlxuICAgKiBJdCdzIGRlZHVwbGljYXRpbmcgdXNpbmcgdGhlICh0aGVtZSwgc3R5bGVzKSBjb3VwbGUuXG4gICAqIE9uIHRoZSBzZXJ2ZXIsIHlvdSBzaG91bGQgcHJvdmlkZSBhIG5ldyBpbnN0YW5jZSBmb3IgZWFjaCByZXF1ZXN0LlxuICAgKi9cbiAgc2hlZXRzTWFuYWdlcjogUHJvcFR5cGVzLm9iamVjdCxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKlxuICAgKiBDb2xsZWN0IHRoZSBzaGVldHMuXG4gICAqL1xuICBzaGVldHNSZWdpc3RyeTogUHJvcFR5cGVzLm9iamVjdFxufSA6IHZvaWQgMDtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gU3R5bGVzUHJvdmlkZXIucHJvcFR5cGVzID0gZXhhY3RQcm9wKFN0eWxlc1Byb3ZpZGVyLnByb3BUeXBlcykgOiB2b2lkIDA7XG59IiwiLyogZXNsaW50LWRpc2FibGUgaW1wb3J0L3ByZWZlci1kZWZhdWx0LWV4cG9ydCAqL1xuLy8gR2xvYmFsIGluZGV4IGNvdW50ZXIgdG8gcHJlc2VydmUgc291cmNlIG9yZGVyLlxuLy8gV2UgY3JlYXRlIHRoZSBzdHlsZSBzaGVldCBkdXJpbmcgdGhlIGNyZWF0aW9uIG9mIHRoZSBjb21wb25lbnQsXG4vLyBjaGlsZHJlbiBhcmUgaGFuZGxlZCBhZnRlciB0aGUgcGFyZW50cywgc28gdGhlIG9yZGVyIG9mIHN0eWxlIGVsZW1lbnRzIHdvdWxkIGJlIHBhcmVudC0+Y2hpbGQuXG4vLyBJdCBpcyBhIHByb2JsZW0gdGhvdWdoIHdoZW4gYSBwYXJlbnQgcGFzc2VzIGEgY2xhc3NOYW1lXG4vLyB3aGljaCBuZWVkcyB0byBvdmVycmlkZSBhbnkgY2hpbGQncyBzdHlsZXMuXG4vLyBTdHlsZVNoZWV0IG9mIHRoZSBjaGlsZCBoYXMgYSBoaWdoZXIgc3BlY2lmaWNpdHksIGJlY2F1c2Ugb2YgdGhlIHNvdXJjZSBvcmRlci5cbi8vIFNvIG91ciBzb2x1dGlvbiBpcyB0byByZW5kZXIgc2hlZXRzIHRoZW0gaW4gdGhlIHJldmVyc2Ugb3JkZXIgY2hpbGQtPnNoZWV0LCBzb1xuLy8gdGhhdCBwYXJlbnQgaGFzIGEgaGlnaGVyIHNwZWNpZmljaXR5LlxudmFyIGluZGV4Q291bnRlciA9IC0xZTk7XG5leHBvcnQgZnVuY3Rpb24gaW5jcmVtZW50KCkge1xuICBpbmRleENvdW50ZXIgKz0gMTtcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGlmIChpbmRleENvdW50ZXIgPj0gMCkge1xuICAgICAgY29uc29sZS53YXJuKFsnTWF0ZXJpYWwtVUk6IFlvdSBtaWdodCBoYXZlIGEgbWVtb3J5IGxlYWsuJywgJ1RoZSBpbmRleENvdW50ZXIgaXMgbm90IHN1cHBvc2VkIHRvIGdyb3cgdGhhdCBtdWNoLiddLmpvaW4oJ1xcbicpKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gaW5kZXhDb3VudGVyO1xufSIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF90eXBlb2YgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL3R5cGVvZlwiO1xuaW1wb3J0IHsgZGVlcG1lcmdlIH0gZnJvbSAnQG1hdGVyaWFsLXVpL3V0aWxzJztcbmltcG9ydCBub29wVGhlbWUgZnJvbSAnLi9ub29wVGhlbWUnO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0U3R5bGVzQ3JlYXRvcihzdHlsZXNPckNyZWF0b3IpIHtcbiAgdmFyIHRoZW1pbmdFbmFibGVkID0gdHlwZW9mIHN0eWxlc09yQ3JlYXRvciA9PT0gJ2Z1bmN0aW9uJztcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGlmIChfdHlwZW9mKHN0eWxlc09yQ3JlYXRvcikgIT09ICdvYmplY3QnICYmICF0aGVtaW5nRW5hYmxlZCkge1xuICAgICAgY29uc29sZS5lcnJvcihbJ01hdGVyaWFsLVVJOiBUaGUgYHN0eWxlc2AgYXJndW1lbnQgcHJvdmlkZWQgaXMgaW52YWxpZC4nLCAnWW91IG5lZWQgdG8gcHJvdmlkZSBhIGZ1bmN0aW9uIGdlbmVyYXRpbmcgdGhlIHN0eWxlcyBvciBhIHN0eWxlcyBvYmplY3QuJ10uam9pbignXFxuJykpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB7XG4gICAgY3JlYXRlOiBmdW5jdGlvbiBjcmVhdGUodGhlbWUsIG5hbWUpIHtcbiAgICAgIHZhciBzdHlsZXM7XG5cbiAgICAgIHRyeSB7XG4gICAgICAgIHN0eWxlcyA9IHRoZW1pbmdFbmFibGVkID8gc3R5bGVzT3JDcmVhdG9yKHRoZW1lKSA6IHN0eWxlc09yQ3JlYXRvcjtcbiAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICAgIGlmICh0aGVtaW5nRW5hYmxlZCA9PT0gdHJ1ZSAmJiB0aGVtZSA9PT0gbm9vcFRoZW1lKSB7XG4gICAgICAgICAgICAvLyBUT0RPOiBwcmVwZW5kIGVycm9yIG1lc3NhZ2UvbmFtZSBpbnN0ZWFkXG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKFsnTWF0ZXJpYWwtVUk6IFRoZSBgc3R5bGVzYCBhcmd1bWVudCBwcm92aWRlZCBpcyBpbnZhbGlkLicsICdZb3UgYXJlIHByb3ZpZGluZyBhIGZ1bmN0aW9uIHdpdGhvdXQgYSB0aGVtZSBpbiB0aGUgY29udGV4dC4nLCAnT25lIG9mIHRoZSBwYXJlbnQgZWxlbWVudHMgbmVlZHMgdG8gdXNlIGEgVGhlbWVQcm92aWRlci4nXS5qb2luKCdcXG4nKSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgdGhyb3cgZXJyO1xuICAgICAgfVxuXG4gICAgICBpZiAoIW5hbWUgfHwgIXRoZW1lLm92ZXJyaWRlcyB8fCAhdGhlbWUub3ZlcnJpZGVzW25hbWVdKSB7XG4gICAgICAgIHJldHVybiBzdHlsZXM7XG4gICAgICB9XG5cbiAgICAgIHZhciBvdmVycmlkZXMgPSB0aGVtZS5vdmVycmlkZXNbbmFtZV07XG5cbiAgICAgIHZhciBzdHlsZXNXaXRoT3ZlcnJpZGVzID0gX2V4dGVuZHMoe30sIHN0eWxlcyk7XG5cbiAgICAgIE9iamVjdC5rZXlzKG92ZXJyaWRlcykuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgICAgaWYgKCFzdHlsZXNXaXRoT3ZlcnJpZGVzW2tleV0pIHtcbiAgICAgICAgICAgIGNvbnNvbGUud2FybihbJ01hdGVyaWFsLVVJOiBZb3UgYXJlIHRyeWluZyB0byBvdmVycmlkZSBhIHN0eWxlIHRoYXQgZG9lcyBub3QgZXhpc3QuJywgXCJGaXggdGhlIGBcIi5jb25jYXQoa2V5LCBcImAga2V5IG9mIGB0aGVtZS5vdmVycmlkZXMuXCIpLmNvbmNhdChuYW1lLCBcImAuXCIpXS5qb2luKCdcXG4nKSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgc3R5bGVzV2l0aE92ZXJyaWRlc1trZXldID0gZGVlcG1lcmdlKHN0eWxlc1dpdGhPdmVycmlkZXNba2V5XSwgb3ZlcnJpZGVzW2tleV0pO1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gc3R5bGVzV2l0aE92ZXJyaWRlcztcbiAgICB9LFxuICAgIG9wdGlvbnM6IHt9XG4gIH07XG59IiwiLy8gV2UgdXNlIHRoZSBzYW1lIGVtcHR5IG9iamVjdCB0byByZWYgY291bnQgdGhlIHN0eWxlcyB0aGF0IGRvbid0IG5lZWQgYSB0aGVtZSBvYmplY3QuXG52YXIgbm9vcFRoZW1lID0ge307XG5leHBvcnQgZGVmYXVsdCBub29wVGhlbWU7IiwiaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNcIjtcbmltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IGdldER5bmFtaWNTdHlsZXMgfSBmcm9tICdqc3MnO1xuaW1wb3J0IG1lcmdlQ2xhc3NlcyBmcm9tICcuLi9tZXJnZUNsYXNzZXMnO1xuaW1wb3J0IG11bHRpS2V5U3RvcmUgZnJvbSAnLi9tdWx0aUtleVN0b3JlJztcbmltcG9ydCB1c2VUaGVtZSBmcm9tICcuLi91c2VUaGVtZSc7XG5pbXBvcnQgeyBTdHlsZXNDb250ZXh0IH0gZnJvbSAnLi4vU3R5bGVzUHJvdmlkZXInO1xuaW1wb3J0IHsgaW5jcmVtZW50IH0gZnJvbSAnLi9pbmRleENvdW50ZXInO1xuaW1wb3J0IGdldFN0eWxlc0NyZWF0b3IgZnJvbSAnLi4vZ2V0U3R5bGVzQ3JlYXRvcic7XG5pbXBvcnQgbm9vcFRoZW1lIGZyb20gJy4uL2dldFN0eWxlc0NyZWF0b3Ivbm9vcFRoZW1lJztcblxuZnVuY3Rpb24gZ2V0Q2xhc3NlcyhfcmVmLCBjbGFzc2VzLCBDb21wb25lbnQpIHtcbiAgdmFyIHN0YXRlID0gX3JlZi5zdGF0ZSxcbiAgICAgIHN0eWxlc09wdGlvbnMgPSBfcmVmLnN0eWxlc09wdGlvbnM7XG5cbiAgaWYgKHN0eWxlc09wdGlvbnMuZGlzYWJsZUdlbmVyYXRpb24pIHtcbiAgICByZXR1cm4gY2xhc3NlcyB8fCB7fTtcbiAgfVxuXG4gIGlmICghc3RhdGUuY2FjaGVDbGFzc2VzKSB7XG4gICAgc3RhdGUuY2FjaGVDbGFzc2VzID0ge1xuICAgICAgLy8gQ2FjaGUgZm9yIHRoZSBmaW5hbGl6ZWQgY2xhc3NlcyB2YWx1ZS5cbiAgICAgIHZhbHVlOiBudWxsLFxuICAgICAgLy8gQ2FjaGUgZm9yIHRoZSBsYXN0IHVzZWQgY2xhc3NlcyBwcm9wIHBvaW50ZXIuXG4gICAgICBsYXN0UHJvcDogbnVsbCxcbiAgICAgIC8vIENhY2hlIGZvciB0aGUgbGFzdCB1c2VkIHJlbmRlcmVkIGNsYXNzZXMgcG9pbnRlci5cbiAgICAgIGxhc3RKU1M6IHt9XG4gICAgfTtcbiAgfSAvLyBUcmFja3MgaWYgZWl0aGVyIHRoZSByZW5kZXJlZCBjbGFzc2VzIG9yIGNsYXNzZXMgcHJvcCBoYXMgY2hhbmdlZCxcbiAgLy8gcmVxdWlyaW5nIHRoZSBnZW5lcmF0aW9uIG9mIGEgbmV3IGZpbmFsaXplZCBjbGFzc2VzIG9iamVjdC5cblxuXG4gIHZhciBnZW5lcmF0ZSA9IGZhbHNlO1xuXG4gIGlmIChzdGF0ZS5jbGFzc2VzICE9PSBzdGF0ZS5jYWNoZUNsYXNzZXMubGFzdEpTUykge1xuICAgIHN0YXRlLmNhY2hlQ2xhc3Nlcy5sYXN0SlNTID0gc3RhdGUuY2xhc3NlcztcbiAgICBnZW5lcmF0ZSA9IHRydWU7XG4gIH1cblxuICBpZiAoY2xhc3NlcyAhPT0gc3RhdGUuY2FjaGVDbGFzc2VzLmxhc3RQcm9wKSB7XG4gICAgc3RhdGUuY2FjaGVDbGFzc2VzLmxhc3RQcm9wID0gY2xhc3NlcztcbiAgICBnZW5lcmF0ZSA9IHRydWU7XG4gIH1cblxuICBpZiAoZ2VuZXJhdGUpIHtcbiAgICBzdGF0ZS5jYWNoZUNsYXNzZXMudmFsdWUgPSBtZXJnZUNsYXNzZXMoe1xuICAgICAgYmFzZUNsYXNzZXM6IHN0YXRlLmNhY2hlQ2xhc3Nlcy5sYXN0SlNTLFxuICAgICAgbmV3Q2xhc3NlczogY2xhc3NlcyxcbiAgICAgIENvbXBvbmVudDogQ29tcG9uZW50XG4gICAgfSk7XG4gIH1cblxuICByZXR1cm4gc3RhdGUuY2FjaGVDbGFzc2VzLnZhbHVlO1xufVxuXG5mdW5jdGlvbiBhdHRhY2goX3JlZjIsIHByb3BzKSB7XG4gIHZhciBzdGF0ZSA9IF9yZWYyLnN0YXRlLFxuICAgICAgdGhlbWUgPSBfcmVmMi50aGVtZSxcbiAgICAgIHN0eWxlc09wdGlvbnMgPSBfcmVmMi5zdHlsZXNPcHRpb25zLFxuICAgICAgc3R5bGVzQ3JlYXRvciA9IF9yZWYyLnN0eWxlc0NyZWF0b3IsXG4gICAgICBuYW1lID0gX3JlZjIubmFtZTtcblxuICBpZiAoc3R5bGVzT3B0aW9ucy5kaXNhYmxlR2VuZXJhdGlvbikge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHZhciBzaGVldE1hbmFnZXIgPSBtdWx0aUtleVN0b3JlLmdldChzdHlsZXNPcHRpb25zLnNoZWV0c01hbmFnZXIsIHN0eWxlc0NyZWF0b3IsIHRoZW1lKTtcblxuICBpZiAoIXNoZWV0TWFuYWdlcikge1xuICAgIHNoZWV0TWFuYWdlciA9IHtcbiAgICAgIHJlZnM6IDAsXG4gICAgICBzdGF0aWNTaGVldDogbnVsbCxcbiAgICAgIGR5bmFtaWNTdHlsZXM6IG51bGxcbiAgICB9O1xuICAgIG11bHRpS2V5U3RvcmUuc2V0KHN0eWxlc09wdGlvbnMuc2hlZXRzTWFuYWdlciwgc3R5bGVzQ3JlYXRvciwgdGhlbWUsIHNoZWV0TWFuYWdlcik7XG4gIH1cblxuICB2YXIgb3B0aW9ucyA9IF9leHRlbmRzKF9leHRlbmRzKF9leHRlbmRzKHt9LCBzdHlsZXNDcmVhdG9yLm9wdGlvbnMpLCBzdHlsZXNPcHRpb25zKSwge30sIHtcbiAgICB0aGVtZTogdGhlbWUsXG4gICAgZmxpcDogdHlwZW9mIHN0eWxlc09wdGlvbnMuZmxpcCA9PT0gJ2Jvb2xlYW4nID8gc3R5bGVzT3B0aW9ucy5mbGlwIDogdGhlbWUuZGlyZWN0aW9uID09PSAncnRsJ1xuICB9KTtcblxuICBvcHRpb25zLmdlbmVyYXRlSWQgPSBvcHRpb25zLnNlcnZlckdlbmVyYXRlQ2xhc3NOYW1lIHx8IG9wdGlvbnMuZ2VuZXJhdGVDbGFzc05hbWU7XG4gIHZhciBzaGVldHNSZWdpc3RyeSA9IHN0eWxlc09wdGlvbnMuc2hlZXRzUmVnaXN0cnk7XG5cbiAgaWYgKHNoZWV0TWFuYWdlci5yZWZzID09PSAwKSB7XG4gICAgdmFyIHN0YXRpY1NoZWV0O1xuXG4gICAgaWYgKHN0eWxlc09wdGlvbnMuc2hlZXRzQ2FjaGUpIHtcbiAgICAgIHN0YXRpY1NoZWV0ID0gbXVsdGlLZXlTdG9yZS5nZXQoc3R5bGVzT3B0aW9ucy5zaGVldHNDYWNoZSwgc3R5bGVzQ3JlYXRvciwgdGhlbWUpO1xuICAgIH1cblxuICAgIHZhciBzdHlsZXMgPSBzdHlsZXNDcmVhdG9yLmNyZWF0ZSh0aGVtZSwgbmFtZSk7XG5cbiAgICBpZiAoIXN0YXRpY1NoZWV0KSB7XG4gICAgICBzdGF0aWNTaGVldCA9IHN0eWxlc09wdGlvbnMuanNzLmNyZWF0ZVN0eWxlU2hlZXQoc3R5bGVzLCBfZXh0ZW5kcyh7XG4gICAgICAgIGxpbms6IGZhbHNlXG4gICAgICB9LCBvcHRpb25zKSk7XG4gICAgICBzdGF0aWNTaGVldC5hdHRhY2goKTtcblxuICAgICAgaWYgKHN0eWxlc09wdGlvbnMuc2hlZXRzQ2FjaGUpIHtcbiAgICAgICAgbXVsdGlLZXlTdG9yZS5zZXQoc3R5bGVzT3B0aW9ucy5zaGVldHNDYWNoZSwgc3R5bGVzQ3JlYXRvciwgdGhlbWUsIHN0YXRpY1NoZWV0KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoc2hlZXRzUmVnaXN0cnkpIHtcbiAgICAgIHNoZWV0c1JlZ2lzdHJ5LmFkZChzdGF0aWNTaGVldCk7XG4gICAgfVxuXG4gICAgc2hlZXRNYW5hZ2VyLnN0YXRpY1NoZWV0ID0gc3RhdGljU2hlZXQ7XG4gICAgc2hlZXRNYW5hZ2VyLmR5bmFtaWNTdHlsZXMgPSBnZXREeW5hbWljU3R5bGVzKHN0eWxlcyk7XG4gIH1cblxuICBpZiAoc2hlZXRNYW5hZ2VyLmR5bmFtaWNTdHlsZXMpIHtcbiAgICB2YXIgZHluYW1pY1NoZWV0ID0gc3R5bGVzT3B0aW9ucy5qc3MuY3JlYXRlU3R5bGVTaGVldChzaGVldE1hbmFnZXIuZHluYW1pY1N0eWxlcywgX2V4dGVuZHMoe1xuICAgICAgbGluazogdHJ1ZVxuICAgIH0sIG9wdGlvbnMpKTtcbiAgICBkeW5hbWljU2hlZXQudXBkYXRlKHByb3BzKTtcbiAgICBkeW5hbWljU2hlZXQuYXR0YWNoKCk7XG4gICAgc3RhdGUuZHluYW1pY1NoZWV0ID0gZHluYW1pY1NoZWV0O1xuICAgIHN0YXRlLmNsYXNzZXMgPSBtZXJnZUNsYXNzZXMoe1xuICAgICAgYmFzZUNsYXNzZXM6IHNoZWV0TWFuYWdlci5zdGF0aWNTaGVldC5jbGFzc2VzLFxuICAgICAgbmV3Q2xhc3NlczogZHluYW1pY1NoZWV0LmNsYXNzZXNcbiAgICB9KTtcblxuICAgIGlmIChzaGVldHNSZWdpc3RyeSkge1xuICAgICAgc2hlZXRzUmVnaXN0cnkuYWRkKGR5bmFtaWNTaGVldCk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHN0YXRlLmNsYXNzZXMgPSBzaGVldE1hbmFnZXIuc3RhdGljU2hlZXQuY2xhc3NlcztcbiAgfVxuXG4gIHNoZWV0TWFuYWdlci5yZWZzICs9IDE7XG59XG5cbmZ1bmN0aW9uIHVwZGF0ZShfcmVmMywgcHJvcHMpIHtcbiAgdmFyIHN0YXRlID0gX3JlZjMuc3RhdGU7XG5cbiAgaWYgKHN0YXRlLmR5bmFtaWNTaGVldCkge1xuICAgIHN0YXRlLmR5bmFtaWNTaGVldC51cGRhdGUocHJvcHMpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGRldGFjaChfcmVmNCkge1xuICB2YXIgc3RhdGUgPSBfcmVmNC5zdGF0ZSxcbiAgICAgIHRoZW1lID0gX3JlZjQudGhlbWUsXG4gICAgICBzdHlsZXNPcHRpb25zID0gX3JlZjQuc3R5bGVzT3B0aW9ucyxcbiAgICAgIHN0eWxlc0NyZWF0b3IgPSBfcmVmNC5zdHlsZXNDcmVhdG9yO1xuXG4gIGlmIChzdHlsZXNPcHRpb25zLmRpc2FibGVHZW5lcmF0aW9uKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdmFyIHNoZWV0TWFuYWdlciA9IG11bHRpS2V5U3RvcmUuZ2V0KHN0eWxlc09wdGlvbnMuc2hlZXRzTWFuYWdlciwgc3R5bGVzQ3JlYXRvciwgdGhlbWUpO1xuICBzaGVldE1hbmFnZXIucmVmcyAtPSAxO1xuICB2YXIgc2hlZXRzUmVnaXN0cnkgPSBzdHlsZXNPcHRpb25zLnNoZWV0c1JlZ2lzdHJ5O1xuXG4gIGlmIChzaGVldE1hbmFnZXIucmVmcyA9PT0gMCkge1xuICAgIG11bHRpS2V5U3RvcmUuZGVsZXRlKHN0eWxlc09wdGlvbnMuc2hlZXRzTWFuYWdlciwgc3R5bGVzQ3JlYXRvciwgdGhlbWUpO1xuICAgIHN0eWxlc09wdGlvbnMuanNzLnJlbW92ZVN0eWxlU2hlZXQoc2hlZXRNYW5hZ2VyLnN0YXRpY1NoZWV0KTtcblxuICAgIGlmIChzaGVldHNSZWdpc3RyeSkge1xuICAgICAgc2hlZXRzUmVnaXN0cnkucmVtb3ZlKHNoZWV0TWFuYWdlci5zdGF0aWNTaGVldCk7XG4gICAgfVxuICB9XG5cbiAgaWYgKHN0YXRlLmR5bmFtaWNTaGVldCkge1xuICAgIHN0eWxlc09wdGlvbnMuanNzLnJlbW92ZVN0eWxlU2hlZXQoc3RhdGUuZHluYW1pY1NoZWV0KTtcblxuICAgIGlmIChzaGVldHNSZWdpc3RyeSkge1xuICAgICAgc2hlZXRzUmVnaXN0cnkucmVtb3ZlKHN0YXRlLmR5bmFtaWNTaGVldCk7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIHVzZVN5bmNocm9ub3VzRWZmZWN0KGZ1bmMsIHZhbHVlcykge1xuICB2YXIga2V5ID0gUmVhY3QudXNlUmVmKFtdKTtcbiAgdmFyIG91dHB1dDsgLy8gU3RvcmUgXCJnZW5lcmF0aW9uXCIga2V5LiBKdXN0IHJldHVybnMgYSBuZXcgb2JqZWN0IGV2ZXJ5IHRpbWVcblxuICB2YXIgY3VycmVudEtleSA9IFJlYWN0LnVzZU1lbW8oZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB7fTtcbiAgfSwgdmFsdWVzKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSByZWFjdC1ob29rcy9leGhhdXN0aXZlLWRlcHNcbiAgLy8gXCJ0aGUgZmlyc3QgcmVuZGVyXCIsIG9yIFwibWVtbyBkcm9wcGVkIHRoZSB2YWx1ZVwiXG5cbiAgaWYgKGtleS5jdXJyZW50ICE9PSBjdXJyZW50S2V5KSB7XG4gICAga2V5LmN1cnJlbnQgPSBjdXJyZW50S2V5O1xuICAgIG91dHB1dCA9IGZ1bmMoKTtcbiAgfVxuXG4gIFJlYWN0LnVzZUVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmIChvdXRwdXQpIHtcbiAgICAgICAgb3V0cHV0KCk7XG4gICAgICB9XG4gICAgfTtcbiAgfSwgW2N1cnJlbnRLZXldIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgcmVhY3QtaG9va3MvZXhoYXVzdGl2ZS1kZXBzXG4gICk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIG1ha2VTdHlsZXMoc3R5bGVzT3JDcmVhdG9yKSB7XG4gIHZhciBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB7fTtcblxuICB2YXIgbmFtZSA9IG9wdGlvbnMubmFtZSxcbiAgICAgIGNsYXNzTmFtZVByZWZpeE9wdGlvbiA9IG9wdGlvbnMuY2xhc3NOYW1lUHJlZml4LFxuICAgICAgQ29tcG9uZW50ID0gb3B0aW9ucy5Db21wb25lbnQsXG4gICAgICBfb3B0aW9ucyRkZWZhdWx0VGhlbWUgPSBvcHRpb25zLmRlZmF1bHRUaGVtZSxcbiAgICAgIGRlZmF1bHRUaGVtZSA9IF9vcHRpb25zJGRlZmF1bHRUaGVtZSA9PT0gdm9pZCAwID8gbm9vcFRoZW1lIDogX29wdGlvbnMkZGVmYXVsdFRoZW1lLFxuICAgICAgc3R5bGVzT3B0aW9uczIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMob3B0aW9ucywgW1wibmFtZVwiLCBcImNsYXNzTmFtZVByZWZpeFwiLCBcIkNvbXBvbmVudFwiLCBcImRlZmF1bHRUaGVtZVwiXSk7XG5cbiAgdmFyIHN0eWxlc0NyZWF0b3IgPSBnZXRTdHlsZXNDcmVhdG9yKHN0eWxlc09yQ3JlYXRvcik7XG4gIHZhciBjbGFzc05hbWVQcmVmaXggPSBuYW1lIHx8IGNsYXNzTmFtZVByZWZpeE9wdGlvbiB8fCAnbWFrZVN0eWxlcyc7XG4gIHN0eWxlc0NyZWF0b3Iub3B0aW9ucyA9IHtcbiAgICBpbmRleDogaW5jcmVtZW50KCksXG4gICAgbmFtZTogbmFtZSxcbiAgICBtZXRhOiBjbGFzc05hbWVQcmVmaXgsXG4gICAgY2xhc3NOYW1lUHJlZml4OiBjbGFzc05hbWVQcmVmaXhcbiAgfTtcblxuICB2YXIgdXNlU3R5bGVzID0gZnVuY3Rpb24gdXNlU3R5bGVzKCkge1xuICAgIHZhciBwcm9wcyA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDoge307XG4gICAgdmFyIHRoZW1lID0gdXNlVGhlbWUoKSB8fCBkZWZhdWx0VGhlbWU7XG5cbiAgICB2YXIgc3R5bGVzT3B0aW9ucyA9IF9leHRlbmRzKF9leHRlbmRzKHt9LCBSZWFjdC51c2VDb250ZXh0KFN0eWxlc0NvbnRleHQpKSwgc3R5bGVzT3B0aW9uczIpO1xuXG4gICAgdmFyIGluc3RhbmNlID0gUmVhY3QudXNlUmVmKCk7XG4gICAgdmFyIHNob3VsZFVwZGF0ZSA9IFJlYWN0LnVzZVJlZigpO1xuICAgIHVzZVN5bmNocm9ub3VzRWZmZWN0KGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBjdXJyZW50ID0ge1xuICAgICAgICBuYW1lOiBuYW1lLFxuICAgICAgICBzdGF0ZToge30sXG4gICAgICAgIHN0eWxlc0NyZWF0b3I6IHN0eWxlc0NyZWF0b3IsXG4gICAgICAgIHN0eWxlc09wdGlvbnM6IHN0eWxlc09wdGlvbnMsXG4gICAgICAgIHRoZW1lOiB0aGVtZVxuICAgICAgfTtcbiAgICAgIGF0dGFjaChjdXJyZW50LCBwcm9wcyk7XG4gICAgICBzaG91bGRVcGRhdGUuY3VycmVudCA9IGZhbHNlO1xuICAgICAgaW5zdGFuY2UuY3VycmVudCA9IGN1cnJlbnQ7XG4gICAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgICBkZXRhY2goY3VycmVudCk7XG4gICAgICB9O1xuICAgIH0sIFt0aGVtZSwgc3R5bGVzQ3JlYXRvcl0pO1xuICAgIFJlYWN0LnVzZUVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAoc2hvdWxkVXBkYXRlLmN1cnJlbnQpIHtcbiAgICAgICAgdXBkYXRlKGluc3RhbmNlLmN1cnJlbnQsIHByb3BzKTtcbiAgICAgIH1cblxuICAgICAgc2hvdWxkVXBkYXRlLmN1cnJlbnQgPSB0cnVlO1xuICAgIH0pO1xuICAgIHZhciBjbGFzc2VzID0gZ2V0Q2xhc3NlcyhpbnN0YW5jZS5jdXJyZW50LCBwcm9wcy5jbGFzc2VzLCBDb21wb25lbnQpO1xuXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWFjdC1ob29rcy9ydWxlcy1vZi1ob29rc1xuICAgICAgUmVhY3QudXNlRGVidWdWYWx1ZShjbGFzc2VzKTtcbiAgICB9XG5cbiAgICByZXR1cm4gY2xhc3NlcztcbiAgfTtcblxuICByZXR1cm4gdXNlU3R5bGVzO1xufSIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG52YXIgVGhlbWVDb250ZXh0ID0gUmVhY3QuY3JlYXRlQ29udGV4dChudWxsKTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgVGhlbWVDb250ZXh0LmRpc3BsYXlOYW1lID0gJ1RoZW1lQ29udGV4dCc7XG59XG5cbmV4cG9ydCBkZWZhdWx0IFRoZW1lQ29udGV4dDsiLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFRoZW1lQ29udGV4dCBmcm9tICcuL1RoZW1lQ29udGV4dCc7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB1c2VUaGVtZSgpIHtcbiAgdmFyIHRoZW1lID0gUmVhY3QudXNlQ29udGV4dChUaGVtZUNvbnRleHQpO1xuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlYWN0LWhvb2tzL3J1bGVzLW9mLWhvb2tzXG4gICAgUmVhY3QudXNlRGVidWdWYWx1ZSh0aGVtZSk7XG4gIH1cblxuICByZXR1cm4gdGhlbWU7XG59IiwiaW1wb3J0IF9zbGljZWRUb0FycmF5IGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9zbGljZWRUb0FycmF5XCI7XG5pbXBvcnQgcmVzcG9uc2l2ZVByb3BUeXBlIGZyb20gJy4vcmVzcG9uc2l2ZVByb3BUeXBlJztcbmltcG9ydCB7IGhhbmRsZUJyZWFrcG9pbnRzIH0gZnJvbSAnLi9icmVha3BvaW50cyc7XG5pbXBvcnQgbWVyZ2UgZnJvbSAnLi9tZXJnZSc7XG5pbXBvcnQgbWVtb2l6ZSBmcm9tICcuL21lbW9pemUnO1xudmFyIHByb3BlcnRpZXMgPSB7XG4gIG06ICdtYXJnaW4nLFxuICBwOiAncGFkZGluZydcbn07XG52YXIgZGlyZWN0aW9ucyA9IHtcbiAgdDogJ1RvcCcsXG4gIHI6ICdSaWdodCcsXG4gIGI6ICdCb3R0b20nLFxuICBsOiAnTGVmdCcsXG4gIHg6IFsnTGVmdCcsICdSaWdodCddLFxuICB5OiBbJ1RvcCcsICdCb3R0b20nXVxufTtcbnZhciBhbGlhc2VzID0ge1xuICBtYXJnaW5YOiAnbXgnLFxuICBtYXJnaW5ZOiAnbXknLFxuICBwYWRkaW5nWDogJ3B4JyxcbiAgcGFkZGluZ1k6ICdweSdcbn07IC8vIG1lbW9pemUoKSBpbXBhY3Q6XG4vLyBGcm9tIDMwMCwwMDAgb3BzL3NlY1xuLy8gVG8gMzUwLDAwMCBvcHMvc2VjXG5cbnZhciBnZXRDc3NQcm9wZXJ0aWVzID0gbWVtb2l6ZShmdW5jdGlvbiAocHJvcCkge1xuICAvLyBJdCdzIG5vdCBhIHNob3J0aGFuZCBub3RhdGlvbi5cbiAgaWYgKHByb3AubGVuZ3RoID4gMikge1xuICAgIGlmIChhbGlhc2VzW3Byb3BdKSB7XG4gICAgICBwcm9wID0gYWxpYXNlc1twcm9wXTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIFtwcm9wXTtcbiAgICB9XG4gIH1cblxuICB2YXIgX3Byb3Akc3BsaXQgPSBwcm9wLnNwbGl0KCcnKSxcbiAgICAgIF9wcm9wJHNwbGl0MiA9IF9zbGljZWRUb0FycmF5KF9wcm9wJHNwbGl0LCAyKSxcbiAgICAgIGEgPSBfcHJvcCRzcGxpdDJbMF0sXG4gICAgICBiID0gX3Byb3Akc3BsaXQyWzFdO1xuXG4gIHZhciBwcm9wZXJ0eSA9IHByb3BlcnRpZXNbYV07XG4gIHZhciBkaXJlY3Rpb24gPSBkaXJlY3Rpb25zW2JdIHx8ICcnO1xuICByZXR1cm4gQXJyYXkuaXNBcnJheShkaXJlY3Rpb24pID8gZGlyZWN0aW9uLm1hcChmdW5jdGlvbiAoZGlyKSB7XG4gICAgcmV0dXJuIHByb3BlcnR5ICsgZGlyO1xuICB9KSA6IFtwcm9wZXJ0eSArIGRpcmVjdGlvbl07XG59KTtcbnZhciBzcGFjaW5nS2V5cyA9IFsnbScsICdtdCcsICdtcicsICdtYicsICdtbCcsICdteCcsICdteScsICdwJywgJ3B0JywgJ3ByJywgJ3BiJywgJ3BsJywgJ3B4JywgJ3B5JywgJ21hcmdpbicsICdtYXJnaW5Ub3AnLCAnbWFyZ2luUmlnaHQnLCAnbWFyZ2luQm90dG9tJywgJ21hcmdpbkxlZnQnLCAnbWFyZ2luWCcsICdtYXJnaW5ZJywgJ3BhZGRpbmcnLCAncGFkZGluZ1RvcCcsICdwYWRkaW5nUmlnaHQnLCAncGFkZGluZ0JvdHRvbScsICdwYWRkaW5nTGVmdCcsICdwYWRkaW5nWCcsICdwYWRkaW5nWSddO1xuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVVuYXJ5U3BhY2luZyh0aGVtZSkge1xuICB2YXIgdGhlbWVTcGFjaW5nID0gdGhlbWUuc3BhY2luZyB8fCA4O1xuXG4gIGlmICh0eXBlb2YgdGhlbWVTcGFjaW5nID09PSAnbnVtYmVyJykge1xuICAgIHJldHVybiBmdW5jdGlvbiAoYWJzKSB7XG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICBpZiAodHlwZW9mIGFicyAhPT0gJ251bWJlcicpIHtcbiAgICAgICAgICBjb25zb2xlLmVycm9yKFwiTWF0ZXJpYWwtVUk6IEV4cGVjdGVkIHNwYWNpbmcgYXJndW1lbnQgdG8gYmUgYSBudW1iZXIsIGdvdCBcIi5jb25jYXQoYWJzLCBcIi5cIikpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGVtZVNwYWNpbmcgKiBhYnM7XG4gICAgfTtcbiAgfVxuXG4gIGlmIChBcnJheS5pc0FycmF5KHRoZW1lU3BhY2luZykpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKGFicykge1xuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgaWYgKGFicyA+IHRoZW1lU3BhY2luZy5sZW5ndGggLSAxKSB7XG4gICAgICAgICAgY29uc29sZS5lcnJvcihbXCJNYXRlcmlhbC1VSTogVGhlIHZhbHVlIHByb3ZpZGVkIChcIi5jb25jYXQoYWJzLCBcIikgb3ZlcmZsb3dzLlwiKSwgXCJUaGUgc3VwcG9ydGVkIHZhbHVlcyBhcmU6IFwiLmNvbmNhdChKU09OLnN0cmluZ2lmeSh0aGVtZVNwYWNpbmcpLCBcIi5cIiksIFwiXCIuY29uY2F0KGFicywgXCIgPiBcIikuY29uY2F0KHRoZW1lU3BhY2luZy5sZW5ndGggLSAxLCBcIiwgeW91IG5lZWQgdG8gYWRkIHRoZSBtaXNzaW5nIHZhbHVlcy5cIildLmpvaW4oJ1xcbicpKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhlbWVTcGFjaW5nW2Fic107XG4gICAgfTtcbiAgfVxuXG4gIGlmICh0eXBlb2YgdGhlbWVTcGFjaW5nID09PSAnZnVuY3Rpb24nKSB7XG4gICAgcmV0dXJuIHRoZW1lU3BhY2luZztcbiAgfVxuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgY29uc29sZS5lcnJvcihbXCJNYXRlcmlhbC1VSTogVGhlIGB0aGVtZS5zcGFjaW5nYCB2YWx1ZSAoXCIuY29uY2F0KHRoZW1lU3BhY2luZywgXCIpIGlzIGludmFsaWQuXCIpLCAnSXQgc2hvdWxkIGJlIGEgbnVtYmVyLCBhbiBhcnJheSBvciBhIGZ1bmN0aW9uLiddLmpvaW4oJ1xcbicpKTtcbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfTtcbn1cblxuZnVuY3Rpb24gZ2V0VmFsdWUodHJhbnNmb3JtZXIsIHByb3BWYWx1ZSkge1xuICBpZiAodHlwZW9mIHByb3BWYWx1ZSA9PT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gcHJvcFZhbHVlO1xuICB9XG5cbiAgdmFyIGFicyA9IE1hdGguYWJzKHByb3BWYWx1ZSk7XG4gIHZhciB0cmFuc2Zvcm1lZCA9IHRyYW5zZm9ybWVyKGFicyk7XG5cbiAgaWYgKHByb3BWYWx1ZSA+PSAwKSB7XG4gICAgcmV0dXJuIHRyYW5zZm9ybWVkO1xuICB9XG5cbiAgaWYgKHR5cGVvZiB0cmFuc2Zvcm1lZCA9PT0gJ251bWJlcicpIHtcbiAgICByZXR1cm4gLXRyYW5zZm9ybWVkO1xuICB9XG5cbiAgcmV0dXJuIFwiLVwiLmNvbmNhdCh0cmFuc2Zvcm1lZCk7XG59XG5cbmZ1bmN0aW9uIGdldFN0eWxlRnJvbVByb3BWYWx1ZShjc3NQcm9wZXJ0aWVzLCB0cmFuc2Zvcm1lcikge1xuICByZXR1cm4gZnVuY3Rpb24gKHByb3BWYWx1ZSkge1xuICAgIHJldHVybiBjc3NQcm9wZXJ0aWVzLnJlZHVjZShmdW5jdGlvbiAoYWNjLCBjc3NQcm9wZXJ0eSkge1xuICAgICAgYWNjW2Nzc1Byb3BlcnR5XSA9IGdldFZhbHVlKHRyYW5zZm9ybWVyLCBwcm9wVmFsdWUpO1xuICAgICAgcmV0dXJuIGFjYztcbiAgICB9LCB7fSk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIHNwYWNpbmcocHJvcHMpIHtcbiAgdmFyIHRoZW1lID0gcHJvcHMudGhlbWU7XG4gIHZhciB0cmFuc2Zvcm1lciA9IGNyZWF0ZVVuYXJ5U3BhY2luZyh0aGVtZSk7XG4gIHJldHVybiBPYmplY3Qua2V5cyhwcm9wcykubWFwKGZ1bmN0aW9uIChwcm9wKSB7XG4gICAgLy8gVXNpbmcgYSBoYXNoIGNvbXB1dGF0aW9uIG92ZXIgYW4gYXJyYXkgaXRlcmF0aW9uIGNvdWxkIGJlIGZhc3RlciwgYnV0IHdpdGggb25seSAyOCBpdGVtcyxcbiAgICAvLyBpdCdzIGRvZXNuJ3Qgd29ydGggdGhlIGJ1bmRsZSBzaXplLlxuICAgIGlmIChzcGFjaW5nS2V5cy5pbmRleE9mKHByb3ApID09PSAtMSkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgdmFyIGNzc1Byb3BlcnRpZXMgPSBnZXRDc3NQcm9wZXJ0aWVzKHByb3ApO1xuICAgIHZhciBzdHlsZUZyb21Qcm9wVmFsdWUgPSBnZXRTdHlsZUZyb21Qcm9wVmFsdWUoY3NzUHJvcGVydGllcywgdHJhbnNmb3JtZXIpO1xuICAgIHZhciBwcm9wVmFsdWUgPSBwcm9wc1twcm9wXTtcbiAgICByZXR1cm4gaGFuZGxlQnJlYWtwb2ludHMocHJvcHMsIHByb3BWYWx1ZSwgc3R5bGVGcm9tUHJvcFZhbHVlKTtcbiAgfSkucmVkdWNlKG1lcmdlLCB7fSk7XG59XG5cbnNwYWNpbmcucHJvcFR5cGVzID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IHNwYWNpbmdLZXlzLnJlZHVjZShmdW5jdGlvbiAob2JqLCBrZXkpIHtcbiAgb2JqW2tleV0gPSByZXNwb25zaXZlUHJvcFR5cGU7XG4gIHJldHVybiBvYmo7XG59LCB7fSkgOiB7fTtcbnNwYWNpbmcuZmlsdGVyUHJvcHMgPSBzcGFjaW5nS2V5cztcbmV4cG9ydCBkZWZhdWx0IHNwYWNpbmc7IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gbWVtb2l6ZShmbikge1xuICB2YXIgY2FjaGUgPSB7fTtcbiAgcmV0dXJuIGZ1bmN0aW9uIChhcmcpIHtcbiAgICBpZiAoY2FjaGVbYXJnXSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBjYWNoZVthcmddID0gZm4oYXJnKTtcbiAgICB9XG5cbiAgICByZXR1cm4gY2FjaGVbYXJnXTtcbiAgfTtcbn0iXSwic291cmNlUm9vdCI6IiJ9